==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x32 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x32)))))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x13)))
 (let (($x19 (and $x12 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x36))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x32 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x32)))))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x13)))
 (let (($x19 (and $x12 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x36))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-mem.alloc @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000001))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x01))
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv0 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x78 (= true false)))
 (let (($x79 (= $x78 true)))
 (let (($x73 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x72 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x74 (= $x72 $x73)))
 (let (($x70 (= (_ bv0 32) (_ bv0 32))))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x71 (= $x69 $x70)))
 (let (($x75 (and $x71 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x63 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x53 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x18 $x51)))
 (let (($x55 (and $x52 $x54)))
 (let (($x19 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x19 $x55)))
 (let (($x31 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x31)))))
 (let (($x57 (and $x11 $x56)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x24 (concat ?x33 (concat ?x32 ?x15)))))
 (let (($x40 (= ?x27 input.dst.llvm-%val)))
 (let (($x29 (= $x40 true)))
 (let (($x41 (= $x29 true)))
 (let (($x61 (and $x41 $x60)))
 (let (($x67 (and $x61 $x66)))
 (let (($x77 (and $x67 $x76)))
 (let (($x80 (=> $x77 $x79)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x45 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x16 $x45) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x80)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x78 (= true false)))
 (let (($x79 (= $x78 true)))
 (let (($x73 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x72 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x74 (= $x72 $x73)))
 (let (($x70 (= (_ bv0 32) (_ bv0 32))))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x71 (= $x69 $x70)))
 (let (($x75 (and $x71 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x63 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x53 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x18 $x51)))
 (let (($x55 (and $x52 $x54)))
 (let (($x19 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x19 $x55)))
 (let (($x31 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x31)))))
 (let (($x57 (and $x11 $x56)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x24 (concat ?x33 (concat ?x32 ?x15)))))
 (let (($x40 (= ?x27 input.dst.llvm-%val)))
 (let (($x29 (= $x40 true)))
 (let (($x41 (= $x29 true)))
 (let (($x61 (and $x41 $x60)))
 (let (($x67 (and $x61 $x66)))
 (let (($x77 (and $x67 $x76)))
 (let (($x80 (=> $x77 $x79)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x45 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x16 $x45) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x80)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x82 (= true false)))
 (let (($x83 (= $x82 true)))
 (let (($x72 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x76 (not $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x75 (not $x69)))
 (let (($x79 (and (and (and (= $x69 (= (_ bv0 32) (_ bv0 32))) (= $x72 (bvuge (_ bv0 32) (_ bv1 32)))) $x75) $x76)))
 (let (($x80 (= $x79 true)))
 (let (($x63 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x53 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x6 $x51)))
 (let (($x55 (and $x52 $x54)))
 (let (($x14 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x14 $x55)))
 (let (($x36 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x57 (and $x18 $x56)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x35 (concat ?x23 (concat ?x44 ?x34)))))
 (let (($x17 (= ?x7 input.dst.llvm-%val)))
 (let (($x40 (= $x17 true)))
 (let (($x29 (= $x40 true)))
 (let (($x61 (and $x29 $x60)))
 (let (($x67 (and $x61 $x66)))
 (let (($x81 (and $x67 $x80)))
 (let (($x84 (=> $x81 $x83)))
 (let (($x26 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x26 (not $x84)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x82 (= true false)))
 (let (($x83 (= $x82 true)))
 (let (($x72 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x76 (not $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x75 (not $x69)))
 (let (($x79 (and (and (and (= $x69 (= (_ bv0 32) (_ bv0 32))) (= $x72 (bvuge (_ bv0 32) (_ bv1 32)))) $x75) $x76)))
 (let (($x80 (= $x79 true)))
 (let (($x63 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x53 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x6 $x51)))
 (let (($x55 (and $x52 $x54)))
 (let (($x14 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x14 $x55)))
 (let (($x36 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x57 (and $x18 $x56)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x35 (concat ?x23 (concat ?x44 ?x34)))))
 (let (($x17 (= ?x7 input.dst.llvm-%val)))
 (let (($x40 (= $x17 true)))
 (let (($x29 (= $x40 true)))
 (let (($x61 (and $x29 $x60)))
 (let (($x67 (and $x61 $x66)))
 (let (($x81 (and $x67 $x80)))
 (let (($x84 (=> $x81 $x83)))
 (let (($x26 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x26 (not $x84)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x80 (= true false)))
 (let (($x81 (= $x80 true)))
 (let (($x74 (= false false)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x77 (=> $x68 $x74)))
 (let (($x72 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x73 (= $x71 $x72)))
 (let (($x69 (= (_ bv0 32) (_ bv0 32))))
 (let (($x70 (= $x68 $x69)))
 (let (($x78 (and (and $x70 $x73) $x77)))
 (let (($x76 (= $x78 true)))
 (let (($x62 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let ((?x52 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x28 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x42 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x42 $x54)))
 (let (($x36 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x56 (and $x14 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x49 (concat ?x25 (concat ?x47 ?x24)))))
 (let (($x27 (= ?x20 input.dst.llvm-%val)))
 (let (($x17 (= $x27 true)))
 (let (($x40 (= $x17 true)))
 (let (($x60 (and $x40 $x59)))
 (let (($x66 (and $x60 $x65)))
 (let (($x79 (and $x66 $x76)))
 (let (($x82 (=> $x79 $x81)))
 (let (($x43 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x16 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x16) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x43 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x80 (= true false)))
 (let (($x81 (= $x80 true)))
 (let (($x74 (= false false)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x77 (=> $x68 $x74)))
 (let (($x72 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x73 (= $x71 $x72)))
 (let (($x69 (= (_ bv0 32) (_ bv0 32))))
 (let (($x70 (= $x68 $x69)))
 (let (($x78 (and (and $x70 $x73) $x77)))
 (let (($x76 (= $x78 true)))
 (let (($x62 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let ((?x52 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x28 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x42 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x42 $x54)))
 (let (($x36 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x56 (and $x14 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x49 (concat ?x25 (concat ?x47 ?x24)))))
 (let (($x27 (= ?x20 input.dst.llvm-%val)))
 (let (($x17 (= $x27 true)))
 (let (($x40 (= $x17 true)))
 (let (($x60 (and $x40 $x59)))
 (let (($x66 (and $x60 $x65)))
 (let (($x79 (and $x66 $x76)))
 (let (($x82 (=> $x79 $x81)))
 (let (($x43 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x16 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x16) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x43 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x82 (= true false)))
 (let (($x83 (= $x82 true)))
 (let (($x74 (= false false)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x77 (=> $x68 $x74)))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x75 (not $x71)))
 (let (($x79 (and (and (and (= $x68 (= (_ bv0 32) (_ bv0 32))) (= $x71 (bvuge (_ bv0 32) (_ bv1 32)))) $x75) $x77)))
 (let (($x80 (= $x79 true)))
 (let (($x62 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let ((?x52 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x18 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x22 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x22 $x54)))
 (let (($x8 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x56 (and $x28 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x10 (concat ?x37 (concat ?x16 ?x43)))))
 (let (($x7 (= ?x5 input.dst.llvm-%val)))
 (let (($x27 (= $x7 true)))
 (let (($x17 (= $x27 true)))
 (let (($x60 (and $x17 $x59)))
 (let (($x66 (and $x60 $x65)))
 (let (($x81 (and $x66 $x80)))
 (let (($x84 (=> $x81 $x83)))
 (let (($x33 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x30 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x44 $x30) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x33 (not $x84))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x82 (= true false)))
 (let (($x83 (= $x82 true)))
 (let (($x74 (= false false)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x77 (=> $x68 $x74)))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x75 (not $x71)))
 (let (($x79 (and (and (and (= $x68 (= (_ bv0 32) (_ bv0 32))) (= $x71 (bvuge (_ bv0 32) (_ bv1 32)))) $x75) $x77)))
 (let (($x80 (= $x79 true)))
 (let (($x62 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let ((?x52 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x18 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x22 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x22 $x54)))
 (let (($x8 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x56 (and $x28 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x10 (concat ?x37 (concat ?x16 ?x43)))))
 (let (($x7 (= ?x5 input.dst.llvm-%val)))
 (let (($x27 (= $x7 true)))
 (let (($x17 (= $x27 true)))
 (let (($x60 (and $x17 $x59)))
 (let (($x66 (and $x60 $x65)))
 (let (($x81 (and $x66 $x80)))
 (let (($x84 (=> $x81 $x83)))
 (let (($x33 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x30 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x44 $x30) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x33 (not $x84))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x140 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x135 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x126 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x122 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x128 (and (and (and (and true (= ?x114 (_ bv1 8))) (= ?x118 (_ bv1 8))) (= ?x122 (_ bv1 8))) (= ?x126 (_ bv1 8)))))
 (let (($x145 (and (and (and (and $x128 (= ?x130 (_ bv1 8))) (= ?x135 (_ bv1 8))) (= ?x140 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x70) (_ bv1 8)))))
 (let (($x148 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x149 (=> $x148 (or false (or false $x145)))))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x109 (or $x67 $x149)))
 (let ((?x92 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x102 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x97 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv4 32))) (bvult ?x92 (bvsub ?x92 (_ bv4 32))))))
 (let (($x90 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x79 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x79) (bvult input.dst.llvm-%call.Lentry%2%d ?x79))))
 (let (($x84 (and true $x83)))
 (let (($x85 (and $x83 $x84)))
 (let (($x100 (and (and (and $x84 $x85) $x90) $x97)))
 (let (($x103 (and $x100 $x102)))
 (let (($x71 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x70)))
 (let (($x72 (or false $x71)))
 (let (($x73 (or $x67 $x72)))
 (let (($x155 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x172 (and (and (and $x155 $x73) $x103) $x109)))
 (let (($x173 (=> $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x165 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x164 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x166 (= $x164 $x165)))
 (let (($x162 (= (_ bv0 32) (_ bv0 32))))
 (let (($x161 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x163 (= $x161 $x162)))
 (let (($x167 (and $x163 $x166)))
 (let (($x168 (= $x167 true)))
 (let (($x156 (= $x155 true)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x110 (= $x109 true)))
 (let (($x150 (= $x110 true)))
 (let (($x151 (= $x150 true)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x78 (= $x73 true)))
 (let (($x75 (= $x78 true)))
 (let (($x76 (= $x75 true)))
 (let (($x61 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x62 (= $x61 true)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let ((?x51 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x12 $x6)))
 (let (($x53 (and $x50 $x52)))
 (let (($x9 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x9 $x53)))
 (let (($x8 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x55 (and $x22 $x54)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x48 (concat ?x87 (concat ?x49 ?x21)))))
 (let (($x20 (= ?x39 input.dst.llvm-%val)))
 (let (($x7 (= $x20 true)))
 (let (($x27 (= $x7 true)))
 (let (($x59 (and $x27 $x58)))
 (let (($x65 (and $x59 $x64)))
 (let (($x74 (and $x65 $x76)))
 (let (($x107 (and $x74 $x106)))
 (let (($x152 (and $x107 $x151)))
 (let (($x159 (and $x152 $x158)))
 (let (($x169 (and $x159 $x168)))
 (let (($x176 (=> $x169 $x175)))
 (let (($x13 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x30 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x34 $x30) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x13 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x140 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x135 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x126 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x122 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x128 (and (and (and (and true (= ?x114 (_ bv1 8))) (= ?x118 (_ bv1 8))) (= ?x122 (_ bv1 8))) (= ?x126 (_ bv1 8)))))
 (let (($x145 (and (and (and (and $x128 (= ?x130 (_ bv1 8))) (= ?x135 (_ bv1 8))) (= ?x140 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x70) (_ bv1 8)))))
 (let (($x148 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x149 (=> $x148 (or false (or false $x145)))))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x109 (or $x67 $x149)))
 (let ((?x92 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x102 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x97 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv4 32))) (bvult ?x92 (bvsub ?x92 (_ bv4 32))))))
 (let (($x90 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x79 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x79) (bvult input.dst.llvm-%call.Lentry%2%d ?x79))))
 (let (($x84 (and true $x83)))
 (let (($x85 (and $x83 $x84)))
 (let (($x100 (and (and (and $x84 $x85) $x90) $x97)))
 (let (($x103 (and $x100 $x102)))
 (let (($x71 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x70)))
 (let (($x72 (or false $x71)))
 (let (($x73 (or $x67 $x72)))
 (let (($x155 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x172 (and (and (and $x155 $x73) $x103) $x109)))
 (let (($x173 (=> $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x165 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x164 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x166 (= $x164 $x165)))
 (let (($x162 (= (_ bv0 32) (_ bv0 32))))
 (let (($x161 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x163 (= $x161 $x162)))
 (let (($x167 (and $x163 $x166)))
 (let (($x168 (= $x167 true)))
 (let (($x156 (= $x155 true)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x110 (= $x109 true)))
 (let (($x150 (= $x110 true)))
 (let (($x151 (= $x150 true)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x78 (= $x73 true)))
 (let (($x75 (= $x78 true)))
 (let (($x76 (= $x75 true)))
 (let (($x61 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x62 (= $x61 true)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let ((?x51 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x12 $x6)))
 (let (($x53 (and $x50 $x52)))
 (let (($x9 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x9 $x53)))
 (let (($x8 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x55 (and $x22 $x54)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x48 (concat ?x87 (concat ?x49 ?x21)))))
 (let (($x20 (= ?x39 input.dst.llvm-%val)))
 (let (($x7 (= $x20 true)))
 (let (($x27 (= $x7 true)))
 (let (($x59 (and $x27 $x58)))
 (let (($x65 (and $x59 $x64)))
 (let (($x74 (and $x65 $x76)))
 (let (($x107 (and $x74 $x106)))
 (let (($x152 (and $x107 $x151)))
 (let (($x159 (and $x152 $x158)))
 (let (($x169 (and $x159 $x168)))
 (let (($x176 (=> $x169 $x175)))
 (let (($x13 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x30 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x34 $x30) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x13 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x162 (= $x161 true)))
 (let (($x156 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x157 (= $x155 $x156)))
 (let (($x153 (= (_ bv0 32) (_ bv0 32))))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x154 (= $x152 $x153)))
 (let (($x158 (and $x154 $x157)))
 (let (($x159 (= $x158 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x146 (concat ?x143 (concat ?x140 ?x138)))))
 (let (($x149 (= ?x147 input.dst.llvm-%val)))
 (let (($x109 (= $x149 true)))
 (let (($x110 (= $x109 true)))
 (let (($x132 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let ((?x9 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x100 (and (and (and (and true (= ?x83 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x96 (_ bv1 8)))))
 (let (($x118 (and (and (and (and $x100 (= ?x102 (_ bv1 8))) (= ?x107 (_ bv1 8))) (= ?x113 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x9) (_ bv1 8)))))
 (let (($x121 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x122 (=> $x121 (or false (or false $x118)))))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x80 (or $x11 $x122)))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x76 (= (bvand ?x65 (_ bv4294967292 32)) ?x65)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x65 (bvsub ?x65 (_ bv4 32))) (bvult ?x65 (bvsub ?x65 (_ bv4 32))))))
 (let (($x63 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x54 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x58 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x54) (bvult input.dst.llvm-%call.Lentry%2%d ?x54))))
 (let (($x59 (and true $x58)))
 (let (($x60 (and $x58 $x59)))
 (let (($x78 (and (and (and $x59 $x60) $x63) $x71)))
 (let (($x52 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (and (and (and $x52 $x78) $x76) $x80)))
 (let (($x12 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x9)))
 (let (($x18 (or false $x12)))
 (let (($x6 (or $x11 $x18)))
 (let (($x125 (and $x6 $x124)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let ((?x17 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x29 $x7)))
 (let (($x41 (and $x27 $x42)))
 (let (($x32 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x32 $x41)))
 (let (($x34 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x34)))))
 (let (($x31 (and $x26 $x28)))
 (let (($x19 (= $x31 true)))
 (let (($x40 (= $x19 true)))
 (let (($x36 (= $x40 true)))
 (let (($x129 (and $x36 $x128)))
 (let (($x136 (and $x129 $x135)))
 (let (($x150 (and $x136 $x110)))
 (let (($x160 (and $x150 $x159)))
 (let (($x163 (=> $x160 $x162)))
 (let (($x24 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x23 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x13 $x23) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x24 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x162 (= $x161 true)))
 (let (($x156 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x157 (= $x155 $x156)))
 (let (($x153 (= (_ bv0 32) (_ bv0 32))))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x154 (= $x152 $x153)))
 (let (($x158 (and $x154 $x157)))
 (let (($x159 (= $x158 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x146 (concat ?x143 (concat ?x140 ?x138)))))
 (let (($x149 (= ?x147 input.dst.llvm-%val)))
 (let (($x109 (= $x149 true)))
 (let (($x110 (= $x109 true)))
 (let (($x132 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let ((?x9 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x100 (and (and (and (and true (= ?x83 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x96 (_ bv1 8)))))
 (let (($x118 (and (and (and (and $x100 (= ?x102 (_ bv1 8))) (= ?x107 (_ bv1 8))) (= ?x113 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x9) (_ bv1 8)))))
 (let (($x121 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x122 (=> $x121 (or false (or false $x118)))))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x80 (or $x11 $x122)))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x76 (= (bvand ?x65 (_ bv4294967292 32)) ?x65)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x65 (bvsub ?x65 (_ bv4 32))) (bvult ?x65 (bvsub ?x65 (_ bv4 32))))))
 (let (($x63 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x54 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x58 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x54) (bvult input.dst.llvm-%call.Lentry%2%d ?x54))))
 (let (($x59 (and true $x58)))
 (let (($x60 (and $x58 $x59)))
 (let (($x78 (and (and (and $x59 $x60) $x63) $x71)))
 (let (($x52 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (and (and (and $x52 $x78) $x76) $x80)))
 (let (($x12 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x9)))
 (let (($x18 (or false $x12)))
 (let (($x6 (or $x11 $x18)))
 (let (($x125 (and $x6 $x124)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let ((?x17 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x29 $x7)))
 (let (($x41 (and $x27 $x42)))
 (let (($x32 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x32 $x41)))
 (let (($x34 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x34)))))
 (let (($x31 (and $x26 $x28)))
 (let (($x19 (= $x31 true)))
 (let (($x40 (= $x19 true)))
 (let (($x36 (= $x40 true)))
 (let (($x129 (and $x36 $x128)))
 (let (($x136 (and $x129 $x135)))
 (let (($x150 (and $x136 $x110)))
 (let (($x160 (and $x150 $x159)))
 (let (($x163 (=> $x160 $x162)))
 (let (($x24 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x23 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x13 $x23) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x24 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x007ffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
      #x02)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x08)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8a5a0000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff34ae98)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xda8de800)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff34ae9b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff34ae98)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xda8de802) #x01
    (ite (= x!0 #xff34ae98) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xda8de805) #x01
    (ite (= x!0 #xda8de801) #x01
    (ite (= x!0 #xda8de804) #x01
    (ite (= x!0 #xff34ae99) #x03
    (ite (= x!0 #xff34ae9b) #x03
    (ite (= x!0 #xda8de806) #x01
    (ite (= x!0 #xda8de800) #x01
    (ite (= x!0 #xda8de807) #x01
    (ite (= x!0 #xda8de803) #x01
      #x02)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xff34ae99 x!0)
                    (ite (bvule #xff34ae9b x!0)
                         (ite (bvule #xff34ae9c x!0) #xff34ae9c #xff34ae9b)
                         #xff34ae99)
                    #xff34ae98)))
    (let ((a!2 (ite (bvule #xda8de806 x!0)
                    (ite (bvule #xda8de807 x!0)
                         (ite (bvule #xff34ae98 x!0) a!1 #xda8de807)
                         #xda8de806)
                    #xda8de805)))
    (let ((a!3 (ite (bvule #xda8de803 x!0)
                    (ite (bvule #xda8de804 x!0)
                         (ite (bvule #xda8de805 x!0) a!2 #xda8de804)
                         #xda8de803)
                    #xda8de802)))
      (ite (bvule #xda8de800 x!0)
           (ite (bvule #xda8de801 x!0)
                (ite (bvule #xda8de802 x!0) a!3 #xda8de801)
                #xda8de800)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x166 (= $x14 true)))
 (let (($x156 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x160 (not $x156)))
 (let (($x153 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x159 (not $x153)))
 (let (($x163 (and (and (and (= $x153 (= (_ bv0 32) (_ bv0 32))) (= $x156 (bvuge (_ bv0 32) (_ bv1 32)))) $x159) $x160)))
 (let (($x164 (= $x163 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x147 (concat ?x138 (concat ?x143 ?x146)))))
 (let (($x109 (= ?x149 input.dst.llvm-%val)))
 (let (($x110 (= $x109 true)))
 (let (($x150 (= $x110 true)))
 (let (($x133 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x136 (= $x135 true)))
 (let ((?x12 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x100 (and (and (and (and true (= ?x83 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x96 (_ bv1 8)))))
 (let (($x118 (and (and (and (and $x100 (= ?x102 (_ bv1 8))) (= ?x107 (_ bv1 8))) (= ?x113 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x12) (_ bv1 8)))))
 (let (($x122 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x80 (=> $x122 (or false (or false $x118)))))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (or $x11 $x80)))
 (let ((?x64 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x76 (= (bvand ?x64 (_ bv4294967292 32)) ?x64)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x64 (bvsub ?x64 (_ bv4 32))) (bvult ?x64 (bvsub ?x64 (_ bv4 32))))))
 (let (($x63 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x54 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x54) (bvult input.dst.llvm-%call.Lentry%2%d ?x54))))
 (let (($x60 (and true $x59)))
 (let (($x72 (and $x59 $x60)))
 (let (($x77 (and (and (and $x60 $x72) $x63) $x70)))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x125 (and (and (and $x55 $x77) $x76) $x74)))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x12)))
 (let (($x6 (or false $x18)))
 (let (($x50 (or $x11 $x6)))
 (let (($x126 (and $x50 $x125)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x129 (= $x128 true)))
 (let ((?x17 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x29 $x7)))
 (let (($x41 (and $x27 $x42)))
 (let (($x46 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x46 $x41)))
 (let (($x44 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x44)))))
 (let (($x31 (and $x32 $x28)))
 (let (($x19 (= $x31 true)))
 (let (($x40 (= $x19 true)))
 (let (($x36 (= $x40 true)))
 (let (($x130 (and $x36 $x129)))
 (let (($x137 (and $x130 $x136)))
 (let (($x151 (and $x137 $x150)))
 (let (($x165 (and $x151 $x164)))
 (let (($x167 (=> $x165 $x166)))
 (let (($x49 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x68 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x35 $x68) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x49 (not $x167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x166 (= $x14 true)))
 (let (($x156 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x160 (not $x156)))
 (let (($x153 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x159 (not $x153)))
 (let (($x163 (and (and (and (= $x153 (= (_ bv0 32) (_ bv0 32))) (= $x156 (bvuge (_ bv0 32) (_ bv1 32)))) $x159) $x160)))
 (let (($x164 (= $x163 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x147 (concat ?x138 (concat ?x143 ?x146)))))
 (let (($x109 (= ?x149 input.dst.llvm-%val)))
 (let (($x110 (= $x109 true)))
 (let (($x150 (= $x110 true)))
 (let (($x133 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x136 (= $x135 true)))
 (let ((?x12 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x100 (and (and (and (and true (= ?x83 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x96 (_ bv1 8)))))
 (let (($x118 (and (and (and (and $x100 (= ?x102 (_ bv1 8))) (= ?x107 (_ bv1 8))) (= ?x113 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x12) (_ bv1 8)))))
 (let (($x122 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x80 (=> $x122 (or false (or false $x118)))))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (or $x11 $x80)))
 (let ((?x64 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x76 (= (bvand ?x64 (_ bv4294967292 32)) ?x64)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x64 (bvsub ?x64 (_ bv4 32))) (bvult ?x64 (bvsub ?x64 (_ bv4 32))))))
 (let (($x63 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x54 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x54) (bvult input.dst.llvm-%call.Lentry%2%d ?x54))))
 (let (($x60 (and true $x59)))
 (let (($x72 (and $x59 $x60)))
 (let (($x77 (and (and (and $x60 $x72) $x63) $x70)))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x125 (and (and (and $x55 $x77) $x76) $x74)))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x12)))
 (let (($x6 (or false $x18)))
 (let (($x50 (or $x11 $x6)))
 (let (($x126 (and $x50 $x125)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x129 (= $x128 true)))
 (let ((?x17 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x29 $x7)))
 (let (($x41 (and $x27 $x42)))
 (let (($x46 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x46 $x41)))
 (let (($x44 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x44)))))
 (let (($x31 (and $x32 $x28)))
 (let (($x19 (= $x31 true)))
 (let (($x40 (= $x19 true)))
 (let (($x36 (= $x40 true)))
 (let (($x130 (and $x36 $x129)))
 (let (($x137 (and $x130 $x136)))
 (let (($x151 (and $x137 $x150)))
 (let (($x165 (and $x151 $x164)))
 (let (($x167 (=> $x165 $x166)))
 (let (($x49 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x68 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x35 $x68) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x49 (not $x167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x166 (= $x14 true)))
 (let (($x159 (= false false)))
 (let (($x154 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x162 (=> $x154 $x159)))
 (let (($x158 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x161 (= $x157 $x158)))
 (let (($x155 (= (_ bv0 32) (_ bv0 32))))
 (let (($x156 (= $x154 $x155)))
 (let (($x163 (and (and $x156 $x161) $x162)))
 (let (($x164 (= $x163 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x149 (concat ?x146 (concat ?x138 ?x147)))))
 (let (($x110 (= ?x109 input.dst.llvm-%val)))
 (let (($x150 (= $x110 true)))
 (let (($x151 (= $x150 true)))
 (let (($x134 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x135 (= $x134 true)))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x100 (and (and (and (and true (= ?x83 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x96 (_ bv1 8)))))
 (let (($x118 (and (and (and (and $x100 (= ?x102 (_ bv1 8))) (= ?x107 (_ bv1 8))) (= ?x113 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x18) (_ bv1 8)))))
 (let (($x80 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x74 (=> $x80 (or false (or false $x118)))))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x123 (or $x11 $x74)))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x76 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x69 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x63 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x54 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x60 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x54) (bvult input.dst.llvm-%call.Lentry%2%d ?x54))))
 (let (($x72 (and true $x60)))
 (let (($x71 (and $x60 $x72)))
 (let (($x79 (and (and (and $x72 $x71) $x63) $x69)))
 (let (($x56 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (and (and (and $x56 $x79) $x76) $x123)))
 (let (($x6 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x18)))
 (let (($x50 (or false $x6)))
 (let (($x51 (or $x11 $x50)))
 (let (($x127 (and $x51 $x126)))
 (let (($x128 (= $x127 true)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let ((?x17 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x29 $x7)))
 (let (($x41 (and $x27 $x42)))
 (let (($x33 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x33 $x41)))
 (let (($x45 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x45)))))
 (let (($x31 (and $x46 $x28)))
 (let (($x19 (= $x31 true)))
 (let (($x40 (= $x19 true)))
 (let (($x36 (= $x40 true)))
 (let (($x131 (and $x36 $x130)))
 (let (($x145 (and $x131 $x137)))
 (let (($x152 (and $x145 $x151)))
 (let (($x165 (and $x152 $x164)))
 (let (($x167 (=> $x165 $x166)))
 (let (($x88 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x37 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x15 $x37) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x88 (not $x167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x166 (= $x14 true)))
 (let (($x159 (= false false)))
 (let (($x154 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x162 (=> $x154 $x159)))
 (let (($x158 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x161 (= $x157 $x158)))
 (let (($x155 (= (_ bv0 32) (_ bv0 32))))
 (let (($x156 (= $x154 $x155)))
 (let (($x163 (and (and $x156 $x161) $x162)))
 (let (($x164 (= $x163 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x149 (concat ?x146 (concat ?x138 ?x147)))))
 (let (($x110 (= ?x109 input.dst.llvm-%val)))
 (let (($x150 (= $x110 true)))
 (let (($x151 (= $x150 true)))
 (let (($x134 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x135 (= $x134 true)))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x100 (and (and (and (and true (= ?x83 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x96 (_ bv1 8)))))
 (let (($x118 (and (and (and (and $x100 (= ?x102 (_ bv1 8))) (= ?x107 (_ bv1 8))) (= ?x113 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x18) (_ bv1 8)))))
 (let (($x80 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x74 (=> $x80 (or false (or false $x118)))))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x123 (or $x11 $x74)))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x76 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x69 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x63 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x54 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x60 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x54) (bvult input.dst.llvm-%call.Lentry%2%d ?x54))))
 (let (($x72 (and true $x60)))
 (let (($x71 (and $x60 $x72)))
 (let (($x79 (and (and (and $x72 $x71) $x63) $x69)))
 (let (($x56 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (and (and (and $x56 $x79) $x76) $x123)))
 (let (($x6 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x18)))
 (let (($x50 (or false $x6)))
 (let (($x51 (or $x11 $x50)))
 (let (($x127 (and $x51 $x126)))
 (let (($x128 (= $x127 true)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let ((?x17 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x29 $x7)))
 (let (($x41 (and $x27 $x42)))
 (let (($x33 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x33 $x41)))
 (let (($x45 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x45)))))
 (let (($x31 (and $x46 $x28)))
 (let (($x19 (= $x31 true)))
 (let (($x40 (= $x19 true)))
 (let (($x36 (= $x40 true)))
 (let (($x131 (and $x36 $x130)))
 (let (($x145 (and $x131 $x137)))
 (let (($x152 (and $x145 $x151)))
 (let (($x165 (and $x152 $x164)))
 (let (($x167 (=> $x165 $x166)))
 (let (($x88 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x37 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x15 $x37) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x88 (not $x167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x007ffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
      #x02)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x08)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8a5a0000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff34ae98)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xda8de800)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff34ae9b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff34ae98)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xda8de802) #x01
    (ite (= x!0 #xff34ae98) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xda8de805) #x01
    (ite (= x!0 #xda8de801) #x01
    (ite (= x!0 #xda8de804) #x01
    (ite (= x!0 #xff34ae99) #x03
    (ite (= x!0 #xff34ae9b) #x03
    (ite (= x!0 #xda8de806) #x01
    (ite (= x!0 #xda8de800) #x01
    (ite (= x!0 #xda8de807) #x01
    (ite (= x!0 #xda8de803) #x01
      #x02)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xff34ae99 x!0)
                    (ite (bvule #xff34ae9b x!0)
                         (ite (bvule #xff34ae9c x!0) #xff34ae9c #xff34ae9b)
                         #xff34ae99)
                    #xff34ae98)))
    (let ((a!2 (ite (bvule #xda8de806 x!0)
                    (ite (bvule #xda8de807 x!0)
                         (ite (bvule #xff34ae98 x!0) a!1 #xda8de807)
                         #xda8de806)
                    #xda8de805)))
    (let ((a!3 (ite (bvule #xda8de803 x!0)
                    (ite (bvule #xda8de804 x!0)
                         (ite (bvule #xda8de805 x!0) a!2 #xda8de804)
                         #xda8de803)
                    #xda8de802)))
      (ite (bvule #xda8de800 x!0)
           (ite (bvule #xda8de801 x!0)
                (ite (bvule #xda8de802 x!0) a!3 #xda8de801)
                #xda8de800)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x168 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x169 (= $x168 true)))
 (let (($x162 (= false false)))
 (let (($x155 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x163 (=> $x155 $x162)))
 (let (($x158 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x159 (not $x158)))
 (let (($x14 (and (and (and (= $x155 (= (_ bv0 32) (_ bv0 32))) (= $x158 (bvuge (_ bv0 32) (_ bv1 32)))) $x159) $x163)))
 (let (($x166 (= $x14 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x147 (concat ?x146 ?x149)))))
 (let (($x150 (= ?x110 input.dst.llvm-%val)))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x135 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x145 (= $x137 true)))
 (let ((?x6 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x100 (and (and (and (and true (= ?x83 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x96 (_ bv1 8)))))
 (let (($x118 (and (and (and (and $x100 (= ?x102 (_ bv1 8))) (= ?x107 (_ bv1 8))) (= ?x113 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x6) (_ bv1 8)))))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x123 (=> $x74 (or false (or false $x118)))))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (or $x11 $x123)))
 (let ((?x78 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x76 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x66 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x78 (bvsub ?x78 (_ bv4 32))) (bvult ?x78 (bvsub ?x78 (_ bv4 32))))))
 (let (($x63 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x54 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x72 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x54) (bvult input.dst.llvm-%call.Lentry%2%d ?x54))))
 (let (($x71 (and true $x72)))
 (let (($x70 (and $x72 $x71)))
 (let (($x81 (and (and (and $x71 $x70) $x63) $x66)))
 (let (($x57 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (and (and (and $x57 $x81) $x76) $x124)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x6)))
 (let (($x51 (or false $x50)))
 (let (($x52 (or $x11 $x51)))
 (let (($x128 (and $x52 $x127)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let ((?x17 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x29 $x7)))
 (let (($x41 (and $x27 $x42)))
 (let (($x13 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x13 $x41)))
 (let (($x26 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x26)))))
 (let (($x31 (and $x33 $x28)))
 (let (($x19 (= $x31 true)))
 (let (($x40 (= $x19 true)))
 (let (($x36 (= $x40 true)))
 (let (($x132 (and $x36 $x131)))
 (let (($x144 (and $x132 $x145)))
 (let (($x153 (and $x144 $x152)))
 (let (($x167 (and $x153 $x166)))
 (let (($x9 (=> $x167 $x169)))
 (let (($x34 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x48 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x25 $x48) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x34 (not $x9)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x168 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x169 (= $x168 true)))
 (let (($x162 (= false false)))
 (let (($x155 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x163 (=> $x155 $x162)))
 (let (($x158 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x159 (not $x158)))
 (let (($x14 (and (and (and (= $x155 (= (_ bv0 32) (_ bv0 32))) (= $x158 (bvuge (_ bv0 32) (_ bv1 32)))) $x159) $x163)))
 (let (($x166 (= $x14 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x147 (concat ?x146 ?x149)))))
 (let (($x150 (= ?x110 input.dst.llvm-%val)))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x135 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x145 (= $x137 true)))
 (let ((?x6 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x100 (and (and (and (and true (= ?x83 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x96 (_ bv1 8)))))
 (let (($x118 (and (and (and (and $x100 (= ?x102 (_ bv1 8))) (= ?x107 (_ bv1 8))) (= ?x113 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x6) (_ bv1 8)))))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x123 (=> $x74 (or false (or false $x118)))))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (or $x11 $x123)))
 (let ((?x78 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x76 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x66 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x78 (bvsub ?x78 (_ bv4 32))) (bvult ?x78 (bvsub ?x78 (_ bv4 32))))))
 (let (($x63 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x54 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x72 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x54) (bvult input.dst.llvm-%call.Lentry%2%d ?x54))))
 (let (($x71 (and true $x72)))
 (let (($x70 (and $x72 $x71)))
 (let (($x81 (and (and (and $x71 $x70) $x63) $x66)))
 (let (($x57 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (and (and (and $x57 $x81) $x76) $x124)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x6)))
 (let (($x51 (or false $x50)))
 (let (($x52 (or $x11 $x51)))
 (let (($x128 (and $x52 $x127)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let ((?x17 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x29 $x7)))
 (let (($x41 (and $x27 $x42)))
 (let (($x13 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x13 $x41)))
 (let (($x26 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x26)))))
 (let (($x31 (and $x33 $x28)))
 (let (($x19 (= $x31 true)))
 (let (($x40 (= $x19 true)))
 (let (($x36 (= $x40 true)))
 (let (($x132 (and $x36 $x131)))
 (let (($x144 (and $x132 $x145)))
 (let (($x153 (and $x144 $x152)))
 (let (($x167 (and $x153 $x166)))
 (let (($x9 (=> $x167 $x169)))
 (let (($x34 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x48 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x25 $x48) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x34 (not $x9)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x007ffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
      #x02)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x08)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8a5a0000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff34ae98)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xda8de800)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff34ae9b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff34ae98)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xda8de802) #x01
    (ite (= x!0 #xff34ae98) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xda8de805) #x01
    (ite (= x!0 #xda8de801) #x01
    (ite (= x!0 #xda8de804) #x01
    (ite (= x!0 #xff34ae99) #x03
    (ite (= x!0 #xff34ae9b) #x03
    (ite (= x!0 #xda8de806) #x01
    (ite (= x!0 #xda8de800) #x01
    (ite (= x!0 #xda8de807) #x01
    (ite (= x!0 #xda8de803) #x01
      #x02)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xff34ae99 x!0)
                    (ite (bvule #xff34ae9b x!0)
                         (ite (bvule #xff34ae9c x!0) #xff34ae9c #xff34ae9b)
                         #xff34ae99)
                    #xff34ae98)))
    (let ((a!2 (ite (bvule #xda8de806 x!0)
                    (ite (bvule #xda8de807 x!0)
                         (ite (bvule #xff34ae98 x!0) a!1 #xda8de807)
                         #xda8de806)
                    #xda8de805)))
    (let ((a!3 (ite (bvule #xda8de803 x!0)
                    (ite (bvule #xda8de804 x!0)
                         (ite (bvule #xda8de805 x!0) a!2 #xda8de804)
                         #xda8de803)
                    #xda8de802)))
      (ite (bvule #xda8de800 x!0)
           (ite (bvule #xda8de801 x!0)
                (ite (bvule #xda8de802 x!0) a!3 #xda8de801)
                #xda8de800)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let ((?x163 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x163)))
 (let (($x166 (= ?x14 input.dst.llvm-%val)))
 (let (($x167 (= $x166 true)))
 (let (($x160 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x164 (= $x161 $x160)))
 (let (($x157 (= (_ bv0 32) (_ bv0 32))))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x158 (= $x156 $x157)))
 (let (($x159 (and $x158 $x164)))
 (let (($x165 (= $x159 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x110 (concat ?x149 (concat ?x147 ?x109)))))
 (let (($x151 (= ?x150 input.dst.llvm-%val)))
 (let (($x152 (= $x151 true)))
 (let (($x153 (= $x152 true)))
 (let (($x136 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x137 (= $x136 true)))
 (let (($x145 (= $x137 true)))
 (let (($x144 (= $x145 true)))
 (let ((?x6 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x148 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x97 (and (and (and (and true (= ?x82 (_ bv1 8))) (= ?x98 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x95 (_ bv1 8)))))
 (let (($x117 (and (and (and (and $x97 (= ?x101 (_ bv1 8))) (= ?x106 (_ bv1 8))) (= ?x148 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x6) (_ bv1 8)))))
 (let (($x120 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x123 (=> $x120 (or false (or false $x117)))))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (or $x8 $x123)))
 (let ((?x79 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x75 (= (bvand ?x79 (_ bv4294967292 32)) ?x79)))
 (let (($x65 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x79 (bvsub ?x79 (_ bv4 32))) (bvult ?x79 (bvsub ?x79 (_ bv4 32))))))
 (let (($x62 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x53 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x72 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x53) (bvult input.dst.llvm-%call.Lentry%2%d ?x53))))
 (let (($x71 (and true $x72)))
 (let (($x70 (and $x72 $x71)))
 (let (($x81 (and (and (and $x71 $x70) $x62) $x65)))
 (let (($x57 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (and (and (and $x57 $x81) $x75) $x126)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x6)))
 (let (($x51 (or false $x50)))
 (let (($x52 (or $x8 $x51)))
 (let (($x128 (and $x52 $x127)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let ((?x27 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x27)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x13 $x20)))
 (let (($x42 (and $x7 $x17)))
 (let (($x68 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x68 $x42)))
 (let (($x26 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x26)))))
 (let (($x28 (and $x23 $x41)))
 (let (($x31 (= $x28 true)))
 (let (($x19 (= $x31 true)))
 (let (($x40 (= $x19 true)))
 (let (($x132 (and $x40 $x131)))
 (let (($x141 (and $x132 $x144)))
 (let (($x154 (and $x141 $x153)))
 (let (($x162 (and $x154 $x165)))
 (let (($x168 (=> $x162 $x167)))
 (let (($x87 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x38 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x21 $x38) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x87 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let ((?x163 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x163)))
 (let (($x166 (= ?x14 input.dst.llvm-%val)))
 (let (($x167 (= $x166 true)))
 (let (($x160 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x164 (= $x161 $x160)))
 (let (($x157 (= (_ bv0 32) (_ bv0 32))))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x158 (= $x156 $x157)))
 (let (($x159 (and $x158 $x164)))
 (let (($x165 (= $x159 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x110 (concat ?x149 (concat ?x147 ?x109)))))
 (let (($x151 (= ?x150 input.dst.llvm-%val)))
 (let (($x152 (= $x151 true)))
 (let (($x153 (= $x152 true)))
 (let (($x136 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x137 (= $x136 true)))
 (let (($x145 (= $x137 true)))
 (let (($x144 (= $x145 true)))
 (let ((?x6 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x148 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x97 (and (and (and (and true (= ?x82 (_ bv1 8))) (= ?x98 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x95 (_ bv1 8)))))
 (let (($x117 (and (and (and (and $x97 (= ?x101 (_ bv1 8))) (= ?x106 (_ bv1 8))) (= ?x148 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x6) (_ bv1 8)))))
 (let (($x120 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x123 (=> $x120 (or false (or false $x117)))))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (or $x8 $x123)))
 (let ((?x79 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x75 (= (bvand ?x79 (_ bv4294967292 32)) ?x79)))
 (let (($x65 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x79 (bvsub ?x79 (_ bv4 32))) (bvult ?x79 (bvsub ?x79 (_ bv4 32))))))
 (let (($x62 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x53 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x72 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x53) (bvult input.dst.llvm-%call.Lentry%2%d ?x53))))
 (let (($x71 (and true $x72)))
 (let (($x70 (and $x72 $x71)))
 (let (($x81 (and (and (and $x71 $x70) $x62) $x65)))
 (let (($x57 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (and (and (and $x57 $x81) $x75) $x126)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x6)))
 (let (($x51 (or false $x50)))
 (let (($x52 (or $x8 $x51)))
 (let (($x128 (and $x52 $x127)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let ((?x27 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x27)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x13 $x20)))
 (let (($x42 (and $x7 $x17)))
 (let (($x68 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x68 $x42)))
 (let (($x26 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x26)))))
 (let (($x28 (and $x23 $x41)))
 (let (($x31 (= $x28 true)))
 (let (($x19 (= $x31 true)))
 (let (($x40 (= $x19 true)))
 (let (($x132 (and $x40 $x131)))
 (let (($x141 (and $x132 $x144)))
 (let (($x154 (and $x141 $x153)))
 (let (($x162 (and $x154 $x165)))
 (let (($x168 (=> $x162 $x167)))
 (let (($x87 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x38 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x21 $x38) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x87 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x166 ((_ extract 1 0) input.spec-%var-val-0)))
 (let (($x167 (= (_ bv0 2) ?x166)))
 (let (($x168 (= $x167 true)))
 (let (($x164 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x159 (= $x160 $x164)))
 (let (($x158 (= (_ bv0 32) (_ bv0 32))))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x161 (= $x157 $x158)))
 (let (($x165 (and $x161 $x159)))
 (let (($x162 (= $x165 true)))
 (let (($x151 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x152 (= $x151 true)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let ((?x62 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x128 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x101 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x111 (_ bv1 8))) (= ?x114 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x116 (= ?x118 (_ bv1 8))) (= ?x128 (_ bv1 8))) (= ?x134 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x62) (_ bv1 8)))))
 (let (($x142 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x110 (=> $x142 (or false (or false $x144)))))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x93 (or $x67 $x110)))
 (let ((?x82 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x94 (= (bvand ?x82 (_ bv4294967292 32)) ?x82)))
 (let (($x86 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x82 (bvsub ?x82 (_ bv4 32))) (bvult ?x82 (bvsub ?x82 (_ bv4 32))))))
 (let (($x120 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x65 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x75 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x65) (bvult input.dst.llvm-%call.Lentry%2%d ?x65))))
 (let (($x124 (and true $x75)))
 (let (($x76 (and $x75 $x124)))
 (let (($x99 (and (and (and $x124 $x76) $x120) $x86)))
 (let (($x78 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x149 (and (and (and $x78 $x99) $x94) $x93)))
 (let (($x66 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x62)))
 (let (($x63 (or false $x66)))
 (let (($x73 (or $x67 $x63)))
 (let (($x138 (and $x73 $x149)))
 (let (($x147 (= $x138 true)))
 (let (($x109 (= $x147 true)))
 (let (($x143 (= $x109 true)))
 (let ((?x56 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x42 $x52)))
 (let (($x54 (and $x55 $x57)))
 (let (($x17 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x17 $x54)))
 (let (($x36 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x53 (and $x50 $x58)))
 (let (($x59 (= $x53 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x24 (concat ?x26 (concat ?x37 ?x49)))))
 (let (($x29 (= ?x68 input.dst.llvm-%val)))
 (let (($x5 (= $x29 true)))
 (let (($x20 (= $x5 true)))
 (let (($x71 (and $x20 $x72)))
 (let (($x140 (and $x71 $x143)))
 (let (($x155 (and $x140 $x154)))
 (let (($x163 (and $x155 $x162)))
 (let (($x169 (=> $x163 $x168)))
 (let (($x47 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x35 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x35) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x47 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x166 ((_ extract 1 0) input.spec-%var-val-0)))
 (let (($x167 (= (_ bv0 2) ?x166)))
 (let (($x168 (= $x167 true)))
 (let (($x164 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x159 (= $x160 $x164)))
 (let (($x158 (= (_ bv0 32) (_ bv0 32))))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x161 (= $x157 $x158)))
 (let (($x165 (and $x161 $x159)))
 (let (($x162 (= $x165 true)))
 (let (($x151 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x152 (= $x151 true)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let ((?x62 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x128 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x101 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x111 (_ bv1 8))) (= ?x114 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x116 (= ?x118 (_ bv1 8))) (= ?x128 (_ bv1 8))) (= ?x134 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x62) (_ bv1 8)))))
 (let (($x142 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x110 (=> $x142 (or false (or false $x144)))))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x93 (or $x67 $x110)))
 (let ((?x82 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x94 (= (bvand ?x82 (_ bv4294967292 32)) ?x82)))
 (let (($x86 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x82 (bvsub ?x82 (_ bv4 32))) (bvult ?x82 (bvsub ?x82 (_ bv4 32))))))
 (let (($x120 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x65 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x75 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x65) (bvult input.dst.llvm-%call.Lentry%2%d ?x65))))
 (let (($x124 (and true $x75)))
 (let (($x76 (and $x75 $x124)))
 (let (($x99 (and (and (and $x124 $x76) $x120) $x86)))
 (let (($x78 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x149 (and (and (and $x78 $x99) $x94) $x93)))
 (let (($x66 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x62)))
 (let (($x63 (or false $x66)))
 (let (($x73 (or $x67 $x63)))
 (let (($x138 (and $x73 $x149)))
 (let (($x147 (= $x138 true)))
 (let (($x109 (= $x147 true)))
 (let (($x143 (= $x109 true)))
 (let ((?x56 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x42 $x52)))
 (let (($x54 (and $x55 $x57)))
 (let (($x17 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x17 $x54)))
 (let (($x36 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x53 (and $x50 $x58)))
 (let (($x59 (= $x53 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x24 (concat ?x26 (concat ?x37 ?x49)))))
 (let (($x29 (= ?x68 input.dst.llvm-%val)))
 (let (($x5 (= $x29 true)))
 (let (($x20 (= $x5 true)))
 (let (($x71 (and $x20 $x72)))
 (let (($x140 (and $x71 $x143)))
 (let (($x155 (and $x140 $x154)))
 (let (($x163 (and $x155 $x162)))
 (let (($x169 (=> $x163 $x168)))
 (let (($x47 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x35 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x35) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x47 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00081d00)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xd5200000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x03))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00081d03)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00081d00)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x40000001) #x01
    (ite (= x!0 #x00081d03) #x03
    (ite (= x!0 #x00081d01) #x03
    (ite (= x!0 #x40000004) #x01
    (ite (= x!0 #x40000005) #x01
    (ite (= x!0 #x40000003) #x01
    (ite (= x!0 #x00081d00) #x03
    (ite (= x!0 #x40000000) #x01
    (ite (= x!0 #x40000006) #x01
    (ite (= x!0 #x40000007) #x01
    (ite (= x!0 #x40000002) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x40000005 x!0)
                    (ite (bvule #x40000006 x!0)
                         (ite (bvule #x40000007 x!0) #x40000007 #x40000006)
                         #x40000005)
                    #x40000004)))
    (let ((a!2 (ite (bvule #x40000002 x!0)
                    (ite (bvule #x40000003 x!0)
                         (ite (bvule #x40000004 x!0) a!1 #x40000003)
                         #x40000002)
                    #x40000001)))
    (let ((a!3 (ite (bvule #x00081d04 x!0)
                    (ite (bvule #x40000000 x!0)
                         (ite (bvule #x40000001 x!0) a!2 #x40000000)
                         #x00081d04)
                    #x00081d03)))
      (ite (bvule #x00081d00 x!0)
           (ite (bvule #x00081d01 x!0)
                (ite (bvule #x00081d03 x!0) a!3 #x00081d01)
                #x00081d00)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x9d004000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x03))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x590420b4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x590420b7)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x590420b4)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #x590420b4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x590420b5) #x03
    (ite (= x!0 #x590420b7) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) #x80000000 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!2 (ite (bvule #x7ffffffb x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!1 #x7ffffffc)
                         #x7ffffffb)
                    #x7ffffffa)))
    (let ((a!3 (ite (bvule #x590420b8 x!0)
                    (ite (bvule #x7ffffff9 x!0)
                         (ite (bvule #x7ffffffa x!0) a!2 #x7ffffff9)
                         #x590420b8)
                    #x590420b7)))
      (ite (bvule #x590420b4 x!0)
           (ite (bvule #x590420b5 x!0)
                (ite (bvule #x590420b7 x!0) a!3 #x590420b5)
                #x590420b4)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x11 ((_ extract 1 0) input.spec-%var-val-0)))
 (let (($x69 (= (_ bv0 2) ?x11)))
 (let (($x22 (= $x69 true)))
 (let (($x164 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x163 (not $x164)))
 (let (($x158 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x162 (not $x158)))
 (let (($x167 (and (and (and (= $x158 (= (_ bv0 32) (_ bv0 32))) (= $x164 (bvuge (_ bv0 32) (_ bv1 32)))) $x162) $x163)))
 (let (($x168 (= $x167 true)))
 (let (($x152 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let ((?x66 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x128 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x101 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x111 (_ bv1 8))) (= ?x114 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x116 (= ?x118 (_ bv1 8))) (= ?x128 (_ bv1 8))) (= ?x134 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x66) (_ bv1 8)))))
 (let (($x110 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x93 (=> $x110 (or false (or false $x144)))))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x92 (or $x67 $x93)))
 (let ((?x74 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x94 (= (bvand ?x74 (_ bv4294967292 32)) ?x74)))
 (let (($x98 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x74 (bvsub ?x74 (_ bv4 32))) (bvult ?x74 (bvsub ?x74 (_ bv4 32))))))
 (let (($x120 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x65 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x124 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x65) (bvult input.dst.llvm-%call.Lentry%2%d ?x65))))
 (let (($x76 (and true $x124)))
 (let (($x89 (and $x124 $x76)))
 (let (($x95 (and (and (and $x76 $x89) $x120) $x98)))
 (let (($x81 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x138 (and (and (and $x81 $x95) $x94) $x92)))
 (let (($x63 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x66)))
 (let (($x73 (or false $x63)))
 (let (($x79 (or $x67 $x73)))
 (let (($x147 (and $x79 $x138)))
 (let (($x109 (= $x147 true)))
 (let (($x143 (= $x109 true)))
 (let (($x140 (= $x143 true)))
 (let ((?x56 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x6 $x52)))
 (let (($x54 (and $x55 $x57)))
 (let (($x28 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x28 $x54)))
 (let (($x8 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x53 (and $x42 $x58)))
 (let (($x59 (= $x53 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x32 (concat ?x48 (concat ?x25 ?x88)))))
 (let (($x29 (= ?x68 input.dst.llvm-%val)))
 (let (($x5 (= $x29 true)))
 (let (($x20 (= $x5 true)))
 (let (($x71 (and $x20 $x72)))
 (let (($x150 (and $x71 $x140)))
 (let (($x156 (and $x150 $x155)))
 (let (($x169 (and $x156 $x168)))
 (let (($x170 (=> $x169 $x22)))
 (let (($x45 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x46 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x23 $x46) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x45 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x11 ((_ extract 1 0) input.spec-%var-val-0)))
 (let (($x69 (= (_ bv0 2) ?x11)))
 (let (($x22 (= $x69 true)))
 (let (($x164 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x163 (not $x164)))
 (let (($x158 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x162 (not $x158)))
 (let (($x167 (and (and (and (= $x158 (= (_ bv0 32) (_ bv0 32))) (= $x164 (bvuge (_ bv0 32) (_ bv1 32)))) $x162) $x163)))
 (let (($x168 (= $x167 true)))
 (let (($x152 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let ((?x66 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x128 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x101 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x111 (_ bv1 8))) (= ?x114 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x116 (= ?x118 (_ bv1 8))) (= ?x128 (_ bv1 8))) (= ?x134 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x66) (_ bv1 8)))))
 (let (($x110 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x93 (=> $x110 (or false (or false $x144)))))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x92 (or $x67 $x93)))
 (let ((?x74 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x94 (= (bvand ?x74 (_ bv4294967292 32)) ?x74)))
 (let (($x98 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x74 (bvsub ?x74 (_ bv4 32))) (bvult ?x74 (bvsub ?x74 (_ bv4 32))))))
 (let (($x120 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x65 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x124 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x65) (bvult input.dst.llvm-%call.Lentry%2%d ?x65))))
 (let (($x76 (and true $x124)))
 (let (($x89 (and $x124 $x76)))
 (let (($x95 (and (and (and $x76 $x89) $x120) $x98)))
 (let (($x81 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x138 (and (and (and $x81 $x95) $x94) $x92)))
 (let (($x63 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x66)))
 (let (($x73 (or false $x63)))
 (let (($x79 (or $x67 $x73)))
 (let (($x147 (and $x79 $x138)))
 (let (($x109 (= $x147 true)))
 (let (($x143 (= $x109 true)))
 (let (($x140 (= $x143 true)))
 (let ((?x56 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x6 $x52)))
 (let (($x54 (and $x55 $x57)))
 (let (($x28 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x28 $x54)))
 (let (($x8 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x53 (and $x42 $x58)))
 (let (($x59 (= $x53 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x32 (concat ?x48 (concat ?x25 ?x88)))))
 (let (($x29 (= ?x68 input.dst.llvm-%val)))
 (let (($x5 (= $x29 true)))
 (let (($x20 (= $x5 true)))
 (let (($x71 (and $x20 $x72)))
 (let (($x150 (and $x71 $x140)))
 (let (($x156 (and $x150 $x155)))
 (let (($x169 (and $x156 $x168)))
 (let (($x170 (=> $x169 $x22)))
 (let (($x45 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x46 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x23 $x46) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x45 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x11 ((_ extract 1 0) input.spec-%var-val-0)))
 (let (($x69 (= (_ bv0 2) ?x11)))
 (let (($x22 (= $x69 true)))
 (let (($x162 (= false false)))
 (let (($x161 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x166 (=> $x161 $x162)))
 (let (($x165 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x14 (= $x159 $x165)))
 (let (($x160 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= $x161 $x160)))
 (let (($x167 (and (and $x164 $x14) $x166)))
 (let (($x168 (= $x167 true)))
 (let (($x153 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let (($x156 (= $x155 true)))
 (let ((?x63 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x128 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x101 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x111 (_ bv1 8))) (= ?x114 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x116 (= ?x118 (_ bv1 8))) (= ?x128 (_ bv1 8))) (= ?x134 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x63) (_ bv1 8)))))
 (let (($x93 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x92 (=> $x93 (or false (or false $x144)))))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (or $x67 $x92)))
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x94 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x85 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x120 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x65 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x76 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x65) (bvult input.dst.llvm-%call.Lentry%2%d ?x65))))
 (let (($x89 (and true $x76)))
 (let (($x86 (and $x76 $x89)))
 (let (($x96 (and (and (and $x89 $x86) $x120) $x85)))
 (let (($x125 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x147 (and (and (and $x125 $x96) $x94) $x146)))
 (let (($x73 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x63)))
 (let (($x79 (or false $x73)))
 (let (($x77 (or $x67 $x79)))
 (let (($x109 (and $x77 $x147)))
 (let (($x143 (= $x109 true)))
 (let (($x140 (= $x143 true)))
 (let (($x150 (= $x140 true)))
 (let ((?x56 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x17 $x52)))
 (let (($x54 (and $x55 $x57)))
 (let (($x19 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x19 $x54)))
 (let (($x18 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x18)))))
 (let (($x53 (and $x6 $x58)))
 (let (($x59 (= $x53 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x37 (concat ?x133 (concat ?x43 ?x30)))))
 (let (($x29 (= ?x68 input.dst.llvm-%val)))
 (let (($x5 (= $x29 true)))
 (let (($x20 (= $x5 true)))
 (let (($x71 (and $x20 $x72)))
 (let (($x151 (and $x71 $x150)))
 (let (($x157 (and $x151 $x156)))
 (let (($x169 (and $x157 $x168)))
 (let (($x170 (=> $x169 $x22)))
 (let (($x34 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x16 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x34 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x11 ((_ extract 1 0) input.spec-%var-val-0)))
 (let (($x69 (= (_ bv0 2) ?x11)))
 (let (($x22 (= $x69 true)))
 (let (($x162 (= false false)))
 (let (($x161 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x166 (=> $x161 $x162)))
 (let (($x165 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x14 (= $x159 $x165)))
 (let (($x160 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= $x161 $x160)))
 (let (($x167 (and (and $x164 $x14) $x166)))
 (let (($x168 (= $x167 true)))
 (let (($x153 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let (($x156 (= $x155 true)))
 (let ((?x63 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x128 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x101 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x111 (_ bv1 8))) (= ?x114 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x116 (= ?x118 (_ bv1 8))) (= ?x128 (_ bv1 8))) (= ?x134 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x63) (_ bv1 8)))))
 (let (($x93 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x92 (=> $x93 (or false (or false $x144)))))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (or $x67 $x92)))
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x94 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x85 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x120 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x65 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x76 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x65) (bvult input.dst.llvm-%call.Lentry%2%d ?x65))))
 (let (($x89 (and true $x76)))
 (let (($x86 (and $x76 $x89)))
 (let (($x96 (and (and (and $x89 $x86) $x120) $x85)))
 (let (($x125 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x147 (and (and (and $x125 $x96) $x94) $x146)))
 (let (($x73 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x63)))
 (let (($x79 (or false $x73)))
 (let (($x77 (or $x67 $x79)))
 (let (($x109 (and $x77 $x147)))
 (let (($x143 (= $x109 true)))
 (let (($x140 (= $x143 true)))
 (let (($x150 (= $x140 true)))
 (let ((?x56 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x17 $x52)))
 (let (($x54 (and $x55 $x57)))
 (let (($x19 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x19 $x54)))
 (let (($x18 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x18)))))
 (let (($x53 (and $x6 $x58)))
 (let (($x59 (= $x53 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x37 (concat ?x133 (concat ?x43 ?x30)))))
 (let (($x29 (= ?x68 input.dst.llvm-%val)))
 (let (($x5 (= $x29 true)))
 (let (($x20 (= $x5 true)))
 (let (($x71 (and $x20 $x72)))
 (let (($x151 (and $x71 $x150)))
 (let (($x157 (and $x151 $x156)))
 (let (($x169 (and $x157 $x168)))
 (let (($x170 (=> $x169 $x22)))
 (let (($x34 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x16 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x34 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00081d00)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xd5200000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x03))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00081d03)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00081d00)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x40000001) #x01
    (ite (= x!0 #x00081d03) #x03
    (ite (= x!0 #x00081d01) #x03
    (ite (= x!0 #x40000004) #x01
    (ite (= x!0 #x40000005) #x01
    (ite (= x!0 #x40000003) #x01
    (ite (= x!0 #x00081d00) #x03
    (ite (= x!0 #x40000000) #x01
    (ite (= x!0 #x40000006) #x01
    (ite (= x!0 #x40000007) #x01
    (ite (= x!0 #x40000002) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x40000005 x!0)
                    (ite (bvule #x40000006 x!0)
                         (ite (bvule #x40000007 x!0) #x40000007 #x40000006)
                         #x40000005)
                    #x40000004)))
    (let ((a!2 (ite (bvule #x40000002 x!0)
                    (ite (bvule #x40000003 x!0)
                         (ite (bvule #x40000004 x!0) a!1 #x40000003)
                         #x40000002)
                    #x40000001)))
    (let ((a!3 (ite (bvule #x00081d04 x!0)
                    (ite (bvule #x40000000 x!0)
                         (ite (bvule #x40000001 x!0) a!2 #x40000000)
                         #x00081d04)
                    #x00081d03)))
      (ite (bvule #x00081d00 x!0)
           (ite (bvule #x00081d01 x!0)
                (ite (bvule #x00081d03 x!0) a!3 #x00081d01)
                #x00081d00)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x9d004000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x03))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x590420b4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x590420b7)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x590420b4)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #x590420b4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x590420b5) #x03
    (ite (= x!0 #x590420b7) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) #x80000000 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!2 (ite (bvule #x7ffffffb x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!1 #x7ffffffc)
                         #x7ffffffb)
                    #x7ffffffa)))
    (let ((a!3 (ite (bvule #x590420b8 x!0)
                    (ite (bvule #x7ffffff9 x!0)
                         (ite (bvule #x7ffffffa x!0) a!2 #x7ffffff9)
                         #x590420b8)
                    #x590420b7)))
      (ite (bvule #x590420b4 x!0)
           (ite (bvule #x590420b5 x!0)
                (ite (bvule #x590420b7 x!0) a!3 #x590420b5)
                #x590420b4)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x170 ((_ extract 1 0) input.spec-%var-val-0)))
 (let (($x12 (= (_ bv0 2) ?x170)))
 (let (($x171 (= $x12 true)))
 (let (($x166 (= false false)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x167 (=> $x160 $x166)))
 (let (($x165 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x162 (not $x165)))
 (let (($x9 (and (and (and (= $x160 (= (_ bv0 32) (_ bv0 32))) (= $x165 (bvuge (_ bv0 32) (_ bv1 32)))) $x162) $x167)))
 (let (($x11 (= $x9 true)))
 (let (($x154 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x155 (= $x154 true)))
 (let (($x156 (= $x155 true)))
 (let (($x157 (= $x156 true)))
 (let ((?x73 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x128 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x101 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x111 (_ bv1 8))) (= ?x114 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x116 (= ?x118 (_ bv1 8))) (= ?x128 (_ bv1 8))) (= ?x134 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x73) (_ bv1 8)))))
 (let (($x92 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x146 (=> $x92 (or false (or false $x144)))))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x149 (or $x67 $x146)))
 (let ((?x99 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x94 (= (bvand ?x99 (_ bv4294967292 32)) ?x99)))
 (let (($x83 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x99 (bvsub ?x99 (_ bv4 32))) (bvult ?x99 (bvsub ?x99 (_ bv4 32))))))
 (let (($x120 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x65 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x89 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x65) (bvult input.dst.llvm-%call.Lentry%2%d ?x65))))
 (let (($x86 (and true $x89)))
 (let (($x98 (and $x89 $x86)))
 (let (($x97 (and (and (and $x86 $x98) $x120) $x83)))
 (let (($x121 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x109 (and (and (and $x121 $x97) $x94) $x149)))
 (let (($x79 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x73)))
 (let (($x77 (or false $x79)))
 (let (($x78 (or $x67 $x77)))
 (let (($x143 (and $x78 $x109)))
 (let (($x140 (= $x143 true)))
 (let (($x150 (= $x140 true)))
 (let (($x151 (= $x150 true)))
 (let ((?x56 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x28 $x52)))
 (let (($x54 (and $x55 $x57)))
 (let (($x40 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x40 $x54)))
 (let (($x50 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x50)))))
 (let (($x53 (and $x17 $x58)))
 (let (($x59 (= $x53 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x25 (concat ?x21 (concat ?x33 ?x87)))))
 (let (($x29 (= ?x68 input.dst.llvm-%val)))
 (let (($x5 (= $x29 true)))
 (let (($x20 (= $x5 true)))
 (let (($x71 (and $x20 $x72)))
 (let (($x152 (and $x71 $x151)))
 (let (($x158 (and $x152 $x157)))
 (let (($x69 (and $x158 $x11)))
 (let (($x62 (=> $x69 $x171)))
 (let (($x39 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x88 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x44 $x88) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x39 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x170 ((_ extract 1 0) input.spec-%var-val-0)))
 (let (($x12 (= (_ bv0 2) ?x170)))
 (let (($x171 (= $x12 true)))
 (let (($x166 (= false false)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x167 (=> $x160 $x166)))
 (let (($x165 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x162 (not $x165)))
 (let (($x9 (and (and (and (= $x160 (= (_ bv0 32) (_ bv0 32))) (= $x165 (bvuge (_ bv0 32) (_ bv1 32)))) $x162) $x167)))
 (let (($x11 (= $x9 true)))
 (let (($x154 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x155 (= $x154 true)))
 (let (($x156 (= $x155 true)))
 (let (($x157 (= $x156 true)))
 (let ((?x73 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x128 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x101 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x111 (_ bv1 8))) (= ?x114 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x116 (= ?x118 (_ bv1 8))) (= ?x128 (_ bv1 8))) (= ?x134 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x73) (_ bv1 8)))))
 (let (($x92 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x146 (=> $x92 (or false (or false $x144)))))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x149 (or $x67 $x146)))
 (let ((?x99 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x94 (= (bvand ?x99 (_ bv4294967292 32)) ?x99)))
 (let (($x83 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x99 (bvsub ?x99 (_ bv4 32))) (bvult ?x99 (bvsub ?x99 (_ bv4 32))))))
 (let (($x120 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x65 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x89 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x65) (bvult input.dst.llvm-%call.Lentry%2%d ?x65))))
 (let (($x86 (and true $x89)))
 (let (($x98 (and $x89 $x86)))
 (let (($x97 (and (and (and $x86 $x98) $x120) $x83)))
 (let (($x121 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x109 (and (and (and $x121 $x97) $x94) $x149)))
 (let (($x79 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x73)))
 (let (($x77 (or false $x79)))
 (let (($x78 (or $x67 $x77)))
 (let (($x143 (and $x78 $x109)))
 (let (($x140 (= $x143 true)))
 (let (($x150 (= $x140 true)))
 (let (($x151 (= $x150 true)))
 (let ((?x56 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x28 $x52)))
 (let (($x54 (and $x55 $x57)))
 (let (($x40 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x40 $x54)))
 (let (($x50 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x50)))))
 (let (($x53 (and $x17 $x58)))
 (let (($x59 (= $x53 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x25 (concat ?x21 (concat ?x33 ?x87)))))
 (let (($x29 (= ?x68 input.dst.llvm-%val)))
 (let (($x5 (= $x29 true)))
 (let (($x20 (= $x5 true)))
 (let (($x71 (and $x20 $x72)))
 (let (($x152 (and $x71 $x151)))
 (let (($x158 (and $x152 $x157)))
 (let (($x69 (and $x158 $x11)))
 (let (($x62 (=> $x69 $x171)))
 (let (($x39 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x88 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x44 $x88) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x39 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00081d00)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xd5200000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x03))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00081d03)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00081d00)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x40000001) #x01
    (ite (= x!0 #x00081d03) #x03
    (ite (= x!0 #x00081d01) #x03
    (ite (= x!0 #x40000004) #x01
    (ite (= x!0 #x40000005) #x01
    (ite (= x!0 #x40000003) #x01
    (ite (= x!0 #x00081d00) #x03
    (ite (= x!0 #x40000000) #x01
    (ite (= x!0 #x40000006) #x01
    (ite (= x!0 #x40000007) #x01
    (ite (= x!0 #x40000002) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x40000005 x!0)
                    (ite (bvule #x40000006 x!0)
                         (ite (bvule #x40000007 x!0) #x40000007 #x40000006)
                         #x40000005)
                    #x40000004)))
    (let ((a!2 (ite (bvule #x40000002 x!0)
                    (ite (bvule #x40000003 x!0)
                         (ite (bvule #x40000004 x!0) a!1 #x40000003)
                         #x40000002)
                    #x40000001)))
    (let ((a!3 (ite (bvule #x00081d04 x!0)
                    (ite (bvule #x40000000 x!0)
                         (ite (bvule #x40000001 x!0) a!2 #x40000000)
                         #x00081d04)
                    #x00081d03)))
      (ite (bvule #x00081d00 x!0)
           (ite (bvule #x00081d01 x!0)
                (ite (bvule #x00081d03 x!0) a!3 #x00081d01)
                #x00081d00)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x9d004000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x03))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x590420b4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x590420b7)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x590420b4)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #x590420b4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x590420b5) #x03
    (ite (= x!0 #x590420b7) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) #x80000000 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!2 (ite (bvule #x7ffffffb x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!1 #x7ffffffc)
                         #x7ffffffb)
                    #x7ffffffa)))
    (let ((a!3 (ite (bvule #x590420b8 x!0)
                    (ite (bvule #x7ffffff9 x!0)
                         (ite (bvule #x7ffffffa x!0) a!2 #x7ffffff9)
                         #x590420b8)
                    #x590420b7)))
      (ite (bvule #x590420b4 x!0)
           (ite (bvule #x590420b5 x!0)
                (ite (bvule #x590420b7 x!0) a!3 #x590420b5)
                #x590420b4)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x9 (not true)))
 (let (($x167 (= true true)))
 (let (($x11 (and $x167 $x9)))
 (let (($x69 (= $x11 true)))
 (let (($x163 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x168 (= $x14 $x163)))
 (let (($x159 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x165 (= $x164 $x159)))
 (let (($x162 (and $x165 $x168)))
 (let (($x169 (= $x162 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x154 (concat ?x151 (concat ?x143 ?x149)))))
 (let (($x156 (= ?x155 input.dst.llvm-%val)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x137 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x145 (= $x137 true)))
 (let (($x144 (= $x145 true)))
 (let (($x141 (= $x144 true)))
 (let ((?x28 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x148 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x92 (and (and (and (and true (= ?x95 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x110 (_ bv1 8)))))
 (let (($x117 (and (and (and (and $x92 (= ?x101 (_ bv1 8))) (= ?x106 (_ bv1 8))) (= ?x148 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x28) (_ bv1 8)))))
 (let (($x123 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x126 (=> $x123 (or false (or false $x117)))))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x85 (or $x6 $x126)))
 (let ((?x78 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x86 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x64 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x78 (bvsub ?x78 (_ bv4 32))) (bvult ?x78 (bvsub ?x78 (_ bv4 32))))))
 (let (($x79 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x53 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x53) (bvult input.dst.llvm-%call.Lentry%2%d ?x53))))
 (let (($x70 (and true $x71)))
 (let (($x67 (and $x71 $x70)))
 (let (($x76 (and (and (and $x70 $x67) $x79) $x64)))
 (let (($x54 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x128 (and (and (and $x54 $x76) $x86) $x85)))
 (let (($x51 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x28)))
 (let (($x52 (or false $x51)))
 (let (($x55 (or $x6 $x52)))
 (let (($x129 (and $x55 $x128)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let ((?x41 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x41)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x68 $x5)))
 (let (($x19 (and $x20 $x36)))
 (let (($x46 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x46 $x19)))
 (let (($x10 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x10)))))
 (let (($x8 (and $x43 $x31)))
 (let (($x27 (= $x8 true)))
 (let (($x18 (= $x27 true)))
 (let (($x50 (= $x18 true)))
 (let (($x134 (and $x50 $x132)))
 (let (($x139 (and $x134 $x141)))
 (let (($x161 (and $x139 $x158)))
 (let (($x166 (and $x161 $x169)))
 (let (($x22 (=> $x166 $x69)))
 (let (($x133 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x30 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x133 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x9 (not true)))
 (let (($x167 (= true true)))
 (let (($x11 (and $x167 $x9)))
 (let (($x69 (= $x11 true)))
 (let (($x163 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x168 (= $x14 $x163)))
 (let (($x159 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x165 (= $x164 $x159)))
 (let (($x162 (and $x165 $x168)))
 (let (($x169 (= $x162 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x154 (concat ?x151 (concat ?x143 ?x149)))))
 (let (($x156 (= ?x155 input.dst.llvm-%val)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x137 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x145 (= $x137 true)))
 (let (($x144 (= $x145 true)))
 (let (($x141 (= $x144 true)))
 (let ((?x28 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x148 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x92 (and (and (and (and true (= ?x95 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x110 (_ bv1 8)))))
 (let (($x117 (and (and (and (and $x92 (= ?x101 (_ bv1 8))) (= ?x106 (_ bv1 8))) (= ?x148 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x28) (_ bv1 8)))))
 (let (($x123 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x126 (=> $x123 (or false (or false $x117)))))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x85 (or $x6 $x126)))
 (let ((?x78 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x86 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x64 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x78 (bvsub ?x78 (_ bv4 32))) (bvult ?x78 (bvsub ?x78 (_ bv4 32))))))
 (let (($x79 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x53 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x53) (bvult input.dst.llvm-%call.Lentry%2%d ?x53))))
 (let (($x70 (and true $x71)))
 (let (($x67 (and $x71 $x70)))
 (let (($x76 (and (and (and $x70 $x67) $x79) $x64)))
 (let (($x54 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x128 (and (and (and $x54 $x76) $x86) $x85)))
 (let (($x51 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x28)))
 (let (($x52 (or false $x51)))
 (let (($x55 (or $x6 $x52)))
 (let (($x129 (and $x55 $x128)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let ((?x41 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x41)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x68 $x5)))
 (let (($x19 (and $x20 $x36)))
 (let (($x46 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x46 $x19)))
 (let (($x10 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x10)))))
 (let (($x8 (and $x43 $x31)))
 (let (($x27 (= $x8 true)))
 (let (($x18 (= $x27 true)))
 (let (($x50 (= $x18 true)))
 (let (($x134 (and $x50 $x132)))
 (let (($x139 (and $x134 $x141)))
 (let (($x161 (and $x139 $x158)))
 (let (($x166 (and $x161 $x169)))
 (let (($x22 (=> $x166 $x69)))
 (let (($x133 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x30 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x133 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x170 (not true)))
 (let (($x22 (= true true)))
 (let (($x12 (and $x22 $x170)))
 (let (($x17 (= $x12 true)))
 (let (($x169 (= false false)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x166 (=> $x159 $x169)))
 (let (($x168 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x162 (= $x163 $x168)))
 (let (($x165 (= (_ bv0 32) (_ bv0 32))))
 (let (($x14 (= $x159 $x165)))
 (let (($x9 (and (and $x14 $x162) $x166)))
 (let (($x11 (= $x9 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x155 (concat ?x149 (concat ?x151 ?x154)))))
 (let (($x157 (= ?x156 input.dst.llvm-%val)))
 (let (($x158 (= $x157 true)))
 (let (($x161 (= $x158 true)))
 (let (($x145 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x144 (= $x145 true)))
 (let (($x141 (= $x144 true)))
 (let (($x139 (= $x141 true)))
 (let ((?x51 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x148 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x92 (and (and (and (and true (= ?x95 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x110 (_ bv1 8)))))
 (let (($x117 (and (and (and (and $x92 (= ?x101 (_ bv1 8))) (= ?x106 (_ bv1 8))) (= ?x148 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x51) (_ bv1 8)))))
 (let (($x126 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x85 (=> $x126 (or false (or false $x117)))))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x98 (or $x6 $x85)))
 (let ((?x77 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x86 (= (bvand ?x77 (_ bv4294967292 32)) ?x77)))
 (let (($x75 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x77 (bvsub ?x77 (_ bv4 32))) (bvult ?x77 (bvsub ?x77 (_ bv4 32))))))
 (let (($x79 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x53 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x53) (bvult input.dst.llvm-%call.Lentry%2%d ?x53))))
 (let (($x67 (and true $x70)))
 (let (($x65 (and $x70 $x67)))
 (let (($x122 (and (and (and $x67 $x65) $x79) $x75)))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (and (and (and $x59 $x122) $x86) $x98)))
 (let (($x52 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x51)))
 (let (($x55 (or false $x52)))
 (let (($x56 (or $x6 $x55)))
 (let (($x130 (and $x56 $x129)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x134 (= $x132 true)))
 (let ((?x41 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x41)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x68 $x5)))
 (let (($x19 (and $x20 $x36)))
 (let (($x44 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x44 $x19)))
 (let (($x33 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x33)))))
 (let (($x8 (and $x46 $x31)))
 (let (($x27 (= $x8 true)))
 (let (($x18 (= $x27 true)))
 (let (($x50 (= $x18 true)))
 (let (($x135 (and $x50 $x134)))
 (let (($x146 (and $x135 $x139)))
 (let (($x160 (and $x146 $x161)))
 (let (($x69 (and $x160 $x11)))
 (let (($x171 (=> $x69 $x17)))
 (let (($x21 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x23 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x23) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x21 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x170 (not true)))
 (let (($x22 (= true true)))
 (let (($x12 (and $x22 $x170)))
 (let (($x17 (= $x12 true)))
 (let (($x169 (= false false)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x166 (=> $x159 $x169)))
 (let (($x168 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x162 (= $x163 $x168)))
 (let (($x165 (= (_ bv0 32) (_ bv0 32))))
 (let (($x14 (= $x159 $x165)))
 (let (($x9 (and (and $x14 $x162) $x166)))
 (let (($x11 (= $x9 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x155 (concat ?x149 (concat ?x151 ?x154)))))
 (let (($x157 (= ?x156 input.dst.llvm-%val)))
 (let (($x158 (= $x157 true)))
 (let (($x161 (= $x158 true)))
 (let (($x145 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x144 (= $x145 true)))
 (let (($x141 (= $x144 true)))
 (let (($x139 (= $x141 true)))
 (let ((?x51 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x148 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x92 (and (and (and (and true (= ?x95 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x110 (_ bv1 8)))))
 (let (($x117 (and (and (and (and $x92 (= ?x101 (_ bv1 8))) (= ?x106 (_ bv1 8))) (= ?x148 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x51) (_ bv1 8)))))
 (let (($x126 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x85 (=> $x126 (or false (or false $x117)))))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x98 (or $x6 $x85)))
 (let ((?x77 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x86 (= (bvand ?x77 (_ bv4294967292 32)) ?x77)))
 (let (($x75 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x77 (bvsub ?x77 (_ bv4 32))) (bvult ?x77 (bvsub ?x77 (_ bv4 32))))))
 (let (($x79 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x53 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x53) (bvult input.dst.llvm-%call.Lentry%2%d ?x53))))
 (let (($x67 (and true $x70)))
 (let (($x65 (and $x70 $x67)))
 (let (($x122 (and (and (and $x67 $x65) $x79) $x75)))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (and (and (and $x59 $x122) $x86) $x98)))
 (let (($x52 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x51)))
 (let (($x55 (or false $x52)))
 (let (($x56 (or $x6 $x55)))
 (let (($x130 (and $x56 $x129)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x134 (= $x132 true)))
 (let ((?x41 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x41)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x68 $x5)))
 (let (($x19 (and $x20 $x36)))
 (let (($x44 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x44 $x19)))
 (let (($x33 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x33)))))
 (let (($x8 (and $x46 $x31)))
 (let (($x27 (= $x8 true)))
 (let (($x18 (= $x27 true)))
 (let (($x50 (= $x18 true)))
 (let (($x135 (and $x50 $x134)))
 (let (($x146 (and $x135 $x139)))
 (let (($x160 (and $x146 $x161)))
 (let (($x69 (and $x160 $x11)))
 (let (($x171 (=> $x69 $x17)))
 (let (($x21 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x23 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x23) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x21 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x195 (not true)))
 (let (($x194 (= true true)))
 (let (($x196 (and $x194 $x195)))
 (let (($x197 (= $x196 true)))
 (let (($x162 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x181 (= $x180 $x162)))
 (let (($x61 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x66 (and $x168 $x61)))
 (let (($x182 (=> $x66 $x181)))
 (let (($x14 (= (_ bv0 32) (_ bv0 32))))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x178 (= $x177 $x14)))
 (let (($x179 (=> $x66 $x178)))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x175 (=> $x66 $x174)))
 (let (($x40 (= $x61 $x162)))
 (let (($x172 (=> $x168 $x40)))
 (let (($x169 (= false false)))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x171 (and $x168 $x170)))
 (let (($x62 (=> $x171 $x169)))
 (let (($x12 (= $x170 $x14)))
 (let (($x17 (=> $x168 $x12)))
 (let (($x11 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x69 (=> $x168 $x11)))
 (let (($x165 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x166 (=> $x165 $x169)))
 (let (($x187 (and (and (and (and (and (= $x165 $x14) (= $x168 $x162)) $x166) $x69) $x17) $x62)))
 (let (($x191 (and (and (and (and $x187 $x172) $x175) $x179) $x182)))
 (let (($x192 (= $x191 true)))
 (let ((?x155 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x156 (concat ?x154 (concat ?x149 ?x155)))))
 (let (($x158 (= ?x157 input.dst.llvm-%val)))
 (let (($x161 (= $x158 true)))
 (let (($x160 (= $x161 true)))
 (let (($x144 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x141 (= $x144 true)))
 (let (($x139 (= $x141 true)))
 (let (($x146 (= $x139 true)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x148 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x92 (and (and (and (and true (= ?x95 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x110 (_ bv1 8)))))
 (let (($x117 (and (and (and (and $x92 (= ?x101 (_ bv1 8))) (= ?x106 (_ bv1 8))) (= ?x148 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv1 8)))))
 (let (($x85 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x98 (=> $x85 (or false (or false $x117)))))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (or $x6 $x98)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x86 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x121 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x79 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x53 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x53) (bvult input.dst.llvm-%call.Lentry%2%d ?x53))))
 (let (($x65 (and true $x67)))
 (let (($x64 (and $x67 $x65)))
 (let (($x80 (and (and (and $x65 $x64) $x79) $x121)))
 (let (($x60 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x130 (and (and (and $x60 $x80) $x86) $x127)))
 (let (($x55 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let (($x56 (or false $x55)))
 (let (($x57 (or $x6 $x56)))
 (let (($x131 (and $x57 $x130)))
 (let (($x132 (= $x131 true)))
 (let (($x134 (= $x132 true)))
 (let (($x135 (= $x134 true)))
 (let ((?x41 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x41)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x68 $x5)))
 (let (($x19 (and $x20 $x36)))
 (let (($x34 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x34 $x19)))
 (let (($x45 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x45)))))
 (let (($x8 (and $x44 $x31)))
 (let (($x27 (= $x8 true)))
 (let (($x18 (= $x27 true)))
 (let (($x50 (= $x18 true)))
 (let (($x136 (and $x50 $x135)))
 (let (($x153 (and $x136 $x146)))
 (let (($x164 (and $x153 $x160)))
 (let (($x193 (and $x164 $x192)))
 (let (($x198 (=> $x193 $x197)))
 (let (($x25 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x30 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x23 $x30) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x25 (not $x198))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x195 (not true)))
 (let (($x194 (= true true)))
 (let (($x196 (and $x194 $x195)))
 (let (($x197 (= $x196 true)))
 (let (($x162 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x181 (= $x180 $x162)))
 (let (($x61 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x66 (and $x168 $x61)))
 (let (($x182 (=> $x66 $x181)))
 (let (($x14 (= (_ bv0 32) (_ bv0 32))))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x178 (= $x177 $x14)))
 (let (($x179 (=> $x66 $x178)))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x175 (=> $x66 $x174)))
 (let (($x40 (= $x61 $x162)))
 (let (($x172 (=> $x168 $x40)))
 (let (($x169 (= false false)))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x171 (and $x168 $x170)))
 (let (($x62 (=> $x171 $x169)))
 (let (($x12 (= $x170 $x14)))
 (let (($x17 (=> $x168 $x12)))
 (let (($x11 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x69 (=> $x168 $x11)))
 (let (($x165 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x166 (=> $x165 $x169)))
 (let (($x187 (and (and (and (and (and (= $x165 $x14) (= $x168 $x162)) $x166) $x69) $x17) $x62)))
 (let (($x191 (and (and (and (and $x187 $x172) $x175) $x179) $x182)))
 (let (($x192 (= $x191 true)))
 (let ((?x155 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x156 (concat ?x154 (concat ?x149 ?x155)))))
 (let (($x158 (= ?x157 input.dst.llvm-%val)))
 (let (($x161 (= $x158 true)))
 (let (($x160 (= $x161 true)))
 (let (($x144 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x141 (= $x144 true)))
 (let (($x139 (= $x141 true)))
 (let (($x146 (= $x139 true)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x148 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x101 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x92 (and (and (and (and true (= ?x95 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x110 (_ bv1 8)))))
 (let (($x117 (and (and (and (and $x92 (= ?x101 (_ bv1 8))) (= ?x106 (_ bv1 8))) (= ?x148 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv1 8)))))
 (let (($x85 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x98 (=> $x85 (or false (or false $x117)))))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (or $x6 $x98)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x86 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x121 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x79 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x53 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x53) (bvult input.dst.llvm-%call.Lentry%2%d ?x53))))
 (let (($x65 (and true $x67)))
 (let (($x64 (and $x67 $x65)))
 (let (($x80 (and (and (and $x65 $x64) $x79) $x121)))
 (let (($x60 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x130 (and (and (and $x60 $x80) $x86) $x127)))
 (let (($x55 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let (($x56 (or false $x55)))
 (let (($x57 (or $x6 $x56)))
 (let (($x131 (and $x57 $x130)))
 (let (($x132 (= $x131 true)))
 (let (($x134 (= $x132 true)))
 (let (($x135 (= $x134 true)))
 (let ((?x41 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x41)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x68 $x5)))
 (let (($x19 (and $x20 $x36)))
 (let (($x34 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x34 $x19)))
 (let (($x45 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x45)))))
 (let (($x8 (and $x44 $x31)))
 (let (($x27 (= $x8 true)))
 (let (($x18 (= $x27 true)))
 (let (($x50 (= $x18 true)))
 (let (($x136 (and $x50 $x135)))
 (let (($x153 (and $x136 $x146)))
 (let (($x164 (and $x153 $x160)))
 (let (($x193 (and $x164 $x192)))
 (let (($x198 (=> $x193 $x197)))
 (let (($x25 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x30 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x23 $x30) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x25 (not $x198))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x232 (not true)))
 (let (($x231 (= true true)))
 (let (($x233 (and $x231 $x232)))
 (let (($x234 (= $x233 true)))
 (let (($x162 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x209 (= $x208 $x162)))
 (let (($x195 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x189 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x69 (and $x168 $x184)))
 (let (($x178 (and $x69 $x189)))
 (let (($x198 (and $x178 $x195)))
 (let (($x210 (=> $x198 $x209)))
 (let (($x183 (= false false)))
 (let (($x203 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x206 (and $x198 $x203)))
 (let (($x207 (=> $x206 $x183)))
 (let (($x14 (= (_ bv0 32) (_ bv0 32))))
 (let (($x204 (= $x203 $x14)))
 (let (($x205 (=> $x198 $x204)))
 (let (($x200 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x201 (=> $x198 $x200)))
 (let (($x196 (= $x195 $x162)))
 (let (($x197 (=> $x178 $x196)))
 (let (($x182 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x193 (and $x178 $x182)))
 (let (($x194 (=> $x193 $x183)))
 (let (($x191 (= $x182 $x14)))
 (let (($x192 (=> $x178 $x191)))
 (let (($x190 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x180 (=> $x178 $x190)))
 (let (($x176 (= $x189 $x162)))
 (let (($x177 (=> $x69 $x176)))
 (let (($x11 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x174 (= $x11 $x14)))
 (let (($x175 (=> $x69 $x174)))
 (let (($x66 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x173 (=> $x69 $x66)))
 (let (($x40 (= $x184 $x162)))
 (let (($x172 (=> $x168 $x40)))
 (let (($x186 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x187 (and $x168 $x186)))
 (let (($x61 (=> $x187 $x183)))
 (let (($x171 (= $x186 $x14)))
 (let (($x62 (=> $x168 $x171)))
 (let (($x12 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x17 (=> $x168 $x12)))
 (let (($x185 (and $x69 $x11)))
 (let (($x22 (=> $x185 $x183)))
 (let (($x165 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x169 (=> $x165 $x183)))
 (let (($x215 (and (and (and (and (and (= $x165 $x14) (= $x168 $x162)) $x169) $x22) $x17) $x62)))
 (let (($x221 (and (and (and (and (and (and $x215 $x61) $x172) $x173) $x175) $x177) $x180)))
 (let (($x227 (and (and (and (and (and (and $x221 $x192) $x194) $x197) $x201) $x205) $x207)))
 (let (($x228 (and $x227 $x210)))
 (let (($x229 (= $x228 true)))
 (let ((?x140 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x109 (concat ?x149 (concat ?x151 ?x140)))))
 (let (($x158 (= ?x157 input.dst.llvm-%val)))
 (let (($x161 (= $x158 true)))
 (let (($x160 (= $x161 true)))
 (let (($x144 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x141 (= $x144 true)))
 (let (($x139 (= $x141 true)))
 (let (($x146 (= $x139 true)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x138 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x93 (and (and (and (and true (= ?x96 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x138 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x93 (= ?x100 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv1 8)))))
 (let (($x119 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x98 (=> $x119 (or false (or false $x116)))))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (or $x27 $x98)))
 (let ((?x122 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x89 (= (bvand ?x122 (_ bv4294967292 32)) ?x122)))
 (let (($x125 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x122 (bvsub ?x122 (_ bv4 32))) (bvult ?x122 (bvsub ?x122 (_ bv4 32))))))
 (let (($x73 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x58 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x58) (bvult input.dst.llvm-%call.Lentry%2%d ?x58))))
 (let (($x65 (and true $x67)))
 (let (($x64 (and $x67 $x65)))
 (let (($x80 (and (and (and $x65 $x64) $x73) $x125)))
 (let (($x60 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x130 (and (and (and $x60 $x80) $x89) $x129)))
 (let (($x55 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let (($x56 (or false $x55)))
 (let (($x57 (or $x27 $x56)))
 (let (($x131 (and $x57 $x130)))
 (let (($x132 (= $x131 true)))
 (let (($x134 (= $x132 true)))
 (let (($x135 (= $x134 true)))
 (let ((?x13 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x13)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x33 $x34)))
 (let (($x5 (and $x68 $x29)))
 (let (($x43 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x43 $x5)))
 (let (($x51 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x51)))))
 (let (($x41 (and $x10 $x20)))
 (let (($x36 (= $x41 true)))
 (let (($x19 (= $x36 true)))
 (let (($x31 (= $x19 true)))
 (let (($x136 (and $x31 $x135)))
 (let (($x153 (and $x136 $x146)))
 (let (($x164 (and $x153 $x160)))
 (let (($x230 (and $x164 $x229)))
 (let (($x235 (=> $x230 $x234)))
 (let (($x37 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x88 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x38 $x88) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x37 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x232 (not true)))
 (let (($x231 (= true true)))
 (let (($x233 (and $x231 $x232)))
 (let (($x234 (= $x233 true)))
 (let (($x162 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x209 (= $x208 $x162)))
 (let (($x195 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x189 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x69 (and $x168 $x184)))
 (let (($x178 (and $x69 $x189)))
 (let (($x198 (and $x178 $x195)))
 (let (($x210 (=> $x198 $x209)))
 (let (($x183 (= false false)))
 (let (($x203 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x206 (and $x198 $x203)))
 (let (($x207 (=> $x206 $x183)))
 (let (($x14 (= (_ bv0 32) (_ bv0 32))))
 (let (($x204 (= $x203 $x14)))
 (let (($x205 (=> $x198 $x204)))
 (let (($x200 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x201 (=> $x198 $x200)))
 (let (($x196 (= $x195 $x162)))
 (let (($x197 (=> $x178 $x196)))
 (let (($x182 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x193 (and $x178 $x182)))
 (let (($x194 (=> $x193 $x183)))
 (let (($x191 (= $x182 $x14)))
 (let (($x192 (=> $x178 $x191)))
 (let (($x190 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x180 (=> $x178 $x190)))
 (let (($x176 (= $x189 $x162)))
 (let (($x177 (=> $x69 $x176)))
 (let (($x11 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x174 (= $x11 $x14)))
 (let (($x175 (=> $x69 $x174)))
 (let (($x66 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x173 (=> $x69 $x66)))
 (let (($x40 (= $x184 $x162)))
 (let (($x172 (=> $x168 $x40)))
 (let (($x186 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x187 (and $x168 $x186)))
 (let (($x61 (=> $x187 $x183)))
 (let (($x171 (= $x186 $x14)))
 (let (($x62 (=> $x168 $x171)))
 (let (($x12 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x17 (=> $x168 $x12)))
 (let (($x185 (and $x69 $x11)))
 (let (($x22 (=> $x185 $x183)))
 (let (($x165 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x169 (=> $x165 $x183)))
 (let (($x215 (and (and (and (and (and (= $x165 $x14) (= $x168 $x162)) $x169) $x22) $x17) $x62)))
 (let (($x221 (and (and (and (and (and (and $x215 $x61) $x172) $x173) $x175) $x177) $x180)))
 (let (($x227 (and (and (and (and (and (and $x221 $x192) $x194) $x197) $x201) $x205) $x207)))
 (let (($x228 (and $x227 $x210)))
 (let (($x229 (= $x228 true)))
 (let ((?x140 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x109 (concat ?x149 (concat ?x151 ?x140)))))
 (let (($x158 (= ?x157 input.dst.llvm-%val)))
 (let (($x161 (= $x158 true)))
 (let (($x160 (= $x161 true)))
 (let (($x144 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x141 (= $x144 true)))
 (let (($x139 (= $x141 true)))
 (let (($x146 (= $x139 true)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x138 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x93 (and (and (and (and true (= ?x96 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x138 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x93 (= ?x100 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv1 8)))))
 (let (($x119 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x98 (=> $x119 (or false (or false $x116)))))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (or $x27 $x98)))
 (let ((?x122 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x89 (= (bvand ?x122 (_ bv4294967292 32)) ?x122)))
 (let (($x125 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x122 (bvsub ?x122 (_ bv4 32))) (bvult ?x122 (bvsub ?x122 (_ bv4 32))))))
 (let (($x73 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x58 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x58) (bvult input.dst.llvm-%call.Lentry%2%d ?x58))))
 (let (($x65 (and true $x67)))
 (let (($x64 (and $x67 $x65)))
 (let (($x80 (and (and (and $x65 $x64) $x73) $x125)))
 (let (($x60 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x130 (and (and (and $x60 $x80) $x89) $x129)))
 (let (($x55 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let (($x56 (or false $x55)))
 (let (($x57 (or $x27 $x56)))
 (let (($x131 (and $x57 $x130)))
 (let (($x132 (= $x131 true)))
 (let (($x134 (= $x132 true)))
 (let (($x135 (= $x134 true)))
 (let ((?x13 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x13)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x33 $x34)))
 (let (($x5 (and $x68 $x29)))
 (let (($x43 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x43 $x5)))
 (let (($x51 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x51)))))
 (let (($x41 (and $x10 $x20)))
 (let (($x36 (= $x41 true)))
 (let (($x19 (= $x36 true)))
 (let (($x31 (= $x19 true)))
 (let (($x136 (and $x31 $x135)))
 (let (($x153 (and $x136 $x146)))
 (let (($x164 (and $x153 $x160)))
 (let (($x230 (and $x164 $x229)))
 (let (($x235 (=> $x230 $x234)))
 (let (($x37 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x88 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x38 $x88) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x37 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x184 (not true)))
 (let (($x166 (= true true)))
 (let (($x69 (and $x166 $x184)))
 (let (($x9 (= $x69 true)))
 (let (($x167 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x211 (= $x162 $x167)))
 (let (($x163 (= (_ bv0 32) (_ bv0 32))))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x168 (= $x14 $x163)))
 (let (($x183 (and $x168 $x211)))
 (let (($x169 (= $x183 true)))
 (let ((?x124 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x124) (_ bv1 8)))))
 (let (($x140 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x154 (=> $x140 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x101 (or $x77 $x154)))
 (let ((?x84 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x84 (_ bv4294967292 32)) ?x84)))
 (let (($x94 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x84 (bvsub ?x84 (_ bv4 32))) (bvult ?x84 (bvsub ?x84 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x96 (and true $x85)))
 (let (($x95 (and $x85 $x96)))
 (let (($x110 (and (and (and $x96 $x95) $x74) $x94)))
 (let (($x89 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x157 (and (and (and $x89 $x110) $x92) $x101)))
 (let (($x78 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x124)))
 (let (($x125 (or false $x78)))
 (let (($x80 (or $x77 $x125)))
 (let (($x158 (and $x80 $x157)))
 (let (($x161 (= $x158 true)))
 (let (($x160 (= $x161 true)))
 (let (($x164 (= $x160 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x5 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x29 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x29 $x53)))
 (let (($x8 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x58 (and $x55 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x25 (concat ?x51 (concat ?x28 ?x87)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x159 (and $x121 $x164)))
 (let (($x212 (and $x159 $x169)))
 (let (($x11 (=> $x212 $x9)))
 (let (($x35 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x21 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x133 $x21) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x35 (not $x11))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x184 (not true)))
 (let (($x166 (= true true)))
 (let (($x69 (and $x166 $x184)))
 (let (($x9 (= $x69 true)))
 (let (($x167 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x211 (= $x162 $x167)))
 (let (($x163 (= (_ bv0 32) (_ bv0 32))))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x168 (= $x14 $x163)))
 (let (($x183 (and $x168 $x211)))
 (let (($x169 (= $x183 true)))
 (let ((?x124 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x124) (_ bv1 8)))))
 (let (($x140 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x154 (=> $x140 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x101 (or $x77 $x154)))
 (let ((?x84 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x84 (_ bv4294967292 32)) ?x84)))
 (let (($x94 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x84 (bvsub ?x84 (_ bv4 32))) (bvult ?x84 (bvsub ?x84 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x96 (and true $x85)))
 (let (($x95 (and $x85 $x96)))
 (let (($x110 (and (and (and $x96 $x95) $x74) $x94)))
 (let (($x89 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x157 (and (and (and $x89 $x110) $x92) $x101)))
 (let (($x78 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x124)))
 (let (($x125 (or false $x78)))
 (let (($x80 (or $x77 $x125)))
 (let (($x158 (and $x80 $x157)))
 (let (($x161 (= $x158 true)))
 (let (($x160 (= $x161 true)))
 (let (($x164 (= $x160 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x5 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x29 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x29 $x53)))
 (let (($x8 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x58 (and $x55 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x25 (concat ?x51 (concat ?x28 ?x87)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x159 (and $x121 $x164)))
 (let (($x212 (and $x159 $x169)))
 (let (($x11 (=> $x212 $x9)))
 (let (($x35 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x21 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x133 $x21) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x35 (not $x11))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x185 (not true)))
 (let (($x11 (= true true)))
 (let (($x22 (and $x11 $x185)))
 (let (($x122 (= $x22 true)))
 (let (($x169 (= false false)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x212 (=> $x163 $x169)))
 (let (($x211 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x183 (= $x167 $x211)))
 (let (($x168 (= (_ bv0 32) (_ bv0 32))))
 (let (($x162 (= $x163 $x168)))
 (let (($x184 (and (and $x162 $x183) $x212)))
 (let (($x69 (= $x184 true)))
 (let ((?x78 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x78) (_ bv1 8)))))
 (let (($x154 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x101 (=> $x154 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x100 (or $x77 $x101)))
 (let ((?x82 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x82 (_ bv4294967292 32)) ?x82)))
 (let (($x91 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x82 (bvsub ?x82 (_ bv4 32))) (bvult ?x82 (bvsub ?x82 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x96 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x95 (and true $x96)))
 (let (($x147 (and $x96 $x95)))
 (let (($x102 (and (and (and $x95 $x147) $x74) $x91)))
 (let (($x123 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (and (and (and $x123 $x102) $x92) $x100)))
 (let (($x125 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x78)))
 (let (($x80 (or false $x125)))
 (let (($x128 (or $x77 $x80)))
 (let (($x161 (and $x128 $x158)))
 (let (($x160 (= $x161 true)))
 (let (($x164 (= $x160 true)))
 (let (($x159 (= $x164 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x52 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x41 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x41 $x53)))
 (let (($x27 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x27)))))
 (let (($x58 (and $x5 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x48 (concat ?x46 (concat ?x23 ?x6)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x165 (and $x121 $x159)))
 (let (($x9 (and $x165 $x69)))
 (let (($x213 (=> $x9 $x122)))
 (let (($x45 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x15 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x15) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x45 (not $x213))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x185 (not true)))
 (let (($x11 (= true true)))
 (let (($x22 (and $x11 $x185)))
 (let (($x122 (= $x22 true)))
 (let (($x169 (= false false)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x212 (=> $x163 $x169)))
 (let (($x211 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x183 (= $x167 $x211)))
 (let (($x168 (= (_ bv0 32) (_ bv0 32))))
 (let (($x162 (= $x163 $x168)))
 (let (($x184 (and (and $x162 $x183) $x212)))
 (let (($x69 (= $x184 true)))
 (let ((?x78 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x78) (_ bv1 8)))))
 (let (($x154 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x101 (=> $x154 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x100 (or $x77 $x101)))
 (let ((?x82 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x82 (_ bv4294967292 32)) ?x82)))
 (let (($x91 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x82 (bvsub ?x82 (_ bv4 32))) (bvult ?x82 (bvsub ?x82 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x96 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x95 (and true $x96)))
 (let (($x147 (and $x96 $x95)))
 (let (($x102 (and (and (and $x95 $x147) $x74) $x91)))
 (let (($x123 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (and (and (and $x123 $x102) $x92) $x100)))
 (let (($x125 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x78)))
 (let (($x80 (or false $x125)))
 (let (($x128 (or $x77 $x80)))
 (let (($x161 (and $x128 $x158)))
 (let (($x160 (= $x161 true)))
 (let (($x164 (= $x160 true)))
 (let (($x159 (= $x164 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x52 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x41 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x41 $x53)))
 (let (($x27 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x27)))))
 (let (($x58 (and $x5 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x48 (concat ?x46 (concat ?x23 ?x6)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x165 (and $x121 $x159)))
 (let (($x9 (and $x165 $x69)))
 (let (($x213 (=> $x9 $x122)))
 (let (($x45 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x15 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x15) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x45 (not $x213))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x179 (not true)))
 (let (($x178 (= true true)))
 (let (($x190 (and $x178 $x179)))
 (let (($x180 (= $x190 true)))
 (let (($x183 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x172 (= $x40 $x183)))
 (let (($x12 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x211 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x214 (and $x211 $x12)))
 (let (($x217 (=> $x214 $x172)))
 (let (($x162 (= (_ bv0 32) (_ bv0 32))))
 (let (($x187 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x61 (= $x187 $x162)))
 (let (($x216 (=> $x214 $x61)))
 (let (($x171 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x62 (=> $x214 $x171)))
 (let (($x76 (= $x12 $x183)))
 (let (($x17 (=> $x211 $x76)))
 (let (($x169 (= false false)))
 (let (($x185 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x213 (and $x211 $x185)))
 (let (($x170 (=> $x213 $x169)))
 (let (($x22 (= $x185 $x162)))
 (let (($x122 (=> $x211 $x22)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x9 (=> $x211 $x69)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x212 (=> $x168 $x169)))
 (let (($x174 (and (and (and (and (and (= $x168 $x162) (= $x211 $x183)) $x212) $x9) $x122) $x170)))
 (let (($x176 (and (and (and (and $x174 $x17) $x62) $x216) $x217)))
 (let (($x177 (= $x176 true)))
 (let ((?x125 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x125) (_ bv1 8)))))
 (let (($x101 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x100 (=> $x101 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x155 (or $x77 $x100)))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x138 (_ bv4294967292 32)) ?x138)))
 (let (($x142 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x138 (bvsub ?x138 (_ bv4 32))) (bvult ?x138 (bvsub ?x138 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x95 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x147 (and true $x95)))
 (let (($x94 (and $x95 $x147)))
 (let (($x103 (and (and (and $x147 $x94) $x74) $x142)))
 (let (($x126 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (and (and (and $x126 $x103) $x92) $x155)))
 (let (($x80 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x125)))
 (let (($x128 (or false $x80)))
 (let (($x120 (or $x77 $x128)))
 (let (($x160 (and $x120 $x161)))
 (let (($x164 (= $x160 true)))
 (let (($x159 (= $x164 true)))
 (let (($x165 (= $x159 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x29 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x19 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x19 $x53)))
 (let (($x50 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x50)))))
 (let (($x58 (and $x52 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x28 (concat ?x26 (concat ?x88 ?x24)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x14 (and $x121 $x165)))
 (let (($x220 (and $x14 $x177)))
 (let (($x221 (=> $x220 $x180)))
 (let (($x30 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x87 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x87) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x30 (not $x221))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x179 (not true)))
 (let (($x178 (= true true)))
 (let (($x190 (and $x178 $x179)))
 (let (($x180 (= $x190 true)))
 (let (($x183 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x172 (= $x40 $x183)))
 (let (($x12 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x211 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x214 (and $x211 $x12)))
 (let (($x217 (=> $x214 $x172)))
 (let (($x162 (= (_ bv0 32) (_ bv0 32))))
 (let (($x187 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x61 (= $x187 $x162)))
 (let (($x216 (=> $x214 $x61)))
 (let (($x171 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x62 (=> $x214 $x171)))
 (let (($x76 (= $x12 $x183)))
 (let (($x17 (=> $x211 $x76)))
 (let (($x169 (= false false)))
 (let (($x185 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x213 (and $x211 $x185)))
 (let (($x170 (=> $x213 $x169)))
 (let (($x22 (= $x185 $x162)))
 (let (($x122 (=> $x211 $x22)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x9 (=> $x211 $x69)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x212 (=> $x168 $x169)))
 (let (($x174 (and (and (and (and (and (= $x168 $x162) (= $x211 $x183)) $x212) $x9) $x122) $x170)))
 (let (($x176 (and (and (and (and $x174 $x17) $x62) $x216) $x217)))
 (let (($x177 (= $x176 true)))
 (let ((?x125 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x125) (_ bv1 8)))))
 (let (($x101 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x100 (=> $x101 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x155 (or $x77 $x100)))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x138 (_ bv4294967292 32)) ?x138)))
 (let (($x142 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x138 (bvsub ?x138 (_ bv4 32))) (bvult ?x138 (bvsub ?x138 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x95 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x147 (and true $x95)))
 (let (($x94 (and $x95 $x147)))
 (let (($x103 (and (and (and $x147 $x94) $x74) $x142)))
 (let (($x126 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (and (and (and $x126 $x103) $x92) $x155)))
 (let (($x80 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x125)))
 (let (($x128 (or false $x80)))
 (let (($x120 (or $x77 $x128)))
 (let (($x160 (and $x120 $x161)))
 (let (($x164 (= $x160 true)))
 (let (($x159 (= $x164 true)))
 (let (($x165 (= $x159 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x29 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x19 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x19 $x53)))
 (let (($x50 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x50)))))
 (let (($x58 (and $x52 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x28 (concat ?x26 (concat ?x88 ?x24)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x14 (and $x121 $x165)))
 (let (($x220 (and $x14 $x177)))
 (let (($x221 (=> $x220 $x180)))
 (let (($x30 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x87 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x87) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x30 (not $x221))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x233 (not true)))
 (let (($x232 (= true true)))
 (let (($x234 (and $x232 $x233)))
 (let (($x235 (= $x234 true)))
 (let (($x166 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x197 (= $x196 $x166)))
 (let (($x190 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x173 (and $x183 $x184)))
 (let (($x216 (and $x173 $x215)))
 (let (($x181 (and $x216 $x190)))
 (let (($x224 (=> $x181 $x197)))
 (let (($x169 (= false false)))
 (let (($x222 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x223 (and $x181 $x222)))
 (let (($x195 (=> $x223 $x169)))
 (let (($x167 (= (_ bv0 32) (_ bv0 32))))
 (let (($x193 (= $x222 $x167)))
 (let (($x194 (=> $x181 $x193)))
 (let (($x124 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x191 (=> $x181 $x124)))
 (let (($x180 (= $x190 $x166)))
 (let (($x221 (=> $x216 $x180)))
 (let (($x176 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x178 (and $x216 $x176)))
 (let (($x179 (=> $x178 $x169)))
 (let (($x177 (= $x176 $x167)))
 (let (($x220 (=> $x216 $x177)))
 (let (($x40 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x172 (=> $x216 $x40)))
 (let (($x187 (= $x215 $x166)))
 (let (($x61 (=> $x173 $x187)))
 (let (($x9 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x62 (= $x9 $x167)))
 (let (($x219 (=> $x173 $x62)))
 (let (($x186 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x171 (=> $x173 $x186)))
 (let (($x17 (= $x184 $x166)))
 (let (($x175 (=> $x183 $x17)))
 (let (($x213 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x12 (and $x183 $x213)))
 (let (($x76 (=> $x12 $x169)))
 (let (($x170 (= $x213 $x167)))
 (let (($x174 (=> $x183 $x170)))
 (let (($x122 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x218 (=> $x183 $x122)))
 (let (($x11 (and $x173 $x9)))
 (let (($x185 (=> $x11 $x169)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x212 (=> $x162 $x169)))
 (let (($x225 (and (and (and (and (and (= $x162 $x167) (= $x183 $x166)) $x212) $x185) $x218) $x174)))
 (let (($x206 (and (and (and (and (and (and $x225 $x76) $x175) $x171) $x219) $x61) $x172)))
 (let (($x228 (and (and (and (and (and (and $x206 $x220) $x179) $x221) $x191) $x194) $x195)))
 (let (($x229 (and $x228 $x224)))
 (let (($x230 (= $x229 true)))
 (let ((?x80 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x80) (_ bv1 8)))))
 (let (($x100 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x155 (=> $x100 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x157 (or $x77 $x155)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x83 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x147 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x94 (and true $x147)))
 (let (($x91 (and $x147 $x94)))
 (let (($x104 (and (and (and $x94 $x91) $x74) $x83)))
 (let (($x119 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x160 (and (and (and $x119 $x104) $x92) $x157)))
 (let (($x128 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x80)))
 (let (($x120 (or false $x128)))
 (let (($x89 (or $x77 $x120)))
 (let (($x164 (and $x89 $x160)))
 (let (($x159 (= $x164 true)))
 (let (($x165 (= $x159 true)))
 (let (($x14 (= $x165 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x41 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x31 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x31 $x53)))
 (let (($x55 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x55)))))
 (let (($x58 (and $x29 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x23 (concat ?x38 (concat ?x39 ?x47)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x163 (and $x121 $x14)))
 (let (($x231 (and $x163 $x230)))
 (let (($x236 (=> $x231 $x235)))
 (let (($x37 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x6 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x7 $x6) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x37 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x233 (not true)))
 (let (($x232 (= true true)))
 (let (($x234 (and $x232 $x233)))
 (let (($x235 (= $x234 true)))
 (let (($x166 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x197 (= $x196 $x166)))
 (let (($x190 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x173 (and $x183 $x184)))
 (let (($x216 (and $x173 $x215)))
 (let (($x181 (and $x216 $x190)))
 (let (($x224 (=> $x181 $x197)))
 (let (($x169 (= false false)))
 (let (($x222 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x223 (and $x181 $x222)))
 (let (($x195 (=> $x223 $x169)))
 (let (($x167 (= (_ bv0 32) (_ bv0 32))))
 (let (($x193 (= $x222 $x167)))
 (let (($x194 (=> $x181 $x193)))
 (let (($x124 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x191 (=> $x181 $x124)))
 (let (($x180 (= $x190 $x166)))
 (let (($x221 (=> $x216 $x180)))
 (let (($x176 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x178 (and $x216 $x176)))
 (let (($x179 (=> $x178 $x169)))
 (let (($x177 (= $x176 $x167)))
 (let (($x220 (=> $x216 $x177)))
 (let (($x40 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x172 (=> $x216 $x40)))
 (let (($x187 (= $x215 $x166)))
 (let (($x61 (=> $x173 $x187)))
 (let (($x9 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x62 (= $x9 $x167)))
 (let (($x219 (=> $x173 $x62)))
 (let (($x186 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x171 (=> $x173 $x186)))
 (let (($x17 (= $x184 $x166)))
 (let (($x175 (=> $x183 $x17)))
 (let (($x213 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x12 (and $x183 $x213)))
 (let (($x76 (=> $x12 $x169)))
 (let (($x170 (= $x213 $x167)))
 (let (($x174 (=> $x183 $x170)))
 (let (($x122 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x218 (=> $x183 $x122)))
 (let (($x11 (and $x173 $x9)))
 (let (($x185 (=> $x11 $x169)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x212 (=> $x162 $x169)))
 (let (($x225 (and (and (and (and (and (= $x162 $x167) (= $x183 $x166)) $x212) $x185) $x218) $x174)))
 (let (($x206 (and (and (and (and (and (and $x225 $x76) $x175) $x171) $x219) $x61) $x172)))
 (let (($x228 (and (and (and (and (and (and $x206 $x220) $x179) $x221) $x191) $x194) $x195)))
 (let (($x229 (and $x228 $x224)))
 (let (($x230 (= $x229 true)))
 (let ((?x80 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x80) (_ bv1 8)))))
 (let (($x100 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x155 (=> $x100 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x157 (or $x77 $x155)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x83 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x147 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x94 (and true $x147)))
 (let (($x91 (and $x147 $x94)))
 (let (($x104 (and (and (and $x94 $x91) $x74) $x83)))
 (let (($x119 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x160 (and (and (and $x119 $x104) $x92) $x157)))
 (let (($x128 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x80)))
 (let (($x120 (or false $x128)))
 (let (($x89 (or $x77 $x120)))
 (let (($x164 (and $x89 $x160)))
 (let (($x159 (= $x164 true)))
 (let (($x165 (= $x159 true)))
 (let (($x14 (= $x165 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x41 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x31 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x31 $x53)))
 (let (($x55 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x55)))))
 (let (($x58 (and $x29 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x23 (concat ?x38 (concat ?x39 ?x47)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x163 (and $x121 $x14)))
 (let (($x231 (and $x163 $x230)))
 (let (($x236 (=> $x231 $x235)))
 (let (($x37 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x6 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x7 $x6) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x37 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x66 (= false true)))
 (let (($x184 (= $x66 true)))
 (let (($x188 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x198 (= $x166 $x188)))
 (let (($x211 (= (_ bv0 32) (_ bv0 32))))
 (let (($x167 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x183 (= $x167 $x211)))
 (let (($x169 (and $x183 $x198)))
 (let (($x212 (= $x169 true)))
 (let ((?x128 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x128) (_ bv1 8)))))
 (let (($x155 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x157 (=> $x155 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (or $x77 $x157)))
 (let ((?x102 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x102 (_ bv4294967292 32)) ?x102)))
 (let (($x97 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x102 (bvsub ?x102 (_ bv4 32))) (bvult ?x102 (bvsub ?x102 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x94 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x91 (and true $x94)))
 (let (($x142 (and $x94 $x91)))
 (let (($x140 (and (and (and $x91 $x142) $x74) $x97)))
 (let (($x85 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x164 (and (and (and $x85 $x140) $x92) $x158)))
 (let (($x120 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x128)))
 (let (($x89 (or false $x120)))
 (let (($x123 (or $x77 $x89)))
 (let (($x159 (and $x123 $x164)))
 (let (($x165 (= $x159 true)))
 (let (($x14 (= $x165 true)))
 (let (($x163 (= $x14 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x19 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x8 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x8 $x53)))
 (let (($x5 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x5)))))
 (let (($x58 (and $x41 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x88 (concat ?x133 (concat ?x25 ?x35)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x168 (and $x121 $x163)))
 (let (($x199 (and $x168 $x212)))
 (let (($x173 (=> $x199 $x184)))
 (let (($x42 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x42 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x66 (= false true)))
 (let (($x184 (= $x66 true)))
 (let (($x188 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x198 (= $x166 $x188)))
 (let (($x211 (= (_ bv0 32) (_ bv0 32))))
 (let (($x167 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x183 (= $x167 $x211)))
 (let (($x169 (and $x183 $x198)))
 (let (($x212 (= $x169 true)))
 (let ((?x128 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x128) (_ bv1 8)))))
 (let (($x155 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x157 (=> $x155 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (or $x77 $x157)))
 (let ((?x102 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x102 (_ bv4294967292 32)) ?x102)))
 (let (($x97 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x102 (bvsub ?x102 (_ bv4 32))) (bvult ?x102 (bvsub ?x102 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x94 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x91 (and true $x94)))
 (let (($x142 (and $x94 $x91)))
 (let (($x140 (and (and (and $x91 $x142) $x74) $x97)))
 (let (($x85 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x164 (and (and (and $x85 $x140) $x92) $x158)))
 (let (($x120 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x128)))
 (let (($x89 (or false $x120)))
 (let (($x123 (or $x77 $x89)))
 (let (($x159 (and $x123 $x164)))
 (let (($x165 (= $x159 true)))
 (let (($x14 (= $x165 true)))
 (let (($x163 (= $x14 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x19 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x8 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x8 $x53)))
 (let (($x5 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x5)))))
 (let (($x58 (and $x41 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x88 (concat ?x133 (concat ?x25 ?x35)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x168 (and $x121 $x163)))
 (let (($x199 (and $x168 $x212)))
 (let (($x173 (=> $x199 $x184)))
 (let (($x42 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x42 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x125 (= false true)))
 (let (($x11 (= $x125 true)))
 (let (($x188 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x199 (not $x188)))
 (let (($x211 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x212 (not $x211)))
 (let (($x173 (and (and (and (= $x211 (= (_ bv0 32) (_ bv0 32))) (= $x188 (bvuge (_ bv0 32) (_ bv1 32)))) $x212) $x199)))
 (let (($x69 (= $x173 true)))
 (let ((?x120 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x120) (_ bv1 8)))))
 (let (($x157 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x158 (=> $x157 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (or $x77 $x158)))
 (let ((?x103 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x103 (_ bv4294967292 32)) ?x103)))
 (let (($x84 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x103 (bvsub ?x103 (_ bv4 32))) (bvult ?x103 (bvsub ?x103 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x91 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x142 (and true $x91)))
 (let (($x83 (and $x91 $x142)))
 (let (($x154 (and (and (and $x142 $x83) $x74) $x84)))
 (let (($x96 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x159 (and (and (and $x96 $x154) $x92) $x161)))
 (let (($x89 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x120)))
 (let (($x123 (or false $x89)))
 (let (($x126 (or $x77 $x123)))
 (let (($x165 (and $x126 $x159)))
 (let (($x14 (= $x165 true)))
 (let (($x163 (= $x14 true)))
 (let (($x168 (= $x163 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x31 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x27 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x27 $x53)))
 (let (($x52 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x52)))))
 (let (($x58 (and $x19 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x39 (concat ?x10 (concat ?x48 ?x45)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x162 (and $x121 $x168)))
 (let (($x9 (and $x162 $x69)))
 (let (($x185 (=> $x9 $x11)))
 (let (($x21 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x21 (not $x185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x125 (= false true)))
 (let (($x11 (= $x125 true)))
 (let (($x188 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x199 (not $x188)))
 (let (($x211 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x212 (not $x211)))
 (let (($x173 (and (and (and (= $x211 (= (_ bv0 32) (_ bv0 32))) (= $x188 (bvuge (_ bv0 32) (_ bv1 32)))) $x212) $x199)))
 (let (($x69 (= $x173 true)))
 (let ((?x120 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x120) (_ bv1 8)))))
 (let (($x157 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x158 (=> $x157 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (or $x77 $x158)))
 (let ((?x103 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x103 (_ bv4294967292 32)) ?x103)))
 (let (($x84 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x103 (bvsub ?x103 (_ bv4 32))) (bvult ?x103 (bvsub ?x103 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x91 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x142 (and true $x91)))
 (let (($x83 (and $x91 $x142)))
 (let (($x154 (and (and (and $x142 $x83) $x74) $x84)))
 (let (($x96 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x159 (and (and (and $x96 $x154) $x92) $x161)))
 (let (($x89 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x120)))
 (let (($x123 (or false $x89)))
 (let (($x126 (or $x77 $x123)))
 (let (($x165 (and $x126 $x159)))
 (let (($x14 (= $x165 true)))
 (let (($x163 (= $x14 true)))
 (let (($x168 (= $x163 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x31 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x27 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x27 $x53)))
 (let (($x52 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x52)))))
 (let (($x58 (and $x19 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x39 (concat ?x10 (concat ?x48 ?x45)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x162 (and $x121 $x168)))
 (let (($x9 (and $x162 $x69)))
 (let (($x185 (=> $x9 $x11)))
 (let (($x21 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x21 (not $x185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x125 (= false true)))
 (let (($x11 (= $x125 true)))
 (let (($x212 (= false false)))
 (let (($x183 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x183 $x212)))
 (let (($x169 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x66 (= $x198 $x169)))
 (let (($x166 (= (_ bv0 32) (_ bv0 32))))
 (let (($x188 (= $x183 $x166)))
 (let (($x173 (and (and $x188 $x66) $x184)))
 (let (($x69 (= $x173 true)))
 (let ((?x89 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x89) (_ bv1 8)))))
 (let (($x158 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x161 (=> $x158 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x160 (or $x77 $x161)))
 (let ((?x104 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x104 (_ bv4294967292 32)) ?x104)))
 (let (($x82 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x104 (bvsub ?x104 (_ bv4 32))) (bvult ?x104 (bvsub ?x104 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x83 (and true $x142)))
 (let (($x97 (and $x142 $x83)))
 (let (($x101 (and (and (and $x83 $x97) $x74) $x82)))
 (let (($x95 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x165 (and (and (and $x95 $x101) $x92) $x160)))
 (let (($x123 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x89)))
 (let (($x126 (or false $x123)))
 (let (($x119 (or $x77 $x126)))
 (let (($x14 (and $x119 $x165)))
 (let (($x163 (= $x14 true)))
 (let (($x168 (= $x163 true)))
 (let (($x162 (= $x168 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x8 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x50 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x50 $x53)))
 (let (($x29 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x29)))))
 (let (($x58 (and $x31 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x25 (concat ?x32 (concat ?x28 ?x30)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x167 (and $x121 $x162)))
 (let (($x9 (and $x167 $x69)))
 (let (($x185 (=> $x9 $x11)))
 (let (($x15 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x35 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x46 $x35) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x15 (not $x185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x125 (= false true)))
 (let (($x11 (= $x125 true)))
 (let (($x212 (= false false)))
 (let (($x183 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x183 $x212)))
 (let (($x169 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x66 (= $x198 $x169)))
 (let (($x166 (= (_ bv0 32) (_ bv0 32))))
 (let (($x188 (= $x183 $x166)))
 (let (($x173 (and (and $x188 $x66) $x184)))
 (let (($x69 (= $x173 true)))
 (let ((?x89 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x89) (_ bv1 8)))))
 (let (($x158 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x161 (=> $x158 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x160 (or $x77 $x161)))
 (let ((?x104 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x104 (_ bv4294967292 32)) ?x104)))
 (let (($x82 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x104 (bvsub ?x104 (_ bv4 32))) (bvult ?x104 (bvsub ?x104 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x83 (and true $x142)))
 (let (($x97 (and $x142 $x83)))
 (let (($x101 (and (and (and $x83 $x97) $x74) $x82)))
 (let (($x95 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x165 (and (and (and $x95 $x101) $x92) $x160)))
 (let (($x123 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x89)))
 (let (($x126 (or false $x123)))
 (let (($x119 (or $x77 $x126)))
 (let (($x14 (and $x119 $x165)))
 (let (($x163 (= $x14 true)))
 (let (($x168 (= $x163 true)))
 (let (($x162 (= $x168 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x8 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x50 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x50 $x53)))
 (let (($x29 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x29)))))
 (let (($x58 (and $x31 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x25 (concat ?x32 (concat ?x28 ?x30)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x167 (and $x121 $x162)))
 (let (($x9 (and $x167 $x69)))
 (let (($x185 (=> $x9 $x11)))
 (let (($x15 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x35 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x46 $x35) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x15 (not $x185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x200 (= false true)))
 (let (($x22 (= $x200 true)))
 (let (($x184 (= false false)))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x173 (=> $x166 $x184)))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x212 (not $x169)))
 (let (($x125 (and (and (and (= $x166 (= (_ bv0 32) (_ bv0 32))) (= $x169 (bvuge (_ bv0 32) (_ bv1 32)))) $x212) $x173)))
 (let (($x11 (= $x125 true)))
 (let ((?x123 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x123) (_ bv1 8)))))
 (let (($x161 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x160 (=> $x161 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x164 (or $x77 $x160)))
 (let ((?x140 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x140 (_ bv4294967292 32)) ?x140)))
 (let (($x138 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x140 (bvsub ?x140 (_ bv4 32))) (bvult ?x140 (bvsub ?x140 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x97 (and true $x83)))
 (let (($x84 (and $x83 $x97)))
 (let (($x100 (and (and (and $x97 $x84) $x74) $x138)))
 (let (($x147 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x14 (and (and (and $x147 $x100) $x92) $x164)))
 (let (($x126 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x123)))
 (let (($x119 (or false $x126)))
 (let (($x85 (or $x77 $x119)))
 (let (($x163 (and $x85 $x14)))
 (let (($x168 (= $x163 true)))
 (let (($x162 (= $x168 true)))
 (let (($x167 (= $x162 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x27 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x55 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x55 $x53)))
 (let (($x41 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x41)))))
 (let (($x58 (and $x8 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x48 (concat ?x7 (concat ?x23 ?x37)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x211 (and $x121 $x167)))
 (let (($x185 (and $x211 $x11)))
 (let (($x128 (=> $x185 $x22)))
 (let (($x87 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x45 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x26 $x45) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x87 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x200 (= false true)))
 (let (($x22 (= $x200 true)))
 (let (($x184 (= false false)))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x173 (=> $x166 $x184)))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x212 (not $x169)))
 (let (($x125 (and (and (and (= $x166 (= (_ bv0 32) (_ bv0 32))) (= $x169 (bvuge (_ bv0 32) (_ bv1 32)))) $x212) $x173)))
 (let (($x11 (= $x125 true)))
 (let ((?x123 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x130 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x98 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x130 (= ?x132 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x153 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x123) (_ bv1 8)))))
 (let (($x161 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x160 (=> $x161 (or false (or false $x149)))))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x164 (or $x77 $x160)))
 (let ((?x140 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x92 (= (bvand ?x140 (_ bv4294967292 32)) ?x140)))
 (let (($x138 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x140 (bvsub ?x140 (_ bv4 32))) (bvult ?x140 (bvsub ?x140 (_ bv4 32))))))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x97 (and true $x83)))
 (let (($x84 (and $x83 $x97)))
 (let (($x100 (and (and (and $x97 $x84) $x74) $x138)))
 (let (($x147 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x14 (and (and (and $x147 $x100) $x92) $x164)))
 (let (($x126 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x123)))
 (let (($x119 (or false $x126)))
 (let (($x85 (or $x77 $x119)))
 (let (($x163 (and $x85 $x14)))
 (let (($x168 (= $x163 true)))
 (let (($x162 (= $x168 true)))
 (let (($x167 (= $x162 true)))
 (let (($x81 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x81 true)))
 (let (($x63 (= $x75 true)))
 (let (($x73 (= $x63 true)))
 (let ((?x59 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x27 $x57)))
 (let (($x53 (and $x54 $x60)))
 (let (($x55 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x55 $x53)))
 (let (($x41 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x41)))))
 (let (($x58 (and $x8 $x72)))
 (let (($x71 (= $x58 true)))
 (let (($x70 (= $x71 true)))
 (let (($x67 (= $x70 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x48 (concat ?x7 (concat ?x23 ?x37)))))
 (let (($x44 (= ?x43 input.dst.llvm-%val)))
 (let (($x16 (= $x44 true)))
 (let (($x34 (= $x16 true)))
 (let (($x65 (and $x34 $x67)))
 (let (($x121 (and $x65 $x73)))
 (let (($x211 (and $x121 $x167)))
 (let (($x185 (and $x211 $x11)))
 (let (($x128 (=> $x185 $x22)))
 (let (($x87 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x45 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x26 $x45) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x87 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x75 (= true false)))
 (let (($x63 (= $x75 true)))
 (let (($x70 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x67 (= $x71 $x70)))
 (let (($x72 (= (_ bv0 32) (_ bv0 32))))
 (let (($x53 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x58 (= $x53 $x72)))
 (let (($x65 (and $x58 $x67)))
 (let (($x64 (= $x65 true)))
 (let ((?x19 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x19)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x13 $x29)))
 (let (($x8 (and $x41 $x31)))
 (let (($x37 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x37 $x8)))
 (let (($x34 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x34)))))
 (let (($x27 (and $x50 $x55)))
 (let (($x56 (= $x27 true)))
 (let (($x57 (= $x56 true)))
 (let (($x54 (= $x57 true)))
 (let ((?x46 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x46)))
 (let (($x42 (= ?x45 input.dst.llvm-%val)))
 (let (($x88 (= $x42 true)))
 (let (($x6 (= $x88 true)))
 (let (($x59 (and $x6 $x54)))
 (let (($x81 (and $x59 $x64)))
 (let (($x73 (=> $x81 $x63)))
 (let (($x32 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x30 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x32 (not $x73)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x75 (= true false)))
 (let (($x63 (= $x75 true)))
 (let (($x70 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x67 (= $x71 $x70)))
 (let (($x72 (= (_ bv0 32) (_ bv0 32))))
 (let (($x53 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x58 (= $x53 $x72)))
 (let (($x65 (and $x58 $x67)))
 (let (($x64 (= $x65 true)))
 (let ((?x19 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x19)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x13 $x29)))
 (let (($x8 (and $x41 $x31)))
 (let (($x37 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x37 $x8)))
 (let (($x34 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x34)))))
 (let (($x27 (and $x50 $x55)))
 (let (($x56 (= $x27 true)))
 (let (($x57 (= $x56 true)))
 (let (($x54 (= $x57 true)))
 (let ((?x46 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x46)))
 (let (($x42 (= ?x45 input.dst.llvm-%val)))
 (let (($x88 (= $x42 true)))
 (let (($x6 (= $x88 true)))
 (let (($x59 (and $x6 $x54)))
 (let (($x81 (and $x59 $x64)))
 (let (($x73 (=> $x81 $x63)))
 (let (($x32 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x30 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x32 (not $x73)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x79 (= true false)))
 (let (($x77 (= $x79 true)))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x64 (not $x71)))
 (let (($x53 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x65 (not $x53)))
 (let (($x63 (and (and (and (= $x53 (= (_ bv0 32) (_ bv0 32))) (= $x71 (bvuge (_ bv0 32) (_ bv1 32)))) $x65) $x64)))
 (let (($x73 (= $x63 true)))
 (let ((?x19 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x19)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x13 $x29)))
 (let (($x8 (and $x41 $x31)))
 (let (($x5 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x5 $x8)))
 (let (($x68 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x68)))))
 (let (($x27 (and $x37 $x55)))
 (let (($x56 (= $x27 true)))
 (let (($x57 (= $x56 true)))
 (let (($x54 (= $x57 true)))
 (let ((?x33 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x33)))
 (let (($x35 (= ?x87 input.dst.llvm-%val)))
 (let (($x48 (= $x35 true)))
 (let (($x6 (= $x48 true)))
 (let (($x59 (and $x6 $x54)))
 (let (($x121 (and $x59 $x73)))
 (let (($x89 (=> $x121 $x77)))
 (let (($x88 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x46 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x45 $x46) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x88 (not $x89)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x79 (= true false)))
 (let (($x77 (= $x79 true)))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x64 (not $x71)))
 (let (($x53 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x65 (not $x53)))
 (let (($x63 (and (and (and (= $x53 (= (_ bv0 32) (_ bv0 32))) (= $x71 (bvuge (_ bv0 32) (_ bv1 32)))) $x65) $x64)))
 (let (($x73 (= $x63 true)))
 (let ((?x19 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x19)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x13 $x29)))
 (let (($x8 (and $x41 $x31)))
 (let (($x5 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x5 $x8)))
 (let (($x68 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x68)))))
 (let (($x27 (and $x37 $x55)))
 (let (($x56 (= $x27 true)))
 (let (($x57 (= $x56 true)))
 (let (($x54 (= $x57 true)))
 (let ((?x33 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x33)))
 (let (($x35 (= ?x87 input.dst.llvm-%val)))
 (let (($x48 (= $x35 true)))
 (let (($x6 (= $x48 true)))
 (let (($x59 (and $x6 $x54)))
 (let (($x121 (and $x59 $x73)))
 (let (($x89 (=> $x121 $x77)))
 (let (($x88 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x46 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x45 $x46) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x88 (not $x89)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x121 (= true false)))
 (let (($x79 (= $x121 true)))
 (let (($x81 (= false false)))
 (let (($x53 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x65 (=> $x53 $x81)))
 (let (($x70 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x67 (= $x71 $x70)))
 (let (($x72 (= (_ bv0 32) (_ bv0 32))))
 (let (($x58 (= $x53 $x72)))
 (let (($x64 (and (and $x58 $x67) $x65)))
 (let (($x63 (= $x64 true)))
 (let ((?x19 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x19)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x13 $x29)))
 (let (($x8 (and $x41 $x31)))
 (let (($x23 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x23 $x8)))
 (let (($x36 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x27 (and $x5 $x55)))
 (let (($x56 (= $x27 true)))
 (let (($x57 (= $x56 true)))
 (let (($x54 (= $x57 true)))
 (let ((?x21 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x21)))
 (let (($x26 (= ?x15 input.dst.llvm-%val)))
 (let (($x42 (= $x26 true)))
 (let (($x6 (= $x42 true)))
 (let (($x59 (and $x6 $x54)))
 (let (($x73 (and $x59 $x63)))
 (let (($x77 (=> $x73 $x79)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x33 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x87 $x33) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x77)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x121 (= true false)))
 (let (($x79 (= $x121 true)))
 (let (($x81 (= false false)))
 (let (($x53 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x65 (=> $x53 $x81)))
 (let (($x70 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x67 (= $x71 $x70)))
 (let (($x72 (= (_ bv0 32) (_ bv0 32))))
 (let (($x58 (= $x53 $x72)))
 (let (($x64 (and (and $x58 $x67) $x65)))
 (let (($x63 (= $x64 true)))
 (let ((?x19 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x19)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x13 $x29)))
 (let (($x8 (and $x41 $x31)))
 (let (($x23 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x23 $x8)))
 (let (($x36 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x27 (and $x5 $x55)))
 (let (($x56 (= $x27 true)))
 (let (($x57 (= $x56 true)))
 (let (($x54 (= $x57 true)))
 (let ((?x21 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x21)))
 (let (($x26 (= ?x15 input.dst.llvm-%val)))
 (let (($x42 (= $x26 true)))
 (let (($x6 (= $x42 true)))
 (let (($x59 (and $x6 $x54)))
 (let (($x73 (and $x59 $x63)))
 (let (($x77 (=> $x73 $x79)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x33 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x87 $x33) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x77)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x77 (= true false)))
 (let (($x89 (= $x77 true)))
 (let (($x81 (= false false)))
 (let (($x53 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x65 (=> $x53 $x81)))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x75 (not $x71)))
 (let (($x73 (and (and (and (= $x53 (= (_ bv0 32) (_ bv0 32))) (= $x71 (bvuge (_ bv0 32) (_ bv1 32)))) $x75) $x65)))
 (let (($x121 (= $x73 true)))
 (let ((?x19 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x19)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x13 $x29)))
 (let (($x8 (and $x41 $x31)))
 (let (($x28 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x28 $x8)))
 (let (($x50 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x50)))))
 (let (($x27 (and $x23 $x55)))
 (let (($x56 (= $x27 true)))
 (let (($x57 (= $x56 true)))
 (let (($x54 (= $x57 true)))
 (let ((?x10 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x10)))
 (let (($x38 (= ?x39 input.dst.llvm-%val)))
 (let (($x35 (= $x38 true)))
 (let (($x6 (= $x35 true)))
 (let (($x59 (and $x6 $x54)))
 (let (($x79 (and $x59 $x121)))
 (let (($x123 (=> $x79 $x89)))
 (let (($x42 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x21 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x15 $x21) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x42 (not $x123))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x77 (= true false)))
 (let (($x89 (= $x77 true)))
 (let (($x81 (= false false)))
 (let (($x53 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x65 (=> $x53 $x81)))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x75 (not $x71)))
 (let (($x73 (and (and (and (= $x53 (= (_ bv0 32) (_ bv0 32))) (= $x71 (bvuge (_ bv0 32) (_ bv1 32)))) $x75) $x65)))
 (let (($x121 (= $x73 true)))
 (let ((?x19 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x19)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x13 $x29)))
 (let (($x8 (and $x41 $x31)))
 (let (($x28 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x28 $x8)))
 (let (($x50 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x50)))))
 (let (($x27 (and $x23 $x55)))
 (let (($x56 (= $x27 true)))
 (let (($x57 (= $x56 true)))
 (let (($x54 (= $x57 true)))
 (let ((?x10 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x10)))
 (let (($x38 (= ?x39 input.dst.llvm-%val)))
 (let (($x35 (= $x38 true)))
 (let (($x6 (= $x35 true)))
 (let (($x59 (and $x6 $x54)))
 (let (($x79 (and $x59 $x121)))
 (let (($x123 (=> $x79 $x89)))
 (let (($x42 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x21 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x15 $x21) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x42 (not $x123))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let ((?x58 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x136 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x116 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x148 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x114 (and (and (and (and true (= ?x93 (_ bv1 8))) (= ?x157 (_ bv1 8))) (= ?x107 (_ bv1 8))) (= ?x148 (_ bv1 8)))))
 (let (($x139 (and (and (and (and $x114 (= ?x116 (_ bv1 8))) (= ?x130 (_ bv1 8))) (= ?x136 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x58) (_ bv1 8)))))
 (let (($x152 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x150 (=> $x152 (or false (or false $x139)))))
 (let (($x60 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x102 (or $x60 $x150)))
 (let ((?x94 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x99 (= (bvand ?x94 (_ bv4294967292 32)) ?x94)))
 (let (($x83 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x94 (bvsub ?x94 (_ bv4 32))) (bvult ?x94 (bvsub ?x94 (_ bv4 32))))))
 (let (($x95 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x73 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x89 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x73) (bvult input.dst.llvm-%call.Lentry%2%d ?x73))))
 (let (($x123 (and true $x89)))
 (let (($x126 (and $x89 $x123)))
 (let (($x82 (and (and (and $x123 $x126) $x95) $x83)))
 (let (($x74 (and $x82 $x99)))
 (let (($x71 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x58)))
 (let (($x70 (or false $x71)))
 (let (($x67 (or $x60 $x70)))
 (let (($x151 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x212 (and (and (and $x151 $x67) $x74) $x102)))
 (let (($x9 (=> $x212 true)))
 (let (($x184 (= $x9 true)))
 (let (($x173 (= $x184 true)))
 (let (($x166 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x188 (= $x183 $x166)))
 (let (($x167 (= (_ bv0 32) (_ bv0 32))))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x211 (= $x162 $x167)))
 (let (($x198 (and $x211 $x188)))
 (let (($x169 (= $x198 true)))
 (let (($x160 (= $x151 true)))
 (let (($x164 (= $x160 true)))
 (let (($x14 (= $x164 true)))
 (let (($x110 (= $x102 true)))
 (let (($x109 (= $x110 true)))
 (let (($x143 (= $x109 true)))
 (let (($x101 (= $x74 true)))
 (let (($x154 (= $x101 true)))
 (let (($x104 (= $x154 true)))
 (let (($x64 (= $x67 true)))
 (let (($x75 (= $x64 true)))
 (let (($x63 (= $x75 true)))
 (let ((?x41 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x41)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x28 $x20)))
 (let (($x31 (and $x29 $x19)))
 (let (($x34 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x34 $x31)))
 (let (($x50 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x50)))))
 (let (($x55 (and $x16 $x8)))
 (let (($x27 (= $x55 true)))
 (let (($x56 (= $x27 true)))
 (let (($x57 (= $x56 true)))
 (let ((?x51 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x51)))
 (let (($x45 (= ?x32 input.dst.llvm-%val)))
 (let (($x25 (= $x45 true)))
 (let (($x35 (= $x25 true)))
 (let (($x54 (and $x35 $x57)))
 (let (($x81 (and $x54 $x63)))
 (let (($x140 (and $x81 $x104)))
 (let (($x149 (and $x140 $x143)))
 (let (($x163 (and $x149 $x14)))
 (let (($x66 (and $x163 $x169)))
 (let (($x125 (=> $x66 $x173)))
 (let (($x38 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x38 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let ((?x58 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x136 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x116 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x148 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x114 (and (and (and (and true (= ?x93 (_ bv1 8))) (= ?x157 (_ bv1 8))) (= ?x107 (_ bv1 8))) (= ?x148 (_ bv1 8)))))
 (let (($x139 (and (and (and (and $x114 (= ?x116 (_ bv1 8))) (= ?x130 (_ bv1 8))) (= ?x136 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x58) (_ bv1 8)))))
 (let (($x152 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x150 (=> $x152 (or false (or false $x139)))))
 (let (($x60 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x102 (or $x60 $x150)))
 (let ((?x94 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x99 (= (bvand ?x94 (_ bv4294967292 32)) ?x94)))
 (let (($x83 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x94 (bvsub ?x94 (_ bv4 32))) (bvult ?x94 (bvsub ?x94 (_ bv4 32))))))
 (let (($x95 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x73 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x89 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x73) (bvult input.dst.llvm-%call.Lentry%2%d ?x73))))
 (let (($x123 (and true $x89)))
 (let (($x126 (and $x89 $x123)))
 (let (($x82 (and (and (and $x123 $x126) $x95) $x83)))
 (let (($x74 (and $x82 $x99)))
 (let (($x71 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x58)))
 (let (($x70 (or false $x71)))
 (let (($x67 (or $x60 $x70)))
 (let (($x151 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x212 (and (and (and $x151 $x67) $x74) $x102)))
 (let (($x9 (=> $x212 true)))
 (let (($x184 (= $x9 true)))
 (let (($x173 (= $x184 true)))
 (let (($x166 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x188 (= $x183 $x166)))
 (let (($x167 (= (_ bv0 32) (_ bv0 32))))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x211 (= $x162 $x167)))
 (let (($x198 (and $x211 $x188)))
 (let (($x169 (= $x198 true)))
 (let (($x160 (= $x151 true)))
 (let (($x164 (= $x160 true)))
 (let (($x14 (= $x164 true)))
 (let (($x110 (= $x102 true)))
 (let (($x109 (= $x110 true)))
 (let (($x143 (= $x109 true)))
 (let (($x101 (= $x74 true)))
 (let (($x154 (= $x101 true)))
 (let (($x104 (= $x154 true)))
 (let (($x64 (= $x67 true)))
 (let (($x75 (= $x64 true)))
 (let (($x63 (= $x75 true)))
 (let ((?x41 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x41)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x28 $x20)))
 (let (($x31 (and $x29 $x19)))
 (let (($x34 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x34 $x31)))
 (let (($x50 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x50)))))
 (let (($x55 (and $x16 $x8)))
 (let (($x27 (= $x55 true)))
 (let (($x56 (= $x27 true)))
 (let (($x57 (= $x56 true)))
 (let ((?x51 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x51)))
 (let (($x45 (= ?x32 input.dst.llvm-%val)))
 (let (($x25 (= $x45 true)))
 (let (($x35 (= $x25 true)))
 (let (($x54 (and $x35 $x57)))
 (let (($x81 (and $x54 $x63)))
 (let (($x140 (and $x81 $x104)))
 (let (($x149 (and $x140 $x143)))
 (let (($x163 (and $x149 $x14)))
 (let (($x66 (and $x163 $x169)))
 (let (($x125 (=> $x66 $x173)))
 (let (($x38 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x38 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x167 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x211 (= $x167 true)))
 (let (($x164 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x14 (= $x160 $x164)))
 (let (($x156 (= (_ bv0 32) (_ bv0 32))))
 (let (($x149 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (= $x149 $x156)))
 (let (($x163 (and $x151 $x14)))
 (let (($x168 (= $x163 true)))
 (let ((?x139 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x139)))
 (let (($x150 (= ?x146 input.dst.llvm-%val)))
 (let (($x102 (= $x150 true)))
 (let (($x110 (= $x102 true)))
 (let ((?x130 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x130)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x117 $x98)))
 (let (($x132 (and $x129 $x131)))
 (let (($x105 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x105 $x132)))
 (let (($x148 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x148)))))
 (let (($x135 (and $x116 $x134)))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x145 (= $x137 true)))
 (let ((?x33 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x67 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x33) (_ bv1 8)))))
 (let (($x152 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x155 (=> $x152 (or false (or false $x103)))))
 (let (($x85 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x59 (or $x85 $x155)))
 (let ((?x13 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x13 (_ bv4294967292 32)) ?x13)))
 (let (($x19 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x13 (bvsub ?x13 (_ bv4 32))) (bvult ?x13 (bvsub ?x13 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x50 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x37 (and true $x50)))
 (let (($x5 (and $x50 $x37)))
 (let (($x55 (and (and (and $x37 $x5) $x34) $x19)))
 (let (($x43 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x92 (and (and (and $x43 $x55) $x56) $x59)))
 (let (($x30 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x33)))
 (let (($x35 (or false $x30)))
 (let (($x6 (or $x85 $x35)))
 (let (($x165 (and $x6 $x92)))
 (let (($x159 (= $x165 true)))
 (let (($x157 (= $x159 true)))
 (let (($x158 (= $x157 true)))
 (let (($x144 (and $x158 $x145)))
 (let (($x109 (and $x144 $x110)))
 (let (($x162 (and $x109 $x168)))
 (let (($x183 (=> $x162 $x211)))
 (let (($x25 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x51 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x51) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x25 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x167 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x211 (= $x167 true)))
 (let (($x164 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x14 (= $x160 $x164)))
 (let (($x156 (= (_ bv0 32) (_ bv0 32))))
 (let (($x149 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (= $x149 $x156)))
 (let (($x163 (and $x151 $x14)))
 (let (($x168 (= $x163 true)))
 (let ((?x139 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x139)))
 (let (($x150 (= ?x146 input.dst.llvm-%val)))
 (let (($x102 (= $x150 true)))
 (let (($x110 (= $x102 true)))
 (let ((?x130 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x130)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x117 $x98)))
 (let (($x132 (and $x129 $x131)))
 (let (($x105 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x105 $x132)))
 (let (($x148 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x148)))))
 (let (($x135 (and $x116 $x134)))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x145 (= $x137 true)))
 (let ((?x33 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x67 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x33) (_ bv1 8)))))
 (let (($x152 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x155 (=> $x152 (or false (or false $x103)))))
 (let (($x85 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x59 (or $x85 $x155)))
 (let ((?x13 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x13 (_ bv4294967292 32)) ?x13)))
 (let (($x19 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x13 (bvsub ?x13 (_ bv4 32))) (bvult ?x13 (bvsub ?x13 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x50 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x37 (and true $x50)))
 (let (($x5 (and $x50 $x37)))
 (let (($x55 (and (and (and $x37 $x5) $x34) $x19)))
 (let (($x43 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x92 (and (and (and $x43 $x55) $x56) $x59)))
 (let (($x30 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x33)))
 (let (($x35 (or false $x30)))
 (let (($x6 (or $x85 $x35)))
 (let (($x165 (and $x6 $x92)))
 (let (($x159 (= $x165 true)))
 (let (($x157 (= $x159 true)))
 (let (($x158 (= $x157 true)))
 (let (($x144 (and $x158 $x145)))
 (let (($x109 (and $x144 $x110)))
 (let (($x162 (and $x109 $x168)))
 (let (($x183 (=> $x162 $x211)))
 (let (($x25 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x51 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x51) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x25 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00900400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00400003) #x03
    (ite (= x!0 #x00400001) #x03
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000003) #x01
    (ite (= x!0 #x00400000) #x03
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400001 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) #x00400004 #x00400003)
                         #x00400001)
                    #x00400000)))
    (let ((a!2 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x00000008 x!0)
                         (ite (bvule #x00400000 x!0) a!1 #x00000008)
                         #x00000007)
                    #x00000006)))
    (let ((a!3 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!2 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!3 #x00000002)
                #x00000001)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x2decfff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08b34583)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08b34580)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2decfffe x!0)
                    (ite (bvule #x2decffff x!0)
                         (ite (bvule #x2ded0000 x!0) #x2ded0000 #x2decffff)
                         #x2decfffe)
                    #x2decfffd)))
    (let ((a!2 (ite (bvule #x2decfffb x!0)
                    (ite (bvule #x2decfffc x!0)
                         (ite (bvule #x2decfffd x!0) a!1 #x2decfffc)
                         #x2decfffb)
                    #x2decfffa)))
    (let ((a!3 (ite (bvule #x08b34584 x!0)
                    (ite (bvule #x2decfff9 x!0)
                         (ite (bvule #x2decfffa x!0) a!2 #x2decfff9)
                         #x08b34584)
                    #x08b34583)))
      (ite (bvule #x08b34580 x!0)
           (ite (bvule #x08b34581 x!0)
                (ite (bvule #x08b34583 x!0) a!3 #x08b34581)
                #x08b34580)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2decfffb) #x01
    (ite (= x!0 #x08b34580) #x03
    (ite (= x!0 #x2decfffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x2decfffa) #x01
    (ite (= x!0 #x2decfffd) #x01
    (ite (= x!0 #x08b34581) #x03
    (ite (= x!0 #x08b34583) #x03
    (ite (= x!0 #x2decffff) #x01
    (ite (= x!0 #x2decfff9) #x01
    (ite (= x!0 #x2ded0000) #x01
    (ite (= x!0 #x2decfffc) #x01
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x198 (= $x42 true)))
 (let (($x164 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x162 (not $x164)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x168 (not $x156)))
 (let (($x183 (and (and (and (= $x156 (= (_ bv0 32) (_ bv0 32))) (= $x164 (bvuge (_ bv0 32) (_ bv1 32)))) $x168) $x162)))
 (let (($x166 (= $x183 true)))
 (let ((?x146 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x146)))
 (let (($x102 (= ?x153 input.dst.llvm-%val)))
 (let (($x110 (= $x102 true)))
 (let (($x109 (= $x110 true)))
 (let ((?x131 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x131)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x118 $x129)))
 (let (($x134 (and $x130 $x132)))
 (let (($x115 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x115 $x134)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x136 (and $x117 $x135)))
 (let (($x137 (= $x136 true)))
 (let (($x145 (= $x137 true)))
 (let (($x144 (= $x145 true)))
 (let ((?x21 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x54 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x21) (_ bv1 8)))))
 (let (($x155 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x59 (=> $x155 (or false (or false $x103)))))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x72 (or $x88 $x59)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x41 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x5 (and true $x37)))
 (let (($x31 (and $x37 $x5)))
 (let (($x60 (and (and (and $x5 $x31) $x34) $x41)))
 (let (($x49 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x165 (and (and (and $x49 $x60) $x56) $x72)))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x21)))
 (let (($x6 (or false $x45)))
 (let (($x7 (or $x88 $x6)))
 (let (($x159 (and $x7 $x165)))
 (let (($x157 (= $x159 true)))
 (let (($x158 (= $x157 true)))
 (let (($x106 (= $x158 true)))
 (let (($x141 (and $x106 $x144)))
 (let (($x143 (and $x141 $x109)))
 (let (($x188 (and $x143 $x166)))
 (let (($x169 (=> $x188 $x198)))
 (let (($x35 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x85 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x15 $x85) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x35 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x198 (= $x42 true)))
 (let (($x164 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x162 (not $x164)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x168 (not $x156)))
 (let (($x183 (and (and (and (= $x156 (= (_ bv0 32) (_ bv0 32))) (= $x164 (bvuge (_ bv0 32) (_ bv1 32)))) $x168) $x162)))
 (let (($x166 (= $x183 true)))
 (let ((?x146 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x146)))
 (let (($x102 (= ?x153 input.dst.llvm-%val)))
 (let (($x110 (= $x102 true)))
 (let (($x109 (= $x110 true)))
 (let ((?x131 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x131)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x118 $x129)))
 (let (($x134 (and $x130 $x132)))
 (let (($x115 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x115 $x134)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x136 (and $x117 $x135)))
 (let (($x137 (= $x136 true)))
 (let (($x145 (= $x137 true)))
 (let (($x144 (= $x145 true)))
 (let ((?x21 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x54 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x21) (_ bv1 8)))))
 (let (($x155 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x59 (=> $x155 (or false (or false $x103)))))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x72 (or $x88 $x59)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x41 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x5 (and true $x37)))
 (let (($x31 (and $x37 $x5)))
 (let (($x60 (and (and (and $x5 $x31) $x34) $x41)))
 (let (($x49 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x165 (and (and (and $x49 $x60) $x56) $x72)))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x21)))
 (let (($x6 (or false $x45)))
 (let (($x7 (or $x88 $x6)))
 (let (($x159 (and $x7 $x165)))
 (let (($x157 (= $x159 true)))
 (let (($x158 (= $x157 true)))
 (let (($x106 (= $x158 true)))
 (let (($x141 (and $x106 $x144)))
 (let (($x143 (and $x141 $x109)))
 (let (($x188 (and $x143 $x166)))
 (let (($x169 (=> $x188 $x198)))
 (let (($x35 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x85 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x15 $x85) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x35 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x198 (= $x42 true)))
 (let (($x168 (= false false)))
 (let (($x151 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x211 (=> $x151 $x168)))
 (let (($x163 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x167 (= $x14 $x163)))
 (let (($x160 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= $x151 $x160)))
 (let (($x183 (and (and $x164 $x167) $x211)))
 (let (($x166 (= $x183 true)))
 (let ((?x153 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x150 (bvneg ?x153)))
 (let (($x110 (= ?x150 input.dst.llvm-%val)))
 (let (($x109 (= $x110 true)))
 (let (($x143 (= $x109 true)))
 (let ((?x132 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x132)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x98 $x130)))
 (let (($x135 (and $x131 $x134)))
 (let (($x105 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x105 $x135)))
 (let (($x161 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x161)))))
 (let (($x137 (and $x118 $x136)))
 (let (($x145 (= $x137 true)))
 (let (($x144 (= $x145 true)))
 (let (($x141 (= $x144 true)))
 (let ((?x39 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x39) (_ bv1 8)))))
 (let (($x59 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x72 (=> $x59 (or false (or false $x103)))))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x71 (or $x26 $x72)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x29 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x5 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x31 (and true $x5)))
 (let (($x19 (and $x5 $x31)))
 (let (($x58 (and (and (and $x31 $x19) $x34) $x29)))
 (let (($x24 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x159 (and (and (and $x24 $x58) $x56) $x71)))
 (let (($x30 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x39)))
 (let (($x7 (or false $x30)))
 (let (($x44 (or $x26 $x7)))
 (let (($x157 (and $x44 $x159)))
 (let (($x158 (= $x157 true)))
 (let (($x106 (= $x158 true)))
 (let (($x108 (= $x106 true)))
 (let (($x139 (and $x108 $x141)))
 (let (($x149 (and $x139 $x143)))
 (let (($x188 (and $x149 $x166)))
 (let (($x169 (=> $x188 $x198)))
 (let (($x6 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x88 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x48 $x88) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x6 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x198 (= $x42 true)))
 (let (($x168 (= false false)))
 (let (($x151 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x211 (=> $x151 $x168)))
 (let (($x163 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x167 (= $x14 $x163)))
 (let (($x160 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= $x151 $x160)))
 (let (($x183 (and (and $x164 $x167) $x211)))
 (let (($x166 (= $x183 true)))
 (let ((?x153 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x150 (bvneg ?x153)))
 (let (($x110 (= ?x150 input.dst.llvm-%val)))
 (let (($x109 (= $x110 true)))
 (let (($x143 (= $x109 true)))
 (let ((?x132 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x132)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x98 $x130)))
 (let (($x135 (and $x131 $x134)))
 (let (($x105 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x105 $x135)))
 (let (($x161 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x161)))))
 (let (($x137 (and $x118 $x136)))
 (let (($x145 (= $x137 true)))
 (let (($x144 (= $x145 true)))
 (let (($x141 (= $x144 true)))
 (let ((?x39 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x39) (_ bv1 8)))))
 (let (($x59 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x72 (=> $x59 (or false (or false $x103)))))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x71 (or $x26 $x72)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x29 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x5 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x31 (and true $x5)))
 (let (($x19 (and $x5 $x31)))
 (let (($x58 (and (and (and $x31 $x19) $x34) $x29)))
 (let (($x24 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x159 (and (and (and $x24 $x58) $x56) $x71)))
 (let (($x30 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x39)))
 (let (($x7 (or false $x30)))
 (let (($x44 (or $x26 $x7)))
 (let (($x157 (and $x44 $x159)))
 (let (($x158 (= $x157 true)))
 (let (($x106 (= $x158 true)))
 (let (($x108 (= $x106 true)))
 (let (($x139 (and $x108 $x141)))
 (let (($x149 (and $x139 $x143)))
 (let (($x188 (and $x149 $x166)))
 (let (($x169 (=> $x188 $x198)))
 (let (($x6 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x88 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x48 $x88) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x6 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00900400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00400003) #x03
    (ite (= x!0 #x00400001) #x03
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000003) #x01
    (ite (= x!0 #x00400000) #x03
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400001 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) #x00400004 #x00400003)
                         #x00400001)
                    #x00400000)))
    (let ((a!2 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x00000008 x!0)
                         (ite (bvule #x00400000 x!0) a!1 #x00000008)
                         #x00000007)
                    #x00000006)))
    (let ((a!3 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!2 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!3 #x00000002)
                #x00000001)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x2decfff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08b34583)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08b34580)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2decfffe x!0)
                    (ite (bvule #x2decffff x!0)
                         (ite (bvule #x2ded0000 x!0) #x2ded0000 #x2decffff)
                         #x2decfffe)
                    #x2decfffd)))
    (let ((a!2 (ite (bvule #x2decfffb x!0)
                    (ite (bvule #x2decfffc x!0)
                         (ite (bvule #x2decfffd x!0) a!1 #x2decfffc)
                         #x2decfffb)
                    #x2decfffa)))
    (let ((a!3 (ite (bvule #x08b34584 x!0)
                    (ite (bvule #x2decfff9 x!0)
                         (ite (bvule #x2decfffa x!0) a!2 #x2decfff9)
                         #x08b34584)
                    #x08b34583)))
      (ite (bvule #x08b34580 x!0)
           (ite (bvule #x08b34581 x!0)
                (ite (bvule #x08b34583 x!0) a!3 #x08b34581)
                #x08b34580)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2decfffb) #x01
    (ite (= x!0 #x08b34580) #x03
    (ite (= x!0 #x2decfffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x2decfffa) #x01
    (ite (= x!0 #x2decfffd) #x01
    (ite (= x!0 #x08b34581) #x03
    (ite (= x!0 #x08b34583) #x03
    (ite (= x!0 #x2decffff) #x01
    (ite (= x!0 #x2decfff9) #x01
    (ite (= x!0 #x2ded0000) #x01
    (ite (= x!0 #x2decfffc) #x01
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x199 (= $x66 true)))
 (let (($x211 (= false false)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x183 (=> $x160 $x211)))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x168 (not $x163)))
 (let (($x42 (and (and (and (= $x160 (= (_ bv0 32) (_ bv0 32))) (= $x163 (bvuge (_ bv0 32) (_ bv1 32)))) $x168) $x183)))
 (let (($x198 (= $x42 true)))
 (let ((?x150 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x150)))
 (let (($x109 (= ?x102 input.dst.llvm-%val)))
 (let (($x143 (= $x109 true)))
 (let (($x149 (= $x143 true)))
 (let ((?x134 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x134)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x129 $x131)))
 (let (($x136 (and $x132 $x135)))
 (let (($x115 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x115 $x136)))
 (let (($x107 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x107)))))
 (let (($x145 (and $x98 $x137)))
 (let (($x144 (= $x145 true)))
 (let (($x141 (= $x144 true)))
 (let (($x139 (= $x141 true)))
 (let ((?x46 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x93 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x46) (_ bv1 8)))))
 (let (($x72 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x71 (=> $x72 (or false (or false $x103)))))
 (let (($x38 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x70 (or $x38 $x71)))
 (let ((?x55 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x52 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x55 (bvsub ?x55 (_ bv4 32))) (bvult ?x55 (bvsub ?x55 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x31 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x19 (and true $x31)))
 (let (($x41 (and $x31 $x19)))
 (let (($x152 (and (and (and $x19 $x41) $x34) $x52)))
 (let (($x36 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x157 (and (and (and $x36 $x152) $x56) $x70)))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x46)))
 (let (($x44 (or false $x45)))
 (let (($x43 (or $x38 $x44)))
 (let (($x158 (and $x43 $x157)))
 (let (($x106 (= $x158 true)))
 (let (($x108 (= $x106 true)))
 (let (($x112 (= $x108 true)))
 (let (($x146 (and $x112 $x139)))
 (let (($x156 (and $x146 $x149)))
 (let (($x169 (and $x156 $x198)))
 (let (($x47 (=> $x169 $x199)))
 (let (($x7 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x26 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x26) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x7 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x199 (= $x66 true)))
 (let (($x211 (= false false)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x183 (=> $x160 $x211)))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x168 (not $x163)))
 (let (($x42 (and (and (and (= $x160 (= (_ bv0 32) (_ bv0 32))) (= $x163 (bvuge (_ bv0 32) (_ bv1 32)))) $x168) $x183)))
 (let (($x198 (= $x42 true)))
 (let ((?x150 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x150)))
 (let (($x109 (= ?x102 input.dst.llvm-%val)))
 (let (($x143 (= $x109 true)))
 (let (($x149 (= $x143 true)))
 (let ((?x134 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x134)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x129 $x131)))
 (let (($x136 (and $x132 $x135)))
 (let (($x115 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x115 $x136)))
 (let (($x107 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x107)))))
 (let (($x145 (and $x98 $x137)))
 (let (($x144 (= $x145 true)))
 (let (($x141 (= $x144 true)))
 (let (($x139 (= $x141 true)))
 (let ((?x46 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x93 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x46) (_ bv1 8)))))
 (let (($x72 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x71 (=> $x72 (or false (or false $x103)))))
 (let (($x38 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x70 (or $x38 $x71)))
 (let ((?x55 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x52 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x55 (bvsub ?x55 (_ bv4 32))) (bvult ?x55 (bvsub ?x55 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x31 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x19 (and true $x31)))
 (let (($x41 (and $x31 $x19)))
 (let (($x152 (and (and (and $x19 $x41) $x34) $x52)))
 (let (($x36 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x157 (and (and (and $x36 $x152) $x56) $x70)))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x46)))
 (let (($x44 (or false $x45)))
 (let (($x43 (or $x38 $x44)))
 (let (($x158 (and $x43 $x157)))
 (let (($x106 (= $x158 true)))
 (let (($x108 (= $x106 true)))
 (let (($x112 (= $x108 true)))
 (let (($x146 (and $x112 $x139)))
 (let (($x156 (and $x146 $x149)))
 (let (($x169 (and $x156 $x198)))
 (let (($x47 (=> $x169 $x199)))
 (let (($x7 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x26 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x26) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x7 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00900400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00400003) #x03
    (ite (= x!0 #x00400001) #x03
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000003) #x01
    (ite (= x!0 #x00400000) #x03
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400001 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) #x00400004 #x00400003)
                         #x00400001)
                    #x00400000)))
    (let ((a!2 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x00000008 x!0)
                         (ite (bvule #x00400000 x!0) a!1 #x00000008)
                         #x00000007)
                    #x00000006)))
    (let ((a!3 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!2 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!3 #x00000002)
                #x00000001)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x2decfff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08b34583)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08b34580)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2decfffe x!0)
                    (ite (bvule #x2decffff x!0)
                         (ite (bvule #x2ded0000 x!0) #x2ded0000 #x2decffff)
                         #x2decfffe)
                    #x2decfffd)))
    (let ((a!2 (ite (bvule #x2decfffb x!0)
                    (ite (bvule #x2decfffc x!0)
                         (ite (bvule #x2decfffd x!0) a!1 #x2decfffc)
                         #x2decfffb)
                    #x2decfffa)))
    (let ((a!3 (ite (bvule #x08b34584 x!0)
                    (ite (bvule #x2decfff9 x!0)
                         (ite (bvule #x2decfffa x!0) a!2 #x2decfff9)
                         #x08b34584)
                    #x08b34583)))
      (ite (bvule #x08b34580 x!0)
           (ite (bvule #x08b34581 x!0)
                (ite (bvule #x08b34583 x!0) a!3 #x08b34581)
                #x08b34580)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2decfffb) #x01
    (ite (= x!0 #x08b34580) #x03
    (ite (= x!0 #x2decfffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x2decfffa) #x01
    (ite (= x!0 #x2decfffd) #x01
    (ite (= x!0 #x08b34581) #x03
    (ite (= x!0 #x08b34583) #x03
    (ite (= x!0 #x2decffff) #x01
    (ite (= x!0 #x2decfff9) #x01
    (ite (= x!0 #x2ded0000) #x01
    (ite (= x!0 #x2decfffc) #x01
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x42 (not true)))
 (let (($x183 (= true true)))
 (let (($x198 (and $x183 $x42)))
 (let (($x169 (= $x198 true)))
 (let (($x162 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x166 (= $x167 $x162)))
 (let (($x14 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x163 (= $x164 $x14)))
 (let (($x168 (and $x163 $x166)))
 (let (($x188 (= $x168 true)))
 (let ((?x102 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x102)))
 (let (($x143 (= ?x110 input.dst.llvm-%val)))
 (let (($x149 (= $x143 true)))
 (let (($x156 (= $x149 true)))
 (let ((?x135 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x135)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x130 $x132)))
 (let (($x137 (and $x134 $x136)))
 (let (($x105 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x105 $x137)))
 (let (($x111 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x111)))))
 (let (($x144 (and $x129 $x145)))
 (let (($x141 (= $x144 true)))
 (let (($x139 (= $x141 true)))
 (let (($x146 (= $x139 true)))
 (let ((?x15 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x92 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x15) (_ bv1 8)))))
 (let (($x71 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x70 (=> $x71 (or false (or false $x103)))))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x67 (or $x39 $x70)))
 (let ((?x60 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x60 (_ bv4294967292 32)) ?x60)))
 (let (($x20 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x60 (bvsub ?x60 (_ bv4 32))) (bvult ?x60 (bvsub ?x60 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x19 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x41 (and true $x19)))
 (let (($x29 (and $x19 $x41)))
 (let (($x155 (and (and (and $x41 $x29) $x34) $x20)))
 (let (($x50 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (and (and (and $x50 $x155) $x56) $x67)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x15)))
 (let (($x43 (or false $x33)))
 (let (($x49 (or $x39 $x43)))
 (let (($x106 (and $x49 $x158)))
 (let (($x108 (= $x106 true)))
 (let (($x112 (= $x108 true)))
 (let (($x113 (= $x112 true)))
 (let (($x153 (and $x113 $x146)))
 (let (($x151 (and $x153 $x156)))
 (let (($x211 (and $x151 $x188)))
 (let (($x66 (=> $x211 $x169)))
 (let (($x44 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x38 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x38) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x44 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x42 (not true)))
 (let (($x183 (= true true)))
 (let (($x198 (and $x183 $x42)))
 (let (($x169 (= $x198 true)))
 (let (($x162 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x166 (= $x167 $x162)))
 (let (($x14 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x163 (= $x164 $x14)))
 (let (($x168 (and $x163 $x166)))
 (let (($x188 (= $x168 true)))
 (let ((?x102 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x102)))
 (let (($x143 (= ?x110 input.dst.llvm-%val)))
 (let (($x149 (= $x143 true)))
 (let (($x156 (= $x149 true)))
 (let ((?x135 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x135)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x130 $x132)))
 (let (($x137 (and $x134 $x136)))
 (let (($x105 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x105 $x137)))
 (let (($x111 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x111)))))
 (let (($x144 (and $x129 $x145)))
 (let (($x141 (= $x144 true)))
 (let (($x139 (= $x141 true)))
 (let (($x146 (= $x139 true)))
 (let ((?x15 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x92 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x15) (_ bv1 8)))))
 (let (($x71 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x70 (=> $x71 (or false (or false $x103)))))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x67 (or $x39 $x70)))
 (let ((?x60 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x60 (_ bv4294967292 32)) ?x60)))
 (let (($x20 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x60 (bvsub ?x60 (_ bv4 32))) (bvult ?x60 (bvsub ?x60 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x19 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x41 (and true $x19)))
 (let (($x29 (and $x19 $x41)))
 (let (($x155 (and (and (and $x41 $x29) $x34) $x20)))
 (let (($x50 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (and (and (and $x50 $x155) $x56) $x67)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x15)))
 (let (($x43 (or false $x33)))
 (let (($x49 (or $x39 $x43)))
 (let (($x106 (and $x49 $x158)))
 (let (($x108 (= $x106 true)))
 (let (($x112 (= $x108 true)))
 (let (($x113 (= $x112 true)))
 (let (($x153 (and $x113 $x146)))
 (let (($x151 (and $x153 $x156)))
 (let (($x211 (and $x151 $x188)))
 (let (($x66 (=> $x211 $x169)))
 (let (($x44 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x38 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x38) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x44 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x199 (not true)))
 (let (($x66 (= true true)))
 (let (($x47 (and $x66 $x199)))
 (let (($x25 (= $x47 true)))
 (let (($x188 (= false false)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x211 (=> $x14 $x188)))
 (let (($x166 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x168 (= $x162 $x166)))
 (let (($x163 (= (_ bv0 32) (_ bv0 32))))
 (let (($x167 (= $x14 $x163)))
 (let (($x42 (and (and $x167 $x168) $x211)))
 (let (($x198 (= $x42 true)))
 (let ((?x110 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x110)))
 (let (($x149 (= ?x109 input.dst.llvm-%val)))
 (let (($x156 (= $x149 true)))
 (let (($x151 (= $x156 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x136)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x131 $x134)))
 (let (($x145 (and $x135 $x137)))
 (let (($x115 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x115 $x145)))
 (let (($x148 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x148)))))
 (let (($x141 (and $x130 $x144)))
 (let (($x139 (= $x141 true)))
 (let (($x146 (= $x139 true)))
 (let (($x153 (= $x146 true)))
 (let ((?x21 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x165 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x21) (_ bv1 8)))))
 (let (($x70 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x67 (=> $x70 (or false (or false $x103)))))
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x54 (or $x35 $x67)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x58 (_ bv4294967292 32)) ?x58)))
 (let (($x13 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x58 (bvsub ?x58 (_ bv4 32))) (bvult ?x58 (bvsub ?x58 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x29 (and true $x41)))
 (let (($x52 (and $x41 $x29)))
 (let (($x59 (and (and (and $x29 $x52) $x34) $x13)))
 (let (($x37 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x106 (and (and (and $x37 $x59) $x56) $x54)))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x21)))
 (let (($x49 (or false $x45)))
 (let (($x24 (or $x35 $x49)))
 (let (($x108 (and $x24 $x106)))
 (let (($x112 (= $x108 true)))
 (let (($x113 (= $x112 true)))
 (let (($x116 (= $x113 true)))
 (let (($x150 (and $x116 $x153)))
 (let (($x160 (and $x150 $x151)))
 (let (($x169 (and $x160 $x198)))
 (let (($x87 (=> $x169 $x25)))
 (let (($x43 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x85 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x43 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x199 (not true)))
 (let (($x66 (= true true)))
 (let (($x47 (and $x66 $x199)))
 (let (($x25 (= $x47 true)))
 (let (($x188 (= false false)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x211 (=> $x14 $x188)))
 (let (($x166 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x168 (= $x162 $x166)))
 (let (($x163 (= (_ bv0 32) (_ bv0 32))))
 (let (($x167 (= $x14 $x163)))
 (let (($x42 (and (and $x167 $x168) $x211)))
 (let (($x198 (= $x42 true)))
 (let ((?x110 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x110)))
 (let (($x149 (= ?x109 input.dst.llvm-%val)))
 (let (($x156 (= $x149 true)))
 (let (($x151 (= $x156 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x136)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x131 $x134)))
 (let (($x145 (and $x135 $x137)))
 (let (($x115 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x115 $x145)))
 (let (($x148 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x148)))))
 (let (($x141 (and $x130 $x144)))
 (let (($x139 (= $x141 true)))
 (let (($x146 (= $x139 true)))
 (let (($x153 (= $x146 true)))
 (let ((?x21 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x165 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x21) (_ bv1 8)))))
 (let (($x70 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x67 (=> $x70 (or false (or false $x103)))))
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x54 (or $x35 $x67)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x58 (_ bv4294967292 32)) ?x58)))
 (let (($x13 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x58 (bvsub ?x58 (_ bv4 32))) (bvult ?x58 (bvsub ?x58 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x29 (and true $x41)))
 (let (($x52 (and $x41 $x29)))
 (let (($x59 (and (and (and $x29 $x52) $x34) $x13)))
 (let (($x37 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x106 (and (and (and $x37 $x59) $x56) $x54)))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x21)))
 (let (($x49 (or false $x45)))
 (let (($x24 (or $x35 $x49)))
 (let (($x108 (and $x24 $x106)))
 (let (($x112 (= $x108 true)))
 (let (($x113 (= $x112 true)))
 (let (($x116 (= $x113 true)))
 (let (($x150 (and $x116 $x153)))
 (let (($x160 (and $x150 $x151)))
 (let (($x169 (and $x160 $x198)))
 (let (($x87 (=> $x169 $x25)))
 (let (($x43 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x85 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x43 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x175 (not true)))
 (let (($x17 (= true true)))
 (let (($x203 (and $x17 $x175)))
 (let (($x214 (= $x203 true)))
 (let (($x168 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x128 (= $x22 $x168)))
 (let (($x51 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x9 (and $x166 $x51)))
 (let (($x80 (=> $x9 $x128)))
 (let (($x167 (= (_ bv0 32) (_ bv0 32))))
 (let (($x185 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x53 (= $x185 $x167)))
 (let (($x200 (=> $x9 $x53)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x125 (=> $x9 $x173)))
 (let (($x7 (= $x51 $x168)))
 (let (($x212 (=> $x166 $x7)))
 (let (($x188 (= false false)))
 (let (($x199 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x87 (and $x166 $x199)))
 (let (($x69 (=> $x87 $x188)))
 (let (($x47 (= $x199 $x167)))
 (let (($x25 (=> $x166 $x47)))
 (let (($x198 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x169 (=> $x166 $x198)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x211 (=> $x163 $x188)))
 (let (($x213 (and (and (and (and (and (= $x163 $x167) (= $x166 $x168)) $x211) $x169) $x25) $x69)))
 (let (($x12 (and (and (and (and $x213 $x212) $x125) $x200) $x80)))
 (let (($x76 (= $x12 true)))
 (let ((?x109 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x109)))
 (let (($x156 (= ?x143 input.dst.llvm-%val)))
 (let (($x151 (= $x156 true)))
 (let (($x160 (= $x151 true)))
 (let ((?x137 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x137)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x132 $x135)))
 (let (($x144 (and $x136 $x145)))
 (let (($x105 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x105 $x144)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x139 (and $x131 $x141)))
 (let (($x146 (= $x139 true)))
 (let (($x153 (= $x146 true)))
 (let (($x150 (= $x153 true)))
 (let ((?x26 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x159 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x26) (_ bv1 8)))))
 (let (($x67 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x54 (=> $x67 (or false (or false $x103)))))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x57 (or $x88 $x54)))
 (let ((?x152 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x152 (_ bv4294967292 32)) ?x152)))
 (let (($x28 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x152 (bvsub ?x152 (_ bv4 32))) (bvult ?x152 (bvsub ?x152 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x29 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x52 (and true $x29)))
 (let (($x20 (and $x29 $x52)))
 (let (($x72 (and (and (and $x52 $x20) $x34) $x28)))
 (let (($x5 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x108 (and (and (and $x5 $x72) $x56) $x57)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x26)))
 (let (($x24 (or false $x33)))
 (let (($x36 (or $x88 $x24)))
 (let (($x112 (and $x36 $x108)))
 (let (($x113 (= $x112 true)))
 (let (($x116 (= $x113 true)))
 (let (($x117 (= $x116 true)))
 (let (($x102 (and $x117 $x150)))
 (let (($x164 (and $x102 $x160)))
 (let (($x202 (and $x164 $x76)))
 (let (($x186 (=> $x202 $x214)))
 (let (($x49 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x35 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x35) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x49 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x175 (not true)))
 (let (($x17 (= true true)))
 (let (($x203 (and $x17 $x175)))
 (let (($x214 (= $x203 true)))
 (let (($x168 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x128 (= $x22 $x168)))
 (let (($x51 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x9 (and $x166 $x51)))
 (let (($x80 (=> $x9 $x128)))
 (let (($x167 (= (_ bv0 32) (_ bv0 32))))
 (let (($x185 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x53 (= $x185 $x167)))
 (let (($x200 (=> $x9 $x53)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x125 (=> $x9 $x173)))
 (let (($x7 (= $x51 $x168)))
 (let (($x212 (=> $x166 $x7)))
 (let (($x188 (= false false)))
 (let (($x199 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x87 (and $x166 $x199)))
 (let (($x69 (=> $x87 $x188)))
 (let (($x47 (= $x199 $x167)))
 (let (($x25 (=> $x166 $x47)))
 (let (($x198 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x169 (=> $x166 $x198)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x211 (=> $x163 $x188)))
 (let (($x213 (and (and (and (and (and (= $x163 $x167) (= $x166 $x168)) $x211) $x169) $x25) $x69)))
 (let (($x12 (and (and (and (and $x213 $x212) $x125) $x200) $x80)))
 (let (($x76 (= $x12 true)))
 (let ((?x109 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x109)))
 (let (($x156 (= ?x143 input.dst.llvm-%val)))
 (let (($x151 (= $x156 true)))
 (let (($x160 (= $x151 true)))
 (let ((?x137 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x137)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x134)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x132 $x135)))
 (let (($x144 (and $x136 $x145)))
 (let (($x105 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x105 $x144)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x139 (and $x131 $x141)))
 (let (($x146 (= $x139 true)))
 (let (($x153 (= $x146 true)))
 (let (($x150 (= $x153 true)))
 (let ((?x26 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x159 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x26) (_ bv1 8)))))
 (let (($x67 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x54 (=> $x67 (or false (or false $x103)))))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x57 (or $x88 $x54)))
 (let ((?x152 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x152 (_ bv4294967292 32)) ?x152)))
 (let (($x28 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x152 (bvsub ?x152 (_ bv4 32))) (bvult ?x152 (bvsub ?x152 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x29 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x52 (and true $x29)))
 (let (($x20 (and $x29 $x52)))
 (let (($x72 (and (and (and $x52 $x20) $x34) $x28)))
 (let (($x5 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x108 (and (and (and $x5 $x72) $x56) $x57)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x26)))
 (let (($x24 (or false $x33)))
 (let (($x36 (or $x88 $x24)))
 (let (($x112 (and $x36 $x108)))
 (let (($x113 (= $x112 true)))
 (let (($x116 (= $x113 true)))
 (let (($x117 (= $x116 true)))
 (let (($x102 (and $x117 $x150)))
 (let (($x164 (and $x102 $x160)))
 (let (($x202 (and $x164 $x76)))
 (let (($x186 (=> $x202 $x214)))
 (let (($x49 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x35 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x35) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x49 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x193 (not true)))
 (let (($x222 (= true true)))
 (let (($x194 (and $x222 $x193)))
 (let (($x210 (= $x194 true)))
 (let (($x183 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x216 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x189 (= $x216 $x183)))
 (let (($x203 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x11 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x218 (and $x168 $x42)))
 (let (($x200 (and $x218 $x11)))
 (let (($x171 (and $x200 $x203)))
 (let (($x40 (=> $x171 $x189)))
 (let (($x188 (= false false)))
 (let (($x205 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x61 (and $x171 $x205)))
 (let (($x226 (=> $x61 $x188)))
 (let (($x162 (= (_ bv0 32) (_ bv0 32))))
 (let (($x215 (= $x205 $x162)))
 (let (($x187 (=> $x171 $x215)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x62 (=> $x171 $x48)))
 (let (($x214 (= $x203 $x183)))
 (let (($x186 (=> $x200 $x214)))
 (let (($x12 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x17 (and $x200 $x12)))
 (let (($x175 (=> $x17 $x188)))
 (let (($x76 (= $x12 $x162)))
 (let (($x202 (=> $x200 $x76)))
 (let (($x22 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x128 (=> $x200 $x22)))
 (let (($x185 (= $x11 $x183)))
 (let (($x53 (=> $x218 $x185)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x125 (= $x169 $x162)))
 (let (($x174 (=> $x218 $x125)))
 (let (($x184 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x173 (=> $x218 $x184)))
 (let (($x212 (= $x42 $x183)))
 (let (($x170 (=> $x168 $x212)))
 (let (($x87 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x51 (and $x168 $x87)))
 (let (($x7 (=> $x51 $x188)))
 (let (($x69 (= $x87 $x162)))
 (let (($x213 (=> $x168 $x69)))
 (let (($x25 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x201 (=> $x168 $x25)))
 (let (($x66 (and $x218 $x169)))
 (let (($x199 (=> $x66 $x188)))
 (let (($x167 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x211 (=> $x167 $x188)))
 (let (($x177 (and (and (and (and (and (= $x167 $x162) (= $x168 $x183)) $x211) $x199) $x201) $x213)))
 (let (($x190 (and (and (and (and (and (and $x177 $x7) $x170) $x173) $x174) $x53) $x128)))
 (let (($x124 (and (and (and (and (and (and $x190 $x202) $x175) $x186) $x62) $x187) $x226)))
 (let (($x191 (and $x124 $x40)))
 (let (($x209 (= $x191 true)))
 (let ((?x143 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x143)))
 (let (($x151 (= ?x149 input.dst.llvm-%val)))
 (let (($x160 (= $x151 true)))
 (let (($x164 (= $x160 true)))
 (let ((?x145 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x145)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x134 $x136)))
 (let (($x141 (and $x137 $x144)))
 (let (($x115 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x115 $x141)))
 (let (($x161 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x161)))))
 (let (($x146 (and $x132 $x139)))
 (let (($x153 (= $x146 true)))
 (let (($x150 (= $x153 true)))
 (let (($x102 (= $x150 true)))
 (let ((?x46 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x157 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x46) (_ bv1 8)))))
 (let (($x54 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x57 (=> $x54 (or false (or false $x103)))))
 (let (($x30 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x93 (or $x30 $x57)))
 (let ((?x155 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x155 (_ bv4294967292 32)) ?x155)))
 (let (($x8 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x155 (bvsub ?x155 (_ bv4 32))) (bvult ?x155 (bvsub ?x155 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x52 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x20 (and true $x52)))
 (let (($x13 (and $x52 $x20)))
 (let (($x71 (and (and (and $x20 $x13) $x34) $x8)))
 (let (($x31 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x112 (and (and (and $x31 $x71) $x56) $x93)))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x46)))
 (let (($x36 (or false $x45)))
 (let (($x50 (or $x30 $x36)))
 (let (($x113 (and $x50 $x112)))
 (let (($x116 (= $x113 true)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x110 (and $x118 $x102)))
 (let (($x14 (and $x110 $x164)))
 (let (($x192 (and $x14 $x209)))
 (let (($x223 (=> $x192 $x210)))
 (let (($x24 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x88 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x6 $x88) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x24 (not $x223))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x193 (not true)))
 (let (($x222 (= true true)))
 (let (($x194 (and $x222 $x193)))
 (let (($x210 (= $x194 true)))
 (let (($x183 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x216 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x189 (= $x216 $x183)))
 (let (($x203 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x11 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x218 (and $x168 $x42)))
 (let (($x200 (and $x218 $x11)))
 (let (($x171 (and $x200 $x203)))
 (let (($x40 (=> $x171 $x189)))
 (let (($x188 (= false false)))
 (let (($x205 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x61 (and $x171 $x205)))
 (let (($x226 (=> $x61 $x188)))
 (let (($x162 (= (_ bv0 32) (_ bv0 32))))
 (let (($x215 (= $x205 $x162)))
 (let (($x187 (=> $x171 $x215)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x62 (=> $x171 $x48)))
 (let (($x214 (= $x203 $x183)))
 (let (($x186 (=> $x200 $x214)))
 (let (($x12 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x17 (and $x200 $x12)))
 (let (($x175 (=> $x17 $x188)))
 (let (($x76 (= $x12 $x162)))
 (let (($x202 (=> $x200 $x76)))
 (let (($x22 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x128 (=> $x200 $x22)))
 (let (($x185 (= $x11 $x183)))
 (let (($x53 (=> $x218 $x185)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x125 (= $x169 $x162)))
 (let (($x174 (=> $x218 $x125)))
 (let (($x184 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x173 (=> $x218 $x184)))
 (let (($x212 (= $x42 $x183)))
 (let (($x170 (=> $x168 $x212)))
 (let (($x87 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x51 (and $x168 $x87)))
 (let (($x7 (=> $x51 $x188)))
 (let (($x69 (= $x87 $x162)))
 (let (($x213 (=> $x168 $x69)))
 (let (($x25 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x201 (=> $x168 $x25)))
 (let (($x66 (and $x218 $x169)))
 (let (($x199 (=> $x66 $x188)))
 (let (($x167 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x211 (=> $x167 $x188)))
 (let (($x177 (and (and (and (and (and (= $x167 $x162) (= $x168 $x183)) $x211) $x199) $x201) $x213)))
 (let (($x190 (and (and (and (and (and (and $x177 $x7) $x170) $x173) $x174) $x53) $x128)))
 (let (($x124 (and (and (and (and (and (and $x190 $x202) $x175) $x186) $x62) $x187) $x226)))
 (let (($x191 (and $x124 $x40)))
 (let (($x209 (= $x191 true)))
 (let ((?x143 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x143)))
 (let (($x151 (= ?x149 input.dst.llvm-%val)))
 (let (($x160 (= $x151 true)))
 (let (($x164 (= $x160 true)))
 (let ((?x145 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x145)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x134 $x136)))
 (let (($x141 (and $x137 $x144)))
 (let (($x115 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x115 $x141)))
 (let (($x161 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x161)))))
 (let (($x146 (and $x132 $x139)))
 (let (($x153 (= $x146 true)))
 (let (($x150 (= $x153 true)))
 (let (($x102 (= $x150 true)))
 (let ((?x46 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x157 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x119 (_ bv1 8)))))
 (let (($x103 (and (and (and (and $x95 (= ?x147 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x74 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x46) (_ bv1 8)))))
 (let (($x54 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x57 (=> $x54 (or false (or false $x103)))))
 (let (($x30 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x93 (or $x30 $x57)))
 (let ((?x155 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x56 (= (bvand ?x155 (_ bv4294967292 32)) ?x155)))
 (let (($x8 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x155 (bvsub ?x155 (_ bv4 32))) (bvult ?x155 (bvsub ?x155 (_ bv4 32))))))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x68 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x52 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x68) (bvult input.dst.llvm-%call.Lentry%2%d ?x68))))
 (let (($x20 (and true $x52)))
 (let (($x13 (and $x52 $x20)))
 (let (($x71 (and (and (and $x20 $x13) $x34) $x8)))
 (let (($x31 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x112 (and (and (and $x31 $x71) $x56) $x93)))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x46)))
 (let (($x36 (or false $x45)))
 (let (($x50 (or $x30 $x36)))
 (let (($x113 (and $x50 $x112)))
 (let (($x116 (= $x113 true)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x110 (and $x118 $x102)))
 (let (($x14 (and $x110 $x164)))
 (let (($x192 (and $x14 $x209)))
 (let (($x223 (=> $x192 $x210)))
 (let (($x24 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x88 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x6 $x88) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x24 (not $x223))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x42 (not true)))
 (let (($x120 (= true true)))
 (let (($x218 (and $x120 $x42)))
 (let (($x198 (= $x218 true)))
 (let (($x122 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x172 (= $x183 $x122)))
 (let (($x166 (= (_ bv0 32) (_ bv0 32))))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x168 (= $x162 $x166)))
 (let (($x188 (and $x168 $x172)))
 (let (($x211 (= $x188 true)))
 (let ((?x109 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x109)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x153 $x102)))
 (let (($x149 (and $x110 $x143)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x111 $x149)))
 (let (($x145 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x145)))))
 (let (($x151 (and $x146 $x156)))
 (let (($x160 (= $x151 true)))
 (let (($x164 (= $x160 true)))
 (let (($x14 (= $x164 true)))
 (let ((?x68 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x73 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x68) (_ bv1 8)))))
 (let (($x98 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x148 (=> $x98 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x64 (or $x31 $x148)))
 (let ((?x71 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x71 (_ bv4294967292 32)) ?x71)))
 (let (($x106 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x71 (bvsub ?x71 (_ bv4 32))) (bvult ?x71 (bvsub ?x71 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x152 (and true $x59)))
 (let (($x155 (and $x59 $x152)))
 (let (($x165 (and (and (and $x152 $x155) $x55) $x106)))
 (let (($x13 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (and (and (and $x13 $x165) $x159) $x64)))
 (let (($x41 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x68)))
 (let (($x29 (or false $x41)))
 (let (($x52 (or $x31 $x29)))
 (let (($x114 (and $x52 $x129)))
 (let (($x130 (= $x114 true)))
 (let (($x161 (= $x130 true)))
 (let (($x131 (= $x161 true)))
 (let ((?x44 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x44)))
 (let (($x15 (= ?x39 input.dst.llvm-%val)))
 (let (($x33 (= $x15 true)))
 (let (($x50 (= $x33 true)))
 (let (($x107 (and $x50 $x131)))
 (let (($x163 (and $x107 $x14)))
 (let (($x206 (and $x163 $x211)))
 (let (($x169 (=> $x206 $x198)))
 (let (($x36 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x30 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x30) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x36 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x42 (not true)))
 (let (($x120 (= true true)))
 (let (($x218 (and $x120 $x42)))
 (let (($x198 (= $x218 true)))
 (let (($x122 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x172 (= $x183 $x122)))
 (let (($x166 (= (_ bv0 32) (_ bv0 32))))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x168 (= $x162 $x166)))
 (let (($x188 (and $x168 $x172)))
 (let (($x211 (= $x188 true)))
 (let ((?x109 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x109)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x153 $x102)))
 (let (($x149 (and $x110 $x143)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x111 $x149)))
 (let (($x145 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x145)))))
 (let (($x151 (and $x146 $x156)))
 (let (($x160 (= $x151 true)))
 (let (($x164 (= $x160 true)))
 (let (($x14 (= $x164 true)))
 (let ((?x68 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x73 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x68) (_ bv1 8)))))
 (let (($x98 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x148 (=> $x98 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x64 (or $x31 $x148)))
 (let ((?x71 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x71 (_ bv4294967292 32)) ?x71)))
 (let (($x106 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x71 (bvsub ?x71 (_ bv4 32))) (bvult ?x71 (bvsub ?x71 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x152 (and true $x59)))
 (let (($x155 (and $x59 $x152)))
 (let (($x165 (and (and (and $x152 $x155) $x55) $x106)))
 (let (($x13 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (and (and (and $x13 $x165) $x159) $x64)))
 (let (($x41 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x68)))
 (let (($x29 (or false $x41)))
 (let (($x52 (or $x31 $x29)))
 (let (($x114 (and $x52 $x129)))
 (let (($x130 (= $x114 true)))
 (let (($x161 (= $x130 true)))
 (let (($x131 (= $x161 true)))
 (let ((?x44 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x44)))
 (let (($x15 (= ?x39 input.dst.llvm-%val)))
 (let (($x33 (= $x15 true)))
 (let (($x50 (= $x33 true)))
 (let (($x107 (and $x50 $x131)))
 (let (($x163 (and $x107 $x14)))
 (let (($x206 (and $x163 $x211)))
 (let (($x169 (=> $x206 $x198)))
 (let (($x36 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x30 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x30) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x36 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x66 (not true)))
 (let (($x169 (= true true)))
 (let (($x199 (and $x169 $x66)))
 (let (($x19 (= $x199 true)))
 (let (($x211 (= false false)))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x166 $x211)))
 (let (($x172 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x122 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x188 (= $x122 $x172)))
 (let (($x168 (= (_ bv0 32) (_ bv0 32))))
 (let (($x183 (= $x166 $x168)))
 (let (($x42 (and (and $x183 $x188) $x206)))
 (let (($x218 (= $x42 true)))
 (let ((?x143 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x143)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x150 $x110)))
 (let (($x156 (and $x109 $x149)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x139 $x156)))
 (let (($x141 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x153 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x160 (and $x153 $x151)))
 (let (($x164 (= $x160 true)))
 (let (($x14 (= $x164 true)))
 (let (($x163 (= $x14 true)))
 (let ((?x41 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x158 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x41) (_ bv1 8)))))
 (let (($x148 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x64 (=> $x148 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x63 (or $x31 $x64)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x152 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x155 (and true $x152)))
 (let (($x92 (and $x152 $x155)))
 (let (($x75 (and (and (and $x155 $x92) $x55) $x108)))
 (let (($x133 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x114 (and (and (and $x133 $x75) $x159) $x63)))
 (let (($x29 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x41)))
 (let (($x52 (or false $x29)))
 (let (($x20 (or $x31 $x52)))
 (let (($x130 (and $x20 $x114)))
 (let (($x161 (= $x130 true)))
 (let (($x131 (= $x161 true)))
 (let (($x107 (= $x131 true)))
 (let ((?x43 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x43)))
 (let (($x21 (= ?x35 input.dst.llvm-%val)))
 (let (($x45 (= $x21 true)))
 (let (($x50 (= $x45 true)))
 (let (($x115 (and $x50 $x107)))
 (let (($x167 (and $x115 $x163)))
 (let (($x198 (and $x167 $x218)))
 (let (($x217 (=> $x198 $x19)))
 (let (($x33 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x44 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x44) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x33 (not $x217))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x66 (not true)))
 (let (($x169 (= true true)))
 (let (($x199 (and $x169 $x66)))
 (let (($x19 (= $x199 true)))
 (let (($x211 (= false false)))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x166 $x211)))
 (let (($x172 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x122 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x188 (= $x122 $x172)))
 (let (($x168 (= (_ bv0 32) (_ bv0 32))))
 (let (($x183 (= $x166 $x168)))
 (let (($x42 (and (and $x183 $x188) $x206)))
 (let (($x218 (= $x42 true)))
 (let ((?x143 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x143)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x150 $x110)))
 (let (($x156 (and $x109 $x149)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x139 $x156)))
 (let (($x141 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x153 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x160 (and $x153 $x151)))
 (let (($x164 (= $x160 true)))
 (let (($x14 (= $x164 true)))
 (let (($x163 (= $x14 true)))
 (let ((?x41 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x158 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x41) (_ bv1 8)))))
 (let (($x148 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x64 (=> $x148 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x63 (or $x31 $x64)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x152 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x155 (and true $x152)))
 (let (($x92 (and $x152 $x155)))
 (let (($x75 (and (and (and $x155 $x92) $x55) $x108)))
 (let (($x133 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x114 (and (and (and $x133 $x75) $x159) $x63)))
 (let (($x29 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x41)))
 (let (($x52 (or false $x29)))
 (let (($x20 (or $x31 $x52)))
 (let (($x130 (and $x20 $x114)))
 (let (($x161 (= $x130 true)))
 (let (($x131 (= $x161 true)))
 (let (($x107 (= $x131 true)))
 (let ((?x43 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x43)))
 (let (($x21 (= ?x35 input.dst.llvm-%val)))
 (let (($x45 (= $x21 true)))
 (let (($x50 (= $x45 true)))
 (let (($x115 (and $x50 $x107)))
 (let (($x167 (and $x115 $x163)))
 (let (($x198 (and $x167 $x218)))
 (let (($x217 (=> $x198 $x19)))
 (let (($x33 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x44 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x44) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x33 (not $x217))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x225 (not true)))
 (let (($x200 (= true true)))
 (let (($x22 (and $x200 $x225)))
 (let (($x128 (= $x22 true)))
 (let (($x188 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x170 (= $x212 $x188)))
 (let (($x25 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x176 (and $x172 $x25)))
 (let (($x207 (=> $x176 $x170)))
 (let (($x183 (= (_ bv0 32) (_ bv0 32))))
 (let (($x51 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x7 (= $x51 $x183)))
 (let (($x220 (=> $x176 $x7)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x213 (=> $x176 $x69)))
 (let (($x23 (= $x25 $x188)))
 (let (($x201 (=> $x172 $x23)))
 (let (($x211 (= false false)))
 (let (($x66 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x217 (and $x172 $x66)))
 (let (($x47 (=> $x217 $x211)))
 (let (($x199 (= $x66 $x183)))
 (let (($x19 (=> $x172 $x199)))
 (let (($x218 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x198 (=> $x172 $x218)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x168 $x211)))
 (let (($x125 (and (and (and (and (and (= $x168 $x183) (= $x172 $x188)) $x206) $x198) $x19) $x47)))
 (let (($x185 (and (and (and (and $x125 $x201) $x213) $x220) $x207)))
 (let (($x53 (= $x185 true)))
 (let ((?x149 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x149)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x102 $x109)))
 (let (($x151 (and $x143 $x156)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x111 $x151)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x164 (and $x150 $x160)))
 (let (($x14 (= $x164 true)))
 (let (($x163 (= $x14 true)))
 (let (($x167 (= $x163 true)))
 (let ((?x29 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x157 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x29) (_ bv1 8)))))
 (let (($x64 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x63 (=> $x64 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x121 (or $x31 $x63)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x56 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x155 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x92 (and true $x155)))
 (let (($x106 (and $x155 $x92)))
 (let (($x81 (and (and (and $x92 $x106) $x55) $x56)))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x130 (and (and (and $x34 $x81) $x159) $x121)))
 (let (($x52 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x29)))
 (let (($x20 (or false $x52)))
 (let (($x13 (or $x31 $x20)))
 (let (($x161 (and $x13 $x130)))
 (let (($x131 (= $x161 true)))
 (let (($x107 (= $x131 true)))
 (let (($x115 (= $x107 true)))
 (let ((?x49 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x49)))
 (let (($x26 (= ?x88 input.dst.llvm-%val)))
 (let (($x15 (= $x26 true)))
 (let (($x50 (= $x15 true)))
 (let (($x135 (and $x50 $x115)))
 (let (($x162 (and $x135 $x167)))
 (let (($x227 (and $x162 $x53)))
 (let (($x190 (=> $x227 $x128)))
 (let (($x45 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x43 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x35 $x43) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x45 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x225 (not true)))
 (let (($x200 (= true true)))
 (let (($x22 (and $x200 $x225)))
 (let (($x128 (= $x22 true)))
 (let (($x188 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x170 (= $x212 $x188)))
 (let (($x25 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x176 (and $x172 $x25)))
 (let (($x207 (=> $x176 $x170)))
 (let (($x183 (= (_ bv0 32) (_ bv0 32))))
 (let (($x51 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x7 (= $x51 $x183)))
 (let (($x220 (=> $x176 $x7)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x213 (=> $x176 $x69)))
 (let (($x23 (= $x25 $x188)))
 (let (($x201 (=> $x172 $x23)))
 (let (($x211 (= false false)))
 (let (($x66 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x217 (and $x172 $x66)))
 (let (($x47 (=> $x217 $x211)))
 (let (($x199 (= $x66 $x183)))
 (let (($x19 (=> $x172 $x199)))
 (let (($x218 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x198 (=> $x172 $x218)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x168 $x211)))
 (let (($x125 (and (and (and (and (and (= $x168 $x183) (= $x172 $x188)) $x206) $x198) $x19) $x47)))
 (let (($x185 (and (and (and (and $x125 $x201) $x213) $x220) $x207)))
 (let (($x53 (= $x185 true)))
 (let ((?x149 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x149)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x102 $x109)))
 (let (($x151 (and $x143 $x156)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x111 $x151)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x164 (and $x150 $x160)))
 (let (($x14 (= $x164 true)))
 (let (($x163 (= $x14 true)))
 (let (($x167 (= $x163 true)))
 (let ((?x29 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x157 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x29) (_ bv1 8)))))
 (let (($x64 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x63 (=> $x64 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x121 (or $x31 $x63)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x56 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x155 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x92 (and true $x155)))
 (let (($x106 (and $x155 $x92)))
 (let (($x81 (and (and (and $x92 $x106) $x55) $x56)))
 (let (($x34 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x130 (and (and (and $x34 $x81) $x159) $x121)))
 (let (($x52 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x29)))
 (let (($x20 (or false $x52)))
 (let (($x13 (or $x31 $x20)))
 (let (($x161 (and $x13 $x130)))
 (let (($x131 (= $x161 true)))
 (let (($x107 (= $x131 true)))
 (let (($x115 (= $x107 true)))
 (let ((?x49 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x49)))
 (let (($x26 (= ?x88 input.dst.llvm-%val)))
 (let (($x15 (= $x26 true)))
 (let (($x50 (= $x15 true)))
 (let (($x135 (and $x50 $x115)))
 (let (($x162 (and $x135 $x167)))
 (let (($x227 (and $x162 $x53)))
 (let (($x190 (=> $x227 $x128)))
 (let (($x45 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x43 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x35 $x43) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x45 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x194 (not true)))
 (let (($x193 (= true true)))
 (let (($x210 (and $x193 $x194)))
 (let (($x223 (= $x210 true)))
 (let (($x120 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x186 (= $x214 $x120)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x177 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x188 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x173 (and $x188 $x42)))
 (let (($x220 (and $x173 $x177)))
 (let (($x80 (and $x220 $x22)))
 (let (($x208 (=> $x80 $x186)))
 (let (($x211 (= false false)))
 (let (($x180 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x221 (and $x80 $x180)))
 (let (($x203 (=> $x221 $x211)))
 (let (($x122 (= (_ bv0 32) (_ bv0 32))))
 (let (($x17 (= $x180 $x122)))
 (let (($x175 (=> $x80 $x17)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x76 (=> $x80 $x68)))
 (let (($x128 (= $x22 $x120)))
 (let (($x190 (=> $x220 $x128)))
 (let (($x185 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x200 (and $x220 $x185)))
 (let (($x225 (=> $x200 $x211)))
 (let (($x53 (= $x185 $x122)))
 (let (($x227 (=> $x220 $x53)))
 (let (($x212 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x170 (=> $x220 $x212)))
 (let (($x51 (= $x177 $x120)))
 (let (($x7 (=> $x173 $x51)))
 (let (($x198 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x213 (= $x198 $x122)))
 (let (($x179 (=> $x173 $x213)))
 (let (($x87 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x69 (=> $x173 $x87)))
 (let (($x201 (= $x42 $x120)))
 (let (($x174 (=> $x188 $x201)))
 (let (($x217 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x25 (and $x188 $x217)))
 (let (($x23 (=> $x25 $x211)))
 (let (($x47 (= $x217 $x122)))
 (let (($x125 (=> $x188 $x47)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x178 (=> $x188 $x19)))
 (let (($x169 (and $x173 $x198)))
 (let (($x66 (=> $x169 $x211)))
 (let (($x183 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x183 $x211)))
 (let (($x181 (and (and (and (and (and (= $x183 $x122) (= $x188 $x120)) $x206) $x66) $x178) $x125)))
 (let (($x61 (and (and (and (and (and (and $x181 $x23) $x174) $x69) $x179) $x7) $x170)))
 (let (($x191 (and (and (and (and (and (and $x61 $x227) $x225) $x190) $x76) $x175) $x203)))
 (let (($x209 (and $x191 $x208)))
 (let (($x192 (= $x209 true)))
 (let ((?x156 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x156)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x110 $x143)))
 (let (($x160 (and $x149 $x151)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x139 $x160)))
 (let (($x134 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x134)))))
 (let (($x14 (and $x102 $x164)))
 (let (($x163 (= $x14 true)))
 (let (($x167 (= $x163 true)))
 (let (($x162 (= $x167 true)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x105 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv1 8)))))
 (let (($x63 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x121 (=> $x63 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (or $x31 $x121)))
 (let ((?x165 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x165 (_ bv4294967292 32)) ?x165)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x165 (bvsub ?x165 (_ bv4 32))) (bvult ?x165 (bvsub ?x165 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x92 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x106 (and true $x92)))
 (let (($x108 (and $x92 $x106)))
 (let (($x98 (and (and (and $x106 $x108) $x55) $x70)))
 (let (($x72 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (and (and (and $x72 $x98) $x159) $x65)))
 (let (($x20 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let (($x13 (or false $x20)))
 (let (($x133 (or $x31 $x13)))
 (let (($x131 (and $x133 $x161)))
 (let (($x107 (= $x131 true)))
 (let (($x115 (= $x107 true)))
 (let (($x135 (= $x115 true)))
 (let ((?x24 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x24)))
 (let (($x46 (= ?x30 input.dst.llvm-%val)))
 (let (($x21 (= $x46 true)))
 (let (($x50 (= $x21 true)))
 (let (($x137 (and $x50 $x135)))
 (let (($x166 (and $x137 $x162)))
 (let (($x222 (and $x166 $x192)))
 (let (($x195 (=> $x222 $x223)))
 (let (($x15 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x88 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x15 (not $x195))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x194 (not true)))
 (let (($x193 (= true true)))
 (let (($x210 (and $x193 $x194)))
 (let (($x223 (= $x210 true)))
 (let (($x120 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x186 (= $x214 $x120)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x177 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x188 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x173 (and $x188 $x42)))
 (let (($x220 (and $x173 $x177)))
 (let (($x80 (and $x220 $x22)))
 (let (($x208 (=> $x80 $x186)))
 (let (($x211 (= false false)))
 (let (($x180 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x221 (and $x80 $x180)))
 (let (($x203 (=> $x221 $x211)))
 (let (($x122 (= (_ bv0 32) (_ bv0 32))))
 (let (($x17 (= $x180 $x122)))
 (let (($x175 (=> $x80 $x17)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x76 (=> $x80 $x68)))
 (let (($x128 (= $x22 $x120)))
 (let (($x190 (=> $x220 $x128)))
 (let (($x185 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x200 (and $x220 $x185)))
 (let (($x225 (=> $x200 $x211)))
 (let (($x53 (= $x185 $x122)))
 (let (($x227 (=> $x220 $x53)))
 (let (($x212 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x170 (=> $x220 $x212)))
 (let (($x51 (= $x177 $x120)))
 (let (($x7 (=> $x173 $x51)))
 (let (($x198 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x213 (= $x198 $x122)))
 (let (($x179 (=> $x173 $x213)))
 (let (($x87 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x69 (=> $x173 $x87)))
 (let (($x201 (= $x42 $x120)))
 (let (($x174 (=> $x188 $x201)))
 (let (($x217 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x25 (and $x188 $x217)))
 (let (($x23 (=> $x25 $x211)))
 (let (($x47 (= $x217 $x122)))
 (let (($x125 (=> $x188 $x47)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x178 (=> $x188 $x19)))
 (let (($x169 (and $x173 $x198)))
 (let (($x66 (=> $x169 $x211)))
 (let (($x183 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x183 $x211)))
 (let (($x181 (and (and (and (and (and (= $x183 $x122) (= $x188 $x120)) $x206) $x66) $x178) $x125)))
 (let (($x61 (and (and (and (and (and (and $x181 $x23) $x174) $x69) $x179) $x7) $x170)))
 (let (($x191 (and (and (and (and (and (and $x61 $x227) $x225) $x190) $x76) $x175) $x203)))
 (let (($x209 (and $x191 $x208)))
 (let (($x192 (= $x209 true)))
 (let ((?x156 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x156)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x110 $x143)))
 (let (($x160 (and $x149 $x151)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x139 $x160)))
 (let (($x134 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x134)))))
 (let (($x14 (and $x102 $x164)))
 (let (($x163 (= $x14 true)))
 (let (($x167 (= $x163 true)))
 (let (($x162 (= $x167 true)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x105 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv1 8)))))
 (let (($x63 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x121 (=> $x63 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (or $x31 $x121)))
 (let ((?x165 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x165 (_ bv4294967292 32)) ?x165)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x165 (bvsub ?x165 (_ bv4 32))) (bvult ?x165 (bvsub ?x165 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x92 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x106 (and true $x92)))
 (let (($x108 (and $x92 $x106)))
 (let (($x98 (and (and (and $x106 $x108) $x55) $x70)))
 (let (($x72 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (and (and (and $x72 $x98) $x159) $x65)))
 (let (($x20 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let (($x13 (or false $x20)))
 (let (($x133 (or $x31 $x13)))
 (let (($x131 (and $x133 $x161)))
 (let (($x107 (= $x131 true)))
 (let (($x115 (= $x107 true)))
 (let (($x135 (= $x115 true)))
 (let ((?x24 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x24)))
 (let (($x46 (= ?x30 input.dst.llvm-%val)))
 (let (($x21 (= $x46 true)))
 (let (($x50 (= $x21 true)))
 (let (($x137 (and $x50 $x135)))
 (let (($x166 (and $x137 $x162)))
 (let (($x222 (and $x166 $x192)))
 (let (($x195 (=> $x222 $x223)))
 (let (($x15 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x88 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x15 (not $x195))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x184 (= false true)))
 (let (($x42 (= $x184 true)))
 (let (($x9 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x171 (= $x120 $x9)))
 (let (($x172 (= (_ bv0 32) (_ bv0 32))))
 (let (($x122 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x188 (= $x122 $x172)))
 (let (($x211 (and $x188 $x171)))
 (let (($x206 (= $x211 true)))
 (let ((?x151 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x151)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x109 $x149)))
 (let (($x164 (and $x156 $x160)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x111 $x164)))
 (let (($x136 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x136)))))
 (let (($x163 (and $x110 $x14)))
 (let (($x167 (= $x163 true)))
 (let (($x162 (= $x167 true)))
 (let (($x166 (= $x162 true)))
 (let ((?x20 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x129 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x20) (_ bv1 8)))))
 (let (($x121 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x65 (=> $x121 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x73 (or $x31 $x65)))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x27 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x106 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x108 (and true $x106)))
 (let (($x56 (and $x106 $x108)))
 (let (($x148 (and (and (and $x108 $x56) $x55) $x27)))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x131 (and (and (and $x59 $x148) $x159) $x73)))
 (let (($x13 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x20)))
 (let (($x133 (or false $x13)))
 (let (($x34 (or $x31 $x133)))
 (let (($x107 (and $x34 $x131)))
 (let (($x115 (= $x107 true)))
 (let (($x135 (= $x115 true)))
 (let (($x137 (= $x135 true)))
 (let ((?x36 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x36)))
 (let (($x85 (= ?x44 input.dst.llvm-%val)))
 (let (($x26 (= $x85 true)))
 (let (($x50 (= $x26 true)))
 (let (($x144 (and $x50 $x137)))
 (let (($x168 (and $x144 $x166)))
 (let (($x204 (and $x168 $x206)))
 (let (($x173 (=> $x204 $x42)))
 (let (($x21 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x30 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x21 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x184 (= false true)))
 (let (($x42 (= $x184 true)))
 (let (($x9 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x171 (= $x120 $x9)))
 (let (($x172 (= (_ bv0 32) (_ bv0 32))))
 (let (($x122 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x188 (= $x122 $x172)))
 (let (($x211 (and $x188 $x171)))
 (let (($x206 (= $x211 true)))
 (let ((?x151 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x151)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x109 $x149)))
 (let (($x164 (and $x156 $x160)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x111 $x164)))
 (let (($x136 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x136)))))
 (let (($x163 (and $x110 $x14)))
 (let (($x167 (= $x163 true)))
 (let (($x162 (= $x167 true)))
 (let (($x166 (= $x162 true)))
 (let ((?x20 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x129 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x20) (_ bv1 8)))))
 (let (($x121 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x65 (=> $x121 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x73 (or $x31 $x65)))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x27 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x106 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x108 (and true $x106)))
 (let (($x56 (and $x106 $x108)))
 (let (($x148 (and (and (and $x108 $x56) $x55) $x27)))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x131 (and (and (and $x59 $x148) $x159) $x73)))
 (let (($x13 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x20)))
 (let (($x133 (or false $x13)))
 (let (($x34 (or $x31 $x133)))
 (let (($x107 (and $x34 $x131)))
 (let (($x115 (= $x107 true)))
 (let (($x135 (= $x115 true)))
 (let (($x137 (= $x135 true)))
 (let ((?x36 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x36)))
 (let (($x85 (= ?x44 input.dst.llvm-%val)))
 (let (($x26 (= $x85 true)))
 (let (($x50 (= $x26 true)))
 (let (($x144 (and $x50 $x137)))
 (let (($x168 (and $x144 $x166)))
 (let (($x204 (and $x168 $x206)))
 (let (($x173 (=> $x204 $x42)))
 (let (($x21 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x30 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x21 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x29 (= false true)))
 (let (($x169 (= $x29 true)))
 (let (($x9 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x204 (not $x9)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (not $x172)))
 (let (($x173 (and (and (and (= $x172 (= (_ bv0 32) (_ bv0 32))) (= $x9 (bvuge (_ bv0 32) (_ bv1 32)))) $x206) $x204)))
 (let (($x218 (= $x173 true)))
 (let ((?x160 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x160)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x149)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x143 $x156)))
 (let (($x14 (and $x151 $x164)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x139 $x14)))
 (let (($x145 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x145)))))
 (let (($x167 (and $x109 $x163)))
 (let (($x162 (= $x167 true)))
 (let (($x166 (= $x162 true)))
 (let (($x168 (= $x166 true)))
 (let ((?x13 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x114 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x13) (_ bv1 8)))))
 (let (($x65 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x73 (=> $x65 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (or $x31 $x73)))
 (let ((?x81 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x81 (_ bv4294967292 32)) ?x81)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x81 (bvsub ?x81 (_ bv4 32))) (bvult ?x81 (bvsub ?x81 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x108 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x56 (and true $x108)))
 (let (($x70 (and $x108 $x56)))
 (let (($x64 (and (and (and $x56 $x70) $x55) $x71)))
 (let (($x152 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x107 (and (and (and $x152 $x64) $x159) $x158)))
 (let (($x133 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x13)))
 (let (($x34 (or false $x133)))
 (let (($x72 (or $x31 $x34)))
 (let (($x115 (and $x72 $x107)))
 (let (($x135 (= $x115 true)))
 (let (($x137 (= $x135 true)))
 (let (($x144 (= $x137 true)))
 (let ((?x33 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x33)))
 (let (($x10 (= ?x43 input.dst.llvm-%val)))
 (let (($x46 (= $x10 true)))
 (let (($x50 (= $x46 true)))
 (let (($x146 (and $x50 $x144)))
 (let (($x183 (and $x146 $x168)))
 (let (($x198 (and $x183 $x218)))
 (let (($x66 (=> $x198 $x169)))
 (let (($x26 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x36 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x44 $x36) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x26 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x29 (= false true)))
 (let (($x169 (= $x29 true)))
 (let (($x9 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x204 (not $x9)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (not $x172)))
 (let (($x173 (and (and (and (= $x172 (= (_ bv0 32) (_ bv0 32))) (= $x9 (bvuge (_ bv0 32) (_ bv1 32)))) $x206) $x204)))
 (let (($x218 (= $x173 true)))
 (let ((?x160 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x160)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x149)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x143 $x156)))
 (let (($x14 (and $x151 $x164)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x139 $x14)))
 (let (($x145 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x145)))))
 (let (($x167 (and $x109 $x163)))
 (let (($x162 (= $x167 true)))
 (let (($x166 (= $x162 true)))
 (let (($x168 (= $x166 true)))
 (let ((?x13 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x114 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x13) (_ bv1 8)))))
 (let (($x65 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x73 (=> $x65 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (or $x31 $x73)))
 (let ((?x81 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x81 (_ bv4294967292 32)) ?x81)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x81 (bvsub ?x81 (_ bv4 32))) (bvult ?x81 (bvsub ?x81 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x108 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x56 (and true $x108)))
 (let (($x70 (and $x108 $x56)))
 (let (($x64 (and (and (and $x56 $x70) $x55) $x71)))
 (let (($x152 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x107 (and (and (and $x152 $x64) $x159) $x158)))
 (let (($x133 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x13)))
 (let (($x34 (or false $x133)))
 (let (($x72 (or $x31 $x34)))
 (let (($x115 (and $x72 $x107)))
 (let (($x135 (= $x115 true)))
 (let (($x137 (= $x135 true)))
 (let (($x144 (= $x137 true)))
 (let ((?x33 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x33)))
 (let (($x10 (= ?x43 input.dst.llvm-%val)))
 (let (($x46 (= $x10 true)))
 (let (($x50 (= $x46 true)))
 (let (($x146 (and $x50 $x144)))
 (let (($x183 (and $x146 $x168)))
 (let (($x198 (and $x183 $x218)))
 (let (($x66 (=> $x198 $x169)))
 (let (($x26 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x36 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x44 $x36) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x26 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x29 (= false true)))
 (let (($x169 (= $x29 true)))
 (let (($x206 (= false false)))
 (let (($x188 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x42 (=> $x188 $x206)))
 (let (($x211 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (= $x171 $x211)))
 (let (($x120 (= (_ bv0 32) (_ bv0 32))))
 (let (($x9 (= $x188 $x120)))
 (let (($x173 (and (and $x9 $x184) $x42)))
 (let (($x218 (= $x173 true)))
 (let ((?x164 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x164)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x149 $x151)))
 (let (($x163 (and $x160 $x14)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x111 $x163)))
 (let (($x141 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x162 (and $x143 $x167)))
 (let (($x166 (= $x162 true)))
 (let (($x168 (= $x166 true)))
 (let (($x183 (= $x168 true)))
 (let ((?x133 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x130 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x133) (_ bv1 8)))))
 (let (($x73 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x158 (=> $x73 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x157 (or $x31 $x158)))
 (let ((?x98 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x8 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x98 (bvsub ?x98 (_ bv4 32))) (bvult ?x98 (bvsub ?x98 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x56 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x70 (and true $x56)))
 (let (($x27 (and $x56 $x70)))
 (let (($x63 (and (and (and $x70 $x27) $x55) $x8)))
 (let (($x155 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x115 (and (and (and $x155 $x63) $x159) $x157)))
 (let (($x34 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x133)))
 (let (($x72 (or false $x34)))
 (let (($x59 (or $x31 $x72)))
 (let (($x135 (and $x59 $x115)))
 (let (($x137 (= $x135 true)))
 (let (($x144 (= $x137 true)))
 (let (($x146 (= $x144 true)))
 (let ((?x45 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x45)))
 (let (($x6 (= ?x49 input.dst.llvm-%val)))
 (let (($x85 (= $x6 true)))
 (let (($x50 (= $x85 true)))
 (let (($x153 (and $x50 $x146)))
 (let (($x122 (and $x153 $x183)))
 (let (($x198 (and $x122 $x218)))
 (let (($x66 (=> $x198 $x169)))
 (let (($x46 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x33 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x43 $x33) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x46 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x29 (= false true)))
 (let (($x169 (= $x29 true)))
 (let (($x206 (= false false)))
 (let (($x188 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x42 (=> $x188 $x206)))
 (let (($x211 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (= $x171 $x211)))
 (let (($x120 (= (_ bv0 32) (_ bv0 32))))
 (let (($x9 (= $x188 $x120)))
 (let (($x173 (and (and $x9 $x184) $x42)))
 (let (($x218 (= $x173 true)))
 (let ((?x164 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x164)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x149 $x151)))
 (let (($x163 (and $x160 $x14)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x111 $x163)))
 (let (($x141 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x162 (and $x143 $x167)))
 (let (($x166 (= $x162 true)))
 (let (($x168 (= $x166 true)))
 (let (($x183 (= $x168 true)))
 (let ((?x133 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x130 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x133) (_ bv1 8)))))
 (let (($x73 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x158 (=> $x73 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x157 (or $x31 $x158)))
 (let ((?x98 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x8 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x98 (bvsub ?x98 (_ bv4 32))) (bvult ?x98 (bvsub ?x98 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x56 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x70 (and true $x56)))
 (let (($x27 (and $x56 $x70)))
 (let (($x63 (and (and (and $x70 $x27) $x55) $x8)))
 (let (($x155 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x115 (and (and (and $x155 $x63) $x159) $x157)))
 (let (($x34 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x133)))
 (let (($x72 (or false $x34)))
 (let (($x59 (or $x31 $x72)))
 (let (($x135 (and $x59 $x115)))
 (let (($x137 (= $x135 true)))
 (let (($x144 (= $x137 true)))
 (let (($x146 (= $x144 true)))
 (let ((?x45 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x45)))
 (let (($x6 (= ?x49 input.dst.llvm-%val)))
 (let (($x85 (= $x6 true)))
 (let (($x50 (= $x85 true)))
 (let (($x153 (and $x50 $x146)))
 (let (($x122 (and $x153 $x183)))
 (let (($x198 (and $x122 $x218)))
 (let (($x66 (=> $x198 $x169)))
 (let (($x46 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x33 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x43 $x33) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x46 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x48 (= false true)))
 (let (($x199 (= $x48 true)))
 (let (($x42 (= false false)))
 (let (($x120 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x173 (=> $x120 $x42)))
 (let (($x211 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x206 (not $x211)))
 (let (($x29 (and (and (and (= $x120 (= (_ bv0 32) (_ bv0 32))) (= $x211 (bvuge (_ bv0 32) (_ bv1 32)))) $x206) $x173)))
 (let (($x169 (= $x29 true)))
 (let ((?x14 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x14)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x151)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x156 $x160)))
 (let (($x167 (and $x164 $x163)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x139 $x167)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x166 (and $x149 $x162)))
 (let (($x168 (= $x166 true)))
 (let (($x183 (= $x168 true)))
 (let (($x122 (= $x183 true)))
 (let ((?x34 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x161 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x34) (_ bv1 8)))))
 (let (($x158 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x157 (=> $x158 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x105 (or $x31 $x157)))
 (let ((?x148 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x148 (_ bv4294967292 32)) ?x148)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x148 (bvsub ?x148 (_ bv4 32))) (bvult ?x148 (bvsub ?x148 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x27 (and true $x70)))
 (let (($x71 (and $x70 $x27)))
 (let (($x121 (and (and (and $x27 $x71) $x55) $x67)))
 (let (($x92 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x135 (and (and (and $x92 $x121) $x159) $x105)))
 (let (($x72 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x34)))
 (let (($x59 (or false $x72)))
 (let (($x152 (or $x31 $x59)))
 (let (($x137 (and $x152 $x135)))
 (let (($x144 (= $x137 true)))
 (let (($x146 (= $x144 true)))
 (let (($x153 (= $x146 true)))
 (let ((?x15 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x15)))
 (let (($x32 (= ?x24 input.dst.llvm-%val)))
 (let (($x10 (= $x32 true)))
 (let (($x50 (= $x10 true)))
 (let (($x150 (and $x50 $x153)))
 (let (($x172 (and $x150 $x122)))
 (let (($x66 (and $x172 $x169)))
 (let (($x20 (=> $x66 $x199)))
 (let (($x85 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x45 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x45) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x85 (not $x20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x48 (= false true)))
 (let (($x199 (= $x48 true)))
 (let (($x42 (= false false)))
 (let (($x120 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x173 (=> $x120 $x42)))
 (let (($x211 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x206 (not $x211)))
 (let (($x29 (and (and (and (= $x120 (= (_ bv0 32) (_ bv0 32))) (= $x211 (bvuge (_ bv0 32) (_ bv1 32)))) $x206) $x173)))
 (let (($x169 (= $x29 true)))
 (let ((?x14 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x14)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x151)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x156 $x160)))
 (let (($x167 (and $x164 $x163)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x139 $x167)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x166 (and $x149 $x162)))
 (let (($x168 (= $x166 true)))
 (let (($x183 (= $x168 true)))
 (let (($x122 (= $x183 true)))
 (let ((?x34 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x154 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x127 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x142 (and (and (and (and true (= ?x161 (_ bv1 8))) (= ?x123 (_ bv1 8))) (= ?x95 (_ bv1 8))) (= ?x127 (_ bv1 8)))))
 (let (($x116 (and (and (and (and $x142 (= ?x82 (_ bv1 8))) (= ?x154 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x34) (_ bv1 8)))))
 (let (($x158 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x157 (=> $x158 (or false (or false $x116)))))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x105 (or $x31 $x157)))
 (let ((?x148 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x148 (_ bv4294967292 32)) ?x148)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x148 (bvsub ?x148 (_ bv4 32))) (bvult ?x148 (bvsub ?x148 (_ bv4 32))))))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x16 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x16) (bvult input.dst.llvm-%call.Lentry%2%d ?x16))))
 (let (($x27 (and true $x70)))
 (let (($x71 (and $x70 $x27)))
 (let (($x121 (and (and (and $x27 $x71) $x55) $x67)))
 (let (($x92 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x135 (and (and (and $x92 $x121) $x159) $x105)))
 (let (($x72 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x34)))
 (let (($x59 (or false $x72)))
 (let (($x152 (or $x31 $x59)))
 (let (($x137 (and $x152 $x135)))
 (let (($x144 (= $x137 true)))
 (let (($x146 (= $x144 true)))
 (let (($x153 (= $x146 true)))
 (let ((?x15 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x15)))
 (let (($x32 (= ?x24 input.dst.llvm-%val)))
 (let (($x10 (= $x32 true)))
 (let (($x50 (= $x10 true)))
 (let (($x150 (and $x50 $x153)))
 (let (($x172 (and $x150 $x122)))
 (let (($x66 (and $x172 $x169)))
 (let (($x20 (=> $x66 $x199)))
 (let (($x85 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x45 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x45) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x85 (not $x20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x218 (= true false)))
 (let (($x206 (= $x218 true)))
 (let (($x9 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x171 (= $x120 $x9)))
 (let (($x172 (= (_ bv0 32) (_ bv0 32))))
 (let (($x122 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x188 (= $x122 $x172)))
 (let (($x211 (and $x188 $x171)))
 (let (($x184 (= $x211 true)))
 (let ((?x151 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x151)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x136)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x149 $x139)))
 (let (($x164 (and $x156 $x160)))
 (let (($x153 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x153 $x164)))
 (let (($x141 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x163 (and $x134 $x14)))
 (let (($x167 (= $x163 true)))
 (let (($x162 (= $x167 true)))
 (let (($x166 (= $x162 true)))
 (let ((?x116 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x116)))
 (let (($x157 (= ?x117 input.dst.llvm-%val)))
 (let (($x105 (= $x157 true)))
 (let (($x135 (= $x105 true)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x123 (ite $x88 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x155 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x39 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x133 (store (store ?x39 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x92 (store (store ?x133 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x155 (_ bv2 8))))
 (let ((?x70 (store (store ?x92 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x8 (store ?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x58 (ite $x88 input.dst.llvm-mem.alloc ?x8)))
 (let (($x142 (and (and true (= (select ?x58 (bvadd ?x123 (_ bv0 32))) (_ bv2 8))) (= (select ?x58 (bvadd ?x123 (_ bv1 32))) (_ bv2 8)))))
 (let (($x104 (and (and $x142 (= (select ?x58 (bvadd ?x123 (_ bv2 32))) (_ bv2 8))) (= (select ?x58 (bvadd ?x123 (_ bv3 32))) (_ bv2 8)))))
 (let (($x100 (=> (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x126 (= $x100 true)))
 (let (($x97 (= $x126 true)))
 (let (($x57 (= $x97 true)))
 (let (($x54 (and (and true (= (select ?x58 (bvadd (ite $x88 (_ bv4 32) ?x155) (_ bv0 32))) (_ bv2 8))) (= (select ?x58 (bvadd (ite $x88 (_ bv4 32) ?x155) (_ bv1 32))) (_ bv2 8)))))
 (let (($x130 (and (and $x54 (= (select ?x58 (bvadd (ite $x88 (_ bv4 32) ?x155) (_ bv2 32))) (_ bv2 8))) (= (select ?x58 (bvadd (ite $x88 (_ bv4 32) ?x155) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x60 (ite $x88 (_ bv4 32) ?x155)))
 (let (($x77 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x55 (= $x77 true)))
 (let (($x63 (= $x55 true)))
 (let (($x89 (= $x63 true)))
 (let (($x93 (and $x89 $x57)))
 (let (($x137 (and $x93 $x135)))
 (let (($x168 (and $x137 $x166)))
 (let (($x204 (and $x168 $x184)))
 (let (($x198 (=> $x204 $x206)))
 (let (($x32 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x35 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x15 $x35) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x32 (not $x198)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x218 (= true false)))
 (let (($x206 (= $x218 true)))
 (let (($x9 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x171 (= $x120 $x9)))
 (let (($x172 (= (_ bv0 32) (_ bv0 32))))
 (let (($x122 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x188 (= $x122 $x172)))
 (let (($x211 (and $x188 $x171)))
 (let (($x184 (= $x211 true)))
 (let ((?x151 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x151)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x136)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x149 $x139)))
 (let (($x164 (and $x156 $x160)))
 (let (($x153 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x153 $x164)))
 (let (($x141 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x163 (and $x134 $x14)))
 (let (($x167 (= $x163 true)))
 (let (($x162 (= $x167 true)))
 (let (($x166 (= $x162 true)))
 (let ((?x116 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x116)))
 (let (($x157 (= ?x117 input.dst.llvm-%val)))
 (let (($x105 (= $x157 true)))
 (let (($x135 (= $x105 true)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x123 (ite $x88 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x155 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x39 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x133 (store (store ?x39 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x92 (store (store ?x133 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x155 (_ bv2 8))))
 (let ((?x70 (store (store ?x92 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x8 (store ?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x58 (ite $x88 input.dst.llvm-mem.alloc ?x8)))
 (let (($x142 (and (and true (= (select ?x58 (bvadd ?x123 (_ bv0 32))) (_ bv2 8))) (= (select ?x58 (bvadd ?x123 (_ bv1 32))) (_ bv2 8)))))
 (let (($x104 (and (and $x142 (= (select ?x58 (bvadd ?x123 (_ bv2 32))) (_ bv2 8))) (= (select ?x58 (bvadd ?x123 (_ bv3 32))) (_ bv2 8)))))
 (let (($x100 (=> (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x126 (= $x100 true)))
 (let (($x97 (= $x126 true)))
 (let (($x57 (= $x97 true)))
 (let (($x54 (and (and true (= (select ?x58 (bvadd (ite $x88 (_ bv4 32) ?x155) (_ bv0 32))) (_ bv2 8))) (= (select ?x58 (bvadd (ite $x88 (_ bv4 32) ?x155) (_ bv1 32))) (_ bv2 8)))))
 (let (($x130 (and (and $x54 (= (select ?x58 (bvadd (ite $x88 (_ bv4 32) ?x155) (_ bv2 32))) (_ bv2 8))) (= (select ?x58 (bvadd (ite $x88 (_ bv4 32) ?x155) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x60 (ite $x88 (_ bv4 32) ?x155)))
 (let (($x77 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x55 (= $x77 true)))
 (let (($x63 (= $x55 true)))
 (let (($x89 (= $x63 true)))
 (let (($x93 (and $x89 $x57)))
 (let (($x137 (and $x93 $x135)))
 (let (($x168 (and $x137 $x166)))
 (let (($x204 (and $x168 $x184)))
 (let (($x198 (=> $x204 $x206)))
 (let (($x32 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x35 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x15 $x35) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x32 (not $x198)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x000003f9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!34))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fe) #x02
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))))
  (define-fun k!37 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x80000002) #x03
      #x00)))))))))
  (define-fun k!34 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000002) #x03
      #x00))))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00)))))))))))
  (define-fun k!36 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))
  (define-fun k!33 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fe) #x02
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003ff) #x02
    (ite (= x!0 #x00000400) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))))))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fe) #x02
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003ff) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00)))))))))))))
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))
  (define-fun k!35 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000002) #x03
      #x00)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!44))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x03efe002)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x45cd742c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x45cd742f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x45cd742c)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))))
  (define-fun k!49 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))))))
  (define-fun k!50 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe007) #x02
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))))))
  (define-fun k!43 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe009) #x02
    (ite (= x!0 #x03efe008) #x02
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe007) #x02
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))))))))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe008) #x02
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x03efe007) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))))))))
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742c) #x03
    (ite (= x!0 #x45cd742d) #x03
      #x00))))))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x36 (= true false)))
 (let (($x29 (= $x36 true)))
 (let (($x9 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x204 (not $x9)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (not $x172)))
 (let (($x198 (and (and (and (= $x172 (= (_ bv0 32) (_ bv0 32))) (= $x9 (bvuge (_ bv0 32) (_ bv1 32)))) $x184) $x204)))
 (let (($x42 (= $x198 true)))
 (let ((?x160 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x160)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x139)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x136 $x156)))
 (let (($x14 (and $x151 $x164)))
 (let (($x145 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x145 $x14)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x167 (and $x149 $x163)))
 (let (($x162 (= $x167 true)))
 (let (($x166 (= $x162 true)))
 (let (($x168 (= $x166 true)))
 (let ((?x117 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x117)))
 (let (($x105 (= ?x118 input.dst.llvm-%val)))
 (let (($x135 (= $x105 true)))
 (let (($x137 (= $x135 true)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x119 (ite $x26 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x133 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x30 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x39 (store (store ?x30 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x34 (store (store ?x39 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x133 (_ bv2 8))))
 (let ((?x16 (store (store ?x34 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x70 (store ?x16 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x27 (ite $x26 input.dst.llvm-mem.alloc ?x70)))
 (let (($x82 (and (and true (= (select ?x27 (bvadd ?x119 (_ bv0 32))) (_ bv2 8))) (= (select ?x27 (bvadd ?x119 (_ bv1 32))) (_ bv2 8)))))
 (let (($x103 (and (and $x82 (= (select ?x27 (bvadd ?x119 (_ bv2 32))) (_ bv2 8))) (= (select ?x27 (bvadd ?x119 (_ bv3 32))) (_ bv2 8)))))
 (let (($x57 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x96 (= $x57 true)))
 (let (($x138 (= $x96 true)))
 (let (($x93 (= $x138 true)))
 (let (($x115 (and (and true (= (select ?x27 (bvadd (ite $x26 (_ bv4 32) ?x133) (_ bv0 32))) (_ bv2 8))) (= (select ?x27 (bvadd (ite $x26 (_ bv4 32) ?x133) (_ bv1 32))) (_ bv2 8)))))
 (let (($x131 (and (and $x115 (= (select ?x27 (bvadd (ite $x26 (_ bv4 32) ?x133) (_ bv2 32))) (_ bv2 8))) (= (select ?x27 (bvadd (ite $x26 (_ bv4 32) ?x133) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x71 (ite $x26 (_ bv4 32) ?x133)))
 (let (($x89 (=> (bvule ?x71 (bvsub (bvadd ?x71 (_ bv4 32)) (_ bv1 32))) (or false (or false $x131)))))
 (let (($x8 (= $x89 true)))
 (let (($x58 (= $x8 true)))
 (let (($x123 (= $x58 true)))
 (let (($x112 (and $x123 $x93)))
 (let (($x150 (and $x112 $x137)))
 (let (($x183 (and $x150 $x168)))
 (let (($x173 (and $x183 $x42)))
 (let (($x169 (=> $x173 $x29)))
 (let (($x64 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x88 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x152 $x88) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x64 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x36 (= true false)))
 (let (($x29 (= $x36 true)))
 (let (($x9 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x204 (not $x9)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (not $x172)))
 (let (($x198 (and (and (and (= $x172 (= (_ bv0 32) (_ bv0 32))) (= $x9 (bvuge (_ bv0 32) (_ bv1 32)))) $x184) $x204)))
 (let (($x42 (= $x198 true)))
 (let ((?x160 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x160)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x139)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x136 $x156)))
 (let (($x14 (and $x151 $x164)))
 (let (($x145 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x145 $x14)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x167 (and $x149 $x163)))
 (let (($x162 (= $x167 true)))
 (let (($x166 (= $x162 true)))
 (let (($x168 (= $x166 true)))
 (let ((?x117 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x117)))
 (let (($x105 (= ?x118 input.dst.llvm-%val)))
 (let (($x135 (= $x105 true)))
 (let (($x137 (= $x135 true)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x119 (ite $x26 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x133 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x30 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x39 (store (store ?x30 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x34 (store (store ?x39 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x133 (_ bv2 8))))
 (let ((?x16 (store (store ?x34 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x70 (store ?x16 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x27 (ite $x26 input.dst.llvm-mem.alloc ?x70)))
 (let (($x82 (and (and true (= (select ?x27 (bvadd ?x119 (_ bv0 32))) (_ bv2 8))) (= (select ?x27 (bvadd ?x119 (_ bv1 32))) (_ bv2 8)))))
 (let (($x103 (and (and $x82 (= (select ?x27 (bvadd ?x119 (_ bv2 32))) (_ bv2 8))) (= (select ?x27 (bvadd ?x119 (_ bv3 32))) (_ bv2 8)))))
 (let (($x57 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x96 (= $x57 true)))
 (let (($x138 (= $x96 true)))
 (let (($x93 (= $x138 true)))
 (let (($x115 (and (and true (= (select ?x27 (bvadd (ite $x26 (_ bv4 32) ?x133) (_ bv0 32))) (_ bv2 8))) (= (select ?x27 (bvadd (ite $x26 (_ bv4 32) ?x133) (_ bv1 32))) (_ bv2 8)))))
 (let (($x131 (and (and $x115 (= (select ?x27 (bvadd (ite $x26 (_ bv4 32) ?x133) (_ bv2 32))) (_ bv2 8))) (= (select ?x27 (bvadd (ite $x26 (_ bv4 32) ?x133) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x71 (ite $x26 (_ bv4 32) ?x133)))
 (let (($x89 (=> (bvule ?x71 (bvsub (bvadd ?x71 (_ bv4 32)) (_ bv1 32))) (or false (or false $x131)))))
 (let (($x8 (= $x89 true)))
 (let (($x58 (= $x8 true)))
 (let (($x123 (= $x58 true)))
 (let (($x112 (and $x123 $x93)))
 (let (($x150 (and $x112 $x137)))
 (let (($x183 (and $x150 $x168)))
 (let (($x173 (and $x183 $x42)))
 (let (($x169 (=> $x173 $x29)))
 (let (($x64 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x88 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x152 $x88) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x64 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x36 (= true false)))
 (let (($x29 (= $x36 true)))
 (let (($x184 (= false false)))
 (let (($x188 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x188 $x184)))
 (let (($x211 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x218 (= $x171 $x211)))
 (let (($x120 (= (_ bv0 32) (_ bv0 32))))
 (let (($x9 (= $x188 $x120)))
 (let (($x198 (and (and $x9 $x218) $x206)))
 (let (($x42 (= $x198 true)))
 (let ((?x164 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x164)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x139 $x151)))
 (let (($x163 (and $x160 $x14)))
 (let (($x110 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x110 $x163)))
 (let (($x146 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x146)))))
 (let (($x162 (and $x136 $x167)))
 (let (($x166 (= $x162 true)))
 (let (($x168 (= $x166 true)))
 (let (($x183 (= $x168 true)))
 (let ((?x118 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x118)))
 (let (($x135 (= ?x157 input.dst.llvm-%val)))
 (let (($x137 (= $x135 true)))
 (let (($x150 (= $x137 true)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x95 (ite $x49 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x39 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x60 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x30 (store (store ?x60 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x50 (store (store ?x30 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x39 (_ bv2 8))))
 (let ((?x92 (store (store ?x50 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x16 (store ?x92 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x108 (ite $x49 input.dst.llvm-mem.alloc ?x16)))
 (let (($x99 (and (and true (= (select ?x108 (bvadd ?x95 (_ bv0 32))) (_ bv2 8))) (= (select ?x108 (bvadd ?x95 (_ bv1 32))) (_ bv2 8)))))
 (let (($x126 (and (and $x99 (= (select ?x108 (bvadd ?x95 (_ bv2 32))) (_ bv2 8))) (= (select ?x108 (bvadd ?x95 (_ bv3 32))) (_ bv2 8)))))
 (let (($x93 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false $x126)))))
 (let (($x84 (= $x93 true)))
 (let (($x97 (= $x84 true)))
 (let (($x112 (= $x97 true)))
 (let (($x129 (and (and true (= (select ?x108 (bvadd (ite $x49 (_ bv4 32) ?x39) (_ bv0 32))) (_ bv2 8))) (= (select ?x108 (bvadd (ite $x49 (_ bv4 32) ?x39) (_ bv1 32))) (_ bv2 8)))))
 (let (($x55 (and (and $x129 (= (select ?x108 (bvadd (ite $x49 (_ bv4 32) ?x39) (_ bv2 32))) (_ bv2 8))) (= (select ?x108 (bvadd (ite $x49 (_ bv4 32) ?x39) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x56 (ite $x49 (_ bv4 32) ?x39)))
 (let (($x123 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false $x55)))))
 (let (($x70 (= $x123 true)))
 (let (($x27 (= $x70 true)))
 (let (($x119 (= $x27 true)))
 (let (($x113 (and $x119 $x112)))
 (let (($x111 (and $x113 $x150)))
 (let (($x122 (and $x111 $x183)))
 (let (($x173 (and $x122 $x42)))
 (let (($x169 (=> $x173 $x29)))
 (let (($x148 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x26 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x31 $x26) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x148 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x36 (= true false)))
 (let (($x29 (= $x36 true)))
 (let (($x184 (= false false)))
 (let (($x188 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x188 $x184)))
 (let (($x211 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x218 (= $x171 $x211)))
 (let (($x120 (= (_ bv0 32) (_ bv0 32))))
 (let (($x9 (= $x188 $x120)))
 (let (($x198 (and (and $x9 $x218) $x206)))
 (let (($x42 (= $x198 true)))
 (let ((?x164 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x164)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x139 $x151)))
 (let (($x163 (and $x160 $x14)))
 (let (($x110 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x110 $x163)))
 (let (($x146 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x146)))))
 (let (($x162 (and $x136 $x167)))
 (let (($x166 (= $x162 true)))
 (let (($x168 (= $x166 true)))
 (let (($x183 (= $x168 true)))
 (let ((?x118 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x118)))
 (let (($x135 (= ?x157 input.dst.llvm-%val)))
 (let (($x137 (= $x135 true)))
 (let (($x150 (= $x137 true)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x95 (ite $x49 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x39 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x60 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x30 (store (store ?x60 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x50 (store (store ?x30 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x39 (_ bv2 8))))
 (let ((?x92 (store (store ?x50 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x16 (store ?x92 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x108 (ite $x49 input.dst.llvm-mem.alloc ?x16)))
 (let (($x99 (and (and true (= (select ?x108 (bvadd ?x95 (_ bv0 32))) (_ bv2 8))) (= (select ?x108 (bvadd ?x95 (_ bv1 32))) (_ bv2 8)))))
 (let (($x126 (and (and $x99 (= (select ?x108 (bvadd ?x95 (_ bv2 32))) (_ bv2 8))) (= (select ?x108 (bvadd ?x95 (_ bv3 32))) (_ bv2 8)))))
 (let (($x93 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false $x126)))))
 (let (($x84 (= $x93 true)))
 (let (($x97 (= $x84 true)))
 (let (($x112 (= $x97 true)))
 (let (($x129 (and (and true (= (select ?x108 (bvadd (ite $x49 (_ bv4 32) ?x39) (_ bv0 32))) (_ bv2 8))) (= (select ?x108 (bvadd (ite $x49 (_ bv4 32) ?x39) (_ bv1 32))) (_ bv2 8)))))
 (let (($x55 (and (and $x129 (= (select ?x108 (bvadd (ite $x49 (_ bv4 32) ?x39) (_ bv2 32))) (_ bv2 8))) (= (select ?x108 (bvadd (ite $x49 (_ bv4 32) ?x39) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x56 (ite $x49 (_ bv4 32) ?x39)))
 (let (($x123 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false $x55)))))
 (let (($x70 (= $x123 true)))
 (let (($x27 (= $x70 true)))
 (let (($x119 (= $x27 true)))
 (let (($x113 (and $x119 $x112)))
 (let (($x111 (and $x113 $x150)))
 (let (($x122 (and $x111 $x183)))
 (let (($x173 (and $x122 $x42)))
 (let (($x169 (=> $x173 $x29)))
 (let (($x148 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x26 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x31 $x26) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x148 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x000003f9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!34))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fe) #x02
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))))
  (define-fun k!37 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x80000002) #x03
      #x00)))))))))
  (define-fun k!34 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000002) #x03
      #x00))))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00)))))))))))
  (define-fun k!36 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))
  (define-fun k!33 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fe) #x02
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003ff) #x02
    (ite (= x!0 #x00000400) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))))))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fe) #x02
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003ff) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00)))))))))))))
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))
  (define-fun k!35 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000002) #x03
      #x00)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!44))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x03efe002)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x45cd742c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x45cd742f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x45cd742c)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))))
  (define-fun k!49 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))))))
  (define-fun k!50 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe007) #x02
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))))))
  (define-fun k!43 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe009) #x02
    (ite (= x!0 #x03efe008) #x02
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe007) #x02
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))))))))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe008) #x02
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x03efe007) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))))))))
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742c) #x03
    (ite (= x!0 #x45cd742d) #x03
      #x00))))))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x66 (= true false)))
 (let (($x48 (= $x66 true)))
 (let (($x206 (= false false)))
 (let (($x120 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x198 (=> $x120 $x206)))
 (let (($x211 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (not $x211)))
 (let (($x36 (and (and (and (= $x120 (= (_ bv0 32) (_ bv0 32))) (= $x211 (bvuge (_ bv0 32) (_ bv1 32)))) $x184) $x198)))
 (let (($x29 (= $x36 true)))
 (let ((?x14 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x14)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x151)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x156 $x160)))
 (let (($x167 (and $x164 $x163)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x109 $x167)))
 (let (($x143 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x143)))))
 (let (($x166 (and $x139 $x162)))
 (let (($x168 (= $x166 true)))
 (let (($x183 (= $x168 true)))
 (let (($x122 (= $x183 true)))
 (let ((?x157 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x157)))
 (let (($x137 (= ?x105 input.dst.llvm-%val)))
 (let (($x150 (= $x137 true)))
 (let (($x111 (= $x150 true)))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x147 (ite $x6 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x30 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x71 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x60 (store (store ?x71 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x98 (store (store ?x60 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x30 (_ bv2 8))))
 (let ((?x34 (store (store ?x98 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x92 (store ?x34 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x106 (ite $x6 input.dst.llvm-mem.alloc ?x92)))
 (let (($x101 (and (and true (= (select ?x106 (bvadd ?x147 (_ bv0 32))) (_ bv2 8))) (= (select ?x106 (bvadd ?x147 (_ bv1 32))) (_ bv2 8)))))
 (let (($x96 (and (and $x101 (= (select ?x106 (bvadd ?x147 (_ bv2 32))) (_ bv2 8))) (= (select ?x106 (bvadd ?x147 (_ bv3 32))) (_ bv2 8)))))
 (let (($x112 (=> (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32))) (or false (or false $x96)))))
 (let (($x86 (= $x112 true)))
 (let (($x138 (= $x86 true)))
 (let (($x113 (= $x138 true)))
 (let (($x114 (and (and true (= (select ?x106 (bvadd (ite $x6 (_ bv4 32) ?x30) (_ bv0 32))) (_ bv2 8))) (= (select ?x106 (bvadd (ite $x6 (_ bv4 32) ?x30) (_ bv1 32))) (_ bv2 8)))))
 (let (($x8 (and (and $x114 (= (select ?x106 (bvadd (ite $x6 (_ bv4 32) ?x30) (_ bv2 32))) (_ bv2 8))) (= (select ?x106 (bvadd (ite $x6 (_ bv4 32) ?x30) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x28 (ite $x6 (_ bv4 32) ?x30)))
 (let (($x119 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x16 (= $x119 true)))
 (let (($x108 (= $x16 true)))
 (let (($x95 (= $x108 true)))
 (let (($x116 (and $x95 $x113)))
 (let (($x141 (and $x116 $x111)))
 (let (($x172 (and $x141 $x122)))
 (let (($x169 (and $x172 $x29)))
 (let (($x13 (=> $x169 $x48)))
 (let (($x75 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x21 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x75 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x66 (= true false)))
 (let (($x48 (= $x66 true)))
 (let (($x206 (= false false)))
 (let (($x120 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x198 (=> $x120 $x206)))
 (let (($x211 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (not $x211)))
 (let (($x36 (and (and (and (= $x120 (= (_ bv0 32) (_ bv0 32))) (= $x211 (bvuge (_ bv0 32) (_ bv1 32)))) $x184) $x198)))
 (let (($x29 (= $x36 true)))
 (let ((?x14 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x14)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x151)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x156 $x160)))
 (let (($x167 (and $x164 $x163)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x109 $x167)))
 (let (($x143 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x143)))))
 (let (($x166 (and $x139 $x162)))
 (let (($x168 (= $x166 true)))
 (let (($x183 (= $x168 true)))
 (let (($x122 (= $x183 true)))
 (let ((?x157 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x157)))
 (let (($x137 (= ?x105 input.dst.llvm-%val)))
 (let (($x150 (= $x137 true)))
 (let (($x111 (= $x150 true)))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x147 (ite $x6 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x30 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x71 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x60 (store (store ?x71 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x98 (store (store ?x60 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x30 (_ bv2 8))))
 (let ((?x34 (store (store ?x98 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x92 (store ?x34 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x106 (ite $x6 input.dst.llvm-mem.alloc ?x92)))
 (let (($x101 (and (and true (= (select ?x106 (bvadd ?x147 (_ bv0 32))) (_ bv2 8))) (= (select ?x106 (bvadd ?x147 (_ bv1 32))) (_ bv2 8)))))
 (let (($x96 (and (and $x101 (= (select ?x106 (bvadd ?x147 (_ bv2 32))) (_ bv2 8))) (= (select ?x106 (bvadd ?x147 (_ bv3 32))) (_ bv2 8)))))
 (let (($x112 (=> (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32))) (or false (or false $x96)))))
 (let (($x86 (= $x112 true)))
 (let (($x138 (= $x86 true)))
 (let (($x113 (= $x138 true)))
 (let (($x114 (and (and true (= (select ?x106 (bvadd (ite $x6 (_ bv4 32) ?x30) (_ bv0 32))) (_ bv2 8))) (= (select ?x106 (bvadd (ite $x6 (_ bv4 32) ?x30) (_ bv1 32))) (_ bv2 8)))))
 (let (($x8 (and (and $x114 (= (select ?x106 (bvadd (ite $x6 (_ bv4 32) ?x30) (_ bv2 32))) (_ bv2 8))) (= (select ?x106 (bvadd (ite $x6 (_ bv4 32) ?x30) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x28 (ite $x6 (_ bv4 32) ?x30)))
 (let (($x119 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x16 (= $x119 true)))
 (let (($x108 (= $x16 true)))
 (let (($x95 (= $x108 true)))
 (let (($x116 (and $x95 $x113)))
 (let (($x141 (and $x116 $x111)))
 (let (($x172 (and $x141 $x122)))
 (let (($x169 (and $x172 $x29)))
 (let (($x13 (=> $x169 $x48)))
 (let (($x75 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x21 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x75 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x000003f9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!34))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fe) #x02
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))))
  (define-fun k!37 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x80000002) #x03
      #x00)))))))))
  (define-fun k!34 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000002) #x03
      #x00))))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00)))))))))))
  (define-fun k!36 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))
  (define-fun k!33 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fe) #x02
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003ff) #x02
    (ite (= x!0 #x00000400) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))))))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003fe) #x02
    (ite (= x!0 #x000003fd) #x02
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003ff) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00)))))))))))))
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x000003fb) #x02
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x000003fa) #x02
    (ite (= x!0 #x000003fc) #x02
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))
  (define-fun k!35 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x000003f9) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000002) #x03
      #x00)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!44))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x03efe002)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x45cd742c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x45cd742f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x45cd742c)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))))
  (define-fun k!49 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))))))
  (define-fun k!50 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe007) #x02
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))))))
  (define-fun k!43 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe009) #x02
    (ite (= x!0 #x03efe008) #x02
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe007) #x02
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))))))))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x03efe008) #x02
    (ite (= x!0 #x03efe006) #x02
    (ite (= x!0 #x03efe005) #x02
    (ite (= x!0 #x03efe007) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x03efe004) #x02
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))))))))
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742c) #x03
    (ite (= x!0 #x45cd742d) #x03
      #x00))))))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00)))))))
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x03efe002) #x02
    (ite (= x!0 #x45cd742f) #x03
    (ite (= x!0 #x45cd742e) #x03
    (ite (= x!0 #x03efe003) #x02
    (ite (= x!0 #x45cd742d) #x03
    (ite (= x!0 #x45cd742c) #x03
      #x00))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let ((?x37 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x79 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x63 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x43 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x165 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x28 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x26 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x133 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x124 (and (and true (= (select input.dst.llvm-mem.alloc ?x133) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x26) (_ bv1 8)))))
 (let (($x12 (and (and $x124 (= (select input.dst.llvm-mem.alloc ?x28) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x165) (_ bv1 8)))))
 (let (($x17 (and (and $x12 (= (select input.dst.llvm-mem.alloc ?x43) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x63) (_ bv1 8)))))
 (let (($x214 (and (and $x17 (= (select input.dst.llvm-mem.alloc ?x79) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x37) (_ bv1 8)))))
 (let (($x209 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x192 (=> $x209 (or false (or false $x214)))))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x170 (or $x32 $x192)))
 (let (($x177 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x37)))
 (let (($x51 (or false $x177)))
 (let (($x7 (or $x32 $x51)))
 (let (($x197 (and $x7 $x170)))
 (let ((?x59 (ite $x32 (_ bv4 32) ?x43)))
 (let (($x87 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x149 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x219 (ite $x149 (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let ((?x72 (ite $x32 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x125 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x135 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x178 (ite $x135 (bvuge ?x72 (bvsub ?x72 (_ bv0 32))) (bvult ?x72 (bvsub ?x72 (_ bv0 32))))))
 (let (($x62 (and true $x178)))
 (let (($x217 (and $x178 $x62)))
 (let (($x205 (and (and (and $x62 $x217) $x125) $x219)))
 (let (($x69 (and $x205 $x87)))
 (let (($x223 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x242 (and (and $x223 $x69) $x197)))
 (let (($x243 (=> $x242 true)))
 (let (($x244 (= $x243 true)))
 (let (($x245 (= $x244 true)))
 (let (($x237 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x236 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x18 (= $x236 $x237)))
 (let (($x234 (= (_ bv0 32) (_ bv0 32))))
 (let (($x233 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x235 (= $x233 $x234)))
 (let (($x78 (and $x235 $x18)))
 (let (($x238 (= $x78 true)))
 (let (($x224 (= $x197 true)))
 (let (($x229 (= $x224 true)))
 (let (($x230 (= $x229 true)))
 (let (($x195 (= $x223 true)))
 (let (($x228 (= $x195 true)))
 (let (($x38 (= $x228 true)))
 (let (($x61 (= $x170 true)))
 (let (($x222 (= $x61 true)))
 (let (($x193 (= $x222 true)))
 (let (($x182 (= $x7 true)))
 (let (($x220 (= $x182 true)))
 (let (($x11 (= $x220 true)))
 (let (($x215 (= $x69 true)))
 (let (($x213 (= $x215 true)))
 (let (($x179 (= $x213 true)))
 (let ((?x198 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x198)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x184)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x42 $x173)))
 (let (($x29 (and $x206 $x36)))
 (let (($x168 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x168 $x29)))
 (let (($x9 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x204 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x9)))))
 (let (($x66 (and $x204 $x169)))
 (let (($x48 (= $x66 true)))
 (let (($x13 (= $x48 true)))
 (let (($x46 (= $x13 true)))
 (let ((?x146 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x151 (= (bvand ?x146 (_ bv4294967292 32)) ?x146)))
 (let (($x153 (ite $x149 (bvuge ?x146 (bvsub ?x146 (_ bv4 32))) (bvult ?x146 (bvsub ?x146 (_ bv4 32))))))
 (let (($x134 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x111 (ite $x135 (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x141 (and true $x111)))
 (let (($x132 (and $x111 $x141)))
 (let (($x109 (and (and (and $x141 $x132) $x134) $x153)))
 (let (($x160 (and $x109 $x151)))
 (let (($x164 (= $x160 true)))
 (let (($x14 (= $x164 true)))
 (let (($x163 (= $x14 true)))
 (let ((?x86 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x86)))
 (let (($x116 (= ?x138 input.dst.llvm-%val)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x167 (and $x118 $x163)))
 (let (($x199 (and $x167 $x46)))
 (let (($x187 (and $x199 $x179)))
 (let (($x212 (and $x187 $x11)))
 (let (($x194 (and $x212 $x193)))
 (let (($x41 (and $x194 $x38)))
 (let (($x196 (and $x41 $x38)))
 (let (($x231 (and $x196 $x230)))
 (let (($x239 (and $x231 $x238)))
 (let ((?x67 (store (store (store input.dst.llvm-mem.alloc ?x133 (_ bv2 8)) ?x26 (_ bv2 8)) ?x28 (_ bv2 8))))
 (let ((?x44 (store (store (store (store ?x67 ?x165 (_ bv2 8)) ?x43 (_ bv2 8)) ?x63 (_ bv2 8)) ?x79 (_ bv2 8))))
 (let ((?x5 (store ?x44 ?x37 (_ bv2 8))))
 (let ((?x34 (ite $x32 input.dst.llvm-mem.alloc ?x5)))
 (let (($x99 (and (and true (= (select ?x34 (bvadd ?x59 (_ bv0 32))) (_ bv2 8))) (= (select ?x34 (bvadd ?x59 (_ bv1 32))) (_ bv2 8)))))
 (let (($x126 (and (and $x99 (= (select ?x34 (bvadd ?x59 (_ bv2 32))) (_ bv2 8))) (= (select ?x34 (bvadd ?x59 (_ bv3 32))) (_ bv2 8)))))
 (let (($x84 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false $x126)))))
 (let (($x158 (and (and true (= (select ?x34 (bvadd ?x72 (_ bv0 32))) (_ bv2 8))) (= (select ?x34 (bvadd ?x72 (_ bv1 32))) (_ bv2 8)))))
 (let (($x123 (and (and $x158 (= (select ?x34 (bvadd ?x72 (_ bv2 32))) (_ bv2 8))) (= (select ?x34 (bvadd ?x72 (_ bv3 32))) (_ bv2 8)))))
 (let (($x108 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false $x123)))))
 (let (($x92 (and $x108 $x84)))
 (let (($x240 (and $x92 $x239)))
 (let (($x246 (=> $x240 $x245)))
 (let (($x155 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x35 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x21 $x35) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x155 (not $x246)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let ((?x37 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x79 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x63 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x43 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x165 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x28 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x26 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x133 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x124 (and (and true (= (select input.dst.llvm-mem.alloc ?x133) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x26) (_ bv1 8)))))
 (let (($x12 (and (and $x124 (= (select input.dst.llvm-mem.alloc ?x28) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x165) (_ bv1 8)))))
 (let (($x17 (and (and $x12 (= (select input.dst.llvm-mem.alloc ?x43) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x63) (_ bv1 8)))))
 (let (($x214 (and (and $x17 (= (select input.dst.llvm-mem.alloc ?x79) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x37) (_ bv1 8)))))
 (let (($x209 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x192 (=> $x209 (or false (or false $x214)))))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x170 (or $x32 $x192)))
 (let (($x177 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x37)))
 (let (($x51 (or false $x177)))
 (let (($x7 (or $x32 $x51)))
 (let (($x197 (and $x7 $x170)))
 (let ((?x59 (ite $x32 (_ bv4 32) ?x43)))
 (let (($x87 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x149 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x219 (ite $x149 (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let ((?x72 (ite $x32 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x125 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x135 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x178 (ite $x135 (bvuge ?x72 (bvsub ?x72 (_ bv0 32))) (bvult ?x72 (bvsub ?x72 (_ bv0 32))))))
 (let (($x62 (and true $x178)))
 (let (($x217 (and $x178 $x62)))
 (let (($x205 (and (and (and $x62 $x217) $x125) $x219)))
 (let (($x69 (and $x205 $x87)))
 (let (($x223 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x242 (and (and $x223 $x69) $x197)))
 (let (($x243 (=> $x242 true)))
 (let (($x244 (= $x243 true)))
 (let (($x245 (= $x244 true)))
 (let (($x237 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x236 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x18 (= $x236 $x237)))
 (let (($x234 (= (_ bv0 32) (_ bv0 32))))
 (let (($x233 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x235 (= $x233 $x234)))
 (let (($x78 (and $x235 $x18)))
 (let (($x238 (= $x78 true)))
 (let (($x224 (= $x197 true)))
 (let (($x229 (= $x224 true)))
 (let (($x230 (= $x229 true)))
 (let (($x195 (= $x223 true)))
 (let (($x228 (= $x195 true)))
 (let (($x38 (= $x228 true)))
 (let (($x61 (= $x170 true)))
 (let (($x222 (= $x61 true)))
 (let (($x193 (= $x222 true)))
 (let (($x182 (= $x7 true)))
 (let (($x220 (= $x182 true)))
 (let (($x11 (= $x220 true)))
 (let (($x215 (= $x69 true)))
 (let (($x213 (= $x215 true)))
 (let (($x179 (= $x213 true)))
 (let ((?x198 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x198)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x184)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x42 $x173)))
 (let (($x29 (and $x206 $x36)))
 (let (($x168 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x168 $x29)))
 (let (($x9 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x204 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x9)))))
 (let (($x66 (and $x204 $x169)))
 (let (($x48 (= $x66 true)))
 (let (($x13 (= $x48 true)))
 (let (($x46 (= $x13 true)))
 (let ((?x146 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x151 (= (bvand ?x146 (_ bv4294967292 32)) ?x146)))
 (let (($x153 (ite $x149 (bvuge ?x146 (bvsub ?x146 (_ bv4 32))) (bvult ?x146 (bvsub ?x146 (_ bv4 32))))))
 (let (($x134 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x111 (ite $x135 (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x141 (and true $x111)))
 (let (($x132 (and $x111 $x141)))
 (let (($x109 (and (and (and $x141 $x132) $x134) $x153)))
 (let (($x160 (and $x109 $x151)))
 (let (($x164 (= $x160 true)))
 (let (($x14 (= $x164 true)))
 (let (($x163 (= $x14 true)))
 (let ((?x86 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x86)))
 (let (($x116 (= ?x138 input.dst.llvm-%val)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x167 (and $x118 $x163)))
 (let (($x199 (and $x167 $x46)))
 (let (($x187 (and $x199 $x179)))
 (let (($x212 (and $x187 $x11)))
 (let (($x194 (and $x212 $x193)))
 (let (($x41 (and $x194 $x38)))
 (let (($x196 (and $x41 $x38)))
 (let (($x231 (and $x196 $x230)))
 (let (($x239 (and $x231 $x238)))
 (let ((?x67 (store (store (store input.dst.llvm-mem.alloc ?x133 (_ bv2 8)) ?x26 (_ bv2 8)) ?x28 (_ bv2 8))))
 (let ((?x44 (store (store (store (store ?x67 ?x165 (_ bv2 8)) ?x43 (_ bv2 8)) ?x63 (_ bv2 8)) ?x79 (_ bv2 8))))
 (let ((?x5 (store ?x44 ?x37 (_ bv2 8))))
 (let ((?x34 (ite $x32 input.dst.llvm-mem.alloc ?x5)))
 (let (($x99 (and (and true (= (select ?x34 (bvadd ?x59 (_ bv0 32))) (_ bv2 8))) (= (select ?x34 (bvadd ?x59 (_ bv1 32))) (_ bv2 8)))))
 (let (($x126 (and (and $x99 (= (select ?x34 (bvadd ?x59 (_ bv2 32))) (_ bv2 8))) (= (select ?x34 (bvadd ?x59 (_ bv3 32))) (_ bv2 8)))))
 (let (($x84 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false $x126)))))
 (let (($x158 (and (and true (= (select ?x34 (bvadd ?x72 (_ bv0 32))) (_ bv2 8))) (= (select ?x34 (bvadd ?x72 (_ bv1 32))) (_ bv2 8)))))
 (let (($x123 (and (and $x158 (= (select ?x34 (bvadd ?x72 (_ bv2 32))) (_ bv2 8))) (= (select ?x34 (bvadd ?x72 (_ bv3 32))) (_ bv2 8)))))
 (let (($x108 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false $x123)))))
 (let (($x92 (and $x108 $x84)))
 (let (($x240 (and $x92 $x239)))
 (let (($x246 (=> $x240 $x245)))
 (let (($x155 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x35 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x21 $x35) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x155 (not $x246)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x298 (= false false)))
 (let (($x256 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x300 (=> $x256 $x298)))
 (let (($x239 (= (_ bv0 32) (_ bv0 32))))
 (let (($x297 (and $x256 $x239)))
 (let (($x299 (=> $x297 $x298)))
 (let (($x248 (= true true)))
 (let (($x296 (=> $x256 $x248)))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x37 (ite $x32 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x121 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x5 (ite $x32 (_ bv4 32) ?x121)))
 (let ((?x100 (bvadd ?x5 (_ bv3 32))))
 (let ((?x154 (bvadd ?x5 (_ bv2 32))))
 (let ((?x90 (bvadd ?x5 (_ bv1 32))))
 (let ((?x91 (bvadd ?x5 (_ bv0 32))))
 (let ((?x8 (bvadd ?x37 (_ bv3 32))))
 (let ((?x131 (bvadd ?x37 (_ bv2 32))))
 (let ((?x114 (bvadd ?x37 (_ bv1 32))))
 (let ((?x115 (bvadd ?x37 (_ bv0 32))))
 (let ((?x261 (ite $x32 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_0)))
 (let ((?x265 (store (store ?x261 ?x115 ((_ extract 7 0) input.dst.llvm-%val)) ?x114 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x269 (store (store ?x265 ?x131 ((_ extract 23 16) input.dst.llvm-%val)) ?x8 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x284 (store (store (store ?x269 ?x91 ((_ extract 7 0) (_ bv0 32))) ?x90 ((_ extract 15 8) (_ bv0 32))) ?x154 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x286 (store ?x284 ?x100 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x291 (concat (select ?x286 ?x131) (concat (select ?x286 ?x114) (select ?x286 ?x37)))))
 (let ((?x293 (concat (select ?x286 ?x8) ?x291)))
 (let (($x294 (= input.spec-%var-val-0 ?x293)))
 (let (($x295 (=> $x256 $x294)))
 (let (($x250 (= (_ bv0 32) ?x37)))
 (let ((?x251 (ite $x250 (_ bv0 32) (_ bv1 32))))
 (let (($x254 (bvuge ?x251 (_ bv1 32))))
 (let (($x255 (= true $x254)))
 (let (($x252 (= ?x251 (_ bv0 32))))
 (let (($x253 (= false $x252)))
 (let (($x305 (and (and (and (and (and $x253 $x255) $x295) $x296) $x299) $x300)))
 (let (($x249 (not true)))
 (let (($x306 (or $x249 $x305)))
 (let (($x307 (and $x248 $x306)))
 (let (($x308 (= $x307 true)))
 (let (($x242 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x243 (= $x241 $x242)))
 (let (($x238 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x240 (= $x238 $x239)))
 (let (($x244 (and $x240 $x243)))
 (let (($x245 (= $x244 true)))
 (let ((?x232 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x232)))
 (let (($x235 (= ?x233 input.dst.llvm-%val)))
 (let (($x236 (= $x235 true)))
 (let (($x237 (= $x236 true)))
 (let ((?x79 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x63 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x43 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x64 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x24 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x27 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x85 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x207 (and (and true (= (select input.dst.llvm-mem.alloc ?x85) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x27) (_ bv1 8)))))
 (let (($x200 (and (and $x207 (= (select input.dst.llvm-mem.alloc ?x24) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x64) (_ bv1 8)))))
 (let (($x216 (and (and $x200 (= (select input.dst.llvm-mem.alloc ?x121) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x43) (_ bv1 8)))))
 (let (($x202 (and (and $x216 (= (select input.dst.llvm-mem.alloc ?x63) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x79) (_ bv1 8)))))
 (let ((?x7 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x40 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x7) (or false (or false $x202)))))
 (let (($x187 (or $x32 $x40)))
 (let (($x205 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x79)))
 (let (($x176 (or false $x205)))
 (let (($x87 (or $x32 $x176)))
 (let (($x196 (and $x87 $x187)))
 (let (($x197 (= $x196 true)))
 (let (($x224 (= $x197 true)))
 (let (($x229 (= $x224 true)))
 (let (($x125 (= (bvand ?x5 (_ bv4294967292 32)) ?x5)))
 (let (($x141 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x178 (ite $x141 (bvuge ?x5 (bvsub ?x5 (_ bv4 32))) (bvult ?x5 (bvsub ?x5 (_ bv4 32))))))
 (let (($x199 (= (bvand ?x37 (_ bv4294967292 32)) ?x37)))
 (let (($x138 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x66 (ite $x138 (bvuge ?x37 (bvsub ?x37 (_ bv0 32))) (bvult ?x37 (bvsub ?x37 (_ bv0 32))))))
 (let (($x48 (and true $x66)))
 (let (($x13 (and $x66 $x48)))
 (let (($x201 (and (and (and $x48 $x13) $x199) $x178)))
 (let (($x174 (and $x201 $x125)))
 (let (($x208 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x223 (and (and (and $x208 $x87) $x187) $x174)))
 (let (($x195 (= $x223 true)))
 (let (($x228 (= $x195 true)))
 (let (($x38 (= $x228 true)))
 (let (($x192 (= $x208 true)))
 (let (($x170 (= $x192 true)))
 (let (($x61 (= $x170 true)))
 (let (($x177 (= $x187 true)))
 (let (($x221 (= $x177 true)))
 (let (($x203 (= $x221 true)))
 (let (($x69 (= $x87 true)))
 (let (($x215 (= $x69 true)))
 (let (($x213 (= $x215 true)))
 (let (($x181 (= $x174 true)))
 (let (($x25 (= $x181 true)))
 (let (($x23 (= $x25 true)))
 (let ((?x211 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x211)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x162 $x9)))
 (let (($x166 (and $x171 $x204)))
 (let (($x151 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x151 $x166)))
 (let (($x183 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x183)))))
 (let (($x42 (and $x188 $x168)))
 (let (($x184 (= $x42 true)))
 (let (($x173 (= $x184 true)))
 (let (($x206 (= $x173 true)))
 (let ((?x150 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x146 (= (bvand ?x150 (_ bv4294967292 32)) ?x150)))
 (let (($x144 (ite $x141 (bvuge ?x150 (bvsub ?x150 (_ bv4 32))) (bvult ?x150 (bvsub ?x150 (_ bv4 32))))))
 (let (($x137 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x117 (ite $x138 (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x118 (and true $x117)))
 (let (($x135 (and $x117 $x118)))
 (let (($x145 (and (and (and $x118 $x135) $x137) $x144)))
 (let (($x102 (and $x145 $x146)))
 (let (($x143 (= $x102 true)))
 (let (($x136 (= $x143 true)))
 (let (($x153 (= $x136 true)))
 (let (($x198 (and $x153 $x206)))
 (let (($x219 (and $x198 $x23)))
 (let (($x179 (and $x219 $x213)))
 (let (($x191 (and $x179 $x203)))
 (let (($x222 (and $x191 $x61)))
 (let (($x193 (and $x222 $x61)))
 (let (($x41 (and $x193 $x38)))
 (let (($x230 (and $x41 $x229)))
 (let (($x18 (and $x230 $x237)))
 (let (($x246 (and $x18 $x245)))
 (let ((?x106 (store (store (store input.dst.llvm-mem.alloc ?x85 (_ bv2 8)) ?x27 (_ bv2 8)) ?x24 (_ bv2 8))))
 (let ((?x33 (store (store (store (store ?x106 ?x64 (_ bv2 8)) ?x121 (_ bv2 8)) ?x43 (_ bv2 8)) ?x63 (_ bv2 8))))
 (let ((?x44 (store ?x33 ?x79 (_ bv2 8))))
 (let ((?x50 (ite $x32 input.dst.llvm-mem.alloc ?x44)))
 (let (($x101 (and (and true (= (select ?x50 ?x91) (_ bv2 8))) (= (select ?x50 ?x90) (_ bv2 8)))))
 (let (($x96 (and (and $x101 (= (select ?x50 ?x154) (_ bv2 8))) (= (select ?x50 ?x100) (_ bv2 8)))))
 (let (($x112 (=> (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32))) (or false (or false $x96)))))
 (let (($x161 (and (and true (= (select ?x50 ?x115) (_ bv2 8))) (= (select ?x50 ?x114) (_ bv2 8)))))
 (let (($x119 (and (and $x161 (= (select ?x50 ?x131) (_ bv2 8))) (= (select ?x50 ?x8) (_ bv2 8)))))
 (let (($x94 (=> (bvule ?x37 (bvsub (bvadd ?x37 (_ bv4 32)) (_ bv1 32))) (or false (or false $x119)))))
 (let (($x34 (and $x94 $x112)))
 (let (($x247 (and $x34 $x246)))
 (let (($x309 (=> $x247 $x308)))
 (let (($x65 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x16 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x16) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x311 (and $x65 (not $x309))))
 (let (($x278 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x271 (select solver-mem_0 us-bounded-var!)))
 (let ((?x7 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x276 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x7))))
 (ite $x276 (= ?x271 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x271 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x278) $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x298 (= false false)))
 (let (($x256 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x300 (=> $x256 $x298)))
 (let (($x239 (= (_ bv0 32) (_ bv0 32))))
 (let (($x297 (and $x256 $x239)))
 (let (($x299 (=> $x297 $x298)))
 (let (($x248 (= true true)))
 (let (($x296 (=> $x256 $x248)))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x37 (ite $x32 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x121 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x5 (ite $x32 (_ bv4 32) ?x121)))
 (let ((?x100 (bvadd ?x5 (_ bv3 32))))
 (let ((?x154 (bvadd ?x5 (_ bv2 32))))
 (let ((?x90 (bvadd ?x5 (_ bv1 32))))
 (let ((?x91 (bvadd ?x5 (_ bv0 32))))
 (let ((?x8 (bvadd ?x37 (_ bv3 32))))
 (let ((?x131 (bvadd ?x37 (_ bv2 32))))
 (let ((?x114 (bvadd ?x37 (_ bv1 32))))
 (let ((?x115 (bvadd ?x37 (_ bv0 32))))
 (let ((?x261 (ite $x32 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_0)))
 (let ((?x265 (store (store ?x261 ?x115 ((_ extract 7 0) input.dst.llvm-%val)) ?x114 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x269 (store (store ?x265 ?x131 ((_ extract 23 16) input.dst.llvm-%val)) ?x8 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x284 (store (store (store ?x269 ?x91 ((_ extract 7 0) (_ bv0 32))) ?x90 ((_ extract 15 8) (_ bv0 32))) ?x154 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x286 (store ?x284 ?x100 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x291 (concat (select ?x286 ?x131) (concat (select ?x286 ?x114) (select ?x286 ?x37)))))
 (let ((?x293 (concat (select ?x286 ?x8) ?x291)))
 (let (($x294 (= input.spec-%var-val-0 ?x293)))
 (let (($x295 (=> $x256 $x294)))
 (let (($x250 (= (_ bv0 32) ?x37)))
 (let ((?x251 (ite $x250 (_ bv0 32) (_ bv1 32))))
 (let (($x254 (bvuge ?x251 (_ bv1 32))))
 (let (($x255 (= true $x254)))
 (let (($x252 (= ?x251 (_ bv0 32))))
 (let (($x253 (= false $x252)))
 (let (($x305 (and (and (and (and (and $x253 $x255) $x295) $x296) $x299) $x300)))
 (let (($x249 (not true)))
 (let (($x306 (or $x249 $x305)))
 (let (($x307 (and $x248 $x306)))
 (let (($x308 (= $x307 true)))
 (let (($x242 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x243 (= $x241 $x242)))
 (let (($x238 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x240 (= $x238 $x239)))
 (let (($x244 (and $x240 $x243)))
 (let (($x245 (= $x244 true)))
 (let ((?x232 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x232)))
 (let (($x235 (= ?x233 input.dst.llvm-%val)))
 (let (($x236 (= $x235 true)))
 (let (($x237 (= $x236 true)))
 (let ((?x79 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x63 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x43 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x64 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x24 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x27 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x85 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x207 (and (and true (= (select input.dst.llvm-mem.alloc ?x85) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x27) (_ bv1 8)))))
 (let (($x200 (and (and $x207 (= (select input.dst.llvm-mem.alloc ?x24) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x64) (_ bv1 8)))))
 (let (($x216 (and (and $x200 (= (select input.dst.llvm-mem.alloc ?x121) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x43) (_ bv1 8)))))
 (let (($x202 (and (and $x216 (= (select input.dst.llvm-mem.alloc ?x63) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x79) (_ bv1 8)))))
 (let ((?x7 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x40 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x7) (or false (or false $x202)))))
 (let (($x187 (or $x32 $x40)))
 (let (($x205 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x79)))
 (let (($x176 (or false $x205)))
 (let (($x87 (or $x32 $x176)))
 (let (($x196 (and $x87 $x187)))
 (let (($x197 (= $x196 true)))
 (let (($x224 (= $x197 true)))
 (let (($x229 (= $x224 true)))
 (let (($x125 (= (bvand ?x5 (_ bv4294967292 32)) ?x5)))
 (let (($x141 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x178 (ite $x141 (bvuge ?x5 (bvsub ?x5 (_ bv4 32))) (bvult ?x5 (bvsub ?x5 (_ bv4 32))))))
 (let (($x199 (= (bvand ?x37 (_ bv4294967292 32)) ?x37)))
 (let (($x138 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x66 (ite $x138 (bvuge ?x37 (bvsub ?x37 (_ bv0 32))) (bvult ?x37 (bvsub ?x37 (_ bv0 32))))))
 (let (($x48 (and true $x66)))
 (let (($x13 (and $x66 $x48)))
 (let (($x201 (and (and (and $x48 $x13) $x199) $x178)))
 (let (($x174 (and $x201 $x125)))
 (let (($x208 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x223 (and (and (and $x208 $x87) $x187) $x174)))
 (let (($x195 (= $x223 true)))
 (let (($x228 (= $x195 true)))
 (let (($x38 (= $x228 true)))
 (let (($x192 (= $x208 true)))
 (let (($x170 (= $x192 true)))
 (let (($x61 (= $x170 true)))
 (let (($x177 (= $x187 true)))
 (let (($x221 (= $x177 true)))
 (let (($x203 (= $x221 true)))
 (let (($x69 (= $x87 true)))
 (let (($x215 (= $x69 true)))
 (let (($x213 (= $x215 true)))
 (let (($x181 (= $x174 true)))
 (let (($x25 (= $x181 true)))
 (let (($x23 (= $x25 true)))
 (let ((?x211 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x211)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x162 $x9)))
 (let (($x166 (and $x171 $x204)))
 (let (($x151 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x151 $x166)))
 (let (($x183 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x183)))))
 (let (($x42 (and $x188 $x168)))
 (let (($x184 (= $x42 true)))
 (let (($x173 (= $x184 true)))
 (let (($x206 (= $x173 true)))
 (let ((?x150 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x146 (= (bvand ?x150 (_ bv4294967292 32)) ?x150)))
 (let (($x144 (ite $x141 (bvuge ?x150 (bvsub ?x150 (_ bv4 32))) (bvult ?x150 (bvsub ?x150 (_ bv4 32))))))
 (let (($x137 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x86 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x117 (ite $x138 (bvuge input.dst.llvm-%call.Lentry%2%d ?x86) (bvult input.dst.llvm-%call.Lentry%2%d ?x86))))
 (let (($x118 (and true $x117)))
 (let (($x135 (and $x117 $x118)))
 (let (($x145 (and (and (and $x118 $x135) $x137) $x144)))
 (let (($x102 (and $x145 $x146)))
 (let (($x143 (= $x102 true)))
 (let (($x136 (= $x143 true)))
 (let (($x153 (= $x136 true)))
 (let (($x198 (and $x153 $x206)))
 (let (($x219 (and $x198 $x23)))
 (let (($x179 (and $x219 $x213)))
 (let (($x191 (and $x179 $x203)))
 (let (($x222 (and $x191 $x61)))
 (let (($x193 (and $x222 $x61)))
 (let (($x41 (and $x193 $x38)))
 (let (($x230 (and $x41 $x229)))
 (let (($x18 (and $x230 $x237)))
 (let (($x246 (and $x18 $x245)))
 (let ((?x106 (store (store (store input.dst.llvm-mem.alloc ?x85 (_ bv2 8)) ?x27 (_ bv2 8)) ?x24 (_ bv2 8))))
 (let ((?x33 (store (store (store (store ?x106 ?x64 (_ bv2 8)) ?x121 (_ bv2 8)) ?x43 (_ bv2 8)) ?x63 (_ bv2 8))))
 (let ((?x44 (store ?x33 ?x79 (_ bv2 8))))
 (let ((?x50 (ite $x32 input.dst.llvm-mem.alloc ?x44)))
 (let (($x101 (and (and true (= (select ?x50 ?x91) (_ bv2 8))) (= (select ?x50 ?x90) (_ bv2 8)))))
 (let (($x96 (and (and $x101 (= (select ?x50 ?x154) (_ bv2 8))) (= (select ?x50 ?x100) (_ bv2 8)))))
 (let (($x112 (=> (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32))) (or false (or false $x96)))))
 (let (($x161 (and (and true (= (select ?x50 ?x115) (_ bv2 8))) (= (select ?x50 ?x114) (_ bv2 8)))))
 (let (($x119 (and (and $x161 (= (select ?x50 ?x131) (_ bv2 8))) (= (select ?x50 ?x8) (_ bv2 8)))))
 (let (($x94 (=> (bvule ?x37 (bvsub (bvadd ?x37 (_ bv4 32)) (_ bv1 32))) (or false (or false $x119)))))
 (let (($x34 (and $x94 $x112)))
 (let (($x247 (and $x34 $x246)))
 (let (($x309 (=> $x247 $x308)))
 (let (($x65 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x16 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x10 $x16) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x311 (and $x65 (not $x309))))
 (let (($x278 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x271 (select solver-mem_0 us-bounded-var!)))
 (let ((?x7 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x276 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x7))))
 (ite $x276 (= ?x271 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x271 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x278) $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let ((?x174 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x174)))
 (let (($x25 (= ?x181 input.dst.llvm-%val)))
 (let (($x23 (= $x25 true)))
 (let (($x19 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (= $x52 $x19)))
 (let (($x217 (= (_ bv0 32) (_ bv0 32))))
 (let (($x199 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x20 (= $x199 $x217)))
 (let (($x201 (and $x20 $x178)))
 (let (($x47 (= $x201 true)))
 (let ((?x166 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x29 (concat ?x206 (concat ?x42 ?x166)))))
 (let (($x66 (= ?x169 input.dst.llvm-%val)))
 (let (($x48 (= $x66 true)))
 (let (($x13 (= $x48 true)))
 (let (($x162 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x120 (= $x162 true)))
 (let (($x9 (= $x120 true)))
 (let (($x171 (= $x9 true)))
 (let (($x165 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x183 (= $x165 true)))
 (let (($x122 (= $x183 true)))
 (let (($x218 (= $x122 true)))
 (let ((?x24 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x126 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x103 (and (and (and (and true (= ?x5 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x99 (_ bv1 8))) (= ?x104 (_ bv1 8)))))
 (let (($x110 (and (and (and (and $x103 (= ?x126 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x113 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x24) (_ bv1 8)))))
 (let (($x137 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x134 (=> $x137 (or false (or false $x110)))))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x70 (or $x27 $x134)))
 (let (($x14 (= $x70 true)))
 (let (($x163 (= $x14 true)))
 (let (($x109 (= $x163 true)))
 (let ((?x129 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x8 (= (bvand ?x129 (_ bv4294967292 32)) ?x129)))
 (let (($x161 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x129 (bvsub ?x129 (_ bv4 32))) (bvult ?x129 (bvsub ?x129 (_ bv4 32))))))
 (let (($x115 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x43 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x33 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x43) (bvult input.dst.llvm-%call.Lentry%2%d ?x43))))
 (let (($x98 (and true $x33)))
 (let (($x79 (and $x33 $x98)))
 (let (($x55 (and (and (and $x98 $x79) $x115) $x161)))
 (let (($x136 (and $x55 $x8)))
 (let (($x153 (= $x136 true)))
 (let (($x160 (= $x153 true)))
 (let (($x164 (= $x160 true)))
 (let (($x106 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x24)))
 (let (($x152 (or false $x106)))
 (let (($x64 (or $x27 $x152)))
 (let (($x149 (= $x64 true)))
 (let (($x146 (= $x149 true)))
 (let (($x102 (= $x146 true)))
 (let (($x150 (and (and (and $x165 $x55) $x8) $x70)))
 (let (($x111 (and $x64 $x150)))
 (let (($x132 (= $x111 true)))
 (let (($x139 (= $x132 true)))
 (let (($x144 (= $x139 true)))
 (let ((?x32 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x32)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x39 $x65)))
 (let (($x67 (and $x75 $x37)))
 (let (($x276 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x276 $x67)))
 (let (($x35 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x35)))))
 (let (($x159 (and $x28 $x54)))
 (let (($x147 (= $x159 true)))
 (let (($x85 (= $x147 true)))
 (let (($x49 (= $x85 true)))
 (let (($x145 (and $x49 $x144)))
 (let (($x143 (and $x145 $x102)))
 (let (($x172 (and $x143 $x164)))
 (let (($x167 (and $x172 $x109)))
 (let (($x188 (and $x167 $x218)))
 (let (($x211 (and $x188 $x171)))
 (let (($x62 (and $x211 $x13)))
 (let (($x125 (and $x62 $x47)))
 (let (($x219 (=> $x125 $x23)))
 (let (($x278 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x257 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x270 $x257) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x278 (not $x219)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let ((?x174 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x174)))
 (let (($x25 (= ?x181 input.dst.llvm-%val)))
 (let (($x23 (= $x25 true)))
 (let (($x19 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (= $x52 $x19)))
 (let (($x217 (= (_ bv0 32) (_ bv0 32))))
 (let (($x199 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x20 (= $x199 $x217)))
 (let (($x201 (and $x20 $x178)))
 (let (($x47 (= $x201 true)))
 (let ((?x166 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x29 (concat ?x206 (concat ?x42 ?x166)))))
 (let (($x66 (= ?x169 input.dst.llvm-%val)))
 (let (($x48 (= $x66 true)))
 (let (($x13 (= $x48 true)))
 (let (($x162 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x120 (= $x162 true)))
 (let (($x9 (= $x120 true)))
 (let (($x171 (= $x9 true)))
 (let (($x165 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x183 (= $x165 true)))
 (let (($x122 (= $x183 true)))
 (let (($x218 (= $x122 true)))
 (let ((?x24 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x126 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x103 (and (and (and (and true (= ?x5 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x99 (_ bv1 8))) (= ?x104 (_ bv1 8)))))
 (let (($x110 (and (and (and (and $x103 (= ?x126 (_ bv1 8))) (= ?x112 (_ bv1 8))) (= ?x113 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x24) (_ bv1 8)))))
 (let (($x137 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x134 (=> $x137 (or false (or false $x110)))))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x70 (or $x27 $x134)))
 (let (($x14 (= $x70 true)))
 (let (($x163 (= $x14 true)))
 (let (($x109 (= $x163 true)))
 (let ((?x129 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x8 (= (bvand ?x129 (_ bv4294967292 32)) ?x129)))
 (let (($x161 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x129 (bvsub ?x129 (_ bv4 32))) (bvult ?x129 (bvsub ?x129 (_ bv4 32))))))
 (let (($x115 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x43 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x33 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x43) (bvult input.dst.llvm-%call.Lentry%2%d ?x43))))
 (let (($x98 (and true $x33)))
 (let (($x79 (and $x33 $x98)))
 (let (($x55 (and (and (and $x98 $x79) $x115) $x161)))
 (let (($x136 (and $x55 $x8)))
 (let (($x153 (= $x136 true)))
 (let (($x160 (= $x153 true)))
 (let (($x164 (= $x160 true)))
 (let (($x106 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x24)))
 (let (($x152 (or false $x106)))
 (let (($x64 (or $x27 $x152)))
 (let (($x149 (= $x64 true)))
 (let (($x146 (= $x149 true)))
 (let (($x102 (= $x146 true)))
 (let (($x150 (and (and (and $x165 $x55) $x8) $x70)))
 (let (($x111 (and $x64 $x150)))
 (let (($x132 (= $x111 true)))
 (let (($x139 (= $x132 true)))
 (let (($x144 (= $x139 true)))
 (let ((?x32 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x32)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x39 $x65)))
 (let (($x67 (and $x75 $x37)))
 (let (($x276 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x276 $x67)))
 (let (($x35 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x35)))))
 (let (($x159 (and $x28 $x54)))
 (let (($x147 (= $x159 true)))
 (let (($x85 (= $x147 true)))
 (let (($x49 (= $x85 true)))
 (let (($x145 (and $x49 $x144)))
 (let (($x143 (and $x145 $x102)))
 (let (($x172 (and $x143 $x164)))
 (let (($x167 (and $x172 $x109)))
 (let (($x188 (and $x167 $x218)))
 (let (($x211 (and $x188 $x171)))
 (let (($x62 (and $x211 $x13)))
 (let (($x125 (and $x62 $x47)))
 (let (($x219 (=> $x125 $x23)))
 (let (($x278 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x257 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x270 $x257) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x278 (not $x219)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1507087/query
