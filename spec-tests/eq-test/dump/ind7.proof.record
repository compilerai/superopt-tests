==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x32 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x32)))))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x13)))
 (let (($x19 (and $x12 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x36))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x32 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x32)))))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x13)))
 (let (($x19 (and $x12 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x36))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-mem.alloc @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000001))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x01))
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv0 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x78 (= true false)))
 (let (($x79 (= $x78 true)))
 (let (($x73 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x72 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x74 (= $x72 $x73)))
 (let (($x70 (= (_ bv0 32) (_ bv0 32))))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x71 (= $x69 $x70)))
 (let (($x75 (and $x71 $x74)))
 (let (($x76 (= $x75 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x62 (concat ?x59 (concat ?x55 ?x53)))))
 (let (($x64 (= ?x63 input.dst.llvm-%val)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x26 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let (($x50 (= $x11 true)))
 (let ((?x22 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x22)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x17 $x41)))
 (let (($x18 (and $x10 $x19)))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x20 $x18)))
 (let (($x7 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x7)))))
 (let (($x14 (and $x27 $x12)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x9 (= $x28 true)))
 (let (($x51 (and $x9 $x50)))
 (let (($x67 (and $x51 $x66)))
 (let (($x77 (and $x67 $x76)))
 (let (($x80 (=> $x77 $x79)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x45 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x16 $x45) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x80)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x78 (= true false)))
 (let (($x79 (= $x78 true)))
 (let (($x73 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x72 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x74 (= $x72 $x73)))
 (let (($x70 (= (_ bv0 32) (_ bv0 32))))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x71 (= $x69 $x70)))
 (let (($x75 (and $x71 $x74)))
 (let (($x76 (= $x75 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x62 (concat ?x59 (concat ?x55 ?x53)))))
 (let (($x64 (= ?x63 input.dst.llvm-%val)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x26 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let (($x50 (= $x11 true)))
 (let ((?x22 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x22)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x17 $x41)))
 (let (($x18 (and $x10 $x19)))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x20 $x18)))
 (let (($x7 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x7)))))
 (let (($x14 (and $x27 $x12)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x9 (= $x28 true)))
 (let (($x51 (and $x9 $x50)))
 (let (($x67 (and $x51 $x66)))
 (let (($x77 (and $x67 $x76)))
 (let (($x80 (=> $x77 $x79)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x45 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x16 $x45) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x80)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x82 (= true false)))
 (let (($x83 (= $x82 true)))
 (let (($x72 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x76 (not $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x75 (not $x69)))
 (let (($x79 (and (and (and (= $x69 (= (_ bv0 32) (_ bv0 32))) (= $x72 (bvuge (_ bv0 32) (_ bv1 32)))) $x75) $x76)))
 (let (($x80 (= $x79 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x60 (concat ?x55 (concat ?x57 ?x61)))))
 (let (($x64 (= ?x63 input.dst.llvm-%val)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x26 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let (($x50 (= $x11 true)))
 (let ((?x22 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x22)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x17 $x41)))
 (let (($x18 (and $x10 $x19)))
 (let (($x44 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x18)))
 (let (($x39 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x14 (and $x20 $x12)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x9 (= $x28 true)))
 (let (($x51 (and $x9 $x50)))
 (let (($x67 (and $x51 $x66)))
 (let (($x81 (and $x67 $x80)))
 (let (($x84 (=> $x81 $x83)))
 (let (($x43 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x35 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x43 (not $x84)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x82 (= true false)))
 (let (($x83 (= $x82 true)))
 (let (($x72 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x76 (not $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x75 (not $x69)))
 (let (($x79 (and (and (and (= $x69 (= (_ bv0 32) (_ bv0 32))) (= $x72 (bvuge (_ bv0 32) (_ bv1 32)))) $x75) $x76)))
 (let (($x80 (= $x79 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x60 (concat ?x55 (concat ?x57 ?x61)))))
 (let (($x64 (= ?x63 input.dst.llvm-%val)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x26 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let (($x50 (= $x11 true)))
 (let ((?x22 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x22)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x17 $x41)))
 (let (($x18 (and $x10 $x19)))
 (let (($x44 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x44 $x18)))
 (let (($x39 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x14 (and $x20 $x12)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x9 (= $x28 true)))
 (let (($x51 (and $x9 $x50)))
 (let (($x67 (and $x51 $x66)))
 (let (($x81 (and $x67 $x80)))
 (let (($x84 (=> $x81 $x83)))
 (let (($x43 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x35 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x43 (not $x84)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x80 (= true false)))
 (let (($x81 (= $x80 true)))
 (let (($x74 (= false false)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x77 (=> $x68 $x74)))
 (let (($x72 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x73 (= $x71 $x72)))
 (let (($x69 (= (_ bv0 32) (_ bv0 32))))
 (let (($x70 (= $x68 $x69)))
 (let (($x78 (and (and $x70 $x73) $x77)))
 (let (($x76 (= $x78 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x58 (concat ?x62 (concat ?x60 ?x52)))))
 (let (($x63 (= ?x53 input.dst.llvm-%val)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x36 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x26 (= $x36 true)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let ((?x10 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x10)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x44 $x29)))
 (let (($x19 (and $x41 $x22)))
 (let (($x35 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x35 $x19)))
 (let (($x39 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x12 (and $x25 $x18)))
 (let (($x14 (= $x12 true)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x50 (and $x28 $x11)))
 (let (($x66 (and $x50 $x65)))
 (let (($x79 (and $x66 $x76)))
 (let (($x82 (=> $x79 $x81)))
 (let (($x23 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x16 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x15 $x16) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x23 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x80 (= true false)))
 (let (($x81 (= $x80 true)))
 (let (($x74 (= false false)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x77 (=> $x68 $x74)))
 (let (($x72 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x73 (= $x71 $x72)))
 (let (($x69 (= (_ bv0 32) (_ bv0 32))))
 (let (($x70 (= $x68 $x69)))
 (let (($x78 (and (and $x70 $x73) $x77)))
 (let (($x76 (= $x78 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x58 (concat ?x62 (concat ?x60 ?x52)))))
 (let (($x63 (= ?x53 input.dst.llvm-%val)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x36 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x26 (= $x36 true)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let ((?x10 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x10)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x44 $x29)))
 (let (($x19 (and $x41 $x22)))
 (let (($x35 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x35 $x19)))
 (let (($x39 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x12 (and $x25 $x18)))
 (let (($x14 (= $x12 true)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x50 (and $x28 $x11)))
 (let (($x66 (and $x50 $x65)))
 (let (($x79 (and $x66 $x76)))
 (let (($x82 (=> $x79 $x81)))
 (let (($x23 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x16 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x15 $x16) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x23 (not $x82)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x82 (= true false)))
 (let (($x83 (= $x82 true)))
 (let (($x74 (= false false)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x77 (=> $x68 $x74)))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x75 (not $x71)))
 (let (($x79 (and (and (and (= $x68 (= (_ bv0 32) (_ bv0 32))) (= $x71 (bvuge (_ bv0 32) (_ bv1 32)))) $x75) $x77)))
 (let (($x80 (= $x79 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x57 (concat ?x60 (concat ?x54 ?x61)))))
 (let (($x63 (= ?x53 input.dst.llvm-%val)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x36 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x26 (= $x36 true)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let ((?x10 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x10)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x44 $x29)))
 (let (($x19 (and $x41 $x22)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x15 $x19)))
 (let (($x30 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x30)))))
 (let (($x12 (and $x35 $x18)))
 (let (($x14 (= $x12 true)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x50 (and $x28 $x11)))
 (let (($x66 (and $x50 $x65)))
 (let (($x81 (and $x66 $x80)))
 (let (($x84 (=> $x81 $x83)))
 (let (($x34 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x46 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x34 (not $x84))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x82 (= true false)))
 (let (($x83 (= $x82 true)))
 (let (($x74 (= false false)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x77 (=> $x68 $x74)))
 (let (($x71 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x75 (not $x71)))
 (let (($x79 (and (and (and (= $x68 (= (_ bv0 32) (_ bv0 32))) (= $x71 (bvuge (_ bv0 32) (_ bv1 32)))) $x75) $x77)))
 (let (($x80 (= $x79 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x57 (concat ?x60 (concat ?x54 ?x61)))))
 (let (($x63 (= ?x53 input.dst.llvm-%val)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x36 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x26 (= $x36 true)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let ((?x10 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x10)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x44 $x29)))
 (let (($x19 (and $x41 $x22)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x15 $x19)))
 (let (($x30 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x30)))))
 (let (($x12 (and $x35 $x18)))
 (let (($x14 (= $x12 true)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x50 (and $x28 $x11)))
 (let (($x66 (and $x50 $x65)))
 (let (($x81 (and $x66 $x80)))
 (let (($x84 (=> $x81 $x83)))
 (let (($x34 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x46 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x34 (not $x84))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x116 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x116)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x112 $x114)))
 (let (($x118 (and $x115 $x117)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x111 $x118)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x153 (and $x108 $x119)))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let (($x148 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x149 (= $x147 $x148)))
 (let (($x145 (= (_ bv0 32) (_ bv0 32))))
 (let (($x144 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x146 (= $x144 $x145)))
 (let (($x150 (and $x146 $x149)))
 (let (($x151 (= $x150 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x129 (concat ?x126 (concat ?x123 ?x121)))))
 (let (($x131 (= input.dst.llvm-%val ?x130)))
 (let (($x134 (and (and (and $x108 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x119) $x131)))
 (let (($x96 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x135 (and $x96 $x134)))
 (let ((?x72 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x66 (and (and (and (and true (= ?x74 (_ bv1 8))) (= ?x35 (_ bv1 8))) (= ?x69 (_ bv1 8))) (= ?x65 (_ bv1 8)))))
 (let (($x90 (and (and (and (and $x66 (= ?x62 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x83 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x72) (_ bv1 8)))))
 (let (($x93 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x94 (=> $x93 (or false (or false $x90)))))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x27 (or $x19 $x94)))
 (let ((?x37 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x77 (= (bvand ?x37 (_ bv4294967292 32)) ?x37)))
 (let (($x24 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x37 (bvsub ?x37 (_ bv4 32))) (bvult ?x37 (bvsub ?x37 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x55 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x29 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x55) (bvult input.dst.llvm-%call.Lentry%2%d ?x55))))
 (let (($x36 (and true $x29)))
 (let (($x6 (and $x29 $x36)))
 (let (($x52 (and (and (and $x36 $x6) $x22) $x24)))
 (let (($x138 (and (and (and $x52 $x77) $x27) $x135)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x72)))
 (let (($x10 (or false $x50)))
 (let (($x41 (or $x19 $x10)))
 (let (($x139 (and $x41 $x138)))
 (let (($x140 (= $x139 true)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x152 (and $x142 $x151)))
 (let (($x156 (=> $x152 $x155)))
 (let (($x63 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x76 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x7 $x76) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x63 (not $x156))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x116 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x116)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x112 $x114)))
 (let (($x118 (and $x115 $x117)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x111 $x118)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x153 (and $x108 $x119)))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let (($x148 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x149 (= $x147 $x148)))
 (let (($x145 (= (_ bv0 32) (_ bv0 32))))
 (let (($x144 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x146 (= $x144 $x145)))
 (let (($x150 (and $x146 $x149)))
 (let (($x151 (= $x150 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x129 (concat ?x126 (concat ?x123 ?x121)))))
 (let (($x131 (= input.dst.llvm-%val ?x130)))
 (let (($x134 (and (and (and $x108 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x119) $x131)))
 (let (($x96 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x135 (and $x96 $x134)))
 (let ((?x72 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x66 (and (and (and (and true (= ?x74 (_ bv1 8))) (= ?x35 (_ bv1 8))) (= ?x69 (_ bv1 8))) (= ?x65 (_ bv1 8)))))
 (let (($x90 (and (and (and (and $x66 (= ?x62 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x83 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x72) (_ bv1 8)))))
 (let (($x93 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x94 (=> $x93 (or false (or false $x90)))))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x27 (or $x19 $x94)))
 (let ((?x37 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x77 (= (bvand ?x37 (_ bv4294967292 32)) ?x37)))
 (let (($x24 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x37 (bvsub ?x37 (_ bv4 32))) (bvult ?x37 (bvsub ?x37 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x55 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x29 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x55) (bvult input.dst.llvm-%call.Lentry%2%d ?x55))))
 (let (($x36 (and true $x29)))
 (let (($x6 (and $x29 $x36)))
 (let (($x52 (and (and (and $x36 $x6) $x22) $x24)))
 (let (($x138 (and (and (and $x52 $x77) $x27) $x135)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x72)))
 (let (($x10 (or false $x50)))
 (let (($x41 (or $x19 $x10)))
 (let (($x139 (and $x41 $x138)))
 (let (($x140 (= $x139 true)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x152 (and $x142 $x151)))
 (let (($x156 (=> $x152 $x155)))
 (let (($x63 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x76 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x7 $x76) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x63 (not $x156))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x154 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x155 (= $x154 true)))
 (let (($x149 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x150 (= $x148 $x149)))
 (let (($x146 (= (_ bv0 32) (_ bv0 32))))
 (let (($x145 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x147 (= $x145 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x152 (= $x151 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x123 (concat ?x125 (concat ?x120 ?x119)))))
 (let (($x124 (= input.dst.llvm-%val ?x121)))
 (let ((?x114 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x114)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x110 $x112)))
 (let (($x116 (and $x113 $x115)))
 (let (($x132 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x132 $x116)))
 (let (($x98 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x131 (and (and (and $x97 $x98) $x117) $x124)))
 (let (($x95 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x134 (and $x95 $x131)))
 (let ((?x75 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x34 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x64 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x8 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x56 (and (and (and (and true (= ?x8 (_ bv1 8))) (= ?x31 (_ bv1 8))) (= ?x64 (_ bv1 8))) (= ?x67 (_ bv1 8)))))
 (let (($x91 (and (and (and (and $x56 (= ?x78 (_ bv1 8))) (= ?x34 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x75) (_ bv1 8)))))
 (let (($x27 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x137 (=> $x27 (or false (or false $x91)))))
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x45 (or $x20 $x137)))
 (let ((?x59 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x136 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x49 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x55 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x36 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x55) (bvult input.dst.llvm-%call.Lentry%2%d ?x55))))
 (let (($x6 (and true $x36)))
 (let (($x33 (and $x36 $x6)))
 (let (($x42 (and (and (and $x6 $x33) $x22) $x49)))
 (let (($x139 (and (and (and $x42 $x136) $x45) $x134)))
 (let (($x38 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x75)))
 (let (($x41 (or false $x38)))
 (let (($x51 (or $x20 $x41)))
 (let (($x140 (and $x51 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x153 (and $x143 $x152)))
 (let (($x156 (=> $x153 $x155)))
 (let (($x10 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x19 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x14 $x19) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x10 (not $x156))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x154 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x155 (= $x154 true)))
 (let (($x149 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x150 (= $x148 $x149)))
 (let (($x146 (= (_ bv0 32) (_ bv0 32))))
 (let (($x145 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x147 (= $x145 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x152 (= $x151 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x123 (concat ?x125 (concat ?x120 ?x119)))))
 (let (($x124 (= input.dst.llvm-%val ?x121)))
 (let ((?x114 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x114)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x110 $x112)))
 (let (($x116 (and $x113 $x115)))
 (let (($x132 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x132 $x116)))
 (let (($x98 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x131 (and (and (and $x97 $x98) $x117) $x124)))
 (let (($x95 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x134 (and $x95 $x131)))
 (let ((?x75 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x34 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x64 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x8 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x56 (and (and (and (and true (= ?x8 (_ bv1 8))) (= ?x31 (_ bv1 8))) (= ?x64 (_ bv1 8))) (= ?x67 (_ bv1 8)))))
 (let (($x91 (and (and (and (and $x56 (= ?x78 (_ bv1 8))) (= ?x34 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x75) (_ bv1 8)))))
 (let (($x27 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x137 (=> $x27 (or false (or false $x91)))))
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x45 (or $x20 $x137)))
 (let ((?x59 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x136 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x49 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x55 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x36 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x55) (bvult input.dst.llvm-%call.Lentry%2%d ?x55))))
 (let (($x6 (and true $x36)))
 (let (($x33 (and $x36 $x6)))
 (let (($x42 (and (and (and $x6 $x33) $x22) $x49)))
 (let (($x139 (and (and (and $x42 $x136) $x45) $x134)))
 (let (($x38 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x75)))
 (let (($x41 (or false $x38)))
 (let (($x51 (or $x20 $x41)))
 (let (($x140 (and $x51 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x153 (and $x143 $x152)))
 (let (($x156 (=> $x153 $x155)))
 (let (($x10 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x19 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x14 $x19) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x10 (not $x156))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00021540)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000084) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000087) #x01
    (ite (= x!0 #x00000088) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000086) #x01
    (ite (= x!0 #x00000089) #x01
    (ite (= x!0 #x00000083) #x01
    (ite (= x!0 #x0000008a) #x01
    (ite (= x!0 #x00000085) #x01
      #x02)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000088 x!0)
                    (ite (bvule #x00000089 x!0)
                         (ite (bvule #x0000008a x!0) #x0000008a #x00000089)
                         #x00000088)
                    #x00000087)))
    (let ((a!2 (ite (bvule #x00000085 x!0)
                    (ite (bvule #x00000086 x!0)
                         (ite (bvule #x00000087 x!0) a!1 #x00000086)
                         #x00000085)
                    #x00000084)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000083 x!0)
                         (ite (bvule #x00000084 x!0) a!2 #x00000083)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x39d00000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x1a031c52)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x95610fb7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x95610fb4)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x02)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1a031c54) #x01
    (ite (= x!0 #x95610fb4) #x03
    (ite (= x!0 #x1a031c57) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x1a031c53) #x01
    (ite (= x!0 #x1a031c56) #x01
    (ite (= x!0 #x95610fb5) #x03
    (ite (= x!0 #x95610fb7) #x03
    (ite (= x!0 #x1a031c58) #x01
    (ite (= x!0 #x1a031c52) #x01
    (ite (= x!0 #x1a031c59) #x01
    (ite (= x!0 #x1a031c55) #x01
      #x04)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x95610fb5 x!0)
                    (ite (bvule #x95610fb7 x!0)
                         (ite (bvule #x95610fb8 x!0) #x95610fb8 #x95610fb7)
                         #x95610fb5)
                    #x95610fb4)))
    (let ((a!2 (ite (bvule #x1a031c58 x!0)
                    (ite (bvule #x1a031c59 x!0)
                         (ite (bvule #x95610fb4 x!0) a!1 #x1a031c59)
                         #x1a031c58)
                    #x1a031c57)))
    (let ((a!3 (ite (bvule #x1a031c55 x!0)
                    (ite (bvule #x1a031c56 x!0)
                         (ite (bvule #x1a031c57 x!0) a!2 #x1a031c56)
                         #x1a031c55)
                    #x1a031c54)))
      (ite (bvule #x1a031c52 x!0)
           (ite (bvule #x1a031c53 x!0)
                (ite (bvule #x1a031c54 x!0) a!3 #x1a031c53)
                #x1a031c52)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x25 (= $x48 true)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x153 (not $x149)))
 (let (($x146 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x152 (not $x146)))
 (let (($x156 (and (and (and (= $x146 (= (_ bv0 32) (_ bv0 32))) (= $x149 (bvuge (_ bv0 32) (_ bv1 32)))) $x152) $x153)))
 (let (($x157 (= $x156 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x120 (concat ?x129 (concat ?x118 ?x117)))))
 (let (($x128 (= input.dst.llvm-%val ?x119)))
 (let ((?x112 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x109 $x110)))
 (let (($x114 (and $x111 $x113)))
 (let (($x127 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x127 $x114)))
 (let (($x99 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x124 (and (and (and $x96 $x99) $x115) $x128)))
 (let (($x87 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x131 (and $x87 $x124)))
 (let ((?x61 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x62 (and (and (and (and true (= ?x5 (_ bv1 8))) (= ?x16 (_ bv1 8))) (= ?x58 (_ bv1 8))) (= ?x66 (_ bv1 8)))))
 (let (($x92 (and (and (and (and $x62 (= ?x73 (_ bv1 8))) (= ?x80 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x61) (_ bv1 8)))))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x138 (=> $x45 (or false (or false $x92)))))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (or $x32 $x138)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x135 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x55 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x55) (bvult input.dst.llvm-%call.Lentry%2%d ?x55))))
 (let (($x33 (and true $x6)))
 (let (($x24 (and $x6 $x33)))
 (let (($x77 (and (and (and $x33 $x24) $x22) $x71)))
 (let (($x140 (and (and (and $x77 $x135) $x13) $x131)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x61)))
 (let (($x51 (or false $x50)))
 (let (($x68 (or $x32 $x51)))
 (let (($x141 (and $x68 $x140)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x158 (and $x144 $x157)))
 (let (($x159 (=> $x158 $x25)))
 (let (($x41 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x20 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x47 $x20) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x41 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x25 (= $x48 true)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x153 (not $x149)))
 (let (($x146 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x152 (not $x146)))
 (let (($x156 (and (and (and (= $x146 (= (_ bv0 32) (_ bv0 32))) (= $x149 (bvuge (_ bv0 32) (_ bv1 32)))) $x152) $x153)))
 (let (($x157 (= $x156 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x120 (concat ?x129 (concat ?x118 ?x117)))))
 (let (($x128 (= input.dst.llvm-%val ?x119)))
 (let ((?x112 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x109 $x110)))
 (let (($x114 (and $x111 $x113)))
 (let (($x127 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x127 $x114)))
 (let (($x99 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x124 (and (and (and $x96 $x99) $x115) $x128)))
 (let (($x87 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x131 (and $x87 $x124)))
 (let ((?x61 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x62 (and (and (and (and true (= ?x5 (_ bv1 8))) (= ?x16 (_ bv1 8))) (= ?x58 (_ bv1 8))) (= ?x66 (_ bv1 8)))))
 (let (($x92 (and (and (and (and $x62 (= ?x73 (_ bv1 8))) (= ?x80 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x61) (_ bv1 8)))))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x138 (=> $x45 (or false (or false $x92)))))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (or $x32 $x138)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x135 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x55 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x55) (bvult input.dst.llvm-%call.Lentry%2%d ?x55))))
 (let (($x33 (and true $x6)))
 (let (($x24 (and $x6 $x33)))
 (let (($x77 (and (and (and $x33 $x24) $x22) $x71)))
 (let (($x140 (and (and (and $x77 $x135) $x13) $x131)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x61)))
 (let (($x51 (or false $x50)))
 (let (($x68 (or $x32 $x51)))
 (let (($x141 (and $x68 $x140)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x158 (and $x144 $x157)))
 (let (($x159 (=> $x158 $x25)))
 (let (($x41 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x20 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x47 $x20) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x41 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x25 (= $x48 true)))
 (let (($x152 (= false false)))
 (let (($x147 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x155 (=> $x147 $x152)))
 (let (($x151 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x154 (= $x150 $x151)))
 (let (($x148 (= (_ bv0 32) (_ bv0 32))))
 (let (($x149 (= $x147 $x148)))
 (let (($x156 (and (and $x149 $x154) $x155)))
 (let (($x157 (= $x156 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x118 (concat ?x123 (concat ?x116 ?x115)))))
 (let (($x122 (= input.dst.llvm-%val ?x117)))
 (let ((?x110 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x110)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x98 $x109)))
 (let (($x112 (and $x132 $x111)))
 (let (($x126 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x126 $x112)))
 (let (($x100 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x128 (and (and (and $x95 $x100) $x113) $x122)))
 (let (($x23 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (and $x23 $x128)))
 (let ((?x46 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x60 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x9 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x78 (and (and (and (and true (= ?x17 (_ bv1 8))) (= ?x44 (_ bv1 8))) (= ?x9 (_ bv1 8))) (= ?x56 (_ bv1 8)))))
 (let (($x94 (and (and (and (and $x78 (= ?x60 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x46) (_ bv1 8)))))
 (let (($x13 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x139 (=> $x13 (or false (or false $x94)))))
 (let (($x54 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (or $x54 $x139)))
 (let ((?x52 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x134 (= (bvand ?x52 (_ bv4294967292 32)) ?x52)))
 (let (($x39 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x52 (bvsub ?x52 (_ bv4 32))) (bvult ?x52 (bvsub ?x52 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x55 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x33 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x55) (bvult input.dst.llvm-%call.Lentry%2%d ?x55))))
 (let (($x24 (and true $x33)))
 (let (($x49 (and $x33 $x24)))
 (let (($x136 (and (and (and $x24 $x49) $x22) $x39)))
 (let (($x141 (and (and (and $x136 $x134) $x43) $x124)))
 (let (($x38 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x46)))
 (let (($x68 (or false $x38)))
 (let (($x53 (or $x54 $x68)))
 (let (($x142 (and $x53 $x141)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x145 (= $x144 true)))
 (let (($x158 (and $x145 $x157)))
 (let (($x159 (=> $x158 $x25)))
 (let (($x51 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x18 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x51 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x25 (= $x48 true)))
 (let (($x152 (= false false)))
 (let (($x147 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x155 (=> $x147 $x152)))
 (let (($x151 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x154 (= $x150 $x151)))
 (let (($x148 (= (_ bv0 32) (_ bv0 32))))
 (let (($x149 (= $x147 $x148)))
 (let (($x156 (and (and $x149 $x154) $x155)))
 (let (($x157 (= $x156 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x118 (concat ?x123 (concat ?x116 ?x115)))))
 (let (($x122 (= input.dst.llvm-%val ?x117)))
 (let ((?x110 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x110)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x98 $x109)))
 (let (($x112 (and $x132 $x111)))
 (let (($x126 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x126 $x112)))
 (let (($x100 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x128 (and (and (and $x95 $x100) $x113) $x122)))
 (let (($x23 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (and $x23 $x128)))
 (let ((?x46 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x60 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x9 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x78 (and (and (and (and true (= ?x17 (_ bv1 8))) (= ?x44 (_ bv1 8))) (= ?x9 (_ bv1 8))) (= ?x56 (_ bv1 8)))))
 (let (($x94 (and (and (and (and $x78 (= ?x60 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x46) (_ bv1 8)))))
 (let (($x13 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x139 (=> $x13 (or false (or false $x94)))))
 (let (($x54 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (or $x54 $x139)))
 (let ((?x52 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x134 (= (bvand ?x52 (_ bv4294967292 32)) ?x52)))
 (let (($x39 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x52 (bvsub ?x52 (_ bv4 32))) (bvult ?x52 (bvsub ?x52 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x55 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x33 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x55) (bvult input.dst.llvm-%call.Lentry%2%d ?x55))))
 (let (($x24 (and true $x33)))
 (let (($x49 (and $x33 $x24)))
 (let (($x136 (and (and (and $x24 $x49) $x22) $x39)))
 (let (($x141 (and (and (and $x136 $x134) $x43) $x124)))
 (let (($x38 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x46)))
 (let (($x68 (or false $x38)))
 (let (($x53 (or $x54 $x68)))
 (let (($x142 (and $x53 $x141)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x145 (= $x144 true)))
 (let (($x158 (and $x145 $x157)))
 (let (($x159 (=> $x158 $x25)))
 (let (($x51 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x18 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x51 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00021540)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000084) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000087) #x01
    (ite (= x!0 #x00000088) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000086) #x01
    (ite (= x!0 #x00000089) #x01
    (ite (= x!0 #x00000083) #x01
    (ite (= x!0 #x0000008a) #x01
    (ite (= x!0 #x00000085) #x01
      #x02)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000088 x!0)
                    (ite (bvule #x00000089 x!0)
                         (ite (bvule #x0000008a x!0) #x0000008a #x00000089)
                         #x00000088)
                    #x00000087)))
    (let ((a!2 (ite (bvule #x00000085 x!0)
                    (ite (bvule #x00000086 x!0)
                         (ite (bvule #x00000087 x!0) a!1 #x00000086)
                         #x00000085)
                    #x00000084)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000083 x!0)
                         (ite (bvule #x00000084 x!0) a!2 #x00000083)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x39d00000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x1a031c52)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x95610fb7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x95610fb4)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x02)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1a031c54) #x01
    (ite (= x!0 #x95610fb4) #x03
    (ite (= x!0 #x1a031c57) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x1a031c53) #x01
    (ite (= x!0 #x1a031c56) #x01
    (ite (= x!0 #x95610fb5) #x03
    (ite (= x!0 #x95610fb7) #x03
    (ite (= x!0 #x1a031c58) #x01
    (ite (= x!0 #x1a031c52) #x01
    (ite (= x!0 #x1a031c59) #x01
    (ite (= x!0 #x1a031c55) #x01
      #x04)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x95610fb5 x!0)
                    (ite (bvule #x95610fb7 x!0)
                         (ite (bvule #x95610fb8 x!0) #x95610fb8 #x95610fb7)
                         #x95610fb5)
                    #x95610fb4)))
    (let ((a!2 (ite (bvule #x1a031c58 x!0)
                    (ite (bvule #x1a031c59 x!0)
                         (ite (bvule #x95610fb4 x!0) a!1 #x1a031c59)
                         #x1a031c58)
                    #x1a031c57)))
    (let ((a!3 (ite (bvule #x1a031c55 x!0)
                    (ite (bvule #x1a031c56 x!0)
                         (ite (bvule #x1a031c57 x!0) a!2 #x1a031c56)
                         #x1a031c55)
                    #x1a031c54)))
      (ite (bvule #x1a031c52 x!0)
           (ite (bvule #x1a031c53 x!0)
                (ite (bvule #x1a031c54 x!0) a!3 #x1a031c53)
                #x1a031c52)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x161 (= $x160 true)))
 (let (($x155 (= false false)))
 (let (($x148 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x156 (=> $x148 $x155)))
 (let (($x151 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x152 (not $x151)))
 (let (($x48 (and (and (and (= $x148 (= (_ bv0 32) (_ bv0 32))) (= $x151 (bvuge (_ bv0 32) (_ bv1 32)))) $x152) $x156)))
 (let (($x25 (= $x48 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x116 (concat ?x120 (concat ?x114 ?x113)))))
 (let (($x133 (= input.dst.llvm-%val ?x115)))
 (let ((?x109 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x109)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x126)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x99 $x98)))
 (let (($x110 (and $x127 $x132)))
 (let (($x125 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x125 $x110)))
 (let (($x107 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x122 (and (and (and $x87 $x107) $x111) $x133)))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x128 (and $x74 $x122)))
 (let ((?x72 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x40 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x30 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x73 (and (and (and (and true (= ?x35 (_ bv1 8))) (= ?x88 (_ bv1 8))) (= ?x30 (_ bv1 8))) (= ?x62 (_ bv1 8)))))
 (let (($x137 (and (and (and (and $x73 (= ?x40 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x72) (_ bv1 8)))))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x140 (=> $x43 (or false (or false $x137)))))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x15 (or $x63 $x140)))
 (let ((?x42 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x131 (= (bvand ?x42 (_ bv4294967292 32)) ?x42)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x42 (bvsub ?x42 (_ bv4 32))) (bvult ?x42 (bvsub ?x42 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x55 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x24 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x55) (bvult input.dst.llvm-%call.Lentry%2%d ?x55))))
 (let (($x49 (and true $x24)))
 (let (($x71 (and $x24 $x49)))
 (let (($x135 (and (and (and $x49 $x71) $x22) $x70)))
 (let (($x142 (and (and (and $x135 $x131) $x15) $x128)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x72)))
 (let (($x53 (or false $x50)))
 (let (($x29 (or $x63 $x53)))
 (let (($x143 (and $x29 $x142)))
 (let (($x144 (= $x143 true)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x159 (and $x146 $x25)))
 (let (($x76 (=> $x159 $x161)))
 (let (($x68 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x54 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x7 $x54) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x68 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x161 (= $x160 true)))
 (let (($x155 (= false false)))
 (let (($x148 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x156 (=> $x148 $x155)))
 (let (($x151 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x152 (not $x151)))
 (let (($x48 (and (and (and (= $x148 (= (_ bv0 32) (_ bv0 32))) (= $x151 (bvuge (_ bv0 32) (_ bv1 32)))) $x152) $x156)))
 (let (($x25 (= $x48 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x116 (concat ?x120 (concat ?x114 ?x113)))))
 (let (($x133 (= input.dst.llvm-%val ?x115)))
 (let ((?x109 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x109)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x126)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x99 $x98)))
 (let (($x110 (and $x127 $x132)))
 (let (($x125 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x125 $x110)))
 (let (($x107 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x122 (and (and (and $x87 $x107) $x111) $x133)))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x128 (and $x74 $x122)))
 (let ((?x72 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x40 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x30 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x73 (and (and (and (and true (= ?x35 (_ bv1 8))) (= ?x88 (_ bv1 8))) (= ?x30 (_ bv1 8))) (= ?x62 (_ bv1 8)))))
 (let (($x137 (and (and (and (and $x73 (= ?x40 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x72) (_ bv1 8)))))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x140 (=> $x43 (or false (or false $x137)))))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x15 (or $x63 $x140)))
 (let ((?x42 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x131 (= (bvand ?x42 (_ bv4294967292 32)) ?x42)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x42 (bvsub ?x42 (_ bv4 32))) (bvult ?x42 (bvsub ?x42 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x55 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x24 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x55) (bvult input.dst.llvm-%call.Lentry%2%d ?x55))))
 (let (($x49 (and true $x24)))
 (let (($x71 (and $x24 $x49)))
 (let (($x135 (and (and (and $x49 $x71) $x22) $x70)))
 (let (($x142 (and (and (and $x135 $x131) $x15) $x128)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x72)))
 (let (($x53 (or false $x50)))
 (let (($x29 (or $x63 $x53)))
 (let (($x143 (and $x29 $x142)))
 (let (($x144 (= $x143 true)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x159 (and $x146 $x25)))
 (let (($x76 (=> $x159 $x161)))
 (let (($x68 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x54 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x7 $x54) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x68 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00021540)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000084) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000087) #x01
    (ite (= x!0 #x00000088) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000086) #x01
    (ite (= x!0 #x00000089) #x01
    (ite (= x!0 #x00000083) #x01
    (ite (= x!0 #x0000008a) #x01
    (ite (= x!0 #x00000085) #x01
      #x02)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000088 x!0)
                    (ite (bvule #x00000089 x!0)
                         (ite (bvule #x0000008a x!0) #x0000008a #x00000089)
                         #x00000088)
                    #x00000087)))
    (let ((a!2 (ite (bvule #x00000085 x!0)
                    (ite (bvule #x00000086 x!0)
                         (ite (bvule #x00000087 x!0) a!1 #x00000086)
                         #x00000085)
                    #x00000084)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000083 x!0)
                         (ite (bvule #x00000084 x!0) a!2 #x00000083)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x39d00000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x1a031c52)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x95610fb7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x95610fb4)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x02)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1a031c54) #x01
    (ite (= x!0 #x95610fb4) #x03
    (ite (= x!0 #x1a031c57) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x1a031c53) #x01
    (ite (= x!0 #x1a031c56) #x01
    (ite (= x!0 #x95610fb5) #x03
    (ite (= x!0 #x95610fb7) #x03
    (ite (= x!0 #x1a031c58) #x01
    (ite (= x!0 #x1a031c52) #x01
    (ite (= x!0 #x1a031c59) #x01
    (ite (= x!0 #x1a031c55) #x01
      #x04)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x95610fb5 x!0)
                    (ite (bvule #x95610fb7 x!0)
                         (ite (bvule #x95610fb8 x!0) #x95610fb8 #x95610fb7)
                         #x95610fb5)
                    #x95610fb4)))
    (let ((a!2 (ite (bvule #x1a031c58 x!0)
                    (ite (bvule #x1a031c59 x!0)
                         (ite (bvule #x95610fb4 x!0) a!1 #x1a031c59)
                         #x1a031c58)
                    #x1a031c57)))
    (let ((a!3 (ite (bvule #x1a031c55 x!0)
                    (ite (bvule #x1a031c56 x!0)
                         (ite (bvule #x1a031c57 x!0) a!2 #x1a031c56)
                         #x1a031c55)
                    #x1a031c54)))
      (ite (bvule #x1a031c52 x!0)
           (ite (bvule #x1a031c53 x!0)
                (ite (bvule #x1a031c54 x!0) a!3 #x1a031c53)
                #x1a031c52)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x156 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x156)))
 (let (($x25 (= ?x48 input.dst.llvm-%val)))
 (let (($x159 (= $x25 true)))
 (let (($x153 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x157 (= $x154 $x153)))
 (let (($x150 (= (_ bv0 32) (_ bv0 32))))
 (let (($x149 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (= $x149 $x150)))
 (let (($x152 (and $x151 $x157)))
 (let (($x158 (= $x152 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x114 (concat ?x118 (concat ?x112 ?x111)))))
 (let (($x130 (= input.dst.llvm-%val ?x113)))
 (let ((?x98 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x98)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x100 $x99)))
 (let (($x109 (and $x126 $x127)))
 (let (($x129 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x129 $x109)))
 (let (($x108 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x133 (and (and (and $x87 $x108) $x132) $x130)))
 (let (($x5 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x122 (and $x5 $x133)))
 (let ((?x47 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x40 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x30 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x73 (and (and (and (and true (= ?x45 (_ bv1 8))) (= ?x88 (_ bv1 8))) (= ?x30 (_ bv1 8))) (= ?x62 (_ bv1 8)))))
 (let (($x137 (and (and (and (and $x73 (= ?x40 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x47) (_ bv1 8)))))
 (let (($x140 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x15 (=> $x140 (or false (or false $x137)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (or $x18 $x15)))
 (let ((?x136 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x131 (= (bvand ?x136 (_ bv4294967292 32)) ?x136)))
 (let (($x59 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x136 (bvsub ?x136 (_ bv4 32))) (bvult ?x136 (bvsub ?x136 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x26 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x24 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x26) (bvult input.dst.llvm-%call.Lentry%2%d ?x26))))
 (let (($x49 (and true $x24)))
 (let (($x71 (and $x24 $x49)))
 (let (($x135 (and (and (and $x49 $x71) $x21) $x59)))
 (let (($x143 (and (and (and $x135 $x131) $x13) $x122)))
 (let (($x75 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x47)))
 (let (($x53 (or false $x75)))
 (let (($x29 (or $x18 $x53)))
 (let (($x144 (and $x29 $x143)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x155 (and $x147 $x158)))
 (let (($x160 (=> $x155 $x159)))
 (let (($x50 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x61 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x63 $x61) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x50 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x156 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x156)))
 (let (($x25 (= ?x48 input.dst.llvm-%val)))
 (let (($x159 (= $x25 true)))
 (let (($x153 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x157 (= $x154 $x153)))
 (let (($x150 (= (_ bv0 32) (_ bv0 32))))
 (let (($x149 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (= $x149 $x150)))
 (let (($x152 (and $x151 $x157)))
 (let (($x158 (= $x152 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x114 (concat ?x118 (concat ?x112 ?x111)))))
 (let (($x130 (= input.dst.llvm-%val ?x113)))
 (let ((?x98 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x98)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x100 $x99)))
 (let (($x109 (and $x126 $x127)))
 (let (($x129 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x129 $x109)))
 (let (($x108 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x133 (and (and (and $x87 $x108) $x132) $x130)))
 (let (($x5 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x122 (and $x5 $x133)))
 (let ((?x47 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x40 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x30 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x73 (and (and (and (and true (= ?x45 (_ bv1 8))) (= ?x88 (_ bv1 8))) (= ?x30 (_ bv1 8))) (= ?x62 (_ bv1 8)))))
 (let (($x137 (and (and (and (and $x73 (= ?x40 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x47) (_ bv1 8)))))
 (let (($x140 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x15 (=> $x140 (or false (or false $x137)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (or $x18 $x15)))
 (let ((?x136 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x131 (= (bvand ?x136 (_ bv4294967292 32)) ?x136)))
 (let (($x59 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x136 (bvsub ?x136 (_ bv4 32))) (bvult ?x136 (bvsub ?x136 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x26 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x24 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x26) (bvult input.dst.llvm-%call.Lentry%2%d ?x26))))
 (let (($x49 (and true $x24)))
 (let (($x71 (and $x24 $x49)))
 (let (($x135 (and (and (and $x49 $x71) $x21) $x59)))
 (let (($x143 (and (and (and $x135 $x131) $x13) $x122)))
 (let (($x75 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x47)))
 (let (($x53 (or false $x75)))
 (let (($x29 (or $x18 $x53)))
 (let (($x144 (and $x29 $x143)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x155 (and $x147 $x158)))
 (let (($x160 (=> $x155 $x159)))
 (let (($x50 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x61 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x63 $x61) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x50 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var179X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var179X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var179X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv1 32)))))
 (let ((?x188 (concat ?x187 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var179X)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv3 32)))))
 (let ((?x194 (concat ?x193 (concat ?x190 ?x188))))
 (let (($x195 (= input.ind-%var179X.2.1 ?x194)))
 (let (($x165 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x196 (=> $x165 $x195)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var179X))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv2 32))) ?x174)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv3 32))) ?x177)))
 (let (($x181 (= input.ind-%var179X.2.0 ?x180)))
 (let (($x182 (=> $x165 $x181)))
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x12 (ite $x10 (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge ?x12 (_ bv1 32))))
 (let (($x167 (= $x165 $x166)))
 (let (($x163 (= false false)))
 (let (($x76 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x164 (=> $x76 $x163)))
 (let (($x162 (= ?x12 (_ bv0 32))))
 (let (($x19 (= $x76 $x162)))
 (let (($x160 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x201 (and (and (and (and (and $x160 $x19) $x164) $x167) $x182) $x196)))
 (let (($x25 (not true)))
 (let (($x202 (or $x25 $x201)))
 (let (($x48 (= true true)))
 (let (($x203 (and $x48 $x202)))
 (let (($x204 (= $x203 true)))
 (let (($x157 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x152 (= $x153 $x157)))
 (let (($x151 (= (_ bv0 32) (_ bv0 32))))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x154 (= $x150 $x151)))
 (let (($x158 (and $x154 $x152)))
 (let (($x155 (= $x158 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x112 (concat ?x116 (concat ?x110 ?x132)))))
 (let (($x121 (= input.dst.llvm-%val ?x111)))
 (let ((?x99 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x99)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x107 $x100)))
 (let (($x98 (and $x125 $x126)))
 (let (($x123 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x123 $x98)))
 (let (($x74 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x130 (and (and (and $x8 $x74) $x127) $x121)))
 (let (($x141 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x133 (and $x141 $x130)))
 (let ((?x54 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x60 (and (and (and (and true (= ?x31 (_ bv1 8))) (= ?x69 (_ bv1 8))) (= ?x65 (_ bv1 8))) (= ?x78 (_ bv1 8)))))
 (let (($x138 (and (and (and (and $x60 (= ?x57 (_ bv1 8))) (= ?x83 (_ bv1 8))) (= ?x90 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x54) (_ bv1 8)))))
 (let (($x13 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x142 (=> $x13 (or false (or false $x138)))))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (or $x14 $x142)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x128 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x28 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x26 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x49 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x26) (bvult input.dst.llvm-%call.Lentry%2%d ?x26))))
 (let (($x71 (and true $x49)))
 (let (($x37 (and $x49 $x71)))
 (let (($x134 (and (and (and $x71 $x37) $x21) $x28)))
 (let (($x144 (and (and (and $x134 $x128) $x43) $x133)))
 (let (($x32 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x54)))
 (let (($x29 (or false $x32)))
 (let (($x55 (or $x14 $x29)))
 (let (($x145 (and $x55 $x144)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x156 (and $x148 $x155)))
 (let (($x205 (=> $x156 $x204)))
 (let (($x53 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x18 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x20 $x18) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x53 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var179X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var179X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var179X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv1 32)))))
 (let ((?x188 (concat ?x187 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var179X)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv3 32)))))
 (let ((?x194 (concat ?x193 (concat ?x190 ?x188))))
 (let (($x195 (= input.ind-%var179X.2.1 ?x194)))
 (let (($x165 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x196 (=> $x165 $x195)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var179X))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv2 32))) ?x174)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv3 32))) ?x177)))
 (let (($x181 (= input.ind-%var179X.2.0 ?x180)))
 (let (($x182 (=> $x165 $x181)))
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x12 (ite $x10 (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge ?x12 (_ bv1 32))))
 (let (($x167 (= $x165 $x166)))
 (let (($x163 (= false false)))
 (let (($x76 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x164 (=> $x76 $x163)))
 (let (($x162 (= ?x12 (_ bv0 32))))
 (let (($x19 (= $x76 $x162)))
 (let (($x160 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x201 (and (and (and (and (and $x160 $x19) $x164) $x167) $x182) $x196)))
 (let (($x25 (not true)))
 (let (($x202 (or $x25 $x201)))
 (let (($x48 (= true true)))
 (let (($x203 (and $x48 $x202)))
 (let (($x204 (= $x203 true)))
 (let (($x157 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x152 (= $x153 $x157)))
 (let (($x151 (= (_ bv0 32) (_ bv0 32))))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x154 (= $x150 $x151)))
 (let (($x158 (and $x154 $x152)))
 (let (($x155 (= $x158 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x112 (concat ?x116 (concat ?x110 ?x132)))))
 (let (($x121 (= input.dst.llvm-%val ?x111)))
 (let ((?x99 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x99)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x107 $x100)))
 (let (($x98 (and $x125 $x126)))
 (let (($x123 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x123 $x98)))
 (let (($x74 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x130 (and (and (and $x8 $x74) $x127) $x121)))
 (let (($x141 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x133 (and $x141 $x130)))
 (let ((?x54 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x60 (and (and (and (and true (= ?x31 (_ bv1 8))) (= ?x69 (_ bv1 8))) (= ?x65 (_ bv1 8))) (= ?x78 (_ bv1 8)))))
 (let (($x138 (and (and (and (and $x60 (= ?x57 (_ bv1 8))) (= ?x83 (_ bv1 8))) (= ?x90 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x54) (_ bv1 8)))))
 (let (($x13 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x142 (=> $x13 (or false (or false $x138)))))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (or $x14 $x142)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x128 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x28 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x26 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x49 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x26) (bvult input.dst.llvm-%call.Lentry%2%d ?x26))))
 (let (($x71 (and true $x49)))
 (let (($x37 (and $x49 $x71)))
 (let (($x134 (and (and (and $x71 $x37) $x21) $x28)))
 (let (($x144 (and (and (and $x134 $x128) $x43) $x133)))
 (let (($x32 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x54)))
 (let (($x29 (or false $x32)))
 (let (($x55 (or $x14 $x29)))
 (let (($x145 (and $x55 $x144)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x156 (and $x148 $x155)))
 (let (($x205 (=> $x156 $x204)))
 (let (($x53 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x18 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x20 $x18) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x53 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8e3a8c00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xb9c5a800)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf751656c)
  (define-fun input.ind-%var179X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var179X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var179X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x71c573ff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf751656f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf751656c)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf751656d x!0)
                    (ite (bvule #xf751656f x!0)
                         (ite (bvule #xf7516570 x!0) #xf7516570 #xf751656f)
                         #xf751656d)
                    #xf751656c)))
    (let ((a!2 (ite (bvule #xb9c5a806 x!0)
                    (ite (bvule #xb9c5a807 x!0)
                         (ite (bvule #xf751656c x!0) a!1 #xb9c5a807)
                         #xb9c5a806)
                    #xb9c5a805)))
    (let ((a!3 (ite (bvule #xb9c5a803 x!0)
                    (ite (bvule #xb9c5a804 x!0)
                         (ite (bvule #xb9c5a805 x!0) a!2 #xb9c5a804)
                         #xb9c5a803)
                    #xb9c5a802)))
      (ite (bvule #xb9c5a800 x!0)
           (ite (bvule #xb9c5a801 x!0)
                (ite (bvule #xb9c5a802 x!0) a!3 #xb9c5a801)
                #xb9c5a800)
           #x00000000)))))
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb9c5a802) #x01
    (ite (= x!0 #xf751656c) #x03
    (ite (= x!0 #xb9c5a805) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xb9c5a801) #x01
    (ite (= x!0 #xb9c5a804) #x01
    (ite (= x!0 #xf751656d) #x03
    (ite (= x!0 #xf751656f) #x03
    (ite (= x!0 #xb9c5a806) #x01
    (ite (= x!0 #xb9c5a800) #x01
    (ite (= x!0 #xb9c5a807) #x01
    (ite (= x!0 #xb9c5a803) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0a800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var179X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var179X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var179X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0a800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x0a800004) #x01
    (ite (= x!0 #x0a800005) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x0a800003) #x01
    (ite (= x!0 #x0a800006) #x01
    (ite (= x!0 #x0a800000) #x01
    (ite (= x!0 #x0a800007) #x01
    (ite (= x!0 #x0a800002) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x0a800005 x!0)
                    (ite (bvule #x0a800006 x!0)
                         (ite (bvule #x0a800007 x!0) #x0a800007 #x0a800006)
                         #x0a800005)
                    #x0a800004)))
    (let ((a!2 (ite (bvule #x0a800002 x!0)
                    (ite (bvule #x0a800003 x!0)
                         (ite (bvule #x0a800004 x!0) a!1 #x0a800003)
                         #x0a800002)
                    #x0a800001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x0a800000 x!0)
                         (ite (bvule #x0a800001 x!0) a!2 #x0a800000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var179X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var179X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var179X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv1 32)))))
 (let ((?x190 (concat ?x189 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var179X)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv3 32)))))
 (let ((?x194 (concat ?x191 (concat ?x187 ?x190))))
 (let (($x195 (= input.ind-%var179X.2.1 ?x194)))
 (let (($x166 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x196 (=> $x166 $x195)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var179X))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv2 32))) ?x172)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv3 32))) ?x174)))
 (let (($x182 (= input.ind-%var179X.2.0 ?x181)))
 (let (($x200 (=> $x166 $x182)))
 (let (($x197 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x163 (ite $x197 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge ?x163 (_ bv1 32))))
 (let (($x199 (= $x166 $x167)))
 (let (($x155 (= false false)))
 (let (($x19 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x165 (=> $x19 $x155)))
 (let (($x164 (= ?x163 (_ bv0 32))))
 (let (($x198 (= $x19 $x164)))
 (let (($x12 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x205 (and (and (and (and (and $x12 $x198) $x165) $x199) $x200) $x196)))
 (let (($x76 (not true)))
 (let (($x206 (or $x76 $x205)))
 (let (($x161 (= true true)))
 (let (($x207 (and $x161 $x206)))
 (let (($x41 (= $x207 true)))
 (let (($x151 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x156 (=> $x151 $x155)))
 (let (($x152 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x158 (= $x157 $x152)))
 (let (($x154 (= (_ bv0 32) (_ bv0 32))))
 (let (($x153 (= $x151 $x154)))
 (let (($x25 (and (and $x153 $x158) $x156)))
 (let (($x159 (= $x25 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x110 (concat ?x114 (concat ?x109 ?x127)))))
 (let (($x119 (= input.dst.llvm-%val ?x132)))
 (let ((?x100 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x100)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x108 $x107)))
 (let (($x99 (and $x129 $x125)))
 (let (($x120 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x120 $x99)))
 (let (($x97 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x121 (and (and (and $x5 $x97) $x126) $x119)))
 (let (($x93 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x130 (and $x93 $x121)))
 (let ((?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x34 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x40 (and (and (and (and true (= ?x16 (_ bv1 8))) (= ?x64 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x73 (_ bv1 8)))))
 (let (($x139 (and (and (and (and $x40 (= ?x34 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x7) (_ bv1 8)))))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x143 (=> $x43 (or false (or false $x139)))))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x35 (or $x46 $x143)))
 (let ((?x70 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x122 (= (bvand ?x70 (_ bv4294967292 32)) ?x70)))
 (let (($x42 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x70 (bvsub ?x70 (_ bv4 32))) (bvult ?x70 (bvsub ?x70 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x26 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x26) (bvult input.dst.llvm-%call.Lentry%2%d ?x26))))
 (let (($x37 (and true $x71)))
 (let (($x59 (and $x71 $x37)))
 (let (($x131 (and (and (and $x37 $x59) $x21) $x42)))
 (let (($x145 (and (and (and $x131 $x122) $x35) $x130)))
 (let (($x75 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x7)))
 (let (($x55 (or false $x75)))
 (let (($x6 (or $x46 $x55)))
 (let (($x146 (and $x6 $x145)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x160 (and $x149 $x159)))
 (let (($x169 (=> $x160 $x41)))
 (let (($x29 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x14 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x68 $x14) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x29 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var179X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var179X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var179X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv1 32)))))
 (let ((?x190 (concat ?x189 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var179X)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv3 32)))))
 (let ((?x194 (concat ?x191 (concat ?x187 ?x190))))
 (let (($x195 (= input.ind-%var179X.2.1 ?x194)))
 (let (($x166 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x196 (=> $x166 $x195)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var179X))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv2 32))) ?x172)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv3 32))) ?x174)))
 (let (($x182 (= input.ind-%var179X.2.0 ?x181)))
 (let (($x200 (=> $x166 $x182)))
 (let (($x197 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x163 (ite $x197 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge ?x163 (_ bv1 32))))
 (let (($x199 (= $x166 $x167)))
 (let (($x155 (= false false)))
 (let (($x19 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x165 (=> $x19 $x155)))
 (let (($x164 (= ?x163 (_ bv0 32))))
 (let (($x198 (= $x19 $x164)))
 (let (($x12 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x205 (and (and (and (and (and $x12 $x198) $x165) $x199) $x200) $x196)))
 (let (($x76 (not true)))
 (let (($x206 (or $x76 $x205)))
 (let (($x161 (= true true)))
 (let (($x207 (and $x161 $x206)))
 (let (($x41 (= $x207 true)))
 (let (($x151 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x156 (=> $x151 $x155)))
 (let (($x152 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x158 (= $x157 $x152)))
 (let (($x154 (= (_ bv0 32) (_ bv0 32))))
 (let (($x153 (= $x151 $x154)))
 (let (($x25 (and (and $x153 $x158) $x156)))
 (let (($x159 (= $x25 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x110 (concat ?x114 (concat ?x109 ?x127)))))
 (let (($x119 (= input.dst.llvm-%val ?x132)))
 (let ((?x100 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x100)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x108 $x107)))
 (let (($x99 (and $x129 $x125)))
 (let (($x120 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x120 $x99)))
 (let (($x97 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x121 (and (and (and $x5 $x97) $x126) $x119)))
 (let (($x93 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x130 (and $x93 $x121)))
 (let ((?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x34 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x40 (and (and (and (and true (= ?x16 (_ bv1 8))) (= ?x64 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x73 (_ bv1 8)))))
 (let (($x139 (and (and (and (and $x40 (= ?x34 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x7) (_ bv1 8)))))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x143 (=> $x43 (or false (or false $x139)))))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x35 (or $x46 $x143)))
 (let ((?x70 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x122 (= (bvand ?x70 (_ bv4294967292 32)) ?x70)))
 (let (($x42 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x70 (bvsub ?x70 (_ bv4 32))) (bvult ?x70 (bvsub ?x70 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x26 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x26) (bvult input.dst.llvm-%call.Lentry%2%d ?x26))))
 (let (($x37 (and true $x71)))
 (let (($x59 (and $x71 $x37)))
 (let (($x131 (and (and (and $x37 $x59) $x21) $x42)))
 (let (($x145 (and (and (and $x131 $x122) $x35) $x130)))
 (let (($x75 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x7)))
 (let (($x55 (or false $x75)))
 (let (($x6 (or $x46 $x55)))
 (let (($x146 (and $x6 $x145)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x160 (and $x149 $x159)))
 (let (($x169 (=> $x160 $x41)))
 (let (($x29 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x14 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x68 $x14) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x29 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8e3a8c00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xb9c5a800)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf751656c)
  (define-fun input.ind-%var179X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var179X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var179X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x71c573ff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf751656f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf751656c)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf751656d x!0)
                    (ite (bvule #xf751656f x!0)
                         (ite (bvule #xf7516570 x!0) #xf7516570 #xf751656f)
                         #xf751656d)
                    #xf751656c)))
    (let ((a!2 (ite (bvule #xb9c5a806 x!0)
                    (ite (bvule #xb9c5a807 x!0)
                         (ite (bvule #xf751656c x!0) a!1 #xb9c5a807)
                         #xb9c5a806)
                    #xb9c5a805)))
    (let ((a!3 (ite (bvule #xb9c5a803 x!0)
                    (ite (bvule #xb9c5a804 x!0)
                         (ite (bvule #xb9c5a805 x!0) a!2 #xb9c5a804)
                         #xb9c5a803)
                    #xb9c5a802)))
      (ite (bvule #xb9c5a800 x!0)
           (ite (bvule #xb9c5a801 x!0)
                (ite (bvule #xb9c5a802 x!0) a!3 #xb9c5a801)
                #xb9c5a800)
           #x00000000)))))
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb9c5a802) #x01
    (ite (= x!0 #xf751656c) #x03
    (ite (= x!0 #xb9c5a805) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xb9c5a801) #x01
    (ite (= x!0 #xb9c5a804) #x01
    (ite (= x!0 #xf751656d) #x03
    (ite (= x!0 #xf751656f) #x03
    (ite (= x!0 #xb9c5a806) #x01
    (ite (= x!0 #xb9c5a800) #x01
    (ite (= x!0 #xb9c5a807) #x01
    (ite (= x!0 #xb9c5a803) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0a800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var179X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var179X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var179X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0a800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x0a800004) #x01
    (ite (= x!0 #x0a800005) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x0a800003) #x01
    (ite (= x!0 #x0a800006) #x01
    (ite (= x!0 #x0a800000) #x01
    (ite (= x!0 #x0a800007) #x01
    (ite (= x!0 #x0a800002) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x0a800005 x!0)
                    (ite (bvule #x0a800006 x!0)
                         (ite (bvule #x0a800007 x!0) #x0a800007 #x0a800006)
                         #x0a800005)
                    #x0a800004)))
    (let ((a!2 (ite (bvule #x0a800002 x!0)
                    (ite (bvule #x0a800003 x!0)
                         (ite (bvule #x0a800004 x!0) a!1 #x0a800003)
                         #x0a800002)
                    #x0a800001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x0a800000 x!0)
                         (ite (bvule #x0a800001 x!0) a!2 #x0a800000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var179X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var179X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var179X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv1 32)))))
 (let ((?x220 (concat ?x219 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var179X)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv2 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv3 32)))))
 (let ((?x226 (concat ?x225 (concat ?x222 ?x220))))
 (let (($x227 (= input.ind-%var179X.2.1 ?x226)))
 (let (($x185 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x228 (=> $x185 $x227)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var179X))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv2 32))) ?x208)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv3 32))) ?x170)))
 (let (($x213 (= input.ind-%var179X.2.0 ?x212)))
 (let (($x214 (=> $x185 $x213)))
 (let (($x187 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x193 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x193 (_ bv1 32))))
 (let (($x195 (= $x185 $x194)))
 (let (($x155 (= false false)))
 (let (($x186 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x190 (=> $x186 $x155)))
 (let (($x189 (= ?x193 (_ bv0 32))))
 (let (($x192 (= $x186 $x189)))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x233 (and (and (and (and (and $x188 $x192) $x190) $x195) $x214) $x228)))
 (let (($x183 (not true)))
 (let (($x234 (or $x183 $x233)))
 (let (($x204 (= true true)))
 (let (($x235 (and $x204 $x234)))
 (let (($x236 (= $x235 true)))
 (let (($x158 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x178 (= $x168 $x158)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x152 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x198 (and $x152 $x197)))
 (let (($x177 (=> $x198 $x178)))
 (let (($x153 (= (_ bv0 32) (_ bv0 32))))
 (let (($x167 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x199 (= $x167 $x153)))
 (let (($x203 (=> $x198 $x199)))
 (let (($x165 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x202 (=> $x198 $x165)))
 (let (($x163 (= $x197 $x158)))
 (let (($x164 (=> $x152 $x163)))
 (let (($x76 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x162 (and $x152 $x76)))
 (let (($x19 (=> $x162 $x155)))
 (let (($x10 (= $x76 $x153)))
 (let (($x12 (=> $x152 $x10)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x160 (=> $x152 $x159)))
 (let (($x154 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x156 (=> $x154 $x155)))
 (let (($x176 (and (and (and (and (and (= $x154 $x153) (= $x152 $x158)) $x156) $x160) $x12) $x19)))
 (let (($x181 (and (and (and (and $x176 $x164) $x202) $x203) $x177)))
 (let (($x182 (= $x181 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x109 (concat ?x112 (concat ?x98 ?x126)))))
 (let (($x117 (= input.dst.llvm-%val ?x127)))
 (let ((?x107 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x107)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x74 $x108)))
 (let (($x100 (and $x123 $x129)))
 (let (($x118 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x118 $x100)))
 (let (($x96 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x119 (and (and (and $x141 $x96) $x125) $x117)))
 (let (($x27 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x121 (and $x27 $x119)))
 (let ((?x61 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x60 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x57 (and (and (and (and true (= ?x44 (_ bv1 8))) (= ?x58 (_ bv1 8))) (= ?x66 (_ bv1 8))) (= ?x60 (_ bv1 8)))))
 (let (($x15 (and (and (and (and $x57 (= ?x80 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= ?x92 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x61) (_ bv1 8)))))
 (let (($x35 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x144 (=> $x35 (or false (or false $x15)))))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x11 (or $x51 $x144)))
 (let ((?x135 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x133 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x77 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x135 (bvsub ?x135 (_ bv4 32))) (bvult ?x135 (bvsub ?x135 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x6 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x6) (bvult input.dst.llvm-%call.Lentry%2%d ?x6))))
 (let (($x59 (and true $x37)))
 (let (($x28 (and $x37 $x59)))
 (let (($x128 (and (and (and $x59 $x28) $x21) $x77)))
 (let (($x146 (and (and (and $x128 $x133) $x11) $x121)))
 (let (($x32 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x61)))
 (let (($x7 (or false $x32)))
 (let (($x75 (or $x51 $x7)))
 (let (($x147 (and $x75 $x146)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x200 (and $x150 $x182)))
 (let (($x237 (=> $x200 $x236)))
 (let (($x38 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x20 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x14 $x20) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x38 (not $x237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var179X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var179X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var179X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv1 32)))))
 (let ((?x220 (concat ?x219 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var179X)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv2 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv3 32)))))
 (let ((?x226 (concat ?x225 (concat ?x222 ?x220))))
 (let (($x227 (= input.ind-%var179X.2.1 ?x226)))
 (let (($x185 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x228 (=> $x185 $x227)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var179X))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv2 32))) ?x208)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv3 32))) ?x170)))
 (let (($x213 (= input.ind-%var179X.2.0 ?x212)))
 (let (($x214 (=> $x185 $x213)))
 (let (($x187 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x193 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x193 (_ bv1 32))))
 (let (($x195 (= $x185 $x194)))
 (let (($x155 (= false false)))
 (let (($x186 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x190 (=> $x186 $x155)))
 (let (($x189 (= ?x193 (_ bv0 32))))
 (let (($x192 (= $x186 $x189)))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x233 (and (and (and (and (and $x188 $x192) $x190) $x195) $x214) $x228)))
 (let (($x183 (not true)))
 (let (($x234 (or $x183 $x233)))
 (let (($x204 (= true true)))
 (let (($x235 (and $x204 $x234)))
 (let (($x236 (= $x235 true)))
 (let (($x158 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x178 (= $x168 $x158)))
 (let (($x197 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x152 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x198 (and $x152 $x197)))
 (let (($x177 (=> $x198 $x178)))
 (let (($x153 (= (_ bv0 32) (_ bv0 32))))
 (let (($x167 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x199 (= $x167 $x153)))
 (let (($x203 (=> $x198 $x199)))
 (let (($x165 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x202 (=> $x198 $x165)))
 (let (($x163 (= $x197 $x158)))
 (let (($x164 (=> $x152 $x163)))
 (let (($x76 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x162 (and $x152 $x76)))
 (let (($x19 (=> $x162 $x155)))
 (let (($x10 (= $x76 $x153)))
 (let (($x12 (=> $x152 $x10)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x160 (=> $x152 $x159)))
 (let (($x154 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x156 (=> $x154 $x155)))
 (let (($x176 (and (and (and (and (and (= $x154 $x153) (= $x152 $x158)) $x156) $x160) $x12) $x19)))
 (let (($x181 (and (and (and (and $x176 $x164) $x202) $x203) $x177)))
 (let (($x182 (= $x181 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x109 (concat ?x112 (concat ?x98 ?x126)))))
 (let (($x117 (= input.dst.llvm-%val ?x127)))
 (let ((?x107 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x107)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x74 $x108)))
 (let (($x100 (and $x123 $x129)))
 (let (($x118 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x118 $x100)))
 (let (($x96 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x119 (and (and (and $x141 $x96) $x125) $x117)))
 (let (($x27 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x121 (and $x27 $x119)))
 (let ((?x61 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x60 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x57 (and (and (and (and true (= ?x44 (_ bv1 8))) (= ?x58 (_ bv1 8))) (= ?x66 (_ bv1 8))) (= ?x60 (_ bv1 8)))))
 (let (($x15 (and (and (and (and $x57 (= ?x80 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= ?x92 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x61) (_ bv1 8)))))
 (let (($x35 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x144 (=> $x35 (or false (or false $x15)))))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x11 (or $x51 $x144)))
 (let ((?x135 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x133 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x77 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x135 (bvsub ?x135 (_ bv4 32))) (bvult ?x135 (bvsub ?x135 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x6 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x37 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x6) (bvult input.dst.llvm-%call.Lentry%2%d ?x6))))
 (let (($x59 (and true $x37)))
 (let (($x28 (and $x37 $x59)))
 (let (($x128 (and (and (and $x59 $x28) $x21) $x77)))
 (let (($x146 (and (and (and $x128 $x133) $x11) $x121)))
 (let (($x32 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x61)))
 (let (($x7 (or false $x32)))
 (let (($x75 (or $x51 $x7)))
 (let (($x147 (and $x75 $x146)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x200 (and $x150 $x182)))
 (let (($x237 (=> $x200 $x236)))
 (let (($x38 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x20 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x14 $x20) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x38 (not $x237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0a800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var179X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var179X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var179X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0a800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x0a800004) #x01
    (ite (= x!0 #x0a800005) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x0a800003) #x01
    (ite (= x!0 #x0a800006) #x01
    (ite (= x!0 #x0a800000) #x01
    (ite (= x!0 #x0a800007) #x01
    (ite (= x!0 #x0a800002) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x0a800005 x!0)
                    (ite (bvule #x0a800006 x!0)
                         (ite (bvule #x0a800007 x!0) #x0a800007 #x0a800006)
                         #x0a800005)
                    #x0a800004)))
    (let ((a!2 (ite (bvule #x0a800002 x!0)
                    (ite (bvule #x0a800003 x!0)
                         (ite (bvule #x0a800004 x!0) a!1 #x0a800003)
                         #x0a800002)
                    #x0a800001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x0a800000 x!0)
                         (ite (bvule #x0a800001 x!0) a!2 #x0a800000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8e3a8c00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xb9c5a800)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf751656c)
  (define-fun input.ind-%var179X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var179X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var179X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x71c573ff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf751656f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf751656c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf751656d x!0)
                    (ite (bvule #xf751656f x!0)
                         (ite (bvule #xf7516570 x!0) #xf7516570 #xf751656f)
                         #xf751656d)
                    #xf751656c)))
    (let ((a!2 (ite (bvule #xb9c5a806 x!0)
                    (ite (bvule #xb9c5a807 x!0)
                         (ite (bvule #xf751656c x!0) a!1 #xb9c5a807)
                         #xb9c5a806)
                    #xb9c5a805)))
    (let ((a!3 (ite (bvule #xb9c5a803 x!0)
                    (ite (bvule #xb9c5a804 x!0)
                         (ite (bvule #xb9c5a805 x!0) a!2 #xb9c5a804)
                         #xb9c5a803)
                    #xb9c5a802)))
      (ite (bvule #xb9c5a800 x!0)
           (ite (bvule #xb9c5a801 x!0)
                (ite (bvule #xb9c5a802 x!0) a!3 #xb9c5a801)
                #xb9c5a800)
           #x00000000)))))
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb9c5a802) #x01
    (ite (= x!0 #xf751656c) #x03
    (ite (= x!0 #xb9c5a805) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xb9c5a801) #x01
    (ite (= x!0 #xb9c5a804) #x01
    (ite (= x!0 #xf751656d) #x03
    (ite (= x!0 #xf751656f) #x03
    (ite (= x!0 #xb9c5a806) #x01
    (ite (= x!0 #xb9c5a800) #x01
    (ite (= x!0 #xb9c5a807) #x01
    (ite (= x!0 #xb9c5a803) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var179X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var179X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var179X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x256 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv1 32)))))
 (let ((?x257 (concat ?x256 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var179X)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv3 32)))))
 (let ((?x263 (concat ?x262 (concat ?x259 ?x257))))
 (let (($x264 (= input.ind-%var179X.2.1 ?x263)))
 (let (($x235 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x265 (=> $x235 $x264)))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var179X))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv2 32))) ?x243)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv3 32))) ?x246)))
 (let (($x250 (= input.ind-%var179X.2.0 ?x249)))
 (let (($x251 (=> $x235 $x250)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x227 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x236 (bvuge ?x227 (_ bv1 32))))
 (let (($x237 (= $x235 $x236)))
 (let (($x180 (= false false)))
 (let (($x223 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x234 (=> $x223 $x180)))
 (let (($x228 (= ?x227 (_ bv0 32))))
 (let (($x233 (= $x223 $x228)))
 (let (($x217 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x270 (and (and (and (and (and $x217 $x233) $x234) $x237) $x251) $x265)))
 (let (($x218 (not true)))
 (let (($x271 (or $x218 $x270)))
 (let (($x222 (= true true)))
 (let (($x272 (and $x222 $x271)))
 (let (($x273 (= $x272 true)))
 (let (($x158 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x195 (= $x194 $x158)))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x165 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x152 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x19 (and $x152 $x12)))
 (let (($x199 (and $x19 $x165)))
 (let (($x191 (and $x199 $x183)))
 (let (($x231 (=> $x191 $x195)))
 (let (($x192 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x230 (and $x191 $x192)))
 (let (($x185 (=> $x230 $x180)))
 (let (($x153 (= (_ bv0 32) (_ bv0 32))))
 (let (($x229 (= $x192 $x153)))
 (let (($x190 (=> $x191 $x229)))
 (let (($x187 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x193 (=> $x191 $x187)))
 (let (($x184 (= $x183 $x158)))
 (let (($x188 (=> $x199 $x184)))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x200 (and $x199 $x177)))
 (let (($x204 (=> $x200 $x180)))
 (let (($x181 (= $x177 $x153)))
 (let (($x182 (=> $x199 $x181)))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x168 (=> $x199 $x174)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x166 (and $x19 $x179)))
 (let (($x167 (=> $x166 $x180)))
 (let (($x202 (= $x165 $x158)))
 (let (($x172 (=> $x19 $x202)))
 (let (($x198 (= $x179 $x153)))
 (let (($x201 (=> $x19 $x198)))
 (let (($x197 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x163 (=> $x19 $x197)))
 (let (($x175 (= $x12 $x158)))
 (let (($x162 (=> $x152 $x175)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x76 (and $x152 $x160)))
 (let (($x10 (=> $x76 $x180)))
 (let (($x171 (= $x160 $x153)))
 (let (($x161 (=> $x152 $x171)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x25 (=> $x152 $x173)))
 (let (($x154 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x155 (=> $x154 $x180)))
 (let (($x209 (and (and (and (and (and (= $x154 $x153) (= $x152 $x158)) $x155) $x25) $x161) $x10)))
 (let (($x170 (and (and (and (and (and (and $x209 $x162) $x163) $x201) $x172) $x167) $x168)))
 (let (($x216 (and (and (and (and (and (and $x170 $x182) $x204) $x188) $x193) $x190) $x185)))
 (let (($x224 (and $x216 $x231)))
 (let (($x225 (= $x224 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x111 (concat ?x109 (concat ?x132 ?x100)))))
 (let (($x126 (= input.dst.llvm-%val ?x98)))
 (let ((?x120 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x120)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x116 $x118)))
 (let (($x123 (and $x74 $x108)))
 (let (($x96 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x96 $x123)))
 (let (($x93 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x127 (and (and (and $x141 $x93) $x107) $x126)))
 (let (($x31 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x117 (and $x31 $x127)))
 (let ((?x29 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x60 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x57 (and (and (and (and true (= ?x13 (_ bv1 8))) (= ?x58 (_ bv1 8))) (= ?x66 (_ bv1 8))) (= ?x60 (_ bv1 8)))))
 (let (($x15 (and (and (and (and $x57 (= ?x80 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= ?x92 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x29) (_ bv1 8)))))
 (let (($x144 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x11 (=> $x144 (or false (or false $x15)))))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (or $x46 $x11)))
 (let ((?x39 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x77 (= (bvand ?x39 (_ bv4294967292 32)) ?x39)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x39 (bvsub ?x39 (_ bv4 32))) (bvult ?x39 (bvsub ?x39 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x36 (and true $x6)))
 (let (($x26 (and $x6 $x36)))
 (let (($x136 (and (and (and $x36 $x26) $x28) $x70)))
 (let (($x146 (and (and (and $x136 $x77) $x43) $x117)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x29)))
 (let (($x75 (or false $x53)))
 (let (($x33 (or $x46 $x75)))
 (let (($x147 (and $x33 $x146)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x221 (and $x150 $x225)))
 (let (($x274 (=> $x221 $x273)))
 (let (($x7 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x51 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x63 $x51) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x7 (not $x274))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var179X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var179X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var179X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x256 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv1 32)))))
 (let ((?x257 (concat ?x256 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var179X)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var179X) (_ bv3 32)))))
 (let ((?x263 (concat ?x262 (concat ?x259 ?x257))))
 (let (($x264 (= input.ind-%var179X.2.1 ?x263)))
 (let (($x235 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x265 (=> $x235 $x264)))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var179X))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv2 32))) ?x243)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd input.ind-%var179X (_ bv3 32))) ?x246)))
 (let (($x250 (= input.ind-%var179X.2.0 ?x249)))
 (let (($x251 (=> $x235 $x250)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x227 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x236 (bvuge ?x227 (_ bv1 32))))
 (let (($x237 (= $x235 $x236)))
 (let (($x180 (= false false)))
 (let (($x223 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x234 (=> $x223 $x180)))
 (let (($x228 (= ?x227 (_ bv0 32))))
 (let (($x233 (= $x223 $x228)))
 (let (($x217 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x270 (and (and (and (and (and $x217 $x233) $x234) $x237) $x251) $x265)))
 (let (($x218 (not true)))
 (let (($x271 (or $x218 $x270)))
 (let (($x222 (= true true)))
 (let (($x272 (and $x222 $x271)))
 (let (($x273 (= $x272 true)))
 (let (($x158 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x195 (= $x194 $x158)))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x165 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x152 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x19 (and $x152 $x12)))
 (let (($x199 (and $x19 $x165)))
 (let (($x191 (and $x199 $x183)))
 (let (($x231 (=> $x191 $x195)))
 (let (($x192 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x230 (and $x191 $x192)))
 (let (($x185 (=> $x230 $x180)))
 (let (($x153 (= (_ bv0 32) (_ bv0 32))))
 (let (($x229 (= $x192 $x153)))
 (let (($x190 (=> $x191 $x229)))
 (let (($x187 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x193 (=> $x191 $x187)))
 (let (($x184 (= $x183 $x158)))
 (let (($x188 (=> $x199 $x184)))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x200 (and $x199 $x177)))
 (let (($x204 (=> $x200 $x180)))
 (let (($x181 (= $x177 $x153)))
 (let (($x182 (=> $x199 $x181)))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x168 (=> $x199 $x174)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x166 (and $x19 $x179)))
 (let (($x167 (=> $x166 $x180)))
 (let (($x202 (= $x165 $x158)))
 (let (($x172 (=> $x19 $x202)))
 (let (($x198 (= $x179 $x153)))
 (let (($x201 (=> $x19 $x198)))
 (let (($x197 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x163 (=> $x19 $x197)))
 (let (($x175 (= $x12 $x158)))
 (let (($x162 (=> $x152 $x175)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x76 (and $x152 $x160)))
 (let (($x10 (=> $x76 $x180)))
 (let (($x171 (= $x160 $x153)))
 (let (($x161 (=> $x152 $x171)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x25 (=> $x152 $x173)))
 (let (($x154 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x155 (=> $x154 $x180)))
 (let (($x209 (and (and (and (and (and (= $x154 $x153) (= $x152 $x158)) $x155) $x25) $x161) $x10)))
 (let (($x170 (and (and (and (and (and (and $x209 $x162) $x163) $x201) $x172) $x167) $x168)))
 (let (($x216 (and (and (and (and (and (and $x170 $x182) $x204) $x188) $x193) $x190) $x185)))
 (let (($x224 (and $x216 $x231)))
 (let (($x225 (= $x224 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x111 (concat ?x109 (concat ?x132 ?x100)))))
 (let (($x126 (= input.dst.llvm-%val ?x98)))
 (let ((?x120 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x120)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x116 $x118)))
 (let (($x123 (and $x74 $x108)))
 (let (($x96 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x96 $x123)))
 (let (($x93 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x127 (and (and (and $x141 $x93) $x107) $x126)))
 (let (($x31 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x117 (and $x31 $x127)))
 (let ((?x29 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x60 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x57 (and (and (and (and true (= ?x13 (_ bv1 8))) (= ?x58 (_ bv1 8))) (= ?x66 (_ bv1 8))) (= ?x60 (_ bv1 8)))))
 (let (($x15 (and (and (and (and $x57 (= ?x80 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= ?x92 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x29) (_ bv1 8)))))
 (let (($x144 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x11 (=> $x144 (or false (or false $x15)))))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (or $x46 $x11)))
 (let ((?x39 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x77 (= (bvand ?x39 (_ bv4294967292 32)) ?x39)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x39 (bvsub ?x39 (_ bv4 32))) (bvult ?x39 (bvsub ?x39 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x36 (and true $x6)))
 (let (($x26 (and $x6 $x36)))
 (let (($x136 (and (and (and $x36 $x26) $x28) $x70)))
 (let (($x146 (and (and (and $x136 $x77) $x43) $x117)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x29)))
 (let (($x75 (or false $x53)))
 (let (($x33 (or $x46 $x75)))
 (let (($x147 (and $x33 $x146)))
 (let (($x148 (= $x147 true)))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x221 (and $x150 $x225)))
 (let (($x274 (=> $x221 $x273)))
 (let (($x7 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x51 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x63 $x51) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x7 (not $x274))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0a800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var179X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var179X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var179X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0a800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x0a800004) #x01
    (ite (= x!0 #x0a800005) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x0a800003) #x01
    (ite (= x!0 #x0a800006) #x01
    (ite (= x!0 #x0a800000) #x01
    (ite (= x!0 #x0a800007) #x01
    (ite (= x!0 #x0a800002) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x0a800005 x!0)
                    (ite (bvule #x0a800006 x!0)
                         (ite (bvule #x0a800007 x!0) #x0a800007 #x0a800006)
                         #x0a800005)
                    #x0a800004)))
    (let ((a!2 (ite (bvule #x0a800002 x!0)
                    (ite (bvule #x0a800003 x!0)
                         (ite (bvule #x0a800004 x!0) a!1 #x0a800003)
                         #x0a800002)
                    #x0a800001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x0a800000 x!0)
                         (ite (bvule #x0a800001 x!0) a!2 #x0a800000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8e3a8c00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xb9c5a800)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf751656c)
  (define-fun input.ind-%var179X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var179X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var179X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x71c573ff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf751656f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf751656c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf751656d x!0)
                    (ite (bvule #xf751656f x!0)
                         (ite (bvule #xf7516570 x!0) #xf7516570 #xf751656f)
                         #xf751656d)
                    #xf751656c)))
    (let ((a!2 (ite (bvule #xb9c5a806 x!0)
                    (ite (bvule #xb9c5a807 x!0)
                         (ite (bvule #xf751656c x!0) a!1 #xb9c5a807)
                         #xb9c5a806)
                    #xb9c5a805)))
    (let ((a!3 (ite (bvule #xb9c5a803 x!0)
                    (ite (bvule #xb9c5a804 x!0)
                         (ite (bvule #xb9c5a805 x!0) a!2 #xb9c5a804)
                         #xb9c5a803)
                    #xb9c5a802)))
      (ite (bvule #xb9c5a800 x!0)
           (ite (bvule #xb9c5a801 x!0)
                (ite (bvule #xb9c5a802 x!0) a!3 #xb9c5a801)
                #xb9c5a800)
           #x00000000)))))
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb9c5a802) #x01
    (ite (= x!0 #xf751656c) #x03
    (ite (= x!0 #xb9c5a805) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xb9c5a801) #x01
    (ite (= x!0 #xb9c5a804) #x01
    (ite (= x!0 #xf751656d) #x03
    (ite (= x!0 #xf751656f) #x03
    (ite (= x!0 #xb9c5a806) #x01
    (ite (= x!0 #xb9c5a800) #x01
    (ite (= x!0 #xb9c5a807) #x01
    (ite (= x!0 #xb9c5a803) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var296X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var296X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var296X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x203 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv1 32)))))
 (let ((?x174 (concat ?x203 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var296X)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv3 32)))))
 (let ((?x182 (concat ?x181 (concat ?x170 ?x174))))
 (let (($x212 (= input.ind-%var296X.2.1 ?x182)))
 (let (($x12 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x200 (=> $x12 $x212)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var296X))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv2 32))) ?x164)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv3 32))) ?x201)))
 (let (($x172 (= input.ind-%var296X.2.0 ?x202)))
 (let (($x207 (=> $x12 $x172)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x161 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge ?x161 (_ bv1 32))))
 (let (($x162 (= $x12 $x175)))
 (let (($x10 (= false false)))
 (let (($x160 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x209 (=> $x160 $x10)))
 (let (($x211 (= ?x161 (_ bv0 32))))
 (let (($x76 (= $x160 $x211)))
 (let (($x210 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x188 (and (and (and (and (and $x210 $x76) $x209) $x162) $x207) $x200)))
 (let (($x173 (not true)))
 (let (($x214 (or $x173 $x188)))
 (let (($x156 (= true true)))
 (let (($x191 (and $x156 $x214)))
 (let (($x186 (= $x191 true)))
 (let (($x48 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x196 (= $x158 $x48)))
 (let (($x157 (= (_ bv0 32) (_ bv0 32))))
 (let (($x153 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x152 (= $x153 $x157)))
 (let (($x180 (and $x152 $x196)))
 (let (($x155 (= $x180 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x132 (concat ?x113 (concat ?x129 ?x107)))))
 (let (($x99 (= input.dst.llvm-%val ?x100)))
 (let ((?x118 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x118)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x106 $x116)))
 (let (($x120 (and $x97 $x74)))
 (let (($x115 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x115 $x120)))
 (let (($x27 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x126 (and (and (and $x45 $x27) $x108) $x99)))
 (let (($x145 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (and $x145 $x126)))
 (let ((?x23 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x40 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x34 (and (and (and (and true (= ?x88 (_ bv1 8))) (= ?x9 (_ bv1 8))) (= ?x56 (_ bv1 8))) (= ?x40 (_ bv1 8)))))
 (let (($x142 (and (and (and (and $x34 (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x23) (_ bv1 8)))))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x121 (=> $x43 (or false (or false $x142)))))
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x35 (or $x61 $x121)))
 (let ((?x42 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x119 (= (bvand ?x42 (_ bv4294967292 32)) ?x42)))
 (let (($x134 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x42 (bvsub ?x42 (_ bv4 32))) (bvult ?x42 (bvsub ?x42 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x36 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x26 (and true $x36)))
 (let (($x135 (and $x36 $x26)))
 (let (($x52 (and (and (and $x26 $x135) $x28) $x134)))
 (let (($x147 (and (and (and $x52 $x119) $x35) $x127)))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x23)))
 (let (($x33 (or false $x18)))
 (let (($x72 (or $x61 $x33)))
 (let (($x148 (and $x72 $x147)))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x206 (and $x151 $x155)))
 (let (($x187 (=> $x206 $x186)))
 (let (($x75 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x46 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x46) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x75 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var296X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var296X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var296X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x203 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv1 32)))))
 (let ((?x174 (concat ?x203 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var296X)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv3 32)))))
 (let ((?x182 (concat ?x181 (concat ?x170 ?x174))))
 (let (($x212 (= input.ind-%var296X.2.1 ?x182)))
 (let (($x12 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x200 (=> $x12 $x212)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var296X))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv2 32))) ?x164)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv3 32))) ?x201)))
 (let (($x172 (= input.ind-%var296X.2.0 ?x202)))
 (let (($x207 (=> $x12 $x172)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x161 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge ?x161 (_ bv1 32))))
 (let (($x162 (= $x12 $x175)))
 (let (($x10 (= false false)))
 (let (($x160 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x209 (=> $x160 $x10)))
 (let (($x211 (= ?x161 (_ bv0 32))))
 (let (($x76 (= $x160 $x211)))
 (let (($x210 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x188 (and (and (and (and (and $x210 $x76) $x209) $x162) $x207) $x200)))
 (let (($x173 (not true)))
 (let (($x214 (or $x173 $x188)))
 (let (($x156 (= true true)))
 (let (($x191 (and $x156 $x214)))
 (let (($x186 (= $x191 true)))
 (let (($x48 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x196 (= $x158 $x48)))
 (let (($x157 (= (_ bv0 32) (_ bv0 32))))
 (let (($x153 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x152 (= $x153 $x157)))
 (let (($x180 (and $x152 $x196)))
 (let (($x155 (= $x180 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x132 (concat ?x113 (concat ?x129 ?x107)))))
 (let (($x99 (= input.dst.llvm-%val ?x100)))
 (let ((?x118 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x118)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x106 $x116)))
 (let (($x120 (and $x97 $x74)))
 (let (($x115 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x115 $x120)))
 (let (($x27 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x126 (and (and (and $x45 $x27) $x108) $x99)))
 (let (($x145 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (and $x145 $x126)))
 (let ((?x23 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x40 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x34 (and (and (and (and true (= ?x88 (_ bv1 8))) (= ?x9 (_ bv1 8))) (= ?x56 (_ bv1 8))) (= ?x40 (_ bv1 8)))))
 (let (($x142 (and (and (and (and $x34 (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x23) (_ bv1 8)))))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x121 (=> $x43 (or false (or false $x142)))))
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x35 (or $x61 $x121)))
 (let ((?x42 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x119 (= (bvand ?x42 (_ bv4294967292 32)) ?x42)))
 (let (($x134 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x42 (bvsub ?x42 (_ bv4 32))) (bvult ?x42 (bvsub ?x42 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x36 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x26 (and true $x36)))
 (let (($x135 (and $x36 $x26)))
 (let (($x52 (and (and (and $x26 $x135) $x28) $x134)))
 (let (($x147 (and (and (and $x52 $x119) $x35) $x127)))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x23)))
 (let (($x33 (or false $x18)))
 (let (($x72 (or $x61 $x33)))
 (let (($x148 (and $x72 $x147)))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x206 (and $x151 $x155)))
 (let (($x187 (=> $x206 $x186)))
 (let (($x75 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x46 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x46) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x75 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xe0005200)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var296X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var296X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var296X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x40000200)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!14))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffa)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0dd98b9c)
  (define-fun input.ind-%var296X.2.1 () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.ind-%var296X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var296X.2.0 () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0dd98b9f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0dd98b9c)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!2 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!1 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
    (let ((a!3 (ite (bvule #x0dd98ba0 x!0)
                    (ite (bvule #x7ffffffa x!0)
                         (ite (bvule #x7ffffffb x!0) a!2 #x7ffffffa)
                         #x0dd98ba0)
                    #x0dd98b9f)))
      (ite (bvule #x0dd98b9c x!0)
           (ite (bvule #x0dd98b9d x!0)
                (ite (bvule #x0dd98b9f x!0) a!3 #x0dd98b9d)
                #x0dd98b9c)
           #x00000000)))))
  (define-fun k!13!16 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x0dd98b9c) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x0dd98b9d) #x03
    (ite (= x!0 #x0dd98b9f) #x03
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x7ffffffd) #x01
      #x02)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!13!16 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x08)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var296X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var296X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var296X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv1 32)))))
 (let ((?x170 (concat ?x168 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var296X)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv3 32)))))
 (let ((?x182 (concat ?x178 (concat ?x203 ?x170))))
 (let (($x212 (= input.ind-%var296X.2.1 ?x182)))
 (let (($x175 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x200 (=> $x175 $x212)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var296X))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv2 32))) ?x163)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv3 32))) ?x164)))
 (let (($x207 (= input.ind-%var296X.2.0 ?x172)))
 (let (($x184 (=> $x175 $x207)))
 (let (($x204 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x10 (ite $x204 (_ bv0 32) (_ bv1 32))))
 (let (($x162 (bvuge ?x10 (_ bv1 32))))
 (let (($x183 (= $x175 $x162)))
 (let (($x155 (= false false)))
 (let (($x76 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x12 (=> $x76 $x155)))
 (let (($x209 (= ?x10 (_ bv0 32))))
 (let (($x213 (= $x76 $x209)))
 (let (($x161 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x187 (and (and (and (and (and $x161 $x213) $x12) $x183) $x184) $x200)))
 (let (($x160 (not true)))
 (let (($x193 (or $x160 $x187)))
 (let (($x159 (= true true)))
 (let (($x232 (and $x159 $x193)))
 (let (($x20 (= $x232 true)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x157 $x155)))
 (let (($x196 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x48 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x180 (= $x48 $x196)))
 (let (($x152 (= (_ bv0 32) (_ bv0 32))))
 (let (($x158 (= $x157 $x152)))
 (let (($x173 (and (and $x158 $x180) $x206)))
 (let (($x25 (= $x173 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x129 (concat ?x111 (concat ?x123 ?x108)))))
 (let (($x112 (= input.dst.llvm-%val ?x107)))
 (let ((?x116 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x116)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x93 $x106)))
 (let (($x118 (and $x96 $x97)))
 (let (($x110 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x110 $x118)))
 (let (($x87 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x99 (and (and (and $x31 $x87) $x74) $x112)))
 (let (($x17 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (and $x17 $x99)))
 (let ((?x14 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x80 (and (and (and (and true (= ?x69 (_ bv1 8))) (= ?x30 (_ bv1 8))) (= ?x62 (_ bv1 8))) (= ?x57 (_ bv1 8)))))
 (let (($x143 (and (and (and (and $x80 (= ?x82 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x14) (_ bv1 8)))))
 (let (($x35 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x146 (=> $x35 (or false (or false $x143)))))
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x44 (or $x68 $x146)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x117 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x131 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x26 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x135 (and true $x26)))
 (let (($x70 (and $x26 $x135)))
 (let (($x77 (and (and (and $x135 $x70) $x28) $x131)))
 (let (($x148 (and (and (and $x77 $x117) $x44) $x126)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x14)))
 (let (($x72 (or false $x53)))
 (let (($x47 (or $x68 $x72)))
 (let (($x149 (and $x47 $x148)))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x154 (= $x151 true)))
 (let (($x210 (and $x154 $x25)))
 (let (($x19 (=> $x210 $x20)))
 (let (($x33 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x61 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x61) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x33 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var296X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var296X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var296X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv1 32)))))
 (let ((?x170 (concat ?x168 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var296X)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv3 32)))))
 (let ((?x182 (concat ?x178 (concat ?x203 ?x170))))
 (let (($x212 (= input.ind-%var296X.2.1 ?x182)))
 (let (($x175 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x200 (=> $x175 $x212)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var296X))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv2 32))) ?x163)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv3 32))) ?x164)))
 (let (($x207 (= input.ind-%var296X.2.0 ?x172)))
 (let (($x184 (=> $x175 $x207)))
 (let (($x204 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x10 (ite $x204 (_ bv0 32) (_ bv1 32))))
 (let (($x162 (bvuge ?x10 (_ bv1 32))))
 (let (($x183 (= $x175 $x162)))
 (let (($x155 (= false false)))
 (let (($x76 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x12 (=> $x76 $x155)))
 (let (($x209 (= ?x10 (_ bv0 32))))
 (let (($x213 (= $x76 $x209)))
 (let (($x161 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x187 (and (and (and (and (and $x161 $x213) $x12) $x183) $x184) $x200)))
 (let (($x160 (not true)))
 (let (($x193 (or $x160 $x187)))
 (let (($x159 (= true true)))
 (let (($x232 (and $x159 $x193)))
 (let (($x20 (= $x232 true)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x157 $x155)))
 (let (($x196 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x48 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x180 (= $x48 $x196)))
 (let (($x152 (= (_ bv0 32) (_ bv0 32))))
 (let (($x158 (= $x157 $x152)))
 (let (($x173 (and (and $x158 $x180) $x206)))
 (let (($x25 (= $x173 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x129 (concat ?x111 (concat ?x123 ?x108)))))
 (let (($x112 (= input.dst.llvm-%val ?x107)))
 (let ((?x116 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x116)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x93 $x106)))
 (let (($x118 (and $x96 $x97)))
 (let (($x110 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x110 $x118)))
 (let (($x87 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x99 (and (and (and $x31 $x87) $x74) $x112)))
 (let (($x17 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (and $x17 $x99)))
 (let ((?x14 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x80 (and (and (and (and true (= ?x69 (_ bv1 8))) (= ?x30 (_ bv1 8))) (= ?x62 (_ bv1 8))) (= ?x57 (_ bv1 8)))))
 (let (($x143 (and (and (and (and $x80 (= ?x82 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x14) (_ bv1 8)))))
 (let (($x35 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x146 (=> $x35 (or false (or false $x143)))))
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x44 (or $x68 $x146)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x117 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x131 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x26 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x135 (and true $x26)))
 (let (($x70 (and $x26 $x135)))
 (let (($x77 (and (and (and $x135 $x70) $x28) $x131)))
 (let (($x148 (and (and (and $x77 $x117) $x44) $x126)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x14)))
 (let (($x72 (or false $x53)))
 (let (($x47 (or $x68 $x72)))
 (let (($x149 (and $x47 $x148)))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x154 (= $x151 true)))
 (let (($x210 (and $x154 $x25)))
 (let (($x19 (=> $x210 $x20)))
 (let (($x33 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x61 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x61) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x33 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xe0005200)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var296X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var296X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var296X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x40000200)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!14))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffa)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0dd98b9c)
  (define-fun input.ind-%var296X.2.1 () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.ind-%var296X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var296X.2.0 () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0dd98b9f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0dd98b9c)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!2 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!1 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
    (let ((a!3 (ite (bvule #x0dd98ba0 x!0)
                    (ite (bvule #x7ffffffa x!0)
                         (ite (bvule #x7ffffffb x!0) a!2 #x7ffffffa)
                         #x0dd98ba0)
                    #x0dd98b9f)))
      (ite (bvule #x0dd98b9c x!0)
           (ite (bvule #x0dd98b9d x!0)
                (ite (bvule #x0dd98b9f x!0) a!3 #x0dd98b9d)
                #x0dd98b9c)
           #x00000000)))))
  (define-fun k!13!16 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x0dd98b9c) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x0dd98b9d) #x03
    (ite (= x!0 #x0dd98b9f) #x03
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x7ffffffd) #x01
      #x02)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!13!16 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x08)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var296X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var296X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var296X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv1 32)))))
 (let ((?x225 (concat ?x224 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var296X)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv2 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv3 32)))))
 (let ((?x220 (concat ?x217 (concat ?x222 ?x225))))
 (let (($x223 (= input.ind-%var296X.2.1 ?x220)))
 (let (($x208 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x226 (=> $x208 $x223)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var296X))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv2 32))) ?x189)))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv3 32))) ?x176)))
 (let (($x230 (= input.ind-%var296X.2.0 ?x215)))
 (let (($x185 (=> $x208 $x230)))
 (let (($x203 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x181 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x181 (_ bv1 32))))
 (let (($x212 (= $x208 $x182)))
 (let (($x155 (= false false)))
 (let (($x199 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x170 (=> $x199 $x155)))
 (let (($x168 (= ?x181 (_ bv0 32))))
 (let (($x177 (= $x199 $x168)))
 (let (($x174 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x234 (and (and (and (and (and $x174 $x177) $x170) $x212) $x185) $x226)))
 (let (($x166 (not true)))
 (let (($x267 (or $x166 $x234)))
 (let (($x186 (= true true)))
 (let (($x235 (and $x186 $x267)))
 (let (($x236 (= $x235 true)))
 (let (($x180 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x169 (= $x50 $x180)))
 (let (($x204 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x213 (and $x196 $x204)))
 (let (($x201 (=> $x213 $x169)))
 (let (($x158 (= (_ bv0 32) (_ bv0 32))))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x183 (= $x162 $x158)))
 (let (($x191 (=> $x213 $x183)))
 (let (($x12 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x214 (=> $x213 $x12)))
 (let (($x10 (= $x204 $x180)))
 (let (($x209 (=> $x196 $x10)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x211 (and $x196 $x160)))
 (let (($x76 (=> $x211 $x155)))
 (let (($x171 (= $x160 $x158)))
 (let (($x161 (=> $x196 $x171)))
 (let (($x25 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x210 (=> $x196 $x25)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x152 $x155)))
 (let (($x198 (and (and (and (and (and (= $x152 $x158) (= $x196 $x180)) $x206) $x210) $x161) $x76)))
 (let (($x172 (and (and (and (and $x198 $x209) $x214) $x191) $x201)))
 (let (($x207 (= $x172 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x123 (concat ?x132 (concat ?x120 ?x74)))))
 (let (($x125 (= input.dst.llvm-%val ?x108)))
 (let ((?x106 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x106)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x27 $x93)))
 (let (($x116 (and $x115 $x96)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x109 $x116)))
 (let (($x8 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x112 (and (and (and $x145 $x8) $x97) $x125)))
 (let (($x140 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x99 (and $x140 $x112)))
 (let ((?x51 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x138 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x34 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x81 (and (and (and (and true (= ?x64 (_ bv1 8))) (= ?x65 (_ bv1 8))) (= ?x78 (_ bv1 8))) (= ?x34 (_ bv1 8)))))
 (let (($x11 (and (and (and (and $x81 (= ?x83 (_ bv1 8))) (= ?x90 (_ bv1 8))) (= ?x138 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x51) (_ bv1 8)))))
 (let (($x44 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x147 (=> $x44 (or false (or false $x11)))))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (or $x122 $x147)))
 (let ((?x136 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x127 (= (bvand ?x136 (_ bv4294967292 32)) ?x136)))
 (let (($x79 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x136 (bvsub ?x136 (_ bv4 32))) (bvult ?x136 (bvsub ?x136 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x135 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x70 (and true $x135)))
 (let (($x134 (and $x135 $x70)))
 (let (($x119 (and (and (and $x70 $x134) $x28) $x79)))
 (let (($x149 (and (and (and $x119 $x127) $x124) $x99)))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x51)))
 (let (($x47 (or false $x18)))
 (let (($x71 (or $x122 $x47)))
 (let (($x150 (and $x71 $x149)))
 (let (($x151 (= $x150 true)))
 (let (($x154 (= $x151 true)))
 (let (($x153 (= $x154 true)))
 (let (($x184 (and $x153 $x207)))
 (let (($x237 (=> $x184 $x236)))
 (let (($x72 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x68 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x63 $x68) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x72 (not $x237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var296X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var296X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var296X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv1 32)))))
 (let ((?x225 (concat ?x224 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var296X)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv2 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv3 32)))))
 (let ((?x220 (concat ?x217 (concat ?x222 ?x225))))
 (let (($x223 (= input.ind-%var296X.2.1 ?x220)))
 (let (($x208 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x226 (=> $x208 $x223)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var296X))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv2 32))) ?x189)))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv3 32))) ?x176)))
 (let (($x230 (= input.ind-%var296X.2.0 ?x215)))
 (let (($x185 (=> $x208 $x230)))
 (let (($x203 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x181 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x181 (_ bv1 32))))
 (let (($x212 (= $x208 $x182)))
 (let (($x155 (= false false)))
 (let (($x199 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x170 (=> $x199 $x155)))
 (let (($x168 (= ?x181 (_ bv0 32))))
 (let (($x177 (= $x199 $x168)))
 (let (($x174 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x234 (and (and (and (and (and $x174 $x177) $x170) $x212) $x185) $x226)))
 (let (($x166 (not true)))
 (let (($x267 (or $x166 $x234)))
 (let (($x186 (= true true)))
 (let (($x235 (and $x186 $x267)))
 (let (($x236 (= $x235 true)))
 (let (($x180 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x169 (= $x50 $x180)))
 (let (($x204 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x213 (and $x196 $x204)))
 (let (($x201 (=> $x213 $x169)))
 (let (($x158 (= (_ bv0 32) (_ bv0 32))))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x183 (= $x162 $x158)))
 (let (($x191 (=> $x213 $x183)))
 (let (($x12 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x214 (=> $x213 $x12)))
 (let (($x10 (= $x204 $x180)))
 (let (($x209 (=> $x196 $x10)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x211 (and $x196 $x160)))
 (let (($x76 (=> $x211 $x155)))
 (let (($x171 (= $x160 $x158)))
 (let (($x161 (=> $x196 $x171)))
 (let (($x25 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x210 (=> $x196 $x25)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x152 $x155)))
 (let (($x198 (and (and (and (and (and (= $x152 $x158) (= $x196 $x180)) $x206) $x210) $x161) $x76)))
 (let (($x172 (and (and (and (and $x198 $x209) $x214) $x191) $x201)))
 (let (($x207 (= $x172 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x123 (concat ?x132 (concat ?x120 ?x74)))))
 (let (($x125 (= input.dst.llvm-%val ?x108)))
 (let ((?x106 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x106)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x27 $x93)))
 (let (($x116 (and $x115 $x96)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x109 $x116)))
 (let (($x8 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x112 (and (and (and $x145 $x8) $x97) $x125)))
 (let (($x140 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x99 (and $x140 $x112)))
 (let ((?x51 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x138 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x34 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x81 (and (and (and (and true (= ?x64 (_ bv1 8))) (= ?x65 (_ bv1 8))) (= ?x78 (_ bv1 8))) (= ?x34 (_ bv1 8)))))
 (let (($x11 (and (and (and (and $x81 (= ?x83 (_ bv1 8))) (= ?x90 (_ bv1 8))) (= ?x138 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x51) (_ bv1 8)))))
 (let (($x44 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x147 (=> $x44 (or false (or false $x11)))))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (or $x122 $x147)))
 (let ((?x136 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x127 (= (bvand ?x136 (_ bv4294967292 32)) ?x136)))
 (let (($x79 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x136 (bvsub ?x136 (_ bv4 32))) (bvult ?x136 (bvsub ?x136 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x135 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x70 (and true $x135)))
 (let (($x134 (and $x135 $x70)))
 (let (($x119 (and (and (and $x70 $x134) $x28) $x79)))
 (let (($x149 (and (and (and $x119 $x127) $x124) $x99)))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x51)))
 (let (($x47 (or false $x18)))
 (let (($x71 (or $x122 $x47)))
 (let (($x150 (and $x71 $x149)))
 (let (($x151 (= $x150 true)))
 (let (($x154 (= $x151 true)))
 (let (($x153 (= $x154 true)))
 (let (($x184 (and $x153 $x207)))
 (let (($x237 (=> $x184 $x236)))
 (let (($x72 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x68 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x63 $x68) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x72 (not $x237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xe0005200)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var296X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var296X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var296X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x40000200)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!14))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffa)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0dd98b9c)
  (define-fun input.ind-%var296X.2.1 () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.ind-%var296X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var296X.2.0 () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0dd98b9f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0dd98b9c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!2 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!1 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
    (let ((a!3 (ite (bvule #x0dd98ba0 x!0)
                    (ite (bvule #x7ffffffa x!0)
                         (ite (bvule #x7ffffffb x!0) a!2 #x7ffffffa)
                         #x0dd98ba0)
                    #x0dd98b9f)))
      (ite (bvule #x0dd98b9c x!0)
           (ite (bvule #x0dd98b9d x!0)
                (ite (bvule #x0dd98b9f x!0) a!3 #x0dd98b9d)
                #x0dd98b9c)
           #x00000000)))))
  (define-fun k!13!16 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x0dd98b9c) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x0dd98b9d) #x03
    (ite (= x!0 #x0dd98b9f) #x03
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x7ffffffd) #x01
      #x02)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!13!16 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x08)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var296X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var296X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var296X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv1 32)))))
 (let ((?x262 (concat ?x261 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var296X)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv2 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv3 32)))))
 (let ((?x257 (concat ?x254 (concat ?x259 ?x262))))
 (let (($x260 (= input.ind-%var296X.2.1 ?x257)))
 (let (($x236 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x263 (=> $x236 $x260)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var296X))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv2 32))) ?x244)))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv3 32))) ?x242)))
 (let (($x249 (= input.ind-%var296X.2.0 ?x246)))
 (let (($x250 (=> $x236 $x249)))
 (let (($x223 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x226 (ite $x223 (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge ?x226 (_ bv1 32))))
 (let (($x268 (= $x236 $x237)))
 (let (($x155 (= false false)))
 (let (($x220 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x235 (=> $x220 $x155)))
 (let (($x234 (= ?x226 (_ bv0 32))))
 (let (($x267 (= $x220 $x234)))
 (let (($x225 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x272 (and (and (and (and (and $x225 $x267) $x235) $x268) $x250) $x263)))
 (let (($x224 (not true)))
 (let (($x273 (or $x224 $x272)))
 (let (($x231 (= true true)))
 (let (($x274 (and $x231 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x156 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x233 (= $x212 $x156)))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x179 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x180 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x198 (and $x180 $x179)))
 (let (($x191 (and $x198 $x214)))
 (let (($x199 (and $x191 $x167)))
 (let (($x200 (=> $x199 $x233)))
 (let (($x227 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x208 (and $x199 $x227)))
 (let (($x182 (=> $x208 $x155)))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let (($x170 (= $x227 $x48)))
 (let (($x228 (=> $x199 $x170)))
 (let (($x181 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x168 (=> $x199 $x181)))
 (let (($x174 (= $x167 $x156)))
 (let (($x178 (=> $x191 $x174)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x186 (and $x191 $x172)))
 (let (($x166 (=> $x186 $x155)))
 (let (($x207 (= $x172 $x48)))
 (let (($x184 (=> $x191 $x207)))
 (let (($x50 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x169 (=> $x191 $x50)))
 (let (($x213 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x162 (and $x198 $x213)))
 (let (($x183 (=> $x162 $x155)))
 (let (($x163 (= $x214 $x156)))
 (let (($x175 (=> $x198 $x163)))
 (let (($x188 (= $x213 $x48)))
 (let (($x12 (=> $x198 $x188)))
 (let (($x10 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x209 (=> $x198 $x10)))
 (let (($x211 (= $x179 $x156)))
 (let (($x76 (=> $x180 $x211)))
 (let (($x197 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x171 (and $x180 $x197)))
 (let (($x161 (=> $x171 $x155)))
 (let (($x159 (= $x197 $x48)))
 (let (($x160 (=> $x180 $x159)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x25 (=> $x180 $x173)))
 (let (($x158 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x158 $x155)))
 (let (($x7 (and (and (and (and (and (= $x158 $x48) (= $x180 $x156)) $x206) $x25) $x160) $x161)))
 (let (($x215 (and (and (and (and (and (and $x7 $x76) $x209) $x12) $x175) $x183) $x169)))
 (let (($x219 (and (and (and (and (and (and $x215 $x184) $x166) $x178) $x168) $x228) $x182)))
 (let (($x217 (and $x219 $x200)))
 (let (($x221 (= $x217 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x120 (concat ?x129 (concat ?x118 ?x97)))))
 (let (($x114 (= input.dst.llvm-%val ?x74)))
 (let ((?x93 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x93)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x87 $x27)))
 (let (($x106 (and $x110 $x115)))
 (let (($x113 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x113 $x106)))
 (let (($x105 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x125 (and (and (and $x17 $x105) $x96) $x114)))
 (let (($x13 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x112 (and $x13 $x125)))
 (let ((?x29 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x139 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x82 (and (and (and (and true (= ?x58 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x73 (_ bv1 8))) (= ?x80 (_ bv1 8)))))
 (let (($x121 (and (and (and (and $x82 (= ?x84 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x139 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x29) (_ bv1 8)))))
 (let (($x124 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x148 (=> $x124 (or false (or false $x121)))))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x16 (or $x32 $x148)))
 (let ((?x52 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x126 (= (bvand ?x52 (_ bv4294967292 32)) ?x52)))
 (let (($x21 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x52 (bvsub ?x52 (_ bv4 32))) (bvult ?x52 (bvsub ?x52 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x134 (and true $x70)))
 (let (($x131 (and $x70 $x134)))
 (let (($x117 (and (and (and $x134 $x131) $x28) $x21)))
 (let (($x150 (and (and (and $x117 $x126) $x16) $x112)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x29)))
 (let (($x71 (or false $x53)))
 (let (($x6 (or $x32 $x71)))
 (let (($x151 (and $x6 $x150)))
 (let (($x154 (= $x151 true)))
 (let (($x153 (= $x154 true)))
 (let (($x157 (= $x153 true)))
 (let (($x222 (and $x157 $x221)))
 (let (($x276 (=> $x222 $x275)))
 (let (($x47 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x122 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x54 $x122) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x47 (not $x276))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var296X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var296X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var296X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv1 32)))))
 (let ((?x262 (concat ?x261 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var296X)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv2 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var296X) (_ bv3 32)))))
 (let ((?x257 (concat ?x254 (concat ?x259 ?x262))))
 (let (($x260 (= input.ind-%var296X.2.1 ?x257)))
 (let (($x236 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x263 (=> $x236 $x260)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var296X))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv2 32))) ?x244)))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd input.ind-%var296X (_ bv3 32))) ?x242)))
 (let (($x249 (= input.ind-%var296X.2.0 ?x246)))
 (let (($x250 (=> $x236 $x249)))
 (let (($x223 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x226 (ite $x223 (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge ?x226 (_ bv1 32))))
 (let (($x268 (= $x236 $x237)))
 (let (($x155 (= false false)))
 (let (($x220 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x235 (=> $x220 $x155)))
 (let (($x234 (= ?x226 (_ bv0 32))))
 (let (($x267 (= $x220 $x234)))
 (let (($x225 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x272 (and (and (and (and (and $x225 $x267) $x235) $x268) $x250) $x263)))
 (let (($x224 (not true)))
 (let (($x273 (or $x224 $x272)))
 (let (($x231 (= true true)))
 (let (($x274 (and $x231 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x156 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x233 (= $x212 $x156)))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x179 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x180 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x198 (and $x180 $x179)))
 (let (($x191 (and $x198 $x214)))
 (let (($x199 (and $x191 $x167)))
 (let (($x200 (=> $x199 $x233)))
 (let (($x227 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x208 (and $x199 $x227)))
 (let (($x182 (=> $x208 $x155)))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let (($x170 (= $x227 $x48)))
 (let (($x228 (=> $x199 $x170)))
 (let (($x181 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x168 (=> $x199 $x181)))
 (let (($x174 (= $x167 $x156)))
 (let (($x178 (=> $x191 $x174)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x186 (and $x191 $x172)))
 (let (($x166 (=> $x186 $x155)))
 (let (($x207 (= $x172 $x48)))
 (let (($x184 (=> $x191 $x207)))
 (let (($x50 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x169 (=> $x191 $x50)))
 (let (($x213 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x162 (and $x198 $x213)))
 (let (($x183 (=> $x162 $x155)))
 (let (($x163 (= $x214 $x156)))
 (let (($x175 (=> $x198 $x163)))
 (let (($x188 (= $x213 $x48)))
 (let (($x12 (=> $x198 $x188)))
 (let (($x10 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x209 (=> $x198 $x10)))
 (let (($x211 (= $x179 $x156)))
 (let (($x76 (=> $x180 $x211)))
 (let (($x197 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x171 (and $x180 $x197)))
 (let (($x161 (=> $x171 $x155)))
 (let (($x159 (= $x197 $x48)))
 (let (($x160 (=> $x180 $x159)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x25 (=> $x180 $x173)))
 (let (($x158 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (=> $x158 $x155)))
 (let (($x7 (and (and (and (and (and (= $x158 $x48) (= $x180 $x156)) $x206) $x25) $x160) $x161)))
 (let (($x215 (and (and (and (and (and (and $x7 $x76) $x209) $x12) $x175) $x183) $x169)))
 (let (($x219 (and (and (and (and (and (and $x215 $x184) $x166) $x178) $x168) $x228) $x182)))
 (let (($x217 (and $x219 $x200)))
 (let (($x221 (= $x217 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x120 (concat ?x129 (concat ?x118 ?x97)))))
 (let (($x114 (= input.dst.llvm-%val ?x74)))
 (let ((?x93 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x93)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x87 $x27)))
 (let (($x106 (and $x110 $x115)))
 (let (($x113 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x113 $x106)))
 (let (($x105 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x125 (and (and (and $x17 $x105) $x96) $x114)))
 (let (($x13 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x112 (and $x13 $x125)))
 (let ((?x29 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x139 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x82 (and (and (and (and true (= ?x58 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x73 (_ bv1 8))) (= ?x80 (_ bv1 8)))))
 (let (($x121 (and (and (and (and $x82 (= ?x84 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= ?x139 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x29) (_ bv1 8)))))
 (let (($x124 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x148 (=> $x124 (or false (or false $x121)))))
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x16 (or $x32 $x148)))
 (let ((?x52 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x126 (= (bvand ?x52 (_ bv4294967292 32)) ?x52)))
 (let (($x21 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x52 (bvsub ?x52 (_ bv4 32))) (bvult ?x52 (bvsub ?x52 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x134 (and true $x70)))
 (let (($x131 (and $x70 $x134)))
 (let (($x117 (and (and (and $x134 $x131) $x28) $x21)))
 (let (($x150 (and (and (and $x117 $x126) $x16) $x112)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x29)))
 (let (($x71 (or false $x53)))
 (let (($x6 (or $x32 $x71)))
 (let (($x151 (and $x6 $x150)))
 (let (($x154 (= $x151 true)))
 (let (($x153 (= $x154 true)))
 (let (($x157 (= $x153 true)))
 (let (($x222 (and $x157 $x221)))
 (let (($x276 (=> $x222 $x275)))
 (let (($x47 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x122 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x54 $x122) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x47 (not $x276))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xe0005200)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var296X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var296X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var296X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x40000200)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!14))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffa)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0dd98b9c)
  (define-fun input.ind-%var296X.2.1 () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.ind-%var296X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var296X.2.0 () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xf7f7f7f7)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0dd98b9f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0dd98b9c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!2 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!1 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
    (let ((a!3 (ite (bvule #x0dd98ba0 x!0)
                    (ite (bvule #x7ffffffa x!0)
                         (ite (bvule #x7ffffffb x!0) a!2 #x7ffffffa)
                         #x0dd98ba0)
                    #x0dd98b9f)))
      (ite (bvule #x0dd98b9c x!0)
           (ite (bvule #x0dd98b9d x!0)
                (ite (bvule #x0dd98b9f x!0) a!3 #x0dd98b9d)
                #x0dd98b9c)
           #x00000000)))))
  (define-fun k!13!16 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x0dd98b9c) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x0dd98b9d) #x03
    (ite (= x!0 #x0dd98b9f) #x03
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x7ffffffd) #x01
      #x02)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!13!16 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x08)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x41 (= false true)))
 (let (($x173 (= $x41 true)))
 (let (($x202 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (= $x156 $x202)))
 (let (($x196 (= (_ bv0 32) (_ bv0 32))))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x180 (= $x48 $x196)))
 (let (($x155 (and $x180 $x193)))
 (let (($x206 (= $x155 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x118 (concat ?x123 (concat ?x116 ?x96)))))
 (let (($x98 (= input.dst.llvm-%val ?x97)))
 (let ((?x27 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x27)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x8 $x87)))
 (let (($x93 (and $x109 $x110)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x111 $x93)))
 (let (($x141 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x114 (and (and (and $x140 $x141) $x115) $x98)))
 (let (($x88 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x125 (and $x88 $x114)))
 (let ((?x23 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x60 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x83 (and (and (and (and true (= ?x9 (_ bv1 8))) (= ?x66 (_ bv1 8))) (= ?x60 (_ bv1 8))) (= ?x81 (_ bv1 8)))))
 (let (($x146 (and (and (and (and $x83 (= ?x85 (_ bv1 8))) (= ?x92 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x23) (_ bv1 8)))))
 (let (($x16 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x149 (=> $x16 (or false (or false $x146)))))
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x144 (or $x75 $x149)))
 (let ((?x77 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x99 (= (bvand ?x77 (_ bv4294967292 32)) ?x77)))
 (let (($x39 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x77 (bvsub ?x77 (_ bv4 32))) (bvult ?x77 (bvsub ?x77 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x134 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x131 (and true $x134)))
 (let (($x79 (and $x134 $x131)))
 (let (($x127 (and (and (and $x131 $x79) $x28) $x39)))
 (let (($x151 (and (and (and $x127 $x99) $x144) $x125)))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x23)))
 (let (($x6 (or false $x18)))
 (let (($x36 (or $x75 $x6)))
 (let (($x154 (and $x36 $x151)))
 (let (($x153 (= $x154 true)))
 (let (($x157 (= $x153 true)))
 (let (($x152 (= $x157 true)))
 (let (($x229 (and $x152 $x206)))
 (let (($x25 (=> $x229 $x173)))
 (let (($x71 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x71 (not $x25))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x41 (= false true)))
 (let (($x173 (= $x41 true)))
 (let (($x202 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (= $x156 $x202)))
 (let (($x196 (= (_ bv0 32) (_ bv0 32))))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x180 (= $x48 $x196)))
 (let (($x155 (and $x180 $x193)))
 (let (($x206 (= $x155 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x118 (concat ?x123 (concat ?x116 ?x96)))))
 (let (($x98 (= input.dst.llvm-%val ?x97)))
 (let ((?x27 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x27)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x8 $x87)))
 (let (($x93 (and $x109 $x110)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x111 $x93)))
 (let (($x141 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x114 (and (and (and $x140 $x141) $x115) $x98)))
 (let (($x88 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x125 (and $x88 $x114)))
 (let ((?x23 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x60 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x83 (and (and (and (and true (= ?x9 (_ bv1 8))) (= ?x66 (_ bv1 8))) (= ?x60 (_ bv1 8))) (= ?x81 (_ bv1 8)))))
 (let (($x146 (and (and (and (and $x83 (= ?x85 (_ bv1 8))) (= ?x92 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x23) (_ bv1 8)))))
 (let (($x16 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x149 (=> $x16 (or false (or false $x146)))))
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x144 (or $x75 $x149)))
 (let ((?x77 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x99 (= (bvand ?x77 (_ bv4294967292 32)) ?x77)))
 (let (($x39 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x77 (bvsub ?x77 (_ bv4 32))) (bvult ?x77 (bvsub ?x77 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x134 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x131 (and true $x134)))
 (let (($x79 (and $x134 $x131)))
 (let (($x127 (and (and (and $x131 $x79) $x28) $x39)))
 (let (($x151 (and (and (and $x127 $x99) $x144) $x125)))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x23)))
 (let (($x6 (or false $x18)))
 (let (($x36 (or $x75 $x6)))
 (let (($x154 (and $x36 $x151)))
 (let (($x153 (= $x154 true)))
 (let (($x157 (= $x153 true)))
 (let (($x152 (= $x157 true)))
 (let (($x229 (and $x152 $x206)))
 (let (($x25 (=> $x229 $x173)))
 (let (($x71 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x71 (not $x25))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x61 (= false true)))
 (let (($x197 (= $x61 true)))
 (let (($x202 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x229 (not $x202)))
 (let (($x196 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (not $x196)))
 (let (($x25 (and (and (and (= $x196 (= (_ bv0 32) (_ bv0 32))) (= $x202 (bvuge (_ bv0 32) (_ bv1 32)))) $x206) $x229)))
 (let (($x190 (= $x25 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x116 (concat ?x120 (concat ?x106 ?x115)))))
 (let (($x100 (= input.dst.llvm-%val ?x96)))
 (let ((?x87 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x87)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x105 $x8)))
 (let (($x27 (and $x113 $x109)))
 (let (($x132 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x132 $x27)))
 (let (($x45 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x98 (and (and (and $x13 $x45) $x110) $x100)))
 (let (($x69 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x114 (and $x69 $x98)))
 (let ((?x14 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x40 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x84 (and (and (and (and true (= ?x30 (_ bv1 8))) (= ?x56 (_ bv1 8))) (= ?x40 (_ bv1 8))) (= ?x82 (_ bv1 8)))))
 (let (($x147 (and (and (and (and $x84 (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x14) (_ bv1 8)))))
 (let (($x144 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x150 (=> $x144 (or false (or false $x147)))))
 (let (($x33 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (or $x33 $x150)))
 (let ((?x119 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x112 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x42 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x119 (bvsub ?x119 (_ bv4 32))) (bvult ?x119 (bvsub ?x119 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x131 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x79 (and true $x131)))
 (let (($x21 (and $x131 $x79)))
 (let (($x126 (and (and (and $x79 $x21) $x28) $x42)))
 (let (($x154 (and (and (and $x126 $x112) $x43) $x114)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x14)))
 (let (($x36 (or false $x53)))
 (let (($x26 (or $x33 $x36)))
 (let (($x153 (and $x26 $x154)))
 (let (($x157 (= $x153 true)))
 (let (($x152 (= $x157 true)))
 (let (($x158 (= $x152 true)))
 (let (($x210 (and $x158 $x190)))
 (let (($x159 (=> $x210 $x197)))
 (let (($x6 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x75 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x75) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x6 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x61 (= false true)))
 (let (($x197 (= $x61 true)))
 (let (($x202 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x229 (not $x202)))
 (let (($x196 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x206 (not $x196)))
 (let (($x25 (and (and (and (= $x196 (= (_ bv0 32) (_ bv0 32))) (= $x202 (bvuge (_ bv0 32) (_ bv1 32)))) $x206) $x229)))
 (let (($x190 (= $x25 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x116 (concat ?x120 (concat ?x106 ?x115)))))
 (let (($x100 (= input.dst.llvm-%val ?x96)))
 (let ((?x87 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x87)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x105 $x8)))
 (let (($x27 (and $x113 $x109)))
 (let (($x132 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x132 $x27)))
 (let (($x45 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x98 (and (and (and $x13 $x45) $x110) $x100)))
 (let (($x69 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x114 (and $x69 $x98)))
 (let ((?x14 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x40 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x84 (and (and (and (and true (= ?x30 (_ bv1 8))) (= ?x56 (_ bv1 8))) (= ?x40 (_ bv1 8))) (= ?x82 (_ bv1 8)))))
 (let (($x147 (and (and (and (and $x84 (= ?x86 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x14) (_ bv1 8)))))
 (let (($x144 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x150 (=> $x144 (or false (or false $x147)))))
 (let (($x33 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (or $x33 $x150)))
 (let ((?x119 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x112 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x42 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x119 (bvsub ?x119 (_ bv4 32))) (bvult ?x119 (bvsub ?x119 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x131 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x79 (and true $x131)))
 (let (($x21 (and $x131 $x79)))
 (let (($x126 (and (and (and $x79 $x21) $x28) $x42)))
 (let (($x154 (and (and (and $x126 $x112) $x43) $x114)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x14)))
 (let (($x36 (or false $x53)))
 (let (($x26 (or $x33 $x36)))
 (let (($x153 (and $x26 $x154)))
 (let (($x157 (= $x153 true)))
 (let (($x152 (= $x157 true)))
 (let (($x158 (= $x152 true)))
 (let (($x210 (and $x158 $x190)))
 (let (($x159 (=> $x210 $x197)))
 (let (($x6 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x75 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x75) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x6 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x61 (= false true)))
 (let (($x197 (= $x61 true)))
 (let (($x206 (= false false)))
 (let (($x180 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x173 (=> $x180 $x206)))
 (let (($x155 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x41 (= $x193 $x155)))
 (let (($x156 (= (_ bv0 32) (_ bv0 32))))
 (let (($x202 (= $x180 $x156)))
 (let (($x25 (and (and $x202 $x41) $x173)))
 (let (($x190 (= $x25 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x106 (concat ?x118 (concat ?x93 ?x110)))))
 (let (($x107 (= input.dst.llvm-%val ?x115)))
 (let ((?x8 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x8)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x141 $x105)))
 (let (($x87 (and $x111 $x113)))
 (let (($x129 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x129 $x87)))
 (let (($x31 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x100 (and (and (and $x88 $x31) $x109) $x107)))
 (let (($x64 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x98 (and $x64 $x100)))
 (let ((?x51 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x143 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x85 (and (and (and (and true (= ?x65 (_ bv1 8))) (= ?x62 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x83 (_ bv1 8)))))
 (let (($x148 (and (and (and (and $x85 (= ?x89 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= ?x143 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x51) (_ bv1 8)))))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x151 (=> $x43 (or false (or false $x148)))))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x35 (or $x72 $x151)))
 (let ((?x117 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x125 (= (bvand ?x117 (_ bv4294967292 32)) ?x117)))
 (let (($x22 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x117 (bvsub ?x117 (_ bv4 32))) (bvult ?x117 (bvsub ?x117 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x79 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x21 (and true $x79)))
 (let (($x39 (and $x79 $x21)))
 (let (($x99 (and (and (and $x21 $x39) $x28) $x22)))
 (let (($x153 (and (and (and $x99 $x125) $x35) $x98)))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x51)))
 (let (($x26 (or false $x18)))
 (let (($x135 (or $x72 $x26)))
 (let (($x157 (and $x135 $x153)))
 (let (($x152 (= $x157 true)))
 (let (($x158 (= $x152 true)))
 (let (($x48 (= $x158 true)))
 (let (($x210 (and $x48 $x190)))
 (let (($x159 (=> $x210 $x197)))
 (let (($x36 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x33 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x63 $x33) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x36 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x61 (= false true)))
 (let (($x197 (= $x61 true)))
 (let (($x206 (= false false)))
 (let (($x180 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x173 (=> $x180 $x206)))
 (let (($x155 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x41 (= $x193 $x155)))
 (let (($x156 (= (_ bv0 32) (_ bv0 32))))
 (let (($x202 (= $x180 $x156)))
 (let (($x25 (and (and $x202 $x41) $x173)))
 (let (($x190 (= $x25 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x106 (concat ?x118 (concat ?x93 ?x110)))))
 (let (($x107 (= input.dst.llvm-%val ?x115)))
 (let ((?x8 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x8)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x141 $x105)))
 (let (($x87 (and $x111 $x113)))
 (let (($x129 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x129 $x87)))
 (let (($x31 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x100 (and (and (and $x88 $x31) $x109) $x107)))
 (let (($x64 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x98 (and $x64 $x100)))
 (let ((?x51 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x143 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x85 (and (and (and (and true (= ?x65 (_ bv1 8))) (= ?x62 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x83 (_ bv1 8)))))
 (let (($x148 (and (and (and (and $x85 (= ?x89 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= ?x143 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x51) (_ bv1 8)))))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x151 (=> $x43 (or false (or false $x148)))))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x35 (or $x72 $x151)))
 (let ((?x117 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x125 (= (bvand ?x117 (_ bv4294967292 32)) ?x117)))
 (let (($x22 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x117 (bvsub ?x117 (_ bv4 32))) (bvult ?x117 (bvsub ?x117 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x79 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x21 (and true $x79)))
 (let (($x39 (and $x79 $x21)))
 (let (($x99 (and (and (and $x21 $x39) $x28) $x22)))
 (let (($x153 (and (and (and $x99 $x125) $x35) $x98)))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x51)))
 (let (($x26 (or false $x18)))
 (let (($x135 (or $x72 $x26)))
 (let (($x157 (and $x135 $x153)))
 (let (($x152 (= $x157 true)))
 (let (($x158 (= $x152 true)))
 (let (($x48 (= $x158 true)))
 (let (($x210 (and $x48 $x190)))
 (let (($x159 (=> $x210 $x197)))
 (let (($x36 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x33 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x63 $x33) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x36 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x160 (= false true)))
 (let (($x192 (= $x160 true)))
 (let (($x173 (= false false)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x25 (=> $x156 $x173)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x206 (not $x155)))
 (let (($x61 (and (and (and (= $x156 (= (_ bv0 32) (_ bv0 32))) (= $x155 (bvuge (_ bv0 32) (_ bv1 32)))) $x206) $x25)))
 (let (($x197 (= $x61 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x93 (concat ?x116 (concat ?x27 ?x109)))))
 (let (($x108 (= input.dst.llvm-%val ?x110)))
 (let ((?x105 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x105)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x45 $x141)))
 (let (($x8 (and $x132 $x111)))
 (let (($x123 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x123 $x8)))
 (let (($x145 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x107 (and (and (and $x69 $x145) $x113) $x108)))
 (let (($x58 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x100 (and $x58 $x107)))
 (let ((?x29 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x11 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x138 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x34 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x86 (and (and (and (and true (= ?x67 (_ bv1 8))) (= ?x78 (_ bv1 8))) (= ?x34 (_ bv1 8))) (= ?x84 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x86 (= ?x90 (_ bv1 8))) (= ?x138 (_ bv1 8))) (= ?x11 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x29) (_ bv1 8)))))
 (let (($x35 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x154 (=> $x35 (or false (or false $x149)))))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x44 (or $x47 $x154)))
 (let ((?x127 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x114 (= (bvand ?x127 (_ bv4294967292 32)) ?x127)))
 (let (($x136 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x127 (bvsub ?x127 (_ bv4 32))) (bvult ?x127 (bvsub ?x127 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x39 (and true $x21)))
 (let (($x42 (and $x21 $x39)))
 (let (($x112 (and (and (and $x39 $x42) $x28) $x136)))
 (let (($x157 (and (and (and $x112 $x114) $x44) $x100)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x29)))
 (let (($x135 (or false $x53)))
 (let (($x70 (or $x47 $x135)))
 (let (($x152 (and $x70 $x157)))
 (let (($x158 (= $x152 true)))
 (let (($x48 (= $x158 true)))
 (let (($x196 (= $x48 true)))
 (let (($x159 (and $x196 $x197)))
 (let (($x122 (=> $x159 $x192)))
 (let (($x26 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x72 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x54 $x72) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x26 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x160 (= false true)))
 (let (($x192 (= $x160 true)))
 (let (($x173 (= false false)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x25 (=> $x156 $x173)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x206 (not $x155)))
 (let (($x61 (and (and (and (= $x156 (= (_ bv0 32) (_ bv0 32))) (= $x155 (bvuge (_ bv0 32) (_ bv1 32)))) $x206) $x25)))
 (let (($x197 (= $x61 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x93 (concat ?x116 (concat ?x27 ?x109)))))
 (let (($x108 (= input.dst.llvm-%val ?x110)))
 (let ((?x105 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x105)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x45 $x141)))
 (let (($x8 (and $x132 $x111)))
 (let (($x123 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x123 $x8)))
 (let (($x145 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x107 (and (and (and $x69 $x145) $x113) $x108)))
 (let (($x58 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x100 (and $x58 $x107)))
 (let ((?x29 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x11 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x138 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x34 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x86 (and (and (and (and true (= ?x67 (_ bv1 8))) (= ?x78 (_ bv1 8))) (= ?x34 (_ bv1 8))) (= ?x84 (_ bv1 8)))))
 (let (($x149 (and (and (and (and $x86 (= ?x90 (_ bv1 8))) (= ?x138 (_ bv1 8))) (= ?x11 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x29) (_ bv1 8)))))
 (let (($x35 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x154 (=> $x35 (or false (or false $x149)))))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x44 (or $x47 $x154)))
 (let ((?x127 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x114 (= (bvand ?x127 (_ bv4294967292 32)) ?x127)))
 (let (($x136 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x127 (bvsub ?x127 (_ bv4 32))) (bvult ?x127 (bvsub ?x127 (_ bv4 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x133 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x133) (bvult input.dst.llvm-%call.Lentry%2%d ?x133))))
 (let (($x39 (and true $x21)))
 (let (($x42 (and $x21 $x39)))
 (let (($x112 (and (and (and $x39 $x42) $x28) $x136)))
 (let (($x157 (and (and (and $x112 $x114) $x44) $x100)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x29)))
 (let (($x135 (or false $x53)))
 (let (($x70 (or $x47 $x135)))
 (let (($x152 (and $x70 $x157)))
 (let (($x158 (= $x152 true)))
 (let (($x48 (= $x158 true)))
 (let (($x196 (= $x48 true)))
 (let (($x159 (and $x196 $x197)))
 (let (($x122 (=> $x159 $x192)))
 (let (($x26 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x72 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x54 $x72) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x26 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x40 (= true false)))
 (let (($x57 (= $x40 true)))
 (let (($x56 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x62 (= $x66 $x56)))
 (let (($x67 (= (_ bv0 32) (_ bv0 32))))
 (let (($x16 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x144 (= $x16 $x67)))
 (let (($x78 (and $x144 $x62)))
 (let (($x73 (= $x78 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x136)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x117 $x77)))
 (let (($x125 (and $x52 $x112)))
 (let (($x131 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x131 $x125)))
 (let (($x37 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x37)))))
 (let (($x98 (and $x126 $x114)))
 (let (($x130 (= $x98 true)))
 (let (($x43 (= $x130 true)))
 (let (($x124 (= $x43 true)))
 (let ((?x63 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x63)))
 (let (($x71 (= ?x72 input.dst.llvm-%val)))
 (let (($x23 (= $x71 true)))
 (let (($x135 (= $x23 true)))
 (let (($x65 (and $x135 $x124)))
 (let (($x60 (and $x65 $x73)))
 (let (($x34 (=> $x60 $x57)))
 (let (($x53 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x14 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x47 $x14) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x53 (not $x34)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x40 (= true false)))
 (let (($x57 (= $x40 true)))
 (let (($x56 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x62 (= $x66 $x56)))
 (let (($x67 (= (_ bv0 32) (_ bv0 32))))
 (let (($x16 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x144 (= $x16 $x67)))
 (let (($x78 (and $x144 $x62)))
 (let (($x73 (= $x78 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x136)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x117 $x77)))
 (let (($x125 (and $x52 $x112)))
 (let (($x131 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x131 $x125)))
 (let (($x37 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x37)))))
 (let (($x98 (and $x126 $x114)))
 (let (($x130 (= $x98 true)))
 (let (($x43 (= $x130 true)))
 (let (($x124 (= $x43 true)))
 (let ((?x63 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x63)))
 (let (($x71 (= ?x72 input.dst.llvm-%val)))
 (let (($x23 (= $x71 true)))
 (let (($x135 (= $x23 true)))
 (let (($x65 (and $x135 $x124)))
 (let (($x60 (and $x65 $x73)))
 (let (($x34 (=> $x60 $x57)))
 (let (($x53 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x14 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x47 $x14) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x53 (not $x34)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x81 (= true false)))
 (let (($x82 (= $x81 true)))
 (let (($x66 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x73 (not $x66)))
 (let (($x16 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x78 (not $x16)))
 (let (($x57 (and (and (and (= $x16 (= (_ bv0 32) (_ bv0 32))) (= $x66 (bvuge (_ bv0 32) (_ bv1 32)))) $x78) $x73)))
 (let (($x34 (= $x57 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x136)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x117 $x77)))
 (let (($x125 (and $x52 $x112)))
 (let (($x99 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x99 $x125)))
 (let (($x59 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x59)))))
 (let (($x98 (and $x131 $x114)))
 (let (($x130 (= $x98 true)))
 (let (($x43 (= $x130 true)))
 (let (($x124 (= $x43 true)))
 (let ((?x17 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x17)))
 (let (($x33 (= ?x26 input.dst.llvm-%val)))
 (let (($x29 (= $x33 true)))
 (let (($x135 (= $x29 true)))
 (let (($x65 (and $x135 $x124)))
 (let (($x80 (and $x65 $x34)))
 (let (($x83 (=> $x80 $x82)))
 (let (($x23 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x63 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x63) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x23 (not $x83)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x81 (= true false)))
 (let (($x82 (= $x81 true)))
 (let (($x66 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x73 (not $x66)))
 (let (($x16 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x78 (not $x16)))
 (let (($x57 (and (and (and (= $x16 (= (_ bv0 32) (_ bv0 32))) (= $x66 (bvuge (_ bv0 32) (_ bv1 32)))) $x78) $x73)))
 (let (($x34 (= $x57 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x136)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x117 $x77)))
 (let (($x125 (and $x52 $x112)))
 (let (($x99 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x99 $x125)))
 (let (($x59 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x59)))))
 (let (($x98 (and $x131 $x114)))
 (let (($x130 (= $x98 true)))
 (let (($x43 (= $x130 true)))
 (let (($x124 (= $x43 true)))
 (let ((?x17 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x17)))
 (let (($x33 (= ?x26 input.dst.llvm-%val)))
 (let (($x29 (= $x33 true)))
 (let (($x135 (= $x29 true)))
 (let (($x65 (and $x135 $x124)))
 (let (($x80 (and $x65 $x34)))
 (let (($x83 (=> $x80 $x82)))
 (let (($x23 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x63 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x63) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x23 (not $x83)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x80 (= true false)))
 (let (($x81 (= $x80 true)))
 (let (($x60 (= false false)))
 (let (($x16 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x78 (=> $x16 $x60)))
 (let (($x56 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x62 (= $x66 $x56)))
 (let (($x67 (= (_ bv0 32) (_ bv0 32))))
 (let (($x144 (= $x16 $x67)))
 (let (($x73 (and (and $x144 $x62) $x78)))
 (let (($x57 (= $x73 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x136)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x117 $x77)))
 (let (($x125 (and $x52 $x112)))
 (let (($x133 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x133 $x125)))
 (let (($x28 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x98 (and $x99 $x114)))
 (let (($x130 (= $x98 true)))
 (let (($x43 (= $x130 true)))
 (let (($x124 (= $x43 true)))
 (let ((?x6 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x6)))
 (let (($x54 (= ?x36 input.dst.llvm-%val)))
 (let (($x71 (= $x54 true)))
 (let (($x135 (= $x71 true)))
 (let (($x65 (and $x135 $x124)))
 (let (($x34 (and $x65 $x57)))
 (let (($x82 (=> $x34 $x81)))
 (let (($x29 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x17 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x26 $x17) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x29 (not $x82)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x80 (= true false)))
 (let (($x81 (= $x80 true)))
 (let (($x60 (= false false)))
 (let (($x16 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x78 (=> $x16 $x60)))
 (let (($x56 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x62 (= $x66 $x56)))
 (let (($x67 (= (_ bv0 32) (_ bv0 32))))
 (let (($x144 (= $x16 $x67)))
 (let (($x73 (and (and $x144 $x62) $x78)))
 (let (($x57 (= $x73 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x136)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x117 $x77)))
 (let (($x125 (and $x52 $x112)))
 (let (($x133 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x133 $x125)))
 (let (($x28 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x98 (and $x99 $x114)))
 (let (($x130 (= $x98 true)))
 (let (($x43 (= $x130 true)))
 (let (($x124 (= $x43 true)))
 (let ((?x6 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x6)))
 (let (($x54 (= ?x36 input.dst.llvm-%val)))
 (let (($x71 (= $x54 true)))
 (let (($x135 (= $x71 true)))
 (let (($x65 (and $x135 $x124)))
 (let (($x34 (and $x65 $x57)))
 (let (($x82 (=> $x34 $x81)))
 (let (($x29 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x17 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x26 $x17) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x29 (not $x82)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x82 (= true false)))
 (let (($x83 (= $x82 true)))
 (let (($x60 (= false false)))
 (let (($x16 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x78 (=> $x16 $x60)))
 (let (($x66 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x40 (not $x66)))
 (let (($x34 (and (and (and (= $x16 (= (_ bv0 32) (_ bv0 32))) (= $x66 (bvuge (_ bv0 32) (_ bv1 32)))) $x40) $x78)))
 (let (($x80 (= $x34 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x136)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x117 $x77)))
 (let (($x125 (and $x52 $x112)))
 (let (($x21 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x21 $x125)))
 (let (($x126 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x126)))))
 (let (($x98 (and $x133 $x114)))
 (let (($x130 (= $x98 true)))
 (let (($x43 (= $x130 true)))
 (let (($x124 (= $x43 true)))
 (let ((?x18 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x18)))
 (let (($x24 (= ?x14 input.dst.llvm-%val)))
 (let (($x33 (= $x24 true)))
 (let (($x135 (= $x33 true)))
 (let (($x65 (and $x135 $x124)))
 (let (($x81 (and $x65 $x80)))
 (let (($x84 (=> $x81 $x83)))
 (let (($x71 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x6 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x6) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x71 (not $x84))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x82 (= true false)))
 (let (($x83 (= $x82 true)))
 (let (($x60 (= false false)))
 (let (($x16 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x78 (=> $x16 $x60)))
 (let (($x66 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x40 (not $x66)))
 (let (($x34 (and (and (and (= $x16 (= (_ bv0 32) (_ bv0 32))) (= $x66 (bvuge (_ bv0 32) (_ bv1 32)))) $x40) $x78)))
 (let (($x80 (= $x34 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x136)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x117 $x77)))
 (let (($x125 (and $x52 $x112)))
 (let (($x21 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x21 $x125)))
 (let (($x126 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x126)))))
 (let (($x98 (and $x133 $x114)))
 (let (($x130 (= $x98 true)))
 (let (($x43 (= $x130 true)))
 (let (($x124 (= $x43 true)))
 (let ((?x18 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x18)))
 (let (($x24 (= ?x14 input.dst.llvm-%val)))
 (let (($x33 (= $x24 true)))
 (let (($x135 (= $x33 true)))
 (let (($x65 (and $x135 $x124)))
 (let (($x81 (and $x65 $x80)))
 (let (($x84 (=> $x81 $x83)))
 (let (($x71 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x6 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x6) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x71 (not $x84))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x229 (= $x41 true)))
 (let (($x180 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x156 (= $x196 $x180)))
 (let (($x158 (= (_ bv0 32) (_ bv0 32))))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x48 (= $x152 $x158)))
 (let (($x202 (and $x48 $x156)))
 (let (($x193 (= $x202 true)))
 (let ((?x109 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x109)))
 (let (($x110 (= ?x74 input.dst.llvm-%val)))
 (let (($x108 (= $x110 true)))
 (let (($x107 (= $x108 true)))
 (let ((?x8 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x8)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x141 $x105)))
 (let (($x115 (and $x111 $x113)))
 (let (($x102 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x102 $x115)))
 (let (($x120 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x120)))))
 (let (($x97 (and $x129 $x87)))
 (let (($x93 (= $x97 true)))
 (let (($x106 (= $x93 true)))
 (let (($x116 (= $x106 true)))
 (let ((?x53 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x56 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x53) (_ bv1 8)))))
 (let (($x30 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x9 (=> $x30 (or false (or false $x154)))))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (or $x72 $x9)))
 (let ((?x117 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x117 (_ bv4294967292 32)) ?x117)))
 (let (($x136 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x117 (bvsub ?x117 (_ bv4 32))) (bvult ?x117 (bvsub ?x117 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x28 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x126 (and true $x28)))
 (let (($x131 (and $x28 $x126)))
 (let (($x114 (and (and (and $x126 $x131) $x22) $x136)))
 (let (($x24 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x140 (and (and (and $x24 $x114) $x130) $x65)))
 (let (($x23 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x53)))
 (let (($x49 (or false $x23)))
 (let (($x79 (or $x72 $x49)))
 (let (($x13 (and $x79 $x140)))
 (let (($x88 (= $x13 true)))
 (let (($x5 (= $x88 true)))
 (let (($x95 (= $x5 true)))
 (let (($x96 (and $x95 $x116)))
 (let (($x100 (and $x96 $x107)))
 (let (($x155 (and $x100 $x193)))
 (let (($x190 (=> $x155 $x229)))
 (let (($x39 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x14 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x14) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x39 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x229 (= $x41 true)))
 (let (($x180 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x156 (= $x196 $x180)))
 (let (($x158 (= (_ bv0 32) (_ bv0 32))))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x48 (= $x152 $x158)))
 (let (($x202 (and $x48 $x156)))
 (let (($x193 (= $x202 true)))
 (let ((?x109 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x109)))
 (let (($x110 (= ?x74 input.dst.llvm-%val)))
 (let (($x108 (= $x110 true)))
 (let (($x107 (= $x108 true)))
 (let ((?x8 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x8)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x141 $x105)))
 (let (($x115 (and $x111 $x113)))
 (let (($x102 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x102 $x115)))
 (let (($x120 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x120)))))
 (let (($x97 (and $x129 $x87)))
 (let (($x93 (= $x97 true)))
 (let (($x106 (= $x93 true)))
 (let (($x116 (= $x106 true)))
 (let ((?x53 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x56 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x53) (_ bv1 8)))))
 (let (($x30 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x9 (=> $x30 (or false (or false $x154)))))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (or $x72 $x9)))
 (let ((?x117 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x117 (_ bv4294967292 32)) ?x117)))
 (let (($x136 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x117 (bvsub ?x117 (_ bv4 32))) (bvult ?x117 (bvsub ?x117 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x28 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x126 (and true $x28)))
 (let (($x131 (and $x28 $x126)))
 (let (($x114 (and (and (and $x126 $x131) $x22) $x136)))
 (let (($x24 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x140 (and (and (and $x24 $x114) $x130) $x65)))
 (let (($x23 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x53)))
 (let (($x49 (or false $x23)))
 (let (($x79 (or $x72 $x49)))
 (let (($x13 (and $x79 $x140)))
 (let (($x88 (= $x13 true)))
 (let (($x5 (= $x88 true)))
 (let (($x95 (= $x5 true)))
 (let (($x96 (and $x95 $x116)))
 (let (($x100 (and $x96 $x107)))
 (let (($x155 (and $x100 $x193)))
 (let (($x190 (=> $x155 $x229)))
 (let (($x39 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x14 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x14) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x39 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00900400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00400003) #x03
    (ite (= x!0 #x00400001) #x03
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000003) #x01
    (ite (= x!0 #x00400000) #x03
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400001 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) #x00400004 #x00400003)
                         #x00400001)
                    #x00400000)))
    (let ((a!2 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x00000008 x!0)
                         (ite (bvule #x00400000 x!0) a!1 #x00000008)
                         #x00000007)
                    #x00000006)))
    (let ((a!3 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!2 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!3 #x00000002)
                #x00000001)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x2decfff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08b34583)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08b34580)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2decfffe x!0)
                    (ite (bvule #x2decffff x!0)
                         (ite (bvule #x2ded0000 x!0) #x2ded0000 #x2decffff)
                         #x2decfffe)
                    #x2decfffd)))
    (let ((a!2 (ite (bvule #x2decfffb x!0)
                    (ite (bvule #x2decfffc x!0)
                         (ite (bvule #x2decfffd x!0) a!1 #x2decfffc)
                         #x2decfffb)
                    #x2decfffa)))
    (let ((a!3 (ite (bvule #x08b34584 x!0)
                    (ite (bvule #x2decfff9 x!0)
                         (ite (bvule #x2decfffa x!0) a!2 #x2decfff9)
                         #x08b34584)
                    #x08b34583)))
      (ite (bvule #x08b34580 x!0)
           (ite (bvule #x08b34581 x!0)
                (ite (bvule #x08b34583 x!0) a!3 #x08b34581)
                #x08b34580)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2decfffb) #x01
    (ite (= x!0 #x08b34580) #x03
    (ite (= x!0 #x2decfffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x2decfffa) #x01
    (ite (= x!0 #x2decfffd) #x01
    (ite (= x!0 #x08b34581) #x03
    (ite (= x!0 #x08b34583) #x03
    (ite (= x!0 #x2decffff) #x01
    (ite (= x!0 #x2decfff9) #x01
    (ite (= x!0 #x2ded0000) #x01
    (ite (= x!0 #x2decfffc) #x01
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x173 (= $x71 true)))
 (let (($x180 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x155 (not $x180)))
 (let (($x158 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x193 (not $x158)))
 (let (($x190 (and (and (and (= $x158 (= (_ bv0 32) (_ bv0 32))) (= $x180 (bvuge (_ bv0 32) (_ bv1 32)))) $x193) $x155)))
 (let (($x206 (= $x190 true)))
 (let ((?x74 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x74)))
 (let (($x108 (= ?x118 input.dst.llvm-%val)))
 (let (($x107 (= $x108 true)))
 (let (($x100 (= $x107 true)))
 (let ((?x113 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x113)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x132 $x111)))
 (let (($x87 (and $x8 $x115)))
 (let (($x45 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x45 $x87)))
 (let (($x123 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x123)))))
 (let (($x93 (and $x141 $x97)))
 (let (($x106 (= $x93 true)))
 (let (($x116 (= $x106 true)))
 (let (($x96 (= $x116 true)))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x124 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x18) (_ bv1 8)))))
 (let (($x9 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x65 (=> $x9 (or false (or false $x154)))))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x16 (or $x6 $x65)))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x52 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x126 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x131 (and true $x126)))
 (let (($x112 (and $x126 $x131)))
 (let (($x35 (and (and (and $x131 $x112) $x22) $x52)))
 (let (($x54 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (and (and (and $x54 $x35) $x130) $x16)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x18)))
 (let (($x79 (or false $x33)))
 (let (($x42 (or $x6 $x79)))
 (let (($x88 (and $x42 $x13)))
 (let (($x5 (= $x88 true)))
 (let (($x95 (= $x5 true)))
 (let (($x103 (= $x95 true)))
 (let (($x27 (and $x103 $x96)))
 (let (($x157 (and $x27 $x100)))
 (let (($x210 (and $x157 $x206)))
 (let (($x25 (=> $x210 $x173)))
 (let (($x49 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x72 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x70 $x72) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x49 (not $x25))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x173 (= $x71 true)))
 (let (($x180 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x155 (not $x180)))
 (let (($x158 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x193 (not $x158)))
 (let (($x190 (and (and (and (= $x158 (= (_ bv0 32) (_ bv0 32))) (= $x180 (bvuge (_ bv0 32) (_ bv1 32)))) $x193) $x155)))
 (let (($x206 (= $x190 true)))
 (let ((?x74 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x74)))
 (let (($x108 (= ?x118 input.dst.llvm-%val)))
 (let (($x107 (= $x108 true)))
 (let (($x100 (= $x107 true)))
 (let ((?x113 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x113)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x132 $x111)))
 (let (($x87 (and $x8 $x115)))
 (let (($x45 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x45 $x87)))
 (let (($x123 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x123)))))
 (let (($x93 (and $x141 $x97)))
 (let (($x106 (= $x93 true)))
 (let (($x116 (= $x106 true)))
 (let (($x96 (= $x116 true)))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x124 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x18) (_ bv1 8)))))
 (let (($x9 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x65 (=> $x9 (or false (or false $x154)))))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x16 (or $x6 $x65)))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x52 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x126 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x131 (and true $x126)))
 (let (($x112 (and $x126 $x131)))
 (let (($x35 (and (and (and $x131 $x112) $x22) $x52)))
 (let (($x54 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (and (and (and $x54 $x35) $x130) $x16)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x18)))
 (let (($x79 (or false $x33)))
 (let (($x42 (or $x6 $x79)))
 (let (($x88 (and $x42 $x13)))
 (let (($x5 (= $x88 true)))
 (let (($x95 (= $x5 true)))
 (let (($x103 (= $x95 true)))
 (let (($x27 (and $x103 $x96)))
 (let (($x157 (and $x27 $x100)))
 (let (($x210 (and $x157 $x206)))
 (let (($x25 (=> $x210 $x173)))
 (let (($x49 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x72 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x70 $x72) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x49 (not $x25))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x173 (= $x71 true)))
 (let (($x193 (= false false)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x48 $x193)))
 (let (($x202 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x41 (= $x156 $x202)))
 (let (($x196 (= (_ bv0 32) (_ bv0 32))))
 (let (($x180 (= $x48 $x196)))
 (let (($x190 (and (and $x180 $x41) $x229)))
 (let (($x206 (= $x190 true)))
 (let ((?x118 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x118)))
 (let (($x107 (= ?x110 input.dst.llvm-%val)))
 (let (($x100 (= $x107 true)))
 (let (($x157 (= $x100 true)))
 (let ((?x115 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x115)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x105 $x8)))
 (let (($x97 (and $x113 $x87)))
 (let (($x102 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x102 $x97)))
 (let (($x101 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x101)))))
 (let (($x106 (and $x132 $x93)))
 (let (($x116 (= $x106 true)))
 (let (($x96 (= $x116 true)))
 (let (($x27 (= $x96 true)))
 (let ((?x47 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x43 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x47) (_ bv1 8)))))
 (let (($x65 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x16 (=> $x65 (or false (or false $x154)))))
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x144 (or $x135 $x16)))
 (let ((?x125 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x125 (_ bv4294967292 32)) ?x125)))
 (let (($x77 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x125 (bvsub ?x125 (_ bv4 32))) (bvult ?x125 (bvsub ?x125 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x131 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x112 (and true $x131)))
 (let (($x136 (and $x131 $x112)))
 (let (($x67 (and (and (and $x112 $x136) $x22) $x77)))
 (let (($x75 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x88 (and (and (and $x75 $x67) $x130) $x144)))
 (let (($x23 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x47)))
 (let (($x42 (or false $x23)))
 (let (($x29 (or $x135 $x42)))
 (let (($x5 (and $x29 $x88)))
 (let (($x95 (= $x5 true)))
 (let (($x103 (= $x95 true)))
 (let (($x69 (= $x103 true)))
 (let (($x109 (and $x69 $x27)))
 (let (($x152 (and $x109 $x157)))
 (let (($x210 (and $x152 $x206)))
 (let (($x25 (=> $x210 $x173)))
 (let (($x79 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x6 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x134 $x6) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x79 (not $x25))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x173 (= $x71 true)))
 (let (($x193 (= false false)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x48 $x193)))
 (let (($x202 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x41 (= $x156 $x202)))
 (let (($x196 (= (_ bv0 32) (_ bv0 32))))
 (let (($x180 (= $x48 $x196)))
 (let (($x190 (and (and $x180 $x41) $x229)))
 (let (($x206 (= $x190 true)))
 (let ((?x118 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x118)))
 (let (($x107 (= ?x110 input.dst.llvm-%val)))
 (let (($x100 (= $x107 true)))
 (let (($x157 (= $x100 true)))
 (let ((?x115 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x115)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x105 $x8)))
 (let (($x97 (and $x113 $x87)))
 (let (($x102 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x102 $x97)))
 (let (($x101 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x101)))))
 (let (($x106 (and $x132 $x93)))
 (let (($x116 (= $x106 true)))
 (let (($x96 (= $x116 true)))
 (let (($x27 (= $x96 true)))
 (let ((?x47 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x43 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x47) (_ bv1 8)))))
 (let (($x65 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x16 (=> $x65 (or false (or false $x154)))))
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x144 (or $x135 $x16)))
 (let ((?x125 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x125 (_ bv4294967292 32)) ?x125)))
 (let (($x77 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x125 (bvsub ?x125 (_ bv4 32))) (bvult ?x125 (bvsub ?x125 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x131 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x112 (and true $x131)))
 (let (($x136 (and $x131 $x112)))
 (let (($x67 (and (and (and $x112 $x136) $x22) $x77)))
 (let (($x75 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x88 (and (and (and $x75 $x67) $x130) $x144)))
 (let (($x23 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x47)))
 (let (($x42 (or false $x23)))
 (let (($x29 (or $x135 $x42)))
 (let (($x5 (and $x29 $x88)))
 (let (($x95 (= $x5 true)))
 (let (($x103 (= $x95 true)))
 (let (($x69 (= $x103 true)))
 (let (($x109 (and $x69 $x27)))
 (let (($x152 (and $x109 $x157)))
 (let (($x210 (and $x152 $x206)))
 (let (($x25 (=> $x210 $x173)))
 (let (($x79 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x6 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x134 $x6) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x79 (not $x25))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00900400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00400003) #x03
    (ite (= x!0 #x00400001) #x03
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000003) #x01
    (ite (= x!0 #x00400000) #x03
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400001 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) #x00400004 #x00400003)
                         #x00400001)
                    #x00400000)))
    (let ((a!2 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x00000008 x!0)
                         (ite (bvule #x00400000 x!0) a!1 #x00000008)
                         #x00000007)
                    #x00000006)))
    (let ((a!3 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!2 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!3 #x00000002)
                #x00000001)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x2decfff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08b34583)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08b34580)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2decfffe x!0)
                    (ite (bvule #x2decffff x!0)
                         (ite (bvule #x2ded0000 x!0) #x2ded0000 #x2decffff)
                         #x2decfffe)
                    #x2decfffd)))
    (let ((a!2 (ite (bvule #x2decfffb x!0)
                    (ite (bvule #x2decfffc x!0)
                         (ite (bvule #x2decfffd x!0) a!1 #x2decfffc)
                         #x2decfffb)
                    #x2decfffa)))
    (let ((a!3 (ite (bvule #x08b34584 x!0)
                    (ite (bvule #x2decfff9 x!0)
                         (ite (bvule #x2decfffa x!0) a!2 #x2decfff9)
                         #x08b34584)
                    #x08b34583)))
      (ite (bvule #x08b34580 x!0)
           (ite (bvule #x08b34581 x!0)
                (ite (bvule #x08b34583 x!0) a!3 #x08b34581)
                #x08b34580)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2decfffb) #x01
    (ite (= x!0 #x08b34580) #x03
    (ite (= x!0 #x2decfffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x2decfffa) #x01
    (ite (= x!0 #x2decfffd) #x01
    (ite (= x!0 #x08b34581) #x03
    (ite (= x!0 #x08b34583) #x03
    (ite (= x!0 #x2decffff) #x01
    (ite (= x!0 #x2decfff9) #x01
    (ite (= x!0 #x2ded0000) #x01
    (ite (= x!0 #x2decfffc) #x01
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x197 (= $x61 true)))
 (let (($x229 (= false false)))
 (let (($x196 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x190 (=> $x196 $x229)))
 (let (($x202 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (not $x202)))
 (let (($x71 (and (and (and (= $x196 (= (_ bv0 32) (_ bv0 32))) (= $x202 (bvuge (_ bv0 32) (_ bv1 32)))) $x193) $x190)))
 (let (($x173 (= $x71 true)))
 (let ((?x110 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x110)))
 (let (($x100 (= ?x108 input.dst.llvm-%val)))
 (let (($x157 (= $x100 true)))
 (let (($x152 (= $x157 true)))
 (let ((?x87 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x87)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x111 $x113)))
 (let (($x93 (and $x115 $x97)))
 (let (($x45 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x45 $x93)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x116 (and $x105 $x106)))
 (let (($x96 (= $x116 true)))
 (let (($x27 (= $x96 true)))
 (let (($x109 (= $x27 true)))
 (let ((?x37 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x58 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x37) (_ bv1 8)))))
 (let (($x16 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x144 (=> $x16 (or false (or false $x154)))))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x66 (or $x63 $x144)))
 (let ((?x114 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x127 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x114 (bvsub ?x114 (_ bv4 32))) (bvult ?x114 (bvsub ?x114 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x112 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x136 (and true $x112)))
 (let (($x52 (and $x112 $x136)))
 (let (($x30 (and (and (and $x136 $x52) $x22) $x127)))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (and (and (and $x55 $x30) $x130) $x66)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x37)))
 (let (($x29 (or false $x33)))
 (let (($x24 (or $x63 $x29)))
 (let (($x95 (and $x24 $x5)))
 (let (($x103 (= $x95 true)))
 (let (($x69 (= $x103 true)))
 (let (($x145 (= $x69 true)))
 (let (($x74 (and $x145 $x109)))
 (let (($x158 (and $x74 $x152)))
 (let (($x25 (and $x158 $x173)))
 (let (($x26 (=> $x25 $x197)))
 (let (($x42 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x135 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x135) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x42 (not $x26)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x197 (= $x61 true)))
 (let (($x229 (= false false)))
 (let (($x196 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x190 (=> $x196 $x229)))
 (let (($x202 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (not $x202)))
 (let (($x71 (and (and (and (= $x196 (= (_ bv0 32) (_ bv0 32))) (= $x202 (bvuge (_ bv0 32) (_ bv1 32)))) $x193) $x190)))
 (let (($x173 (= $x71 true)))
 (let ((?x110 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x110)))
 (let (($x100 (= ?x108 input.dst.llvm-%val)))
 (let (($x157 (= $x100 true)))
 (let (($x152 (= $x157 true)))
 (let ((?x87 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x87)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x111 $x113)))
 (let (($x93 (and $x115 $x97)))
 (let (($x45 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x45 $x93)))
 (let (($x104 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x116 (and $x105 $x106)))
 (let (($x96 (= $x116 true)))
 (let (($x27 (= $x96 true)))
 (let (($x109 (= $x27 true)))
 (let ((?x37 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x58 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x37) (_ bv1 8)))))
 (let (($x16 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x144 (=> $x16 (or false (or false $x154)))))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x66 (or $x63 $x144)))
 (let ((?x114 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x127 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x114 (bvsub ?x114 (_ bv4 32))) (bvult ?x114 (bvsub ?x114 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x112 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x136 (and true $x112)))
 (let (($x52 (and $x112 $x136)))
 (let (($x30 (and (and (and $x136 $x52) $x22) $x127)))
 (let (($x55 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (and (and (and $x55 $x30) $x130) $x66)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x37)))
 (let (($x29 (or false $x33)))
 (let (($x24 (or $x63 $x29)))
 (let (($x95 (and $x24 $x5)))
 (let (($x103 (= $x95 true)))
 (let (($x69 (= $x103 true)))
 (let (($x145 (= $x69 true)))
 (let (($x74 (and $x145 $x109)))
 (let (($x158 (and $x74 $x152)))
 (let (($x25 (and $x158 $x173)))
 (let (($x26 (=> $x25 $x197)))
 (let (($x42 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x135 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x135) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x42 (not $x26)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00900400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00400003) #x03
    (ite (= x!0 #x00400001) #x03
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000003) #x01
    (ite (= x!0 #x00400000) #x03
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400001 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) #x00400004 #x00400003)
                         #x00400001)
                    #x00400000)))
    (let ((a!2 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x00000008 x!0)
                         (ite (bvule #x00400000 x!0) a!1 #x00000008)
                         #x00000007)
                    #x00000006)))
    (let ((a!3 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!2 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!3 #x00000002)
                #x00000001)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x2decfff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08b34583)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08b34580)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2decfffe x!0)
                    (ite (bvule #x2decffff x!0)
                         (ite (bvule #x2ded0000 x!0) #x2ded0000 #x2decffff)
                         #x2decfffe)
                    #x2decfffd)))
    (let ((a!2 (ite (bvule #x2decfffb x!0)
                    (ite (bvule #x2decfffc x!0)
                         (ite (bvule #x2decfffd x!0) a!1 #x2decfffc)
                         #x2decfffb)
                    #x2decfffa)))
    (let ((a!3 (ite (bvule #x08b34584 x!0)
                    (ite (bvule #x2decfff9 x!0)
                         (ite (bvule #x2decfffa x!0) a!2 #x2decfff9)
                         #x08b34584)
                    #x08b34583)))
      (ite (bvule #x08b34580 x!0)
           (ite (bvule #x08b34581 x!0)
                (ite (bvule #x08b34583 x!0) a!3 #x08b34581)
                #x08b34580)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2decfffb) #x01
    (ite (= x!0 #x08b34580) #x03
    (ite (= x!0 #x2decfffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x2decfffa) #x01
    (ite (= x!0 #x2decfffd) #x01
    (ite (= x!0 #x08b34581) #x03
    (ite (= x!0 #x08b34583) #x03
    (ite (= x!0 #x2decffff) #x01
    (ite (= x!0 #x2decfff9) #x01
    (ite (= x!0 #x2ded0000) #x01
    (ite (= x!0 #x2decfffc) #x01
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var536X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var536X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var536X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv1 32)))))
 (let ((?x162 (concat ?x189 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var536X)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv3 32)))))
 (let ((?x169 (concat ?x50 (concat ?x176 ?x162))))
 (let (($x215 (= input.ind-%var536X.2.1 ?x169)))
 (let (($x160 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x201 (=> $x160 $x215)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var536X))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv2 32))) ?x198)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv3 32))) ?x209)))
 (let (($x188 (= input.ind-%var536X.2.0 ?x213)))
 (let (($x12 (=> $x160 $x188)))
 (let (($x68 (= false false)))
 (let (($x197 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x171 (=> $x197 $x68)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x59 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x59 (_ bv1 32))))
 (let (($x122 (= $x160 $x192)))
 (let (($x159 (= ?x59 (_ bv0 32))))
 (let (($x14 (= $x197 $x159)))
 (let (($x25 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x186 (and (and (and (and (and $x25 $x14) $x122) $x171) $x12) $x201)))
 (let (($x71 (not true)))
 (let (($x166 (or $x71 $x186)))
 (let (($x190 (= true true)))
 (let (($x185 (and $x190 $x166)))
 (let (($x167 (= $x185 true)))
 (let (($x155 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x206 (= $x41 $x155)))
 (let (($x156 (= (_ bv0 32) (_ bv0 32))))
 (let (($x180 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x202 (= $x180 $x156)))
 (let (($x193 (and $x202 $x206)))
 (let (($x210 (= $x193 true)))
 (let ((?x108 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x108)))
 (let (($x157 (= ?x107 input.dst.llvm-%val)))
 (let (($x152 (= $x157 true)))
 (let (($x158 (= $x152 true)))
 (let ((?x97 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x97)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x8 $x115)))
 (let (($x106 (and $x87 $x93)))
 (let (($x102 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x102 $x106)))
 (let (($x64 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x64)))))
 (let (($x96 (and $x111 $x116)))
 (let (($x27 (= $x96 true)))
 (let (($x109 (= $x27 true)))
 (let (($x74 (= $x109 true)))
 (let ((?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x140 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x70) (_ bv1 8)))))
 (let (($x144 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x66 (=> $x144 (or false (or false $x154)))))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x56 (or $x47 $x66)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x119 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x136 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x52 (and true $x136)))
 (let (($x77 (and $x136 $x52)))
 (let (($x9 (and (and (and $x52 $x77) $x22) $x119)))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x95 (and (and (and $x28 $x9) $x130) $x56)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x70)))
 (let (($x24 (or false $x53)))
 (let (($x54 (or $x47 $x24)))
 (let (($x103 (and $x54 $x95)))
 (let (($x69 (= $x103 true)))
 (let (($x145 (= $x69 true)))
 (let (($x31 (= $x145 true)))
 (let (($x118 (and $x31 $x74)))
 (let (($x48 (and $x118 $x158)))
 (let (($x229 (and $x48 $x210)))
 (let (($x174 (=> $x229 $x167)))
 (let (($x29 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x63 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x63) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x29 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var536X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var536X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var536X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv1 32)))))
 (let ((?x162 (concat ?x189 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var536X)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv3 32)))))
 (let ((?x169 (concat ?x50 (concat ?x176 ?x162))))
 (let (($x215 (= input.ind-%var536X.2.1 ?x169)))
 (let (($x160 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x201 (=> $x160 $x215)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var536X))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv2 32))) ?x198)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv3 32))) ?x209)))
 (let (($x188 (= input.ind-%var536X.2.0 ?x213)))
 (let (($x12 (=> $x160 $x188)))
 (let (($x68 (= false false)))
 (let (($x197 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x171 (=> $x197 $x68)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x59 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x59 (_ bv1 32))))
 (let (($x122 (= $x160 $x192)))
 (let (($x159 (= ?x59 (_ bv0 32))))
 (let (($x14 (= $x197 $x159)))
 (let (($x25 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x186 (and (and (and (and (and $x25 $x14) $x122) $x171) $x12) $x201)))
 (let (($x71 (not true)))
 (let (($x166 (or $x71 $x186)))
 (let (($x190 (= true true)))
 (let (($x185 (and $x190 $x166)))
 (let (($x167 (= $x185 true)))
 (let (($x155 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x41 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x206 (= $x41 $x155)))
 (let (($x156 (= (_ bv0 32) (_ bv0 32))))
 (let (($x180 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x202 (= $x180 $x156)))
 (let (($x193 (and $x202 $x206)))
 (let (($x210 (= $x193 true)))
 (let ((?x108 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x108)))
 (let (($x157 (= ?x107 input.dst.llvm-%val)))
 (let (($x152 (= $x157 true)))
 (let (($x158 (= $x152 true)))
 (let ((?x97 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x97)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x8 $x115)))
 (let (($x106 (and $x87 $x93)))
 (let (($x102 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x102 $x106)))
 (let (($x64 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x64)))))
 (let (($x96 (and $x111 $x116)))
 (let (($x27 (= $x96 true)))
 (let (($x109 (= $x27 true)))
 (let (($x74 (= $x109 true)))
 (let ((?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x140 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x70) (_ bv1 8)))))
 (let (($x144 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x66 (=> $x144 (or false (or false $x154)))))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x56 (or $x47 $x66)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x119 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x136 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x52 (and true $x136)))
 (let (($x77 (and $x136 $x52)))
 (let (($x9 (and (and (and $x52 $x77) $x22) $x119)))
 (let (($x28 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x95 (and (and (and $x28 $x9) $x130) $x56)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x70)))
 (let (($x24 (or false $x53)))
 (let (($x54 (or $x47 $x24)))
 (let (($x103 (and $x54 $x95)))
 (let (($x69 (= $x103 true)))
 (let (($x145 (= $x69 true)))
 (let (($x31 (= $x145 true)))
 (let (($x118 (and $x31 $x74)))
 (let (($x48 (and $x118 $x158)))
 (let (($x229 (and $x48 $x210)))
 (let (($x174 (=> $x229 $x167)))
 (let (($x29 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x63 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x63) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x29 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60aff264)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var536X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var536X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var536X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x60aff267)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60aff264)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x60aff264) #x03
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x60aff265) #x03
    (ite (= x!0 #x60aff267) #x03
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x7fffffff) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000001 x!0)
                    (ite (bvule #x80000002 x!0)
                         (ite (bvule #x80000003 x!0) #x80000003 #x80000002)
                         #x80000001)
                    #x80000000)))
    (let ((a!2 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) a!1 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!3 (ite (bvule #x60aff268 x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!2 #x7ffffffc)
                         #x60aff268)
                    #x60aff267)))
      (ite (bvule #x60aff264 x!0)
           (ite (bvule #x60aff265 x!0)
                (ite (bvule #x60aff267 x!0) a!3 #x60aff265)
                #x60aff264)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x86800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x9c800000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var536X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var536X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var536X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x86800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x86800004) #x01
    (ite (= x!0 #x86800005) #x01
    (ite (= x!0 #x86800003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x86800006) #x01
    (ite (= x!0 #x86800000) #x01
    (ite (= x!0 #x86800007) #x01
    (ite (= x!0 #x86800002) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x86800005 x!0)
                    (ite (bvule #x86800006 x!0)
                         (ite (bvule #x86800007 x!0) #x86800007 #x86800006)
                         #x86800005)
                    #x86800004)))
    (let ((a!2 (ite (bvule #x86800002 x!0)
                    (ite (bvule #x86800003 x!0)
                         (ite (bvule #x86800004 x!0) a!1 #x86800003)
                         #x86800002)
                    #x86800001)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x86800000 x!0)
                         (ite (bvule #x86800001 x!0) a!2 #x86800000)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var536X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var536X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var536X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv1 32)))))
 (let ((?x176 (concat ?x183 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var536X)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv3 32)))))
 (let ((?x169 (concat ?x191 (concat ?x189 ?x176))))
 (let (($x215 (= input.ind-%var536X.2.1 ?x169)))
 (let (($x207 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x201 (=> $x207 $x215)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var536X))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv2 32))) ?x76)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv3 32))) ?x198)))
 (let (($x12 (= input.ind-%var536X.2.0 ?x188)))
 (let (($x230 (=> $x207 $x12)))
 (let (($x210 (= false false)))
 (let (($x14 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x14 $x210)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x160 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x160 (_ bv1 32))))
 (let (($x171 (= $x207 $x68)))
 (let (($x192 (= ?x160 (_ bv0 32))))
 (let (($x122 (= $x14 $x192)))
 (let (($x59 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x174 (and (and (and (and (and $x59 $x122) $x171) $x184) $x230) $x201)))
 (let (($x197 (not true)))
 (let (($x178 (or $x197 $x174)))
 (let (($x61 (= true true)))
 (let (($x266 (and $x61 $x178)))
 (let (($x39 (= $x266 true)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x156 $x210)))
 (let (($x206 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (= $x155 $x206)))
 (let (($x202 (= (_ bv0 32) (_ bv0 32))))
 (let (($x41 (= $x156 $x202)))
 (let (($x71 (and (and $x41 $x193) $x229)))
 (let (($x173 (= $x71 true)))
 (let ((?x107 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x107)))
 (let (($x152 (= ?x100 input.dst.llvm-%val)))
 (let (($x158 (= $x152 true)))
 (let (($x48 (= $x158 true)))
 (let ((?x93 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x93)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x113 $x87)))
 (let (($x116 (and $x97 $x106)))
 (let (($x45 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x45 $x116)))
 (let (($x120 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x120)))))
 (let (($x27 (and $x8 $x96)))
 (let (($x109 (= $x27 true)))
 (let (($x74 (= $x109 true)))
 (let (($x118 (= $x74 true)))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x13 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x18) (_ bv1 8)))))
 (let (($x66 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x56 (=> $x66 (or false (or false $x154)))))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (or $x49 $x56)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x117 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x52 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x77 (and true $x52)))
 (let (($x127 (and $x52 $x77)))
 (let (($x65 (and (and (and $x77 $x127) $x22) $x117)))
 (let (($x126 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x103 (and (and (and $x126 $x65) $x130) $x124)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x18)))
 (let (($x54 (or false $x33)))
 (let (($x75 (or $x49 $x54)))
 (let (($x69 (and $x75 $x103)))
 (let (($x145 (= $x69 true)))
 (let (($x31 (= $x145 true)))
 (let (($x129 (= $x31 true)))
 (let (($x110 (and $x129 $x118)))
 (let (($x196 (and $x110 $x48)))
 (let (($x25 (and $x196 $x173)))
 (let (($x7 (=> $x25 $x39)))
 (let (($x24 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x24 (not $x7))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var536X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var536X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var536X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv1 32)))))
 (let ((?x176 (concat ?x183 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var536X)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv3 32)))))
 (let ((?x169 (concat ?x191 (concat ?x189 ?x176))))
 (let (($x215 (= input.ind-%var536X.2.1 ?x169)))
 (let (($x207 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x201 (=> $x207 $x215)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var536X))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv2 32))) ?x76)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv3 32))) ?x198)))
 (let (($x12 (= input.ind-%var536X.2.0 ?x188)))
 (let (($x230 (=> $x207 $x12)))
 (let (($x210 (= false false)))
 (let (($x14 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x14 $x210)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x160 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x160 (_ bv1 32))))
 (let (($x171 (= $x207 $x68)))
 (let (($x192 (= ?x160 (_ bv0 32))))
 (let (($x122 (= $x14 $x192)))
 (let (($x59 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x174 (and (and (and (and (and $x59 $x122) $x171) $x184) $x230) $x201)))
 (let (($x197 (not true)))
 (let (($x178 (or $x197 $x174)))
 (let (($x61 (= true true)))
 (let (($x266 (and $x61 $x178)))
 (let (($x39 (= $x266 true)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x156 $x210)))
 (let (($x206 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (= $x155 $x206)))
 (let (($x202 (= (_ bv0 32) (_ bv0 32))))
 (let (($x41 (= $x156 $x202)))
 (let (($x71 (and (and $x41 $x193) $x229)))
 (let (($x173 (= $x71 true)))
 (let ((?x107 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x107)))
 (let (($x152 (= ?x100 input.dst.llvm-%val)))
 (let (($x158 (= $x152 true)))
 (let (($x48 (= $x158 true)))
 (let ((?x93 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x93)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x113 $x87)))
 (let (($x116 (and $x97 $x106)))
 (let (($x45 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x45 $x116)))
 (let (($x120 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x120)))))
 (let (($x27 (and $x8 $x96)))
 (let (($x109 (= $x27 true)))
 (let (($x74 (= $x109 true)))
 (let (($x118 (= $x74 true)))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x13 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x18) (_ bv1 8)))))
 (let (($x66 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x56 (=> $x66 (or false (or false $x154)))))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (or $x49 $x56)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x117 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x52 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x77 (and true $x52)))
 (let (($x127 (and $x52 $x77)))
 (let (($x65 (and (and (and $x77 $x127) $x22) $x117)))
 (let (($x126 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x103 (and (and (and $x126 $x65) $x130) $x124)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x18)))
 (let (($x54 (or false $x33)))
 (let (($x75 (or $x49 $x54)))
 (let (($x69 (and $x75 $x103)))
 (let (($x145 (= $x69 true)))
 (let (($x31 (= $x145 true)))
 (let (($x129 (= $x31 true)))
 (let (($x110 (and $x129 $x118)))
 (let (($x196 (and $x110 $x48)))
 (let (($x25 (and $x196 $x173)))
 (let (($x7 (=> $x25 $x39)))
 (let (($x24 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x24 (not $x7))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60aff264)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var536X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var536X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var536X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x60aff267)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60aff264)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x60aff264) #x03
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x60aff265) #x03
    (ite (= x!0 #x60aff267) #x03
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x7fffffff) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000001 x!0)
                    (ite (bvule #x80000002 x!0)
                         (ite (bvule #x80000003 x!0) #x80000003 #x80000002)
                         #x80000001)
                    #x80000000)))
    (let ((a!2 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) a!1 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!3 (ite (bvule #x60aff268 x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!2 #x7ffffffc)
                         #x60aff268)
                    #x60aff267)))
      (ite (bvule #x60aff264 x!0)
           (ite (bvule #x60aff265 x!0)
                (ite (bvule #x60aff267 x!0) a!3 #x60aff265)
                #x60aff264)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x86800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x9c800000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var536X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var536X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var536X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x86800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x86800004) #x01
    (ite (= x!0 #x86800005) #x01
    (ite (= x!0 #x86800003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x86800006) #x01
    (ite (= x!0 #x86800000) #x01
    (ite (= x!0 #x86800007) #x01
    (ite (= x!0 #x86800002) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x86800005 x!0)
                    (ite (bvule #x86800006 x!0)
                         (ite (bvule #x86800007 x!0) #x86800007 #x86800006)
                         #x86800005)
                    #x86800004)))
    (let ((a!2 (ite (bvule #x86800002 x!0)
                    (ite (bvule #x86800003 x!0)
                         (ite (bvule #x86800004 x!0) a!1 #x86800003)
                         #x86800002)
                    #x86800001)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x86800000 x!0)
                         (ite (bvule #x86800001 x!0) a!2 #x86800000)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var536X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var536X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var536X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv1 32)))))
 (let ((?x219 (concat ?x182 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var536X)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv3 32)))))
 (let ((?x222 (concat ?x221 (concat ?x233 ?x219))))
 (let (($x231 (= input.ind-%var536X.2.1 ?x222)))
 (let (($x164 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x224 (=> $x164 $x231)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var536X))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv2 32))) ?x199)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv3 32))) ?x179)))
 (let (($x177 (= input.ind-%var536X.2.0 ?x216)))
 (let (($x227 (=> $x164 $x177)))
 (let (($x210 (= false false)))
 (let (($x191 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x169 (=> $x191 $x210)))
 (let (($x175 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x189 (ite $x175 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x189 (_ bv1 32))))
 (let (($x163 (= $x164 $x176)))
 (let (($x50 (= ?x189 (_ bv0 32))))
 (let (($x183 (= $x191 $x50)))
 (let (($x214 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x223 (and (and (and (and (and $x214 $x183) $x163) $x169) $x227) $x224)))
 (let (($x167 (not true)))
 (let (($x226 (or $x167 $x223)))
 (let (($x230 (= true true)))
 (let (($x234 (and $x230 $x226)))
 (let (($x267 (= $x234 true)))
 (let (($x193 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x32 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x161 (= $x32 $x193)))
 (let (($x172 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x206 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x122 (and $x206 $x172)))
 (let (($x19 (=> $x122 $x161)))
 (let (($x41 (= (_ bv0 32) (_ bv0 32))))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x184 (= $x166 $x41)))
 (let (($x185 (=> $x122 $x184)))
 (let (($x207 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x68 (=> $x122 $x207)))
 (let (($x160 (= $x172 $x193)))
 (let (($x192 (=> $x206 $x160)))
 (let (($x197 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x159 (and $x206 $x197)))
 (let (($x14 (=> $x159 $x210)))
 (let (($x26 (= $x197 $x41)))
 (let (($x59 (=> $x206 $x26)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x25 (=> $x206 $x173)))
 (let (($x202 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x202 $x210)))
 (let (($x204 (and (and (and (and (and (= $x202 $x41) (= $x206 $x193)) $x229) $x25) $x59) $x14)))
 (let (($x198 (and (and (and (and $x204 $x192) $x68) $x185) $x19)))
 (let (($x188 (= $x198 true)))
 (let ((?x100 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x100)))
 (let (($x158 (= ?x157 input.dst.llvm-%val)))
 (let (($x48 (= $x158 true)))
 (let (($x196 (= $x48 true)))
 (let ((?x106 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x106)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x115 $x97)))
 (let (($x96 (and $x93 $x116)))
 (let (($x102 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x102 $x96)))
 (let (($x123 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x123)))))
 (let (($x109 (and $x113 $x27)))
 (let (($x74 (= $x109 true)))
 (let (($x118 (= $x74 true)))
 (let (($x110 (= $x118 true)))
 (let ((?x135 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x88 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x135) (_ bv1 8)))))
 (let (($x56 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x124 (=> $x56 (or false (or false $x154)))))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (or $x6 $x124)))
 (let ((?x30 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x30 (_ bv4294967292 32)) ?x30)))
 (let (($x21 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x30 (bvsub ?x30 (_ bv4 32))) (bvult ?x30 (bvsub ?x30 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x77 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x127 (and true $x77)))
 (let (($x119 (and $x77 $x127)))
 (let (($x16 (and (and (and $x127 $x119) $x22) $x21)))
 (let (($x131 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x69 (and (and (and $x131 $x16) $x130) $x43)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x135)))
 (let (($x75 (or false $x53)))
 (let (($x55 (or $x6 $x75)))
 (let (($x145 (and $x55 $x69)))
 (let (($x31 (= $x145 true)))
 (let (($x129 (= $x31 true)))
 (let (($x141 (= $x129 true)))
 (let (($x108 (and $x141 $x110)))
 (let (($x180 (and $x108 $x196)))
 (let (($x12 (and $x180 $x188)))
 (let (($x264 (=> $x12 $x267)))
 (let (($x54 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x54 (not $x264))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var536X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var536X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var536X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv1 32)))))
 (let ((?x219 (concat ?x182 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var536X)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv3 32)))))
 (let ((?x222 (concat ?x221 (concat ?x233 ?x219))))
 (let (($x231 (= input.ind-%var536X.2.1 ?x222)))
 (let (($x164 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x224 (=> $x164 $x231)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var536X))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv2 32))) ?x199)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv3 32))) ?x179)))
 (let (($x177 (= input.ind-%var536X.2.0 ?x216)))
 (let (($x227 (=> $x164 $x177)))
 (let (($x210 (= false false)))
 (let (($x191 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x169 (=> $x191 $x210)))
 (let (($x175 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x189 (ite $x175 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x189 (_ bv1 32))))
 (let (($x163 (= $x164 $x176)))
 (let (($x50 (= ?x189 (_ bv0 32))))
 (let (($x183 (= $x191 $x50)))
 (let (($x214 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x223 (and (and (and (and (and $x214 $x183) $x163) $x169) $x227) $x224)))
 (let (($x167 (not true)))
 (let (($x226 (or $x167 $x223)))
 (let (($x230 (= true true)))
 (let (($x234 (and $x230 $x226)))
 (let (($x267 (= $x234 true)))
 (let (($x193 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x32 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x161 (= $x32 $x193)))
 (let (($x172 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x206 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x122 (and $x206 $x172)))
 (let (($x19 (=> $x122 $x161)))
 (let (($x41 (= (_ bv0 32) (_ bv0 32))))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x184 (= $x166 $x41)))
 (let (($x185 (=> $x122 $x184)))
 (let (($x207 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x68 (=> $x122 $x207)))
 (let (($x160 (= $x172 $x193)))
 (let (($x192 (=> $x206 $x160)))
 (let (($x197 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x159 (and $x206 $x197)))
 (let (($x14 (=> $x159 $x210)))
 (let (($x26 (= $x197 $x41)))
 (let (($x59 (=> $x206 $x26)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x25 (=> $x206 $x173)))
 (let (($x202 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x202 $x210)))
 (let (($x204 (and (and (and (and (and (= $x202 $x41) (= $x206 $x193)) $x229) $x25) $x59) $x14)))
 (let (($x198 (and (and (and (and $x204 $x192) $x68) $x185) $x19)))
 (let (($x188 (= $x198 true)))
 (let ((?x100 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x100)))
 (let (($x158 (= ?x157 input.dst.llvm-%val)))
 (let (($x48 (= $x158 true)))
 (let (($x196 (= $x48 true)))
 (let ((?x106 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x106)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x115 $x97)))
 (let (($x96 (and $x93 $x116)))
 (let (($x102 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x102 $x96)))
 (let (($x123 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x123)))))
 (let (($x109 (and $x113 $x27)))
 (let (($x74 (= $x109 true)))
 (let (($x118 (= $x74 true)))
 (let (($x110 (= $x118 true)))
 (let ((?x135 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x88 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x135) (_ bv1 8)))))
 (let (($x56 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x124 (=> $x56 (or false (or false $x154)))))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (or $x6 $x124)))
 (let ((?x30 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x30 (_ bv4294967292 32)) ?x30)))
 (let (($x21 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x30 (bvsub ?x30 (_ bv4 32))) (bvult ?x30 (bvsub ?x30 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x77 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x127 (and true $x77)))
 (let (($x119 (and $x77 $x127)))
 (let (($x16 (and (and (and $x127 $x119) $x22) $x21)))
 (let (($x131 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x69 (and (and (and $x131 $x16) $x130) $x43)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x135)))
 (let (($x75 (or false $x53)))
 (let (($x55 (or $x6 $x75)))
 (let (($x145 (and $x55 $x69)))
 (let (($x31 (= $x145 true)))
 (let (($x129 (= $x31 true)))
 (let (($x141 (= $x129 true)))
 (let (($x108 (and $x141 $x110)))
 (let (($x180 (and $x108 $x196)))
 (let (($x12 (and $x180 $x188)))
 (let (($x264 (=> $x12 $x267)))
 (let (($x54 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x54 (not $x264))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60aff264)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var536X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var536X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var536X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x60aff267)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60aff264)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x60aff264) #x03
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x60aff265) #x03
    (ite (= x!0 #x60aff267) #x03
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x7fffffff) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000001 x!0)
                    (ite (bvule #x80000002 x!0)
                         (ite (bvule #x80000003 x!0) #x80000003 #x80000002)
                         #x80000001)
                    #x80000000)))
    (let ((a!2 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) a!1 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!3 (ite (bvule #x60aff268 x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!2 #x7ffffffc)
                         #x60aff268)
                    #x60aff267)))
      (ite (bvule #x60aff264 x!0)
           (ite (bvule #x60aff265 x!0)
                (ite (bvule #x60aff267 x!0) a!3 #x60aff265)
                #x60aff264)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x86800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x9c800000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var536X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var536X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var536X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x86800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x86800004) #x01
    (ite (= x!0 #x86800005) #x01
    (ite (= x!0 #x86800003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x86800006) #x01
    (ite (= x!0 #x86800000) #x01
    (ite (= x!0 #x86800007) #x01
    (ite (= x!0 #x86800002) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x86800005 x!0)
                    (ite (bvule #x86800006 x!0)
                         (ite (bvule #x86800007 x!0) #x86800007 #x86800006)
                         #x86800005)
                    #x86800004)))
    (let ((a!2 (ite (bvule #x86800002 x!0)
                    (ite (bvule #x86800003 x!0)
                         (ite (bvule #x86800004 x!0) a!1 #x86800003)
                         #x86800002)
                    #x86800001)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x86800000 x!0)
                         (ite (bvule #x86800001 x!0) a!2 #x86800000)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var536X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var536X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var536X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x249 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv1 32)))))
 (let ((?x250 (concat ?x249 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var536X)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv2 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv3 32)))))
 (let ((?x258 (concat ?x254 (concat ?x251 ?x250))))
 (let (($x259 (= input.ind-%var536X.2.1 ?x258)))
 (let (($x226 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x253 (=> $x226 $x259)))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var536X))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv2 32))) ?x270)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv3 32))) ?x240)))
 (let (($x247 (= input.ind-%var536X.2.0 ?x241)))
 (let (($x248 (=> $x226 $x247)))
 (let (($x210 (= false false)))
 (let (($x200 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x264 (=> $x200 $x210)))
 (let (($x222 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x231 (ite $x222 (_ bv0 32) (_ bv1 32))))
 (let (($x234 (bvuge ?x231 (_ bv1 32))))
 (let (($x267 (= $x226 $x234)))
 (let (($x224 (= ?x231 (_ bv0 32))))
 (let (($x223 (= $x200 $x224)))
 (let (($x194 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x257 (and (and (and (and (and $x194 $x223) $x267) $x264) $x248) $x253)))
 (let (($x208 (not true)))
 (let (($x260 (or $x208 $x257)))
 (let (($x233 (= true true)))
 (let (($x263 (and $x233 $x260)))
 (let (($x272 (= $x263 true)))
 (let (($x190 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x218 (= $x169 $x190)))
 (let (($x232 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x211 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x204 (and $x193 $x211)))
 (let (($x185 (and $x204 $x68)))
 (let (($x191 (and $x185 $x232)))
 (let (($x215 (=> $x191 $x218)))
 (let (($x195 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x163 (and $x191 $x195)))
 (let (($x225 (=> $x163 $x210)))
 (let (($x155 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= $x195 $x155)))
 (let (($x176 (=> $x191 $x164)))
 (let (($x189 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x50 (=> $x191 $x189)))
 (let (($x214 (= $x232 $x190)))
 (let (($x162 (=> $x185 $x214)))
 (let (($x198 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x230 (and $x185 $x198)))
 (let (($x167 (=> $x230 $x210)))
 (let (($x188 (= $x198 $x155)))
 (let (($x12 (=> $x185 $x188)))
 (let (($x32 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x161 (=> $x185 $x32)))
 (let (($x122 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x166 (and $x204 $x122)))
 (let (($x184 (=> $x166 $x210)))
 (let (($x165 (= $x68 $x190)))
 (let (($x171 (=> $x204 $x165)))
 (let (($x186 (= $x122 $x155)))
 (let (($x207 (=> $x204 $x186)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x192 (=> $x204 $x160)))
 (let (($x159 (= $x211 $x190)))
 (let (($x14 (=> $x193 $x159)))
 (let (($x20 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x26 (and $x193 $x20)))
 (let (($x59 (=> $x26 $x210)))
 (let (($x61 (= $x20 $x155)))
 (let (($x197 (=> $x193 $x61)))
 (let (($x71 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x173 (=> $x193 $x71)))
 (let (($x41 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x41 $x210)))
 (let (($x203 (and (and (and (and (and (= $x41 $x155) (= $x193 $x190)) $x229) $x173) $x197) $x59)))
 (let (($x179 (and (and (and (and (and (and $x203 $x14) $x192) $x207) $x171) $x184) $x161)))
 (let (($x228 (and (and (and (and (and (and $x179 $x12) $x167) $x162) $x50) $x176) $x225)))
 (let (($x217 (and $x228 $x215)))
 (let (($x221 (= $x217 true)))
 (let ((?x157 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x152 (bvneg ?x157)))
 (let (($x48 (= ?x152 input.dst.llvm-%val)))
 (let (($x196 (= $x48 true)))
 (let (($x180 (= $x196 true)))
 (let ((?x116 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x116)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x87 $x93)))
 (let (($x27 (and $x106 $x96)))
 (let (($x45 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x45 $x27)))
 (let (($x101 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x101)))))
 (let (($x74 (and $x115 $x109)))
 (let (($x118 (= $x74 true)))
 (let (($x110 (= $x118 true)))
 (let (($x108 (= $x110 true)))
 (let ((?x37 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x5 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x37) (_ bv1 8)))))
 (let (($x124 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x43 (=> $x124 (or false (or false $x154)))))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x58 (or $x23 $x43)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x125 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x127 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x119 (and true $x127)))
 (let (($x117 (and $x127 $x119)))
 (let (($x144 (and (and (and $x119 $x117) $x22) $x125)))
 (let (($x112 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x145 (and (and (and $x112 $x144) $x130) $x58)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x37)))
 (let (($x55 (or false $x33)))
 (let (($x28 (or $x23 $x55)))
 (let (($x31 (and $x28 $x145)))
 (let (($x129 (= $x31 true)))
 (let (($x141 (= $x129 true)))
 (let (($x132 (= $x141 true)))
 (let (($x107 (and $x132 $x108)))
 (let (($x156 (and $x107 $x180)))
 (let (($x212 (and $x156 $x221)))
 (let (($x273 (=> $x212 $x272)))
 (let (($x75 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x6 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x79 $x6) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x75 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var536X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var536X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var536X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x249 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv1 32)))))
 (let ((?x250 (concat ?x249 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var536X)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv2 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var536X) (_ bv3 32)))))
 (let ((?x258 (concat ?x254 (concat ?x251 ?x250))))
 (let (($x259 (= input.ind-%var536X.2.1 ?x258)))
 (let (($x226 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x253 (=> $x226 $x259)))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var536X))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv2 32))) ?x270)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd input.ind-%var536X (_ bv3 32))) ?x240)))
 (let (($x247 (= input.ind-%var536X.2.0 ?x241)))
 (let (($x248 (=> $x226 $x247)))
 (let (($x210 (= false false)))
 (let (($x200 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x264 (=> $x200 $x210)))
 (let (($x222 (= (_ bv0 32) input.dst.llvm-%val)))
 (let ((?x231 (ite $x222 (_ bv0 32) (_ bv1 32))))
 (let (($x234 (bvuge ?x231 (_ bv1 32))))
 (let (($x267 (= $x226 $x234)))
 (let (($x224 (= ?x231 (_ bv0 32))))
 (let (($x223 (= $x200 $x224)))
 (let (($x194 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%val)))
 (let (($x257 (and (and (and (and (and $x194 $x223) $x267) $x264) $x248) $x253)))
 (let (($x208 (not true)))
 (let (($x260 (or $x208 $x257)))
 (let (($x233 (= true true)))
 (let (($x263 (and $x233 $x260)))
 (let (($x272 (= $x263 true)))
 (let (($x190 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x218 (= $x169 $x190)))
 (let (($x232 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x211 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x204 (and $x193 $x211)))
 (let (($x185 (and $x204 $x68)))
 (let (($x191 (and $x185 $x232)))
 (let (($x215 (=> $x191 $x218)))
 (let (($x195 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x163 (and $x191 $x195)))
 (let (($x225 (=> $x163 $x210)))
 (let (($x155 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= $x195 $x155)))
 (let (($x176 (=> $x191 $x164)))
 (let (($x189 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x50 (=> $x191 $x189)))
 (let (($x214 (= $x232 $x190)))
 (let (($x162 (=> $x185 $x214)))
 (let (($x198 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x230 (and $x185 $x198)))
 (let (($x167 (=> $x230 $x210)))
 (let (($x188 (= $x198 $x155)))
 (let (($x12 (=> $x185 $x188)))
 (let (($x32 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x161 (=> $x185 $x32)))
 (let (($x122 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x166 (and $x204 $x122)))
 (let (($x184 (=> $x166 $x210)))
 (let (($x165 (= $x68 $x190)))
 (let (($x171 (=> $x204 $x165)))
 (let (($x186 (= $x122 $x155)))
 (let (($x207 (=> $x204 $x186)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x192 (=> $x204 $x160)))
 (let (($x159 (= $x211 $x190)))
 (let (($x14 (=> $x193 $x159)))
 (let (($x20 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x26 (and $x193 $x20)))
 (let (($x59 (=> $x26 $x210)))
 (let (($x61 (= $x20 $x155)))
 (let (($x197 (=> $x193 $x61)))
 (let (($x71 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x173 (=> $x193 $x71)))
 (let (($x41 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x41 $x210)))
 (let (($x203 (and (and (and (and (and (= $x41 $x155) (= $x193 $x190)) $x229) $x173) $x197) $x59)))
 (let (($x179 (and (and (and (and (and (and $x203 $x14) $x192) $x207) $x171) $x184) $x161)))
 (let (($x228 (and (and (and (and (and (and $x179 $x12) $x167) $x162) $x50) $x176) $x225)))
 (let (($x217 (and $x228 $x215)))
 (let (($x221 (= $x217 true)))
 (let ((?x157 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x152 (bvneg ?x157)))
 (let (($x48 (= ?x152 input.dst.llvm-%val)))
 (let (($x196 (= $x48 true)))
 (let (($x180 (= $x196 true)))
 (let ((?x116 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x116)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x87 $x93)))
 (let (($x27 (and $x106 $x96)))
 (let (($x45 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x45 $x27)))
 (let (($x101 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x101)))))
 (let (($x74 (and $x115 $x109)))
 (let (($x118 (= $x74 true)))
 (let (($x110 (= $x118 true)))
 (let (($x108 (= $x110 true)))
 (let ((?x37 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x5 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x37) (_ bv1 8)))))
 (let (($x124 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x43 (=> $x124 (or false (or false $x154)))))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x58 (or $x23 $x43)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x125 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x127 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x119 (and true $x127)))
 (let (($x117 (and $x127 $x119)))
 (let (($x144 (and (and (and $x119 $x117) $x22) $x125)))
 (let (($x112 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x145 (and (and (and $x112 $x144) $x130) $x58)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x37)))
 (let (($x55 (or false $x33)))
 (let (($x28 (or $x23 $x55)))
 (let (($x31 (and $x28 $x145)))
 (let (($x129 (= $x31 true)))
 (let (($x141 (= $x129 true)))
 (let (($x132 (= $x141 true)))
 (let (($x107 (and $x132 $x108)))
 (let (($x156 (and $x107 $x180)))
 (let (($x212 (and $x156 $x221)))
 (let (($x273 (=> $x212 $x272)))
 (let (($x75 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x6 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x79 $x6) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x75 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x86800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x9c800000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var536X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var536X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var536X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x86800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x86800004) #x01
    (ite (= x!0 #x86800005) #x01
    (ite (= x!0 #x86800003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x86800006) #x01
    (ite (= x!0 #x86800000) #x01
    (ite (= x!0 #x86800007) #x01
    (ite (= x!0 #x86800002) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x86800005 x!0)
                    (ite (bvule #x86800006 x!0)
                         (ite (bvule #x86800007 x!0) #x86800007 #x86800006)
                         #x86800005)
                    #x86800004)))
    (let ((a!2 (ite (bvule #x86800002 x!0)
                    (ite (bvule #x86800003 x!0)
                         (ite (bvule #x86800004 x!0) a!1 #x86800003)
                         #x86800002)
                    #x86800001)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x86800000 x!0)
                         (ite (bvule #x86800001 x!0) a!2 #x86800000)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60aff264)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var536X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var536X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var536X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x60aff267)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60aff264)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x60aff264) #x03
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x60aff265) #x03
    (ite (= x!0 #x60aff267) #x03
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x7fffffff) #x01
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000001 x!0)
                    (ite (bvule #x80000002 x!0)
                         (ite (bvule #x80000003 x!0) #x80000003 #x80000002)
                         #x80000001)
                    #x80000000)))
    (let ((a!2 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) a!1 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!3 (ite (bvule #x60aff268 x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!2 #x7ffffffc)
                         #x60aff268)
                    #x60aff267)))
      (ite (bvule #x60aff264 x!0)
           (ite (bvule #x60aff265 x!0)
                (ite (bvule #x60aff267 x!0) a!3 #x60aff265)
                #x60aff264)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var656X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var656X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var656X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x188 (concat ?x198 (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv4 32))))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x232 (concat ?x177 (concat ?x216 ?x188))))
 (let (($x214 (= input.ind-%var656X.2.1 ?x232)))
 (let (($x172 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x162 (=> $x172 $x214)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var656X))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv2 32))) ?x68)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv3 32))) ?x266)))
 (let (($x185 (= input.ind-%var656X.2.0 ?x199)))
 (let (($x76 (=> $x172 $x185)))
 (let ((?x197 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x203 (= (_ bv0 32) ?x197)))
 (let ((?x211 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x211 (_ bv1 32))))
 (let (($x192 (= $x172 $x160)))
 (let (($x42 (= false false)))
 (let (($x59 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x204 (=> $x59 $x42)))
 (let (($x191 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x197) (= $x59 (= ?x211 (_ bv0 32)))) $x204)))
 (let (($x50 (and (and (and $x191 $x192) $x76) $x162)))
 (let (($x71 (not true)))
 (let (($x220 (or $x71 $x50)))
 (let (($x213 (= true true)))
 (let (($x183 (and $x213 $x220)))
 (let (($x195 (= $x183 true)))
 (let (($x209 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x201 (= $x190 $x209)))
 (let (($x206 (= (_ bv0 32) (_ bv0 32))))
 (let (($x155 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x193 (= $x155 $x206)))
 (let (($x210 (and $x193 $x201)))
 (let (($x229 (= $x210 true)))
 (let ((?x100 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x100)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x118 $x108)))
 (let (($x152 (and $x107 $x157)))
 (let (($x64 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x64 $x152)))
 (let (($x116 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x116)))))
 (let (($x48 (and $x74 $x158)))
 (let (($x196 (= $x48 true)))
 (let (($x180 (= $x196 true)))
 (let (($x156 (= $x180 true)))
 (let ((?x102 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x102)))
 (let (($x8 (= ?x111 input.dst.llvm-%val)))
 (let (($x101 (= $x8 true)))
 (let (($x113 (= $x101 true)))
 (let ((?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x95 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x70) (_ bv1 8)))))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x58 (=> $x43 (or false (or false $x154)))))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x140 (or $x29 $x58)))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x65 (_ bv4294967292 32)) ?x65)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x65 (bvsub ?x65 (_ bv4 32))) (bvult ?x65 (bvsub ?x65 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x117 (and true $x119)))
 (let (($x21 (and $x119 $x117)))
 (let (($x66 (and (and (and $x117 $x21) $x22) $x114)))
 (let (($x136 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x31 (and (and (and $x136 $x66) $x130) $x140)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x70)))
 (let (($x28 (or false $x53)))
 (let (($x126 (or $x29 $x28)))
 (let (($x129 (and $x126 $x31)))
 (let (($x141 (= $x129 true)))
 (let (($x132 (= $x141 true)))
 (let (($x105 (= $x132 true)))
 (let (($x104 (and $x105 $x113)))
 (let (($x202 (and $x104 $x156)))
 (let (($x178 (and $x202 $x229)))
 (let (($x164 (=> $x178 $x195)))
 (let (($x55 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x23 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x23) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x55 (not $x164))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var656X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var656X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var656X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x188 (concat ?x198 (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv4 32))))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x232 (concat ?x177 (concat ?x216 ?x188))))
 (let (($x214 (= input.ind-%var656X.2.1 ?x232)))
 (let (($x172 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x162 (=> $x172 $x214)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var656X))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv2 32))) ?x68)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv3 32))) ?x266)))
 (let (($x185 (= input.ind-%var656X.2.0 ?x199)))
 (let (($x76 (=> $x172 $x185)))
 (let ((?x197 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x203 (= (_ bv0 32) ?x197)))
 (let ((?x211 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x211 (_ bv1 32))))
 (let (($x192 (= $x172 $x160)))
 (let (($x42 (= false false)))
 (let (($x59 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x204 (=> $x59 $x42)))
 (let (($x191 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x197) (= $x59 (= ?x211 (_ bv0 32)))) $x204)))
 (let (($x50 (and (and (and $x191 $x192) $x76) $x162)))
 (let (($x71 (not true)))
 (let (($x220 (or $x71 $x50)))
 (let (($x213 (= true true)))
 (let (($x183 (and $x213 $x220)))
 (let (($x195 (= $x183 true)))
 (let (($x209 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x201 (= $x190 $x209)))
 (let (($x206 (= (_ bv0 32) (_ bv0 32))))
 (let (($x155 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x193 (= $x155 $x206)))
 (let (($x210 (and $x193 $x201)))
 (let (($x229 (= $x210 true)))
 (let ((?x100 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x100)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x118 $x108)))
 (let (($x152 (and $x107 $x157)))
 (let (($x64 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x64 $x152)))
 (let (($x116 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x116)))))
 (let (($x48 (and $x74 $x158)))
 (let (($x196 (= $x48 true)))
 (let (($x180 (= $x196 true)))
 (let (($x156 (= $x180 true)))
 (let ((?x102 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x102)))
 (let (($x8 (= ?x111 input.dst.llvm-%val)))
 (let (($x101 (= $x8 true)))
 (let (($x113 (= $x101 true)))
 (let ((?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x95 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x70) (_ bv1 8)))))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x58 (=> $x43 (or false (or false $x154)))))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x140 (or $x29 $x58)))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x65 (_ bv4294967292 32)) ?x65)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x65 (bvsub ?x65 (_ bv4 32))) (bvult ?x65 (bvsub ?x65 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x117 (and true $x119)))
 (let (($x21 (and $x119 $x117)))
 (let (($x66 (and (and (and $x117 $x21) $x22) $x114)))
 (let (($x136 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x31 (and (and (and $x136 $x66) $x130) $x140)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x70)))
 (let (($x28 (or false $x53)))
 (let (($x126 (or $x29 $x28)))
 (let (($x129 (and $x126 $x31)))
 (let (($x141 (= $x129 true)))
 (let (($x132 (= $x141 true)))
 (let (($x105 (= $x132 true)))
 (let (($x104 (and $x105 $x113)))
 (let (($x202 (and $x104 $x156)))
 (let (($x178 (and $x202 $x229)))
 (let (($x164 (=> $x178 $x195)))
 (let (($x55 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x23 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x23) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x55 (not $x164))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.ind-%var656X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x39bf8760)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf6cc8a5c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var656X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var656X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf6cc8a5f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf6cc8a5c)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf6cc8a5d x!0)
                    (ite (bvule #xf6cc8a5f x!0)
                         (ite (bvule #xf6cc8a60 x!0) #xf6cc8a60 #xf6cc8a5f)
                         #xf6cc8a5d)
                    #xf6cc8a5c)))
    (let ((a!2 (ite (bvule #x39bf8766 x!0)
                    (ite (bvule #x39bf8767 x!0)
                         (ite (bvule #xf6cc8a5c x!0) a!1 #x39bf8767)
                         #x39bf8766)
                    #x39bf8765)))
    (let ((a!3 (ite (bvule #x39bf8763 x!0)
                    (ite (bvule #x39bf8764 x!0)
                         (ite (bvule #x39bf8765 x!0) a!2 #x39bf8764)
                         #x39bf8763)
                    #x39bf8762)))
      (ite (bvule #x39bf8760 x!0)
           (ite (bvule #x39bf8761 x!0)
                (ite (bvule #x39bf8762 x!0) a!3 #x39bf8761)
                #x39bf8760)
           #x00000000)))))
  (define-fun k!15!17 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x39bf8762) #x01
    (ite (= x!0 #xf6cc8a5c) #x03
    (ite (= x!0 #x39bf8765) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x39bf8761) #x01
    (ite (= x!0 #x39bf8764) #x01
    (ite (= x!0 #xf6cc8a5d) #x03
    (ite (= x!0 #xf6cc8a5f) #x03
    (ite (= x!0 #x39bf8766) #x01
    (ite (= x!0 #x39bf8760) #x01
    (ite (= x!0 #x39bf8767) #x01
    (ite (= x!0 #x39bf8763) #x01
      #x02)))))))))))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!15!17 (k!16 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffe)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x007ffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var656X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var656X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var656X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x80000000) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000003 x!0)
                    (ite (bvule #x80000004 x!0)
                         (ite (bvule #x80000005 x!0) #x80000005 #x80000004)
                         #x80000003)
                    #x80000002)))
    (let ((a!2 (ite (bvule #x80000000 x!0)
                    (ite (bvule #x80000001 x!0)
                         (ite (bvule #x80000002 x!0) a!1 #x80000001)
                         #x80000000)
                    #x7fffffff)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x7ffffffe x!0)
                         (ite (bvule #x7fffffff x!0) a!2 #x7ffffffe)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var656X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var656X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var656X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x12 (concat ?x177 (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv4 32))))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x230 (concat ?x188 (concat ?x19 ?x12))))
 (let (($x232 (= input.ind-%var656X.2.1 ?x230)))
 (let (($x160 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x214 (=> $x160 $x232)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var656X))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv2 32))) ?x171)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv3 32))) ?x186)))
 (let (($x185 (= input.ind-%var656X.2.0 ?x199)))
 (let (($x76 (=> $x160 $x185)))
 (let ((?x203 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x227 (= (_ bv0 32) ?x203)))
 (let ((?x42 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x42 (_ bv1 32))))
 (let (($x175 (= $x160 $x192)))
 (let (($x229 (= false false)))
 (let (($x14 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x172 (=> $x14 $x229)))
 (let (($x50 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x203) (= $x14 (= ?x42 (_ bv0 32)))) $x172)))
 (let (($x195 (and (and (and $x50 $x175) $x76) $x214)))
 (let (($x26 (not true)))
 (let (($x164 (or $x26 $x195)))
 (let (($x168 (= true true)))
 (let (($x176 (and $x168 $x164)))
 (let (($x170 (= $x176 true)))
 (let (($x206 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x178 (=> $x206 $x229)))
 (let (($x201 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x210 (= $x209 $x201)))
 (let (($x193 (= (_ bv0 32) (_ bv0 32))))
 (let (($x190 (= $x206 $x193)))
 (let (($x71 (and (and $x190 $x210) $x178)))
 (let (($x173 (= $x71 true)))
 (let ((?x157 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x157)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x110 $x107)))
 (let (($x158 (and $x100 $x152)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x109 $x158)))
 (let (($x27 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x27)))))
 (let (($x196 (and $x118 $x48)))
 (let (($x180 (= $x196 true)))
 (let (($x156 (= $x180 true)))
 (let (($x202 (= $x156 true)))
 (let ((?x111 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x111)))
 (let (($x101 (= ?x123 input.dst.llvm-%val)))
 (let (($x113 (= $x101 true)))
 (let (($x104 (= $x113 true)))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x103 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x18) (_ bv1 8)))))
 (let (($x58 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x140 (=> $x58 (or false (or false $x154)))))
 (let (($x37 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (or $x37 $x140)))
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x35 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x21 (and true $x117)))
 (let (($x125 (and $x117 $x21)))
 (let (($x56 (and (and (and $x21 $x125) $x22) $x35)))
 (let (($x52 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (and (and (and $x52 $x56) $x130) $x13)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x18)))
 (let (($x126 (or false $x33)))
 (let (($x131 (or $x37 $x126)))
 (let (($x141 (and $x131 $x129)))
 (let (($x132 (= $x141 true)))
 (let (($x105 (= $x132 true)))
 (let (($x120 (= $x105 true)))
 (let (($x45 (and $x120 $x104)))
 (let (($x41 (and $x45 $x202)))
 (let (($x197 (and $x41 $x173)))
 (let (($x47 (=> $x197 $x170)))
 (let (($x28 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x29 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x29) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x28 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var656X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var656X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var656X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x12 (concat ?x177 (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv4 32))))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x230 (concat ?x188 (concat ?x19 ?x12))))
 (let (($x232 (= input.ind-%var656X.2.1 ?x230)))
 (let (($x160 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x214 (=> $x160 $x232)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var656X))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv2 32))) ?x171)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv3 32))) ?x186)))
 (let (($x185 (= input.ind-%var656X.2.0 ?x199)))
 (let (($x76 (=> $x160 $x185)))
 (let ((?x203 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x227 (= (_ bv0 32) ?x203)))
 (let ((?x42 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x42 (_ bv1 32))))
 (let (($x175 (= $x160 $x192)))
 (let (($x229 (= false false)))
 (let (($x14 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x172 (=> $x14 $x229)))
 (let (($x50 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x203) (= $x14 (= ?x42 (_ bv0 32)))) $x172)))
 (let (($x195 (and (and (and $x50 $x175) $x76) $x214)))
 (let (($x26 (not true)))
 (let (($x164 (or $x26 $x195)))
 (let (($x168 (= true true)))
 (let (($x176 (and $x168 $x164)))
 (let (($x170 (= $x176 true)))
 (let (($x206 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x178 (=> $x206 $x229)))
 (let (($x201 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x210 (= $x209 $x201)))
 (let (($x193 (= (_ bv0 32) (_ bv0 32))))
 (let (($x190 (= $x206 $x193)))
 (let (($x71 (and (and $x190 $x210) $x178)))
 (let (($x173 (= $x71 true)))
 (let ((?x157 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x157)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x110 $x107)))
 (let (($x158 (and $x100 $x152)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x109 $x158)))
 (let (($x27 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x27)))))
 (let (($x196 (and $x118 $x48)))
 (let (($x180 (= $x196 true)))
 (let (($x156 (= $x180 true)))
 (let (($x202 (= $x156 true)))
 (let ((?x111 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x111)))
 (let (($x101 (= ?x123 input.dst.llvm-%val)))
 (let (($x113 (= $x101 true)))
 (let (($x104 (= $x113 true)))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x103 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x18) (_ bv1 8)))))
 (let (($x58 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x140 (=> $x58 (or false (or false $x154)))))
 (let (($x37 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (or $x37 $x140)))
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x35 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x21 (and true $x117)))
 (let (($x125 (and $x117 $x21)))
 (let (($x56 (and (and (and $x21 $x125) $x22) $x35)))
 (let (($x52 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (and (and (and $x52 $x56) $x130) $x13)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x18)))
 (let (($x126 (or false $x33)))
 (let (($x131 (or $x37 $x126)))
 (let (($x141 (and $x131 $x129)))
 (let (($x132 (= $x141 true)))
 (let (($x105 (= $x132 true)))
 (let (($x120 (= $x105 true)))
 (let (($x45 (and $x120 $x104)))
 (let (($x41 (and $x45 $x202)))
 (let (($x197 (and $x41 $x173)))
 (let (($x47 (=> $x197 $x170)))
 (let (($x28 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x29 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x29) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x28 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffe)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x007ffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var656X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var656X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var656X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x80000000) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000003 x!0)
                    (ite (bvule #x80000004 x!0)
                         (ite (bvule #x80000005 x!0) #x80000005 #x80000004)
                         #x80000003)
                    #x80000002)))
    (let ((a!2 (ite (bvule #x80000000 x!0)
                    (ite (bvule #x80000001 x!0)
                         (ite (bvule #x80000002 x!0) a!1 #x80000001)
                         #x80000000)
                    #x7fffffff)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x7ffffffe x!0)
                         (ite (bvule #x7fffffff x!0) a!2 #x7ffffffe)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.ind-%var656X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x39bf8760)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf6cc8a5c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var656X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var656X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf6cc8a5f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf6cc8a5c)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf6cc8a5d x!0)
                    (ite (bvule #xf6cc8a5f x!0)
                         (ite (bvule #xf6cc8a60 x!0) #xf6cc8a60 #xf6cc8a5f)
                         #xf6cc8a5d)
                    #xf6cc8a5c)))
    (let ((a!2 (ite (bvule #x39bf8766 x!0)
                    (ite (bvule #x39bf8767 x!0)
                         (ite (bvule #xf6cc8a5c x!0) a!1 #x39bf8767)
                         #x39bf8766)
                    #x39bf8765)))
    (let ((a!3 (ite (bvule #x39bf8763 x!0)
                    (ite (bvule #x39bf8764 x!0)
                         (ite (bvule #x39bf8765 x!0) a!2 #x39bf8764)
                         #x39bf8763)
                    #x39bf8762)))
      (ite (bvule #x39bf8760 x!0)
           (ite (bvule #x39bf8761 x!0)
                (ite (bvule #x39bf8762 x!0) a!3 #x39bf8761)
                #x39bf8760)
           #x00000000)))))
  (define-fun k!15!17 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x39bf8762) #x01
    (ite (= x!0 #xf6cc8a5c) #x03
    (ite (= x!0 #x39bf8765) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x39bf8761) #x01
    (ite (= x!0 #x39bf8764) #x01
    (ite (= x!0 #xf6cc8a5d) #x03
    (ite (= x!0 #xf6cc8a5f) #x03
    (ite (= x!0 #x39bf8766) #x01
    (ite (= x!0 #x39bf8760) #x01
    (ite (= x!0 #x39bf8767) #x01
    (ite (= x!0 #x39bf8763) #x01
      #x02)))))))))))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!15!17 (k!16 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var656X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var656X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var656X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x194 (concat ?x182 (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv4 32))))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x223 (concat ?x224 (concat ?x200 ?x194))))
 (let (($x261 (= input.ind-%var656X.2.1 ?x223)))
 (let (($x12 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x226 (=> $x12 $x261)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var656X))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv2 32))) ?x47)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv3 32))) ?x49)))
 (let (($x215 (= input.ind-%var656X.2.0 ?x218)))
 (let (($x217 (=> $x12 $x215)))
 (let ((?x189 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x216 (= (_ bv0 32) ?x189)))
 (let ((?x19 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x19 (_ bv1 32))))
 (let (($x230 (= $x12 $x198)))
 (let (($x229 (= false false)))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x161 (=> $x188 $x229)))
 (let (($x267 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x189) (= $x188 (= ?x19 (_ bv0 32)))) $x161)))
 (let (($x262 (and (and (and $x267 $x230) $x217) $x226)))
 (let (($x76 (not true)))
 (let (($x235 (or $x76 $x262)))
 (let (($x185 (= true true)))
 (let (($x265 (and $x185 $x235)))
 (let (($x174 (= $x265 true)))
 (let (($x210 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x220 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x39 (= $x220 $x210)))
 (let (($x14 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x201 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x204 (and $x201 $x14)))
 (let (($x10 (=> $x204 $x39)))
 (let (($x190 (= (_ bv0 32) (_ bv0 32))))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x192 (= $x160 $x190)))
 (let (($x175 (=> $x204 $x192)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x172 (=> $x204 $x162)))
 (let (($x227 (= $x14 $x210)))
 (let (($x42 (=> $x201 $x227)))
 (let (($x26 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x211 (and $x201 $x26)))
 (let (($x159 (=> $x211 $x229)))
 (let (($x59 (= $x26 $x190)))
 (let (($x203 (=> $x201 $x59)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x197 (=> $x201 $x173)))
 (let (($x193 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x178 (=> $x193 $x229)))
 (let (($x7 (and (and (and (and (and (= $x193 $x190) (= $x201 $x210)) $x178) $x197) $x203) $x159)))
 (let (($x171 (and (and (and (and $x7 $x42) $x172) $x175) $x10)))
 (let (($x186 (= $x171 true)))
 (let ((?x152 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x152)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x108 $x100)))
 (let (($x48 (and $x157 $x158)))
 (let (($x64 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x64 $x48)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x180 (and $x110 $x196)))
 (let (($x156 (= $x180 true)))
 (let (($x202 (= $x156 true)))
 (let (($x41 (= $x202 true)))
 (let ((?x123 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x123)))
 (let (($x113 (= ?x8 input.dst.llvm-%val)))
 (let (($x104 (= $x113 true)))
 (let (($x45 (= $x104 true)))
 (let ((?x135 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x145 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x135) (_ bv1 8)))))
 (let (($x140 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x13 (=> $x140 (or false (or false $x154)))))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x88 (or $x70 $x13)))
 (let ((?x144 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x144 (_ bv4294967292 32)) ?x144)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x144 (bvsub ?x144 (_ bv4 32))) (bvult ?x144 (bvsub ?x144 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x125 (and true $x21)))
 (let (($x114 (and $x21 $x125)))
 (let (($x124 (and (and (and $x125 $x114) $x22) $x67)))
 (let (($x77 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x141 (and (and (and $x77 $x124) $x130) $x88)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x135)))
 (let (($x131 (or false $x53)))
 (let (($x112 (or $x70 $x131)))
 (let (($x132 (and $x112 $x141)))
 (let (($x105 (= $x132 true)))
 (let (($x120 (= $x105 true)))
 (let (($x102 (= $x120 true)))
 (let (($x97 (and $x102 $x45)))
 (let (($x155 (and $x97 $x41)))
 (let (($x199 (and $x155 $x186)))
 (let (($x243 (=> $x199 $x174)))
 (let (($x126 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x37 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x37) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x126 (not $x243)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var656X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var656X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var656X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x194 (concat ?x182 (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv4 32))))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x223 (concat ?x224 (concat ?x200 ?x194))))
 (let (($x261 (= input.ind-%var656X.2.1 ?x223)))
 (let (($x12 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x226 (=> $x12 $x261)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var656X))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv2 32))) ?x47)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv3 32))) ?x49)))
 (let (($x215 (= input.ind-%var656X.2.0 ?x218)))
 (let (($x217 (=> $x12 $x215)))
 (let ((?x189 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x216 (= (_ bv0 32) ?x189)))
 (let ((?x19 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x19 (_ bv1 32))))
 (let (($x230 (= $x12 $x198)))
 (let (($x229 (= false false)))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x161 (=> $x188 $x229)))
 (let (($x267 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x189) (= $x188 (= ?x19 (_ bv0 32)))) $x161)))
 (let (($x262 (and (and (and $x267 $x230) $x217) $x226)))
 (let (($x76 (not true)))
 (let (($x235 (or $x76 $x262)))
 (let (($x185 (= true true)))
 (let (($x265 (and $x185 $x235)))
 (let (($x174 (= $x265 true)))
 (let (($x210 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x220 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x39 (= $x220 $x210)))
 (let (($x14 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x201 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x204 (and $x201 $x14)))
 (let (($x10 (=> $x204 $x39)))
 (let (($x190 (= (_ bv0 32) (_ bv0 32))))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x192 (= $x160 $x190)))
 (let (($x175 (=> $x204 $x192)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x172 (=> $x204 $x162)))
 (let (($x227 (= $x14 $x210)))
 (let (($x42 (=> $x201 $x227)))
 (let (($x26 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x211 (and $x201 $x26)))
 (let (($x159 (=> $x211 $x229)))
 (let (($x59 (= $x26 $x190)))
 (let (($x203 (=> $x201 $x59)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x197 (=> $x201 $x173)))
 (let (($x193 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x178 (=> $x193 $x229)))
 (let (($x7 (and (and (and (and (and (= $x193 $x190) (= $x201 $x210)) $x178) $x197) $x203) $x159)))
 (let (($x171 (and (and (and (and $x7 $x42) $x172) $x175) $x10)))
 (let (($x186 (= $x171 true)))
 (let ((?x152 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x152)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x108 $x100)))
 (let (($x48 (and $x157 $x158)))
 (let (($x64 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x64 $x48)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x180 (and $x110 $x196)))
 (let (($x156 (= $x180 true)))
 (let (($x202 (= $x156 true)))
 (let (($x41 (= $x202 true)))
 (let ((?x123 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x123)))
 (let (($x113 (= ?x8 input.dst.llvm-%val)))
 (let (($x104 (= $x113 true)))
 (let (($x45 (= $x104 true)))
 (let ((?x135 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x145 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x135) (_ bv1 8)))))
 (let (($x140 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x13 (=> $x140 (or false (or false $x154)))))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x88 (or $x70 $x13)))
 (let ((?x144 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x144 (_ bv4294967292 32)) ?x144)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x144 (bvsub ?x144 (_ bv4 32))) (bvult ?x144 (bvsub ?x144 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x125 (and true $x21)))
 (let (($x114 (and $x21 $x125)))
 (let (($x124 (and (and (and $x125 $x114) $x22) $x67)))
 (let (($x77 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x141 (and (and (and $x77 $x124) $x130) $x88)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x135)))
 (let (($x131 (or false $x53)))
 (let (($x112 (or $x70 $x131)))
 (let (($x132 (and $x112 $x141)))
 (let (($x105 (= $x132 true)))
 (let (($x120 (= $x105 true)))
 (let (($x102 (= $x120 true)))
 (let (($x97 (and $x102 $x45)))
 (let (($x155 (and $x97 $x41)))
 (let (($x199 (and $x155 $x186)))
 (let (($x243 (=> $x199 $x174)))
 (let (($x126 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x37 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x37) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x126 (not $x243)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.ind-%var656X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x39bf8760)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf6cc8a5c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var656X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var656X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf6cc8a5f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf6cc8a5c)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf6cc8a5d x!0)
                    (ite (bvule #xf6cc8a5f x!0)
                         (ite (bvule #xf6cc8a60 x!0) #xf6cc8a60 #xf6cc8a5f)
                         #xf6cc8a5d)
                    #xf6cc8a5c)))
    (let ((a!2 (ite (bvule #x39bf8766 x!0)
                    (ite (bvule #x39bf8767 x!0)
                         (ite (bvule #xf6cc8a5c x!0) a!1 #x39bf8767)
                         #x39bf8766)
                    #x39bf8765)))
    (let ((a!3 (ite (bvule #x39bf8763 x!0)
                    (ite (bvule #x39bf8764 x!0)
                         (ite (bvule #x39bf8765 x!0) a!2 #x39bf8764)
                         #x39bf8763)
                    #x39bf8762)))
      (ite (bvule #x39bf8760 x!0)
           (ite (bvule #x39bf8761 x!0)
                (ite (bvule #x39bf8762 x!0) a!3 #x39bf8761)
                #x39bf8760)
           #x00000000)))))
  (define-fun k!15!17 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x39bf8762) #x01
    (ite (= x!0 #xf6cc8a5c) #x03
    (ite (= x!0 #x39bf8765) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x39bf8761) #x01
    (ite (= x!0 #x39bf8764) #x01
    (ite (= x!0 #xf6cc8a5d) #x03
    (ite (= x!0 #xf6cc8a5f) #x03
    (ite (= x!0 #x39bf8766) #x01
    (ite (= x!0 #x39bf8760) #x01
    (ite (= x!0 #x39bf8767) #x01
    (ite (= x!0 #x39bf8763) #x01
      #x02)))))))))))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!15!17 (k!16 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffe)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x007ffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var656X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var656X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var656X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x80000000) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000003 x!0)
                    (ite (bvule #x80000004 x!0)
                         (ite (bvule #x80000005 x!0) #x80000005 #x80000004)
                         #x80000003)
                    #x80000002)))
    (let ((a!2 (ite (bvule #x80000000 x!0)
                    (ite (bvule #x80000001 x!0)
                         (ite (bvule #x80000002 x!0) a!1 #x80000001)
                         #x80000000)
                    #x7fffffff)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x7ffffffe x!0)
                         (ite (bvule #x7fffffff x!0) a!2 #x7ffffffe)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var656X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var656X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var656X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x246 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x249 (concat ?x246 (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv4 32))))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x253 (concat ?x259 (concat ?x250 ?x249))))
 (let (($x257 (= input.ind-%var656X.2.1 ?x253)))
 (let (($x265 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x260 (=> $x265 $x257)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var656X))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv2 32))) ?x236)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv3 32))) ?x241)))
 (let (($x205 (= input.ind-%var656X.2.0 ?x255)))
 (let (($x244 (=> $x265 $x205)))
 (let ((?x182 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x223 (= (_ bv0 32) ?x182)))
 (let ((?x261 (ite $x223 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x261 (_ bv1 32))))
 (let (($x243 (= $x265 $x174)))
 (let (($x229 (= false false)))
 (let (($x222 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x235 (=> $x222 $x229)))
 (let (($x272 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x182) (= $x222 (= ?x261 (_ bv0 32)))) $x235)))
 (let (($x275 (and (and (and $x272 $x243) $x244) $x260)))
 (let (($x200 (not true)))
 (let (($x63 (or $x200 $x275)))
 (let (($x219 (= true true)))
 (let (($x134 (and $x219 $x63)))
 (let (($x276 (= $x134 true)))
 (let (($x213 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x230 (= $x198 $x213)))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x207 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x210 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x7 (and $x210 $x207)))
 (let (($x175 (and $x7 $x172)))
 (let (($x179 (and $x175 $x183)))
 (let (($x252 (=> $x179 $x230)))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x267 (and $x179 $x177)))
 (let (($x12 (=> $x267 $x229)))
 (let (($x209 (= (_ bv0 32) (_ bv0 32))))
 (let (($x234 (= $x177 $x209)))
 (let (($x161 (=> $x179 $x234)))
 (let (($x216 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x19 (=> $x179 $x216)))
 (let (($x189 (= $x183 $x213)))
 (let (($x32 (=> $x175 $x189)))
 (let (($x171 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x185 (and $x175 $x171)))
 (let (($x76 (=> $x185 $x229)))
 (let (($x186 (= $x171 $x209)))
 (let (($x199 (=> $x175 $x186)))
 (let (($x220 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x39 (=> $x175 $x220)))
 (let (($x204 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x160 (and $x7 $x204)))
 (let (($x192 (=> $x160 $x229)))
 (let (($x165 (= $x172 $x213)))
 (let (($x50 (=> $x7 $x165)))
 (let (($x191 (= $x204 $x209)))
 (let (($x162 (=> $x7 $x191)))
 (let (($x227 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x42 (=> $x7 $x227)))
 (let (($x211 (= $x207 $x213)))
 (let (($x159 (=> $x210 $x211)))
 (let (($x266 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x59 (and $x210 $x266)))
 (let (($x203 (=> $x59 $x229)))
 (let (($x168 (= $x266 $x209)))
 (let (($x26 (=> $x210 $x168)))
 (let (($x71 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x173 (=> $x210 $x71)))
 (let (($x190 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x178 (=> $x190 $x229)))
 (let (($x169 (and (and (and (and (and (= $x190 $x209) (= $x210 $x213)) $x178) $x173) $x26) $x203)))
 (let (($x47 (and (and (and (and (and (and $x169 $x159) $x42) $x162) $x50) $x192) $x39)))
 (let (($x221 (and (and (and (and (and (and $x47 $x199) $x76) $x32) $x19) $x161) $x12)))
 (let (($x212 (and $x221 $x252)))
 (let (($x231 (= $x212 true)))
 (let ((?x158 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x158)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x107 $x157)))
 (let (($x196 (and $x152 $x48)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x109 $x196)))
 (let (($x87 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x87)))))
 (let (($x156 (and $x108 $x180)))
 (let (($x202 (= $x156 true)))
 (let (($x41 (= $x202 true)))
 (let (($x155 (= $x41 true)))
 (let ((?x8 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x8)))
 (let (($x104 (= ?x101 input.dst.llvm-%val)))
 (let (($x45 (= $x104 true)))
 (let (($x97 (= $x45 true)))
 (let ((?x23 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x31 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x23) (_ bv1 8)))))
 (let (($x13 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x88 (=> $x13 (or false (or false $x154)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (or $x18 $x88)))
 (let ((?x66 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x66 (_ bv4294967292 32)) ?x66)))
 (let (($x30 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x66 (bvsub ?x66 (_ bv4 32))) (bvult ?x66 (bvsub ?x66 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x125 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x114 (and true $x125)))
 (let (($x35 (and $x125 $x114)))
 (let (($x43 (and (and (and $x114 $x35) $x22) $x30)))
 (let (($x127 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x132 (and (and (and $x127 $x43) $x130) $x5)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x23)))
 (let (($x112 (or false $x33)))
 (let (($x136 (or $x18 $x112)))
 (let (($x105 (and $x136 $x132)))
 (let (($x120 (= $x105 true)))
 (let (($x102 (= $x120 true)))
 (let (($x111 (= $x102 true)))
 (let (($x106 (and $x111 $x97)))
 (let (($x206 (and $x106 $x155)))
 (let (($x224 (and $x206 $x231)))
 (let (($x38 (=> $x224 $x276)))
 (let (($x131 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x70 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x70) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x131 (not $x38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var656X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var656X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var656X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x246 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x249 (concat ?x246 (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv4 32))))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var656X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x253 (concat ?x259 (concat ?x250 ?x249))))
 (let (($x257 (= input.ind-%var656X.2.1 ?x253)))
 (let (($x265 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x260 (=> $x265 $x257)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var656X))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv2 32))) ?x236)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd input.ind-%var656X (_ bv3 32))) ?x241)))
 (let (($x205 (= input.ind-%var656X.2.0 ?x255)))
 (let (($x244 (=> $x265 $x205)))
 (let ((?x182 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x223 (= (_ bv0 32) ?x182)))
 (let ((?x261 (ite $x223 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x261 (_ bv1 32))))
 (let (($x243 (= $x265 $x174)))
 (let (($x229 (= false false)))
 (let (($x222 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x235 (=> $x222 $x229)))
 (let (($x272 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x182) (= $x222 (= ?x261 (_ bv0 32)))) $x235)))
 (let (($x275 (and (and (and $x272 $x243) $x244) $x260)))
 (let (($x200 (not true)))
 (let (($x63 (or $x200 $x275)))
 (let (($x219 (= true true)))
 (let (($x134 (and $x219 $x63)))
 (let (($x276 (= $x134 true)))
 (let (($x213 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x230 (= $x198 $x213)))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x207 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x210 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x7 (and $x210 $x207)))
 (let (($x175 (and $x7 $x172)))
 (let (($x179 (and $x175 $x183)))
 (let (($x252 (=> $x179 $x230)))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x267 (and $x179 $x177)))
 (let (($x12 (=> $x267 $x229)))
 (let (($x209 (= (_ bv0 32) (_ bv0 32))))
 (let (($x234 (= $x177 $x209)))
 (let (($x161 (=> $x179 $x234)))
 (let (($x216 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x19 (=> $x179 $x216)))
 (let (($x189 (= $x183 $x213)))
 (let (($x32 (=> $x175 $x189)))
 (let (($x171 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x185 (and $x175 $x171)))
 (let (($x76 (=> $x185 $x229)))
 (let (($x186 (= $x171 $x209)))
 (let (($x199 (=> $x175 $x186)))
 (let (($x220 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x39 (=> $x175 $x220)))
 (let (($x204 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x160 (and $x7 $x204)))
 (let (($x192 (=> $x160 $x229)))
 (let (($x165 (= $x172 $x213)))
 (let (($x50 (=> $x7 $x165)))
 (let (($x191 (= $x204 $x209)))
 (let (($x162 (=> $x7 $x191)))
 (let (($x227 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x42 (=> $x7 $x227)))
 (let (($x211 (= $x207 $x213)))
 (let (($x159 (=> $x210 $x211)))
 (let (($x266 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x59 (and $x210 $x266)))
 (let (($x203 (=> $x59 $x229)))
 (let (($x168 (= $x266 $x209)))
 (let (($x26 (=> $x210 $x168)))
 (let (($x71 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x173 (=> $x210 $x71)))
 (let (($x190 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x178 (=> $x190 $x229)))
 (let (($x169 (and (and (and (and (and (= $x190 $x209) (= $x210 $x213)) $x178) $x173) $x26) $x203)))
 (let (($x47 (and (and (and (and (and (and $x169 $x159) $x42) $x162) $x50) $x192) $x39)))
 (let (($x221 (and (and (and (and (and (and $x47 $x199) $x76) $x32) $x19) $x161) $x12)))
 (let (($x212 (and $x221 $x252)))
 (let (($x231 (= $x212 true)))
 (let ((?x158 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x158)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x107 $x157)))
 (let (($x196 (and $x152 $x48)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x109 $x196)))
 (let (($x87 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x87)))))
 (let (($x156 (and $x108 $x180)))
 (let (($x202 (= $x156 true)))
 (let (($x41 (= $x202 true)))
 (let (($x155 (= $x41 true)))
 (let ((?x8 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x8)))
 (let (($x104 (= ?x101 input.dst.llvm-%val)))
 (let (($x45 (= $x104 true)))
 (let (($x97 (= $x45 true)))
 (let ((?x23 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x31 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x23) (_ bv1 8)))))
 (let (($x13 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x88 (=> $x13 (or false (or false $x154)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (or $x18 $x88)))
 (let ((?x66 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x66 (_ bv4294967292 32)) ?x66)))
 (let (($x30 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x66 (bvsub ?x66 (_ bv4 32))) (bvult ?x66 (bvsub ?x66 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x125 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x114 (and true $x125)))
 (let (($x35 (and $x125 $x114)))
 (let (($x43 (and (and (and $x114 $x35) $x22) $x30)))
 (let (($x127 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x132 (and (and (and $x127 $x43) $x130) $x5)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x23)))
 (let (($x112 (or false $x33)))
 (let (($x136 (or $x18 $x112)))
 (let (($x105 (and $x136 $x132)))
 (let (($x120 (= $x105 true)))
 (let (($x102 (= $x120 true)))
 (let (($x111 (= $x102 true)))
 (let (($x106 (and $x111 $x97)))
 (let (($x206 (and $x106 $x155)))
 (let (($x224 (and $x206 $x231)))
 (let (($x38 (=> $x224 $x276)))
 (let (($x131 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x70 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x70) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x131 (not $x38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffe)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x007ffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var656X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var656X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var656X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x80000000) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000003 x!0)
                    (ite (bvule #x80000004 x!0)
                         (ite (bvule #x80000005 x!0) #x80000005 #x80000004)
                         #x80000003)
                    #x80000002)))
    (let ((a!2 (ite (bvule #x80000000 x!0)
                    (ite (bvule #x80000001 x!0)
                         (ite (bvule #x80000002 x!0) a!1 #x80000001)
                         #x80000000)
                    #x7fffffff)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x7ffffffe x!0)
                         (ite (bvule #x7fffffff x!0) a!2 #x7ffffffe)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.ind-%var656X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x39bf8760)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf6cc8a5c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var656X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var656X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf6cc8a5f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf6cc8a5c)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf6cc8a5d x!0)
                    (ite (bvule #xf6cc8a5f x!0)
                         (ite (bvule #xf6cc8a60 x!0) #xf6cc8a60 #xf6cc8a5f)
                         #xf6cc8a5d)
                    #xf6cc8a5c)))
    (let ((a!2 (ite (bvule #x39bf8766 x!0)
                    (ite (bvule #x39bf8767 x!0)
                         (ite (bvule #xf6cc8a5c x!0) a!1 #x39bf8767)
                         #x39bf8766)
                    #x39bf8765)))
    (let ((a!3 (ite (bvule #x39bf8763 x!0)
                    (ite (bvule #x39bf8764 x!0)
                         (ite (bvule #x39bf8765 x!0) a!2 #x39bf8764)
                         #x39bf8763)
                    #x39bf8762)))
      (ite (bvule #x39bf8760 x!0)
           (ite (bvule #x39bf8761 x!0)
                (ite (bvule #x39bf8762 x!0) a!3 #x39bf8761)
                #x39bf8760)
           #x00000000)))))
  (define-fun k!15!17 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x39bf8762) #x01
    (ite (= x!0 #xf6cc8a5c) #x03
    (ite (= x!0 #x39bf8765) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x39bf8761) #x01
    (ite (= x!0 #x39bf8764) #x01
    (ite (= x!0 #xf6cc8a5d) #x03
    (ite (= x!0 #xf6cc8a5f) #x03
    (ite (= x!0 #x39bf8766) #x01
    (ite (= x!0 #x39bf8760) #x01
    (ite (= x!0 #x39bf8767) #x01
    (ite (= x!0 #x39bf8763) #x01
      #x02)))))))))))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!15!17 (k!16 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x68 (= false true)))
 (let (($x71 (= $x68 true)))
 (let (($x122 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x232 (= $x213 $x122)))
 (let (($x201 (= (_ bv0 32) (_ bv0 32))))
 (let (($x209 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x210 (= $x209 $x201)))
 (let (($x229 (and $x210 $x232)))
 (let (($x178 (= $x229 true)))
 (let ((?x48 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x48)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x157)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x100 $x152)))
 (let (($x180 (and $x158 $x196)))
 (let (($x64 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x64 $x180)))
 (let (($x93 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x93)))))
 (let (($x202 (and $x107 $x156)))
 (let (($x41 (= $x202 true)))
 (let (($x155 (= $x41 true)))
 (let (($x206 (= $x155 true)))
 (let ((?x101 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x101)))
 (let (($x45 (= ?x113 input.dst.llvm-%val)))
 (let (($x97 (= $x45 true)))
 (let (($x106 (= $x97 true)))
 (let ((?x29 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x129 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x29) (_ bv1 8)))))
 (let (($x88 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x5 (=> $x88 (or false (or false $x154)))))
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x95 (or $x135 $x5)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x9 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x114 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x35 (and true $x114)))
 (let (($x67 (and $x114 $x35)))
 (let (($x58 (and (and (and $x35 $x67) $x22) $x9)))
 (let (($x119 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x105 (and (and (and $x119 $x58) $x130) $x95)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x29)))
 (let (($x136 (or false $x53)))
 (let (($x52 (or $x135 $x136)))
 (let (($x120 (and $x52 $x105)))
 (let (($x102 (= $x120 true)))
 (let (($x111 (= $x102 true)))
 (let (($x123 (= $x111 true)))
 (let (($x96 (and $x123 $x106)))
 (let (($x193 (and $x96 $x206)))
 (let (($x214 (and $x193 $x178)))
 (let (($x173 (=> $x214 $x71)))
 (let (($x112 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x18 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x18) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x112 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x68 (= false true)))
 (let (($x71 (= $x68 true)))
 (let (($x122 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x232 (= $x213 $x122)))
 (let (($x201 (= (_ bv0 32) (_ bv0 32))))
 (let (($x209 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x210 (= $x209 $x201)))
 (let (($x229 (and $x210 $x232)))
 (let (($x178 (= $x229 true)))
 (let ((?x48 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x48)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x157)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x100 $x152)))
 (let (($x180 (and $x158 $x196)))
 (let (($x64 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x64 $x180)))
 (let (($x93 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x93)))))
 (let (($x202 (and $x107 $x156)))
 (let (($x41 (= $x202 true)))
 (let (($x155 (= $x41 true)))
 (let (($x206 (= $x155 true)))
 (let ((?x101 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x101)))
 (let (($x45 (= ?x113 input.dst.llvm-%val)))
 (let (($x97 (= $x45 true)))
 (let (($x106 (= $x97 true)))
 (let ((?x29 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x129 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x29) (_ bv1 8)))))
 (let (($x88 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x5 (=> $x88 (or false (or false $x154)))))
 (let (($x135 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x95 (or $x135 $x5)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x9 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x114 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x35 (and true $x114)))
 (let (($x67 (and $x114 $x35)))
 (let (($x58 (and (and (and $x35 $x67) $x22) $x9)))
 (let (($x119 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x105 (and (and (and $x119 $x58) $x130) $x95)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x29)))
 (let (($x136 (or false $x53)))
 (let (($x52 (or $x135 $x136)))
 (let (($x120 (and $x52 $x105)))
 (let (($x102 (= $x120 true)))
 (let (($x111 (= $x102 true)))
 (let (($x123 (= $x111 true)))
 (let (($x96 (and $x123 $x106)))
 (let (($x193 (and $x96 $x206)))
 (let (($x214 (and $x193 $x178)))
 (let (($x173 (=> $x214 $x71)))
 (let (($x112 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x18 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x18) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x112 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x75 (= false true)))
 (let (($x266 (= $x75 true)))
 (let (($x122 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x214 (not $x122)))
 (let (($x201 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x178 (not $x201)))
 (let (($x173 (and (and (and (= $x201 (= (_ bv0 32) (_ bv0 32))) (= $x122 (bvuge (_ bv0 32) (_ bv1 32)))) $x178) $x214)))
 (let (($x195 (= $x173 true)))
 (let ((?x196 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x196)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x157 $x158)))
 (let (($x156 (and $x48 $x180)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x109 $x156)))
 (let (($x116 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x116)))))
 (let (($x41 (and $x100 $x202)))
 (let (($x155 (= $x41 true)))
 (let (($x206 (= $x155 true)))
 (let (($x193 (= $x206 true)))
 (let ((?x113 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x113)))
 (let (($x97 (= ?x104 input.dst.llvm-%val)))
 (let (($x106 (= $x97 true)))
 (let (($x96 (= $x106 true)))
 (let ((?x37 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x141 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x37) (_ bv1 8)))))
 (let (($x5 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x95 (=> $x5 (or false (or false $x154)))))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x103 (or $x23 $x95)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x65 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x67 (and true $x35)))
 (let (($x30 (and $x35 $x67)))
 (let (($x140 (and (and (and $x67 $x30) $x22) $x65)))
 (let (($x117 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x120 (and (and (and $x117 $x140) $x130) $x103)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x37)))
 (let (($x52 (or false $x33)))
 (let (($x77 (or $x23 $x52)))
 (let (($x102 (and $x77 $x120)))
 (let (($x111 (= $x102 true)))
 (let (($x123 (= $x111 true)))
 (let (($x8 (= $x123 true)))
 (let (($x74 (and $x8 $x96)))
 (let (($x190 (and $x74 $x193)))
 (let (($x197 (and $x190 $x195)))
 (let (($x168 (=> $x197 $x266)))
 (let (($x136 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x135 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x135) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x136 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x75 (= false true)))
 (let (($x266 (= $x75 true)))
 (let (($x122 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x214 (not $x122)))
 (let (($x201 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x178 (not $x201)))
 (let (($x173 (and (and (and (= $x201 (= (_ bv0 32) (_ bv0 32))) (= $x122 (bvuge (_ bv0 32) (_ bv1 32)))) $x178) $x214)))
 (let (($x195 (= $x173 true)))
 (let ((?x196 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x196)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x157 $x158)))
 (let (($x156 (and $x48 $x180)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x109 $x156)))
 (let (($x116 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x116)))))
 (let (($x41 (and $x100 $x202)))
 (let (($x155 (= $x41 true)))
 (let (($x206 (= $x155 true)))
 (let (($x193 (= $x206 true)))
 (let ((?x113 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x113)))
 (let (($x97 (= ?x104 input.dst.llvm-%val)))
 (let (($x106 (= $x97 true)))
 (let (($x96 (= $x106 true)))
 (let ((?x37 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x141 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x37) (_ bv1 8)))))
 (let (($x5 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x95 (=> $x5 (or false (or false $x154)))))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x103 (or $x23 $x95)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x65 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x67 (and true $x35)))
 (let (($x30 (and $x35 $x67)))
 (let (($x140 (and (and (and $x67 $x30) $x22) $x65)))
 (let (($x117 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x120 (and (and (and $x117 $x140) $x130) $x103)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x37)))
 (let (($x52 (or false $x33)))
 (let (($x77 (or $x23 $x52)))
 (let (($x102 (and $x77 $x120)))
 (let (($x111 (= $x102 true)))
 (let (($x123 (= $x111 true)))
 (let (($x8 (= $x123 true)))
 (let (($x74 (and $x8 $x96)))
 (let (($x190 (and $x74 $x193)))
 (let (($x197 (and $x190 $x195)))
 (let (($x168 (=> $x197 $x266)))
 (let (($x136 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x135 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x135) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x136 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x75 (= false true)))
 (let (($x266 (= $x75 true)))
 (let (($x178 (= false false)))
 (let (($x210 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x71 (=> $x210 $x178)))
 (let (($x229 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x68 (= $x232 $x229)))
 (let (($x213 (= (_ bv0 32) (_ bv0 32))))
 (let (($x122 (= $x210 $x213)))
 (let (($x173 (and (and $x122 $x68) $x71)))
 (let (($x195 (= $x173 true)))
 (let ((?x180 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x180)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x158)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x152 $x48)))
 (let (($x202 (and $x196 $x156)))
 (let (($x64 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x64 $x202)))
 (let (($x27 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x27)))))
 (let (($x155 (and $x157 $x41)))
 (let (($x206 (= $x155 true)))
 (let (($x193 (= $x206 true)))
 (let (($x190 (= $x193 true)))
 (let ((?x104 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x104)))
 (let (($x106 (= ?x45 input.dst.llvm-%val)))
 (let (($x96 (= $x106 true)))
 (let (($x74 (= $x96 true)))
 (let ((?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x132 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x70) (_ bv1 8)))))
 (let (($x95 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x103 (=> $x95 (or false (or false $x154)))))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x145 (or $x29 $x103)))
 (let ((?x43 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x43 (_ bv4294967292 32)) ?x43)))
 (let (($x16 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x43 (bvsub ?x43 (_ bv4 32))) (bvult ?x43 (bvsub ?x43 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x30 (and true $x67)))
 (let (($x9 (and $x67 $x30)))
 (let (($x13 (and (and (and $x30 $x9) $x22) $x16)))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x102 (and (and (and $x21 $x13) $x130) $x145)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x70)))
 (let (($x77 (or false $x53)))
 (let (($x127 (or $x29 $x77)))
 (let (($x111 (and $x127 $x102)))
 (let (($x123 (= $x111 true)))
 (let (($x8 (= $x123 true)))
 (let (($x101 (= $x8 true)))
 (let (($x118 (and $x101 $x74)))
 (let (($x209 (and $x118 $x190)))
 (let (($x197 (and $x209 $x195)))
 (let (($x168 (=> $x197 $x266)))
 (let (($x52 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x23 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x23) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x52 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x75 (= false true)))
 (let (($x266 (= $x75 true)))
 (let (($x178 (= false false)))
 (let (($x210 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x71 (=> $x210 $x178)))
 (let (($x229 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x68 (= $x232 $x229)))
 (let (($x213 (= (_ bv0 32) (_ bv0 32))))
 (let (($x122 (= $x210 $x213)))
 (let (($x173 (and (and $x122 $x68) $x71)))
 (let (($x195 (= $x173 true)))
 (let ((?x180 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x180)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x158)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x152 $x48)))
 (let (($x202 (and $x196 $x156)))
 (let (($x64 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x64 $x202)))
 (let (($x27 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x27)))))
 (let (($x155 (and $x157 $x41)))
 (let (($x206 (= $x155 true)))
 (let (($x193 (= $x206 true)))
 (let (($x190 (= $x193 true)))
 (let ((?x104 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x104)))
 (let (($x106 (= ?x45 input.dst.llvm-%val)))
 (let (($x96 (= $x106 true)))
 (let (($x74 (= $x96 true)))
 (let ((?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x132 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x70) (_ bv1 8)))))
 (let (($x95 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x103 (=> $x95 (or false (or false $x154)))))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x145 (or $x29 $x103)))
 (let ((?x43 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x43 (_ bv4294967292 32)) ?x43)))
 (let (($x16 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x43 (bvsub ?x43 (_ bv4 32))) (bvult ?x43 (bvsub ?x43 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x30 (and true $x67)))
 (let (($x9 (and $x67 $x30)))
 (let (($x13 (and (and (and $x30 $x9) $x22) $x16)))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x102 (and (and (and $x21 $x13) $x130) $x145)))
 (let (($x53 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x70)))
 (let (($x77 (or false $x53)))
 (let (($x127 (or $x29 $x77)))
 (let (($x111 (and $x127 $x102)))
 (let (($x123 (= $x111 true)))
 (let (($x8 (= $x123 true)))
 (let (($x101 (= $x8 true)))
 (let (($x118 (and $x101 $x74)))
 (let (($x209 (and $x118 $x190)))
 (let (($x197 (and $x209 $x195)))
 (let (($x168 (=> $x197 $x266)))
 (let (($x52 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x23 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x23) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x52 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x26 (= false true)))
 (let (($x228 (= $x26 true)))
 (let (($x71 (= false false)))
 (let (($x213 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x173 (=> $x213 $x71)))
 (let (($x229 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (not $x229)))
 (let (($x75 (and (and (and (= $x213 (= (_ bv0 32) (_ bv0 32))) (= $x229 (bvuge (_ bv0 32) (_ bv1 32)))) $x178) $x173)))
 (let (($x266 (= $x75 true)))
 (let ((?x156 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x156)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x158 $x196)))
 (let (($x41 (and $x180 $x202)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x109 $x41)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x206 (and $x152 $x155)))
 (let (($x193 (= $x206 true)))
 (let (($x190 (= $x193 true)))
 (let (($x209 (= $x190 true)))
 (let ((?x45 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x45)))
 (let (($x96 (= ?x97 input.dst.llvm-%val)))
 (let (($x74 (= $x96 true)))
 (let (($x118 (= $x74 true)))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x105 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x18) (_ bv1 8)))))
 (let (($x103 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x145 (=> $x103 (or false (or false $x154)))))
 (let (($x37 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x31 (or $x37 $x145)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x58 (_ bv4294967292 32)) ?x58)))
 (let (($x144 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x58 (bvsub ?x58 (_ bv4 32))) (bvult ?x58 (bvsub ?x58 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x30 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x9 (and true $x30)))
 (let (($x65 (and $x30 $x9)))
 (let (($x88 (and (and (and $x9 $x65) $x22) $x144)))
 (let (($x125 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x111 (and (and (and $x125 $x88) $x130) $x31)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x18)))
 (let (($x127 (or false $x33)))
 (let (($x119 (or $x37 $x127)))
 (let (($x123 (and $x119 $x111)))
 (let (($x8 (= $x123 true)))
 (let (($x101 (= $x8 true)))
 (let (($x113 (= $x101 true)))
 (let (($x110 (and $x113 $x118)))
 (let (($x201 (and $x110 $x209)))
 (let (($x168 (and $x201 $x266)))
 (let (($x28 (=> $x168 $x228)))
 (let (($x77 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x29 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x29) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x77 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x26 (= false true)))
 (let (($x228 (= $x26 true)))
 (let (($x71 (= false false)))
 (let (($x213 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x173 (=> $x213 $x71)))
 (let (($x229 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (not $x229)))
 (let (($x75 (and (and (and (= $x213 (= (_ bv0 32) (_ bv0 32))) (= $x229 (bvuge (_ bv0 32) (_ bv1 32)))) $x178) $x173)))
 (let (($x266 (= $x75 true)))
 (let ((?x156 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x156)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x158 $x196)))
 (let (($x41 (and $x180 $x202)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x109 $x41)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x206 (and $x152 $x155)))
 (let (($x193 (= $x206 true)))
 (let (($x190 (= $x193 true)))
 (let (($x209 (= $x190 true)))
 (let ((?x45 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x45)))
 (let (($x96 (= ?x97 input.dst.llvm-%val)))
 (let (($x74 (= $x96 true)))
 (let (($x118 (= $x74 true)))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x147 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x142 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x91 (and (and (and (and true (= ?x105 (_ bv1 8))) (= ?x57 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x154 (and (and (and (and $x91 (= ?x94 (_ bv1 8))) (= ?x142 (_ bv1 8))) (= ?x147 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x18) (_ bv1 8)))))
 (let (($x103 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x145 (=> $x103 (or false (or false $x154)))))
 (let (($x37 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x31 (or $x37 $x145)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x130 (= (bvand ?x58 (_ bv4294967292 32)) ?x58)))
 (let (($x144 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x58 (bvsub ?x58 (_ bv4 32))) (bvult ?x58 (bvsub ?x58 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x89 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x30 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x89) (bvult input.dst.llvm-%call.Lentry%2%d ?x89))))
 (let (($x9 (and true $x30)))
 (let (($x65 (and $x30 $x9)))
 (let (($x88 (and (and (and $x9 $x65) $x22) $x144)))
 (let (($x125 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x111 (and (and (and $x125 $x88) $x130) $x31)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x18)))
 (let (($x127 (or false $x33)))
 (let (($x119 (or $x37 $x127)))
 (let (($x123 (and $x119 $x111)))
 (let (($x8 (= $x123 true)))
 (let (($x101 (= $x8 true)))
 (let (($x113 (= $x101 true)))
 (let (($x110 (and $x113 $x118)))
 (let (($x201 (and $x110 $x209)))
 (let (($x168 (and $x201 $x266)))
 (let (($x28 (=> $x168 $x228)))
 (let (($x77 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x29 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x29) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x77 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x195 (= true false)))
 (let (($x178 (= $x195 true)))
 (let (($x122 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x232 (= $x213 $x122)))
 (let (($x201 (= (_ bv0 32) (_ bv0 32))))
 (let (($x209 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x210 (= $x209 $x201)))
 (let (($x229 (and $x210 $x232)))
 (let (($x68 (= $x229 true)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x106 (ite $x29 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x67 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x36 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x125 (store (store ?x36 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x30 (store (store ?x125 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x67 (_ bv2 8))))
 (let ((?x22 (store (store ?x30 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x43 (store ?x22 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x58 (ite $x29 input.dst.llvm-mem.alloc ?x43)))
 (let (($x157 (and (and true (= (select ?x58 (bvadd ?x106 (_ bv0 32))) (_ bv2 8))) (= (select ?x58 (bvadd ?x106 (_ bv1 32))) (_ bv2 8)))))
 (let (($x180 (and (and $x157 (= (select ?x58 (bvadd ?x106 (_ bv2 32))) (_ bv2 8))) (= (select ?x58 (bvadd ?x106 (_ bv3 32))) (_ bv2 8)))))
 (let (($x155 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false $x180)))))
 (let (($x96 (= $x155 true)))
 (let (($x74 (= $x96 true)))
 (let (($x206 (= $x74 true)))
 (let ((?x31 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x31)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x154 $x153)))
 (let (($x123 (and $x145 $x111)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x15 $x123)))
 (let (($x147 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x147)))))
 (let (($x101 (and $x151 $x8)))
 (let (($x113 (= $x101 true)))
 (let (($x104 (= $x113 true)))
 (let (($x45 (= $x104 true)))
 (let ((?x85 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x91 (= ?x86 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x94 (= $x92 true)))
 (let (($x103 (and (and true (= (select ?x58 (bvadd (ite $x29 (_ bv4 32) ?x67) (_ bv0 32))) (_ bv2 8))) (= (select ?x58 (bvadd (ite $x29 (_ bv4 32) ?x67) (_ bv1 32))) (_ bv2 8)))))
 (let (($x60 (and (and $x103 (= (select ?x58 (bvadd (ite $x29 (_ bv4 32) ?x67) (_ bv2 32))) (_ bv2 8))) (= (select ?x58 (bvadd (ite $x29 (_ bv4 32) ?x67) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x124 (ite $x29 (_ bv4 32) ?x67)))
 (let (($x81 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false $x60)))))
 (let (($x56 (= $x81 true)))
 (let (($x66 (= $x56 true)))
 (let (($x82 (= $x66 true)))
 (let (($x137 (and $x82 $x94)))
 (let (($x97 (and $x137 $x45)))
 (let (($x193 (and $x97 $x206)))
 (let (($x214 (and $x193 $x68)))
 (let (($x197 (=> $x214 $x178)))
 (let (($x33 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x23 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x37 $x23) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x33 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x195 (= true false)))
 (let (($x178 (= $x195 true)))
 (let (($x122 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x232 (= $x213 $x122)))
 (let (($x201 (= (_ bv0 32) (_ bv0 32))))
 (let (($x209 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x210 (= $x209 $x201)))
 (let (($x229 (and $x210 $x232)))
 (let (($x68 (= $x229 true)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x106 (ite $x29 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x67 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x36 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x125 (store (store ?x36 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x30 (store (store ?x125 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x67 (_ bv2 8))))
 (let ((?x22 (store (store ?x30 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x43 (store ?x22 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x58 (ite $x29 input.dst.llvm-mem.alloc ?x43)))
 (let (($x157 (and (and true (= (select ?x58 (bvadd ?x106 (_ bv0 32))) (_ bv2 8))) (= (select ?x58 (bvadd ?x106 (_ bv1 32))) (_ bv2 8)))))
 (let (($x180 (and (and $x157 (= (select ?x58 (bvadd ?x106 (_ bv2 32))) (_ bv2 8))) (= (select ?x58 (bvadd ?x106 (_ bv3 32))) (_ bv2 8)))))
 (let (($x155 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false $x180)))))
 (let (($x96 (= $x155 true)))
 (let (($x74 (= $x96 true)))
 (let (($x206 (= $x74 true)))
 (let ((?x31 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x31)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x154 $x153)))
 (let (($x123 (and $x145 $x111)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x15 $x123)))
 (let (($x147 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x147)))))
 (let (($x101 (and $x151 $x8)))
 (let (($x113 (= $x101 true)))
 (let (($x104 (= $x113 true)))
 (let (($x45 (= $x104 true)))
 (let ((?x85 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x91 (= ?x86 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x94 (= $x92 true)))
 (let (($x103 (and (and true (= (select ?x58 (bvadd (ite $x29 (_ bv4 32) ?x67) (_ bv0 32))) (_ bv2 8))) (= (select ?x58 (bvadd (ite $x29 (_ bv4 32) ?x67) (_ bv1 32))) (_ bv2 8)))))
 (let (($x60 (and (and $x103 (= (select ?x58 (bvadd (ite $x29 (_ bv4 32) ?x67) (_ bv2 32))) (_ bv2 8))) (= (select ?x58 (bvadd (ite $x29 (_ bv4 32) ?x67) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x124 (ite $x29 (_ bv4 32) ?x67)))
 (let (($x81 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false $x60)))))
 (let (($x56 (= $x81 true)))
 (let (($x66 (= $x56 true)))
 (let (($x82 (= $x66 true)))
 (let (($x137 (and $x82 $x94)))
 (let (($x97 (and $x137 $x45)))
 (let (($x193 (and $x97 $x206)))
 (let (($x214 (and $x193 $x68)))
 (let (($x197 (=> $x214 $x178)))
 (let (($x33 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x23 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x37 $x23) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x33 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00001002)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!89))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00001003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!88 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001009) #x02
    (ite (= x!0 #x00001005) #x02
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001008) #x02
    (ite (= x!0 #x00001007) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))))))))
  (define-fun k!96 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001005) #x02
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001008) #x02
    (ite (= x!0 #x00001007) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
      #x00)))))))))))
  (define-fun k!93 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
    (ite (= x!0 #x00001005) #x02
      #x00))))))))
  (define-fun k!90 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))
  (define-fun k!95 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001005) #x02
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001007) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))))))
  (define-fun k!92 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
      #x00)))))))
  (define-fun k!89 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001003) #x03
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x03
    (ite (= x!0 #x00001000) #x03
      #x00))))))
  (define-fun k!94 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
    (ite (= x!0 #x00001005) #x02
      #x00)))))))))
  (define-fun k!91 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!45))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xfffffffa)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa31389c8)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa31389cb)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa31389c8)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
      #x00))))))))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00)))))))))
  (define-fun k!49 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00))))))))))
  (define-fun k!50 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00)))))))))))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #xffffffff) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00))))))))))))
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffffff) #x02
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #x00000001) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00)))))))))))))
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffffff) #x02
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00))))))))))))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xa31389c9) #x03
      #x00))))))
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffa) #x02
      #x00)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x173 (= true false)))
 (let (($x75 (= $x173 true)))
 (let (($x213 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x68 (not $x213)))
 (let (($x209 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (not $x209)))
 (let (($x178 (and (and (and (= $x209 (= (_ bv0 32) (_ bv0 32))) (= $x213 (bvuge (_ bv0 32) (_ bv1 32)))) $x229) $x68)))
 (let (($x197 (= $x178 true)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x106 (ite $x51 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x21 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x112 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x70 (store (store ?x112 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x125 (store (store ?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x21 (_ bv2 8))))
 (let ((?x65 (store (store ?x125 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x133 (store ?x65 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x22 (ite $x51 input.dst.llvm-mem.alloc ?x133)))
 (let (($x87 (and (and true (= (select ?x22 (bvadd ?x106 (_ bv0 32))) (_ bv2 8))) (= (select ?x22 (bvadd ?x106 (_ bv1 32))) (_ bv2 8)))))
 (let (($x156 (and (and $x87 (= (select ?x22 (bvadd ?x106 (_ bv2 32))) (_ bv2 8))) (= (select ?x22 (bvadd ?x106 (_ bv3 32))) (_ bv2 8)))))
 (let (($x74 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false $x156)))))
 (let (($x118 (= $x74 true)))
 (let (($x110 (= $x118 true)))
 (let (($x206 (= $x110 true)))
 (let ((?x31 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x31)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x154 $x153)))
 (let (($x123 (and $x145 $x111)))
 (let (($x150 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x150 $x123)))
 (let (($x148 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x148)))))
 (let (($x101 (and $x15 $x8)))
 (let (($x113 (= $x101 true)))
 (let (($x104 (= $x113 true)))
 (let (($x45 (= $x104 true)))
 (let ((?x85 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x91 (= ?x86 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x94 (= $x92 true)))
 (let (($x132 (and (and true (= (select ?x22 (bvadd (ite $x51 (_ bv4 32) ?x21) (_ bv0 32))) (_ bv2 8))) (= (select ?x22 (bvadd (ite $x51 (_ bv4 32) ?x21) (_ bv1 32))) (_ bv2 8)))))
 (let (($x78 (and (and $x132 (= (select ?x22 (bvadd (ite $x51 (_ bv4 32) ?x21) (_ bv2 32))) (_ bv2 8))) (= (select ?x22 (bvadd (ite $x51 (_ bv4 32) ?x21) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x13 (ite $x51 (_ bv4 32) ?x21)))
 (let (($x66 (=> (bvule ?x13 (bvsub (bvadd ?x13 (_ bv4 32)) (_ bv1 32))) (or false (or false $x78)))))
 (let (($x140 (= $x66 true)))
 (let (($x43 (= $x140 true)))
 (let (($x82 (= $x43 true)))
 (let (($x137 (and $x82 $x94)))
 (let (($x97 (and $x137 $x45)))
 (let (($x193 (and $x97 $x206)))
 (let (($x71 (and $x193 $x197)))
 (let (($x266 (=> $x71 $x75)))
 (let (($x144 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x29 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x35 $x29) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x144 (not $x266)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x173 (= true false)))
 (let (($x75 (= $x173 true)))
 (let (($x213 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x68 (not $x213)))
 (let (($x209 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (not $x209)))
 (let (($x178 (and (and (and (= $x209 (= (_ bv0 32) (_ bv0 32))) (= $x213 (bvuge (_ bv0 32) (_ bv1 32)))) $x229) $x68)))
 (let (($x197 (= $x178 true)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x106 (ite $x51 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x21 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x112 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x70 (store (store ?x112 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x125 (store (store ?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x21 (_ bv2 8))))
 (let ((?x65 (store (store ?x125 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x133 (store ?x65 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x22 (ite $x51 input.dst.llvm-mem.alloc ?x133)))
 (let (($x87 (and (and true (= (select ?x22 (bvadd ?x106 (_ bv0 32))) (_ bv2 8))) (= (select ?x22 (bvadd ?x106 (_ bv1 32))) (_ bv2 8)))))
 (let (($x156 (and (and $x87 (= (select ?x22 (bvadd ?x106 (_ bv2 32))) (_ bv2 8))) (= (select ?x22 (bvadd ?x106 (_ bv3 32))) (_ bv2 8)))))
 (let (($x74 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false $x156)))))
 (let (($x118 (= $x74 true)))
 (let (($x110 (= $x118 true)))
 (let (($x206 (= $x110 true)))
 (let ((?x31 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x31)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x154 $x153)))
 (let (($x123 (and $x145 $x111)))
 (let (($x150 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x150 $x123)))
 (let (($x148 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x148)))))
 (let (($x101 (and $x15 $x8)))
 (let (($x113 (= $x101 true)))
 (let (($x104 (= $x113 true)))
 (let (($x45 (= $x104 true)))
 (let ((?x85 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x91 (= ?x86 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x94 (= $x92 true)))
 (let (($x132 (and (and true (= (select ?x22 (bvadd (ite $x51 (_ bv4 32) ?x21) (_ bv0 32))) (_ bv2 8))) (= (select ?x22 (bvadd (ite $x51 (_ bv4 32) ?x21) (_ bv1 32))) (_ bv2 8)))))
 (let (($x78 (and (and $x132 (= (select ?x22 (bvadd (ite $x51 (_ bv4 32) ?x21) (_ bv2 32))) (_ bv2 8))) (= (select ?x22 (bvadd (ite $x51 (_ bv4 32) ?x21) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x13 (ite $x51 (_ bv4 32) ?x21)))
 (let (($x66 (=> (bvule ?x13 (bvsub (bvadd ?x13 (_ bv4 32)) (_ bv1 32))) (or false (or false $x78)))))
 (let (($x140 (= $x66 true)))
 (let (($x43 (= $x140 true)))
 (let (($x82 (= $x43 true)))
 (let (($x137 (and $x82 $x94)))
 (let (($x97 (and $x137 $x45)))
 (let (($x193 (and $x97 $x206)))
 (let (($x71 (and $x193 $x197)))
 (let (($x266 (=> $x71 $x75)))
 (let (($x144 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x29 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x35 $x29) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x144 (not $x266)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x71 (= true false)))
 (let (($x173 (= $x71 true)))
 (let (($x214 (= false false)))
 (let (($x209 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x209 $x214)))
 (let (($x122 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x232 (= $x213 $x122)))
 (let (($x201 (= (_ bv0 32) (_ bv0 32))))
 (let (($x210 (= $x209 $x201)))
 (let (($x68 (and (and $x210 $x232) $x229)))
 (let (($x178 (= $x68 true)))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x106 (ite $x67 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x131 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x136 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x77 (store (store ?x136 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x70 (store (store ?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x131 (_ bv2 8))))
 (let ((?x17 (store (store ?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x9 (store ?x17 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x65 (ite $x67 input.dst.llvm-mem.alloc ?x9)))
 (let (($x152 (and (and true (= (select ?x65 (bvadd ?x106 (_ bv0 32))) (_ bv2 8))) (= (select ?x65 (bvadd ?x106 (_ bv1 32))) (_ bv2 8)))))
 (let (($x202 (and (and $x152 (= (select ?x65 (bvadd ?x106 (_ bv2 32))) (_ bv2 8))) (= (select ?x65 (bvadd ?x106 (_ bv3 32))) (_ bv2 8)))))
 (let (($x110 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false $x202)))))
 (let (($x41 (= $x110 true)))
 (let (($x108 (= $x41 true)))
 (let (($x206 (= $x108 true)))
 (let ((?x31 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x31)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x154 $x153)))
 (let (($x123 (and $x145 $x111)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x139 $x123)))
 (let (($x149 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x149)))))
 (let (($x101 (and $x150 $x8)))
 (let (($x113 (= $x101 true)))
 (let (($x104 (= $x113 true)))
 (let (($x45 (= $x104 true)))
 (let ((?x85 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x91 (= ?x86 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x94 (= $x92 true)))
 (let (($x105 (and (and true (= (select ?x65 (bvadd (ite $x67 (_ bv4 32) ?x131) (_ bv0 32))) (_ bv2 8))) (= (select ?x65 (bvadd (ite $x67 (_ bv4 32) ?x131) (_ bv1 32))) (_ bv2 8)))))
 (let (($x34 (and (and $x105 (= (select ?x65 (bvadd (ite $x67 (_ bv4 32) ?x131) (_ bv2 32))) (_ bv2 8))) (= (select ?x65 (bvadd (ite $x67 (_ bv4 32) ?x131) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x16 (ite $x67 (_ bv4 32) ?x131)))
 (let (($x43 (=> (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32))) (or false (or false $x34)))))
 (let (($x99 (= $x43 true)))
 (let (($x133 (= $x99 true)))
 (let (($x82 (= $x133 true)))
 (let (($x137 (and $x82 $x94)))
 (let (($x97 (and $x137 $x45)))
 (let (($x193 (and $x97 $x206)))
 (let (($x197 (and $x193 $x178)))
 (let (($x75 (=> $x197 $x173)))
 (let (($x58 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x51 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x117 $x51) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x58 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x71 (= true false)))
 (let (($x173 (= $x71 true)))
 (let (($x214 (= false false)))
 (let (($x209 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x209 $x214)))
 (let (($x122 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x232 (= $x213 $x122)))
 (let (($x201 (= (_ bv0 32) (_ bv0 32))))
 (let (($x210 (= $x209 $x201)))
 (let (($x68 (and (and $x210 $x232) $x229)))
 (let (($x178 (= $x68 true)))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x106 (ite $x67 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x131 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x136 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x77 (store (store ?x136 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x70 (store (store ?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x131 (_ bv2 8))))
 (let ((?x17 (store (store ?x70 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x9 (store ?x17 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x65 (ite $x67 input.dst.llvm-mem.alloc ?x9)))
 (let (($x152 (and (and true (= (select ?x65 (bvadd ?x106 (_ bv0 32))) (_ bv2 8))) (= (select ?x65 (bvadd ?x106 (_ bv1 32))) (_ bv2 8)))))
 (let (($x202 (and (and $x152 (= (select ?x65 (bvadd ?x106 (_ bv2 32))) (_ bv2 8))) (= (select ?x65 (bvadd ?x106 (_ bv3 32))) (_ bv2 8)))))
 (let (($x110 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false $x202)))))
 (let (($x41 (= $x110 true)))
 (let (($x108 (= $x41 true)))
 (let (($x206 (= $x108 true)))
 (let ((?x31 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x31)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x154 $x153)))
 (let (($x123 (and $x145 $x111)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x139 $x123)))
 (let (($x149 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x149)))))
 (let (($x101 (and $x150 $x8)))
 (let (($x113 (= $x101 true)))
 (let (($x104 (= $x113 true)))
 (let (($x45 (= $x104 true)))
 (let ((?x85 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x91 (= ?x86 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x94 (= $x92 true)))
 (let (($x105 (and (and true (= (select ?x65 (bvadd (ite $x67 (_ bv4 32) ?x131) (_ bv0 32))) (_ bv2 8))) (= (select ?x65 (bvadd (ite $x67 (_ bv4 32) ?x131) (_ bv1 32))) (_ bv2 8)))))
 (let (($x34 (and (and $x105 (= (select ?x65 (bvadd (ite $x67 (_ bv4 32) ?x131) (_ bv2 32))) (_ bv2 8))) (= (select ?x65 (bvadd (ite $x67 (_ bv4 32) ?x131) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x16 (ite $x67 (_ bv4 32) ?x131)))
 (let (($x43 (=> (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32))) (or false (or false $x34)))))
 (let (($x99 (= $x43 true)))
 (let (($x133 (= $x99 true)))
 (let (($x82 (= $x133 true)))
 (let (($x137 (and $x82 $x94)))
 (let (($x97 (and $x137 $x45)))
 (let (($x193 (and $x97 $x206)))
 (let (($x197 (and $x193 $x178)))
 (let (($x75 (=> $x197 $x173)))
 (let (($x58 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x51 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x117 $x51) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x58 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00001002)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!89))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00001003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!88 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001009) #x02
    (ite (= x!0 #x00001005) #x02
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001008) #x02
    (ite (= x!0 #x00001007) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))))))))
  (define-fun k!96 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001005) #x02
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001008) #x02
    (ite (= x!0 #x00001007) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
      #x00)))))))))))
  (define-fun k!93 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
    (ite (= x!0 #x00001005) #x02
      #x00))))))))
  (define-fun k!90 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))
  (define-fun k!95 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001005) #x02
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001007) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))))))
  (define-fun k!92 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
      #x00)))))))
  (define-fun k!89 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001003) #x03
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x03
    (ite (= x!0 #x00001000) #x03
      #x00))))))
  (define-fun k!94 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
    (ite (= x!0 #x00001005) #x02
      #x00)))))))))
  (define-fun k!91 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!45))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xfffffffa)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa31389c8)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa31389cb)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa31389c8)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
      #x00))))))))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00)))))))))
  (define-fun k!49 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00))))))))))
  (define-fun k!50 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00)))))))))))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #xffffffff) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00))))))))))))
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffffff) #x02
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #x00000001) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00)))))))))))))
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffffff) #x02
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00))))))))))))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xa31389c9) #x03
      #x00))))))
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffa) #x02
      #x00)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x75 (= true false)))
 (let (($x266 (= $x75 true)))
 (let (($x214 (= false false)))
 (let (($x209 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x209 $x214)))
 (let (($x213 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x195 (not $x213)))
 (let (($x197 (and (and (and (= $x209 (= (_ bv0 32) (_ bv0 32))) (= $x213 (bvuge (_ bv0 32) (_ bv1 32)))) $x195) $x229)))
 (let (($x71 (= $x197 true)))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x106 (ite $x21 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x126 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x23 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x52 (store (store ?x23 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x77 (store (store ?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x126 (_ bv2 8))))
 (let ((?x127 (store (store ?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x114 (store ?x127 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x17 (ite $x21 input.dst.llvm-mem.alloc ?x114)))
 (let (($x93 (and (and true (= (select ?x17 (bvadd ?x106 (_ bv0 32))) (_ bv2 8))) (= (select ?x17 (bvadd ?x106 (_ bv1 32))) (_ bv2 8)))))
 (let (($x155 (and (and $x93 (= (select ?x17 (bvadd ?x106 (_ bv2 32))) (_ bv2 8))) (= (select ?x17 (bvadd ?x106 (_ bv3 32))) (_ bv2 8)))))
 (let (($x108 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false $x155)))))
 (let (($x96 (= $x108 true)))
 (let (($x116 (= $x96 true)))
 (let (($x206 (= $x116 true)))
 (let ((?x31 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x31)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x154 $x153)))
 (let (($x123 (and $x145 $x111)))
 (let (($x143 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x143 $x123)))
 (let (($x151 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x151)))))
 (let (($x101 (and $x139 $x8)))
 (let (($x113 (= $x101 true)))
 (let (($x104 (= $x113 true)))
 (let (($x45 (= $x104 true)))
 (let ((?x85 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x91 (= ?x86 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x94 (= $x92 true)))
 (let (($x120 (and (and true (= (select ?x17 (bvadd (ite $x21 (_ bv4 32) ?x126) (_ bv0 32))) (_ bv2 8))) (= (select ?x17 (bvadd (ite $x21 (_ bv4 32) ?x126) (_ bv1 32))) (_ bv2 8)))))
 (let (($x81 (and (and $x120 (= (select ?x17 (bvadd (ite $x21 (_ bv4 32) ?x126) (_ bv2 32))) (_ bv2 8))) (= (select ?x17 (bvadd (ite $x21 (_ bv4 32) ?x126) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x89 (ite $x21 (_ bv4 32) ?x126)))
 (let (($x133 (=> (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32))) (or false (or false $x81)))))
 (let (($x30 (= $x133 true)))
 (let (($x9 (= $x30 true)))
 (let (($x82 (= $x9 true)))
 (let (($x137 (and $x82 $x94)))
 (let (($x97 (and $x137 $x45)))
 (let (($x193 (and $x97 $x206)))
 (let (($x173 (and $x193 $x71)))
 (let (($x168 (=> $x173 $x266)))
 (let (($x22 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x67 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x80 $x67) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x22 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x75 (= true false)))
 (let (($x266 (= $x75 true)))
 (let (($x214 (= false false)))
 (let (($x209 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x229 (=> $x209 $x214)))
 (let (($x213 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x195 (not $x213)))
 (let (($x197 (and (and (and (= $x209 (= (_ bv0 32) (_ bv0 32))) (= $x213 (bvuge (_ bv0 32) (_ bv1 32)))) $x195) $x229)))
 (let (($x71 (= $x197 true)))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x106 (ite $x21 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x126 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x23 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x52 (store (store ?x23 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x77 (store (store ?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x126 (_ bv2 8))))
 (let ((?x127 (store (store ?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x114 (store ?x127 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x17 (ite $x21 input.dst.llvm-mem.alloc ?x114)))
 (let (($x93 (and (and true (= (select ?x17 (bvadd ?x106 (_ bv0 32))) (_ bv2 8))) (= (select ?x17 (bvadd ?x106 (_ bv1 32))) (_ bv2 8)))))
 (let (($x155 (and (and $x93 (= (select ?x17 (bvadd ?x106 (_ bv2 32))) (_ bv2 8))) (= (select ?x17 (bvadd ?x106 (_ bv3 32))) (_ bv2 8)))))
 (let (($x108 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false $x155)))))
 (let (($x96 (= $x108 true)))
 (let (($x116 (= $x96 true)))
 (let (($x206 (= $x116 true)))
 (let ((?x31 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x31)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x154 $x153)))
 (let (($x123 (and $x145 $x111)))
 (let (($x143 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x143 $x123)))
 (let (($x151 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x151)))))
 (let (($x101 (and $x139 $x8)))
 (let (($x113 (= $x101 true)))
 (let (($x104 (= $x113 true)))
 (let (($x45 (= $x104 true)))
 (let ((?x85 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x85)))
 (let (($x91 (= ?x86 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x94 (= $x92 true)))
 (let (($x120 (and (and true (= (select ?x17 (bvadd (ite $x21 (_ bv4 32) ?x126) (_ bv0 32))) (_ bv2 8))) (= (select ?x17 (bvadd (ite $x21 (_ bv4 32) ?x126) (_ bv1 32))) (_ bv2 8)))))
 (let (($x81 (and (and $x120 (= (select ?x17 (bvadd (ite $x21 (_ bv4 32) ?x126) (_ bv2 32))) (_ bv2 8))) (= (select ?x17 (bvadd (ite $x21 (_ bv4 32) ?x126) (_ bv3 32))) (_ bv2 8)))))
 (let ((?x89 (ite $x21 (_ bv4 32) ?x126)))
 (let (($x133 (=> (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32))) (or false (or false $x81)))))
 (let (($x30 (= $x133 true)))
 (let (($x9 (= $x30 true)))
 (let (($x82 (= $x9 true)))
 (let (($x137 (and $x82 $x94)))
 (let (($x97 (and $x137 $x45)))
 (let (($x193 (and $x97 $x206)))
 (let (($x173 (and $x193 $x71)))
 (let (($x168 (=> $x173 $x266)))
 (let (($x22 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x67 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x80 $x67) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x22 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!45))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xfffffffa)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa31389c8)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa31389cb)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa31389c8)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
      #x00))))))))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00)))))))))
  (define-fun k!49 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00))))))))))
  (define-fun k!50 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00)))))))))))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #xffffffff) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00))))))))))))
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffffff) #x02
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #x00000001) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00)))))))))))))
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffffff) #x02
    (ite (= x!0 #xfffffffb) #x02
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xfffffffe) #x02
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffc) #x02
      #x00))))))))))))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xa31389c9) #x03
      #x00))))))
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa31389cb) #x03
    (ite (= x!0 #xa31389c9) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xa31389ca) #x03
    (ite (= x!0 #xa31389c8) #x03
    (ite (= x!0 #xfffffffa) #x02
      #x00)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00001002)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!89))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00001003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!88 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001009) #x02
    (ite (= x!0 #x00001005) #x02
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001008) #x02
    (ite (= x!0 #x00001007) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))))))))
  (define-fun k!96 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001005) #x02
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001008) #x02
    (ite (= x!0 #x00001007) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
      #x00)))))))))))
  (define-fun k!93 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
    (ite (= x!0 #x00001005) #x02
      #x00))))))))
  (define-fun k!90 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))
  (define-fun k!95 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001005) #x02
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001007) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))))))
  (define-fun k!92 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
      #x00)))))))
  (define-fun k!89 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001003) #x03
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x03
    (ite (= x!0 #x00001000) #x03
      #x00))))))
  (define-fun k!94 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001004) #x02
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001006) #x02
    (ite (= x!0 #x00001000) #x03
    (ite (= x!0 #x00001005) #x02
      #x00)))))))))
  (define-fun k!91 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001003) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001001) #x03
    (ite (= x!0 #x00001002) #x02
    (ite (= x!0 #x00001000) #x03
      #x00))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x302 (= false false)))
 (let (($x251 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x304 (=> $x251 $x302)))
 (let (($x270 (= (_ bv0 32) (_ bv0 32))))
 (let (($x301 (and $x251 $x270)))
 (let (($x303 (=> $x301 $x302)))
 (let (($x244 (= true true)))
 (let (($x300 (=> $x251 $x244)))
 (let (($x140 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x127 (ite $x140 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x53 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x119 (ite $x140 (_ bv4 32) ?x53)))
 (let ((?x148 (bvadd ?x119 (_ bv3 32))))
 (let ((?x142 (bvadd ?x119 (_ bv2 32))))
 (let ((?x91 (bvadd ?x119 (_ bv1 32))))
 (let ((?x84 (bvadd ?x119 (_ bv0 32))))
 (let ((?x60 (bvadd ?x127 (_ bv3 32))))
 (let ((?x62 (bvadd ?x127 (_ bv2 32))))
 (let ((?x103 (bvadd ?x127 (_ bv1 32))))
 (let ((?x102 (bvadd ?x127 (_ bv0 32))))
 (let ((?x253 (ite $x140 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_0)))
 (let ((?x63 (store (store ?x253 ?x102 ((_ extract 7 0) input.dst.llvm-%val)) ?x103 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x239 (store (store ?x63 ?x62 ((_ extract 23 16) input.dst.llvm-%val)) ?x60 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x288 (store (store (store ?x239 ?x84 ((_ extract 7 0) (_ bv0 32))) ?x91 ((_ extract 15 8) (_ bv0 32))) ?x142 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x290 (store ?x288 ?x148 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x295 (concat (select ?x290 ?x62) (concat (select ?x290 ?x103) (select ?x290 ?x127)))))
 (let ((?x297 (concat (select ?x290 ?x60) ?x295)))
 (let (($x298 (= input.spec-%var-val-0 ?x297)))
 (let (($x299 (=> $x251 $x298)))
 (let (($x256 (= (_ bv0 32) ?x127)))
 (let ((?x254 (ite $x256 (_ bv0 32) (_ bv1 32))))
 (let (($x242 (bvuge ?x254 (_ bv1 32))))
 (let (($x250 (= true $x242)))
 (let (($x258 (= ?x254 (_ bv0 32))))
 (let (($x259 (= false $x258)))
 (let (($x309 (and (and (and (and (and $x259 $x250) $x299) $x300) $x303) $x304)))
 (let (($x274 (not true)))
 (let (($x310 (or $x274 $x309)))
 (let (($x311 (and $x244 $x310)))
 (let (($x312 (= $x311 true)))
 (let (($x268 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x187 (= $x237 $x268)))
 (let (($x248 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x240 (= $x248 $x270)))
 (let (($x236 (and $x240 $x187)))
 (let (($x241 (= $x236 true)))
 (let ((?x265 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x265)))
 (let (($x273 (= ?x174 input.dst.llvm-%val)))
 (let (($x245 (= $x273 true)))
 (let (($x238 (= $x245 true)))
 (let ((?x88 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x136 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x33 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x21 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x124 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x80 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x39 (and (and true (= (select input.dst.llvm-mem.alloc ?x80) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x124) (_ bv1 8)))))
 (let (($x49 (and (and $x39 (= (select input.dst.llvm-mem.alloc ?x21) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x33) (_ bv1 8)))))
 (let (($x32 (and (and $x49 (= (select input.dst.llvm-mem.alloc ?x53) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x136) (_ bv1 8)))))
 (let (($x217 (and (and $x32 (= (select input.dst.llvm-mem.alloc ?x77) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x88) (_ bv1 8)))))
 (let ((?x160 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x161 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x160) (or false (or false $x217)))))
 (let (($x165 (or $x140 $x161)))
 (let (($x225 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x88)))
 (let (($x184 (or false $x225)))
 (let (($x204 (or $x140 $x184)))
 (let (($x200 (and $x204 $x165)))
 (let (($x226 (= $x200 true)))
 (let (($x262 (= $x226 true)))
 (let (($x263 (= $x262 true)))
 (let (($x159 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x45 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x59 (ite $x45 (bvuge ?x119 (bvsub ?x119 (_ bv4 32))) (bvult ?x119 (bvsub ?x119 (_ bv4 32))))))
 (let (($x168 (= (bvand ?x127 (_ bv4294967292 32)) ?x127)))
 (let (($x154 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x71 (ite $x154 (bvuge ?x127 (bvsub ?x127 (_ bv0 32))) (bvult ?x127 (bvsub ?x127 (_ bv0 32))))))
 (let (($x173 (and true $x71)))
 (let (($x75 (and $x71 $x173)))
 (let (($x207 (and (and (and $x173 $x75) $x168) $x59)))
 (let (($x230 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x233 (and (and (and $x230 $x207) $x159) $x200)))
 (let (($x194 (= $x233 true)))
 (let (($x222 (= $x194 true)))
 (let (($x223 (= $x222 true)))
 (let (($x252 (= $x230 true)))
 (let (($x212 (= $x252 true)))
 (let (($x231 (= $x212 true)))
 (let (($x50 (= $x165 true)))
 (let (($x264 (= $x50 true)))
 (let (($x267 (= $x264 true)))
 (let (($x191 (= $x204 true)))
 (let (($x162 (= $x191 true)))
 (let (($x176 (= $x162 true)))
 (let (($x163 (and $x207 $x159)))
 (let (($x7 (= $x163 true)))
 (let (($x14 (= $x7 true)))
 (let (($x227 (= $x14 true)))
 (let ((?x209 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x209)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x206)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x116 $x193)))
 (let (($x210 (and $x190 $x201)))
 (let (($x158 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x158 $x210)))
 (let (($x155 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x155)))))
 (let (($x122 (and $x96 $x213)))
 (let (($x232 (= $x122 true)))
 (let (($x68 (= $x232 true)))
 (let (($x195 (= $x68 true)))
 (let ((?x113 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x100 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x118 (ite $x45 (bvuge ?x113 (bvsub ?x113 (_ bv4 32))) (bvult ?x113 (bvsub ?x113 (_ bv4 32))))))
 (let (($x101 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x143 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x145 (ite $x154 (bvuge input.dst.llvm-%call.Lentry%2%d ?x143) (bvult input.dst.llvm-%call.Lentry%2%d ?x143))))
 (let (($x31 (and true $x145)))
 (let (($x111 (and $x145 $x31)))
 (let (($x107 (and (and (and $x31 $x111) $x101) $x118)))
 (let (($x115 (and $x107 $x100)))
 (let (($x157 (= $x115 true)))
 (let (($x87 (= $x157 true)))
 (let (($x152 (= $x87 true)))
 (let (($x178 (and $x152 $x195)))
 (let (($x42 (and $x178 $x227)))
 (let (($x172 (and $x42 $x176)))
 (let (($x12 (and $x172 $x267)))
 (let (($x224 (and $x12 $x231)))
 (let (($x219 (and $x224 $x231)))
 (let (($x261 (and $x219 $x223)))
 (let (($x235 (and $x261 $x263)))
 (let (($x6 (and $x235 $x238)))
 (let (($x255 (and $x6 $x241)))
 (let ((?x28 (store (store (store input.dst.llvm-mem.alloc ?x80 (_ bv2 8)) ?x124 (_ bv2 8)) ?x21 (_ bv2 8))))
 (let ((?x112 (store (store (store (store ?x28 ?x33 (_ bv2 8)) ?x53 (_ bv2 8)) ?x136 (_ bv2 8)) ?x77 (_ bv2 8))))
 (let ((?x70 (store ?x112 ?x88 (_ bv2 8))))
 (let ((?x36 (ite $x140 input.dst.llvm-mem.alloc ?x70)))
 (let (($x137 (and (and true (= (select ?x36 ?x84) (_ bv2 8))) (= (select ?x36 ?x91) (_ bv2 8)))))
 (let (($x151 (and (and $x137 (= (select ?x36 ?x142) (_ bv2 8))) (= (select ?x36 ?x148) (_ bv2 8)))))
 (let (($x146 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false $x151)))))
 (let (($x120 (and (and true (= (select ?x36 ?x102) (_ bv2 8))) (= (select ?x36 ?x103) (_ bv2 8)))))
 (let (($x81 (and (and $x120 (= (select ?x36 ?x62) (_ bv2 8))) (= (select ?x36 ?x60) (_ bv2 8)))))
 (let (($x30 (=> (bvule ?x127 (bvsub (bvadd ?x127 (_ bv4 32)) (_ bv1 32))) (or false (or false $x81)))))
 (let (($x125 (and $x30 $x146)))
 (let (($x205 (and $x125 $x255)))
 (let (($x313 (=> $x205 $x312)))
 (let (($x117 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x72 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x13 $x72) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x315 (and $x117 (not $x313))))
 (let (($x282 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x79 (select solver-mem_0 us-bounded-var!)))
 (let ((?x160 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x280 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x160))))
 (ite $x280 (= ?x79 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x79 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x282) $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x302 (= false false)))
 (let (($x251 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x304 (=> $x251 $x302)))
 (let (($x270 (= (_ bv0 32) (_ bv0 32))))
 (let (($x301 (and $x251 $x270)))
 (let (($x303 (=> $x301 $x302)))
 (let (($x244 (= true true)))
 (let (($x300 (=> $x251 $x244)))
 (let (($x140 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x127 (ite $x140 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x53 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x119 (ite $x140 (_ bv4 32) ?x53)))
 (let ((?x148 (bvadd ?x119 (_ bv3 32))))
 (let ((?x142 (bvadd ?x119 (_ bv2 32))))
 (let ((?x91 (bvadd ?x119 (_ bv1 32))))
 (let ((?x84 (bvadd ?x119 (_ bv0 32))))
 (let ((?x60 (bvadd ?x127 (_ bv3 32))))
 (let ((?x62 (bvadd ?x127 (_ bv2 32))))
 (let ((?x103 (bvadd ?x127 (_ bv1 32))))
 (let ((?x102 (bvadd ?x127 (_ bv0 32))))
 (let ((?x253 (ite $x140 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_0)))
 (let ((?x63 (store (store ?x253 ?x102 ((_ extract 7 0) input.dst.llvm-%val)) ?x103 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x239 (store (store ?x63 ?x62 ((_ extract 23 16) input.dst.llvm-%val)) ?x60 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x288 (store (store (store ?x239 ?x84 ((_ extract 7 0) (_ bv0 32))) ?x91 ((_ extract 15 8) (_ bv0 32))) ?x142 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x290 (store ?x288 ?x148 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x295 (concat (select ?x290 ?x62) (concat (select ?x290 ?x103) (select ?x290 ?x127)))))
 (let ((?x297 (concat (select ?x290 ?x60) ?x295)))
 (let (($x298 (= input.spec-%var-val-0 ?x297)))
 (let (($x299 (=> $x251 $x298)))
 (let (($x256 (= (_ bv0 32) ?x127)))
 (let ((?x254 (ite $x256 (_ bv0 32) (_ bv1 32))))
 (let (($x242 (bvuge ?x254 (_ bv1 32))))
 (let (($x250 (= true $x242)))
 (let (($x258 (= ?x254 (_ bv0 32))))
 (let (($x259 (= false $x258)))
 (let (($x309 (and (and (and (and (and $x259 $x250) $x299) $x300) $x303) $x304)))
 (let (($x274 (not true)))
 (let (($x310 (or $x274 $x309)))
 (let (($x311 (and $x244 $x310)))
 (let (($x312 (= $x311 true)))
 (let (($x268 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x187 (= $x237 $x268)))
 (let (($x248 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x240 (= $x248 $x270)))
 (let (($x236 (and $x240 $x187)))
 (let (($x241 (= $x236 true)))
 (let ((?x265 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x265)))
 (let (($x273 (= ?x174 input.dst.llvm-%val)))
 (let (($x245 (= $x273 true)))
 (let (($x238 (= $x245 true)))
 (let ((?x88 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x136 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x33 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x21 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x124 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x80 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x39 (and (and true (= (select input.dst.llvm-mem.alloc ?x80) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x124) (_ bv1 8)))))
 (let (($x49 (and (and $x39 (= (select input.dst.llvm-mem.alloc ?x21) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x33) (_ bv1 8)))))
 (let (($x32 (and (and $x49 (= (select input.dst.llvm-mem.alloc ?x53) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x136) (_ bv1 8)))))
 (let (($x217 (and (and $x32 (= (select input.dst.llvm-mem.alloc ?x77) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x88) (_ bv1 8)))))
 (let ((?x160 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x161 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x160) (or false (or false $x217)))))
 (let (($x165 (or $x140 $x161)))
 (let (($x225 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x88)))
 (let (($x184 (or false $x225)))
 (let (($x204 (or $x140 $x184)))
 (let (($x200 (and $x204 $x165)))
 (let (($x226 (= $x200 true)))
 (let (($x262 (= $x226 true)))
 (let (($x263 (= $x262 true)))
 (let (($x159 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x45 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x59 (ite $x45 (bvuge ?x119 (bvsub ?x119 (_ bv4 32))) (bvult ?x119 (bvsub ?x119 (_ bv4 32))))))
 (let (($x168 (= (bvand ?x127 (_ bv4294967292 32)) ?x127)))
 (let (($x154 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x71 (ite $x154 (bvuge ?x127 (bvsub ?x127 (_ bv0 32))) (bvult ?x127 (bvsub ?x127 (_ bv0 32))))))
 (let (($x173 (and true $x71)))
 (let (($x75 (and $x71 $x173)))
 (let (($x207 (and (and (and $x173 $x75) $x168) $x59)))
 (let (($x230 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x233 (and (and (and $x230 $x207) $x159) $x200)))
 (let (($x194 (= $x233 true)))
 (let (($x222 (= $x194 true)))
 (let (($x223 (= $x222 true)))
 (let (($x252 (= $x230 true)))
 (let (($x212 (= $x252 true)))
 (let (($x231 (= $x212 true)))
 (let (($x50 (= $x165 true)))
 (let (($x264 (= $x50 true)))
 (let (($x267 (= $x264 true)))
 (let (($x191 (= $x204 true)))
 (let (($x162 (= $x191 true)))
 (let (($x176 (= $x162 true)))
 (let (($x163 (and $x207 $x159)))
 (let (($x7 (= $x163 true)))
 (let (($x14 (= $x7 true)))
 (let (($x227 (= $x14 true)))
 (let ((?x209 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x209)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x206)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x116 $x193)))
 (let (($x210 (and $x190 $x201)))
 (let (($x158 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x158 $x210)))
 (let (($x155 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x155)))))
 (let (($x122 (and $x96 $x213)))
 (let (($x232 (= $x122 true)))
 (let (($x68 (= $x232 true)))
 (let (($x195 (= $x68 true)))
 (let ((?x113 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x100 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x118 (ite $x45 (bvuge ?x113 (bvsub ?x113 (_ bv4 32))) (bvult ?x113 (bvsub ?x113 (_ bv4 32))))))
 (let (($x101 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x143 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x145 (ite $x154 (bvuge input.dst.llvm-%call.Lentry%2%d ?x143) (bvult input.dst.llvm-%call.Lentry%2%d ?x143))))
 (let (($x31 (and true $x145)))
 (let (($x111 (and $x145 $x31)))
 (let (($x107 (and (and (and $x31 $x111) $x101) $x118)))
 (let (($x115 (and $x107 $x100)))
 (let (($x157 (= $x115 true)))
 (let (($x87 (= $x157 true)))
 (let (($x152 (= $x87 true)))
 (let (($x178 (and $x152 $x195)))
 (let (($x42 (and $x178 $x227)))
 (let (($x172 (and $x42 $x176)))
 (let (($x12 (and $x172 $x267)))
 (let (($x224 (and $x12 $x231)))
 (let (($x219 (and $x224 $x231)))
 (let (($x261 (and $x219 $x223)))
 (let (($x235 (and $x261 $x263)))
 (let (($x6 (and $x235 $x238)))
 (let (($x255 (and $x6 $x241)))
 (let ((?x28 (store (store (store input.dst.llvm-mem.alloc ?x80 (_ bv2 8)) ?x124 (_ bv2 8)) ?x21 (_ bv2 8))))
 (let ((?x112 (store (store (store (store ?x28 ?x33 (_ bv2 8)) ?x53 (_ bv2 8)) ?x136 (_ bv2 8)) ?x77 (_ bv2 8))))
 (let ((?x70 (store ?x112 ?x88 (_ bv2 8))))
 (let ((?x36 (ite $x140 input.dst.llvm-mem.alloc ?x70)))
 (let (($x137 (and (and true (= (select ?x36 ?x84) (_ bv2 8))) (= (select ?x36 ?x91) (_ bv2 8)))))
 (let (($x151 (and (and $x137 (= (select ?x36 ?x142) (_ bv2 8))) (= (select ?x36 ?x148) (_ bv2 8)))))
 (let (($x146 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false $x151)))))
 (let (($x120 (and (and true (= (select ?x36 ?x102) (_ bv2 8))) (= (select ?x36 ?x103) (_ bv2 8)))))
 (let (($x81 (and (and $x120 (= (select ?x36 ?x62) (_ bv2 8))) (= (select ?x36 ?x60) (_ bv2 8)))))
 (let (($x30 (=> (bvule ?x127 (bvsub (bvadd ?x127 (_ bv4 32)) (_ bv1 32))) (or false (or false $x81)))))
 (let (($x125 (and $x30 $x146)))
 (let (($x205 (and $x125 $x255)))
 (let (($x313 (=> $x205 $x312)))
 (let (($x117 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x72 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x13 $x72) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x315 (and $x117 (not $x313))))
 (let (($x282 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x79 (select solver-mem_0 us-bounded-var!)))
 (let ((?x160 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x280 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x160))))
 (ite $x280 (= ?x79 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x79 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x282) $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x157 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x157)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x107 $x100)))
 (let (($x152 (and $x115 $x87)))
 (let (($x118 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x118 $x152)))
 (let (($x101 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x101)))))
 (let (($x55 (and $x104 $x48)))
 (let (($x59 (= $x55 true)))
 (let (($x207 (= $x59 true)))
 (let (($x266 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x203 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x168 (= $x203 $x266)))
 (let (($x173 (= (_ bv0 32) (_ bv0 32))))
 (let (($x71 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x75 (= $x71 $x173)))
 (let (($x169 (and $x75 $x168)))
 (let (($x26 (= $x169 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x96 (concat ?x155 (concat ?x156 ?x108)))))
 (let (($x195 (= ?x109 input.dst.llvm-%val)))
 (let (($x178 (= $x195 true)))
 (let (($x214 (= $x178 true)))
 (let (($x158 (= input.dst.llvm-%val ?x109)))
 (let (($x193 (and (and (and $x104 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x48) $x158)))
 (let (($x125 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x190 (and $x125 $x193)))
 (let ((?x249 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x139 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x43 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x81 (and (and (and (and true (= ?x36 (_ bv1 8))) (= ?x141 (_ bv1 8))) (= ?x62 (_ bv1 8))) (= ?x78 (_ bv1 8)))))
 (let (($x147 (and (and (and (and $x81 (= ?x43 (_ bv1 8))) (= ?x139 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x249) (_ bv1 8)))))
 (let (($x148 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x138 (=> $x148 (or false (or false $x147)))))
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (or $x160 $x138)))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x33 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x56 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x144 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x144) (bvult input.dst.llvm-%call.Lentry%2%d ?x144))))
 (let (($x67 (and true $x117)))
 (let (($x140 (and $x117 $x67)))
 (let (($x28 (and (and (and $x67 $x140) $x114) $x56)))
 (let (($x58 (and $x28 $x33)))
 (let (($x201 (and (and $x58 $x5) $x190)))
 (let (($x79 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x249)))
 (let (($x316 (or false $x79)))
 (let (($x51 (or $x160 $x316)))
 (let (($x210 (and $x51 $x201)))
 (let (($x213 (= $x210 true)))
 (let (($x122 (= $x213 true)))
 (let (($x232 (= $x122 true)))
 (let (($x154 (= $x125 true)))
 (let (($x9 (= $x154 true)))
 (let (($x143 (= $x9 true)))
 (let (($x77 (= $x5 true)))
 (let (($x149 (= $x77 true)))
 (let (($x151 (= $x149 true)))
 (let (($x53 (= $x58 true)))
 (let (($x37 (= $x53 true)))
 (let (($x52 (= $x37 true)))
 (let (($x13 (= $x51 true)))
 (let (($x35 (= $x13 true)))
 (let (($x72 (= $x35 true)))
 (let (($x136 (and $x72 $x52)))
 (let (($x15 (and $x136 $x151)))
 (let (($x44 (and $x15 $x143)))
 (let (($x68 (and $x44 $x232)))
 (let (($x229 (and $x68 $x214)))
 (let (($x228 (and $x229 $x26)))
 (let (($x211 (=> $x228 $x207)))
 (let (($x282 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x246 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x46 $x246) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x282 (not $x211)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x157 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x157)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x107 $x100)))
 (let (($x152 (and $x115 $x87)))
 (let (($x118 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x118 $x152)))
 (let (($x101 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x101)))))
 (let (($x55 (and $x104 $x48)))
 (let (($x59 (= $x55 true)))
 (let (($x207 (= $x59 true)))
 (let (($x266 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x203 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x168 (= $x203 $x266)))
 (let (($x173 (= (_ bv0 32) (_ bv0 32))))
 (let (($x71 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x75 (= $x71 $x173)))
 (let (($x169 (and $x75 $x168)))
 (let (($x26 (= $x169 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x96 (concat ?x155 (concat ?x156 ?x108)))))
 (let (($x195 (= ?x109 input.dst.llvm-%val)))
 (let (($x178 (= $x195 true)))
 (let (($x214 (= $x178 true)))
 (let (($x158 (= input.dst.llvm-%val ?x109)))
 (let (($x193 (and (and (and $x104 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x48) $x158)))
 (let (($x125 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x190 (and $x125 $x193)))
 (let ((?x249 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x139 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x43 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x62 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x81 (and (and (and (and true (= ?x36 (_ bv1 8))) (= ?x141 (_ bv1 8))) (= ?x62 (_ bv1 8))) (= ?x78 (_ bv1 8)))))
 (let (($x147 (and (and (and (and $x81 (= ?x43 (_ bv1 8))) (= ?x139 (_ bv1 8))) (= ?x91 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x249) (_ bv1 8)))))
 (let (($x148 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x138 (=> $x148 (or false (or false $x147)))))
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (or $x160 $x138)))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x33 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x56 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x144 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x144) (bvult input.dst.llvm-%call.Lentry%2%d ?x144))))
 (let (($x67 (and true $x117)))
 (let (($x140 (and $x117 $x67)))
 (let (($x28 (and (and (and $x67 $x140) $x114) $x56)))
 (let (($x58 (and $x28 $x33)))
 (let (($x201 (and (and $x58 $x5) $x190)))
 (let (($x79 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x249)))
 (let (($x316 (or false $x79)))
 (let (($x51 (or $x160 $x316)))
 (let (($x210 (and $x51 $x201)))
 (let (($x213 (= $x210 true)))
 (let (($x122 (= $x213 true)))
 (let (($x232 (= $x122 true)))
 (let (($x154 (= $x125 true)))
 (let (($x9 (= $x154 true)))
 (let (($x143 (= $x9 true)))
 (let (($x77 (= $x5 true)))
 (let (($x149 (= $x77 true)))
 (let (($x151 (= $x149 true)))
 (let (($x53 (= $x58 true)))
 (let (($x37 (= $x53 true)))
 (let (($x52 (= $x37 true)))
 (let (($x13 (= $x51 true)))
 (let (($x35 (= $x13 true)))
 (let (($x72 (= $x35 true)))
 (let (($x136 (and $x72 $x52)))
 (let (($x15 (and $x136 $x151)))
 (let (($x44 (and $x15 $x143)))
 (let (($x68 (and $x44 $x232)))
 (let (($x229 (and $x68 $x214)))
 (let (($x228 (and $x229 $x26)))
 (let (($x211 (=> $x228 $x207)))
 (let (($x282 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x246 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x46 $x246) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x282 (not $x211)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x59 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x207 (bvneg ?x59)))
 (let (($x211 (= ?x207 input.dst.llvm-%val)))
 (let (($x159 (= $x211 true)))
 (let (($x168 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x266 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x169 (= $x266 $x168)))
 (let (($x75 (= (_ bv0 32) (_ bv0 32))))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x203 (= $x173 $x75)))
 (let (($x26 (and $x203 $x169)))
 (let (($x228 (= $x26 true)))
 (let ((?x206 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x108 (concat ?x155 (concat ?x110 ?x206)))))
 (let (($x178 (= ?x93 input.dst.llvm-%val)))
 (let (($x214 (= $x178 true)))
 (let (($x229 (= $x214 true)))
 (let (($x74 (= input.dst.llvm-%val ?x93)))
 (let ((?x115 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x115)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x118 $x27)))
 (let (($x87 (and $x100 $x157)))
 (let (($x106 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x106 $x87)))
 (let (($x97 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x41 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x41)))))
 (let (($x193 (and (and (and $x145 $x97) $x152) $x74)))
 (let (($x154 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x190 (and $x154 $x193)))
 (let ((?x277 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x40 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x43 (and (and (and (and true (= ?x129 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= ?x40 (_ bv1 8))) (= ?x81 (_ bv1 8)))))
 (let (($x11 (and (and (and (and $x43 (= ?x119 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x277) (_ bv1 8)))))
 (let (($x77 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x149 (=> $x77 (or false (or false $x11)))))
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x88 (or $x128 $x149)))
 (let ((?x17 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x58 (= (bvand ?x17 (_ bv4294967292 32)) ?x17)))
 (let (($x124 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x17 (bvsub ?x17 (_ bv4 32))) (bvult ?x17 (bvsub ?x17 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x144 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x144) (bvult input.dst.llvm-%call.Lentry%2%d ?x144))))
 (let (($x140 (and true $x67)))
 (let (($x98 (and $x67 $x140)))
 (let (($x99 (and (and (and $x140 $x98) $x114) $x124)))
 (let (($x53 (and $x99 $x58)))
 (let (($x210 (and (and $x53 $x88) $x190)))
 (let (($x281 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x277)))
 (let (($x51 (or false $x281)))
 (let (($x13 (or $x128 $x51)))
 (let (($x213 (and $x13 $x210)))
 (let (($x122 (= $x213 true)))
 (let (($x232 (= $x122 true)))
 (let (($x68 (= $x232 true)))
 (let (($x9 (= $x154 true)))
 (let (($x143 (= $x9 true)))
 (let (($x44 (= $x143 true)))
 (let (($x148 (= $x88 true)))
 (let (($x151 (= $x148 true)))
 (let (($x15 (= $x151 true)))
 (let (($x37 (= $x53 true)))
 (let (($x52 (= $x37 true)))
 (let (($x136 (= $x52 true)))
 (let (($x35 (= $x13 true)))
 (let (($x72 (= $x35 true)))
 (let (($x16 (= $x72 true)))
 (let (($x112 (and $x16 $x136)))
 (let (($x150 (and $x112 $x15)))
 (let (($x209 (and $x150 $x44)))
 (let (($x195 (and $x209 $x68)))
 (let (($x197 (and $x195 $x229)))
 (let (($x55 (and $x197 $x228)))
 (let (($x163 (=> $x55 $x159)))
 (let (($x316 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x160 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x280 $x160) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x316 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x59 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x207 (bvneg ?x59)))
 (let (($x211 (= ?x207 input.dst.llvm-%val)))
 (let (($x159 (= $x211 true)))
 (let (($x168 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x266 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x169 (= $x266 $x168)))
 (let (($x75 (= (_ bv0 32) (_ bv0 32))))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x203 (= $x173 $x75)))
 (let (($x26 (and $x203 $x169)))
 (let (($x228 (= $x26 true)))
 (let ((?x206 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x108 (concat ?x155 (concat ?x110 ?x206)))))
 (let (($x178 (= ?x93 input.dst.llvm-%val)))
 (let (($x214 (= $x178 true)))
 (let (($x229 (= $x214 true)))
 (let (($x74 (= input.dst.llvm-%val ?x93)))
 (let ((?x115 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x115)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x118 $x27)))
 (let (($x87 (and $x100 $x157)))
 (let (($x106 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x106 $x87)))
 (let (($x97 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x41 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x41)))))
 (let (($x193 (and (and (and $x145 $x97) $x152) $x74)))
 (let (($x154 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x190 (and $x154 $x193)))
 (let ((?x277 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x40 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x43 (and (and (and (and true (= ?x129 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= ?x40 (_ bv1 8))) (= ?x81 (_ bv1 8)))))
 (let (($x11 (and (and (and (and $x43 (= ?x119 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x277) (_ bv1 8)))))
 (let (($x77 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x149 (=> $x77 (or false (or false $x11)))))
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x88 (or $x128 $x149)))
 (let ((?x17 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x58 (= (bvand ?x17 (_ bv4294967292 32)) ?x17)))
 (let (($x124 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x17 (bvsub ?x17 (_ bv4 32))) (bvult ?x17 (bvsub ?x17 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x144 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x144) (bvult input.dst.llvm-%call.Lentry%2%d ?x144))))
 (let (($x140 (and true $x67)))
 (let (($x98 (and $x67 $x140)))
 (let (($x99 (and (and (and $x140 $x98) $x114) $x124)))
 (let (($x53 (and $x99 $x58)))
 (let (($x210 (and (and $x53 $x88) $x190)))
 (let (($x281 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x277)))
 (let (($x51 (or false $x281)))
 (let (($x13 (or $x128 $x51)))
 (let (($x213 (and $x13 $x210)))
 (let (($x122 (= $x213 true)))
 (let (($x232 (= $x122 true)))
 (let (($x68 (= $x232 true)))
 (let (($x9 (= $x154 true)))
 (let (($x143 (= $x9 true)))
 (let (($x44 (= $x143 true)))
 (let (($x148 (= $x88 true)))
 (let (($x151 (= $x148 true)))
 (let (($x15 (= $x151 true)))
 (let (($x37 (= $x53 true)))
 (let (($x52 (= $x37 true)))
 (let (($x136 (= $x52 true)))
 (let (($x35 (= $x13 true)))
 (let (($x72 (= $x35 true)))
 (let (($x16 (= $x72 true)))
 (let (($x112 (and $x16 $x136)))
 (let (($x150 (and $x112 $x15)))
 (let (($x209 (and $x150 $x44)))
 (let (($x195 (and $x209 $x68)))
 (let (($x197 (and $x195 $x229)))
 (let (($x55 (and $x197 $x228)))
 (let (($x163 (=> $x55 $x159)))
 (let (($x316 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x160 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x280 $x160) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x316 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2172931/query
