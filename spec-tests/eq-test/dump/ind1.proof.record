==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x10 (and $x11 $x12)))
 (let (($x17 (and $x10 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x10 (and $x11 $x12)))
 (let (($x17 (and $x10 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x106 (not $x105)))
 (let (($x169 (or $x105 $x106)))
 (let (($x170 (= $x169 false)))
 (let (($x171 (= $x170 true)))
 (let (($x161 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x162 (= $x160 $x161)))
 (let (($x158 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x156 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x159 (= $x156 $x158)))
 (let (($x163 (and $x159 $x162)))
 (let (($x164 (= $x163 true)))
 (let ((?x146 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x146 (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x151 (= $x149 $x150)))
 (let (($x147 (= ?x146 (_ bv0 32))))
 (let (($x145 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x148 (= $x145 $x147)))
 (let (($x152 (and $x148 $x151)))
 (let (($x153 (= $x152 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x138 (concat ?x135 (concat ?x132 ?x130)))))
 (let (($x140 (= ?x139 input.dst.llvm-%l)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x119 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x115 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x123 (or false (or false (and (and true (or $x114 $x115)) (or $x118 $x119))))))
 (let (($x125 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x123)))
 (let (($x109 (=> (and $x106 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x123)))
 (let (($x110 (= $x109 true)))
 (let (($x126 (= $x110 true)))
 (let (($x127 (= $x126 true)))
 (let (($x99 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x33 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x33)))
 (let ((?x6 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x6)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x64 (and $x41 $x67)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x9 $x64)))
 (let (($x39 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x56 $x54)))
 (let (($x83 (not $x60)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x82 $x42)))
 (let (($x84 (and (not $x77) $x83)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x66 $x40)))
 (let (($x38 (not $x74)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x72 $x24)))
 (let (($x73 (and (not $x48) $x38)))
 (let (($x91 (and (and (and (and (and (and $x73 $x84) $x89) $x39) $x80) $x28) $x47)))
 (let (($x92 (and $x91 $x87)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x44 (or false (or false (and (and true (or $x75 $x52)) (or $x81 $x63))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x93 (and $x32 $x92)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x30 (concat ?x62 (concat ?x19 ?x35)))))
 (let (($x86 (= ?x20 input.dst.llvm-%val)))
 (let (($x18 (= $x86 true)))
 (let (($x10 (= $x18 true)))
 (let (($x97 (and $x10 $x96)))
 (let (($x103 (and $x97 $x102)))
 (let (($x128 (and $x103 $x127)))
 (let (($x143 (and $x128 $x142)))
 (let (($x154 (and $x143 $x153)))
 (let (($x165 (and $x154 $x164)))
 (let (($x14 (= false false)))
 (let (($x166 (and $x14 $x165)))
 (let (($x25 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x167 (and $x25 $x166)))
 (let (($x16 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x168 (and $x16 $x167)))
 (let (($x172 (=> $x168 $x171)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x106 (not $x105)))
 (let (($x169 (or $x105 $x106)))
 (let (($x170 (= $x169 false)))
 (let (($x171 (= $x170 true)))
 (let (($x161 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x162 (= $x160 $x161)))
 (let (($x158 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x156 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x159 (= $x156 $x158)))
 (let (($x163 (and $x159 $x162)))
 (let (($x164 (= $x163 true)))
 (let ((?x146 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x146 (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x151 (= $x149 $x150)))
 (let (($x147 (= ?x146 (_ bv0 32))))
 (let (($x145 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x148 (= $x145 $x147)))
 (let (($x152 (and $x148 $x151)))
 (let (($x153 (= $x152 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x138 (concat ?x135 (concat ?x132 ?x130)))))
 (let (($x140 (= ?x139 input.dst.llvm-%l)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x119 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x115 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x123 (or false (or false (and (and true (or $x114 $x115)) (or $x118 $x119))))))
 (let (($x125 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x123)))
 (let (($x109 (=> (and $x106 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x123)))
 (let (($x110 (= $x109 true)))
 (let (($x126 (= $x110 true)))
 (let (($x127 (= $x126 true)))
 (let (($x99 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x33 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x33)))
 (let ((?x6 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x6)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x64 (and $x41 $x67)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x9 $x64)))
 (let (($x39 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x56 $x54)))
 (let (($x83 (not $x60)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x82 $x42)))
 (let (($x84 (and (not $x77) $x83)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x66 $x40)))
 (let (($x38 (not $x74)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x72 $x24)))
 (let (($x73 (and (not $x48) $x38)))
 (let (($x91 (and (and (and (and (and (and $x73 $x84) $x89) $x39) $x80) $x28) $x47)))
 (let (($x92 (and $x91 $x87)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x44 (or false (or false (and (and true (or $x75 $x52)) (or $x81 $x63))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x93 (and $x32 $x92)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x30 (concat ?x62 (concat ?x19 ?x35)))))
 (let (($x86 (= ?x20 input.dst.llvm-%val)))
 (let (($x18 (= $x86 true)))
 (let (($x10 (= $x18 true)))
 (let (($x97 (and $x10 $x96)))
 (let (($x103 (and $x97 $x102)))
 (let (($x128 (and $x103 $x127)))
 (let (($x143 (and $x128 $x142)))
 (let (($x154 (and $x143 $x153)))
 (let (($x165 (and $x154 $x164)))
 (let (($x14 (= false false)))
 (let (($x166 (and $x14 $x165)))
 (let (($x25 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x167 (and $x25 $x166)))
 (let (($x16 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x168 (and $x16 $x167)))
 (let (($x172 (=> $x168 $x171)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b01010000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b01010000000000000000000000000000)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b01010000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L2%9%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5a54e64c)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0a29b64c)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xbb)
                     #x0a29b64d
                     #x80)
              #x0a29b64c
              #xfc)
       #x0a29b64e
       #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xbbff80fc)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xbbbbbbbb)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xbbbbbbbb)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0a29b64f)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5a54e64f)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0a29b64c)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5a54e64c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd5726f68)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf776efec)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x04)
                     #xd5726f6b
                     #x00)
              #xd5726f69
              #x00)
       #xd5726f68
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00040000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd5726f6b)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf776efef)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd5726f68)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf776efec)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x111 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x112 (not $x111)))
 (let (($x180 (or $x111 $x112)))
 (let (($x181 (= $x180 false)))
 (let (($x182 (= $x181 true)))
 (let (($x172 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x29 (not $x172)))
 (let (($x168 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x79 (not $x168)))
 (let (($x173 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x5 (= $x172 $x173)))
 (let (($x170 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x171 (= $x168 $x170)))
 (let (($x174 (and (and (and $x171 $x5) $x79) $x29)))
 (let (($x175 (= $x174 true)))
 (let (($x164 (not true)))
 (let (($x165 (= $x164 true)))
 (let (($x154 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x158 (not $x154)))
 (let (($x150 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x157 (not $x150)))
 (let ((?x151 (ite $x111 (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge ?x151 (_ bv1 32))))
 (let (($x156 (= $x154 $x155)))
 (let (($x152 (= ?x151 (_ bv0 32))))
 (let (($x153 (= $x150 $x152)))
 (let (($x161 (and (and (and $x153 $x156) $x157) $x158)))
 (let (($x162 (= $x161 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x143 (concat ?x140 (concat ?x133 ?x132)))))
 (let (($x145 (= ?x144 input.dst.llvm-%l)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x125 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x120 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x127 (or false (or false (and (and true (or $x119 $x120)) (or $x123 $x125))))))
 (let (($x137 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x114 (=> (and $x112 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x115 (= $x114 true)))
 (let (($x138 (= $x115 true)))
 (let (($x134 (= $x138 true)))
 (let (($x102 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x6 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x6)))
 (let ((?x28 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x28)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x64 (and $x41 $x67)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x9 $x64)))
 (let (($x58 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x60 $x83)))
 (let (($x88 (not $x84)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x78 $x56)))
 (let (($x90 (and (not $x54) $x88)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x74 $x38)))
 (let (($x82 (not $x73)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x49 $x22)))
 (let (($x77 (and (not $x40) $x82)))
 (let (($x94 (and (and (and (and (and (and $x77 $x90) $x53) $x58) $x80) $x45) $x59)))
 (let (($x95 (and $x94 $x47)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x48 (or false (or false (and (and true (or $x55 $x81)) (or $x71 $x44))))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x48)))
 (let (($x96 (and $x66 $x95)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x20 (concat ?x19 (concat ?x43 ?x65)))))
 (let (($x18 (= ?x15 input.dst.llvm-%val)))
 (let (($x10 (= $x18 true)))
 (let (($x26 (= $x10 true)))
 (let (($x100 (and $x26 $x99)))
 (let (($x106 (and $x100 $x105)))
 (let (($x135 (and $x106 $x134)))
 (let (($x148 (and $x135 $x147)))
 (let (($x163 (and $x148 $x162)))
 (let (($x166 (and $x163 $x165)))
 (let (($x176 (and $x166 $x175)))
 (let (($x25 (= false false)))
 (let (($x177 (and $x25 $x176)))
 (let (($x62 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x178 (and $x62 $x177)))
 (let (($x34 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x179 (and $x34 $x178)))
 (let (($x183 (=> $x179 $x182)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x111 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x112 (not $x111)))
 (let (($x180 (or $x111 $x112)))
 (let (($x181 (= $x180 false)))
 (let (($x182 (= $x181 true)))
 (let (($x172 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x29 (not $x172)))
 (let (($x168 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x79 (not $x168)))
 (let (($x173 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x5 (= $x172 $x173)))
 (let (($x170 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x171 (= $x168 $x170)))
 (let (($x174 (and (and (and $x171 $x5) $x79) $x29)))
 (let (($x175 (= $x174 true)))
 (let (($x164 (not true)))
 (let (($x165 (= $x164 true)))
 (let (($x154 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x158 (not $x154)))
 (let (($x150 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x157 (not $x150)))
 (let ((?x151 (ite $x111 (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge ?x151 (_ bv1 32))))
 (let (($x156 (= $x154 $x155)))
 (let (($x152 (= ?x151 (_ bv0 32))))
 (let (($x153 (= $x150 $x152)))
 (let (($x161 (and (and (and $x153 $x156) $x157) $x158)))
 (let (($x162 (= $x161 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x143 (concat ?x140 (concat ?x133 ?x132)))))
 (let (($x145 (= ?x144 input.dst.llvm-%l)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x125 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x120 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x127 (or false (or false (and (and true (or $x119 $x120)) (or $x123 $x125))))))
 (let (($x137 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x114 (=> (and $x112 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x115 (= $x114 true)))
 (let (($x138 (= $x115 true)))
 (let (($x134 (= $x138 true)))
 (let (($x102 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x6 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x6)))
 (let ((?x28 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x28)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x64 (and $x41 $x67)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x9 $x64)))
 (let (($x58 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x60 $x83)))
 (let (($x88 (not $x84)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x78 $x56)))
 (let (($x90 (and (not $x54) $x88)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x74 $x38)))
 (let (($x82 (not $x73)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x49 $x22)))
 (let (($x77 (and (not $x40) $x82)))
 (let (($x94 (and (and (and (and (and (and $x77 $x90) $x53) $x58) $x80) $x45) $x59)))
 (let (($x95 (and $x94 $x47)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x48 (or false (or false (and (and true (or $x55 $x81)) (or $x71 $x44))))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x48)))
 (let (($x96 (and $x66 $x95)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x20 (concat ?x19 (concat ?x43 ?x65)))))
 (let (($x18 (= ?x15 input.dst.llvm-%val)))
 (let (($x10 (= $x18 true)))
 (let (($x26 (= $x10 true)))
 (let (($x100 (and $x26 $x99)))
 (let (($x106 (and $x100 $x105)))
 (let (($x135 (and $x106 $x134)))
 (let (($x148 (and $x135 $x147)))
 (let (($x163 (and $x148 $x162)))
 (let (($x166 (and $x163 $x165)))
 (let (($x176 (and $x166 $x175)))
 (let (($x25 (= false false)))
 (let (($x177 (and $x25 $x176)))
 (let (($x62 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x178 (and $x62 $x177)))
 (let (($x34 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x179 (and $x34 $x178)))
 (let (($x183 (=> $x179 $x182)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x116 (not $x124)))
 (let (($x113 (or $x124 $x116)))
 (let (($x185 (= $x113 false)))
 (let (($x186 (= $x185 true)))
 (let (($x14 (= false false)))
 (let (($x169 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x180 (=> $x169 $x14)))
 (let (($x178 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x173 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x179 (= $x173 $x178)))
 (let (($x176 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x177 (= $x169 $x176)))
 (let (($x182 (and (and $x177 $x179) $x180)))
 (let (($x183 (= $x182 true)))
 (let (($x5 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x129 (= $x173 $x5)))
 (let (($x171 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x172 (= $x169 $x171)))
 (let (($x167 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x108 (and (and $x167 $x172) $x129)))
 (let (($x29 (= $x108 true)))
 (let (($x154 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x161 (=> $x154 $x14)))
 (let ((?x155 (ite $x124 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x155 (_ bv1 32))))
 (let (($x157 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x158 (= $x157 $x160)))
 (let (($x156 (= ?x155 (_ bv0 32))))
 (let (($x159 (= $x154 $x156)))
 (let (($x163 (and (and $x159 $x158) $x161)))
 (let (($x164 (= $x163 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x148 (concat ?x147 (concat ?x144 (concat ?x132 ?x130)))))
 (let (($x149 (= ?x148 input.dst.llvm-%l)))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x127 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x125 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x122)))
 (let (($x138 (or false (or false (and (and true (or $x123 $x125)) (or $x126 $x127))))))
 (let (($x135 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x138)))
 (let (($x118 (=> (and $x116 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x138)))
 (let (($x119 (= $x118 true)))
 (let (($x142 (= $x119 true)))
 (let (($x143 (= $x142 true)))
 (let (($x104 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let ((?x93 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x93)))
 (let ((?x57 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x57)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x9 $x17)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x87 $x67)))
 (let (($x58 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x83 $x84)))
 (let (($x90 (not $x88)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x54 $x89)))
 (let (($x53 (and (not $x60) $x90)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x38 $x73)))
 (let (($x77 (not $x82)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x61 $x52)))
 (let (($x56 (and (not $x74) $x77)))
 (let (($x96 (and (and (and (and (and (and $x56 $x53) $x33) $x58) $x64) $x92) $x45)))
 (let (($x97 (and $x96 $x28)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x22 (or false (or false (and (and true (or $x63 $x7)) (or $x72 $x24))))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x98 (and $x42 $x97)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x15 (concat ?x36 (concat ?x16 ?x21)))))
 (let (($x10 (= ?x86 input.dst.llvm-%val)))
 (let (($x26 (= $x10 true)))
 (let (($x50 (= $x26 true)))
 (let (($x102 (and $x50 $x101)))
 (let (($x111 (and $x102 $x107)))
 (let (($x139 (and $x111 $x143)))
 (let (($x152 (and $x139 $x151)))
 (let (($x165 (and $x152 $x164)))
 (let (($x174 (and $x165 $x29)))
 (let (($x184 (and $x174 $x183)))
 (let (($x23 (and $x14 $x184)))
 (let (($x31 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x30 (and $x31 $x23)))
 (let (($x8 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x131 (and $x8 $x30)))
 (let (($x187 (=> $x131 $x186)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x116 (not $x124)))
 (let (($x113 (or $x124 $x116)))
 (let (($x185 (= $x113 false)))
 (let (($x186 (= $x185 true)))
 (let (($x14 (= false false)))
 (let (($x169 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x180 (=> $x169 $x14)))
 (let (($x178 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x173 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x179 (= $x173 $x178)))
 (let (($x176 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x177 (= $x169 $x176)))
 (let (($x182 (and (and $x177 $x179) $x180)))
 (let (($x183 (= $x182 true)))
 (let (($x5 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x129 (= $x173 $x5)))
 (let (($x171 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x172 (= $x169 $x171)))
 (let (($x167 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x108 (and (and $x167 $x172) $x129)))
 (let (($x29 (= $x108 true)))
 (let (($x154 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x161 (=> $x154 $x14)))
 (let ((?x155 (ite $x124 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x155 (_ bv1 32))))
 (let (($x157 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x158 (= $x157 $x160)))
 (let (($x156 (= ?x155 (_ bv0 32))))
 (let (($x159 (= $x154 $x156)))
 (let (($x163 (and (and $x159 $x158) $x161)))
 (let (($x164 (= $x163 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x148 (concat ?x147 (concat ?x144 (concat ?x132 ?x130)))))
 (let (($x149 (= ?x148 input.dst.llvm-%l)))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x127 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x125 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x122)))
 (let (($x138 (or false (or false (and (and true (or $x123 $x125)) (or $x126 $x127))))))
 (let (($x135 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x138)))
 (let (($x118 (=> (and $x116 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x138)))
 (let (($x119 (= $x118 true)))
 (let (($x142 (= $x119 true)))
 (let (($x143 (= $x142 true)))
 (let (($x104 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let ((?x93 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x93)))
 (let ((?x57 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x57)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x9 $x17)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x87 $x67)))
 (let (($x58 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x83 $x84)))
 (let (($x90 (not $x88)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x54 $x89)))
 (let (($x53 (and (not $x60) $x90)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x38 $x73)))
 (let (($x77 (not $x82)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x61 $x52)))
 (let (($x56 (and (not $x74) $x77)))
 (let (($x96 (and (and (and (and (and (and $x56 $x53) $x33) $x58) $x64) $x92) $x45)))
 (let (($x97 (and $x96 $x28)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x22 (or false (or false (and (and true (or $x63 $x7)) (or $x72 $x24))))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x98 (and $x42 $x97)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x15 (concat ?x36 (concat ?x16 ?x21)))))
 (let (($x10 (= ?x86 input.dst.llvm-%val)))
 (let (($x26 (= $x10 true)))
 (let (($x50 (= $x26 true)))
 (let (($x102 (and $x50 $x101)))
 (let (($x111 (and $x102 $x107)))
 (let (($x139 (and $x111 $x143)))
 (let (($x152 (and $x139 $x151)))
 (let (($x165 (and $x152 $x164)))
 (let (($x174 (and $x165 $x29)))
 (let (($x184 (and $x174 $x183)))
 (let (($x23 (and $x14 $x184)))
 (let (($x31 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x30 (and $x31 $x23)))
 (let (($x8 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x131 (and $x8 $x30)))
 (let (($x187 (=> $x131 $x186)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b01010000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b01010000000000000000000000000000)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b01010000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L2%9%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7ab00000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40a8fffc)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x27)
                     #x40a8fffd
                     #x54)
              #x40a8fffc
              #xf8)
       #x40a8fffe
       #xe9))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x27e954f8)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x27272727)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x27272727)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40a8ffff)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7ab00003)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40a8fffc)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7ab00000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv2147352579 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147352576 32))
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv2147352576 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x121 (not $x120)))
 (let (($x191 (or $x120 $x121)))
 (let (($x192 (= $x191 false)))
 (let (($x193 (= $x192 true)))
 (let (($x35 (= false false)))
 (let (($x79 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x186 (=> $x79 $x35)))
 (let (($x5 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x129 (not $x5)))
 (let (($x113 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x185 (= $x5 $x113)))
 (let (($x30 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x131 (= $x79 $x30)))
 (let (($x51 (and (and (and $x131 $x185) $x129) $x186)))
 (let (($x43 (= $x51 true)))
 (let (($x177 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x178 (= $x5 $x177)))
 (let (($x175 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x176 (= $x79 $x175)))
 (let (($x29 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x182 (and (and (and (and (not $x79) $x129) $x29) $x176) $x178)))
 (let (($x183 (= $x182 true)))
 (let (($x160 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x166 (=> $x160 $x35)))
 (let (($x161 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x165 (not $x161)))
 (let ((?x158 (ite $x120 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x158 (_ bv1 32))))
 (let (($x164 (= $x161 $x163)))
 (let (($x162 (= ?x158 (_ bv0 32))))
 (let (($x14 (= $x160 $x162)))
 (let (($x169 (and (and (and $x14 $x164) $x165) $x166)))
 (let (($x170 (= $x169 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x152 (concat ?x149 (concat ?x136 ?x132)))))
 (let (($x154 (= ?x153 input.dst.llvm-%l)))
 (let (($x155 (= $x154 true)))
 (let (($x156 (= $x155 true)))
 (let (($x135 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x137 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x143 (or false (or false (and (and true (or $x127 $x137)) (or $x138 $x135))))))
 (let (($x146 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x143)))
 (let (($x123 (=> (and $x121 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x143)))
 (let (($x125 (= $x123 true)))
 (let (($x147 (= $x125 true)))
 (let (($x141 (= $x147 true)))
 (let (($x107 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x111 (= $x107 true)))
 (let (($x112 (= $x111 true)))
 (let (($x124 (= $x112 true)))
 (let ((?x57 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x57)))
 (let ((?x92 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x92)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x9 $x17)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x87 $x67)))
 (let (($x6 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x88 $x90)))
 (let (($x59 (not $x53)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x91 $x83)))
 (let (($x94 (and (not $x84) $x59)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x82 $x77)))
 (let (($x54 (not $x56)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x76 $x68)))
 (let (($x60 (and (not $x73) $x54)))
 (let (($x99 (and (and (and (and (and (and $x60 $x94) $x39) $x6) $x64) $x80) $x95)))
 (let (($x100 (and $x99 $x45)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x37)))
 (let (($x74 (or false (or false (and (and true (or $x44 $x72)) (or $x49 $x22))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x101 (and $x38 $x100)))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x34 (concat ?x86 (concat ?x70 ?x13)))))
 (let (($x50 (= ?x36 input.dst.llvm-%val)))
 (let (($x75 (= $x50 true)))
 (let (($x85 (= $x75 true)))
 (let (($x105 (and $x85 $x104)))
 (let (($x116 (and $x105 $x124)))
 (let (($x144 (and $x116 $x141)))
 (let (($x159 (and $x144 $x156)))
 (let (($x171 (and $x159 $x170)))
 (let (($x184 (and $x171 $x183)))
 (let (($x140 (and $x184 $x43)))
 (let (($x128 (and $x35 $x140)))
 (let (($x27 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x189 (and $x27 $x128)))
 (let (($x31 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x190 (and $x31 $x189)))
 (let (($x194 (=> $x190 $x193)))
 (not $x194)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x121 (not $x120)))
 (let (($x191 (or $x120 $x121)))
 (let (($x192 (= $x191 false)))
 (let (($x193 (= $x192 true)))
 (let (($x35 (= false false)))
 (let (($x79 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x186 (=> $x79 $x35)))
 (let (($x5 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x129 (not $x5)))
 (let (($x113 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x185 (= $x5 $x113)))
 (let (($x30 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x131 (= $x79 $x30)))
 (let (($x51 (and (and (and $x131 $x185) $x129) $x186)))
 (let (($x43 (= $x51 true)))
 (let (($x177 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x178 (= $x5 $x177)))
 (let (($x175 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x176 (= $x79 $x175)))
 (let (($x29 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x182 (and (and (and (and (not $x79) $x129) $x29) $x176) $x178)))
 (let (($x183 (= $x182 true)))
 (let (($x160 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x166 (=> $x160 $x35)))
 (let (($x161 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x165 (not $x161)))
 (let ((?x158 (ite $x120 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x158 (_ bv1 32))))
 (let (($x164 (= $x161 $x163)))
 (let (($x162 (= ?x158 (_ bv0 32))))
 (let (($x14 (= $x160 $x162)))
 (let (($x169 (and (and (and $x14 $x164) $x165) $x166)))
 (let (($x170 (= $x169 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x152 (concat ?x149 (concat ?x136 ?x132)))))
 (let (($x154 (= ?x153 input.dst.llvm-%l)))
 (let (($x155 (= $x154 true)))
 (let (($x156 (= $x155 true)))
 (let (($x135 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x137 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x143 (or false (or false (and (and true (or $x127 $x137)) (or $x138 $x135))))))
 (let (($x146 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x143)))
 (let (($x123 (=> (and $x121 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x143)))
 (let (($x125 (= $x123 true)))
 (let (($x147 (= $x125 true)))
 (let (($x141 (= $x147 true)))
 (let (($x107 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x111 (= $x107 true)))
 (let (($x112 (= $x111 true)))
 (let (($x124 (= $x112 true)))
 (let ((?x57 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x57)))
 (let ((?x92 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x92)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x9 $x17)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x87 $x67)))
 (let (($x6 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x88 $x90)))
 (let (($x59 (not $x53)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x91 $x83)))
 (let (($x94 (and (not $x84) $x59)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x82 $x77)))
 (let (($x54 (not $x56)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x76 $x68)))
 (let (($x60 (and (not $x73) $x54)))
 (let (($x99 (and (and (and (and (and (and $x60 $x94) $x39) $x6) $x64) $x80) $x95)))
 (let (($x100 (and $x99 $x45)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x37)))
 (let (($x74 (or false (or false (and (and true (or $x44 $x72)) (or $x49 $x22))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x101 (and $x38 $x100)))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x34 (concat ?x86 (concat ?x70 ?x13)))))
 (let (($x50 (= ?x36 input.dst.llvm-%val)))
 (let (($x75 (= $x50 true)))
 (let (($x85 (= $x75 true)))
 (let (($x105 (and $x85 $x104)))
 (let (($x116 (and $x105 $x124)))
 (let (($x144 (and $x116 $x141)))
 (let (($x159 (and $x144 $x156)))
 (let (($x171 (and $x159 $x170)))
 (let (($x184 (and $x171 $x183)))
 (let (($x140 (and $x184 $x43)))
 (let (($x128 (and $x35 $x140)))
 (let (($x27 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x189 (and $x27 $x128)))
 (let (($x31 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x190 (and $x31 $x189)))
 (let (($x194 (=> $x190 $x193)))
 (not $x194)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x110 (not $x109)))
 (let (($x307 (or $x109 $x110)))
 (let (($x308 (= $x307 false)))
 (let (($x309 (= $x308 true)))
 (let (($x290 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x289 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x291 (= $x289 $x290)))
 (let (($x219 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x278 (and $x140 $x219)))
 (let (($x292 (=> $x278 $x291)))
 (let (($x286 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x284 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x287 (= $x284 $x286)))
 (let (($x288 (=> $x278 $x287)))
 (let (($x281 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x282 (=> $x278 $x281)))
 (let (($x275 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x276 (= $x219 $x275)))
 (let (($x277 (=> $x140 $x276)))
 (let (($x70 (= false false)))
 (let (($x202 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x249 (and $x140 $x202)))
 (let (($x250 (=> $x249 $x70)))
 (let (($x272 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x273 (= $x202 $x272)))
 (let (($x274 (=> $x140 $x273)))
 (let (($x269 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x270 (=> $x140 $x269)))
 (let (($x175 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x241 (=> $x175 $x70)))
 (let (($x266 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x267 (= $x140 $x266)))
 (let (($x264 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x265 (= $x175 $x264)))
 (let (($x298 (and (and (and (and (and (and $x265 $x267) $x241) $x270) $x274) $x250) $x277)))
 (let (($x301 (and (and (and $x298 $x282) $x288) $x292)))
 (let (($x302 (= $x301 true)))
 (let (($x251 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x252 (= $x219 $x251)))
 (let (($x253 (=> $x140 $x252)))
 (let (($x246 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x247 (= $x202 $x246)))
 (let (($x248 (=> $x140 $x247)))
 (let (($x243 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x244 (=> $x140 $x243)))
 (let (($x239 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x240 (= $x140 $x239)))
 (let (($x237 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x238 (= $x175 $x237)))
 (let (($x235 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x259 (and (and (and (and (and (and $x235 $x238) $x240) $x241) $x244) $x248) $x250)))
 (let (($x260 (and $x259 $x253)))
 (let (($x261 (= $x260 true)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x178 (concat ?x177 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x131 (concat ?x30 (concat ?x183 ?x178))))
 (let ((?x203 (bvadd ?x131 (_ bv4 32))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x207))))
 (let (($x214 (= (_ bv0 32) ?x213)))
 (let ((?x215 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x220 (bvuge ?x215 (_ bv1 32))))
 (let (($x221 (= $x219 $x220)))
 (let (($x168 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x191 (and $x168 $x140)))
 (let (($x222 (=> $x191 $x221)))
 (let (($x216 (= ?x215 (_ bv0 32))))
 (let (($x217 (= $x202 $x216)))
 (let (($x218 (=> $x191 $x217)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x40))))
 (let (($x199 (= input.spec-%var-l-0.2.1.2.0 ?x198)))
 (let (($x200 (=> $x191 $x199)))
 (let (($x113 (= (_ bv0 32) ?x131)))
 (let ((?x185 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x185 (_ bv1 32))))
 (let (($x189 (= $x140 $x128)))
 (let (($x190 (=> $x168 $x189)))
 (let (($x51 (and $x168 $x175)))
 (let (($x43 (=> $x51 $x70)))
 (let (($x187 (= ?x185 (_ bv0 32))))
 (let (($x188 (= $x175 $x187)))
 (let (($x186 (=> $x168 $x188)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x79)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x129)))
 (let (($x29 (= input.spec-%var-l-0.2.0 ?x108)))
 (let (($x181 (=> $x168 $x29)))
 (let (($x163 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x169 (=> $x163 $x70)))
 (let ((?x164 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x35 (bvuge ?x164 (_ bv1 32))))
 (let (($x166 (= $x168 $x35)))
 (let (($x167 (= ?x164 (_ bv0 32))))
 (let (($x165 (= $x163 $x167)))
 (let (($x228 (and (and (and (and (and (and $x165 $x166) $x169) $x181) $x186) $x43) $x190)))
 (let (($x231 (and (and (and $x228 $x200) $x218) $x222)))
 (let (($x232 (= $x231 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x159 (concat ?x154 (concat ?x145 ?x136)))))
 (let (($x160 (= ?x157 input.dst.llvm-%l)))
 (let (($x158 (= $x160 true)))
 (let (($x162 (= $x158 true)))
 (let (($x146 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x118 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x141 (or false (or false (and (and true (or $x135 $x118)) (or $x143 $x146))))))
 (let (($x151 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x141)))
 (let (($x127 (=> (and $x110 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x141)))
 (let (($x137 (= $x127 true)))
 (let (($x152 (= $x137 true)))
 (let (($x148 (= $x152 true)))
 (let (($x124 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x116 (= $x124 true)))
 (let (($x117 (= $x116 true)))
 (let (($x120 (= $x117 true)))
 (let ((?x92 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x92)))
 (let ((?x80 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x80)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x9 $x17)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x87 $x67)))
 (let (($x28 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x53 $x59)))
 (let (($x96 (not $x94)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x33 $x88)))
 (let (($x93 (and (not $x90) $x96)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x56 $x54)))
 (let (($x91 (not $x60)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x13 $x37)))
 (let (($x84 (and (not $x77) $x91)))
 (let (($x102 (and (and (and (and (and (and $x84 $x93) $x58) $x28) $x64) $x47) $x98)))
 (let (($x103 (and $x102 $x95)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x73 (or false (or false (and (and true (or $x48 $x49)) (or $x52 $x74))))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x73)))
 (let (($x104 (and $x82 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let ((?x36 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x11 (concat ?x16 (concat ?x50 ?x36)))))
 (let (($x21 (= ?x75 input.dst.llvm-%val)))
 (let (($x34 (= $x21 true)))
 (let (($x7 (= $x34 true)))
 (let (($x111 (and $x7 $x107)))
 (let (($x121 (and $x111 $x120)))
 (let (($x149 (and $x121 $x148)))
 (let (($x14 (and $x149 $x162)))
 (let (($x233 (and $x14 $x232)))
 (let (($x262 (and $x233 $x261)))
 (let (($x303 (and $x262 $x302)))
 (let (($x304 (and $x70 $x303)))
 (let (($x81 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x305 (and $x81 $x304)))
 (let (($x25 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x306 (and $x25 $x305)))
 (let (($x310 (=> $x306 $x309)))
 (not $x310)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x110 (not $x109)))
 (let (($x307 (or $x109 $x110)))
 (let (($x308 (= $x307 false)))
 (let (($x309 (= $x308 true)))
 (let (($x290 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x289 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x291 (= $x289 $x290)))
 (let (($x219 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x278 (and $x140 $x219)))
 (let (($x292 (=> $x278 $x291)))
 (let (($x286 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x284 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x287 (= $x284 $x286)))
 (let (($x288 (=> $x278 $x287)))
 (let (($x281 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x282 (=> $x278 $x281)))
 (let (($x275 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x276 (= $x219 $x275)))
 (let (($x277 (=> $x140 $x276)))
 (let (($x70 (= false false)))
 (let (($x202 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x249 (and $x140 $x202)))
 (let (($x250 (=> $x249 $x70)))
 (let (($x272 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x273 (= $x202 $x272)))
 (let (($x274 (=> $x140 $x273)))
 (let (($x269 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x270 (=> $x140 $x269)))
 (let (($x175 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x241 (=> $x175 $x70)))
 (let (($x266 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x267 (= $x140 $x266)))
 (let (($x264 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x265 (= $x175 $x264)))
 (let (($x298 (and (and (and (and (and (and $x265 $x267) $x241) $x270) $x274) $x250) $x277)))
 (let (($x301 (and (and (and $x298 $x282) $x288) $x292)))
 (let (($x302 (= $x301 true)))
 (let (($x251 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x252 (= $x219 $x251)))
 (let (($x253 (=> $x140 $x252)))
 (let (($x246 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x247 (= $x202 $x246)))
 (let (($x248 (=> $x140 $x247)))
 (let (($x243 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x244 (=> $x140 $x243)))
 (let (($x239 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x240 (= $x140 $x239)))
 (let (($x237 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x238 (= $x175 $x237)))
 (let (($x235 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x259 (and (and (and (and (and (and $x235 $x238) $x240) $x241) $x244) $x248) $x250)))
 (let (($x260 (and $x259 $x253)))
 (let (($x261 (= $x260 true)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x178 (concat ?x177 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x131 (concat ?x30 (concat ?x183 ?x178))))
 (let ((?x203 (bvadd ?x131 (_ bv4 32))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x207))))
 (let (($x214 (= (_ bv0 32) ?x213)))
 (let ((?x215 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x220 (bvuge ?x215 (_ bv1 32))))
 (let (($x221 (= $x219 $x220)))
 (let (($x168 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x191 (and $x168 $x140)))
 (let (($x222 (=> $x191 $x221)))
 (let (($x216 (= ?x215 (_ bv0 32))))
 (let (($x217 (= $x202 $x216)))
 (let (($x218 (=> $x191 $x217)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x40))))
 (let (($x199 (= input.spec-%var-l-0.2.1.2.0 ?x198)))
 (let (($x200 (=> $x191 $x199)))
 (let (($x113 (= (_ bv0 32) ?x131)))
 (let ((?x185 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x185 (_ bv1 32))))
 (let (($x189 (= $x140 $x128)))
 (let (($x190 (=> $x168 $x189)))
 (let (($x51 (and $x168 $x175)))
 (let (($x43 (=> $x51 $x70)))
 (let (($x187 (= ?x185 (_ bv0 32))))
 (let (($x188 (= $x175 $x187)))
 (let (($x186 (=> $x168 $x188)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x79)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x129)))
 (let (($x29 (= input.spec-%var-l-0.2.0 ?x108)))
 (let (($x181 (=> $x168 $x29)))
 (let (($x163 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x169 (=> $x163 $x70)))
 (let ((?x164 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x35 (bvuge ?x164 (_ bv1 32))))
 (let (($x166 (= $x168 $x35)))
 (let (($x167 (= ?x164 (_ bv0 32))))
 (let (($x165 (= $x163 $x167)))
 (let (($x228 (and (and (and (and (and (and $x165 $x166) $x169) $x181) $x186) $x43) $x190)))
 (let (($x231 (and (and (and $x228 $x200) $x218) $x222)))
 (let (($x232 (= $x231 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x159 (concat ?x154 (concat ?x145 ?x136)))))
 (let (($x160 (= ?x157 input.dst.llvm-%l)))
 (let (($x158 (= $x160 true)))
 (let (($x162 (= $x158 true)))
 (let (($x146 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x118 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x141 (or false (or false (and (and true (or $x135 $x118)) (or $x143 $x146))))))
 (let (($x151 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x141)))
 (let (($x127 (=> (and $x110 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x141)))
 (let (($x137 (= $x127 true)))
 (let (($x152 (= $x137 true)))
 (let (($x148 (= $x152 true)))
 (let (($x124 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x116 (= $x124 true)))
 (let (($x117 (= $x116 true)))
 (let (($x120 (= $x117 true)))
 (let ((?x92 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x92)))
 (let ((?x80 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x80)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x9 $x17)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x87 $x67)))
 (let (($x28 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x53 $x59)))
 (let (($x96 (not $x94)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x33 $x88)))
 (let (($x93 (and (not $x90) $x96)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x56 $x54)))
 (let (($x91 (not $x60)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x13 $x37)))
 (let (($x84 (and (not $x77) $x91)))
 (let (($x102 (and (and (and (and (and (and $x84 $x93) $x58) $x28) $x64) $x47) $x98)))
 (let (($x103 (and $x102 $x95)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x73 (or false (or false (and (and true (or $x48 $x49)) (or $x52 $x74))))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x73)))
 (let (($x104 (and $x82 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let ((?x36 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x11 (concat ?x16 (concat ?x50 ?x36)))))
 (let (($x21 (= ?x75 input.dst.llvm-%val)))
 (let (($x34 (= $x21 true)))
 (let (($x7 (= $x34 true)))
 (let (($x111 (and $x7 $x107)))
 (let (($x121 (and $x111 $x120)))
 (let (($x149 (and $x121 $x148)))
 (let (($x14 (and $x149 $x162)))
 (let (($x233 (and $x14 $x232)))
 (let (($x262 (and $x233 $x261)))
 (let (($x303 (and $x262 $x302)))
 (let (($x304 (and $x70 $x303)))
 (let (($x81 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x305 (and $x81 $x304)))
 (let (($x25 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x306 (and $x25 $x305)))
 (let (($x310 (=> $x306 $x309)))
 (not $x310)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b01010000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b01010000000000000000000000000000)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b01010000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfbfff96c)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00ff6168)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00ff616b)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfbfff96f)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00ff6168)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfbfff96c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4244635904 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4244635907 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4244635904 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv4244635655 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv4244635652 32))
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv4244635652 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x115 (not $x114)))
 (let (($x321 (or $x114 $x115)))
 (let (($x322 (= $x321 false)))
 (let (($x323 (= $x322 true)))
 (let (($x301 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x216 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x227 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x264 (and $x227 $x216)))
 (let (($x307 (and $x264 $x301)))
 (let (($x308 (not $x307)))
 (let (($x300 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x305 (and $x264 $x300)))
 (let (($x306 (not $x305)))
 (let (($x302 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x303 (= $x301 $x302)))
 (let (($x304 (=> $x264 $x303)))
 (let (($x290 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x291 (= $x300 $x290)))
 (let (($x292 (=> $x264 $x291)))
 (let (($x286 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x287 (=> $x264 $x286)))
 (let (($x282 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x299 (= $x216 $x282)))
 (let (($x283 (=> $x227 $x299)))
 (let (($x85 (= false false)))
 (let (($x200 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x253 (and $x227 $x200)))
 (let (($x260 (=> $x253 $x85)))
 (let (($x279 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x280 (= $x200 $x279)))
 (let (($x281 (=> $x227 $x280)))
 (let (($x277 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x298 (=> $x227 $x277)))
 (let (($x23 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x247 (=> $x23 $x85)))
 (let (($x297 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x275 (= $x227 $x297)))
 (let (($x274 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x296 (= $x23 $x274)))
 (let (($x20 (and (and (and (and (and (and $x296 $x275) $x247) $x298) $x281) $x260) $x283)))
 (let (($x315 (and (and (and (and (and $x20 $x287) $x292) $x304) $x306) $x308)))
 (let (($x316 (= $x315 true)))
 (let (($x265 (not $x264)))
 (let (($x261 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x262 (= $x216 $x261)))
 (let (($x263 (=> $x227 $x262)))
 (let (($x259 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x251 (= $x200 $x259)))
 (let (($x252 (=> $x227 $x251)))
 (let (($x258 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x249 (=> $x227 $x258)))
 (let (($x245 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x246 (= $x227 $x245)))
 (let (($x244 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x257 (= $x23 $x244)))
 (let (($x242 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x269 (and (and (and (and (and (and $x242 $x257) $x246) $x247) $x249) $x252) $x260)))
 (let (($x295 (and (and $x269 $x263) $x265)))
 (let (($x271 (= $x295 true)))
 (let (($x169 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x190 (and $x169 $x227)))
 (let (($x221 (and $x190 $x216)))
 (let (($x222 (not $x221)))
 (let (($x219 (and $x190 $x200)))
 (let (($x220 (not $x219)))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x180 (concat ?x183 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x113 (concat ?x131 (concat ?x176 ?x180))))
 (let ((?x229 (bvadd ?x113 (_ bv4 32))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x211))))
 (let (($x207 (= (_ bv0 32) ?x204)))
 (let ((?x210 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x210 (_ bv1 32))))
 (let (($x218 (= $x216 $x217)))
 (let (($x230 (=> $x190 $x218)))
 (let (($x213 (= ?x210 (_ bv0 32))))
 (let (($x214 (= $x200 $x213)))
 (let (($x215 (=> $x190 $x214)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv1 32))) (select input.dst.llvm-mem ?x113))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv2 32))) ?x197))))
 (let (($x122 (= input.spec-%var-l-0.2.1.2.0 ?x40)))
 (let (($x198 (=> $x190 $x122)))
 (let (($x185 (= (_ bv0 32) ?x113)))
 (let ((?x187 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (bvuge ?x187 (_ bv1 32))))
 (let (($x128 (= $x227 $x140)))
 (let (($x189 (=> $x169 $x128)))
 (let (($x51 (and $x169 $x23)))
 (let (($x43 (=> $x51 $x85)))
 (let (($x188 (= ?x187 (_ bv0 32))))
 (let (($x186 (= $x23 $x188)))
 (let (($x226 (=> $x169 $x186)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x170)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x108)))
 (let (($x225 (= input.spec-%var-l-0.2.0 ?x181)))
 (let (($x174 (=> $x169 $x225)))
 (let (($x35 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x173 (=> $x35 $x85)))
 (let ((?x166 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x224 (bvuge ?x166 (_ bv1 32))))
 (let (($x179 (= $x169 $x224)))
 (let (($x223 (= ?x166 (_ bv0 32))))
 (let (($x70 (= $x35 $x223)))
 (let (($x236 (and (and (and (and (and (and $x70 $x179) $x173) $x174) $x226) $x43) $x189)))
 (let (($x240 (and (and (and (and (and $x236 $x198) $x215) $x230) $x220) $x222)))
 (let (($x255 (= $x240 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x14 (concat ?x160 (concat ?x150 ?x145)))))
 (let (($x163 (= ?x161 input.dst.llvm-%l)))
 (let (($x164 (= $x163 true)))
 (let (($x167 (= $x164 true)))
 (let (($x151 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x123 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x148 (or false (or false (and (and true (or $x146 $x123)) (or $x141 $x151))))))
 (let (($x156 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x148)))
 (let (($x135 (=> (and $x115 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x148)))
 (let (($x118 (= $x135 true)))
 (let (($x159 (= $x118 true)))
 (let (($x153 (= $x159 true)))
 (let (($x120 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x121 (= $x120 true)))
 (let (($x134 (= $x121 true)))
 (let (($x109 (= $x134 true)))
 (let ((?x80 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x80)))
 (let ((?x47 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x47)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x9 $x17)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x87 $x67)))
 (let (($x45 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x94 $x96)))
 (let (($x99 (not $x93)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x39 $x53)))
 (let (($x57 (and (not $x59) $x99)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x60 $x91)))
 (let (($x33 (not $x84)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x21 $x68)))
 (let (($x90 (and (not $x54) $x33)))
 (let (($x105 (and (and (and (and (and (and $x90 $x57) $x6) $x45) $x64) $x97) $x101)))
 (let (($x106 (and $x105 $x98)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x77 (or false (or false (and (and true (or $x24 $x48)) (or $x63 $x62))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x107 (and $x56 $x106)))
 (let (($x111 (= $x107 true)))
 (let (($x112 (= $x111 true)))
 (let (($x124 (= $x112 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x22 (concat ?x78 (concat ?x71 ?x52)))))
 (let (($x7 (= ?x61 input.dst.llvm-%val)))
 (let (($x8 (= $x7 true)))
 (let (($x42 (= $x8 true)))
 (let (($x116 (and $x42 $x124)))
 (let (($x110 (and $x116 $x109)))
 (let (($x154 (and $x110 $x153)))
 (let (($x165 (and $x154 $x167)))
 (let (($x241 (and $x165 $x255)))
 (let (($x272 (and $x241 $x271)))
 (let (($x317 (and $x272 $x316)))
 (let (($x318 (and $x85 $x317)))
 (let (($x65 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x319 (and $x65 $x318)))
 (let (($x126 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x320 (and $x126 $x319)))
 (let (($x324 (=> $x320 $x323)))
 (not $x324))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x115 (not $x114)))
 (let (($x321 (or $x114 $x115)))
 (let (($x322 (= $x321 false)))
 (let (($x323 (= $x322 true)))
 (let (($x301 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x216 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x227 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x264 (and $x227 $x216)))
 (let (($x307 (and $x264 $x301)))
 (let (($x308 (not $x307)))
 (let (($x300 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x305 (and $x264 $x300)))
 (let (($x306 (not $x305)))
 (let (($x302 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x303 (= $x301 $x302)))
 (let (($x304 (=> $x264 $x303)))
 (let (($x290 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x291 (= $x300 $x290)))
 (let (($x292 (=> $x264 $x291)))
 (let (($x286 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x287 (=> $x264 $x286)))
 (let (($x282 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x299 (= $x216 $x282)))
 (let (($x283 (=> $x227 $x299)))
 (let (($x85 (= false false)))
 (let (($x200 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x253 (and $x227 $x200)))
 (let (($x260 (=> $x253 $x85)))
 (let (($x279 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x280 (= $x200 $x279)))
 (let (($x281 (=> $x227 $x280)))
 (let (($x277 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x298 (=> $x227 $x277)))
 (let (($x23 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x247 (=> $x23 $x85)))
 (let (($x297 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x275 (= $x227 $x297)))
 (let (($x274 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x296 (= $x23 $x274)))
 (let (($x20 (and (and (and (and (and (and $x296 $x275) $x247) $x298) $x281) $x260) $x283)))
 (let (($x315 (and (and (and (and (and $x20 $x287) $x292) $x304) $x306) $x308)))
 (let (($x316 (= $x315 true)))
 (let (($x265 (not $x264)))
 (let (($x261 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x262 (= $x216 $x261)))
 (let (($x263 (=> $x227 $x262)))
 (let (($x259 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x251 (= $x200 $x259)))
 (let (($x252 (=> $x227 $x251)))
 (let (($x258 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x249 (=> $x227 $x258)))
 (let (($x245 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x246 (= $x227 $x245)))
 (let (($x244 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x257 (= $x23 $x244)))
 (let (($x242 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x269 (and (and (and (and (and (and $x242 $x257) $x246) $x247) $x249) $x252) $x260)))
 (let (($x295 (and (and $x269 $x263) $x265)))
 (let (($x271 (= $x295 true)))
 (let (($x169 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x190 (and $x169 $x227)))
 (let (($x221 (and $x190 $x216)))
 (let (($x222 (not $x221)))
 (let (($x219 (and $x190 $x200)))
 (let (($x220 (not $x219)))
 (let ((?x183 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x180 (concat ?x183 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x113 (concat ?x131 (concat ?x176 ?x180))))
 (let ((?x229 (bvadd ?x113 (_ bv4 32))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x211))))
 (let (($x207 (= (_ bv0 32) ?x204)))
 (let ((?x210 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x210 (_ bv1 32))))
 (let (($x218 (= $x216 $x217)))
 (let (($x230 (=> $x190 $x218)))
 (let (($x213 (= ?x210 (_ bv0 32))))
 (let (($x214 (= $x200 $x213)))
 (let (($x215 (=> $x190 $x214)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv1 32))) (select input.dst.llvm-mem ?x113))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x113 (_ bv2 32))) ?x197))))
 (let (($x122 (= input.spec-%var-l-0.2.1.2.0 ?x40)))
 (let (($x198 (=> $x190 $x122)))
 (let (($x185 (= (_ bv0 32) ?x113)))
 (let ((?x187 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (bvuge ?x187 (_ bv1 32))))
 (let (($x128 (= $x227 $x140)))
 (let (($x189 (=> $x169 $x128)))
 (let (($x51 (and $x169 $x23)))
 (let (($x43 (=> $x51 $x85)))
 (let (($x188 (= ?x187 (_ bv0 32))))
 (let (($x186 (= $x23 $x188)))
 (let (($x226 (=> $x169 $x186)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x170)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x108)))
 (let (($x225 (= input.spec-%var-l-0.2.0 ?x181)))
 (let (($x174 (=> $x169 $x225)))
 (let (($x35 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x173 (=> $x35 $x85)))
 (let ((?x166 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x224 (bvuge ?x166 (_ bv1 32))))
 (let (($x179 (= $x169 $x224)))
 (let (($x223 (= ?x166 (_ bv0 32))))
 (let (($x70 (= $x35 $x223)))
 (let (($x236 (and (and (and (and (and (and $x70 $x179) $x173) $x174) $x226) $x43) $x189)))
 (let (($x240 (and (and (and (and (and $x236 $x198) $x215) $x230) $x220) $x222)))
 (let (($x255 (= $x240 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x14 (concat ?x160 (concat ?x150 ?x145)))))
 (let (($x163 (= ?x161 input.dst.llvm-%l)))
 (let (($x164 (= $x163 true)))
 (let (($x167 (= $x164 true)))
 (let (($x151 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x123 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x148 (or false (or false (and (and true (or $x146 $x123)) (or $x141 $x151))))))
 (let (($x156 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x148)))
 (let (($x135 (=> (and $x115 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x148)))
 (let (($x118 (= $x135 true)))
 (let (($x159 (= $x118 true)))
 (let (($x153 (= $x159 true)))
 (let (($x120 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x121 (= $x120 true)))
 (let (($x134 (= $x121 true)))
 (let (($x109 (= $x134 true)))
 (let ((?x80 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x80)))
 (let ((?x47 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x47)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x9 $x17)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x87 $x67)))
 (let (($x45 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x94 $x96)))
 (let (($x99 (not $x93)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x39 $x53)))
 (let (($x57 (and (not $x59) $x99)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x60 $x91)))
 (let (($x33 (not $x84)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x21 $x68)))
 (let (($x90 (and (not $x54) $x33)))
 (let (($x105 (and (and (and (and (and (and $x90 $x57) $x6) $x45) $x64) $x97) $x101)))
 (let (($x106 (and $x105 $x98)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x77 (or false (or false (and (and true (or $x24 $x48)) (or $x63 $x62))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x107 (and $x56 $x106)))
 (let (($x111 (= $x107 true)))
 (let (($x112 (= $x111 true)))
 (let (($x124 (= $x112 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x22 (concat ?x78 (concat ?x71 ?x52)))))
 (let (($x7 (= ?x61 input.dst.llvm-%val)))
 (let (($x8 (= $x7 true)))
 (let (($x42 (= $x8 true)))
 (let (($x116 (and $x42 $x124)))
 (let (($x110 (and $x116 $x109)))
 (let (($x154 (and $x110 $x153)))
 (let (($x165 (and $x154 $x167)))
 (let (($x241 (and $x165 $x255)))
 (let (($x272 (and $x241 $x271)))
 (let (($x317 (and $x272 $x316)))
 (let (($x318 (and $x85 $x317)))
 (let (($x65 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x319 (and $x65 $x318)))
 (let (($x126 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x320 (and $x126 $x319)))
 (let (($x324 (=> $x320 $x323)))
 (not $x324))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b01010000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b01010000000000000000000000000000)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b01010000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4244635904 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4244635907 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4244635904 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv4244635655 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv4244635652 32))
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv4244635652 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffe1f7c)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04fe1738)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04fe173b)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffe1f7f)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04fe1738)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffe1f7c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x183 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x10 (or $x183 $x131)))
 (let (($x38 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x138 (not $x38)))
 (let (($x193 (or $x38 $x138)))
 (let (($x133 (=> $x193 $x10)))
 (let (($x223 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x167 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x165 (and true $x167)))
 (let (($x168 (and $x167 $x165)))
 (let (($x70 (and $x168 $x223)))
 (let (($x169 (= true $x70)))
 (let (($x224 (=> $x138 $x169)))
 (let (($x157 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x195 (and $x157 $x224)))
 (let (($x192 (=> (and $x195 $x193) $x10)))
 (let (($x196 (= $x192 true)))
 (let (($x191 (= $x196 true)))
 (let (($x43 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x51 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x235 (= $x51 $x43)))
 (let (($x226 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x188 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x234 (= $x188 $x226)))
 (let (($x227 (and $x234 $x235)))
 (let (($x140 (= $x227 true)))
 (let ((?x177 (ite $x38 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x177 (_ bv1 32))))
 (let (($x180 (= $x183 $x30)))
 (let (($x176 (= ?x177 (_ bv0 32))))
 (let (($x182 (= $x131 $x176)))
 (let (($x178 (and $x182 $x180)))
 (let (($x113 (= $x178 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x225 (concat ?x181 (concat ?x5 (concat ?x129 ?x29)))))
 (let (($x174 (= ?x225 input.dst.llvm-%l)))
 (let (($x233 (= $x174 true)))
 (let (($x175 (= $x233 true)))
 (let (($x179 (= $x224 true)))
 (let (($x231 (= $x179 true)))
 (let (($x85 (= $x231 true)))
 (let (($x160 (= $x157 true)))
 (let (($x136 (= $x160 true)))
 (let (($x150 (= $x136 true)))
 (let (($x135 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x118 (= $x135 true)))
 (let (($x159 (= $x118 true)))
 (let (($x153 (= $x159 true)))
 (let ((?x119 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x119)))
 (let ((?x115 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x115)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x121)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x120 $x134)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x117 $x109)))
 (let (($x116 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x105 $x80)))
 (let (($x106 (not $x98)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x104 $x47)))
 (let (($x111 (and (not $x101) $x106)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x17 $x67)))
 (let (($x103 (not $x64)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x39 $x53)))
 (let (($x97 (and (not $x41) $x103)))
 (let (($x147 (and (and (and (and (and (and $x97 $x111) $x112) $x116) $x110) $x114) $x144)))
 (let (($x141 (and $x147 $x142)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x95 (or false (or false (and (and true (or $x96 $x93)) (or $x102 $x6))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x95)))
 (let (($x151 (and $x9 $x141)))
 (let (($x127 (= $x151 true)))
 (let (($x137 (= $x127 true)))
 (let (($x152 (= $x137 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x54 (concat ?x56 (concat ?x76 ?x32)))))
 (let (($x91 (= ?x88 input.dst.llvm-%val)))
 (let (($x84 (= $x91 true)))
 (let (($x33 (= $x84 true)))
 (let (($x148 (and $x33 $x152)))
 (let (($x154 (and $x148 $x153)))
 (let (($x145 (and $x154 $x150)))
 (let (($x155 (and $x145 $x150)))
 (let (($x173 (and $x155 $x85)))
 (let (($x23 (and $x173 $x175)))
 (let (($x185 (and $x23 $x113)))
 (let (($x128 (and $x185 $x140)))
 (let (($x36 (= false false)))
 (let (($x189 (and $x36 $x128)))
 (let (($x48 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x236 (and $x48 $x189)))
 (let (($x24 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x190 (and $x24 $x236)))
 (let (($x8 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x52 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x82 (or false (or false (and (and true (or $x71 $x52)) (or $x7 $x8))))))
 (let (($x13 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x82)))
 (let (($x75 (=> (and $x138 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x82)))
 (let (($x228 (and $x75 $x190)))
 (let (($x197 (=> $x228 $x191)))
 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x183 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x10 (or $x183 $x131)))
 (let (($x38 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x138 (not $x38)))
 (let (($x193 (or $x38 $x138)))
 (let (($x133 (=> $x193 $x10)))
 (let (($x223 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x167 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x165 (and true $x167)))
 (let (($x168 (and $x167 $x165)))
 (let (($x70 (and $x168 $x223)))
 (let (($x169 (= true $x70)))
 (let (($x224 (=> $x138 $x169)))
 (let (($x157 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x195 (and $x157 $x224)))
 (let (($x192 (=> (and $x195 $x193) $x10)))
 (let (($x196 (= $x192 true)))
 (let (($x191 (= $x196 true)))
 (let (($x43 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x51 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x235 (= $x51 $x43)))
 (let (($x226 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x188 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x234 (= $x188 $x226)))
 (let (($x227 (and $x234 $x235)))
 (let (($x140 (= $x227 true)))
 (let ((?x177 (ite $x38 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x177 (_ bv1 32))))
 (let (($x180 (= $x183 $x30)))
 (let (($x176 (= ?x177 (_ bv0 32))))
 (let (($x182 (= $x131 $x176)))
 (let (($x178 (and $x182 $x180)))
 (let (($x113 (= $x178 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x225 (concat ?x181 (concat ?x5 (concat ?x129 ?x29)))))
 (let (($x174 (= ?x225 input.dst.llvm-%l)))
 (let (($x233 (= $x174 true)))
 (let (($x175 (= $x233 true)))
 (let (($x179 (= $x224 true)))
 (let (($x231 (= $x179 true)))
 (let (($x85 (= $x231 true)))
 (let (($x160 (= $x157 true)))
 (let (($x136 (= $x160 true)))
 (let (($x150 (= $x136 true)))
 (let (($x135 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x118 (= $x135 true)))
 (let (($x159 (= $x118 true)))
 (let (($x153 (= $x159 true)))
 (let ((?x119 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x119)))
 (let ((?x115 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x115)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x121)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x120 $x134)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x117 $x109)))
 (let (($x116 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x105 $x80)))
 (let (($x106 (not $x98)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x104 $x47)))
 (let (($x111 (and (not $x101) $x106)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x17 $x67)))
 (let (($x103 (not $x64)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x39 $x53)))
 (let (($x97 (and (not $x41) $x103)))
 (let (($x147 (and (and (and (and (and (and $x97 $x111) $x112) $x116) $x110) $x114) $x144)))
 (let (($x141 (and $x147 $x142)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x95 (or false (or false (and (and true (or $x96 $x93)) (or $x102 $x6))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x95)))
 (let (($x151 (and $x9 $x141)))
 (let (($x127 (= $x151 true)))
 (let (($x137 (= $x127 true)))
 (let (($x152 (= $x137 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x54 (concat ?x56 (concat ?x76 ?x32)))))
 (let (($x91 (= ?x88 input.dst.llvm-%val)))
 (let (($x84 (= $x91 true)))
 (let (($x33 (= $x84 true)))
 (let (($x148 (and $x33 $x152)))
 (let (($x154 (and $x148 $x153)))
 (let (($x145 (and $x154 $x150)))
 (let (($x155 (and $x145 $x150)))
 (let (($x173 (and $x155 $x85)))
 (let (($x23 (and $x173 $x175)))
 (let (($x185 (and $x23 $x113)))
 (let (($x128 (and $x185 $x140)))
 (let (($x36 (= false false)))
 (let (($x189 (and $x36 $x128)))
 (let (($x48 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x236 (and $x48 $x189)))
 (let (($x24 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x190 (and $x24 $x236)))
 (let (($x8 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x52 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x82 (or false (or false (and (and true (or $x71 $x52)) (or $x7 $x8))))))
 (let (($x13 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x82)))
 (let (($x75 (=> (and $x138 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x82)))
 (let (($x228 (and $x75 $x190)))
 (let (($x197 (=> $x228 $x191)))
 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x199)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x205)))
 (let (($x208 (= input.spec-%var-l-0.2.0 ?x212)))
 (let (($x202 (= $x208 true)))
 (let (($x203 (= $x202 true)))
 (let (($x192 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x133 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x196 (= $x133 $x192)))
 (let (($x193 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x228 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x10 (= $x228 $x193)))
 (let (($x191 (and $x10 $x196)))
 (let (($x197 (= $x191 true)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x51 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x227 (bvuge ?x51 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x140 (= $x68 $x227)))
 (let (($x43 (= ?x51 (_ bv0 32))))
 (let (($x234 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x235 (= $x234 $x43)))
 (let (($x128 (and $x235 $x140)))
 (let (($x189 (= $x128 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x113 (concat ?x30 (concat ?x176 ?x131)))))
 (let (($x187 (= ?x185 input.dst.llvm-%l)))
 (let (($x188 (= $x187 true)))
 (let (($x186 (= $x188 true)))
 (let (($x181 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x231 (and true $x179)))
 (let (($x85 (and $x179 $x231)))
 (let (($x172 (and $x85 $x181)))
 (let (($x5 (= true $x172)))
 (let (($x38 (not $x65)))
 (let (($x79 (=> $x38 $x5)))
 (let (($x174 (= $x79 true)))
 (let (($x233 (= $x174 true)))
 (let (($x175 (= $x233 true)))
 (let (($x155 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x129 (and $x155 $x79)))
 (let (($x29 (= $x129 true)))
 (let (($x171 (= $x29 true)))
 (let (($x170 (= $x171 true)))
 (let (($x165 (= $x38 true)))
 (let (($x168 (= $x165 true)))
 (let (($x35 (= $x168 true)))
 (let (($x161 (= $x155 true)))
 (let (($x158 (= $x161 true)))
 (let (($x163 (= $x158 true)))
 (let (($x162 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x14 (= $x162 true)))
 (let (($x157 (= $x14 true)))
 (let (($x160 (= $x157 true)))
 (let ((?x147 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x147)))
 (let ((?x115 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x115)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x109)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x134 $x110)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x121 $x123)))
 (let (($x120 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x111 $x149)))
 (let (($x143 (not $x112)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x80 $x98)))
 (let (($x116 (and (not $x106) $x143)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x97 $x104)))
 (let (($x101 (not $x47)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x93 $x99)))
 (let (($x105 (and (not $x103) $x101)))
 (let (($x152 (and (and (and (and (and (and $x105 $x116) $x146) $x120) $x139) $x125) $x144)))
 (let (($x148 (and $x152 $x119)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x6)))
 (let (($x17 (or false (or false (and (and true (or $x92 $x28)) (or $x9 $x39))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x17)))
 (let (($x156 (and $x64 $x148)))
 (let (($x135 (= $x156 true)))
 (let (($x118 (= $x135 true)))
 (let (($x159 (= $x118 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x84 (concat ?x88 (concat ?x76 ?x56)))))
 (let (($x58 (= ?x33 input.dst.llvm-%val)))
 (let (($x87 (= $x58 true)))
 (let (($x94 (= $x87 true)))
 (let (($x153 (and $x94 $x159)))
 (let (($x136 (and $x153 $x160)))
 (let (($x164 (and $x136 $x163)))
 (let (($x167 (and $x164 $x163)))
 (let (($x166 (and $x167 $x35)))
 (let (($x225 (and $x166 $x170)))
 (let (($x23 (and $x225 $x175)))
 (let (($x226 (and $x23 $x186)))
 (let (($x236 (and $x226 $x189)))
 (let (($x194 (and $x236 $x197)))
 (let (($x90 (and $x68 $x194)))
 (let (($x12 (= false false)))
 (let (($x89 (and $x12 $x90)))
 (let (($x36 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x232 (and $x36 $x89)))
 (let (($x31 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x46 (and $x31 $x232)))
 (let (($x18 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x26 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x52)))
 (let (($x75 (or false (or false (and (and true (or $x15 $x26)) (or $x42 $x18))))))
 (let (($x72 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x75)))
 (let (($x126 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x75)))
 (let (($x40 (and $x126 $x46)))
 (let (($x201 (=> $x40 $x203)))
 (not $x201))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x199)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x205)))
 (let (($x208 (= input.spec-%var-l-0.2.0 ?x212)))
 (let (($x202 (= $x208 true)))
 (let (($x203 (= $x202 true)))
 (let (($x192 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x133 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x196 (= $x133 $x192)))
 (let (($x193 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x228 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x10 (= $x228 $x193)))
 (let (($x191 (and $x10 $x196)))
 (let (($x197 (= $x191 true)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x51 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x227 (bvuge ?x51 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x140 (= $x68 $x227)))
 (let (($x43 (= ?x51 (_ bv0 32))))
 (let (($x234 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x235 (= $x234 $x43)))
 (let (($x128 (and $x235 $x140)))
 (let (($x189 (= $x128 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x113 (concat ?x30 (concat ?x176 ?x131)))))
 (let (($x187 (= ?x185 input.dst.llvm-%l)))
 (let (($x188 (= $x187 true)))
 (let (($x186 (= $x188 true)))
 (let (($x181 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x231 (and true $x179)))
 (let (($x85 (and $x179 $x231)))
 (let (($x172 (and $x85 $x181)))
 (let (($x5 (= true $x172)))
 (let (($x38 (not $x65)))
 (let (($x79 (=> $x38 $x5)))
 (let (($x174 (= $x79 true)))
 (let (($x233 (= $x174 true)))
 (let (($x175 (= $x233 true)))
 (let (($x155 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x129 (and $x155 $x79)))
 (let (($x29 (= $x129 true)))
 (let (($x171 (= $x29 true)))
 (let (($x170 (= $x171 true)))
 (let (($x165 (= $x38 true)))
 (let (($x168 (= $x165 true)))
 (let (($x35 (= $x168 true)))
 (let (($x161 (= $x155 true)))
 (let (($x158 (= $x161 true)))
 (let (($x163 (= $x158 true)))
 (let (($x162 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x14 (= $x162 true)))
 (let (($x157 (= $x14 true)))
 (let (($x160 (= $x157 true)))
 (let ((?x147 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x147)))
 (let ((?x115 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x115)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x109)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x134 $x110)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x121 $x123)))
 (let (($x120 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x111 $x149)))
 (let (($x143 (not $x112)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x80 $x98)))
 (let (($x116 (and (not $x106) $x143)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x97 $x104)))
 (let (($x101 (not $x47)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x93 $x99)))
 (let (($x105 (and (not $x103) $x101)))
 (let (($x152 (and (and (and (and (and (and $x105 $x116) $x146) $x120) $x139) $x125) $x144)))
 (let (($x148 (and $x152 $x119)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x6)))
 (let (($x17 (or false (or false (and (and true (or $x92 $x28)) (or $x9 $x39))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x17)))
 (let (($x156 (and $x64 $x148)))
 (let (($x135 (= $x156 true)))
 (let (($x118 (= $x135 true)))
 (let (($x159 (= $x118 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x84 (concat ?x88 (concat ?x76 ?x56)))))
 (let (($x58 (= ?x33 input.dst.llvm-%val)))
 (let (($x87 (= $x58 true)))
 (let (($x94 (= $x87 true)))
 (let (($x153 (and $x94 $x159)))
 (let (($x136 (and $x153 $x160)))
 (let (($x164 (and $x136 $x163)))
 (let (($x167 (and $x164 $x163)))
 (let (($x166 (and $x167 $x35)))
 (let (($x225 (and $x166 $x170)))
 (let (($x23 (and $x225 $x175)))
 (let (($x226 (and $x23 $x186)))
 (let (($x236 (and $x226 $x189)))
 (let (($x194 (and $x236 $x197)))
 (let (($x90 (and $x68 $x194)))
 (let (($x12 (= false false)))
 (let (($x89 (and $x12 $x90)))
 (let (($x36 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x232 (and $x36 $x89)))
 (let (($x31 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x46 (and $x31 $x232)))
 (let (($x18 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x26 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x52)))
 (let (($x75 (or false (or false (and (and true (or $x15 $x26)) (or $x42 $x18))))))
 (let (($x72 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x75)))
 (let (($x126 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x75)))
 (let (($x40 (and $x126 $x46)))
 (let (($x201 (=> $x40 $x203)))
 (not $x201))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b01010000000000000000000000000100)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b00101000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b01010000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b01010000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b00101000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b00101000000000000000000000000011)
(= input.spec-%tmpvar-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01010000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4b980004)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xb9)
                     #x4b980004
                     #xd8)
              #x4b980005
              #xff)
       #x4b980007
       #x5f))
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #x46464646)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x5fb9ffd8)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xb9b9b9b9)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xb9b9b9b9)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #x46464646)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x46464646)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4b980007)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4b980004)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv2101919672 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3221275048 32) (_ bv184 8)) (_ bv3221275049 32) (_ bv191 8)) (_ bv3221275050 32) (_ bv72 8)) (_ bv3221275051 32) (_ bv125 8)) (_ bv2101919672 32) (_ bv255 8)) (_ bv2101919673 32) (_ bv255 8)) (_ bv2101919674 32) (_ bv63 8)) (_ bv2101919675 32) (_ bv73 8)))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv32 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3221275048 32))
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv2102509428 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3221275048 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3221275051 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2102509428 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv2102509431 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x209)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x210)))
 (let (($x215 (= input.spec-%var-l-0.2.0 ?x214)))
 (let (($x238 (= $x215 true)))
 (let (($x216 (= $x238 true)))
 (let (($x200 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x122 (not $x200)))
 (let (($x232 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x237 (not $x232)))
 (let (($x229 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x198 (= $x200 $x229)))
 (let (($x40 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x206 (= $x232 $x40)))
 (let (($x212 (and (and (and $x206 $x198) $x237) $x122)))
 (let (($x208 (= $x212 true)))
 (let (($x197 (not true)))
 (let (($x194 (= $x197 true)))
 (let (($x84 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x193 (not $x84)))
 (let (($x140 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x195 (not $x140)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x128 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x128 (_ bv1 32))))
 (let (($x228 (= $x84 $x190)))
 (let (($x189 (= ?x128 (_ bv0 32))))
 (let (($x236 (= $x140 $x189)))
 (let (($x192 (and (and (and $x236 $x228) $x195) $x193)))
 (let (($x196 (= $x192 true)))
 (let ((?x182 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x234 (concat ?x186 (concat ?x185 ?x182)))))
 (let (($x43 (= ?x51 input.dst.llvm-%l)))
 (let (($x235 (= $x43 true)))
 (let (($x68 (= $x235 true)))
 (let (($x171 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x172 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x5 (and true $x172)))
 (let (($x79 (and $x172 $x5)))
 (let (($x170 (and $x79 $x171)))
 (let (($x225 (= true $x170)))
 (let (($x38 (not $x65)))
 (let (($x174 (=> $x38 $x225)))
 (let (($x183 (= $x174 true)))
 (let (($x30 (= $x183 true)))
 (let (($x177 (= $x30 true)))
 (let (($x165 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x233 (and $x165 $x174)))
 (let (($x175 (= $x233 true)))
 (let (($x23 (= $x175 true)))
 (let (($x178 (= $x23 true)))
 (let (($x169 (= $x38 true)))
 (let (($x224 (= $x169 true)))
 (let (($x179 (= $x224 true)))
 (let (($x168 (= $x165 true)))
 (let (($x35 (= $x168 true)))
 (let (($x166 (= $x35 true)))
 (let (($x145 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x155 (= $x145 true)))
 (let (($x161 (= $x155 true)))
 (let (($x158 (= $x161 true)))
 (let ((?x147 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x147)))
 (let ((?x144 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x144)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x114 (and $x123 $x127)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x110 $x114)))
 (let (($x109 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x142 $x146)))
 (let (($x117 (not $x141)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x112 $x143)))
 (let (($x151 (and (not $x116) $x117)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x80 $x98)))
 (let (($x124 (not $x106)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x45 $x95)))
 (let (($x149 (and (not $x105) $x124)))
 (let (($x153 (and (and (and (and (and (and $x149 $x151) $x121) $x109) $x125) $x115) $x152)))
 (let (($x154 (and $x153 $x119)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x104 (or false (or false (and (and true (or $x41 $x100)) (or $x93 $x99))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x162 (and $x101 $x154)))
 (let (($x14 (= $x162 true)))
 (let (($x157 (= $x14 true)))
 (let (($x160 (= $x157 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x94 (concat ?x59 (concat ?x56 ?x62)))))
 (let (($x67 (= ?x57 input.dst.llvm-%val)))
 (let (($x6 (= $x67 true)))
 (let (($x92 (= $x6 true)))
 (let (($x136 (and $x92 $x160)))
 (let (($x163 (and $x136 $x158)))
 (let (($x70 (and $x163 $x166)))
 (let (($x223 (and $x70 $x166)))
 (let (($x231 (and $x223 $x179)))
 (let (($x113 (and $x231 $x178)))
 (let (($x176 (and $x113 $x177)))
 (let (($x227 (and $x176 $x68)))
 (let (($x191 (and $x227 $x196)))
 (let (($x90 (and $x191 $x194)))
 (let (($x202 (and $x90 $x208)))
 (let (($x203 (and $x84 $x202)))
 (let (($x77 (= false false)))
 (let (($x201 (and $x77 $x203)))
 (let (($x54 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x211 (and $x54 $x201)))
 (let (($x36 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x22 (and $x36 $x211)))
 (let (($x13 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x34 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x86 (or false (or false (and (and true (or $x7 $x34)) (or $x82 $x13))))))
 (let (($x31 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x86)))
 (let (($x25 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x86)))
 (let (($x96 (and $x25 $x22)))
 (let (($x217 (=> $x96 $x216)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x209)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x210)))
 (let (($x215 (= input.spec-%var-l-0.2.0 ?x214)))
 (let (($x238 (= $x215 true)))
 (let (($x216 (= $x238 true)))
 (let (($x200 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x122 (not $x200)))
 (let (($x232 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x237 (not $x232)))
 (let (($x229 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x198 (= $x200 $x229)))
 (let (($x40 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x206 (= $x232 $x40)))
 (let (($x212 (and (and (and $x206 $x198) $x237) $x122)))
 (let (($x208 (= $x212 true)))
 (let (($x197 (not true)))
 (let (($x194 (= $x197 true)))
 (let (($x84 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x193 (not $x84)))
 (let (($x140 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x195 (not $x140)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x128 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x128 (_ bv1 32))))
 (let (($x228 (= $x84 $x190)))
 (let (($x189 (= ?x128 (_ bv0 32))))
 (let (($x236 (= $x140 $x189)))
 (let (($x192 (and (and (and $x236 $x228) $x195) $x193)))
 (let (($x196 (= $x192 true)))
 (let ((?x182 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x234 (concat ?x186 (concat ?x185 ?x182)))))
 (let (($x43 (= ?x51 input.dst.llvm-%l)))
 (let (($x235 (= $x43 true)))
 (let (($x68 (= $x235 true)))
 (let (($x171 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x172 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x5 (and true $x172)))
 (let (($x79 (and $x172 $x5)))
 (let (($x170 (and $x79 $x171)))
 (let (($x225 (= true $x170)))
 (let (($x38 (not $x65)))
 (let (($x174 (=> $x38 $x225)))
 (let (($x183 (= $x174 true)))
 (let (($x30 (= $x183 true)))
 (let (($x177 (= $x30 true)))
 (let (($x165 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x233 (and $x165 $x174)))
 (let (($x175 (= $x233 true)))
 (let (($x23 (= $x175 true)))
 (let (($x178 (= $x23 true)))
 (let (($x169 (= $x38 true)))
 (let (($x224 (= $x169 true)))
 (let (($x179 (= $x224 true)))
 (let (($x168 (= $x165 true)))
 (let (($x35 (= $x168 true)))
 (let (($x166 (= $x35 true)))
 (let (($x145 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x155 (= $x145 true)))
 (let (($x161 (= $x155 true)))
 (let (($x158 (= $x161 true)))
 (let ((?x147 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x147)))
 (let ((?x144 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x144)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x114 (and $x123 $x127)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x110 $x114)))
 (let (($x109 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x142 $x146)))
 (let (($x117 (not $x141)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x112 $x143)))
 (let (($x151 (and (not $x116) $x117)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x80 $x98)))
 (let (($x124 (not $x106)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x45 $x95)))
 (let (($x149 (and (not $x105) $x124)))
 (let (($x153 (and (and (and (and (and (and $x149 $x151) $x121) $x109) $x125) $x115) $x152)))
 (let (($x154 (and $x153 $x119)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x104 (or false (or false (and (and true (or $x41 $x100)) (or $x93 $x99))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x162 (and $x101 $x154)))
 (let (($x14 (= $x162 true)))
 (let (($x157 (= $x14 true)))
 (let (($x160 (= $x157 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x94 (concat ?x59 (concat ?x56 ?x62)))))
 (let (($x67 (= ?x57 input.dst.llvm-%val)))
 (let (($x6 (= $x67 true)))
 (let (($x92 (= $x6 true)))
 (let (($x136 (and $x92 $x160)))
 (let (($x163 (and $x136 $x158)))
 (let (($x70 (and $x163 $x166)))
 (let (($x223 (and $x70 $x166)))
 (let (($x231 (and $x223 $x179)))
 (let (($x113 (and $x231 $x178)))
 (let (($x176 (and $x113 $x177)))
 (let (($x227 (and $x176 $x68)))
 (let (($x191 (and $x227 $x196)))
 (let (($x90 (and $x191 $x194)))
 (let (($x202 (and $x90 $x208)))
 (let (($x203 (and $x84 $x202)))
 (let (($x77 (= false false)))
 (let (($x201 (and $x77 $x203)))
 (let (($x54 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x211 (and $x54 $x201)))
 (let (($x36 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x22 (and $x36 $x211)))
 (let (($x13 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x34 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x86 (or false (or false (and (and true (or $x7 $x34)) (or $x82 $x13))))))
 (let (($x31 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x86)))
 (let (($x25 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x86)))
 (let (($x96 (and $x25 $x22)))
 (let (($x217 (=> $x96 $x216)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x217)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x28)))
 (let (($x16 (= input.spec-%var-l-0.2.0 ?x131)))
 (let (($x230 (= $x16 true)))
 (let (($x254 (= $x230 true)))
 (let (($x88 (= false false)))
 (let (($x40 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x96 (=> $x40 $x88)))
 (let (($x211 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x198 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x22 (= $x198 $x211)))
 (let (($x203 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x201 (= $x40 $x203)))
 (let (($x204 (and (and $x201 $x22) $x96)))
 (let (($x207 (= $x204 true)))
 (let (($x199 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x237 (= $x198 $x199)))
 (let (($x200 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x229 (= $x40 $x200)))
 (let (($x232 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x122 (and (and $x232 $x229) $x237)))
 (let (($x212 (= $x122 true)))
 (let (($x228 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x196 (=> $x228 $x88)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x10 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x10 (_ bv1 32))))
 (let (($x94 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x192 (= $x94 $x193)))
 (let (($x195 (= ?x10 (_ bv0 32))))
 (let (($x133 (= $x228 $x195)))
 (let (($x197 (and (and $x133 $x192) $x196)))
 (let (($x194 (= $x197 true)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x140 (concat ?x68 (concat ?x51 ?x187)))))
 (let (($x189 (= ?x128 input.dst.llvm-%l)))
 (let (($x236 (= $x189 true)))
 (let (($x84 (= $x236 true)))
 (let (($x23 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x170 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x225 (and true $x170)))
 (let (($x174 (and $x170 $x225)))
 (let (($x178 (and $x174 $x23)))
 (let (($x113 (= true $x178)))
 (let (($x38 (not $x65)))
 (let (($x183 (=> $x38 $x113)))
 (let (($x188 (= $x183 true)))
 (let (($x186 (= $x188 true)))
 (let (($x180 (= $x186 true)))
 (let (($x169 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x30 (and $x169 $x183)))
 (let (($x177 (= $x30 true)))
 (let (($x176 (= $x177 true)))
 (let (($x63 (= $x176 true)))
 (let (($x108 (= $x38 true)))
 (let (($x181 (= $x108 true)))
 (let (($x172 (= $x181 true)))
 (let (($x224 (= $x169 true)))
 (let (($x179 (= $x224 true)))
 (let (($x231 (= $x179 true)))
 (let (($x167 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x165 (= $x167 true)))
 (let (($x168 (= $x165 true)))
 (let (($x35 (= $x168 true)))
 (let ((?x147 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x147)))
 (let ((?x152 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x152)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x125)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x137 (and $x114 $x118)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x127 $x137)))
 (let (($x139 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x148 $x121)))
 (let (($x134 (not $x156)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x141 $x117)))
 (let (($x135 (and (not $x151) $x134)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x112 $x143)))
 (let (($x120 (not $x116)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x17 $x64)))
 (let (($x146 (and (not $x149) $x120)))
 (let (($x136 (and (and (and (and (and (and $x146 $x135) $x110) $x139) $x115) $x144) $x153)))
 (let (($x150 (and $x136 $x119)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x103)))
 (let (($x98 (or false (or false (and (and true (or $x107 $x97)) (or $x45 $x95))))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x145 (and $x124 $x150)))
 (let (($x155 (= $x145 true)))
 (let (($x161 (= $x155 true)))
 (let (($x158 (= $x161 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x92 (concat ?x102 (concat ?x62 ?x76)))))
 (let (($x47 (= ?x9 input.dst.llvm-%val)))
 (let (($x53 (= $x47 true)))
 (let (($x41 (= $x53 true)))
 (let (($x163 (and $x41 $x158)))
 (let (($x166 (and $x163 $x35)))
 (let (($x173 (and $x166 $x231)))
 (let (($x85 (and $x173 $x231)))
 (let (($x5 (and $x85 $x172)))
 (let (($x234 (and $x5 $x63)))
 (let (($x185 (and $x234 $x180)))
 (let (($x190 (and $x185 $x84)))
 (let (($x90 (and $x190 $x194)))
 (let (($x208 (and $x90 $x212)))
 (let (($x184 (and $x208 $x207)))
 (let (($x66 (and $x94 $x184)))
 (let (($x37 (and $x88 $x66)))
 (let (($x49 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x209 (and $x49 $x37)))
 (let (($x54 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x210 (and $x54 $x209)))
 (let (($x126 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x18 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x50 (or false (or false (and (and true (or $x8 $x18)) (or $x72 $x126))))))
 (let (($x36 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x50)))
 (let (($x52 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x50)))
 (let (($x214 (and $x52 $x210)))
 (let (($x219 (=> $x214 $x254)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x217)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x28)))
 (let (($x16 (= input.spec-%var-l-0.2.0 ?x131)))
 (let (($x230 (= $x16 true)))
 (let (($x254 (= $x230 true)))
 (let (($x88 (= false false)))
 (let (($x40 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x96 (=> $x40 $x88)))
 (let (($x211 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x198 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x22 (= $x198 $x211)))
 (let (($x203 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x201 (= $x40 $x203)))
 (let (($x204 (and (and $x201 $x22) $x96)))
 (let (($x207 (= $x204 true)))
 (let (($x199 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x237 (= $x198 $x199)))
 (let (($x200 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x229 (= $x40 $x200)))
 (let (($x232 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x122 (and (and $x232 $x229) $x237)))
 (let (($x212 (= $x122 true)))
 (let (($x228 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x196 (=> $x228 $x88)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x10 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x10 (_ bv1 32))))
 (let (($x94 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x192 (= $x94 $x193)))
 (let (($x195 (= ?x10 (_ bv0 32))))
 (let (($x133 (= $x228 $x195)))
 (let (($x197 (and (and $x133 $x192) $x196)))
 (let (($x194 (= $x197 true)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x140 (concat ?x68 (concat ?x51 ?x187)))))
 (let (($x189 (= ?x128 input.dst.llvm-%l)))
 (let (($x236 (= $x189 true)))
 (let (($x84 (= $x236 true)))
 (let (($x23 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x170 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x225 (and true $x170)))
 (let (($x174 (and $x170 $x225)))
 (let (($x178 (and $x174 $x23)))
 (let (($x113 (= true $x178)))
 (let (($x38 (not $x65)))
 (let (($x183 (=> $x38 $x113)))
 (let (($x188 (= $x183 true)))
 (let (($x186 (= $x188 true)))
 (let (($x180 (= $x186 true)))
 (let (($x169 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x30 (and $x169 $x183)))
 (let (($x177 (= $x30 true)))
 (let (($x176 (= $x177 true)))
 (let (($x63 (= $x176 true)))
 (let (($x108 (= $x38 true)))
 (let (($x181 (= $x108 true)))
 (let (($x172 (= $x181 true)))
 (let (($x224 (= $x169 true)))
 (let (($x179 (= $x224 true)))
 (let (($x231 (= $x179 true)))
 (let (($x167 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x165 (= $x167 true)))
 (let (($x168 (= $x165 true)))
 (let (($x35 (= $x168 true)))
 (let ((?x147 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x147)))
 (let ((?x152 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x152)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x125)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x137 (and $x114 $x118)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x127 $x137)))
 (let (($x139 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x148 $x121)))
 (let (($x134 (not $x156)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x141 $x117)))
 (let (($x135 (and (not $x151) $x134)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x112 $x143)))
 (let (($x120 (not $x116)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x17 $x64)))
 (let (($x146 (and (not $x149) $x120)))
 (let (($x136 (and (and (and (and (and (and $x146 $x135) $x110) $x139) $x115) $x144) $x153)))
 (let (($x150 (and $x136 $x119)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x103)))
 (let (($x98 (or false (or false (and (and true (or $x107 $x97)) (or $x45 $x95))))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x145 (and $x124 $x150)))
 (let (($x155 (= $x145 true)))
 (let (($x161 (= $x155 true)))
 (let (($x158 (= $x161 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x92 (concat ?x102 (concat ?x62 ?x76)))))
 (let (($x47 (= ?x9 input.dst.llvm-%val)))
 (let (($x53 (= $x47 true)))
 (let (($x41 (= $x53 true)))
 (let (($x163 (and $x41 $x158)))
 (let (($x166 (and $x163 $x35)))
 (let (($x173 (and $x166 $x231)))
 (let (($x85 (and $x173 $x231)))
 (let (($x5 (and $x85 $x172)))
 (let (($x234 (and $x5 $x63)))
 (let (($x185 (and $x234 $x180)))
 (let (($x190 (and $x185 $x84)))
 (let (($x90 (and $x190 $x194)))
 (let (($x208 (and $x90 $x212)))
 (let (($x184 (and $x208 $x207)))
 (let (($x66 (and $x94 $x184)))
 (let (($x37 (and $x88 $x66)))
 (let (($x49 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x209 (and $x49 $x37)))
 (let (($x54 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x210 (and $x54 $x209)))
 (let (($x126 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x18 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x50 (or false (or false (and (and true (or $x8 $x18)) (or $x72 $x126))))))
 (let (($x36 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x50)))
 (let (($x52 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x50)))
 (let (($x214 (and $x52 $x210)))
 (let (($x219 (=> $x214 $x254)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b01010000000000000000000000000100)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b00101000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b01010000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b01010000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b00101000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b00101000000000000000000000000011)
(= input.spec-%tmpvar-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b01010000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x86ef7ef4)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff2f7ef4)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x05)
                     #xff2f7ef4
                     #xf0)
              #xff2f7ef5
              #x24)
       #xff2f7ef7
       #x86))
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xfafafafa)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x860524f0)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x05050505)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x05050505)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #xfafafafa)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xfafafafa)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xfafafafa)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff2f7ef7)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x86ef7ef7)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff2f7ef4)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x86ef7ef4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x84809e14)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa7417ffc)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x60606060)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x9f)
                     #x84809e16
                     #xfd)
              #x84809e17
              #x84)
       #x84809e14
       #x18))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x84fd9f18)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x9f9f9f9f)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x9f9f9f9f)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #x60606060)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #x60606060)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x60606060)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x84809e17)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa7417fff)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x84809e14)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa7417ffc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x100)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x78)))
 (let (($x222 (= input.spec-%var-l-0.2.0 ?x221)))
 (let (($x240 (= $x222 true)))
 (let (($x255 (= $x240 true)))
 (let (($x6 (= false false)))
 (let (($x198 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x218 (=> $x198 $x6)))
 (let (($x237 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x122 (not $x237)))
 (let (($x214 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x21 (= $x237 $x214)))
 (let (($x209 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x210 (= $x198 $x209)))
 (let (($x216 (and (and (and $x210 $x21) $x122) $x218)))
 (let (($x215 (= $x216 true)))
 (let (($x211 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x22 (= $x237 $x211)))
 (let (($x203 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x201 (= $x198 $x203)))
 (let (($x208 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x207 (and (and (and (and (not $x198) $x122) $x208) $x201) $x22)))
 (let (($x184 (= $x207 true)))
 (let (($x191 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x232 (=> $x191 $x6)))
 (let (($x58 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x89 (not $x58)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x88 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x88 (_ bv1 32))))
 (let (($x90 (= $x58 $x194)))
 (let (($x196 (= ?x88 (_ bv0 32))))
 (let (($x197 (= $x191 $x196)))
 (let (($x206 (and (and (and $x197 $x90) $x89) $x232)))
 (let (($x200 (= $x206 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x10 (concat ?x190 (concat ?x189 ?x227)))))
 (let (($x133 (= ?x195 input.dst.llvm-%l)))
 (let (($x94 (= $x133 true)))
 (let (($x193 (= $x94 true)))
 (let (($x63 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x113 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x183 (and true $x113)))
 (let (($x30 (and $x113 $x183)))
 (let (($x234 (and $x30 $x63)))
 (let (($x188 (= true $x234)))
 (let (($x38 (not $x65)))
 (let (($x186 (=> $x38 $x188)))
 (let (($x68 (= $x186 true)))
 (let (($x226 (= $x68 true)))
 (let (($x51 (= $x226 true)))
 (let (($x181 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x180 (and $x181 $x186)))
 (let (($x185 (= $x180 true)))
 (let (($x91 (= $x185 true)))
 (let (($x140 (= $x91 true)))
 (let (($x171 (= $x38 true)))
 (let (($x170 (= $x171 true)))
 (let (($x225 (= $x170 true)))
 (let (($x172 (= $x181 true)))
 (let (($x5 (= $x172 true)))
 (let (($x129 (= $x5 true)))
 (let (($x169 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x224 (= $x169 true)))
 (let (($x179 (= $x224 true)))
 (let (($x231 (= $x179 true)))
 (let ((?x119 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x119)))
 (let ((?x136 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x136)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x157)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x144 (and $x115 $x159)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x137 $x144)))
 (let (($x118 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x123 (and $x110 $x162)))
 (let (($x139 (not $x123)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x134 $x135)))
 (let (($x127 (and (not $x154) $x139)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x117 $x151)))
 (let (($x148 (not $x109)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x101 $x45)))
 (let (($x156 (and (not $x141) $x148)))
 (let (($x164 (and (and (and (and (and (and $x156 $x127) $x114) $x118) $x160) $x153) $x147)))
 (let (($x167 (and $x164 $x150)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x116 (or false (or false (and (and true (or $x80 $x98)) (or $x64 $x149))))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x116)))
 (let (($x165 (and $x146 $x167)))
 (let (($x168 (= $x165 true)))
 (let (($x35 (= $x168 true)))
 (let (($x166 (= $x35 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x93 (concat ?x47 (concat ?x32 ?x62)))))
 (let (($x103 (= ?x99 input.dst.llvm-%val)))
 (let (($x107 (= $x103 true)))
 (let (($x97 (= $x107 true)))
 (let (($x70 (and $x97 $x166)))
 (let (($x173 (and $x70 $x231)))
 (let (($x79 (and $x173 $x129)))
 (let (($x29 (and $x79 $x129)))
 (let (($x174 (and $x29 $x225)))
 (let (($x235 (and $x174 $x140)))
 (let (($x187 (and $x235 $x51)))
 (let (($x192 (and $x187 $x193)))
 (let (($x229 (and $x192 $x200)))
 (let (($x66 (and $x229 $x184)))
 (let (($x217 (and $x66 $x215)))
 (let (($x28 (and $x58 $x217)))
 (let (($x131 (and $x6 $x28)))
 (let (($x59 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x16 (and $x59 $x131)))
 (let (($x49 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x230 (and $x49 $x16)))
 (let (($x25 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x13 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x24 (or false (or false (and (and true (or $x73 $x13)) (or $x31 $x25))))))
 (let (($x54 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x24)))
 (let (($x61 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x24)))
 (let (($x254 (and $x61 $x230)))
 (let (($x241 (=> $x254 $x255)))
 (not $x241))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x100)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x78)))
 (let (($x222 (= input.spec-%var-l-0.2.0 ?x221)))
 (let (($x240 (= $x222 true)))
 (let (($x255 (= $x240 true)))
 (let (($x6 (= false false)))
 (let (($x198 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x218 (=> $x198 $x6)))
 (let (($x237 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x122 (not $x237)))
 (let (($x214 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x21 (= $x237 $x214)))
 (let (($x209 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x210 (= $x198 $x209)))
 (let (($x216 (and (and (and $x210 $x21) $x122) $x218)))
 (let (($x215 (= $x216 true)))
 (let (($x211 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x22 (= $x237 $x211)))
 (let (($x203 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x201 (= $x198 $x203)))
 (let (($x208 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x207 (and (and (and (and (not $x198) $x122) $x208) $x201) $x22)))
 (let (($x184 (= $x207 true)))
 (let (($x191 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x232 (=> $x191 $x6)))
 (let (($x58 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x89 (not $x58)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x88 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x88 (_ bv1 32))))
 (let (($x90 (= $x58 $x194)))
 (let (($x196 (= ?x88 (_ bv0 32))))
 (let (($x197 (= $x191 $x196)))
 (let (($x206 (and (and (and $x197 $x90) $x89) $x232)))
 (let (($x200 (= $x206 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x10 (concat ?x190 (concat ?x189 ?x227)))))
 (let (($x133 (= ?x195 input.dst.llvm-%l)))
 (let (($x94 (= $x133 true)))
 (let (($x193 (= $x94 true)))
 (let (($x63 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x113 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x183 (and true $x113)))
 (let (($x30 (and $x113 $x183)))
 (let (($x234 (and $x30 $x63)))
 (let (($x188 (= true $x234)))
 (let (($x38 (not $x65)))
 (let (($x186 (=> $x38 $x188)))
 (let (($x68 (= $x186 true)))
 (let (($x226 (= $x68 true)))
 (let (($x51 (= $x226 true)))
 (let (($x181 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x180 (and $x181 $x186)))
 (let (($x185 (= $x180 true)))
 (let (($x91 (= $x185 true)))
 (let (($x140 (= $x91 true)))
 (let (($x171 (= $x38 true)))
 (let (($x170 (= $x171 true)))
 (let (($x225 (= $x170 true)))
 (let (($x172 (= $x181 true)))
 (let (($x5 (= $x172 true)))
 (let (($x129 (= $x5 true)))
 (let (($x169 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x224 (= $x169 true)))
 (let (($x179 (= $x224 true)))
 (let (($x231 (= $x179 true)))
 (let ((?x119 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x119)))
 (let ((?x136 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x136)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x157)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x144 (and $x115 $x159)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x137 $x144)))
 (let (($x118 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x123 (and $x110 $x162)))
 (let (($x139 (not $x123)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x134 $x135)))
 (let (($x127 (and (not $x154) $x139)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x117 $x151)))
 (let (($x148 (not $x109)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x101 $x45)))
 (let (($x156 (and (not $x141) $x148)))
 (let (($x164 (and (and (and (and (and (and $x156 $x127) $x114) $x118) $x160) $x153) $x147)))
 (let (($x167 (and $x164 $x150)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x116 (or false (or false (and (and true (or $x80 $x98)) (or $x64 $x149))))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x116)))
 (let (($x165 (and $x146 $x167)))
 (let (($x168 (= $x165 true)))
 (let (($x35 (= $x168 true)))
 (let (($x166 (= $x35 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x93 (concat ?x47 (concat ?x32 ?x62)))))
 (let (($x103 (= ?x99 input.dst.llvm-%val)))
 (let (($x107 (= $x103 true)))
 (let (($x97 (= $x107 true)))
 (let (($x70 (and $x97 $x166)))
 (let (($x173 (and $x70 $x231)))
 (let (($x79 (and $x173 $x129)))
 (let (($x29 (and $x79 $x129)))
 (let (($x174 (and $x29 $x225)))
 (let (($x235 (and $x174 $x140)))
 (let (($x187 (and $x235 $x51)))
 (let (($x192 (and $x187 $x193)))
 (let (($x229 (and $x192 $x200)))
 (let (($x66 (and $x229 $x184)))
 (let (($x217 (and $x66 $x215)))
 (let (($x28 (and $x58 $x217)))
 (let (($x131 (and $x6 $x28)))
 (let (($x59 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x16 (and $x59 $x131)))
 (let (($x49 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x230 (and $x49 $x16)))
 (let (($x25 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x13 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x24 (or false (or false (and (and true (or $x73 $x13)) (or $x31 $x25))))))
 (let (($x54 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x24)))
 (let (($x61 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x24)))
 (let (($x254 (and $x61 $x230)))
 (let (($x241 (=> $x254 $x255)))
 (not $x241))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x199)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x213)))
 (let (($x96 (= input.spec-%var-l-0.2.0 ?x208)))
 (let (($x339 (= $x96 true)))
 (let (($x340 (= $x339 true)))
 (let (($x324 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x323 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x325 (= $x323 $x324)))
 (let (($x249 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x28 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x314 (and $x28 $x249)))
 (let (($x81 (=> $x314 $x325)))
 (let (($x320 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x318 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x318 $x320)))
 (let (($x322 (=> $x314 $x321)))
 (let (($x315 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x316 (=> $x314 $x315)))
 (let (($x313 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x305 (= $x249 $x313)))
 (let (($x306 (=> $x28 $x305)))
 (let (($x41 (= false false)))
 (let (($x44 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x278 (and $x28 $x44)))
 (let (($x279 (=> $x278 $x41)))
 (let (($x302 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x303 (= $x44 $x302)))
 (let (($x304 (=> $x28 $x303)))
 (let (($x292 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x312 (=> $x28 $x292)))
 (let (($x201 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x297 (=> $x201 $x41)))
 (let (($x289 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x290 (= $x28 $x289)))
 (let (($x288 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x300 (= $x201 $x288)))
 (let (($x328 (and (and (and (and (and (and $x300 $x290) $x297) $x312) $x304) $x279) $x306)))
 (let (($x331 (and (and (and $x328 $x316) $x322) $x81)))
 (let (($x332 (= $x331 true)))
 (let (($x280 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x281 (= $x249 $x280)))
 (let (($x27 (=> $x28 $x281)))
 (let (($x277 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x298 (= $x44 $x277)))
 (let (($x311 (=> $x28 $x298)))
 (let (($x309 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x310 (=> $x28 $x309)))
 (let (($x274 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x296 (= $x28 $x274)))
 (let (($x272 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x273 (= $x201 $x272)))
 (let (($x295 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x284 (and (and (and (and (and (and $x295 $x273) $x296) $x297) $x310) $x311) $x279)))
 (let (($x285 (and $x284 $x27)))
 (let (($x286 (= $x285 true)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x207 (concat ?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x214 (concat ?x210 (concat ?x66 ?x207))))
 (let ((?x104 (bvadd ?x214 (_ bv4 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x242))))
 (let (($x267 (= (_ bv0 32) ?x246)))
 (let ((?x247 (ite $x267 (_ bv0 32) (_ bv1 32))))
 (let (($x294 (bvuge ?x247 (_ bv1 32))))
 (let (($x250 (= $x249 $x294)))
 (let (($x9 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x254 (and $x9 $x28)))
 (let (($x259 (=> $x254 $x250)))
 (let (($x293 (= ?x247 (_ bv0 32))))
 (let (($x248 (= $x44 $x293)))
 (let (($x258 (=> $x254 $x248)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x83))))
 (let (($x255 (= input.spec-%var-l-0.2.1.2.0 ?x240)))
 (let (($x241 (=> $x254 $x255)))
 (let (($x21 (= (_ bv0 32) ?x214)))
 (let ((?x19 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x19 (_ bv1 32))))
 (let (($x16 (= $x28 $x131)))
 (let (($x230 (=> $x9 $x16)))
 (let (($x215 (and $x9 $x201)))
 (let (($x217 (=> $x215 $x41)))
 (let (($x238 (= ?x19 (_ bv0 32))))
 (let (($x218 (= $x201 $x238)))
 (let (($x216 (=> $x9 $x218)))
 (let (($x202 (=> $x9 $x96)))
 (let (($x46 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x200 (=> $x46 $x41)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x89 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x89 (_ bv1 32))))
 (let (($x206 (= $x9 $x232)))
 (let (($x40 (= ?x89 (_ bv0 32))))
 (let (($x6 (= $x46 $x40)))
 (let (($x269 (and (and (and (and (and (and $x6 $x206) $x200) $x202) $x216) $x217) $x230)))
 (let (($x263 (and (and (and $x269 $x241) $x258) $x259)))
 (let (($x270 (= $x263 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x196 (concat ?x88 (concat ?x192 (concat ?x133 ?x87)))))
 (let (($x197 (= ?x196 input.dst.llvm-%l)))
 (let (($x58 (= $x197 true)))
 (let (($x194 (= $x58 true)))
 (let (($x140 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x188 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x186 (and true $x188)))
 (let (($x180 (and $x188 $x186)))
 (let (($x235 (and $x180 $x140)))
 (let (($x68 (= true $x235)))
 (let (($x38 (not $x65)))
 (let (($x226 (=> $x38 $x68)))
 (let (($x190 (= $x226 true)))
 (let (($x128 (= $x190 true)))
 (let (($x189 (= $x128 true)))
 (let (($x170 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x51 (and $x170 $x226)))
 (let (($x187 (= $x51 true)))
 (let (($x228 (= $x187 true)))
 (let (($x10 (= $x228 true)))
 (let (($x178 (= $x38 true)))
 (let (($x113 (= $x178 true)))
 (let (($x183 (= $x113 true)))
 (let (($x225 (= $x170 true)))
 (let (($x174 (= $x225 true)))
 (let (($x175 (= $x174 true)))
 (let (($x181 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x172 (= $x181 true)))
 (let (($x5 (= $x172 true)))
 (let (($x129 (= $x5 true)))
 (let ((?x150 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x150)))
 (let ((?x164 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x164)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x136)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x158)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x160 $x152)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x144 $x153)))
 (let (($x159 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x114 $x155)))
 (let (($x118 (not $x125)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x139 $x127)))
 (let (($x137 (and (not $x145) $x118)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x135 $x154)))
 (let (($x110 (not $x14)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x17 $x64)))
 (let (($x123 (and (not $x134) $x110)))
 (let (($x223 (and (and (and (and (and (and $x123 $x137) $x115) $x159) $x163) $x147) $x119)))
 (let (($x169 (and $x223 $x167)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x109 (or false (or false (and (and true (or $x143 $x116)) (or $x45 $x141))))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x109)))
 (let (($x224 (and $x156 $x169)))
 (let (($x179 (= $x224 true)))
 (let (($x231 (= $x179 true)))
 (let (($x173 (= $x231 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x95 (concat ?x103 (concat ?x67 ?x32)))))
 (let (($x111 (= ?x105 input.dst.llvm-%val)))
 (let (($x80 (= $x111 true)))
 (let (($x98 (= $x80 true)))
 (let (($x85 (and $x98 $x173)))
 (let (($x79 (and $x85 $x129)))
 (let (($x233 (and $x79 $x175)))
 (let (($x23 (and $x233 $x175)))
 (let (($x30 (and $x23 $x183)))
 (let (($x84 (and $x30 $x10)))
 (let (($x227 (and $x84 $x189)))
 (let (($x90 (and $x227 $x194)))
 (let (($x264 (and $x90 $x270)))
 (let (($x287 (and $x264 $x286)))
 (let (($x333 (and $x287 $x332)))
 (let (($x334 (and $x9 $x333)))
 (let (($x335 (and $x41 $x334)))
 (let (($x56 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x336 (and $x56 $x335)))
 (let (($x59 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x337 (and $x59 $x336)))
 (let (($x52 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x126 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x48 (or false (or false (and (and true (or $x75 $x126)) (or $x36 $x52))))))
 (let (($x49 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x48)))
 (let (($x42 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x48)))
 (let (($x338 (and $x42 $x337)))
 (let (($x341 (=> $x338 $x340)))
 (not $x341))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x199)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x213)))
 (let (($x96 (= input.spec-%var-l-0.2.0 ?x208)))
 (let (($x339 (= $x96 true)))
 (let (($x340 (= $x339 true)))
 (let (($x324 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x323 (bvuge input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x325 (= $x323 $x324)))
 (let (($x249 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x28 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x314 (and $x28 $x249)))
 (let (($x81 (=> $x314 $x325)))
 (let (($x320 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x318 (= input.spec-%var-l-0.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x318 $x320)))
 (let (($x322 (=> $x314 $x321)))
 (let (($x315 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.1.2.0)))
 (let (($x316 (=> $x314 $x315)))
 (let (($x313 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x305 (= $x249 $x313)))
 (let (($x306 (=> $x28 $x305)))
 (let (($x41 (= false false)))
 (let (($x44 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x278 (and $x28 $x44)))
 (let (($x279 (=> $x278 $x41)))
 (let (($x302 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x303 (= $x44 $x302)))
 (let (($x304 (=> $x28 $x303)))
 (let (($x292 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x312 (=> $x28 $x292)))
 (let (($x201 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x297 (=> $x201 $x41)))
 (let (($x289 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x290 (= $x28 $x289)))
 (let (($x288 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x300 (= $x201 $x288)))
 (let (($x328 (and (and (and (and (and (and $x300 $x290) $x297) $x312) $x304) $x279) $x306)))
 (let (($x331 (and (and (and $x328 $x316) $x322) $x81)))
 (let (($x332 (= $x331 true)))
 (let (($x280 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x281 (= $x249 $x280)))
 (let (($x27 (=> $x28 $x281)))
 (let (($x277 (= input.spec-%var-node-0.L2%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x298 (= $x44 $x277)))
 (let (($x311 (=> $x28 $x298)))
 (let (($x309 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L2%9%bbentry.1.2.0)))
 (let (($x310 (=> $x28 $x309)))
 (let (($x274 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x296 (= $x28 $x274)))
 (let (($x272 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x273 (= $x201 $x272)))
 (let (($x295 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x284 (and (and (and (and (and (and $x295 $x273) $x296) $x297) $x310) $x311) $x279)))
 (let (($x285 (and $x284 $x27)))
 (let (($x286 (= $x285 true)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x207 (concat ?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x214 (concat ?x210 (concat ?x66 ?x207))))
 (let ((?x104 (bvadd ?x214 (_ bv4 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x242))))
 (let (($x267 (= (_ bv0 32) ?x246)))
 (let ((?x247 (ite $x267 (_ bv0 32) (_ bv1 32))))
 (let (($x294 (bvuge ?x247 (_ bv1 32))))
 (let (($x250 (= $x249 $x294)))
 (let (($x9 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x254 (and $x9 $x28)))
 (let (($x259 (=> $x254 $x250)))
 (let (($x293 (= ?x247 (_ bv0 32))))
 (let (($x248 (= $x44 $x293)))
 (let (($x258 (=> $x254 $x248)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x83))))
 (let (($x255 (= input.spec-%var-l-0.2.1.2.0 ?x240)))
 (let (($x241 (=> $x254 $x255)))
 (let (($x21 (= (_ bv0 32) ?x214)))
 (let ((?x19 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x19 (_ bv1 32))))
 (let (($x16 (= $x28 $x131)))
 (let (($x230 (=> $x9 $x16)))
 (let (($x215 (and $x9 $x201)))
 (let (($x217 (=> $x215 $x41)))
 (let (($x238 (= ?x19 (_ bv0 32))))
 (let (($x218 (= $x201 $x238)))
 (let (($x216 (=> $x9 $x218)))
 (let (($x202 (=> $x9 $x96)))
 (let (($x46 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x200 (=> $x46 $x41)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x89 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x89 (_ bv1 32))))
 (let (($x206 (= $x9 $x232)))
 (let (($x40 (= ?x89 (_ bv0 32))))
 (let (($x6 (= $x46 $x40)))
 (let (($x269 (and (and (and (and (and (and $x6 $x206) $x200) $x202) $x216) $x217) $x230)))
 (let (($x263 (and (and (and $x269 $x241) $x258) $x259)))
 (let (($x270 (= $x263 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x196 (concat ?x88 (concat ?x192 (concat ?x133 ?x87)))))
 (let (($x197 (= ?x196 input.dst.llvm-%l)))
 (let (($x58 (= $x197 true)))
 (let (($x194 (= $x58 true)))
 (let (($x140 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x188 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x186 (and true $x188)))
 (let (($x180 (and $x188 $x186)))
 (let (($x235 (and $x180 $x140)))
 (let (($x68 (= true $x235)))
 (let (($x38 (not $x65)))
 (let (($x226 (=> $x38 $x68)))
 (let (($x190 (= $x226 true)))
 (let (($x128 (= $x190 true)))
 (let (($x189 (= $x128 true)))
 (let (($x170 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x51 (and $x170 $x226)))
 (let (($x187 (= $x51 true)))
 (let (($x228 (= $x187 true)))
 (let (($x10 (= $x228 true)))
 (let (($x178 (= $x38 true)))
 (let (($x113 (= $x178 true)))
 (let (($x183 (= $x113 true)))
 (let (($x225 (= $x170 true)))
 (let (($x174 (= $x225 true)))
 (let (($x175 (= $x174 true)))
 (let (($x181 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x172 (= $x181 true)))
 (let (($x5 (= $x172 true)))
 (let (($x129 (= $x5 true)))
 (let ((?x150 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x150)))
 (let ((?x164 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x164)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x136)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x158)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x160 $x152)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x144 $x153)))
 (let (($x159 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x114 $x155)))
 (let (($x118 (not $x125)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x139 $x127)))
 (let (($x137 (and (not $x145) $x118)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x135 $x154)))
 (let (($x110 (not $x14)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x17 $x64)))
 (let (($x123 (and (not $x134) $x110)))
 (let (($x223 (and (and (and (and (and (and $x123 $x137) $x115) $x159) $x163) $x147) $x119)))
 (let (($x169 (and $x223 $x167)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x109 (or false (or false (and (and true (or $x143 $x116)) (or $x45 $x141))))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x109)))
 (let (($x224 (and $x156 $x169)))
 (let (($x179 (= $x224 true)))
 (let (($x231 (= $x179 true)))
 (let (($x173 (= $x231 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x95 (concat ?x103 (concat ?x67 ?x32)))))
 (let (($x111 (= ?x105 input.dst.llvm-%val)))
 (let (($x80 (= $x111 true)))
 (let (($x98 (= $x80 true)))
 (let (($x85 (and $x98 $x173)))
 (let (($x79 (and $x85 $x129)))
 (let (($x233 (and $x79 $x175)))
 (let (($x23 (and $x233 $x175)))
 (let (($x30 (and $x23 $x183)))
 (let (($x84 (and $x30 $x10)))
 (let (($x227 (and $x84 $x189)))
 (let (($x90 (and $x227 $x194)))
 (let (($x264 (and $x90 $x270)))
 (let (($x287 (and $x264 $x286)))
 (let (($x333 (and $x287 $x332)))
 (let (($x334 (and $x9 $x333)))
 (let (($x335 (and $x41 $x334)))
 (let (($x56 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x336 (and $x56 $x335)))
 (let (($x59 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x337 (and $x59 $x336)))
 (let (($x52 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x126 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x48 (or false (or false (and (and true (or $x75 $x126)) (or $x36 $x52))))))
 (let (($x49 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x48)))
 (let (($x42 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x48)))
 (let (($x338 (and $x42 $x337)))
 (let (($x341 (=> $x338 $x340)))
 (not $x341))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (= input.spec-%var-l-0.2.0 input.dst.llvm-%val)))
 (let (($x207 (= $x204 true)))
 (let (($x37 (= $x207 true)))
 (let (($x202 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x96 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x268 (= $x96 $x202)))
 (let (($x213 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x229 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x208 (= $x229 $x213)))
 (let (($x203 (and $x208 $x268)))
 (let (($x201 (= $x203 true)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x251 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x252 (bvuge ?x251 (_ bv1 32))))
 (let (($x95 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x212 (= $x95 $x252)))
 (let (($x41 (= ?x251 (_ bv0 32))))
 (let (($x206 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x200 (= $x206 $x41)))
 (let (($x237 (and $x200 $x212)))
 (let (($x122 (= $x237 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x46 (concat ?x194 (concat ?x196 ?x94)))))
 (let (($x40 (= ?x89 input.dst.llvm-%val)))
 (let (($x6 (= $x40 true)))
 (let (($x9 (= $x6 true)))
 (let (($x88 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x193 (= $x88 true)))
 (let (($x192 (= $x193 true)))
 (let (($x195 (= $x192 true)))
 (let (($x175 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x233 (= $x175 true)))
 (let (($x23 (= $x233 true)))
 (let (($x178 (= $x23 true)))
 (let (($x185 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x63 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x234 (and true $x63)))
 (let (($x188 (and $x63 $x234)))
 (let (($x91 (and $x188 $x185)))
 (let (($x140 (= true $x91)))
 (let (($x38 (not $x7)))
 (let (($x235 (=> $x38 $x140)))
 (let (($x10 (= $x235 true)))
 (let (($x84 (= $x10 true)))
 (let (($x190 (= $x84 true)))
 (let (($x68 (and $x175 $x235)))
 (let (($x226 (= $x68 true)))
 (let (($x51 (= $x226 true)))
 (let (($x187 (= $x51 true)))
 (let ((?x224 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x224)))
 (let ((?x167 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x167)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x223)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x164 (and $x136 $x70)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x166 $x164)))
 (let (($x163 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x157 $x159)))
 (let (($x144 (not $x35)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x165 $x115)))
 (let (($x158 (and (not $x168) $x144)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x161 $x114)))
 (let (($x125 (not $x155)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x141 $x121)))
 (let (($x137 (and (not $x145) $x125)))
 (let (($x172 (and (and (and (and (and (and $x137 $x158) $x153) $x163) $x119) $x150) $x169)))
 (let (($x5 (and $x172 $x179)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x109)))
 (let (($x123 (or false (or false (and (and true (or $x156 $x17)) (or $x162 $x135))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x123)))
 (let (($x129 (and $x127 $x5)))
 (let (($x79 (= $x129 true)))
 (let (($x29 (= $x79 true)))
 (let (($x171 (= $x29 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x148 (concat ?x98 (concat ?x105 ?x53)))))
 (let (($x143 (= ?x112 input.dst.llvm-%l)))
 (let (($x116 (= $x143 true)))
 (let (($x146 (= $x116 true)))
 (let (($x99 (= $x7 true)))
 (let (($x106 (= $x99 true)))
 (let (($x103 (= $x106 true)))
 (let (($x101 (and $x103 $x146)))
 (let (($x170 (and $x101 $x171)))
 (let (($x113 (and $x170 $x178)))
 (let (($x228 (and $x113 $x187)))
 (let (($x128 (and $x228 $x190)))
 (let (($x189 (and $x128 $x178)))
 (let (($x133 (and $x189 $x195)))
 (let (($x232 (and $x133 $x9)))
 (let (($x205 (and $x232 $x122)))
 (let (($x209 (and $x205 $x201)))
 (let (($x210 (and $x95 $x209)))
 (let (($x76 (= false false)))
 (let (($x184 (and $x76 $x210)))
 (let (($x39 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x66 (and $x39 $x184)))
 (let (($x57 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x211 (and $x57 $x66)))
 (let (($x54 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x86 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x42 (or false (or false (and (and true (or $x31 $x86)) (or $x24 $x54))))))
 (let (($x60 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x42)))
 (let (($x18 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x42)))
 (let (($x22 (and $x18 $x211)))
 (let (($x214 (=> $x22 $x37)))
 (not $x214)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (= input.spec-%var-l-0.2.0 input.dst.llvm-%val)))
 (let (($x207 (= $x204 true)))
 (let (($x37 (= $x207 true)))
 (let (($x202 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x96 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x268 (= $x96 $x202)))
 (let (($x213 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x229 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x208 (= $x229 $x213)))
 (let (($x203 (and $x208 $x268)))
 (let (($x201 (= $x203 true)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x251 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x252 (bvuge ?x251 (_ bv1 32))))
 (let (($x95 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x212 (= $x95 $x252)))
 (let (($x41 (= ?x251 (_ bv0 32))))
 (let (($x206 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x200 (= $x206 $x41)))
 (let (($x237 (and $x200 $x212)))
 (let (($x122 (= $x237 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x46 (concat ?x194 (concat ?x196 ?x94)))))
 (let (($x40 (= ?x89 input.dst.llvm-%val)))
 (let (($x6 (= $x40 true)))
 (let (($x9 (= $x6 true)))
 (let (($x88 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x193 (= $x88 true)))
 (let (($x192 (= $x193 true)))
 (let (($x195 (= $x192 true)))
 (let (($x175 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x233 (= $x175 true)))
 (let (($x23 (= $x233 true)))
 (let (($x178 (= $x23 true)))
 (let (($x185 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x63 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x234 (and true $x63)))
 (let (($x188 (and $x63 $x234)))
 (let (($x91 (and $x188 $x185)))
 (let (($x140 (= true $x91)))
 (let (($x38 (not $x7)))
 (let (($x235 (=> $x38 $x140)))
 (let (($x10 (= $x235 true)))
 (let (($x84 (= $x10 true)))
 (let (($x190 (= $x84 true)))
 (let (($x68 (and $x175 $x235)))
 (let (($x226 (= $x68 true)))
 (let (($x51 (= $x226 true)))
 (let (($x187 (= $x51 true)))
 (let ((?x224 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x224)))
 (let ((?x167 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x167)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x223)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x164 (and $x136 $x70)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x166 $x164)))
 (let (($x163 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x157 $x159)))
 (let (($x144 (not $x35)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x165 $x115)))
 (let (($x158 (and (not $x168) $x144)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x161 $x114)))
 (let (($x125 (not $x155)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x141 $x121)))
 (let (($x137 (and (not $x145) $x125)))
 (let (($x172 (and (and (and (and (and (and $x137 $x158) $x153) $x163) $x119) $x150) $x169)))
 (let (($x5 (and $x172 $x179)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x109)))
 (let (($x123 (or false (or false (and (and true (or $x156 $x17)) (or $x162 $x135))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x123)))
 (let (($x129 (and $x127 $x5)))
 (let (($x79 (= $x129 true)))
 (let (($x29 (= $x79 true)))
 (let (($x171 (= $x29 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x148 (concat ?x98 (concat ?x105 ?x53)))))
 (let (($x143 (= ?x112 input.dst.llvm-%l)))
 (let (($x116 (= $x143 true)))
 (let (($x146 (= $x116 true)))
 (let (($x99 (= $x7 true)))
 (let (($x106 (= $x99 true)))
 (let (($x103 (= $x106 true)))
 (let (($x101 (and $x103 $x146)))
 (let (($x170 (and $x101 $x171)))
 (let (($x113 (and $x170 $x178)))
 (let (($x228 (and $x113 $x187)))
 (let (($x128 (and $x228 $x190)))
 (let (($x189 (and $x128 $x178)))
 (let (($x133 (and $x189 $x195)))
 (let (($x232 (and $x133 $x9)))
 (let (($x205 (and $x232 $x122)))
 (let (($x209 (and $x205 $x201)))
 (let (($x210 (and $x95 $x209)))
 (let (($x76 (= false false)))
 (let (($x184 (and $x76 $x210)))
 (let (($x39 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x66 (and $x39 $x184)))
 (let (($x57 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x211 (and $x57 $x66)))
 (let (($x54 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x86 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x42 (or false (or false (and (and true (or $x31 $x86)) (or $x24 $x54))))))
 (let (($x60 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x42)))
 (let (($x18 (=> (and $x38 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x42)))
 (let (($x22 (and $x18 $x211)))
 (let (($x214 (=> $x22 $x37)))
 (not $x214)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x67)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x238)))
 (let (($x253 (= input.spec-%var-val-0 ?x216)))
 (let (($x215 (= $x253 true)))
 (let (($x217 (= $x215 true)))
 (let (($x210 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x209 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x184 (= $x209 $x210)))
 (let (($x203 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x202 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x201 (= $x202 $x203)))
 (let (($x66 (and $x201 $x184)))
 (let (($x211 (= $x66 true)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x212 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x212 (_ bv1 32))))
 (let (($x205 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x229 (= $x205 $x198)))
 (let (($x237 (= ?x212 (_ bv0 32))))
 (let (($x103 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x122 (= $x103 $x237)))
 (let (($x199 (and $x122 $x229)))
 (let (($x213 (= $x199 true)))
 (let ((?x197 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x251 (concat ?x206 (concat ?x9 (concat ?x89 ?x197)))))
 (let (($x41 (= ?x251 input.dst.llvm-%l)))
 (let (($x200 (= $x41 true)))
 (let (($x95 (= $x200 true)))
 (let (($x189 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x228 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x10 (and true $x228)))
 (let (($x84 (and $x228 $x10)))
 (let (($x191 (and $x84 $x189)))
 (let (($x88 (= true $x191)))
 (let (($x34 (not $x65)))
 (let (($x193 (=> $x34 $x88)))
 (let (($x58 (= $x193 true)))
 (let (($x194 (= $x58 true)))
 (let (($x92 (= $x194 true)))
 (let (($x23 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x192 (and $x23 $x193)))
 (let (($x195 (= $x192 true)))
 (let (($x133 (= $x195 true)))
 (let (($x93 (= $x133 true)))
 (let (($x180 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x185 (= $x180 true)))
 (let (($x91 (= $x185 true)))
 (let (($x140 (= $x91 true)))
 (let (($x177 (= $x34 true)))
 (let (($x63 (= $x177 true)))
 (let (($x234 (= $x63 true)))
 (let (($x178 (= $x23 true)))
 (let (($x113 (= $x178 true)))
 (let (($x30 (= $x113 true)))
 (let ((?x181 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x181)))
 (let ((?x223 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x223)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x70 (and $x166 $x147)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x85 $x70)))
 (let (($x163 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x159 $x35)))
 (let (($x158 (not $x144)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x168 $x160)))
 (let (($x152 (and (not $x157) $x158)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x114 $x155)))
 (let (($x137 (not $x125)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x139 $x109)))
 (let (($x115 (and (not $x161) $x137)))
 (let (($x129 (and (and (and (and (and (and $x115 $x152) $x153) $x163) $x164) $x108) $x150)))
 (let (($x79 (and $x129 $x167)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x121 (or false (or false (and (and true (or $x134 $x162)) (or $x14 $x110))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x121)))
 (let (($x29 (and $x118 $x79)))
 (let (($x171 (= $x29 true)))
 (let (($x170 (= $x171 true)))
 (let (($x225 (= $x170 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x112 (concat ?x53 (concat ?x80 ?x148)))))
 (let (($x146 (= ?x143 input.dst.llvm-%val)))
 (let (($x101 (= $x146 true)))
 (let (($x117 (= $x101 true)))
 (let (($x174 (and $x117 $x225)))
 (let (($x183 (and $x174 $x30)))
 (let (($x176 (and $x183 $x30)))
 (let (($x188 (and $x176 $x234)))
 (let (($x235 (and $x188 $x140)))
 (let (($x46 (and $x235 $x93)))
 (let (($x196 (and $x46 $x92)))
 (let (($x252 (and $x196 $x95)))
 (let (($x208 (and $x252 $x213)))
 (let (($x22 (and $x208 $x211)))
 (let (($x204 (and $x103 $x22)))
 (let (($x99 (= false false)))
 (let (($x207 (and $x99 $x204)))
 (let (($x76 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x37 (and $x76 $x207)))
 (let (($x56 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x214 (and $x56 $x37)))
 (let (($x48 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x36 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x18 (or false (or false (and (and true (or $x25 $x36)) (or $x61 $x48))))))
 (let (($x59 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x73 (=> (and $x34 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x21 (and $x73 $x214)))
 (let (($x260 (=> $x21 $x217)))
 (not $x260))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x67)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x238)))
 (let (($x253 (= input.spec-%var-val-0 ?x216)))
 (let (($x215 (= $x253 true)))
 (let (($x217 (= $x215 true)))
 (let (($x210 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x209 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x184 (= $x209 $x210)))
 (let (($x203 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x202 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x201 (= $x202 $x203)))
 (let (($x66 (and $x201 $x184)))
 (let (($x211 (= $x66 true)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x212 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x212 (_ bv1 32))))
 (let (($x205 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x229 (= $x205 $x198)))
 (let (($x237 (= ?x212 (_ bv0 32))))
 (let (($x103 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x122 (= $x103 $x237)))
 (let (($x199 (and $x122 $x229)))
 (let (($x213 (= $x199 true)))
 (let ((?x197 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x251 (concat ?x206 (concat ?x9 (concat ?x89 ?x197)))))
 (let (($x41 (= ?x251 input.dst.llvm-%l)))
 (let (($x200 (= $x41 true)))
 (let (($x95 (= $x200 true)))
 (let (($x189 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x228 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x10 (and true $x228)))
 (let (($x84 (and $x228 $x10)))
 (let (($x191 (and $x84 $x189)))
 (let (($x88 (= true $x191)))
 (let (($x34 (not $x65)))
 (let (($x193 (=> $x34 $x88)))
 (let (($x58 (= $x193 true)))
 (let (($x194 (= $x58 true)))
 (let (($x92 (= $x194 true)))
 (let (($x23 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x192 (and $x23 $x193)))
 (let (($x195 (= $x192 true)))
 (let (($x133 (= $x195 true)))
 (let (($x93 (= $x133 true)))
 (let (($x180 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x185 (= $x180 true)))
 (let (($x91 (= $x185 true)))
 (let (($x140 (= $x91 true)))
 (let (($x177 (= $x34 true)))
 (let (($x63 (= $x177 true)))
 (let (($x234 (= $x63 true)))
 (let (($x178 (= $x23 true)))
 (let (($x113 (= $x178 true)))
 (let (($x30 (= $x113 true)))
 (let ((?x181 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x181)))
 (let ((?x223 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x223)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x70 (and $x166 $x147)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x85 $x70)))
 (let (($x163 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x159 $x35)))
 (let (($x158 (not $x144)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x168 $x160)))
 (let (($x152 (and (not $x157) $x158)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x114 $x155)))
 (let (($x137 (not $x125)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x139 $x109)))
 (let (($x115 (and (not $x161) $x137)))
 (let (($x129 (and (and (and (and (and (and $x115 $x152) $x153) $x163) $x164) $x108) $x150)))
 (let (($x79 (and $x129 $x167)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x121 (or false (or false (and (and true (or $x134 $x162)) (or $x14 $x110))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x121)))
 (let (($x29 (and $x118 $x79)))
 (let (($x171 (= $x29 true)))
 (let (($x170 (= $x171 true)))
 (let (($x225 (= $x170 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x112 (concat ?x53 (concat ?x80 ?x148)))))
 (let (($x146 (= ?x143 input.dst.llvm-%val)))
 (let (($x101 (= $x146 true)))
 (let (($x117 (= $x101 true)))
 (let (($x174 (and $x117 $x225)))
 (let (($x183 (and $x174 $x30)))
 (let (($x176 (and $x183 $x30)))
 (let (($x188 (and $x176 $x234)))
 (let (($x235 (and $x188 $x140)))
 (let (($x46 (and $x235 $x93)))
 (let (($x196 (and $x46 $x92)))
 (let (($x252 (and $x196 $x95)))
 (let (($x208 (and $x252 $x213)))
 (let (($x22 (and $x208 $x211)))
 (let (($x204 (and $x103 $x22)))
 (let (($x99 (= false false)))
 (let (($x207 (and $x99 $x204)))
 (let (($x76 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x37 (and $x76 $x207)))
 (let (($x56 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x214 (and $x56 $x37)))
 (let (($x48 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x36 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x18 (or false (or false (and (and true (or $x25 $x36)) (or $x61 $x48))))))
 (let (($x59 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x73 (=> (and $x34 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x21 (and $x73 $x214)))
 (let (($x260 (=> $x21 $x217)))
 (not $x260))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x34 (not $x65)))
 (let (($x200 (or $x65 $x34)))
 (let (($x95 (= $x200 true)))
 (let (($x252 (= $x95 true)))
 (let (($x6 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x206 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x9 (= $x206 $x6)))
 (let (($x196 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x97 (= $x194 $x196)))
 (let (($x90 (and $x97 $x9)))
 (let (($x89 (= $x90 true)))
 (let ((?x189 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x189 (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x195 (= $x193 $x192)))
 (let (($x191 (= ?x189 (_ bv0 32))))
 (let (($x128 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x88 (= $x128 $x191)))
 (let (($x133 (and $x88 $x195)))
 (let (($x93 (= $x133 true)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x68 (concat ?x140 (concat ?x180 ?x188)))))
 (let (($x187 (= ?x51 input.dst.llvm-%l)))
 (let (($x228 (= $x187 true)))
 (let (($x10 (= $x228 true)))
 (let (($x30 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x183 (= $x30 true)))
 (let (($x176 (= $x183 true)))
 (let (($x177 (= $x176 true)))
 (let ((?x150 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x150)))
 (let ((?x5 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x5)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x164 (and $x136 $x70)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x166 $x164)))
 (let (($x85 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x158 $x152)))
 (let (($x153 (not $x169)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x159 $x35)))
 (let (($x173 (and (not $x144) $x153)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x137 $x115)))
 (let (($x160 (not $x168)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x134 $x162)))
 (let (($x231 (and (not $x125) $x160)))
 (let (($x170 (and (and (and (and (and (and $x231 $x173) $x163) $x85) $x179) $x108) $x223)))
 (let (($x225 (and $x170 $x129)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x165 (or false (or false (and (and true (or $x110 $x123)) (or $x121 $x118))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x165)))
 (let (($x174 (and $x155 $x225)))
 (let (($x175 (= $x174 true)))
 (let (($x233 (= $x175 true)))
 (let (($x23 (= $x233 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x146 (concat ?x120 (concat ?x111 ?x105)))))
 (let (($x156 (= ?x101 input.dst.llvm-%val)))
 (let (($x17 (= $x156 true)))
 (let (($x145 (= $x17 true)))
 (let (($x178 (and $x145 $x23)))
 (let (($x63 (and $x178 $x177)))
 (let (($x84 (and $x63 $x10)))
 (let (($x46 (and $x84 $x93)))
 (let (($x197 (and $x46 $x89)))
 (let (($x142 (= false false)))
 (let (($x40 (and $x142 $x197)))
 (let (($x62 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x232 (and $x62 $x40)))
 (let (($x76 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x251 (and $x76 $x232)))
 (let (($x60 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x52 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x13 (or false (or false (and (and true (or $x24 $x52)) (or $x42 $x60))))))
 (let (($x56 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x71 (=> (and $x34 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x41 (and $x71 $x251)))
 (let (($x106 (=> $x41 $x252)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x34 (not $x65)))
 (let (($x200 (or $x65 $x34)))
 (let (($x95 (= $x200 true)))
 (let (($x252 (= $x95 true)))
 (let (($x6 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x206 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x9 (= $x206 $x6)))
 (let (($x196 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x97 (= $x194 $x196)))
 (let (($x90 (and $x97 $x9)))
 (let (($x89 (= $x90 true)))
 (let ((?x189 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x189 (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x195 (= $x193 $x192)))
 (let (($x191 (= ?x189 (_ bv0 32))))
 (let (($x128 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x88 (= $x128 $x191)))
 (let (($x133 (and $x88 $x195)))
 (let (($x93 (= $x133 true)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x68 (concat ?x140 (concat ?x180 ?x188)))))
 (let (($x187 (= ?x51 input.dst.llvm-%l)))
 (let (($x228 (= $x187 true)))
 (let (($x10 (= $x228 true)))
 (let (($x30 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x183 (= $x30 true)))
 (let (($x176 (= $x183 true)))
 (let (($x177 (= $x176 true)))
 (let ((?x150 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x150)))
 (let ((?x5 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x5)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x164 (and $x136 $x70)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x166 $x164)))
 (let (($x85 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x158 $x152)))
 (let (($x153 (not $x169)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x159 $x35)))
 (let (($x173 (and (not $x144) $x153)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x137 $x115)))
 (let (($x160 (not $x168)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x134 $x162)))
 (let (($x231 (and (not $x125) $x160)))
 (let (($x170 (and (and (and (and (and (and $x231 $x173) $x163) $x85) $x179) $x108) $x223)))
 (let (($x225 (and $x170 $x129)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x165 (or false (or false (and (and true (or $x110 $x123)) (or $x121 $x118))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x165)))
 (let (($x174 (and $x155 $x225)))
 (let (($x175 (= $x174 true)))
 (let (($x233 (= $x175 true)))
 (let (($x23 (= $x233 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x146 (concat ?x120 (concat ?x111 ?x105)))))
 (let (($x156 (= ?x101 input.dst.llvm-%val)))
 (let (($x17 (= $x156 true)))
 (let (($x145 (= $x17 true)))
 (let (($x178 (and $x145 $x23)))
 (let (($x63 (and $x178 $x177)))
 (let (($x84 (and $x63 $x10)))
 (let (($x46 (and $x84 $x93)))
 (let (($x197 (and $x46 $x89)))
 (let (($x142 (= false false)))
 (let (($x40 (and $x142 $x197)))
 (let (($x62 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x232 (and $x62 $x40)))
 (let (($x76 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x251 (and $x76 $x232)))
 (let (($x60 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x52 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x13 (or false (or false (and (and true (or $x24 $x52)) (or $x42 $x60))))))
 (let (($x56 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x71 (=> (and $x34 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x41 (and $x71 $x251)))
 (let (($x106 (=> $x41 $x252)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505792/query
