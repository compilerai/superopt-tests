==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x195 (= true false)))
 (let (($x196 (= $x195 true)))
 (let (($x188 (forall ((input.ind-%var49X (_ BitVec 32)) )(let ((?x182 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var49X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var49X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var49X)))
 (=> $x118 (= ?x133 ?x182))))))
 ))
 (let (($x177 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var48X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var48X)))
 (= $x118 $x173))))
 ))
 (let (($x189 (and $x177 $x188)))
 (let (($x190 (= $x189 true)))
 (let (($x165 (forall ((input.ind-%var41X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var41X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x156))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var41X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var41X)))
 (=> $x118 (= ?x133 ?x162))))))))
 ))
 (let (($x128 (forall ((input.ind-%var40X (_ BitVec 32)) )(let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var40X)))
 (= $x118 (and (bvule (_ bv0 32) input.ind-%var40X) (bvult input.ind-%var40X input.dst.llvm-%n)))))
 ))
 (let (($x166 (and $x128 $x165)))
 (let (($x167 (= $x166 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x100)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x92)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x91 $x93)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x59 $x94)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x14 $x64)))
 (let (($x87 (not $x74)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x75 $x83)))
 (let (($x90 (and (not $x61) $x87)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x18 $x47)))
 (let (($x16 (not $x20)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x56 $x41)))
 (let (($x7 (and (not $x53) $x16)))
 (let (($x107 (and (and (and (and (and (and $x7 $x90) $x58) $x57) $x95) $x97) $x99)))
 (let (($x108 (and $x107 $x101)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x66 (or false (or false (and (and true (or $x78 $x62)) (or $x73 $x84))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x109 (and $x89 $x108)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x76 (concat ?x63 (concat ?x38 ?x54)))))
 (let (($x68 (= ?x85 input.dst.llvm-%n)))
 (let (($x81 (= $x68 true)))
 (let (($x67 (= $x81 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x17 (concat ?x21 (concat ?x69 ?x51)))))
 (let (($x44 (= ?x79 input.dst.llvm-%x)))
 (let (($x8 (= $x44 true)))
 (let (($x9 (= $x8 true)))
 (let (($x46 (and $x9 $x67)))
 (let (($x113 (and $x46 $x112)))
 (let (($x168 (and $x113 $x167)))
 (let (($x191 (and $x168 $x190)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x6 $x191)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x193 (and $x43 $x192)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x25 $x193)))
 (let (($x197 (=> $x194 $x196)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x195 (= true false)))
 (let (($x196 (= $x195 true)))
 (let (($x188 (forall ((input.ind-%var49X (_ BitVec 32)) )(let ((?x182 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var49X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var49X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var49X)))
 (=> $x118 (= ?x133 ?x182))))))
 ))
 (let (($x177 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var48X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var48X)))
 (= $x118 $x173))))
 ))
 (let (($x189 (and $x177 $x188)))
 (let (($x190 (= $x189 true)))
 (let (($x165 (forall ((input.ind-%var41X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var41X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x156))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var41X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var41X)))
 (=> $x118 (= ?x133 ?x162))))))))
 ))
 (let (($x128 (forall ((input.ind-%var40X (_ BitVec 32)) )(let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var40X)))
 (= $x118 (and (bvule (_ bv0 32) input.ind-%var40X) (bvult input.ind-%var40X input.dst.llvm-%n)))))
 ))
 (let (($x166 (and $x128 $x165)))
 (let (($x167 (= $x166 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x100)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x92)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x91 $x93)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x59 $x94)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x14 $x64)))
 (let (($x87 (not $x74)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x75 $x83)))
 (let (($x90 (and (not $x61) $x87)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x18 $x47)))
 (let (($x16 (not $x20)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x56 $x41)))
 (let (($x7 (and (not $x53) $x16)))
 (let (($x107 (and (and (and (and (and (and $x7 $x90) $x58) $x57) $x95) $x97) $x99)))
 (let (($x108 (and $x107 $x101)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x66 (or false (or false (and (and true (or $x78 $x62)) (or $x73 $x84))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x109 (and $x89 $x108)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x76 (concat ?x63 (concat ?x38 ?x54)))))
 (let (($x68 (= ?x85 input.dst.llvm-%n)))
 (let (($x81 (= $x68 true)))
 (let (($x67 (= $x81 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x17 (concat ?x21 (concat ?x69 ?x51)))))
 (let (($x44 (= ?x79 input.dst.llvm-%x)))
 (let (($x8 (= $x44 true)))
 (let (($x9 (= $x8 true)))
 (let (($x46 (and $x9 $x67)))
 (let (($x113 (and $x46 $x112)))
 (let (($x168 (and $x113 $x167)))
 (let (($x191 (and $x168 $x190)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x6 $x191)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x193 (and $x43 $x192)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x25 $x193)))
 (let (($x197 (=> $x194 $x196)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x38023200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000000e0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x38023203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000000e3)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000000e0)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x38023200)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x000000e3)
                        (k!0 #x000000e2)
                        (k!0 #x000000e1)
                        (k!0 #x000000e0))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x21548974)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd7646b4c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd7646b4f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x21548977)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x21548974)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd7646b4c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x200 (=> $x107 true)))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x130 (forall ((input.ind-%var77X (_ BitVec 32)) )(let ((?x172 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var77X)))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var77X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var77X)))
 (=> $x158 (= ?x176 ?x172))))))
 ))
 (let (($x148 (forall ((input.ind-%var76X (_ BitVec 32)) )(let (($x141 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var76X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var76X)))
 (= $x158 $x141))))
 ))
 (let (($x150 (and $x148 $x130)))
 (let (($x184 (= $x150 true)))
 (let (($x137 (forall ((input.ind-%var71X (_ BitVec 32)) )(let ((?x35 (bvadd (bvmul input.ind-%var71X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x174))))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var71X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var71X)))
 (=> $x158 (= ?x176 ?x114))))))))
 ))
 (let (($x166 (forall ((input.ind-%var70X (_ BitVec 32)) )(let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var70X)))
 (= $x158 (and (bvule (_ bv0 32) input.ind-%var70X) (bvult input.ind-%var70X input.dst.llvm-%n)))))
 ))
 (let (($x138 (and $x166 $x137)))
 (let (($x146 (= $x138 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x127 (concat ?x125 (concat ?x113 ?x111)))))
 (let (($x133 (= ?x128 input.dst.llvm-%x)))
 (let (($x136 (= $x133 true)))
 (let (($x151 (= $x136 true)))
 (let (($x100 (= $x107 true)))
 (let (($x101 (= $x100 true)))
 (let (($x108 (= $x101 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x102)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x87)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x83)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x75 $x61)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x7 $x88)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x89 $x56)))
 (let (($x53 (not $x41)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x28 $x65)))
 (let (($x18 (and (not $x66) $x53)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x71 $x32)))
 (let (($x39 (not $x73)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x15 $x63)))
 (let (($x11 (and (not $x80) $x39)))
 (let (($x92 (and (and (and (and (and (and $x11 $x18) $x47) $x16) $x14) $x74) $x90)))
 (let (($x93 (and $x92 $x58)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x78 (or false (or false (and (and true (or $x85 $x22)) (or $x45 $x13))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x94 (and $x62 $x93)))
 (let (($x95 (= $x94 true)))
 (let (($x105 (= $x95 true)))
 (let (($x96 (= $x105 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x86 (concat ?x51 (concat ?x33 ?x17)))))
 (let (($x9 (= ?x44 input.dst.llvm-%n)))
 (let (($x27 (= $x9 true)))
 (let (($x31 (= $x27 true)))
 (let (($x97 (and $x31 $x96)))
 (let (($x109 (and $x97 $x108)))
 (let (($x152 (and $x109 $x151)))
 (let (($x147 (and $x152 $x146)))
 (let (($x179 (and $x147 $x184)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x185 (and $x6 $x179)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x171 (and $x10 $x185)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x199 (and $x36 $x171)))
 (let (($x203 (=> $x199 $x202)))
 (not $x203))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x200 (=> $x107 true)))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x130 (forall ((input.ind-%var77X (_ BitVec 32)) )(let ((?x172 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var77X)))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var77X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var77X)))
 (=> $x158 (= ?x176 ?x172))))))
 ))
 (let (($x148 (forall ((input.ind-%var76X (_ BitVec 32)) )(let (($x141 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var76X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var76X)))
 (= $x158 $x141))))
 ))
 (let (($x150 (and $x148 $x130)))
 (let (($x184 (= $x150 true)))
 (let (($x137 (forall ((input.ind-%var71X (_ BitVec 32)) )(let ((?x35 (bvadd (bvmul input.ind-%var71X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x174))))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var71X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var71X)))
 (=> $x158 (= ?x176 ?x114))))))))
 ))
 (let (($x166 (forall ((input.ind-%var70X (_ BitVec 32)) )(let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var70X)))
 (= $x158 (and (bvule (_ bv0 32) input.ind-%var70X) (bvult input.ind-%var70X input.dst.llvm-%n)))))
 ))
 (let (($x138 (and $x166 $x137)))
 (let (($x146 (= $x138 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x127 (concat ?x125 (concat ?x113 ?x111)))))
 (let (($x133 (= ?x128 input.dst.llvm-%x)))
 (let (($x136 (= $x133 true)))
 (let (($x151 (= $x136 true)))
 (let (($x100 (= $x107 true)))
 (let (($x101 (= $x100 true)))
 (let (($x108 (= $x101 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x102)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x87)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x83)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x75 $x61)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x7 $x88)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x89 $x56)))
 (let (($x53 (not $x41)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x28 $x65)))
 (let (($x18 (and (not $x66) $x53)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x71 $x32)))
 (let (($x39 (not $x73)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x15 $x63)))
 (let (($x11 (and (not $x80) $x39)))
 (let (($x92 (and (and (and (and (and (and $x11 $x18) $x47) $x16) $x14) $x74) $x90)))
 (let (($x93 (and $x92 $x58)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x78 (or false (or false (and (and true (or $x85 $x22)) (or $x45 $x13))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x94 (and $x62 $x93)))
 (let (($x95 (= $x94 true)))
 (let (($x105 (= $x95 true)))
 (let (($x96 (= $x105 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x86 (concat ?x51 (concat ?x33 ?x17)))))
 (let (($x9 (= ?x44 input.dst.llvm-%n)))
 (let (($x27 (= $x9 true)))
 (let (($x31 (= $x27 true)))
 (let (($x97 (and $x31 $x96)))
 (let (($x109 (and $x97 $x108)))
 (let (($x152 (and $x109 $x151)))
 (let (($x147 (and $x152 $x146)))
 (let (($x179 (and $x147 $x184)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x185 (and $x6 $x179)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x171 (and $x10 $x185)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x199 (and $x36 $x171)))
 (let (($x203 (=> $x199 $x202)))
 (not $x203))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x123 (= $x131 true)))
 (let (($x161 (forall ((input.ind-%var89X (_ BitVec 32)) )(let ((?x195 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var89X)))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var89X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var89X)))
 (=> $x166 (= ?x114 ?x195))))))
 ))
 (let (($x194 (forall ((input.ind-%var88X (_ BitVec 32)) )(let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var88X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var88X)))
 (= $x166 $x188))))
 ))
 (let (($x156 (and $x194 $x161)))
 (let (($x159 (= $x156 true)))
 (let (($x177 (forall ((input.ind-%var83X (_ BitVec 32)) )(let ((?x199 (bvadd (bvmul input.ind-%var83X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x203))))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var83X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var83X)))
 (=> $x166 (= ?x114 ?x139))))))))
 ))
 (let (($x12 (forall ((input.ind-%var82X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var82X)))
 (= $x166 (and (bvule (_ bv0 32) input.ind-%var82X) (bvult input.ind-%var82X input.dst.llvm-%n)))))
 ))
 (let (($x167 (and $x12 $x177)))
 (let (($x173 (= $x167 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x133 (concat ?x117 (concat ?x112 ?x118)))))
 (let (($x152 (= ?x136 input.dst.llvm-%n)))
 (let (($x157 (= $x152 true)))
 (let (($x158 (= $x157 true)))
 (let (($x100 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x101 (= $x100 true)))
 (let (($x108 (= $x101 true)))
 (let (($x109 (= $x108 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x91)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x64)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x7 $x83)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x104 $x61)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x56 $x41)))
 (let (($x18 (not $x53)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x66 $x26)))
 (let (($x47 (and (not $x89) $x18)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x32 $x73)))
 (let (($x11 (not $x39)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x72 $x54)))
 (let (($x65 (and (not $x71) $x11)))
 (let (($x94 (and (and (and (and (and (and $x65 $x47) $x20) $x16) $x88) $x59) $x74)))
 (let (($x95 (and $x94 $x87)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x63 (or false (or false (and (and true (or $x81 $x67)) (or $x42 $x50))))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x105 (and $x84 $x95)))
 (let (($x96 (= $x105 true)))
 (let (($x97 (= $x96 true)))
 (let (($x106 (= $x97 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x44 (concat ?x33 (concat ?x30 ?x79)))))
 (let (($x27 (= ?x8 input.dst.llvm-%x)))
 (let (($x31 (= $x27 true)))
 (let (($x19 (= $x31 true)))
 (let (($x98 (and $x19 $x106)))
 (let (($x126 (and $x98 $x109)))
 (let (($x163 (and $x126 $x158)))
 (let (($x160 (and $x163 $x173)))
 (let (($x115 (and $x160 $x159)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x48 $x115)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x142 (and $x5 $x144)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x168 (and $x43 $x142)))
 (let (($x116 (=> $x168 $x123)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x123 (= $x131 true)))
 (let (($x161 (forall ((input.ind-%var89X (_ BitVec 32)) )(let ((?x195 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var89X)))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var89X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var89X)))
 (=> $x166 (= ?x114 ?x195))))))
 ))
 (let (($x194 (forall ((input.ind-%var88X (_ BitVec 32)) )(let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var88X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var88X)))
 (= $x166 $x188))))
 ))
 (let (($x156 (and $x194 $x161)))
 (let (($x159 (= $x156 true)))
 (let (($x177 (forall ((input.ind-%var83X (_ BitVec 32)) )(let ((?x199 (bvadd (bvmul input.ind-%var83X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x203))))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var83X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var83X)))
 (=> $x166 (= ?x114 ?x139))))))))
 ))
 (let (($x12 (forall ((input.ind-%var82X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var82X)))
 (= $x166 (and (bvule (_ bv0 32) input.ind-%var82X) (bvult input.ind-%var82X input.dst.llvm-%n)))))
 ))
 (let (($x167 (and $x12 $x177)))
 (let (($x173 (= $x167 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x133 (concat ?x117 (concat ?x112 ?x118)))))
 (let (($x152 (= ?x136 input.dst.llvm-%n)))
 (let (($x157 (= $x152 true)))
 (let (($x158 (= $x157 true)))
 (let (($x100 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x101 (= $x100 true)))
 (let (($x108 (= $x101 true)))
 (let (($x109 (= $x108 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x91)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x64)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x7 $x83)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x104 $x61)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x56 $x41)))
 (let (($x18 (not $x53)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x66 $x26)))
 (let (($x47 (and (not $x89) $x18)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x32 $x73)))
 (let (($x11 (not $x39)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x72 $x54)))
 (let (($x65 (and (not $x71) $x11)))
 (let (($x94 (and (and (and (and (and (and $x65 $x47) $x20) $x16) $x88) $x59) $x74)))
 (let (($x95 (and $x94 $x87)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x63 (or false (or false (and (and true (or $x81 $x67)) (or $x42 $x50))))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x105 (and $x84 $x95)))
 (let (($x96 (= $x105 true)))
 (let (($x97 (= $x96 true)))
 (let (($x106 (= $x97 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x44 (concat ?x33 (concat ?x30 ?x79)))))
 (let (($x27 (= ?x8 input.dst.llvm-%x)))
 (let (($x31 (= $x27 true)))
 (let (($x19 (= $x31 true)))
 (let (($x98 (and $x19 $x106)))
 (let (($x126 (and $x98 $x109)))
 (let (($x163 (and $x126 $x158)))
 (let (($x160 (and $x163 $x173)))
 (let (($x115 (and $x160 $x159)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x48 $x115)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x142 (and $x5 $x144)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x168 (and $x43 $x142)))
 (let (($x116 (=> $x168 $x123)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000e) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000f)
                        (k!0 #x0000000e)
                        (k!0 #x0000000d)
                        (k!0 #x0000000c))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc982b100)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa9f1ae04)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6b6b6b01)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa9f1ae07)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc982b103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc982b100)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xbf6bd700)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa9f1ae04)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xbf6bd701) #x00
    (ite (= x!0 #xc982b100) #x01
    (ite (= x!0 #xbf6bd703) #x00
    (ite (= x!0 #xa9f1ae05) #xd7
    (ite (= x!0 #xbf6bd702) #x00
    (ite (= x!0 #xbf6bd700) #x00
    (ite (= x!0 #xa9f1ae07) #xbf
    (ite (= x!0 #xa9f1ae04) #x00
      #x6b)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6b6b6b01 x!0)
         (ite (bvule #x6b6b6b02 x!0) #x6b6b6b02 #x6b6b6b01)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x205 ((_ extract 23 0) input.dst.llvm-%n)))
 (let ((?x206 (bvmul (_ bv256 24) ?x205)))
 (let ((?x143 ((_ extract 23 0) input.dst.llvm-%x)))
 (let ((?x180 (bvmul (_ bv47897 24) ?x143)))
 (let ((?x207 (bvadd ?x180 ?x206)))
 (let (($x208 (= (_ bv0 24) ?x207)))
 (let (($x209 (= $x208 true)))
 (let (($x35 (forall ((input.ind-%var117X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var117X)))
 (let ((?x181 (input.spec-%var-x-1.1.1 input.ind-%var117X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var117X)))
 (=> $x114 (= ?x181 ?x184))))))
 ))
 (let (($x141 (forall ((input.ind-%var116X (_ BitVec 32)) )(let (($x130 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var116X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var116X)))
 (= $x114 $x130))))
 ))
 (let (($x129 (and $x141 $x35)))
 (let (($x179 (= $x129 true)))
 (let (($x49 (forall ((input.ind-%var111X (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul input.ind-%var111X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x121))))
 (let ((?x181 (input.spec-%var-x-1.1.1 input.ind-%var111X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var111X)))
 (=> $x114 (= ?x181 ?x198))))))))
 ))
 (let (($x200 (forall ((input.ind-%var110X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var110X)))
 (= $x114 (and (bvule (_ bv0 32) input.ind-%var110X) (bvult input.ind-%var110X input.dst.llvm-%n)))))
 ))
 (let (($x134 (and $x200 $x49)))
 (let (($x162 (= $x134 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x158 (concat ?x151 (concat ?x113 ?x112)))))
 (let (($x165 (= ?x163 input.dst.llvm-%x)))
 (let (($x166 (= $x165 true)))
 (let (($x183 (= $x166 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x108 (concat ?x107 (concat ?x97 ?x105)))))
 (let (($x128 (= ?x109 input.dst.llvm-%n)))
 (let (($x133 (= $x128 true)))
 (let (($x111 (= $x133 true)))
 (let (($x93 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x64 (= $x93 true)))
 (let (($x74 (= $x64 true)))
 (let (($x94 (= $x74 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x47)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x53)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (and $x11 $x26)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x39 $x89)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x62 $x15)))
 (let (($x84 (not $x63)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x82 $x50)))
 (let (($x54 (and (not $x78) $x84)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x22 $x67)))
 (let (($x46 (not $x45)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x55 $x21)))
 (let (($x42 (and (not $x81) $x46)))
 (let (($x104 (and (and (and (and (and (and $x42 $x54) $x28) $x73) $x103) $x41) $x18)))
 (let (($x7 (and $x104 $x90)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x80 (or false (or false (and (and true (or $x86 $x30)) (or $x27 $x31))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x75 (and $x68 $x7)))
 (let (($x83 (= $x75 true)))
 (let (($x61 (= $x83 true)))
 (let (($x88 (= $x61 true)))
 (let (($x91 (and $x88 $x94)))
 (let (($x117 (and $x91 $x111)))
 (let (($x132 (and $x117 $x183)))
 (let (($x186 (and $x132 $x162)))
 (let (($x153 (and $x186 $x179)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x197 (and $x6 $x153)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x174 (and $x9 $x197)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x29 $x174)))
 (let (($x210 (=> $x185 $x209)))
 (not $x210))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x205 ((_ extract 23 0) input.dst.llvm-%n)))
 (let ((?x206 (bvmul (_ bv256 24) ?x205)))
 (let ((?x143 ((_ extract 23 0) input.dst.llvm-%x)))
 (let ((?x180 (bvmul (_ bv47897 24) ?x143)))
 (let ((?x207 (bvadd ?x180 ?x206)))
 (let (($x208 (= (_ bv0 24) ?x207)))
 (let (($x209 (= $x208 true)))
 (let (($x35 (forall ((input.ind-%var117X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var117X)))
 (let ((?x181 (input.spec-%var-x-1.1.1 input.ind-%var117X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var117X)))
 (=> $x114 (= ?x181 ?x184))))))
 ))
 (let (($x141 (forall ((input.ind-%var116X (_ BitVec 32)) )(let (($x130 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var116X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var116X)))
 (= $x114 $x130))))
 ))
 (let (($x129 (and $x141 $x35)))
 (let (($x179 (= $x129 true)))
 (let (($x49 (forall ((input.ind-%var111X (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul input.ind-%var111X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x121))))
 (let ((?x181 (input.spec-%var-x-1.1.1 input.ind-%var111X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var111X)))
 (=> $x114 (= ?x181 ?x198))))))))
 ))
 (let (($x200 (forall ((input.ind-%var110X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var110X)))
 (= $x114 (and (bvule (_ bv0 32) input.ind-%var110X) (bvult input.ind-%var110X input.dst.llvm-%n)))))
 ))
 (let (($x134 (and $x200 $x49)))
 (let (($x162 (= $x134 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x158 (concat ?x151 (concat ?x113 ?x112)))))
 (let (($x165 (= ?x163 input.dst.llvm-%x)))
 (let (($x166 (= $x165 true)))
 (let (($x183 (= $x166 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x108 (concat ?x107 (concat ?x97 ?x105)))))
 (let (($x128 (= ?x109 input.dst.llvm-%n)))
 (let (($x133 (= $x128 true)))
 (let (($x111 (= $x133 true)))
 (let (($x93 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x64 (= $x93 true)))
 (let (($x74 (= $x64 true)))
 (let (($x94 (= $x74 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x47)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x53)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (and $x11 $x26)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x39 $x89)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x62 $x15)))
 (let (($x84 (not $x63)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x82 $x50)))
 (let (($x54 (and (not $x78) $x84)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x22 $x67)))
 (let (($x46 (not $x45)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x55 $x21)))
 (let (($x42 (and (not $x81) $x46)))
 (let (($x104 (and (and (and (and (and (and $x42 $x54) $x28) $x73) $x103) $x41) $x18)))
 (let (($x7 (and $x104 $x90)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x80 (or false (or false (and (and true (or $x86 $x30)) (or $x27 $x31))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x75 (and $x68 $x7)))
 (let (($x83 (= $x75 true)))
 (let (($x61 (= $x83 true)))
 (let (($x88 (= $x61 true)))
 (let (($x91 (and $x88 $x94)))
 (let (($x117 (and $x91 $x111)))
 (let (($x132 (and $x117 $x183)))
 (let (($x186 (and $x132 $x162)))
 (let (($x153 (and $x186 $x179)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x197 (and $x6 $x153)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x174 (and $x9 $x197)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x29 $x174)))
 (let (($x210 (=> $x185 $x209)))
 (not $x210))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000800) #x04
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80902854)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00402930)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xc5000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xc5005010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00402933)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80902857)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00402930)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80902854)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80902855) #x50
    (ite (= x!0 #x00402932) #x00
    (ite (= x!0 #x80902854) #x10
    (ite (= x!0 #xc5000013) #x00
    (ite (= x!0 #xc5000011) #x00
    (ite (= x!0 #x80902856) #x00
    (ite (= x!0 #x00402931) #x00
    (ite (= x!0 #xc5000012) #x00
    (ite (= x!0 #xc5000010) #x00
    (ite (= x!0 #x00402930) #x10
      #xc5)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xc5005010 x!0)
         (ite (bvule #xc5005011 x!0) #xc5005011 #xc5005010)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x110 (= (_ bv0 2) ?x24)))
 (let (($x144 (= $x110 true)))
 (let (($x195 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x159 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var145X)))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var145X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var145X)))
 (=> $x181 (= ?x176 ?x159))))))
 ))
 (let (($x171 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var144X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var144X)))
 (= $x181 $x154))))
 ))
 (let (($x161 (and $x171 $x195)))
 (let (($x115 (= $x161 true)))
 (let (($x25 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x122 (bvadd (bvmul input.ind-%var139X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x178))))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var139X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var139X)))
 (=> $x181 (= ?x176 ?x210))))))))
 ))
 (let (($x123 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var138X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X input.dst.llvm-%n)))))
 ))
 (let (($x182 (and $x123 $x25)))
 (let (($x95 (= $x182 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x183 (concat ?x163 (concat ?x112 ?x118)))))
 (let (($x12 (= ?x132 input.dst.llvm-%x)))
 (let (($x114 (= $x12 true)))
 (let (($x37 (= $x114 true)))
 (let (($x111 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x117 (= $x111 true)))
 (let (($x157 (= $x117 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x94)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x64)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x83)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x75 $x61)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x7 $x88)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x16 $x56)))
 (let (($x102 (not $x41)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x26 $x89)))
 (let (($x18 (and (not $x103) $x102)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x73 $x92)))
 (let (($x11 (not $x39)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x21 $x81)))
 (let (($x66 (and (not $x32) $x11)))
 (let (($x107 (and (and (and (and (and (and $x66 $x18) $x104) $x90) $x14) $x93) $x74)))
 (let (($x96 (and $x107 $x91)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x71 (or false (or false (and (and true (or $x42 $x82)) (or $x15 $x63))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x97 (and $x20 $x96)))
 (let (($x105 (= $x97 true)))
 (let (($x106 (= $x105 true)))
 (let (($x100 (= $x106 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x31 (concat ?x69 (concat ?x86 ?x51)))))
 (let (($x85 (= ?x19 input.dst.llvm-%n)))
 (let (($x80 (= $x85 true)))
 (let (($x68 (= $x80 true)))
 (let (($x109 (and $x68 $x100)))
 (let (($x136 (and $x109 $x158)))
 (let (($x204 (and $x136 $x37)))
 (let (($x125 (and $x204 $x95)))
 (let (($x148 (and $x125 $x115)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x135 (and $x48 $x148)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x146 (and $x43 $x135)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x58 $x146)))
 (let (($x138 (=> $x175 $x144)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x110 (= (_ bv0 2) ?x24)))
 (let (($x144 (= $x110 true)))
 (let (($x195 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x159 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var145X)))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var145X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var145X)))
 (=> $x181 (= ?x176 ?x159))))))
 ))
 (let (($x171 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var144X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var144X)))
 (= $x181 $x154))))
 ))
 (let (($x161 (and $x171 $x195)))
 (let (($x115 (= $x161 true)))
 (let (($x25 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x122 (bvadd (bvmul input.ind-%var139X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x178))))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var139X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var139X)))
 (=> $x181 (= ?x176 ?x210))))))))
 ))
 (let (($x123 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var138X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X input.dst.llvm-%n)))))
 ))
 (let (($x182 (and $x123 $x25)))
 (let (($x95 (= $x182 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x183 (concat ?x163 (concat ?x112 ?x118)))))
 (let (($x12 (= ?x132 input.dst.llvm-%x)))
 (let (($x114 (= $x12 true)))
 (let (($x37 (= $x114 true)))
 (let (($x111 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x117 (= $x111 true)))
 (let (($x157 (= $x117 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x94)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x64)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x83)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x75 $x61)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x7 $x88)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x16 $x56)))
 (let (($x102 (not $x41)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x26 $x89)))
 (let (($x18 (and (not $x103) $x102)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x73 $x92)))
 (let (($x11 (not $x39)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x21 $x81)))
 (let (($x66 (and (not $x32) $x11)))
 (let (($x107 (and (and (and (and (and (and $x66 $x18) $x104) $x90) $x14) $x93) $x74)))
 (let (($x96 (and $x107 $x91)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x71 (or false (or false (and (and true (or $x42 $x82)) (or $x15 $x63))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x97 (and $x20 $x96)))
 (let (($x105 (= $x97 true)))
 (let (($x106 (= $x105 true)))
 (let (($x100 (= $x106 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x31 (concat ?x69 (concat ?x86 ?x51)))))
 (let (($x85 (= ?x19 input.dst.llvm-%n)))
 (let (($x80 (= $x85 true)))
 (let (($x68 (= $x80 true)))
 (let (($x109 (and $x68 $x100)))
 (let (($x136 (and $x109 $x158)))
 (let (($x204 (and $x136 $x37)))
 (let (($x125 (and $x204 $x95)))
 (let (($x148 (and $x125 $x115)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x135 (and $x48 $x148)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x146 (and $x43 $x135)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x58 $x146)))
 (let (($x138 (=> $x175 $x144)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x174 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x169 (= $x174 true)))
 (let (($x173 (= $x169 true)))
 (let (($x156 (forall ((input.ind-%var157X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var157X)))
 (let ((?x210 (input.spec-%var-x-1.1.1 input.ind-%var157X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var157X)))
 (=> $x123 (= ?x210 ?x184))))))
 ))
 (let (($x192 (forall ((input.ind-%var156X (_ BitVec 32)) )(let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var156X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var156X)))
 (= $x123 $x162))))
 ))
 (let (($x202 (and $x192 $x156)))
 (let (($x70 (= $x202 true)))
 (let (($x167 (forall ((input.ind-%var151X (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul input.ind-%var151X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x144))))
 (let ((?x210 (input.spec-%var-x-1.1.1 input.ind-%var151X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var151X)))
 (=> $x123 (= ?x210 ?x151))))))))
 ))
 (let (($x180 (forall ((input.ind-%var150X (_ BitVec 32)) )(let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var150X)))
 (= $x123 (and (bvule (_ bv0 32) input.ind-%var150X) (bvult input.ind-%var150X input.dst.llvm-%n)))))
 ))
 (let (($x120 (and $x180 $x167)))
 (let (($x121 (= $x120 true)))
 (let ((?x152 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x12 (concat ?x124 (concat ?x113 ?x152)))))
 (let (($x204 (= ?x114 input.dst.llvm-%n)))
 (let (($x200 (= $x204 true)))
 (let (($x181 (= $x200 true)))
 (let (($x117 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x157 (= $x117 true)))
 (let (($x158 (= $x157 true)))
 (let (($x136 (= $x158 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x99)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x59)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x7 $x83)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x108 $x61)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x56 $x41)))
 (let (($x18 (not $x102)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (and $x103 $x53)))
 (let (($x104 (and (not $x16) $x18)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x92 $x39)))
 (let (($x66 (not $x11)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x28 $x67)))
 (let (($x89 (and (not $x73) $x66)))
 (let (($x97 (and (and (and (and (and (and $x89 $x104) $x47) $x90) $x88) $x98) $x93)))
 (let (($x105 (and $x97 $x64)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x81 (or false (or false (and (and true (or $x78 $x72)) (or $x54 $x57))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x106 (and $x65 $x105)))
 (let (($x100 (= $x106 true)))
 (let (($x109 (= $x100 true)))
 (let (($x126 (= $x109 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x19 (concat ?x86 (concat ?x30 ?x8)))))
 (let (($x80 (= ?x60 input.dst.llvm-%x)))
 (let (($x68 (= $x80 true)))
 (let (($x13 (= $x68 true)))
 (let (($x128 (and $x13 $x126)))
 (let (($x166 (and $x128 $x136)))
 (let (($x38 (and $x166 $x181)))
 (let (($x198 (and $x38 $x121)))
 (let (($x196 (and $x198 $x70)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x197 (and $x9 $x196)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x36 $x197)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x139 (and $x49 $x189)))
 (let (($x193 (=> $x139 $x173)))
 (not $x193))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x174 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x169 (= $x174 true)))
 (let (($x173 (= $x169 true)))
 (let (($x156 (forall ((input.ind-%var157X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var157X)))
 (let ((?x210 (input.spec-%var-x-1.1.1 input.ind-%var157X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var157X)))
 (=> $x123 (= ?x210 ?x184))))))
 ))
 (let (($x192 (forall ((input.ind-%var156X (_ BitVec 32)) )(let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var156X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var156X)))
 (= $x123 $x162))))
 ))
 (let (($x202 (and $x192 $x156)))
 (let (($x70 (= $x202 true)))
 (let (($x167 (forall ((input.ind-%var151X (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul input.ind-%var151X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x144))))
 (let ((?x210 (input.spec-%var-x-1.1.1 input.ind-%var151X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var151X)))
 (=> $x123 (= ?x210 ?x151))))))))
 ))
 (let (($x180 (forall ((input.ind-%var150X (_ BitVec 32)) )(let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var150X)))
 (= $x123 (and (bvule (_ bv0 32) input.ind-%var150X) (bvult input.ind-%var150X input.dst.llvm-%n)))))
 ))
 (let (($x120 (and $x180 $x167)))
 (let (($x121 (= $x120 true)))
 (let ((?x152 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x12 (concat ?x124 (concat ?x113 ?x152)))))
 (let (($x204 (= ?x114 input.dst.llvm-%n)))
 (let (($x200 (= $x204 true)))
 (let (($x181 (= $x200 true)))
 (let (($x117 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x157 (= $x117 true)))
 (let (($x158 (= $x157 true)))
 (let (($x136 (= $x158 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x99)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x59)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x7 $x83)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x108 $x61)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x56 $x41)))
 (let (($x18 (not $x102)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (and $x103 $x53)))
 (let (($x104 (and (not $x16) $x18)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x92 $x39)))
 (let (($x66 (not $x11)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x28 $x67)))
 (let (($x89 (and (not $x73) $x66)))
 (let (($x97 (and (and (and (and (and (and $x89 $x104) $x47) $x90) $x88) $x98) $x93)))
 (let (($x105 (and $x97 $x64)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x81 (or false (or false (and (and true (or $x78 $x72)) (or $x54 $x57))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x106 (and $x65 $x105)))
 (let (($x100 (= $x106 true)))
 (let (($x109 (= $x100 true)))
 (let (($x126 (= $x109 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x19 (concat ?x86 (concat ?x30 ?x8)))))
 (let (($x80 (= ?x60 input.dst.llvm-%x)))
 (let (($x68 (= $x80 true)))
 (let (($x13 (= $x68 true)))
 (let (($x128 (and $x13 $x126)))
 (let (($x166 (and $x128 $x136)))
 (let (($x38 (and $x166 $x181)))
 (let (($x198 (and $x38 $x121)))
 (let (($x196 (and $x198 $x70)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x197 (and $x9 $x196)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x36 $x197)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x139 (and $x49 $x189)))
 (let (($x193 (=> $x139 $x173)))
 (not $x193))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x00
      #xff))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000f)
                        (k!0 #x0000000e)
                        (k!0 #x0000000d)
                        (k!0 #x0000000c))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd3197c74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff596d7c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff596d7f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd3197c77)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd3197c74)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xfdfefe00)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff596d7c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd3197c75) #xff
    (ite (= x!0 #xd3197c74) #xff
    (ite (= x!0 #xfdfefe03) #x00
    (ite (= x!0 #xd3197c77) #xff
    (ite (= x!0 #xfdfefe01) #x00
    (ite (= x!0 #xd3197c76) #xff
    (ite (= x!0 #xfdfefe02) #x00
    (ite (= x!0 #xfdfefe00) #x00
    (ite (= x!0 #xff596d7f) #xfd
    (ite (= x!0 #xff596d7c) #x00
      #xfe)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x178 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x135 (= $x178 true)))
 (let (($x153 (= $x135 true)))
 (let (($x130 (forall ((input.ind-%var185X (_ BitVec 32)) )(let ((?x171 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var185X)))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var185X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var185X)))
 (=> $x180 (= ?x151 ?x171))))))
 ))
 (let (($x159 (forall ((input.ind-%var184X (_ BitVec 32)) )(let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var184X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var184X)))
 (= $x180 $x182))))
 ))
 (let (($x116 (and $x159 $x130)))
 (let (($x122 (= $x116 true)))
 (let (($x176 (forall ((input.ind-%var179X (_ BitVec 32)) )(let ((?x139 (bvadd (bvmul input.ind-%var179X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x173))))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var179X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var179X)))
 (=> $x180 (= ?x151 ?x52))))))))
 ))
 (let (($x110 (forall ((input.ind-%var178X (_ BitVec 32)) )(let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var178X)))
 (= $x180 (and (bvule (_ bv0 32) input.ind-%var178X) (bvult input.ind-%var178X input.dst.llvm-%n)))))
 ))
 (let (($x211 (and $x110 $x176)))
 (let (($x191 (= $x211 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x200 (concat ?x204 (concat ?x165 (concat ?x113 ?x124)))))
 (let (($x38 (= ?x200 input.dst.llvm-%n)))
 (let (($x149 (= $x38 true)))
 (let (($x123 (= $x149 true)))
 (let (($x158 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x136 (= $x158 true)))
 (let (($x166 (= $x136 true)))
 (let (($x132 (= $x166 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x96)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x14)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x108 $x75)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x94 $x83)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x41 $x102)))
 (let (($x104 (not $x18)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x16 $x87)))
 (let (($x101 (and (not $x56) $x104)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x39 $x11)))
 (let (($x89 (not $x66)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x32 $x45)))
 (let (($x53 (and (not $x92) $x89)))
 (let (($x106 (and (and (and (and (and (and $x53 $x101) $x107) $x90) $x61) $x91) $x98)))
 (let (($x100 (and $x106 $x59)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x67 (or false (or false (and (and true (or $x62 $x63)) (or $x20 $x21))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x109 (and $x26 $x100)))
 (let (($x126 (= $x109 true)))
 (let (($x128 (= $x126 true)))
 (let (($x133 (= $x128 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x60 (concat ?x30 (concat ?x69 ?x17)))))
 (let (($x68 (= ?x85 input.dst.llvm-%x)))
 (let (($x13 (= $x68 true)))
 (let (($x46 (= $x13 true)))
 (let (($x111 (and $x46 $x133)))
 (let (($x12 (and $x111 $x132)))
 (let (($x205 (and $x12 $x123)))
 (let (($x207 (and $x205 $x191)))
 (let (($x208 (and $x207 $x122)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x148 (and $x43 $x208)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x168 (and $x29 $x148)))
 (let (($x177 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x129 (and $x177 $x168)))
 (let (($x170 (=> $x129 $x153)))
 (not $x170))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x178 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x135 (= $x178 true)))
 (let (($x153 (= $x135 true)))
 (let (($x130 (forall ((input.ind-%var185X (_ BitVec 32)) )(let ((?x171 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var185X)))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var185X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var185X)))
 (=> $x180 (= ?x151 ?x171))))))
 ))
 (let (($x159 (forall ((input.ind-%var184X (_ BitVec 32)) )(let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var184X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var184X)))
 (= $x180 $x182))))
 ))
 (let (($x116 (and $x159 $x130)))
 (let (($x122 (= $x116 true)))
 (let (($x176 (forall ((input.ind-%var179X (_ BitVec 32)) )(let ((?x139 (bvadd (bvmul input.ind-%var179X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x173))))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var179X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var179X)))
 (=> $x180 (= ?x151 ?x52))))))))
 ))
 (let (($x110 (forall ((input.ind-%var178X (_ BitVec 32)) )(let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var178X)))
 (= $x180 (and (bvule (_ bv0 32) input.ind-%var178X) (bvult input.ind-%var178X input.dst.llvm-%n)))))
 ))
 (let (($x211 (and $x110 $x176)))
 (let (($x191 (= $x211 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x200 (concat ?x204 (concat ?x165 (concat ?x113 ?x124)))))
 (let (($x38 (= ?x200 input.dst.llvm-%n)))
 (let (($x149 (= $x38 true)))
 (let (($x123 (= $x149 true)))
 (let (($x158 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x136 (= $x158 true)))
 (let (($x166 (= $x136 true)))
 (let (($x132 (= $x166 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x96)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x14)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x108 $x75)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x94 $x83)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x41 $x102)))
 (let (($x104 (not $x18)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x16 $x87)))
 (let (($x101 (and (not $x56) $x104)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x39 $x11)))
 (let (($x89 (not $x66)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x32 $x45)))
 (let (($x53 (and (not $x92) $x89)))
 (let (($x106 (and (and (and (and (and (and $x53 $x101) $x107) $x90) $x61) $x91) $x98)))
 (let (($x100 (and $x106 $x59)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x67 (or false (or false (and (and true (or $x62 $x63)) (or $x20 $x21))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x109 (and $x26 $x100)))
 (let (($x126 (= $x109 true)))
 (let (($x128 (= $x126 true)))
 (let (($x133 (= $x128 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x60 (concat ?x30 (concat ?x69 ?x17)))))
 (let (($x68 (= ?x85 input.dst.llvm-%x)))
 (let (($x13 (= $x68 true)))
 (let (($x46 (= $x13 true)))
 (let (($x111 (and $x46 $x133)))
 (let (($x12 (and $x111 $x132)))
 (let (($x205 (and $x12 $x123)))
 (let (($x207 (and $x205 $x191)))
 (let (($x208 (and $x207 $x122)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x148 (and $x43 $x208)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x168 (and $x29 $x148)))
 (let (($x177 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x129 (and $x177 $x168)))
 (let (($x170 (=> $x129 $x153)))
 (not $x170))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x228 (forall ((input.ind-%var207X (_ BitVec 32)) )(let ((?x129 (bvadd (bvmul input.ind-%var207X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x170))))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var207X)))
 (let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var207X)))
 (=> $x110 (= ?x52 ?x95))))))))
 ))
 (let (($x187 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var206X)))
 (= $x110 (and (bvule (_ bv0 32) input.ind-%var206X) (bvult input.ind-%var206X (_ bv0 32))))))
 ))
 (let (($x229 (and $x187 $x228)))
 (let (($x197 (= true true)))
 (let (($x230 (and $x197 $x229)))
 (let (($x231 (= $x230 true)))
 (let (($x206 (forall ((input.ind-%var201X (_ BitVec 32)) )(let ((?x137 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var201X)))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var201X)))
 (let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var201X)))
 (=> $x110 (= ?x52 ?x137))))))
 ))
 (let (($x150 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var200X)))
 (let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var200X)))
 (= $x110 $x121))))
 ))
 (let (($x175 (and $x150 $x206)))
 (let (($x55 (= $x175 true)))
 (let (($x203 (forall ((input.ind-%var195X (_ BitVec 32)) )(let ((?x129 (bvadd (bvmul input.ind-%var195X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x170))))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var195X)))
 (let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var195X)))
 (=> $x110 (= ?x52 ?x95))))))))
 ))
 (let (($x169 (forall ((input.ind-%var194X (_ BitVec 32)) )(let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var194X)))
 (= $x110 (and (bvule (_ bv0 32) input.ind-%var194X) (bvult input.ind-%var194X input.dst.llvm-%n)))))
 ))
 (let (($x23 (and $x169 $x203)))
 (let (($x77 (= $x23 true)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x149 (concat ?x200 (concat ?x124 ?x163)))))
 (let (($x205 (= ?x123 input.dst.llvm-%x)))
 (let (($x143 (= $x205 true)))
 (let (($x180 (= $x143 true)))
 (let (($x132 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x12 (= $x132 true)))
 (let (($x37 (= $x12 true)))
 (let (($x204 (= $x37 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x105)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x88)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x108)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x94 $x7)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x99 $x75)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x102 $x18)))
 (let (($x101 (not $x104)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x56 $x74)))
 (let (($x47 (and (not $x41) $x101)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x11 $x66)))
 (let (($x53 (not $x89)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x73 $x82)))
 (let (($x87 (and (not $x39) $x53)))
 (let (($x109 (and (and (and (and (and (and $x87 $x47) $x107) $x90) $x83) $x64) $x91)))
 (let (($x126 (and $x109 $x14)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x45 (or false (or false (and (and true (or $x84 $x57)) (or $x65 $x28))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x45)))
 (let (($x128 (and $x103 $x126)))
 (let (($x133 (= $x128 true)))
 (let (($x111 (= $x133 true)))
 (let (($x117 (= $x111 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x85 (concat ?x69 (concat ?x86 ?x51)))))
 (let (($x13 (= ?x80 input.dst.llvm-%n)))
 (let (($x46 (= $x13 true)))
 (let (($x50 (= $x46 true)))
 (let (($x157 (and $x50 $x117)))
 (let (($x112 (and $x157 $x204)))
 (let (($x138 (and $x112 $x180)))
 (let (($x209 (and $x138 $x77)))
 (let (($x196 (and $x209 $x55)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x36 $x196)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x195 (and $x140 $x134)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x5 $x195)))
 (let (($x232 (=> $x144 $x231)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x228 (forall ((input.ind-%var207X (_ BitVec 32)) )(let ((?x129 (bvadd (bvmul input.ind-%var207X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x170))))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var207X)))
 (let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var207X)))
 (=> $x110 (= ?x52 ?x95))))))))
 ))
 (let (($x187 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var206X)))
 (= $x110 (and (bvule (_ bv0 32) input.ind-%var206X) (bvult input.ind-%var206X (_ bv0 32))))))
 ))
 (let (($x229 (and $x187 $x228)))
 (let (($x197 (= true true)))
 (let (($x230 (and $x197 $x229)))
 (let (($x231 (= $x230 true)))
 (let (($x206 (forall ((input.ind-%var201X (_ BitVec 32)) )(let ((?x137 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var201X)))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var201X)))
 (let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var201X)))
 (=> $x110 (= ?x52 ?x137))))))
 ))
 (let (($x150 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var200X)))
 (let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var200X)))
 (= $x110 $x121))))
 ))
 (let (($x175 (and $x150 $x206)))
 (let (($x55 (= $x175 true)))
 (let (($x203 (forall ((input.ind-%var195X (_ BitVec 32)) )(let ((?x129 (bvadd (bvmul input.ind-%var195X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x170))))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var195X)))
 (let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var195X)))
 (=> $x110 (= ?x52 ?x95))))))))
 ))
 (let (($x169 (forall ((input.ind-%var194X (_ BitVec 32)) )(let (($x110 (input.spec-%var-x-1.0.1 input.ind-%var194X)))
 (= $x110 (and (bvule (_ bv0 32) input.ind-%var194X) (bvult input.ind-%var194X input.dst.llvm-%n)))))
 ))
 (let (($x23 (and $x169 $x203)))
 (let (($x77 (= $x23 true)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x149 (concat ?x200 (concat ?x124 ?x163)))))
 (let (($x205 (= ?x123 input.dst.llvm-%x)))
 (let (($x143 (= $x205 true)))
 (let (($x180 (= $x143 true)))
 (let (($x132 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x12 (= $x132 true)))
 (let (($x37 (= $x12 true)))
 (let (($x204 (= $x37 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x105)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x88)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x108)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x94 $x7)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x99 $x75)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x102 $x18)))
 (let (($x101 (not $x104)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x56 $x74)))
 (let (($x47 (and (not $x41) $x101)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x11 $x66)))
 (let (($x53 (not $x89)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x73 $x82)))
 (let (($x87 (and (not $x39) $x53)))
 (let (($x109 (and (and (and (and (and (and $x87 $x47) $x107) $x90) $x83) $x64) $x91)))
 (let (($x126 (and $x109 $x14)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x45 (or false (or false (and (and true (or $x84 $x57)) (or $x65 $x28))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x45)))
 (let (($x128 (and $x103 $x126)))
 (let (($x133 (= $x128 true)))
 (let (($x111 (= $x133 true)))
 (let (($x117 (= $x111 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x85 (concat ?x69 (concat ?x86 ?x51)))))
 (let (($x13 (= ?x80 input.dst.llvm-%n)))
 (let (($x46 (= $x13 true)))
 (let (($x50 (= $x46 true)))
 (let (($x157 (and $x50 $x117)))
 (let (($x112 (and $x157 $x204)))
 (let (($x138 (and $x112 $x180)))
 (let (($x209 (and $x138 $x77)))
 (let (($x196 (and $x209 $x55)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x36 $x196)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x195 (and $x140 $x134)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x5 $x195)))
 (let (($x232 (=> $x144 $x231)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var206X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var207X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var206X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var207X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x179 (forall ((input.ind-%var245X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var245X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x147))))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var245X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var245X)))
 (=> $x169 (= ?x95 ?x232))))))))
 ))
 (let (($x224 (forall ((input.ind-%var244X (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var244X)))
 (= $x169 (and (bvule (_ bv0 32) input.ind-%var244X) (bvult input.ind-%var244X input.dst.llvm-%x)))))
 ))
 (let (($x34 (and $x224 $x179)))
 (let (($x213 (= true true)))
 (let (($x226 (and $x213 $x34)))
 (let (($x212 (= $x226 true)))
 (let (($x159 (forall ((input.ind-%var239X (_ BitVec 32)) )(let ((?x116 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var239X)))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var239X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var239X)))
 (=> $x169 (= ?x95 ?x116))))))
 ))
 (let (($x167 (forall ((input.ind-%var238X (_ BitVec 32)) )(let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var238X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var238X)))
 (= $x169 $x162))))
 ))
 (let (($x131 (and $x167 $x159)))
 (let (($x122 (= $x131 true)))
 (let (($x78 (forall ((input.ind-%var233X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var233X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x147))))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var233X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var233X)))
 (=> $x169 (= ?x95 ?x232))))))))
 ))
 (let (($x153 (forall ((input.ind-%var232X (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var232X)))
 (= $x169 (and (bvule (_ bv0 32) input.ind-%var232X) (bvult input.ind-%var232X input.dst.llvm-%n)))))
 ))
 (let (($x40 (and $x153 $x78)))
 (let (($x165 (= $x40 true)))
 (let ((?x200 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x180 (concat ?x143 (concat ?x181 (concat ?x124 ?x200)))))
 (let (($x138 (= ?x180 input.dst.llvm-%x)))
 (let (($x24 (= $x138 true)))
 (let (($x110 (= $x24 true)))
 (let (($x37 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x204 (= $x37 true)))
 (let (($x112 (= $x204 true)))
 (let (($x38 (= $x112 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x100)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x61)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x99 $x108)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x96 $x7)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x18 $x104)))
 (let (($x47 (not $x101)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x41 $x93)))
 (let (($x107 (and (not $x102) $x47)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x66 $x89)))
 (let (($x87 (not $x53)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x92 $x72)))
 (let (($x74 (and (not $x11) $x87)))
 (let (($x128 (and (and (and (and (and (and $x74 $x107) $x106) $x90) $x75) $x59) $x64)))
 (let (($x133 (and $x128 $x88)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x82 (or false (or false (and (and true (or $x71 $x21)) (or $x26 $x32))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x111 (and $x16 $x133)))
 (let (($x117 (= $x111 true)))
 (let (($x157 (= $x117 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x80 (concat ?x86 (concat ?x30 ?x8)))))
 (let (($x46 (= ?x68 input.dst.llvm-%n)))
 (let (($x50 (= $x46 true)))
 (let (($x15 (= $x50 true)))
 (let (($x136 (and $x15 $x158)))
 (let (($x149 (and $x136 $x38)))
 (let (($x193 (and $x149 $x110)))
 (let (($x156 (and $x193 $x165)))
 (let (($x198 (and $x156 $x122)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x29 $x198)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x120 (and $x35 $x25)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x192 (and $x10 $x120)))
 (let (($x227 (=> $x192 $x212)))
 (not $x227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x179 (forall ((input.ind-%var245X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var245X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x147))))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var245X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var245X)))
 (=> $x169 (= ?x95 ?x232))))))))
 ))
 (let (($x224 (forall ((input.ind-%var244X (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var244X)))
 (= $x169 (and (bvule (_ bv0 32) input.ind-%var244X) (bvult input.ind-%var244X input.dst.llvm-%x)))))
 ))
 (let (($x34 (and $x224 $x179)))
 (let (($x213 (= true true)))
 (let (($x226 (and $x213 $x34)))
 (let (($x212 (= $x226 true)))
 (let (($x159 (forall ((input.ind-%var239X (_ BitVec 32)) )(let ((?x116 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var239X)))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var239X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var239X)))
 (=> $x169 (= ?x95 ?x116))))))
 ))
 (let (($x167 (forall ((input.ind-%var238X (_ BitVec 32)) )(let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var238X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var238X)))
 (= $x169 $x162))))
 ))
 (let (($x131 (and $x167 $x159)))
 (let (($x122 (= $x131 true)))
 (let (($x78 (forall ((input.ind-%var233X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var233X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x147))))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var233X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var233X)))
 (=> $x169 (= ?x95 ?x232))))))))
 ))
 (let (($x153 (forall ((input.ind-%var232X (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var232X)))
 (= $x169 (and (bvule (_ bv0 32) input.ind-%var232X) (bvult input.ind-%var232X input.dst.llvm-%n)))))
 ))
 (let (($x40 (and $x153 $x78)))
 (let (($x165 (= $x40 true)))
 (let ((?x200 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x180 (concat ?x143 (concat ?x181 (concat ?x124 ?x200)))))
 (let (($x138 (= ?x180 input.dst.llvm-%x)))
 (let (($x24 (= $x138 true)))
 (let (($x110 (= $x24 true)))
 (let (($x37 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x204 (= $x37 true)))
 (let (($x112 (= $x204 true)))
 (let (($x38 (= $x112 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x100)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x61)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x99 $x108)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x96 $x7)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x18 $x104)))
 (let (($x47 (not $x101)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x41 $x93)))
 (let (($x107 (and (not $x102) $x47)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x66 $x89)))
 (let (($x87 (not $x53)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x92 $x72)))
 (let (($x74 (and (not $x11) $x87)))
 (let (($x128 (and (and (and (and (and (and $x74 $x107) $x106) $x90) $x75) $x59) $x64)))
 (let (($x133 (and $x128 $x88)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x82 (or false (or false (and (and true (or $x71 $x21)) (or $x26 $x32))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x111 (and $x16 $x133)))
 (let (($x117 (= $x111 true)))
 (let (($x157 (= $x117 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x80 (concat ?x86 (concat ?x30 ?x8)))))
 (let (($x46 (= ?x68 input.dst.llvm-%n)))
 (let (($x50 (= $x46 true)))
 (let (($x15 (= $x50 true)))
 (let (($x136 (and $x15 $x158)))
 (let (($x149 (and $x136 $x38)))
 (let (($x193 (and $x149 $x110)))
 (let (($x156 (and $x193 $x165)))
 (let (($x198 (and $x156 $x122)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x29 $x198)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x120 (and $x35 $x25)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x192 (and $x10 $x120)))
 (let (($x227 (=> $x192 $x212)))
 (not $x227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var245X!1 () (_ BitVec 32)
    #x04d22002)
  (define-fun input.ind-%var244X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00024344)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x28002820)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00a05343)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00024347)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00024344)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00a05343) #x28
    (ite (= x!0 #x00a05340) #x20
    (ite (= x!0 #x00a05341) #x28
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (not (bvule (concat (k!2 #x00024347)
                          (k!2 #x00024346)
                          (k!2 #x00024345)
                          (k!2 #x00024344))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var244X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var245X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf939e178)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7769a53)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9ce8cd27)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf939e179) #x00
    (ite (= x!0 #xf7769a52) #x39
    (ite (= x!0 #xf7769a50) #x78
    (ite (= x!0 #x9ce8cd25) #x00
    (ite (= x!0 #x9ce8cd27) #x00
    (ite (= x!0 #x9ce8cd24) #x00
    (ite (= x!0 #xf939e17a) #x00
    (ite (= x!0 #x9ce8cd26) #x00
    (ite (= x!0 #xf7769a51) #xe1
    (ite (= x!0 #xf7769a53) #xf9
    (ite (= x!0 #xf939e17b) #x00
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x211 (forall ((input.ind-%var279X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var279X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x223))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var279X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var279X)))
 (=> $x153 (= ?x232 ?x227))))))))
 ))
 (let (($x173 (forall ((input.ind-%var278X (_ BitVec 32)) )(let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var278X)))
 (= $x153 (and (bvule (_ bv0 32) input.ind-%var278X) (bvult input.ind-%var278X (_ bv0 32))))))
 ))
 (let (($x182 (and $x173 $x211)))
 (let (($x217 (= true true)))
 (let (($x119 (and $x217 $x182)))
 (let (($x221 (= $x119 true)))
 (let (($x150 (forall ((input.ind-%var273X (_ BitVec 32)) )(let ((?x175 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var273X)))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var273X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var273X)))
 (=> $x153 (= ?x232 ?x175))))))
 ))
 (let (($x176 (forall ((input.ind-%var272X (_ BitVec 32)) )(let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var272X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var272X)))
 (= $x153 $x189))))
 ))
 (let (($x125 (and $x176 $x150)))
 (let (($x55 (= $x125 true)))
 (let (($x62 (forall ((input.ind-%var267X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var267X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x223))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var267X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var267X)))
 (=> $x153 (= ?x232 ?x227))))))))
 ))
 (let (($x155 (forall ((input.ind-%var266X (_ BitVec 32)) )(let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var266X)))
 (= $x153 (and (bvule (_ bv0 32) input.ind-%var266X) (bvult input.ind-%var266X input.dst.llvm-%n)))))
 ))
 (let (($x79 (and $x155 $x62)))
 (let (($x114 (= $x79 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x24 (concat ?x123 (concat ?x124 ?x181)))))
 (let (($x193 (= ?x110 input.dst.llvm-%x)))
 (let (($x174 (= $x193 true)))
 (let (($x169 (= $x174 true)))
 (let (($x112 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x38 (= $x112 true)))
 (let (($x149 (= $x38 true)))
 (let (($x205 (= $x149 true)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x126)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x83)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (and $x96 $x94)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x105 $x108)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x104 $x101)))
 (let (($x107 (not $x47)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x102 $x98)))
 (let (($x106 (and (not $x18) $x107)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x89 $x53)))
 (let (($x74 (not $x87)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x39 $x63)))
 (let (($x93 (and (not $x66) $x74)))
 (let (($x111 (and (and (and (and (and (and $x93 $x106) $x109) $x90) $x7) $x14) $x59)))
 (let (($x117 (and $x111 $x61)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x72 (or false (or false (and (and true (or $x81 $x28)) (or $x103 $x73))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x72)))
 (let (($x157 (and $x56 $x117)))
 (let (($x158 (= $x157 true)))
 (let (($x136 (= $x158 true)))
 (let (($x166 (= $x136 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x68 (concat ?x30 (concat ?x69 ?x17)))))
 (let (($x50 (= ?x13 input.dst.llvm-%n)))
 (let (($x15 (= $x50 true)))
 (let (($x54 (= $x15 true)))
 (let (($x132 (and $x54 $x166)))
 (let (($x143 (and $x132 $x205)))
 (let (($x160 (and $x143 $x169)))
 (let (($x127 (and $x160 $x114)))
 (let (($x191 (and $x127 $x55)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x140 $x191)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x186 (and $x58 $x70)))
 (let (($x177 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x177 $x186)))
 (let (($x76 (=> $x130 $x221)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x211 (forall ((input.ind-%var279X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var279X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x223))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var279X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var279X)))
 (=> $x153 (= ?x232 ?x227))))))))
 ))
 (let (($x173 (forall ((input.ind-%var278X (_ BitVec 32)) )(let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var278X)))
 (= $x153 (and (bvule (_ bv0 32) input.ind-%var278X) (bvult input.ind-%var278X (_ bv0 32))))))
 ))
 (let (($x182 (and $x173 $x211)))
 (let (($x217 (= true true)))
 (let (($x119 (and $x217 $x182)))
 (let (($x221 (= $x119 true)))
 (let (($x150 (forall ((input.ind-%var273X (_ BitVec 32)) )(let ((?x175 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var273X)))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var273X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var273X)))
 (=> $x153 (= ?x232 ?x175))))))
 ))
 (let (($x176 (forall ((input.ind-%var272X (_ BitVec 32)) )(let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var272X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var272X)))
 (= $x153 $x189))))
 ))
 (let (($x125 (and $x176 $x150)))
 (let (($x55 (= $x125 true)))
 (let (($x62 (forall ((input.ind-%var267X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var267X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x223))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var267X)))
 (let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var267X)))
 (=> $x153 (= ?x232 ?x227))))))))
 ))
 (let (($x155 (forall ((input.ind-%var266X (_ BitVec 32)) )(let (($x153 (input.spec-%var-x-1.0.1 input.ind-%var266X)))
 (= $x153 (and (bvule (_ bv0 32) input.ind-%var266X) (bvult input.ind-%var266X input.dst.llvm-%n)))))
 ))
 (let (($x79 (and $x155 $x62)))
 (let (($x114 (= $x79 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x24 (concat ?x123 (concat ?x124 ?x181)))))
 (let (($x193 (= ?x110 input.dst.llvm-%x)))
 (let (($x174 (= $x193 true)))
 (let (($x169 (= $x174 true)))
 (let (($x112 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x38 (= $x112 true)))
 (let (($x149 (= $x38 true)))
 (let (($x205 (= $x149 true)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x126)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x83)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (and $x96 $x94)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x105 $x108)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x104 $x101)))
 (let (($x107 (not $x47)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x102 $x98)))
 (let (($x106 (and (not $x18) $x107)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x89 $x53)))
 (let (($x74 (not $x87)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x39 $x63)))
 (let (($x93 (and (not $x66) $x74)))
 (let (($x111 (and (and (and (and (and (and $x93 $x106) $x109) $x90) $x7) $x14) $x59)))
 (let (($x117 (and $x111 $x61)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x72 (or false (or false (and (and true (or $x81 $x28)) (or $x103 $x73))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x72)))
 (let (($x157 (and $x56 $x117)))
 (let (($x158 (= $x157 true)))
 (let (($x136 (= $x158 true)))
 (let (($x166 (= $x136 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x68 (concat ?x30 (concat ?x69 ?x17)))))
 (let (($x50 (= ?x13 input.dst.llvm-%n)))
 (let (($x15 (= $x50 true)))
 (let (($x54 (= $x15 true)))
 (let (($x132 (and $x54 $x166)))
 (let (($x143 (and $x132 $x205)))
 (let (($x160 (and $x143 $x169)))
 (let (($x127 (and $x160 $x114)))
 (let (($x191 (and $x127 $x55)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x140 $x191)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x186 (and $x58 $x70)))
 (let (($x177 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x177 $x186)))
 (let (($x76 (=> $x130 $x221)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var279X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.ind-%var278X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var278X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.ind-%var279X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x23 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var313X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x199))))
 (let ((?x227 (input.spec-%var-x-1.1.1 input.ind-%var313X)))
 (let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var313X)))
 (=> $x155 (= ?x227 ?x76))))))))
 ))
 (let (($x170 (forall ((input.ind-%var312X (_ BitVec 32)) )(let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var312X)))
 (= $x155 (and (bvule (_ bv0 32) input.ind-%var312X) (bvult input.ind-%var312X (_ bv0 32))))))
 ))
 (let (($x121 (and $x170 $x23)))
 (let (($x222 (= true true)))
 (let (($x201 (and $x222 $x121)))
 (let (($x202 (= $x201 true)))
 (let (($x167 (forall ((input.ind-%var307X (_ BitVec 32)) )(let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var307X)))
 (let ((?x227 (input.spec-%var-x-1.1.1 input.ind-%var307X)))
 (let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var307X)))
 (=> $x155 (= ?x227 ?x131))))))
 ))
 (let (($x203 (forall ((input.ind-%var306X (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var306X)))
 (let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var306X)))
 (= $x155 $x168))))
 ))
 (let (($x207 (and $x203 $x167)))
 (let (($x122 (= $x207 true)))
 (let (($x84 (forall ((input.ind-%var301X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var301X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x199))))
 (let ((?x227 (input.spec-%var-x-1.1.1 input.ind-%var301X)))
 (let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var301X)))
 (=> $x155 (= ?x227 ?x76))))))))
 ))
 (let (($x215 (forall ((input.ind-%var300X (_ BitVec 32)) )(let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var300X)))
 (= $x155 (and (bvule (_ bv0 32) input.ind-%var300X) (bvult input.ind-%var300X input.dst.llvm-%n)))))
 ))
 (let (($x33 (and $x215 $x84)))
 (let (($x152 (= $x33 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x174 (concat ?x180 (concat ?x124 ?x123)))))
 (let (($x160 (= ?x169 input.dst.llvm-%x)))
 (let (($x135 (= $x160 true)))
 (let (($x153 (= $x135 true)))
 (let (($x149 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x205 (= $x149 true)))
 (let (($x143 (= $x205 true)))
 (let (($x138 (= $x143 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x133)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x75)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x105 $x99)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x100 $x94)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x101 $x47)))
 (let (($x106 (not $x107)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x18 $x91)))
 (let (($x109 (and (not $x104) $x106)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x53 $x87)))
 (let (($x93 (not $x74)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x11 $x57)))
 (let (($x98 (and (not $x89) $x93)))
 (let (($x157 (and (and (and (and (and (and $x98 $x109) $x128) $x90) $x108) $x88) $x14)))
 (let (($x158 (and $x157 $x83)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x63 (or false (or false (and (and true (or $x67 $x32)) (or $x16 $x92))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x136 (and $x41 $x158)))
 (let (($x166 (= $x136 true)))
 (let (($x132 (= $x166 true)))
 (let (($x12 (= $x132 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x13 (concat ?x69 (concat ?x86 ?x51)))))
 (let (($x15 (= ?x46 input.dst.llvm-%n)))
 (let (($x54 (= $x15 true)))
 (let (($x20 (= $x54 true)))
 (let (($x37 (and $x20 $x12)))
 (let (($x24 (and $x37 $x138)))
 (let (($x187 (and $x24 $x153)))
 (let (($x178 (and $x187 $x152)))
 (let (($x77 (and $x178 $x122)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x35 $x77)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x188 (and $x49 $x171)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x206 (and $x5 $x188)))
 (let (($x146 (=> $x206 $x202)))
 (not $x146)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x23 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var313X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x199))))
 (let ((?x227 (input.spec-%var-x-1.1.1 input.ind-%var313X)))
 (let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var313X)))
 (=> $x155 (= ?x227 ?x76))))))))
 ))
 (let (($x170 (forall ((input.ind-%var312X (_ BitVec 32)) )(let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var312X)))
 (= $x155 (and (bvule (_ bv0 32) input.ind-%var312X) (bvult input.ind-%var312X (_ bv0 32))))))
 ))
 (let (($x121 (and $x170 $x23)))
 (let (($x222 (= true true)))
 (let (($x201 (and $x222 $x121)))
 (let (($x202 (= $x201 true)))
 (let (($x167 (forall ((input.ind-%var307X (_ BitVec 32)) )(let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var307X)))
 (let ((?x227 (input.spec-%var-x-1.1.1 input.ind-%var307X)))
 (let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var307X)))
 (=> $x155 (= ?x227 ?x131))))))
 ))
 (let (($x203 (forall ((input.ind-%var306X (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var306X)))
 (let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var306X)))
 (= $x155 $x168))))
 ))
 (let (($x207 (and $x203 $x167)))
 (let (($x122 (= $x207 true)))
 (let (($x84 (forall ((input.ind-%var301X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var301X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x199))))
 (let ((?x227 (input.spec-%var-x-1.1.1 input.ind-%var301X)))
 (let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var301X)))
 (=> $x155 (= ?x227 ?x76))))))))
 ))
 (let (($x215 (forall ((input.ind-%var300X (_ BitVec 32)) )(let (($x155 (input.spec-%var-x-1.0.1 input.ind-%var300X)))
 (= $x155 (and (bvule (_ bv0 32) input.ind-%var300X) (bvult input.ind-%var300X input.dst.llvm-%n)))))
 ))
 (let (($x33 (and $x215 $x84)))
 (let (($x152 (= $x33 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x174 (concat ?x180 (concat ?x124 ?x123)))))
 (let (($x160 (= ?x169 input.dst.llvm-%x)))
 (let (($x135 (= $x160 true)))
 (let (($x153 (= $x135 true)))
 (let (($x149 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x205 (= $x149 true)))
 (let (($x143 (= $x205 true)))
 (let (($x138 (= $x143 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x133)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x75)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x105 $x99)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x100 $x94)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x101 $x47)))
 (let (($x106 (not $x107)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x18 $x91)))
 (let (($x109 (and (not $x104) $x106)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x53 $x87)))
 (let (($x93 (not $x74)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x11 $x57)))
 (let (($x98 (and (not $x89) $x93)))
 (let (($x157 (and (and (and (and (and (and $x98 $x109) $x128) $x90) $x108) $x88) $x14)))
 (let (($x158 (and $x157 $x83)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x63 (or false (or false (and (and true (or $x67 $x32)) (or $x16 $x92))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x136 (and $x41 $x158)))
 (let (($x166 (= $x136 true)))
 (let (($x132 (= $x166 true)))
 (let (($x12 (= $x132 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x13 (concat ?x69 (concat ?x86 ?x51)))))
 (let (($x15 (= ?x46 input.dst.llvm-%n)))
 (let (($x54 (= $x15 true)))
 (let (($x20 (= $x54 true)))
 (let (($x37 (and $x20 $x12)))
 (let (($x24 (and $x37 $x138)))
 (let (($x187 (and $x24 $x153)))
 (let (($x178 (and $x187 $x152)))
 (let (($x77 (and $x178 $x122)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x35 $x77)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x188 (and $x49 $x171)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x206 (and $x5 $x188)))
 (let (($x146 (=> $x206 $x202)))
 (not $x146)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var312X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var313X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var312X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.ind-%var313X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (forall ((input.ind-%var347X (_ BitVec 32)) )(let ((?x206 (bvadd (bvmul input.ind-%var347X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x164))))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var347X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var347X)))
 (=> $x215 (= ?x76 ?x146))))))))
 ))
 (let (($x147 (forall ((input.ind-%var346X (_ BitVec 32)) )(let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var346X)))
 (= $x215 (and (bvule (_ bv0 32) input.ind-%var346X) (bvult input.ind-%var346X (_ bv0 32))))))
 ))
 (let (($x162 (and $x147 $x40)))
 (let (($x154 (= true true)))
 (let (($x185 (and $x154 $x162)))
 (let (($x6 (= $x185 true)))
 (let (($x176 (forall ((input.ind-%var341X (_ BitVec 32)) )(let ((?x125 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var341X)))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var341X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var341X)))
 (=> $x215 (= ?x76 ?x125))))))
 ))
 (let (($x78 (forall ((input.ind-%var340X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var340X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var340X)))
 (= $x215 $x195))))
 ))
 (let (($x209 (and $x78 $x176)))
 (let (($x55 (= $x209 true)))
 (let (($x71 (forall ((input.ind-%var335X (_ BitVec 32)) )(let ((?x206 (bvadd (bvmul input.ind-%var335X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x164))))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var335X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var335X)))
 (=> $x215 (= ?x76 ?x146))))))))
 ))
 (let (($x216 (forall ((input.ind-%var334X (_ BitVec 32)) )(let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var334X)))
 (= $x215 (and (bvule (_ bv0 32) input.ind-%var334X) (bvult input.ind-%var334X input.dst.llvm-%n)))))
 ))
 (let (($x31 (and $x216 $x71)))
 (let (($x163 (= $x31 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x135 (concat ?x110 (concat ?x124 ?x180)))))
 (let (($x187 (= ?x153 input.dst.llvm-%x)))
 (let (($x142 (= $x187 true)))
 (let (($x155 (= $x142 true)))
 (let (($x143 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x138 (= $x143 true)))
 (let (($x24 (= $x138 true)))
 (let (($x193 (= $x24 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x117)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x7)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x100 $x96)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x126 $x99)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x47 $x107)))
 (let (($x109 (not $x106)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x104 $x64)))
 (let (($x128 (and (not $x101) $x109)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x87 $x74)))
 (let (($x98 (not $x93)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x66 $x21)))
 (let (($x91 (and (not $x53) $x98)))
 (let (($x136 (and (and (and (and (and (and $x91 $x128) $x111) $x90) $x94) $x61) $x88)))
 (let (($x166 (and $x136 $x75)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x103)))
 (let (($x57 (or false (or false (and (and true (or $x45 $x73)) (or $x56 $x39))))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x132 (and $x102 $x166)))
 (let (($x12 (= $x132 true)))
 (let (($x37 (= $x12 true)))
 (let (($x204 (= $x37 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x46 (concat ?x86 (concat ?x30 ?x8)))))
 (let (($x54 (= ?x50 input.dst.llvm-%n)))
 (let (($x20 (= $x54 true)))
 (let (($x65 (= $x20 true)))
 (let (($x112 (and $x65 $x204)))
 (let (($x174 (and $x112 $x193)))
 (let (($x224 (and $x174 $x155)))
 (let (($x197 (and $x224 $x163)))
 (let (($x165 (and $x197 $x55)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x58 $x165)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x233 (and $x10 $x137)))
 (let (($x210 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x159 (and $x210 $x233)))
 (let (($x151 (=> $x159 $x6)))
 (not $x151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (forall ((input.ind-%var347X (_ BitVec 32)) )(let ((?x206 (bvadd (bvmul input.ind-%var347X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x164))))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var347X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var347X)))
 (=> $x215 (= ?x76 ?x146))))))))
 ))
 (let (($x147 (forall ((input.ind-%var346X (_ BitVec 32)) )(let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var346X)))
 (= $x215 (and (bvule (_ bv0 32) input.ind-%var346X) (bvult input.ind-%var346X (_ bv0 32))))))
 ))
 (let (($x162 (and $x147 $x40)))
 (let (($x154 (= true true)))
 (let (($x185 (and $x154 $x162)))
 (let (($x6 (= $x185 true)))
 (let (($x176 (forall ((input.ind-%var341X (_ BitVec 32)) )(let ((?x125 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var341X)))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var341X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var341X)))
 (=> $x215 (= ?x76 ?x125))))))
 ))
 (let (($x78 (forall ((input.ind-%var340X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var340X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var340X)))
 (= $x215 $x195))))
 ))
 (let (($x209 (and $x78 $x176)))
 (let (($x55 (= $x209 true)))
 (let (($x71 (forall ((input.ind-%var335X (_ BitVec 32)) )(let ((?x206 (bvadd (bvmul input.ind-%var335X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x164))))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var335X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var335X)))
 (=> $x215 (= ?x76 ?x146))))))))
 ))
 (let (($x216 (forall ((input.ind-%var334X (_ BitVec 32)) )(let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var334X)))
 (= $x215 (and (bvule (_ bv0 32) input.ind-%var334X) (bvult input.ind-%var334X input.dst.llvm-%n)))))
 ))
 (let (($x31 (and $x216 $x71)))
 (let (($x163 (= $x31 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x135 (concat ?x110 (concat ?x124 ?x180)))))
 (let (($x187 (= ?x153 input.dst.llvm-%x)))
 (let (($x142 (= $x187 true)))
 (let (($x155 (= $x142 true)))
 (let (($x143 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x138 (= $x143 true)))
 (let (($x24 (= $x138 true)))
 (let (($x193 (= $x24 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x117)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x7)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x100 $x96)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x126 $x99)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x47 $x107)))
 (let (($x109 (not $x106)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x104 $x64)))
 (let (($x128 (and (not $x101) $x109)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x87 $x74)))
 (let (($x98 (not $x93)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x66 $x21)))
 (let (($x91 (and (not $x53) $x98)))
 (let (($x136 (and (and (and (and (and (and $x91 $x128) $x111) $x90) $x94) $x61) $x88)))
 (let (($x166 (and $x136 $x75)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x103)))
 (let (($x57 (or false (or false (and (and true (or $x45 $x73)) (or $x56 $x39))))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x132 (and $x102 $x166)))
 (let (($x12 (= $x132 true)))
 (let (($x37 (= $x12 true)))
 (let (($x204 (= $x37 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x46 (concat ?x86 (concat ?x30 ?x8)))))
 (let (($x54 (= ?x50 input.dst.llvm-%n)))
 (let (($x20 (= $x54 true)))
 (let (($x65 (= $x20 true)))
 (let (($x112 (and $x65 $x204)))
 (let (($x174 (and $x112 $x193)))
 (let (($x224 (and $x174 $x155)))
 (let (($x197 (and $x224 $x163)))
 (let (($x165 (and $x197 $x55)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x58 $x165)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x233 (and $x10 $x137)))
 (let (($x210 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x159 (and $x210 $x233)))
 (let (($x151 (=> $x159 $x6)))
 (not $x151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var347X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.ind-%var346X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var346X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.ind-%var347X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x79 (forall ((input.ind-%var381X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var381X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x141))))
 (let ((?x146 (input.spec-%var-x-1.1.1 input.ind-%var381X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var381X)))
 (=> $x216 (= ?x146 ?x151))))))))
 ))
 (let (($x223 (forall ((input.ind-%var380X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var380X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var380X) (bvult input.ind-%var380X input.dst.llvm-%x)))))
 ))
 (let (($x189 (and $x223 $x79)))
 (let (($x139 (= true true)))
 (let (($x161 (and $x139 $x189)))
 (let (($x42 (= $x161 true)))
 (let (($x203 (forall ((input.ind-%var375X (_ BitVec 32)) )(let ((?x207 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var375X)))
 (let ((?x146 (input.spec-%var-x-1.1.1 input.ind-%var375X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var375X)))
 (=> $x216 (= ?x146 ?x207))))))
 ))
 (let (($x62 (forall ((input.ind-%var374X (_ BitVec 32)) )(let (($x120 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var374X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var374X)))
 (= $x216 $x120))))
 ))
 (let (($x156 (and $x62 $x203)))
 (let (($x122 (= $x156 true)))
 (let (($x81 (forall ((input.ind-%var369X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var369X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x141))))
 (let ((?x146 (input.spec-%var-x-1.1.1 input.ind-%var369X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var369X)))
 (=> $x216 (= ?x146 ?x151))))))))
 ))
 (let (($x219 (forall ((input.ind-%var368X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var368X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var368X) (bvult input.ind-%var368X input.dst.llvm-%n)))))
 ))
 (let (($x19 (and $x219 $x81)))
 (let (($x200 (= $x19 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x142 (concat ?x169 (concat ?x124 ?x110)))))
 (let (($x224 (= ?x155 input.dst.llvm-%x)))
 (let (($x214 (= $x224 true)))
 (let (($x215 (= $x214 true)))
 (let (($x24 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x193 (= $x24 true)))
 (let (($x174 (= $x193 true)))
 (let (($x160 (= $x174 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x158)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x108)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x126 $x105)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x133 $x96)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x107 $x106)))
 (let (($x128 (not $x109)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x101 $x59)))
 (let (($x111 (and (not $x47) $x128)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x74 $x93)))
 (let (($x91 (not $x98)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x89 $x28)))
 (let (($x64 (and (not $x87) $x91)))
 (let (($x132 (and (and (and (and (and (and $x64 $x111) $x157) $x90) $x99) $x83) $x61)))
 (let (($x12 (and $x132 $x7)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x21 (or false (or false (and (and true (or $x82 $x92)) (or $x41 $x11))))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x37 (and $x18 $x12)))
 (let (($x204 (= $x37 true)))
 (let (($x112 (= $x204 true)))
 (let (($x38 (= $x112 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x50 (concat ?x30 (concat ?x69 ?x17)))))
 (let (($x20 (= ?x15 input.dst.llvm-%n)))
 (let (($x65 (= $x20 true)))
 (let (($x26 (= $x65 true)))
 (let (($x149 (and $x26 $x38)))
 (let (($x135 (and $x149 $x160)))
 (let (($x173 (and $x135 $x215)))
 (let (($x213 (and $x173 $x200)))
 (let (($x114 (and $x213 $x122)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x49 $x114)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x194 (and $x177 $x116)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x9 $x194)))
 (let (($x52 (=> $x150 $x42)))
 (not $x52)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x79 (forall ((input.ind-%var381X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var381X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x141))))
 (let ((?x146 (input.spec-%var-x-1.1.1 input.ind-%var381X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var381X)))
 (=> $x216 (= ?x146 ?x151))))))))
 ))
 (let (($x223 (forall ((input.ind-%var380X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var380X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var380X) (bvult input.ind-%var380X input.dst.llvm-%x)))))
 ))
 (let (($x189 (and $x223 $x79)))
 (let (($x139 (= true true)))
 (let (($x161 (and $x139 $x189)))
 (let (($x42 (= $x161 true)))
 (let (($x203 (forall ((input.ind-%var375X (_ BitVec 32)) )(let ((?x207 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var375X)))
 (let ((?x146 (input.spec-%var-x-1.1.1 input.ind-%var375X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var375X)))
 (=> $x216 (= ?x146 ?x207))))))
 ))
 (let (($x62 (forall ((input.ind-%var374X (_ BitVec 32)) )(let (($x120 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var374X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var374X)))
 (= $x216 $x120))))
 ))
 (let (($x156 (and $x62 $x203)))
 (let (($x122 (= $x156 true)))
 (let (($x81 (forall ((input.ind-%var369X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var369X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x141))))
 (let ((?x146 (input.spec-%var-x-1.1.1 input.ind-%var369X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var369X)))
 (=> $x216 (= ?x146 ?x151))))))))
 ))
 (let (($x219 (forall ((input.ind-%var368X (_ BitVec 32)) )(let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var368X)))
 (= $x216 (and (bvule (_ bv0 32) input.ind-%var368X) (bvult input.ind-%var368X input.dst.llvm-%n)))))
 ))
 (let (($x19 (and $x219 $x81)))
 (let (($x200 (= $x19 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x142 (concat ?x169 (concat ?x124 ?x110)))))
 (let (($x224 (= ?x155 input.dst.llvm-%x)))
 (let (($x214 (= $x224 true)))
 (let (($x215 (= $x214 true)))
 (let (($x24 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x193 (= $x24 true)))
 (let (($x174 (= $x193 true)))
 (let (($x160 (= $x174 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x158)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x108)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x126 $x105)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x133 $x96)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x107 $x106)))
 (let (($x128 (not $x109)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x101 $x59)))
 (let (($x111 (and (not $x47) $x128)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x74 $x93)))
 (let (($x91 (not $x98)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x89 $x28)))
 (let (($x64 (and (not $x87) $x91)))
 (let (($x132 (and (and (and (and (and (and $x64 $x111) $x157) $x90) $x99) $x83) $x61)))
 (let (($x12 (and $x132 $x7)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x21 (or false (or false (and (and true (or $x82 $x92)) (or $x41 $x11))))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x37 (and $x18 $x12)))
 (let (($x204 (= $x37 true)))
 (let (($x112 (= $x204 true)))
 (let (($x38 (= $x112 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x50 (concat ?x30 (concat ?x69 ?x17)))))
 (let (($x20 (= ?x15 input.dst.llvm-%n)))
 (let (($x65 (= $x20 true)))
 (let (($x26 (= $x65 true)))
 (let (($x149 (and $x26 $x38)))
 (let (($x135 (and $x149 $x160)))
 (let (($x173 (and $x135 $x215)))
 (let (($x213 (and $x173 $x200)))
 (let (($x114 (and $x213 $x122)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x49 $x114)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x194 (and $x177 $x116)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x9 $x194)))
 (let (($x52 (=> $x150 $x42)))
 (not $x52)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var380X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var381X!1 () (_ BitVec 32)
    #x04d22002)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00024344)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x28002820)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00a05343)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00024347)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00024344)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00a05343) #x28
    (ite (= x!0 #x00a05340) #x20
    (ite (= x!0 #x00a05341) #x28
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (not (bvule (concat (k!2 #x00024347)
                          (k!2 #x00024346)
                          (k!2 #x00024345)
                          (k!2 #x00024344))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var380X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.ind-%var381X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf939e178)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7769a53)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9ce8cd27)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x9ce8cd25) #x00
    (ite (= x!0 #xf7769a52) #x39
    (ite (= x!0 #xf939e17b) #x00
    (ite (= x!0 #x9ce8cd24) #x00
    (ite (= x!0 #x9ce8cd27) #x00
    (ite (= x!0 #x9ce8cd26) #x00
    (ite (= x!0 #xf939e17a) #x00
    (ite (= x!0 #xf7769a51) #xe1
    (ite (= x!0 #xf939e179) #x00
    (ite (= x!0 #xf7769a53) #xf9
    (ite (= x!0 #xf7769a50) #x78
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x129 (= false true)))
 (let (($x211 (= $x129 true)))
 (let (($x78 (forall ((input.ind-%var409X (_ BitVec 32)) )(let ((?x209 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var409X)))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var409X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var409X)))
 (=> $x219 (= ?x151 ?x209))))))
 ))
 (let (($x84 (forall ((input.ind-%var408X (_ BitVec 32)) )(let (($x186 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var408X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var408X)))
 (= $x219 $x186))))
 ))
 (let (($x127 (and $x84 $x78)))
 (let (($x55 (= $x127 true)))
 (let (($x67 (forall ((input.ind-%var403X (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul input.ind-%var403X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x115))))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var403X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var403X)))
 (=> $x219 (= ?x151 ?x52))))))))
 ))
 (let (($x22 (forall ((input.ind-%var402X (_ BitVec 32)) )(let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var402X)))
 (= $x219 (and (bvule (_ bv0 32) input.ind-%var402X) (bvult input.ind-%var402X input.dst.llvm-%n)))))
 ))
 (let (($x60 (and $x22 $x67)))
 (let (($x181 (= $x60 true)))
 (let (($x215 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x173 (= $x215 true)))
 (let (($x218 (= $x173 true)))
 (let (($x216 (= $x218 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x193)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x138)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x205)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x204)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (and $x37 $x112)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x12 $x38)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x94 $x83)))
 (let (($x108 (not $x166)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x96 $x99)))
 (let (($x132 (and (not $x75) $x108)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x90 $x117)))
 (let (($x126 (not $x133)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x89 $x28)))
 (let (($x105 (and (not $x97) $x126)))
 (let (($x169 (and (and (and (and (and (and $x105 $x132) $x158) $x7) $x149) $x143) $x24)))
 (let (($x113 (and $x169 $x174)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x98)))
 (let (($x88 (or false (or false (and (and true (or $x91 $x64)) (or $x107 $x106))))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x88)))
 (let (($x124 (and $x136 $x113)))
 (let (($x110 (= $x124 true)))
 (let (($x180 (= $x110 true)))
 (let (($x153 (= $x180 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x41 (concat ?x56 (concat ?x82 ?x32)))))
 (let (($x57 (= ?x63 input.dst.llvm-%n)))
 (let (($x102 (= $x57 true)))
 (let (($x66 (= $x102 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x15 (concat ?x69 (concat ?x86 ?x51)))))
 (let (($x65 (= ?x54 input.dst.llvm-%x)))
 (let (($x26 (= $x65 true)))
 (let (($x103 (= $x26 true)))
 (let (($x21 (and $x103 $x66)))
 (let (($x155 (and $x21 $x153)))
 (let (($x170 (and $x155 $x216)))
 (let (($x217 (and $x170 $x181)))
 (let (($x152 (and $x217 $x55)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x175 (and $x10 $x152)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x190 (and $x5 $x175)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x167 (and $x43 $x190)))
 (let (($x206 (=> $x167 $x211)))
 (not $x206)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x129 (= false true)))
 (let (($x211 (= $x129 true)))
 (let (($x78 (forall ((input.ind-%var409X (_ BitVec 32)) )(let ((?x209 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var409X)))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var409X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var409X)))
 (=> $x219 (= ?x151 ?x209))))))
 ))
 (let (($x84 (forall ((input.ind-%var408X (_ BitVec 32)) )(let (($x186 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var408X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var408X)))
 (= $x219 $x186))))
 ))
 (let (($x127 (and $x84 $x78)))
 (let (($x55 (= $x127 true)))
 (let (($x67 (forall ((input.ind-%var403X (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul input.ind-%var403X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x115))))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var403X)))
 (let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var403X)))
 (=> $x219 (= ?x151 ?x52))))))))
 ))
 (let (($x22 (forall ((input.ind-%var402X (_ BitVec 32)) )(let (($x219 (input.spec-%var-x-1.0.1 input.ind-%var402X)))
 (= $x219 (and (bvule (_ bv0 32) input.ind-%var402X) (bvult input.ind-%var402X input.dst.llvm-%n)))))
 ))
 (let (($x60 (and $x22 $x67)))
 (let (($x181 (= $x60 true)))
 (let (($x215 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x173 (= $x215 true)))
 (let (($x218 (= $x173 true)))
 (let (($x216 (= $x218 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x193)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x138)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x205)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x204)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (and $x37 $x112)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x12 $x38)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x94 $x83)))
 (let (($x108 (not $x166)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x96 $x99)))
 (let (($x132 (and (not $x75) $x108)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x90 $x117)))
 (let (($x126 (not $x133)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x89 $x28)))
 (let (($x105 (and (not $x97) $x126)))
 (let (($x169 (and (and (and (and (and (and $x105 $x132) $x158) $x7) $x149) $x143) $x24)))
 (let (($x113 (and $x169 $x174)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x98)))
 (let (($x88 (or false (or false (and (and true (or $x91 $x64)) (or $x107 $x106))))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x88)))
 (let (($x124 (and $x136 $x113)))
 (let (($x110 (= $x124 true)))
 (let (($x180 (= $x110 true)))
 (let (($x153 (= $x180 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x41 (concat ?x56 (concat ?x82 ?x32)))))
 (let (($x57 (= ?x63 input.dst.llvm-%n)))
 (let (($x102 (= $x57 true)))
 (let (($x66 (= $x102 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x15 (concat ?x69 (concat ?x86 ?x51)))))
 (let (($x65 (= ?x54 input.dst.llvm-%x)))
 (let (($x26 (= $x65 true)))
 (let (($x103 (= $x26 true)))
 (let (($x21 (and $x103 $x66)))
 (let (($x155 (and $x21 $x153)))
 (let (($x170 (and $x155 $x216)))
 (let (($x217 (and $x170 $x181)))
 (let (($x152 (and $x217 $x55)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x175 (and $x10 $x152)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x190 (and $x5 $x175)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x167 (and $x43 $x190)))
 (let (($x206 (=> $x167 $x211)))
 (not $x206)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x69fd1474)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x593251f4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x593251f7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x69fd1477)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x69fd1474)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x593251f4)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1d7f81c0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc5111f64)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1d7f81c3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc5111f67)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc5111f64)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1d7f81c0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #xc5111f67)
                        (k!0 #xc5111f66)
                        (k!0 #xc5111f65)
                        (k!0 #xc5111f64))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x24 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x183 (=> $x24 true)))
 (let (($x31 (= $x183 true)))
 (let (($x195 (= $x31 true)))
 (let (($x159 (forall ((input.ind-%var448X (_ BitVec 32)) )(let ((?x122 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var448X)))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var448X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var448X)))
 (=> $x22 (= ?x52 ?x122))))))
 ))
 (let (($x120 (forall ((input.ind-%var447X (_ BitVec 32)) )(let (($x203 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var447X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var447X)))
 (= $x22 $x203))))
 ))
 (let (($x185 (and $x120 $x159)))
 (let (($x114 (= $x185 true)))
 (let (($x154 (forall ((input.ind-%var442X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var442X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x179))))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var442X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var442X)))
 (=> $x22 (= ?x52 ?x125))))))))
 ))
 (let (($x118 (forall ((input.ind-%var441X (_ BitVec 32)) )(let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var441X)))
 (= $x22 (and (bvule (_ bv0 32) input.ind-%var441X) (bvult input.ind-%var441X input.dst.llvm-%n)))))
 ))
 (let (($x162 (and $x118 $x154)))
 (let (($x202 (= $x162 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x216 (concat ?x218 (concat ?x214 (concat ?x153 ?x110)))))
 (let (($x170 (= ?x216 input.dst.llvm-%x)))
 (let (($x225 (= $x170 true)))
 (let (($x219 (= $x225 true)))
 (let (($x169 (= $x24 true)))
 (let (($x193 (= $x169 true)))
 (let (($x174 (= $x193 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x132)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x166)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x105 $x99)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x126 $x75)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x88 $x136)))
 (let (($x28 (not $x89)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x109 $x128)))
 (let (($x100 (and (not $x111) $x28)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x101 $x59)))
 (let (($x107 (not $x47)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x41 $x92)))
 (let (($x106 (and (not $x64) $x107)))
 (let (($x37 (and (and (and (and (and (and $x106 $x100) $x90) $x133) $x61) $x83) $x108)))
 (let (($x204 (and $x37 $x160)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x98 (or false (or false (and (and true (or $x72 $x63)) (or $x21 $x87))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x112 (and $x93 $x204)))
 (let (($x38 (= $x112 true)))
 (let (($x149 (= $x38 true)))
 (let (($x142 (= $x149 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x54 (concat ?x86 (concat ?x30 ?x8)))))
 (let (($x26 (= ?x20 input.dst.llvm-%n)))
 (let (($x103 (= $x26 true)))
 (let (($x53 (= $x103 true)))
 (let (($x205 (and $x53 $x142)))
 (let (($x113 (and $x205 $x174)))
 (let (($x147 (and $x113 $x219)))
 (let (($x71 (and $x147 $x202)))
 (let (($x76 (and $x71 $x114)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x121 (and $x177 $x76)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x141 (and $x210 $x121)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x116 (and $x140 $x141)))
 (let (($x191 (=> $x116 $x195)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x24 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x183 (=> $x24 true)))
 (let (($x31 (= $x183 true)))
 (let (($x195 (= $x31 true)))
 (let (($x159 (forall ((input.ind-%var448X (_ BitVec 32)) )(let ((?x122 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var448X)))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var448X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var448X)))
 (=> $x22 (= ?x52 ?x122))))))
 ))
 (let (($x120 (forall ((input.ind-%var447X (_ BitVec 32)) )(let (($x203 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var447X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var447X)))
 (= $x22 $x203))))
 ))
 (let (($x185 (and $x120 $x159)))
 (let (($x114 (= $x185 true)))
 (let (($x154 (forall ((input.ind-%var442X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var442X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x179))))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var442X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var442X)))
 (=> $x22 (= ?x52 ?x125))))))))
 ))
 (let (($x118 (forall ((input.ind-%var441X (_ BitVec 32)) )(let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var441X)))
 (= $x22 (and (bvule (_ bv0 32) input.ind-%var441X) (bvult input.ind-%var441X input.dst.llvm-%n)))))
 ))
 (let (($x162 (and $x118 $x154)))
 (let (($x202 (= $x162 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x216 (concat ?x218 (concat ?x214 (concat ?x153 ?x110)))))
 (let (($x170 (= ?x216 input.dst.llvm-%x)))
 (let (($x225 (= $x170 true)))
 (let (($x219 (= $x225 true)))
 (let (($x169 (= $x24 true)))
 (let (($x193 (= $x169 true)))
 (let (($x174 (= $x193 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x132)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x166)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x105 $x99)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x126 $x75)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x88 $x136)))
 (let (($x28 (not $x89)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x109 $x128)))
 (let (($x100 (and (not $x111) $x28)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x101 $x59)))
 (let (($x107 (not $x47)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x41 $x92)))
 (let (($x106 (and (not $x64) $x107)))
 (let (($x37 (and (and (and (and (and (and $x106 $x100) $x90) $x133) $x61) $x83) $x108)))
 (let (($x204 (and $x37 $x160)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x98 (or false (or false (and (and true (or $x72 $x63)) (or $x21 $x87))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x112 (and $x93 $x204)))
 (let (($x38 (= $x112 true)))
 (let (($x149 (= $x38 true)))
 (let (($x142 (= $x149 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x54 (concat ?x86 (concat ?x30 ?x8)))))
 (let (($x26 (= ?x20 input.dst.llvm-%n)))
 (let (($x103 (= $x26 true)))
 (let (($x53 (= $x103 true)))
 (let (($x205 (and $x53 $x142)))
 (let (($x113 (and $x205 $x174)))
 (let (($x147 (and $x113 $x219)))
 (let (($x71 (and $x147 $x202)))
 (let (($x76 (and $x71 $x114)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x121 (and $x177 $x76)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x141 (and $x210 $x121)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x116 (and $x140 $x141)))
 (let (($x191 (=> $x116 $x195)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x175 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x131 (= $x175 true)))
 (let (($x40 (forall ((input.ind-%var460X (_ BitVec 32)) )(let ((?x197 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var460X)))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var460X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var460X)))
 (=> $x118 (= ?x125 ?x197))))))
 ))
 (let (($x231 (forall ((input.ind-%var459X (_ BitVec 32)) )(let (($x181 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var459X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var459X)))
 (= $x118 $x181))))
 ))
 (let (($x150 (and $x231 $x40)))
 (let (($x161 (= $x150 true)))
 (let (($x196 (forall ((input.ind-%var454X (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul input.ind-%var454X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x191))))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var454X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var454X)))
 (=> $x118 (= ?x125 ?x156))))))))
 ))
 (let (($x206 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var453X)))
 (= $x118 (and (bvule (_ bv0 32) input.ind-%var453X) (bvult input.ind-%var453X input.dst.llvm-%n)))))
 ))
 (let (($x139 (and $x206 $x196)))
 (let (($x189 (= $x139 true)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x225 (concat ?x170 (concat ?x155 (concat ?x180 ?x224)))))
 (let (($x147 (= ?x225 input.dst.llvm-%n)))
 (let (($x148 (= $x147 true)))
 (let (($x22 (= $x148 true)))
 (let (($x169 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x193 (= $x169 true)))
 (let (($x174 (= $x193 true)))
 (let (($x113 (= $x174 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x12)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x94)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x126 $x96)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x7 $x99)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x136 $x89)))
 (let (($x100 (not $x28)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x111 $x97)))
 (let (($x90 (and (not $x88) $x100)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x59 $x47)))
 (let (($x106 (not $x107)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x91 $x82)))
 (let (($x128 (and (not $x101) $x106)))
 (let (($x112 (and (and (and (and (and (and $x128 $x90) $x117) $x133) $x75) $x187) $x83)))
 (let (($x38 (and $x112 $x166)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x11)))
 (let (($x92 (or false (or false (and (and true (or $x57 $x102)) (or $x157 $x74))))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x92)))
 (let (($x149 (and $x14 $x38)))
 (let (($x142 (= $x149 true)))
 (let (($x205 (= $x142 true)))
 (let (($x143 (= $x205 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x20 (concat ?x30 (concat ?x69 ?x17)))))
 (let (($x103 (= ?x65 input.dst.llvm-%x)))
 (let (($x53 (= $x103 true)))
 (let (($x56 (= $x53 true)))
 (let (($x123 (and $x56 $x143)))
 (let (($x173 (and $x123 $x113)))
 (let (($x223 (and $x173 $x22)))
 (let (($x6 (and $x223 $x189)))
 (let (($x152 (and $x6 $x161)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x5 $x152)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x207 (and $x9 $x19)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x115 (and $x29 $x207)))
 (let (($x213 (=> $x115 $x131)))
 (not $x213)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x175 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x131 (= $x175 true)))
 (let (($x40 (forall ((input.ind-%var460X (_ BitVec 32)) )(let ((?x197 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var460X)))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var460X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var460X)))
 (=> $x118 (= ?x125 ?x197))))))
 ))
 (let (($x231 (forall ((input.ind-%var459X (_ BitVec 32)) )(let (($x181 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var459X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var459X)))
 (= $x118 $x181))))
 ))
 (let (($x150 (and $x231 $x40)))
 (let (($x161 (= $x150 true)))
 (let (($x196 (forall ((input.ind-%var454X (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul input.ind-%var454X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x191))))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var454X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var454X)))
 (=> $x118 (= ?x125 ?x156))))))))
 ))
 (let (($x206 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var453X)))
 (= $x118 (and (bvule (_ bv0 32) input.ind-%var453X) (bvult input.ind-%var453X input.dst.llvm-%n)))))
 ))
 (let (($x139 (and $x206 $x196)))
 (let (($x189 (= $x139 true)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x225 (concat ?x170 (concat ?x155 (concat ?x180 ?x224)))))
 (let (($x147 (= ?x225 input.dst.llvm-%n)))
 (let (($x148 (= $x147 true)))
 (let (($x22 (= $x148 true)))
 (let (($x169 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x193 (= $x169 true)))
 (let (($x174 (= $x193 true)))
 (let (($x113 (= $x174 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x12)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x94)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x126 $x96)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x7 $x99)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x136 $x89)))
 (let (($x100 (not $x28)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x111 $x97)))
 (let (($x90 (and (not $x88) $x100)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x59 $x47)))
 (let (($x106 (not $x107)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x91 $x82)))
 (let (($x128 (and (not $x101) $x106)))
 (let (($x112 (and (and (and (and (and (and $x128 $x90) $x117) $x133) $x75) $x187) $x83)))
 (let (($x38 (and $x112 $x166)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x11)))
 (let (($x92 (or false (or false (and (and true (or $x57 $x102)) (or $x157 $x74))))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x92)))
 (let (($x149 (and $x14 $x38)))
 (let (($x142 (= $x149 true)))
 (let (($x205 (= $x142 true)))
 (let (($x143 (= $x205 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x20 (concat ?x30 (concat ?x69 ?x17)))))
 (let (($x103 (= ?x65 input.dst.llvm-%x)))
 (let (($x53 (= $x103 true)))
 (let (($x56 (= $x53 true)))
 (let (($x123 (and $x56 $x143)))
 (let (($x173 (and $x123 $x113)))
 (let (($x223 (and $x173 $x22)))
 (let (($x6 (and $x223 $x189)))
 (let (($x152 (and $x6 $x161)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x5 $x152)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x207 (and $x9 $x19)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x115 (and $x29 $x207)))
 (let (($x213 (=> $x115 $x131)))
 (not $x213)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000e) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000f)
                        (k!0 #x0000000e)
                        (k!0 #x0000000d)
                        (k!0 #x0000000c))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc982b100)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa9f1ae04)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6b6b6b01)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa9f1ae07)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc982b103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc982b100)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xbf6bd700)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa9f1ae04)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xbf6bd701) #x00
    (ite (= x!0 #xc982b100) #x01
    (ite (= x!0 #xbf6bd703) #x00
    (ite (= x!0 #xa9f1ae05) #xd7
    (ite (= x!0 #xbf6bd702) #x00
    (ite (= x!0 #xbf6bd700) #x00
    (ite (= x!0 #xa9f1ae07) #xbf
    (ite (= x!0 #xa9f1ae04) #x00
      #x6b)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xa9f1ae07)
                                     (k!6 #xa9f1ae06)
                                     (k!6 #xa9f1ae05)
                                     (k!6 #xa9f1ae04))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6b6b6b01 x!0)
         (ite (bvule #x6b6b6b02 x!0) #x6b6b6b02 #x6b6b6b01)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x48 ((_ extract 23 0) input.dst.llvm-%n)))
 (let ((?x227 (bvmul (_ bv256 24) ?x48)))
 (let ((?x233 ((_ extract 23 0) input.dst.llvm-%x)))
 (let ((?x212 (bvmul (_ bv47897 24) ?x233)))
 (let ((?x25 (bvadd ?x212 ?x227)))
 (let (($x230 (= (_ bv0 24) ?x25)))
 (let (($x172 (= $x230 true)))
 (let (($x167 (forall ((input.ind-%var488X (_ BitVec 32)) )(let ((?x114 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var488X)))
 (let ((?x156 (input.spec-%var-x-1.1.1 input.ind-%var488X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var488X)))
 (=> $x206 (= ?x156 ?x114))))))
 ))
 (let (($x203 (forall ((input.ind-%var487X (_ BitVec 32)) )(let (($x159 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var487X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var487X)))
 (= $x206 $x159))))
 ))
 (let (($x85 (and $x203 $x167)))
 (let (($x76 (= $x85 true)))
 (let (($x129 (forall ((input.ind-%var482X (_ BitVec 32)) )(let ((?x115 (bvadd (bvmul input.ind-%var482X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x220))))
 (let ((?x156 (input.spec-%var-x-1.1.1 input.ind-%var482X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var482X)))
 (=> $x206 (= ?x156 ?x55))))))))
 ))
 (let (($x195 (forall ((input.ind-%var481X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var481X)))
 (= $x206 (and (bvule (_ bv0 32) input.ind-%var481X) (bvult input.ind-%var481X input.dst.llvm-%n)))))
 ))
 (let (($x45 (and $x195 $x129)))
 (let (($x42 (= $x45 true)))
 (let ((?x214 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x148 (concat ?x225 (concat ?x224 ?x214)))))
 (let (($x223 (= ?x22 input.dst.llvm-%x)))
 (let (($x134 (= $x223 true)))
 (let (($x118 (= $x134 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x193 (concat ?x138 (concat ?x142 ?x38)))))
 (let (($x173 (= ?x174 input.dst.llvm-%n)))
 (let (($x216 (= $x173 true)))
 (let (($x170 (= $x216 true)))
 (let (($x187 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x204 (= $x187 true)))
 (let (($x94 (= $x204 true)))
 (let (($x83 (= $x94 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x100)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x89)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x128)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x107 $x111)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x47 $x97)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x98 $x93)))
 (let (($x92 (not $x41)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x157 $x104)))
 (let (($x91 (and (not $x74) $x92)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x57 $x63)))
 (let (($x21 (not $x102)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x13 $x46)))
 (let (($x87 (and (not $x11) $x21)))
 (let (($x132 (and (and (and (and (and (and $x87 $x91) $x101) $x59) $x88) $x136) $x28)))
 (let (($x7 (and $x132 $x90)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x72 (or false (or false (and (and true (or $x54 $x69)) (or $x26 $x103))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x72)))
 (let (($x126 (and $x32 $x7)))
 (let (($x105 (= $x126 true)))
 (let (($x96 (= $x105 true)))
 (let (($x99 (= $x96 true)))
 (let (($x112 (and $x99 $x83)))
 (let (($x110 (and $x112 $x170)))
 (let (($x58 (and $x110 $x118)))
 (let (($x67 (and $x58 $x42)))
 (let (($x194 (and $x67 $x76)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x127 (and $x210 $x194)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x179 (and $x43 $x127)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x36 $x179)))
 (let (($x199 (=> $x121 $x172)))
 (not $x199))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x48 ((_ extract 23 0) input.dst.llvm-%n)))
 (let ((?x227 (bvmul (_ bv256 24) ?x48)))
 (let ((?x233 ((_ extract 23 0) input.dst.llvm-%x)))
 (let ((?x212 (bvmul (_ bv47897 24) ?x233)))
 (let ((?x25 (bvadd ?x212 ?x227)))
 (let (($x230 (= (_ bv0 24) ?x25)))
 (let (($x172 (= $x230 true)))
 (let (($x167 (forall ((input.ind-%var488X (_ BitVec 32)) )(let ((?x114 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var488X)))
 (let ((?x156 (input.spec-%var-x-1.1.1 input.ind-%var488X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var488X)))
 (=> $x206 (= ?x156 ?x114))))))
 ))
 (let (($x203 (forall ((input.ind-%var487X (_ BitVec 32)) )(let (($x159 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var487X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var487X)))
 (= $x206 $x159))))
 ))
 (let (($x85 (and $x203 $x167)))
 (let (($x76 (= $x85 true)))
 (let (($x129 (forall ((input.ind-%var482X (_ BitVec 32)) )(let ((?x115 (bvadd (bvmul input.ind-%var482X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x220))))
 (let ((?x156 (input.spec-%var-x-1.1.1 input.ind-%var482X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var482X)))
 (=> $x206 (= ?x156 ?x55))))))))
 ))
 (let (($x195 (forall ((input.ind-%var481X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var481X)))
 (= $x206 (and (bvule (_ bv0 32) input.ind-%var481X) (bvult input.ind-%var481X input.dst.llvm-%n)))))
 ))
 (let (($x45 (and $x195 $x129)))
 (let (($x42 (= $x45 true)))
 (let ((?x214 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x148 (concat ?x225 (concat ?x224 ?x214)))))
 (let (($x223 (= ?x22 input.dst.llvm-%x)))
 (let (($x134 (= $x223 true)))
 (let (($x118 (= $x134 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x193 (concat ?x138 (concat ?x142 ?x38)))))
 (let (($x173 (= ?x174 input.dst.llvm-%n)))
 (let (($x216 (= $x173 true)))
 (let (($x170 (= $x216 true)))
 (let (($x187 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x204 (= $x187 true)))
 (let (($x94 (= $x204 true)))
 (let (($x83 (= $x94 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x100)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x89)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x128)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x107 $x111)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x47 $x97)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x98 $x93)))
 (let (($x92 (not $x41)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x157 $x104)))
 (let (($x91 (and (not $x74) $x92)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x57 $x63)))
 (let (($x21 (not $x102)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x13 $x46)))
 (let (($x87 (and (not $x11) $x21)))
 (let (($x132 (and (and (and (and (and (and $x87 $x91) $x101) $x59) $x88) $x136) $x28)))
 (let (($x7 (and $x132 $x90)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x72 (or false (or false (and (and true (or $x54 $x69)) (or $x26 $x103))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x72)))
 (let (($x126 (and $x32 $x7)))
 (let (($x105 (= $x126 true)))
 (let (($x96 (= $x105 true)))
 (let (($x99 (= $x96 true)))
 (let (($x112 (and $x99 $x83)))
 (let (($x110 (and $x112 $x170)))
 (let (($x58 (and $x110 $x118)))
 (let (($x67 (and $x58 $x42)))
 (let (($x194 (and $x67 $x76)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x127 (and $x210 $x194)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x179 (and $x43 $x127)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x36 $x179)))
 (let (($x199 (=> $x121 $x172)))
 (not $x199))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000800) #x04
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80902854)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00402930)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xc5000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xc5005010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00402933)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80902857)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00402930)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80902854)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80902855) #x50
    (ite (= x!0 #x00402932) #x00
    (ite (= x!0 #x80902854) #x10
    (ite (= x!0 #xc5000013) #x00
    (ite (= x!0 #xc5000011) #x00
    (ite (= x!0 #x80902856) #x00
    (ite (= x!0 #x00402931) #x00
    (ite (= x!0 #xc5000012) #x00
    (ite (= x!0 #xc5000010) #x00
    (ite (= x!0 #x00402930) #x10
      #xc5)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x00402933)
                                     (k!6 #x00402932)
                                     (k!6 #x00402931)
                                     (k!6 #x00402930))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xc5005010 x!0)
         (ite (bvule #xc5005011 x!0) #xc5005011 #xc5005010)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x80 (= (_ bv0 2) ?x116)))
 (let (($x152 (= $x80 true)))
 (let (($x231 (forall ((input.ind-%var516X (_ BitVec 32)) )(let ((?x150 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var516X)))
 (let ((?x55 (input.spec-%var-x-1.1.1 input.ind-%var516X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var516X)))
 (=> $x195 (= ?x55 ?x150))))))
 ))
 (let (($x154 (forall ((input.ind-%var515X (_ BitVec 32)) )(let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var515X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var515X)))
 (= $x195 $x163))))
 ))
 (let (($x178 (and $x154 $x231)))
 (let (($x161 (= $x178 true)))
 (let (($x5 (forall ((input.ind-%var510X (_ BitVec 32)) )(let ((?x121 (bvadd (bvmul input.ind-%var510X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem ?x121))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv2 32))) ?x212))))
 (let ((?x55 (input.spec-%var-x-1.1.1 input.ind-%var510X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var510X)))
 (=> $x195 (= ?x55 ?x172))))))))
 ))
 (let (($x213 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var509X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var509X) (bvult input.ind-%var509X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x213 $x5)))
 (let (($x166 (= $x177 true)))
 (let ((?x225 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x134 (concat ?x219 (concat ?x224 ?x225)))))
 (let (($x58 (= ?x118 input.dst.llvm-%x)))
 (let (($x211 (= $x58 true)))
 (let (($x206 (= $x211 true)))
 (let (($x216 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x170 (= $x216 true)))
 (let (($x110 (= $x170 true)))
 (let (($x147 (= $x110 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x94)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x187)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x126 $x96)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x7 $x99)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x37 $x158)))
 (let (($x133 (not $x136)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x111 $x97)))
 (let (($x28 (and (not $x88) $x133)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x59 $x117)))
 (let (($x107 (not $x47)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x46 $x11)))
 (let (($x128 (and (not $x109) $x107)))
 (let (($x123 (and (and (and (and (and (and $x128 $x28) $x132) $x90) $x75) $x61) $x204)))
 (let (($x138 (and $x123 $x83)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x82 (or false (or false (and (and true (or $x87 $x157)) (or $x93 $x41))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x149 (and $x135 $x138)))
 (let (($x142 (= $x149 true)))
 (let (($x38 (= $x142 true)))
 (let (($x205 (= $x38 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x103 (concat ?x50 (concat ?x54 ?x86)))))
 (let (($x73 (= ?x53 input.dst.llvm-%n)))
 (let (($x72 (= $x73 true)))
 (let (($x32 (= $x72 true)))
 (let (($x24 (and $x32 $x205)))
 (let (($x148 (and $x24 $x147)))
 (let (($x228 (and $x148 $x206)))
 (let (($x155 (and $x228 $x166)))
 (let (($x120 (and $x155 $x161)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x190 (and $x9 $x120)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x202 (and $x140 $x190)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x35 $x202)))
 (let (($x162 (=> $x23 $x152)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x80 (= (_ bv0 2) ?x116)))
 (let (($x152 (= $x80 true)))
 (let (($x231 (forall ((input.ind-%var516X (_ BitVec 32)) )(let ((?x150 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var516X)))
 (let ((?x55 (input.spec-%var-x-1.1.1 input.ind-%var516X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var516X)))
 (=> $x195 (= ?x55 ?x150))))))
 ))
 (let (($x154 (forall ((input.ind-%var515X (_ BitVec 32)) )(let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var515X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var515X)))
 (= $x195 $x163))))
 ))
 (let (($x178 (and $x154 $x231)))
 (let (($x161 (= $x178 true)))
 (let (($x5 (forall ((input.ind-%var510X (_ BitVec 32)) )(let ((?x121 (bvadd (bvmul input.ind-%var510X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem ?x121))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv2 32))) ?x212))))
 (let ((?x55 (input.spec-%var-x-1.1.1 input.ind-%var510X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var510X)))
 (=> $x195 (= ?x55 ?x172))))))))
 ))
 (let (($x213 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var509X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var509X) (bvult input.ind-%var509X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x213 $x5)))
 (let (($x166 (= $x177 true)))
 (let ((?x225 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x134 (concat ?x219 (concat ?x224 ?x225)))))
 (let (($x58 (= ?x118 input.dst.llvm-%x)))
 (let (($x211 (= $x58 true)))
 (let (($x206 (= $x211 true)))
 (let (($x216 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x170 (= $x216 true)))
 (let (($x110 (= $x170 true)))
 (let (($x147 (= $x110 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x94)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x187)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x126 $x96)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x7 $x99)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x37 $x158)))
 (let (($x133 (not $x136)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x111 $x97)))
 (let (($x28 (and (not $x88) $x133)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x59 $x117)))
 (let (($x107 (not $x47)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x46 $x11)))
 (let (($x128 (and (not $x109) $x107)))
 (let (($x123 (and (and (and (and (and (and $x128 $x28) $x132) $x90) $x75) $x61) $x204)))
 (let (($x138 (and $x123 $x83)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x82 (or false (or false (and (and true (or $x87 $x157)) (or $x93 $x41))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x149 (and $x135 $x138)))
 (let (($x142 (= $x149 true)))
 (let (($x38 (= $x142 true)))
 (let (($x205 (= $x38 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x103 (concat ?x50 (concat ?x54 ?x86)))))
 (let (($x73 (= ?x53 input.dst.llvm-%n)))
 (let (($x72 (= $x73 true)))
 (let (($x32 (= $x72 true)))
 (let (($x24 (and $x32 $x205)))
 (let (($x148 (and $x24 $x147)))
 (let (($x228 (and $x148 $x206)))
 (let (($x155 (and $x228 $x166)))
 (let (($x120 (and $x155 $x161)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x190 (and $x9 $x120)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x202 (and $x140 $x190)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x35 $x202)))
 (let (($x162 (=> $x23 $x152)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x200 (= $x127 true)))
 (let (($x139 (= $x200 true)))
 (let (($x40 (forall ((input.ind-%var528X (_ BitVec 32)) )(let ((?x203 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var528X)))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var528X)))
 (let (($x213 (input.spec-%var-x-1.0.1 input.ind-%var528X)))
 (=> $x213 (= ?x172 ?x203))))))
 ))
 (let (($x114 (forall ((input.ind-%var527X (_ BitVec 32)) )(let (($x45 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var527X)))
 (let (($x213 (input.spec-%var-x-1.0.1 input.ind-%var527X)))
 (= $x213 $x45))))
 ))
 (let (($x49 (and $x114 $x40)))
 (let (($x115 (= $x49 true)))
 (let (($x156 (forall ((input.ind-%var522X (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul input.ind-%var522X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x152))))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var522X)))
 (let (($x213 (input.spec-%var-x-1.0.1 input.ind-%var522X)))
 (=> $x213 (= ?x172 ?x215))))))))
 ))
 (let (($x233 (forall ((input.ind-%var521X (_ BitVec 32)) )(let (($x213 (input.spec-%var-x-1.0.1 input.ind-%var521X)))
 (= $x213 (and (bvule (_ bv0 32) input.ind-%var521X) (bvult input.ind-%var521X input.dst.llvm-%n)))))
 ))
 (let (($x52 (and $x233 $x156)))
 (let (($x175 (= $x52 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x211 (concat ?x58 (concat ?x214 (concat ?x180 ?x153)))))
 (let (($x228 (= ?x211 input.dst.llvm-%n)))
 (let (($x31 (= $x228 true)))
 (let (($x195 (= $x31 true)))
 (let (($x170 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x110 (= $x170 true)))
 (let (($x147 (= $x110 true)))
 (let (($x148 (= $x147 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x143)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x160)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x126)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x7 $x105)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x169 $x96)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x158 $x136)))
 (let (($x28 (not $x133)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x88 $x89)))
 (let (($x132 (and (not $x37) $x28)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x117 $x47)))
 (let (($x128 (not $x107)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x101 $x63)))
 (let (($x97 (and (not $x59) $x128)))
 (let (($x149 (and (and (and (and (and (and $x97 $x132) $x100) $x90) $x99) $x193) $x61)))
 (let (($x142 (and $x149 $x187)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x104)))
 (let (($x11 (or false (or false (and (and true (or $x74 $x14)) (or $x91 $x108))))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x11)))
 (let (($x38 (and $x106 $x142)))
 (let (($x205 (= $x38 true)))
 (let (($x24 (= $x205 true)))
 (let (($x174 (= $x24 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x53 (concat ?x54 (concat ?x69 ?x65)))))
 (let (($x72 (= ?x56 input.dst.llvm-%x)))
 (let (($x32 (= $x72 true)))
 (let (($x66 (= $x32 true)))
 (let (($x113 (and $x66 $x174)))
 (let (($x223 (and $x113 $x148)))
 (let (($x10 (and $x223 $x195)))
 (let (($x218 (and $x10 $x175)))
 (let (($x68 (and $x218 $x115)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x194 (and $x43 $x68)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x217 (and $x29 $x194)))
 (let (($x208 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x208 $x217)))
 (let (($x181 (=> $x39 $x139)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x200 (= $x127 true)))
 (let (($x139 (= $x200 true)))
 (let (($x40 (forall ((input.ind-%var528X (_ BitVec 32)) )(let ((?x203 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var528X)))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var528X)))
 (let (($x213 (input.spec-%var-x-1.0.1 input.ind-%var528X)))
 (=> $x213 (= ?x172 ?x203))))))
 ))
 (let (($x114 (forall ((input.ind-%var527X (_ BitVec 32)) )(let (($x45 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var527X)))
 (let (($x213 (input.spec-%var-x-1.0.1 input.ind-%var527X)))
 (= $x213 $x45))))
 ))
 (let (($x49 (and $x114 $x40)))
 (let (($x115 (= $x49 true)))
 (let (($x156 (forall ((input.ind-%var522X (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul input.ind-%var522X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x152))))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var522X)))
 (let (($x213 (input.spec-%var-x-1.0.1 input.ind-%var522X)))
 (=> $x213 (= ?x172 ?x215))))))))
 ))
 (let (($x233 (forall ((input.ind-%var521X (_ BitVec 32)) )(let (($x213 (input.spec-%var-x-1.0.1 input.ind-%var521X)))
 (= $x213 (and (bvule (_ bv0 32) input.ind-%var521X) (bvult input.ind-%var521X input.dst.llvm-%n)))))
 ))
 (let (($x52 (and $x233 $x156)))
 (let (($x175 (= $x52 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x211 (concat ?x58 (concat ?x214 (concat ?x180 ?x153)))))
 (let (($x228 (= ?x211 input.dst.llvm-%n)))
 (let (($x31 (= $x228 true)))
 (let (($x195 (= $x31 true)))
 (let (($x170 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x110 (= $x170 true)))
 (let (($x147 (= $x110 true)))
 (let (($x148 (= $x147 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x143)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x160)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x126)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x7 $x105)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x169 $x96)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x158 $x136)))
 (let (($x28 (not $x133)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x88 $x89)))
 (let (($x132 (and (not $x37) $x28)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x117 $x47)))
 (let (($x128 (not $x107)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x101 $x63)))
 (let (($x97 (and (not $x59) $x128)))
 (let (($x149 (and (and (and (and (and (and $x97 $x132) $x100) $x90) $x99) $x193) $x61)))
 (let (($x142 (and $x149 $x187)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x104)))
 (let (($x11 (or false (or false (and (and true (or $x74 $x14)) (or $x91 $x108))))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x11)))
 (let (($x38 (and $x106 $x142)))
 (let (($x205 (= $x38 true)))
 (let (($x24 (= $x205 true)))
 (let (($x174 (= $x24 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x53 (concat ?x54 (concat ?x69 ?x65)))))
 (let (($x72 (= ?x56 input.dst.llvm-%x)))
 (let (($x32 (= $x72 true)))
 (let (($x66 (= $x32 true)))
 (let (($x113 (and $x66 $x174)))
 (let (($x223 (and $x113 $x148)))
 (let (($x10 (and $x223 $x195)))
 (let (($x218 (and $x10 $x175)))
 (let (($x68 (and $x218 $x115)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x194 (and $x43 $x68)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x217 (and $x29 $x194)))
 (let (($x208 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x208 $x217)))
 (let (($x181 (=> $x39 $x139)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x00
      #xff))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000f)
                        (k!0 #x0000000e)
                        (k!0 #x0000000d)
                        (k!0 #x0000000c))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd3197c74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff596d7c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff596d7f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd3197c77)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd3197c74)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xfdfefe00)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff596d7c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd3197c75) #xff
    (ite (= x!0 #xd3197c74) #xff
    (ite (= x!0 #xfdfefe03) #x00
    (ite (= x!0 #xd3197c77) #xff
    (ite (= x!0 #xfdfefe01) #x00
    (ite (= x!0 #xd3197c76) #xff
    (ite (= x!0 #xfdfefe02) #x00
    (ite (= x!0 #xfdfefe00) #x00
    (ite (= x!0 #xff596d7f) #xfd
    (ite (= x!0 #xff596d7c) #x00
      #xfe)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xff596d7f)
                                     (k!6 #xff596d7e)
                                     (k!6 #xff596d7d)
                                     (k!6 #xff596d7c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x212 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x190 (= $x212 true)))
 (let (($x76 (= $x190 true)))
 (let (($x67 (forall ((input.ind-%var556X (_ BitVec 32)) )(let ((?x154 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var556X)))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var556X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var556X)))
 (=> $x233 (= ?x215 ?x154))))))
 ))
 (let (($x150 (forall ((input.ind-%var555X (_ BitVec 32)) )(let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var555X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var555X)))
 (= $x233 $x177))))
 ))
 (let (($x16 (and $x150 $x67)))
 (let (($x121 (= $x16 true)))
 (let (($x55 (forall ((input.ind-%var550X (_ BitVec 32)) )(let ((?x39 (bvadd (bvmul input.ind-%var550X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x139))))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var550X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var550X)))
 (=> $x233 (= ?x215 ?x64))))))))
 ))
 (let (($x80 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var549X)))
 (= $x233 (and (bvule (_ bv0 32) input.ind-%var549X) (bvult input.ind-%var549X input.dst.llvm-%n)))))
 ))
 (let (($x199 (and $x80 $x55)))
 (let (($x62 (= $x199 true)))
 (let ((?x214 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x228 (concat ?x22 (concat ?x180 ?x214)))))
 (let (($x10 (= ?x31 input.dst.llvm-%n)))
 (let (($x131 (= $x10 true)))
 (let (($x213 (= $x131 true)))
 (let (($x147 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x148 (= $x147 true)))
 (let (($x223 (= $x148 true)))
 (let (($x118 (= $x223 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x138)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x75)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x169 $x126)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x94 $x105)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x136 $x133)))
 (let (($x132 (not $x28)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x37 $x112)))
 (let (($x12 (and (not $x158) $x132)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x47 $x107)))
 (let (($x97 (not $x128)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x109 $x102)))
 (let (($x89 (and (not $x117) $x97)))
 (let (($x38 (and (and (and (and (and (and $x89 $x12) $x123) $x90) $x96) $x83) $x193)))
 (let (($x205 (and $x38 $x160)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x63 (or false (or false (and (and true (or $x98 $x41)) (or $x135 $x46))))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x24 (and $x111 $x205)))
 (let (($x174 (= $x24 true)))
 (let (($x113 (= $x174 true)))
 (let (($x173 (= $x113 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x56 (concat ?x69 (concat ?x50 ?x8)))))
 (let (($x32 (= ?x73 input.dst.llvm-%x)))
 (let (($x66 (= $x32 true)))
 (let (($x21 (= $x66 true)))
 (let (($x216 (and $x21 $x173)))
 (let (($x58 (and $x216 $x118)))
 (let (($x188 (and $x58 $x213)))
 (let (($x227 (and $x188 $x62)))
 (let (($x25 (and $x227 $x121)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x140 $x25)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x196 (and $x36 $x120)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x167 (and $x151 $x196)))
 (let (($x159 (=> $x167 $x76)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x212 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x190 (= $x212 true)))
 (let (($x76 (= $x190 true)))
 (let (($x67 (forall ((input.ind-%var556X (_ BitVec 32)) )(let ((?x154 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var556X)))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var556X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var556X)))
 (=> $x233 (= ?x215 ?x154))))))
 ))
 (let (($x150 (forall ((input.ind-%var555X (_ BitVec 32)) )(let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var555X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var555X)))
 (= $x233 $x177))))
 ))
 (let (($x16 (and $x150 $x67)))
 (let (($x121 (= $x16 true)))
 (let (($x55 (forall ((input.ind-%var550X (_ BitVec 32)) )(let ((?x39 (bvadd (bvmul input.ind-%var550X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x139))))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var550X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var550X)))
 (=> $x233 (= ?x215 ?x64))))))))
 ))
 (let (($x80 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var549X)))
 (= $x233 (and (bvule (_ bv0 32) input.ind-%var549X) (bvult input.ind-%var549X input.dst.llvm-%n)))))
 ))
 (let (($x199 (and $x80 $x55)))
 (let (($x62 (= $x199 true)))
 (let ((?x214 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x228 (concat ?x22 (concat ?x180 ?x214)))))
 (let (($x10 (= ?x31 input.dst.llvm-%n)))
 (let (($x131 (= $x10 true)))
 (let (($x213 (= $x131 true)))
 (let (($x147 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x148 (= $x147 true)))
 (let (($x223 (= $x148 true)))
 (let (($x118 (= $x223 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x138)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x75)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x169 $x126)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x94 $x105)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x136 $x133)))
 (let (($x132 (not $x28)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x37 $x112)))
 (let (($x12 (and (not $x158) $x132)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x47 $x107)))
 (let (($x97 (not $x128)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x109 $x102)))
 (let (($x89 (and (not $x117) $x97)))
 (let (($x38 (and (and (and (and (and (and $x89 $x12) $x123) $x90) $x96) $x83) $x193)))
 (let (($x205 (and $x38 $x160)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x63 (or false (or false (and (and true (or $x98 $x41)) (or $x135 $x46))))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x24 (and $x111 $x205)))
 (let (($x174 (= $x24 true)))
 (let (($x113 (= $x174 true)))
 (let (($x173 (= $x113 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x56 (concat ?x69 (concat ?x50 ?x8)))))
 (let (($x32 (= ?x73 input.dst.llvm-%x)))
 (let (($x66 (= $x32 true)))
 (let (($x21 (= $x66 true)))
 (let (($x216 (and $x21 $x173)))
 (let (($x58 (and $x216 $x118)))
 (let (($x188 (and $x58 $x213)))
 (let (($x227 (and $x188 $x62)))
 (let (($x25 (and $x227 $x121)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x140 $x25)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x196 (and $x36 $x120)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x167 (and $x151 $x196)))
 (let (($x159 (=> $x167 $x76)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (forall ((input.ind-%var574X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var574X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x159))))
 (let ((?x64 (input.spec-%var-x-1.1.1 input.ind-%var574X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var574X)))
 (=> $x80 (= ?x64 ?x166))))))))
 ))
 (let (($x60 (forall ((input.ind-%var573X (_ BitVec 32)) )(let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var573X)))
 (= $x80 (and (bvule (_ bv0 32) input.ind-%var573X) (bvult input.ind-%var573X (_ bv0 32))))))
 ))
 (let (($x168 (and $x60 $x33)))
 (let (($x194 (= true true)))
 (let (($x184 (and $x194 $x168)))
 (let (($x229 (= $x184 true)))
 (let (($x48 (forall ((input.ind-%var568X (_ BitVec 32)) )(let ((?x125 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var568X)))
 (let ((?x64 (input.spec-%var-x-1.1.1 input.ind-%var568X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var568X)))
 (=> $x80 (= ?x64 ?x125))))))
 ))
 (let (($x185 (forall ((input.ind-%var567X (_ BitVec 32)) )(let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var567X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var567X)))
 (= $x80 $x175))))
 ))
 (let (($x23 (and $x185 $x48)))
 (let (($x13 (= $x23 true)))
 (let (($x183 (forall ((input.ind-%var562X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var562X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x159))))
 (let ((?x64 (input.spec-%var-x-1.1.1 input.ind-%var562X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var562X)))
 (=> $x80 (= ?x64 ?x166))))))))
 ))
 (let (($x200 (forall ((input.ind-%var561X (_ BitVec 32)) )(let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var561X)))
 (= $x80 (and (bvule (_ bv0 32) input.ind-%var561X) (bvult input.ind-%var561X input.dst.llvm-%n)))))
 ))
 (let (($x18 (and $x200 $x183)))
 (let (($x51 (= $x18 true)))
 (let ((?x219 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x213 (concat ?x131 (concat ?x31 (concat ?x214 ?x219)))))
 (let (($x188 (= ?x213 input.dst.llvm-%x)))
 (let (($x221 (= $x188 true)))
 (let (($x233 (= $x221 true)))
 (let (($x118 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x58 (= $x118 true)))
 (let (($x206 (= $x58 true)))
 (let (($x228 (= $x206 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x142)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x99)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x169)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (and $x94 $x7)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x143 $x126)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x133 $x28)))
 (let (($x12 (not $x132)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x158 $x204)))
 (let (($x100 (and (not $x136) $x12)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x107 $x128)))
 (let (($x89 (not $x97)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x59 $x157)))
 (let (($x112 (and (not $x47) $x89)))
 (let (($x24 (and (and (and (and (and (and $x112 $x100) $x123) $x90) $x105) $x187) $x83)))
 (let (($x174 (and $x24 $x75)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x91)))
 (let (($x102 (or false (or false (and (and true (or $x92 $x108)) (or $x106 $x101))))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x102)))
 (let (($x113 (and $x88 $x174)))
 (let (($x173 (= $x113 true)))
 (let (($x216 (= $x173 true)))
 (let (($x170 (= $x216 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x73 (concat ?x50 (concat ?x54 ?x86)))))
 (let (($x66 (= ?x72 input.dst.llvm-%n)))
 (let (($x21 (= $x66 true)))
 (let (($x104 (= $x21 true)))
 (let (($x110 (and $x104 $x170)))
 (let (($x224 (and $x110 $x228)))
 (let (($x162 (and $x224 $x233)))
 (let (($x230 (and $x162 $x51)))
 (let (($x68 (and $x230 $x13)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x129 (and $x29 $x68)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x231 (and $x35 $x129)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x152 (and $x146 $x231)))
 (let (($x95 (=> $x152 $x229)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (forall ((input.ind-%var574X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var574X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x159))))
 (let ((?x64 (input.spec-%var-x-1.1.1 input.ind-%var574X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var574X)))
 (=> $x80 (= ?x64 ?x166))))))))
 ))
 (let (($x60 (forall ((input.ind-%var573X (_ BitVec 32)) )(let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var573X)))
 (= $x80 (and (bvule (_ bv0 32) input.ind-%var573X) (bvult input.ind-%var573X (_ bv0 32))))))
 ))
 (let (($x168 (and $x60 $x33)))
 (let (($x194 (= true true)))
 (let (($x184 (and $x194 $x168)))
 (let (($x229 (= $x184 true)))
 (let (($x48 (forall ((input.ind-%var568X (_ BitVec 32)) )(let ((?x125 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var568X)))
 (let ((?x64 (input.spec-%var-x-1.1.1 input.ind-%var568X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var568X)))
 (=> $x80 (= ?x64 ?x125))))))
 ))
 (let (($x185 (forall ((input.ind-%var567X (_ BitVec 32)) )(let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var567X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var567X)))
 (= $x80 $x175))))
 ))
 (let (($x23 (and $x185 $x48)))
 (let (($x13 (= $x23 true)))
 (let (($x183 (forall ((input.ind-%var562X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var562X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x159))))
 (let ((?x64 (input.spec-%var-x-1.1.1 input.ind-%var562X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var562X)))
 (=> $x80 (= ?x64 ?x166))))))))
 ))
 (let (($x200 (forall ((input.ind-%var561X (_ BitVec 32)) )(let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var561X)))
 (= $x80 (and (bvule (_ bv0 32) input.ind-%var561X) (bvult input.ind-%var561X input.dst.llvm-%n)))))
 ))
 (let (($x18 (and $x200 $x183)))
 (let (($x51 (= $x18 true)))
 (let ((?x219 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x213 (concat ?x131 (concat ?x31 (concat ?x214 ?x219)))))
 (let (($x188 (= ?x213 input.dst.llvm-%x)))
 (let (($x221 (= $x188 true)))
 (let (($x233 (= $x221 true)))
 (let (($x118 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x58 (= $x118 true)))
 (let (($x206 (= $x58 true)))
 (let (($x228 (= $x206 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x142)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x99)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x169)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (and $x94 $x7)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x143 $x126)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x133 $x28)))
 (let (($x12 (not $x132)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x158 $x204)))
 (let (($x100 (and (not $x136) $x12)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x107 $x128)))
 (let (($x89 (not $x97)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x59 $x157)))
 (let (($x112 (and (not $x47) $x89)))
 (let (($x24 (and (and (and (and (and (and $x112 $x100) $x123) $x90) $x105) $x187) $x83)))
 (let (($x174 (and $x24 $x75)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x91)))
 (let (($x102 (or false (or false (and (and true (or $x92 $x108)) (or $x106 $x101))))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x102)))
 (let (($x113 (and $x88 $x174)))
 (let (($x173 (= $x113 true)))
 (let (($x216 (= $x173 true)))
 (let (($x170 (= $x216 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x73 (concat ?x50 (concat ?x54 ?x86)))))
 (let (($x66 (= ?x72 input.dst.llvm-%n)))
 (let (($x21 (= $x66 true)))
 (let (($x104 (= $x21 true)))
 (let (($x110 (and $x104 $x170)))
 (let (($x224 (and $x110 $x228)))
 (let (($x162 (and $x224 $x233)))
 (let (($x230 (and $x162 $x51)))
 (let (($x68 (and $x230 $x13)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x129 (and $x29 $x68)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x231 (and $x35 $x129)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x152 (and $x146 $x231)))
 (let (($x95 (=> $x152 $x229)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var573X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var574X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var573X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var574X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (forall ((input.ind-%var608X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var608X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x71))))
 (let ((?x166 (input.spec-%var-x-1.1.1 input.ind-%var608X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var608X)))
 (=> $x200 (= ?x166 ?x95))))))))
 ))
 (let (($x164 (forall ((input.ind-%var607X (_ BitVec 32)) )(let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var607X)))
 (= $x200 (and (bvule (_ bv0 32) input.ind-%var607X) (bvult input.ind-%var607X (_ bv0 32))))))
 ))
 (let (($x78 (and $x164 $x85)))
 (let (($x144 (= true true)))
 (let (($x44 (and $x144 $x78)))
 (let (($x34 (= $x44 true)))
 (let (($x150 (forall ((input.ind-%var602X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var602X)))
 (let ((?x166 (input.spec-%var-x-1.1.1 input.ind-%var602X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var602X)))
 (=> $x200 (= ?x166 ?x16))))))
 ))
 (let (($x156 (forall ((input.ind-%var601X (_ BitVec 32)) )(let (($x45 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var601X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var601X)))
 (= $x200 $x45))))
 ))
 (let (($x207 (and $x156 $x150)))
 (let (($x121 (= $x207 true)))
 (let (($x74 (forall ((input.ind-%var596X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var596X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x71))))
 (let ((?x166 (input.spec-%var-x-1.1.1 input.ind-%var596X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var596X)))
 (=> $x200 (= ?x166 ?x95))))))))
 ))
 (let (($x76 (forall ((input.ind-%var595X (_ BitVec 32)) )(let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var595X)))
 (= $x200 (and (bvule (_ bv0 32) input.ind-%var595X) (bvult input.ind-%var595X input.dst.llvm-%n)))))
 ))
 (let (($x15 (and $x76 $x74)))
 (let (($x22 (= $x15 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x233 (concat ?x221 (concat ?x195 (concat ?x214 ?x31)))))
 (let (($x162 (= ?x233 input.dst.llvm-%x)))
 (let (($x116 (= $x162 true)))
 (let (($x80 (= $x116 true)))
 (let (($x206 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x228 (= $x206 true)))
 (let (($x224 (= $x228 true)))
 (let (($x10 (= $x224 true)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x205)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x96)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x143 $x169)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x138 $x7)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x28 $x132)))
 (let (($x100 (not $x12)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x136 $x61)))
 (let (($x123 (and (not $x133) $x100)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x128 $x97)))
 (let (($x112 (not $x89)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x117 $x14)))
 (let (($x204 (and (not $x107) $x112)))
 (let (($x113 (and (and (and (and (and (and $x204 $x123) $x38) $x90) $x126) $x160) $x187)))
 (let (($x173 (and $x113 $x99)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x157 (or false (or false (and (and true (or $x82 $x46)) (or $x111 $x109))))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x157)))
 (let (($x216 (and $x37 $x173)))
 (let (($x170 (= $x216 true)))
 (let (($x110 (= $x170 true)))
 (let (($x147 (= $x110 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x72 (concat ?x54 (concat ?x69 ?x65)))))
 (let (($x21 (= ?x32 input.dst.llvm-%n)))
 (let (($x104 (= $x21 true)))
 (let (($x93 (= $x104 true)))
 (let (($x148 (and $x93 $x147)))
 (let (($x131 (and $x148 $x10)))
 (let (($x181 (and $x131 $x80)))
 (let (($x40 (and $x181 $x22)))
 (let (($x218 (and $x40 $x121)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x5 (and $x36 $x218)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x52 (and $x208 $x5)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x77 $x52)))
 (let (($x232 (=> $x114 $x34)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (forall ((input.ind-%var608X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var608X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x71))))
 (let ((?x166 (input.spec-%var-x-1.1.1 input.ind-%var608X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var608X)))
 (=> $x200 (= ?x166 ?x95))))))))
 ))
 (let (($x164 (forall ((input.ind-%var607X (_ BitVec 32)) )(let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var607X)))
 (= $x200 (and (bvule (_ bv0 32) input.ind-%var607X) (bvult input.ind-%var607X (_ bv0 32))))))
 ))
 (let (($x78 (and $x164 $x85)))
 (let (($x144 (= true true)))
 (let (($x44 (and $x144 $x78)))
 (let (($x34 (= $x44 true)))
 (let (($x150 (forall ((input.ind-%var602X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var602X)))
 (let ((?x166 (input.spec-%var-x-1.1.1 input.ind-%var602X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var602X)))
 (=> $x200 (= ?x166 ?x16))))))
 ))
 (let (($x156 (forall ((input.ind-%var601X (_ BitVec 32)) )(let (($x45 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var601X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var601X)))
 (= $x200 $x45))))
 ))
 (let (($x207 (and $x156 $x150)))
 (let (($x121 (= $x207 true)))
 (let (($x74 (forall ((input.ind-%var596X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var596X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x71))))
 (let ((?x166 (input.spec-%var-x-1.1.1 input.ind-%var596X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var596X)))
 (=> $x200 (= ?x166 ?x95))))))))
 ))
 (let (($x76 (forall ((input.ind-%var595X (_ BitVec 32)) )(let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var595X)))
 (= $x200 (and (bvule (_ bv0 32) input.ind-%var595X) (bvult input.ind-%var595X input.dst.llvm-%n)))))
 ))
 (let (($x15 (and $x76 $x74)))
 (let (($x22 (= $x15 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x233 (concat ?x221 (concat ?x195 (concat ?x214 ?x31)))))
 (let (($x162 (= ?x233 input.dst.llvm-%x)))
 (let (($x116 (= $x162 true)))
 (let (($x80 (= $x116 true)))
 (let (($x206 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x228 (= $x206 true)))
 (let (($x224 (= $x228 true)))
 (let (($x10 (= $x224 true)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x205)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x96)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x143 $x169)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x138 $x7)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x28 $x132)))
 (let (($x100 (not $x12)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x136 $x61)))
 (let (($x123 (and (not $x133) $x100)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x128 $x97)))
 (let (($x112 (not $x89)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x117 $x14)))
 (let (($x204 (and (not $x107) $x112)))
 (let (($x113 (and (and (and (and (and (and $x204 $x123) $x38) $x90) $x126) $x160) $x187)))
 (let (($x173 (and $x113 $x99)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x157 (or false (or false (and (and true (or $x82 $x46)) (or $x111 $x109))))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x157)))
 (let (($x216 (and $x37 $x173)))
 (let (($x170 (= $x216 true)))
 (let (($x110 (= $x170 true)))
 (let (($x147 (= $x110 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x72 (concat ?x54 (concat ?x69 ?x65)))))
 (let (($x21 (= ?x32 input.dst.llvm-%n)))
 (let (($x104 (= $x21 true)))
 (let (($x93 (= $x104 true)))
 (let (($x148 (and $x93 $x147)))
 (let (($x131 (and $x148 $x10)))
 (let (($x181 (and $x131 $x80)))
 (let (($x40 (and $x181 $x22)))
 (let (($x218 (and $x40 $x121)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x5 (and $x36 $x218)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x52 (and $x208 $x5)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x77 $x52)))
 (let (($x232 (=> $x114 $x34)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var607X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var608X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #xfc
    (ite (= x!0 #x0000000b) #x02
    (ite (= x!0 #x0000000a) #xff
    (ite (= x!0 #x00000008) #xc9
    (ite (= x!0 #x00000009) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x0000000b)
                          (k!2 #x0000000a)
                          (k!2 #x00000009)
                          (k!2 #x00000008))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000f)
                                     (k!2 #x0000000e)
                                     (k!2 #x0000000d)
                                     (k!2 #x0000000c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var607X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.ind-%var608X!1 () (_ BitVec 32)
    #x0dcb14c4)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0c110cc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb6b1007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dbb0043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb6b1004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x07631505)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dbb0040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2dbb0041) #x15
    (ite (= x!0 #xfb6b1006) #x11
    (ite (= x!0 #x2dbb0040) #x05
    (ite (= x!0 #x0c110cc2) #x00
    (ite (= x!0 #x2dbb0043) #x07
    (ite (= x!0 #x0c110cc0) #x00
    (ite (= x!0 #x0c110cc1) #x00
    (ite (= x!0 #x2dbb0042) #x63
    (ite (= x!0 #x0c110cc3) #x00
    (ite (= x!0 #xfb6b1004) #xc0
      #x0c)))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xfb6b1007)
                                     (k!2 #xfb6b1006)
                                     (k!2 #xfb6b1005)
                                     (k!2 #xfb6b1004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x07631505 x!0)
         (ite (bvule #x07631506 x!0)
              (ite (bvule #x0dcb14c4 x!0) #x0dcb14c4 #x07631506)
              #x07631505)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0dcb14c4) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (forall ((input.ind-%var642X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var642X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x145))))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var642X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var642X)))
 (=> $x76 (= ?x95 ?x232))))))))
 ))
 (let (($x139 (forall ((input.ind-%var641X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var641X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var641X) (bvult input.ind-%var641X input.dst.llvm-%x)))))
 ))
 (let (($x177 (and $x139 $x199)))
 (let (($x192 (= true true)))
 (let (($x222 (and $x192 $x177)))
 (let (($x182 (= $x222 true)))
 (let (($x185 (forall ((input.ind-%var636X (_ BitVec 32)) )(let ((?x23 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var636X)))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var636X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var636X)))
 (=> $x76 (= ?x95 ?x23))))))
 ))
 (let (($x55 (forall ((input.ind-%var635X (_ BitVec 32)) )(let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var635X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var635X)))
 (= $x76 $x217))))
 ))
 (let (($x155 (and $x55 $x185)))
 (let (($x13 (= $x155 true)))
 (let (($x98 (forall ((input.ind-%var630X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var630X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x145))))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var630X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var630X)))
 (=> $x76 (= ?x95 ?x232))))))))
 ))
 (let (($x81 (forall ((input.ind-%var629X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var629X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var629X) (bvult input.ind-%var629X input.dst.llvm-%n)))))
 ))
 (let (($x17 (and $x81 $x98)))
 (let (($x211 (= $x17 true)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x116 (concat ?x213 (concat ?x214 ?x195)))))
 (let (($x181 (= ?x80 input.dst.llvm-%x)))
 (let (($x127 (= $x181 true)))
 (let (($x200 (= $x127 true)))
 (let (($x224 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x10 (= $x224 true)))
 (let (($x131 (= $x10 true)))
 (let (($x188 (= $x131 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x174)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x105)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (and $x138 $x94)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x142 $x169)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x132 $x12)))
 (let (($x123 (not $x100)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x133 $x193)))
 (let (($x38 (and (not $x28) $x123)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x97 $x89)))
 (let (($x204 (not $x112)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x47 $x41)))
 (let (($x61 (and (not $x128) $x204)))
 (let (($x216 (and (and (and (and (and (and $x61 $x38) $x24) $x90) $x7) $x75) $x160)))
 (let (($x170 (and $x216 $x96)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x14 (or false (or false (and (and true (or $x11 $x101)) (or $x88 $x59))))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x14)))
 (let (($x110 (and $x158 $x170)))
 (let (($x147 (= $x110 true)))
 (let (($x148 (= $x147 true)))
 (let (($x223 (= $x148 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x32 (concat ?x69 (concat ?x50 ?x8)))))
 (let (($x104 (= ?x66 input.dst.llvm-%n)))
 (let (($x93 (= $x104 true)))
 (let (($x91 (= $x93 true)))
 (let (($x118 (and $x91 $x223)))
 (let (($x221 (and $x118 $x188)))
 (let (($x189 (and $x221 $x200)))
 (let (($x220 (and $x189 $x211)))
 (let (($x62 (and $x220 $x13)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x115 (and $x35 $x62)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x42 (and $x151 $x115)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x67 (and $x197 $x42)))
 (let (($x191 (=> $x67 $x182)))
 (not $x191)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (forall ((input.ind-%var642X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var642X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x145))))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var642X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var642X)))
 (=> $x76 (= ?x95 ?x232))))))))
 ))
 (let (($x139 (forall ((input.ind-%var641X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var641X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var641X) (bvult input.ind-%var641X input.dst.llvm-%x)))))
 ))
 (let (($x177 (and $x139 $x199)))
 (let (($x192 (= true true)))
 (let (($x222 (and $x192 $x177)))
 (let (($x182 (= $x222 true)))
 (let (($x185 (forall ((input.ind-%var636X (_ BitVec 32)) )(let ((?x23 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var636X)))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var636X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var636X)))
 (=> $x76 (= ?x95 ?x23))))))
 ))
 (let (($x55 (forall ((input.ind-%var635X (_ BitVec 32)) )(let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var635X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var635X)))
 (= $x76 $x217))))
 ))
 (let (($x155 (and $x55 $x185)))
 (let (($x13 (= $x155 true)))
 (let (($x98 (forall ((input.ind-%var630X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var630X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x145))))
 (let ((?x95 (input.spec-%var-x-1.1.1 input.ind-%var630X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var630X)))
 (=> $x76 (= ?x95 ?x232))))))))
 ))
 (let (($x81 (forall ((input.ind-%var629X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var629X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var629X) (bvult input.ind-%var629X input.dst.llvm-%n)))))
 ))
 (let (($x17 (and $x81 $x98)))
 (let (($x211 (= $x17 true)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x116 (concat ?x213 (concat ?x214 ?x195)))))
 (let (($x181 (= ?x80 input.dst.llvm-%x)))
 (let (($x127 (= $x181 true)))
 (let (($x200 (= $x127 true)))
 (let (($x224 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x10 (= $x224 true)))
 (let (($x131 (= $x10 true)))
 (let (($x188 (= $x131 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x174)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x105)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (and $x138 $x94)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x142 $x169)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x132 $x12)))
 (let (($x123 (not $x100)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x133 $x193)))
 (let (($x38 (and (not $x28) $x123)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x97 $x89)))
 (let (($x204 (not $x112)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x47 $x41)))
 (let (($x61 (and (not $x128) $x204)))
 (let (($x216 (and (and (and (and (and (and $x61 $x38) $x24) $x90) $x7) $x75) $x160)))
 (let (($x170 (and $x216 $x96)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x14 (or false (or false (and (and true (or $x11 $x101)) (or $x88 $x59))))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x14)))
 (let (($x110 (and $x158 $x170)))
 (let (($x147 (= $x110 true)))
 (let (($x148 (= $x147 true)))
 (let (($x223 (= $x148 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x32 (concat ?x69 (concat ?x50 ?x8)))))
 (let (($x104 (= ?x66 input.dst.llvm-%n)))
 (let (($x93 (= $x104 true)))
 (let (($x91 (= $x93 true)))
 (let (($x118 (and $x91 $x223)))
 (let (($x221 (and $x118 $x188)))
 (let (($x189 (and $x221 $x200)))
 (let (($x220 (and $x189 $x211)))
 (let (($x62 (and $x220 $x13)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x115 (and $x35 $x62)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x42 (and $x151 $x115)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x67 (and $x197 $x42)))
 (let (($x191 (=> $x67 $x182)))
 (not $x191)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var642X!1 () (_ BitVec 32)
    #x04d22002)
  (define-fun input.ind-%var641X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00024344)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x28002820)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00a05343)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00024347)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00a05340)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00024344)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00a05343) #x28
    (ite (= x!0 #x00a05340) #x20
    (ite (= x!0 #x00a05341) #x28
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (not (bvule (concat (k!2 #x00024347)
                          (k!2 #x00024346)
                          (k!2 #x00024345)
                          (k!2 #x00024344))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x00a05343)
                                   (k!2 #x00a05342)
                                   (k!2 #x00a05341)
                                   (k!2 #x00a05340))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x04d22002) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var641X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.ind-%var642X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf939e178)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7769a53)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9ce8cd27)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7769a50)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9ce8cd24)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x9ce8cd25) #x00
    (ite (= x!0 #xf7769a52) #x39
    (ite (= x!0 #xf939e17a) #x00
    (ite (= x!0 #xf939e179) #x00
    (ite (= x!0 #x9ce8cd27) #x00
    (ite (= x!0 #x9ce8cd24) #x00
    (ite (= x!0 #x9ce8cd26) #x00
    (ite (= x!0 #xf7769a51) #xe1
    (ite (= x!0 #xf939e17b) #x00
    (ite (= x!0 #xf7769a53) #xf9
    (ite (= x!0 #xf7769a50) #x78
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7769a53)
                                     (k!2 #xf7769a52)
                                     (k!2 #xf7769a51)
                                     (k!2 #xf7769a50))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x130 (= false true)))
 (let (($x9 (= $x130 true)))
 (let (($x156 (forall ((input.ind-%var670X (_ BitVec 32)) )(let ((?x207 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var670X)))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var670X)))
 (let (($x81 (input.spec-%var-x-1.0.1 input.ind-%var670X)))
 (=> $x81 (= ?x232 ?x207))))))
 ))
 (let (($x183 (forall ((input.ind-%var669X (_ BitVec 32)) )(let (($x196 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var669X)))
 (let (($x81 (input.spec-%var-x-1.0.1 input.ind-%var669X)))
 (= $x81 $x196))))
 ))
 (let (($x227 (and $x183 $x156)))
 (let (($x121 (= $x227 true)))
 (let (($x92 (forall ((input.ind-%var664X (_ BitVec 32)) )(let ((?x67 (bvadd (bvmul input.ind-%var664X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem ?x67))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv2 32))) ?x141))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var664X)))
 (let (($x81 (input.spec-%var-x-1.0.1 input.ind-%var664X)))
 (=> $x81 (= ?x232 ?x191))))))))
 ))
 (let (($x226 (forall ((input.ind-%var663X (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-1.0.1 input.ind-%var663X)))
 (= $x81 (and (bvule (_ bv0 32) input.ind-%var663X) (bvult input.ind-%var663X input.dst.llvm-%n)))))
 ))
 (let (($x30 (and $x226 $x92)))
 (let (($x153 (= $x30 true)))
 (let (($x200 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x189 (= $x200 true)))
 (let (($x190 (= $x189 true)))
 (let (($x76 (= $x190 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x10)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x228)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (and $x110 $x148)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x170 $x223)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x126 $x75)))
 (let (($x105 (not $x173)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x169 $x7)))
 (let (($x216 (and (not $x99) $x105)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x90 $x205)))
 (let (($x138 (not $x142)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x47 $x41)))
 (let (($x94 (and (not $x149) $x138)))
 (let (($x213 (and (and (and (and (and (and $x94 $x216) $x174) $x96) $x118) $x206) $x224)))
 (let (($x180 (and $x213 $x131)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x187 (or false (or false (and (and true (or $x204 $x61)) (or $x132 $x12))))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x187)))
 (let (($x214 (and $x113 $x180)))
 (let (($x195 (= $x214 true)))
 (let (($x31 (= $x195 true)))
 (let (($x233 (= $x31 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x88 (concat ?x111 (concat ?x11 ?x108)))))
 (let (($x157 (= ?x102 input.dst.llvm-%n)))
 (let (($x37 (= $x157 true)))
 (let (($x117 (= $x37 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x66 (concat ?x50 (concat ?x54 ?x86)))))
 (let (($x93 (= ?x21 input.dst.llvm-%x)))
 (let (($x91 (= $x93 true)))
 (let (($x135 (= $x91 true)))
 (let (($x14 (and $x135 $x117)))
 (let (($x80 (and $x14 $x233)))
 (let (($x60 (and $x80 $x76)))
 (let (($x212 (and $x60 $x153)))
 (let (($x51 (and $x212 $x121)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x208 $x51)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x6 (and $x146 $x154)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x48 (and $x79 $x6)))
 (let (($x152 (=> $x48 $x9)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x130 (= false true)))
 (let (($x9 (= $x130 true)))
 (let (($x156 (forall ((input.ind-%var670X (_ BitVec 32)) )(let ((?x207 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var670X)))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var670X)))
 (let (($x81 (input.spec-%var-x-1.0.1 input.ind-%var670X)))
 (=> $x81 (= ?x232 ?x207))))))
 ))
 (let (($x183 (forall ((input.ind-%var669X (_ BitVec 32)) )(let (($x196 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var669X)))
 (let (($x81 (input.spec-%var-x-1.0.1 input.ind-%var669X)))
 (= $x81 $x196))))
 ))
 (let (($x227 (and $x183 $x156)))
 (let (($x121 (= $x227 true)))
 (let (($x92 (forall ((input.ind-%var664X (_ BitVec 32)) )(let ((?x67 (bvadd (bvmul input.ind-%var664X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem ?x67))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv2 32))) ?x141))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var664X)))
 (let (($x81 (input.spec-%var-x-1.0.1 input.ind-%var664X)))
 (=> $x81 (= ?x232 ?x191))))))))
 ))
 (let (($x226 (forall ((input.ind-%var663X (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-1.0.1 input.ind-%var663X)))
 (= $x81 (and (bvule (_ bv0 32) input.ind-%var663X) (bvult input.ind-%var663X input.dst.llvm-%n)))))
 ))
 (let (($x30 (and $x226 $x92)))
 (let (($x153 (= $x30 true)))
 (let (($x200 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x189 (= $x200 true)))
 (let (($x190 (= $x189 true)))
 (let (($x76 (= $x190 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x10)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x228)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (and $x110 $x148)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x170 $x223)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x126 $x75)))
 (let (($x105 (not $x173)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x169 $x7)))
 (let (($x216 (and (not $x99) $x105)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x90 $x205)))
 (let (($x138 (not $x142)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x47 $x41)))
 (let (($x94 (and (not $x149) $x138)))
 (let (($x213 (and (and (and (and (and (and $x94 $x216) $x174) $x96) $x118) $x206) $x224)))
 (let (($x180 (and $x213 $x131)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x187 (or false (or false (and (and true (or $x204 $x61)) (or $x132 $x12))))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x187)))
 (let (($x214 (and $x113 $x180)))
 (let (($x195 (= $x214 true)))
 (let (($x31 (= $x195 true)))
 (let (($x233 (= $x31 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x88 (concat ?x111 (concat ?x11 ?x108)))))
 (let (($x157 (= ?x102 input.dst.llvm-%n)))
 (let (($x37 (= $x157 true)))
 (let (($x117 (= $x37 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x66 (concat ?x50 (concat ?x54 ?x86)))))
 (let (($x93 (= ?x21 input.dst.llvm-%x)))
 (let (($x91 (= $x93 true)))
 (let (($x135 (= $x91 true)))
 (let (($x14 (and $x135 $x117)))
 (let (($x80 (and $x14 $x233)))
 (let (($x60 (and $x80 $x76)))
 (let (($x212 (and $x60 $x153)))
 (let (($x51 (and $x212 $x121)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x208 $x51)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x6 (and $x146 $x154)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x48 (and $x79 $x6)))
 (let (($x152 (=> $x48 $x9)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1d7f81c0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc5111f64)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1d7f81c3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc5111f67)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc5111f64)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1d7f81c0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x1d7f81c3)
                                   (k!0 #x1d7f81c2)
                                   (k!0 #x1d7f81c1)
                                   (k!0 #x1d7f81c0))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #xc5111f67)
                        (k!0 #xc5111f66)
                        (k!0 #xc5111f65)
                        (k!0 #xc5111f64))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x69fd1474)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x593251f4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x593251f7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x69fd1477)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x69fd1474)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x593251f4)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x593251f7)
                                   (k!0 #x593251f6)
                                   (k!0 #x593251f5)
                                   (k!0 #x593251f4))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x189 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x167 (= $x189 false)))
 (let (($x176 (= $x167 true)))
 (let (($x57 (forall ((input.ind-%var698X (_ BitVec 32)) )(let ((?x84 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var698X)))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var698X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var698X)))
 (=> $x26 (= ?x152 ?x84))))))
 ))
 (let (($x122 (forall ((input.ind-%var697X (_ BitVec 32)) )(let (($x178 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var697X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var697X)))
 (= $x26 $x178))))
 ))
 (let (($x225 (and $x122 $x57)))
 (let (($x39 (= $x225 true)))
 (let (($x114 (forall ((input.ind-%var692X (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul input.ind-%var692X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x220))))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var692X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var692X)))
 (=> $x26 (= ?x152 ?x198))))))))
 ))
 (let (($x6 (forall ((input.ind-%var691X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var691X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var691X) (bvult input.ind-%var691X input.dst.llvm-%n)))))
 ))
 (let (($x44 (and $x6 $x114)))
 (let (($x62 (= $x44 true)))
 (let (($x186 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x186 true)))
 (let (($x92 (= $x29 true)))
 (let ((?x76 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x60 (bvadd input.dst.llvm-%x ?x76)))
 (let (($x222 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd ?x60 (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x232 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x171 (or false (or false (and (and true (or $x226 $x232)) (or $x67 $x222))))))
 (let (($x192 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) $x171)))
 (let (($x81 (=> (and $x189 (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32)))) $x171)))
 (let (($x164 (= $x81 true)))
 (let (($x141 (= $x164 true)))
 (let (($x177 (= $x141 true)))
 (let (($x233 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (= $x233 true)))
 (let (($x181 (= $x80 true)))
 (let (($x127 (= $x181 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (= $x131 true)))
 (let (($x214 (= $x180 true)))
 (let (($x195 (= $x214 true)))
 (let (($x206 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x219 (= $x206 true)))
 (let (($x228 (= $x219 true)))
 (let (($x224 (= $x228 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x223 (= $x148 true)))
 (let (($x118 (= $x223 true)))
 (let (($x116 (= $x118 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x99)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x169)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (and $x41 $x90)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x47 $x205)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x193 $x28)))
 (let (($x83 (not $x132)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x89 $x61)))
 (let (($x100 (and (not $x133) $x83)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x128 $x136)))
 (let (($x97 (not $x24)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x8 $x21)))
 (let (($x204 (and (not $x14) $x97)))
 (let (($x188 (and (and (and (and (and (and $x204 $x100) $x38) $x113) $x142) $x94) $x7)))
 (let (($x174 (and $x188 $x160)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x157 (or false (or false (and (and true (or $x109 $x88)) (or $x108 $x46))))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x157)))
 (let (($x221 (and $x117 $x174)))
 (let (($x96 (= $x221 true)))
 (let (($x162 (= $x96 true)))
 (let (($x170 (= $x162 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x72 (= (_ bv0 2) ?x69)))
 (let (($x50 (= $x72 true)))
 (let (($x32 (= $x50 true)))
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x53 (= $x35 true)))
 (let (($x56 (= $x53 true)))
 (let (($x54 (and $x56 $x32)))
 (let (($x110 (and $x54 $x170)))
 (let (($x58 (and $x110 $x116)))
 (let (($x213 (and $x58 $x224)))
 (let (($x31 (and $x213 $x195)))
 (let (($x200 (and $x31 $x127)))
 (let (($x191 (and $x200 $x177)))
 (let (($x30 (and $x191 $x92)))
 (let (($x166 (and $x30 $x62)))
 (let (($x129 (and $x166 $x39)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x184 (and $x151 $x129)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x218 (and $x172 $x184)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x87 (and $x77 $x218)))
 (let (($x71 (=> $x87 $x176)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x189 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x167 (= $x189 false)))
 (let (($x176 (= $x167 true)))
 (let (($x57 (forall ((input.ind-%var698X (_ BitVec 32)) )(let ((?x84 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var698X)))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var698X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var698X)))
 (=> $x26 (= ?x152 ?x84))))))
 ))
 (let (($x122 (forall ((input.ind-%var697X (_ BitVec 32)) )(let (($x178 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var697X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var697X)))
 (= $x26 $x178))))
 ))
 (let (($x225 (and $x122 $x57)))
 (let (($x39 (= $x225 true)))
 (let (($x114 (forall ((input.ind-%var692X (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul input.ind-%var692X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x220))))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var692X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var692X)))
 (=> $x26 (= ?x152 ?x198))))))))
 ))
 (let (($x6 (forall ((input.ind-%var691X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var691X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var691X) (bvult input.ind-%var691X input.dst.llvm-%n)))))
 ))
 (let (($x44 (and $x6 $x114)))
 (let (($x62 (= $x44 true)))
 (let (($x186 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x186 true)))
 (let (($x92 (= $x29 true)))
 (let ((?x76 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x60 (bvadd input.dst.llvm-%x ?x76)))
 (let (($x222 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd ?x60 (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x232 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x171 (or false (or false (and (and true (or $x226 $x232)) (or $x67 $x222))))))
 (let (($x192 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) $x171)))
 (let (($x81 (=> (and $x189 (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32)))) $x171)))
 (let (($x164 (= $x81 true)))
 (let (($x141 (= $x164 true)))
 (let (($x177 (= $x141 true)))
 (let (($x233 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (= $x233 true)))
 (let (($x181 (= $x80 true)))
 (let (($x127 (= $x181 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (= $x131 true)))
 (let (($x214 (= $x180 true)))
 (let (($x195 (= $x214 true)))
 (let (($x206 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x219 (= $x206 true)))
 (let (($x228 (= $x219 true)))
 (let (($x224 (= $x228 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x223 (= $x148 true)))
 (let (($x118 (= $x223 true)))
 (let (($x116 (= $x118 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x99)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x169)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (and $x41 $x90)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x47 $x205)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x193 $x28)))
 (let (($x83 (not $x132)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x89 $x61)))
 (let (($x100 (and (not $x133) $x83)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x128 $x136)))
 (let (($x97 (not $x24)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x8 $x21)))
 (let (($x204 (and (not $x14) $x97)))
 (let (($x188 (and (and (and (and (and (and $x204 $x100) $x38) $x113) $x142) $x94) $x7)))
 (let (($x174 (and $x188 $x160)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x157 (or false (or false (and (and true (or $x109 $x88)) (or $x108 $x46))))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x157)))
 (let (($x221 (and $x117 $x174)))
 (let (($x96 (= $x221 true)))
 (let (($x162 (= $x96 true)))
 (let (($x170 (= $x162 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x72 (= (_ bv0 2) ?x69)))
 (let (($x50 (= $x72 true)))
 (let (($x32 (= $x50 true)))
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x53 (= $x35 true)))
 (let (($x56 (= $x53 true)))
 (let (($x54 (and $x56 $x32)))
 (let (($x110 (and $x54 $x170)))
 (let (($x58 (and $x110 $x116)))
 (let (($x213 (and $x58 $x224)))
 (let (($x31 (and $x213 $x195)))
 (let (($x200 (and $x31 $x127)))
 (let (($x191 (and $x200 $x177)))
 (let (($x30 (and $x191 $x92)))
 (let (($x166 (and $x30 $x62)))
 (let (($x129 (and $x166 $x39)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x184 (and $x151 $x129)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x218 (and $x172 $x184)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x87 (and $x77 $x218)))
 (let (($x71 (=> $x87 $x176)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x58600000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0440d548)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2601aa54)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0440d54b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2601aa57)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0440d548)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2601aa54)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x58600003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x58600002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x58600001 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x58600000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x10000000 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x30c80044)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x83fb1180)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x11fd2890)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x11fd2893)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x30c80047)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x11fd2890)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x30c80044)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!6 (bvadd #x83fb1183 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x83fb1182 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x83fb1181 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x83fb1180 (bvmul #x00000004 x!0))))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000100 x!0)
         (ite (bvule #x00000101 x!0) #x00000101 #x00000100)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x213 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x74 (=> $x213 true)))
 (let (($x52 (= $x74 true)))
 (let (($x144 (= $x52 true)))
 (let (($x48 (forall ((input.ind-%var726X (_ BitVec 32)) )(let ((?x86 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var726X)))
 (let ((?x29 (input.spec-%var-x-1.1.1 input.ind-%var726X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var726X)))
 (=> $x42 (= ?x29 ?x86))))))
 ))
 (let (($x87 (forall ((input.ind-%var725X (_ BitVec 32)) )(let (($x39 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var725X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var725X)))
 (= $x42 $x39))))
 ))
 (let (($x9 (and $x87 $x48)))
 (let (($x153 (= $x9 true)))
 (let (($x25 (forall ((input.ind-%var720X (_ BitVec 32)) )(let ((?x217 (bvadd (bvmul input.ind-%var720X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem ?x217))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv2 32))) ?x13))))
 (let ((?x29 (input.spec-%var-x-1.1.1 input.ind-%var720X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var720X)))
 (=> $x42 (= ?x29 ?x62))))))))
 ))
 (let (($x141 (forall ((input.ind-%var719X (_ BitVec 32)) )(let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var719X)))
 (= $x42 (and (bvule (_ bv0 32) input.ind-%var719X) (bvult input.ind-%var719X input.dst.llvm-%n)))))
 ))
 (let (($x122 (and $x141 $x25)))
 (let (($x84 (= $x122 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x76 (concat ?x200 (concat ?x80 ?x31)))))
 (let (($x34 (= ?x60 input.dst.llvm-%x)))
 (let (($x85 (= $x34 true)))
 (let (($x119 (= $x85 true)))
 (let (($x10 (= $x213 true)))
 (let (($x131 (= $x10 true)))
 (let (($x180 (= $x131 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x160)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x188)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x142 $x138)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x205 $x94)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (and $x75 $x187)))
 (let (($x173 (not $x113)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (and $x126 $x123)))
 (let (($x41 (and (not $x38) $x173)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x12 $x193)))
 (let (($x132 (not $x28)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x111 $x106)))
 (let (($x100 (and (not $x133) $x132)))
 (let (($x147 (and (and (and (and (and (and $x100 $x41) $x149) $x90) $x216) $x7) $x99)))
 (let (($x148 (and $x147 $x174)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x204 (or false (or false (and (and true (or $x59 $x157)) (or $x112 $x128))))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x204)))
 (let (($x223 (and $x61 $x148)))
 (let (($x118 (= $x223 true)))
 (let (($x116 (= $x118 true)))
 (let (($x58 (= $x116 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x37 (concat ?x32 (concat ?x66 ?x56)))))
 (let (($x109 (= ?x91 input.dst.llvm-%n)))
 (let (($x135 (= $x109 true)))
 (let (($x88 (= $x135 true)))
 (let (($x206 (and $x88 $x58)))
 (let (($x214 (and $x206 $x180)))
 (let (($x70 (and $x214 $x119)))
 (let (($x163 (and $x70 $x84)))
 (let (($x207 (and $x163 $x153)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x20 (and $x146 $x207)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x158 (and $x19 $x20)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x197 $x158)))
 (let (($x78 (=> $x82 $x144)))
 (not $x78))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x213 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x74 (=> $x213 true)))
 (let (($x52 (= $x74 true)))
 (let (($x144 (= $x52 true)))
 (let (($x48 (forall ((input.ind-%var726X (_ BitVec 32)) )(let ((?x86 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var726X)))
 (let ((?x29 (input.spec-%var-x-1.1.1 input.ind-%var726X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var726X)))
 (=> $x42 (= ?x29 ?x86))))))
 ))
 (let (($x87 (forall ((input.ind-%var725X (_ BitVec 32)) )(let (($x39 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var725X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var725X)))
 (= $x42 $x39))))
 ))
 (let (($x9 (and $x87 $x48)))
 (let (($x153 (= $x9 true)))
 (let (($x25 (forall ((input.ind-%var720X (_ BitVec 32)) )(let ((?x217 (bvadd (bvmul input.ind-%var720X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem ?x217))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv2 32))) ?x13))))
 (let ((?x29 (input.spec-%var-x-1.1.1 input.ind-%var720X)))
 (let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var720X)))
 (=> $x42 (= ?x29 ?x62))))))))
 ))
 (let (($x141 (forall ((input.ind-%var719X (_ BitVec 32)) )(let (($x42 (input.spec-%var-x-1.0.1 input.ind-%var719X)))
 (= $x42 (and (bvule (_ bv0 32) input.ind-%var719X) (bvult input.ind-%var719X input.dst.llvm-%n)))))
 ))
 (let (($x122 (and $x141 $x25)))
 (let (($x84 (= $x122 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x76 (concat ?x200 (concat ?x80 ?x31)))))
 (let (($x34 (= ?x60 input.dst.llvm-%x)))
 (let (($x85 (= $x34 true)))
 (let (($x119 (= $x85 true)))
 (let (($x10 (= $x213 true)))
 (let (($x131 (= $x10 true)))
 (let (($x180 (= $x131 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x160)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x188)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x142 $x138)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x205 $x94)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (and $x75 $x187)))
 (let (($x173 (not $x113)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (and $x126 $x123)))
 (let (($x41 (and (not $x38) $x173)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x12 $x193)))
 (let (($x132 (not $x28)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x111 $x106)))
 (let (($x100 (and (not $x133) $x132)))
 (let (($x147 (and (and (and (and (and (and $x100 $x41) $x149) $x90) $x216) $x7) $x99)))
 (let (($x148 (and $x147 $x174)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x204 (or false (or false (and (and true (or $x59 $x157)) (or $x112 $x128))))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x204)))
 (let (($x223 (and $x61 $x148)))
 (let (($x118 (= $x223 true)))
 (let (($x116 (= $x118 true)))
 (let (($x58 (= $x116 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x37 (concat ?x32 (concat ?x66 ?x56)))))
 (let (($x109 (= ?x91 input.dst.llvm-%n)))
 (let (($x135 (= $x109 true)))
 (let (($x88 (= $x135 true)))
 (let (($x206 (and $x88 $x58)))
 (let (($x214 (and $x206 $x180)))
 (let (($x70 (and $x214 $x119)))
 (let (($x163 (and $x70 $x84)))
 (let (($x207 (and $x163 $x153)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x20 (and $x146 $x207)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x158 (and $x19 $x20)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x197 $x158)))
 (let (($x78 (=> $x82 $x144)))
 (not $x78))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x15 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x176 (= (_ bv0 2) ?x15)))
 (let (($x159 (= $x176 true)))
 (let (($x232 (forall ((input.ind-%var738X (_ BitVec 32)) )(let ((?x155 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var738X)))
 (let ((?x62 (input.spec-%var-x-1.1.1 input.ind-%var738X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var738X)))
 (=> $x141 (= ?x62 ?x155))))))
 ))
 (let (($x36 (forall ((input.ind-%var737X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var737X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var737X)))
 (= $x141 $x121))))
 ))
 (let (($x139 (and $x36 $x232)))
 (let (($x199 (= $x139 true)))
 (let (($x92 (forall ((input.ind-%var732X (_ BitVec 32)) )(let ((?x82 (bvadd (bvmul input.ind-%var732X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem ?x82))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv2 32))) ?x78))))
 (let ((?x62 (input.spec-%var-x-1.1.1 input.ind-%var732X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var732X)))
 (=> $x141 (= ?x62 ?x129))))))))
 ))
 (let (($x220 (forall ((input.ind-%var731X (_ BitVec 32)) )(let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var731X)))
 (= $x141 (and (bvule (_ bv0 32) input.ind-%var731X) (bvult input.ind-%var731X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x220 $x92)))
 (let (($x186 (= $x177 true)))
 (let ((?x200 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x85 (concat ?x189 (concat ?x80 ?x200)))))
 (let (($x70 (= ?x119 input.dst.llvm-%x)))
 (let (($x98 (= $x70 true)))
 (let (($x42 (= $x98 true)))
 (let (($x131 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x180 (= $x131 true)))
 (let (($x214 (= $x180 true)))
 (let (($x190 (= $x214 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x110)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x169)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x142)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (and $x205 $x105)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x162 $x138)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x187 $x113)))
 (let (($x41 (not $x173)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x38 $x47)))
 (let (($x149 (and (not $x75) $x41)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x193 $x28)))
 (let (($x100 (not $x132)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x89 $x46)))
 (let (($x123 (and (not $x12) $x100)))
 (let (($x223 (and (and (and (and (and (and $x123 $x149) $x96) $x90) $x94) $x170) $x7)))
 (let (($x118 (and $x223 $x188)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x106 (or false (or false (and (and true (or $x8 $x21)) (or $x24 $x97))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x116 (and $x83 $x118)))
 (let (($x58 (= $x116 true)))
 (let (($x206 (= $x58 true)))
 (let (($x219 (= $x206 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x91 (concat ?x66 (concat ?x72 ?x93)))))
 (let (($x135 (= ?x107 input.dst.llvm-%n)))
 (let (($x88 (= $x135 true)))
 (let (($x108 (= $x88 true)))
 (let (($x228 (and $x108 $x219)))
 (let (($x76 (and $x228 $x190)))
 (let (($x192 (and $x76 $x42)))
 (let (($x226 (and $x192 $x186)))
 (let (($x209 (and $x226 $x199)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x57 (and $x172 $x209)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x184 (and $x43 $x57)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x140 $x184)))
 (let (($x161 (=> $x191 $x159)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x15 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x176 (= (_ bv0 2) ?x15)))
 (let (($x159 (= $x176 true)))
 (let (($x232 (forall ((input.ind-%var738X (_ BitVec 32)) )(let ((?x155 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var738X)))
 (let ((?x62 (input.spec-%var-x-1.1.1 input.ind-%var738X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var738X)))
 (=> $x141 (= ?x62 ?x155))))))
 ))
 (let (($x36 (forall ((input.ind-%var737X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var737X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var737X)))
 (= $x141 $x121))))
 ))
 (let (($x139 (and $x36 $x232)))
 (let (($x199 (= $x139 true)))
 (let (($x92 (forall ((input.ind-%var732X (_ BitVec 32)) )(let ((?x82 (bvadd (bvmul input.ind-%var732X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem ?x82))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv2 32))) ?x78))))
 (let ((?x62 (input.spec-%var-x-1.1.1 input.ind-%var732X)))
 (let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var732X)))
 (=> $x141 (= ?x62 ?x129))))))))
 ))
 (let (($x220 (forall ((input.ind-%var731X (_ BitVec 32)) )(let (($x141 (input.spec-%var-x-1.0.1 input.ind-%var731X)))
 (= $x141 (and (bvule (_ bv0 32) input.ind-%var731X) (bvult input.ind-%var731X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x220 $x92)))
 (let (($x186 (= $x177 true)))
 (let ((?x200 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x85 (concat ?x189 (concat ?x80 ?x200)))))
 (let (($x70 (= ?x119 input.dst.llvm-%x)))
 (let (($x98 (= $x70 true)))
 (let (($x42 (= $x98 true)))
 (let (($x131 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x180 (= $x131 true)))
 (let (($x214 (= $x180 true)))
 (let (($x190 (= $x214 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x110)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x169)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x142)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (and $x205 $x105)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x162 $x138)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x187 $x113)))
 (let (($x41 (not $x173)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x38 $x47)))
 (let (($x149 (and (not $x75) $x41)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x193 $x28)))
 (let (($x100 (not $x132)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x89 $x46)))
 (let (($x123 (and (not $x12) $x100)))
 (let (($x223 (and (and (and (and (and (and $x123 $x149) $x96) $x90) $x94) $x170) $x7)))
 (let (($x118 (and $x223 $x188)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x106 (or false (or false (and (and true (or $x8 $x21)) (or $x24 $x97))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x116 (and $x83 $x118)))
 (let (($x58 (= $x116 true)))
 (let (($x206 (= $x58 true)))
 (let (($x219 (= $x206 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x91 (concat ?x66 (concat ?x72 ?x93)))))
 (let (($x135 (= ?x107 input.dst.llvm-%n)))
 (let (($x88 (= $x135 true)))
 (let (($x108 (= $x88 true)))
 (let (($x228 (and $x108 $x219)))
 (let (($x76 (and $x228 $x190)))
 (let (($x192 (and $x76 $x42)))
 (let (($x226 (and $x192 $x186)))
 (let (($x209 (and $x226 $x199)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x57 (and $x172 $x209)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x184 (and $x43 $x57)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x140 $x184)))
 (let (($x161 (=> $x191 $x159)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x13 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x20 (= $x13 true)))
 (let (($x71 (= $x20 true)))
 (let (($x6 (forall ((input.ind-%var750X (_ BitVec 32)) )(let ((?x87 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var750X)))
 (let ((?x129 (input.spec-%var-x-1.1.1 input.ind-%var750X)))
 (let (($x220 (input.spec-%var-x-1.0.1 input.ind-%var750X)))
 (=> $x220 (= ?x129 ?x87))))))
 ))
 (let (($x86 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x122 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var749X)))
 (let (($x220 (input.spec-%var-x-1.0.1 input.ind-%var749X)))
 (= $x220 $x122))))
 ))
 (let (($x81 (and $x86 $x6)))
 (let (($x217 (= $x81 true)))
 (let (($x29 (forall ((input.ind-%var744X (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul input.ind-%var744X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x159))))
 (let ((?x129 (input.spec-%var-x-1.1.1 input.ind-%var744X)))
 (let (($x220 (input.spec-%var-x-1.0.1 input.ind-%var744X)))
 (=> $x220 (= ?x129 ?x127))))))))
 ))
 (let (($x144 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x220 (input.spec-%var-x-1.0.1 input.ind-%var743X)))
 (= $x220 (and (bvule (_ bv0 32) input.ind-%var743X) (bvult input.ind-%var743X input.dst.llvm-%n)))))
 ))
 (let (($x166 (and $x144 $x29)))
 (let (($x134 (= $x166 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x70 (concat ?x31 (concat ?x233 ?x181)))))
 (let (($x192 (= ?x98 input.dst.llvm-%n)))
 (let (($x164 (= $x192 true)))
 (let (($x141 (= $x164 true)))
 (let (($x180 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x214 (= $x180 true)))
 (let (($x190 (= $x214 true)))
 (let (($x76 (= $x190 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x148)))
 (let ((?x216 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x216)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x205)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x162 $x142)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x160 $x105)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x113 $x173)))
 (let (($x149 (not $x41)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x75 $x221)))
 (let (($x96 (and (not $x187) $x149)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x28 $x132)))
 (let (($x123 (not $x100)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x133 $x63)))
 (let (($x47 (and (not $x193) $x123)))
 (let (($x116 (and (and (and (and (and (and $x47 $x96) $x143) $x90) $x138) $x174) $x170)))
 (let (($x58 (and $x116 $x169)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x46 (or false (or false (and (and true (or $x14 $x128)) (or $x61 $x111))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x46)))
 (let (($x206 (and $x126 $x58)))
 (let (($x219 (= $x206 true)))
 (let (($x228 (= $x219 true)))
 (let (($x224 (= $x228 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x107 (concat ?x72 (concat ?x32 ?x54)))))
 (let (($x88 (= ?x109 input.dst.llvm-%x)))
 (let (($x108 (= $x88 true)))
 (let (($x102 (= $x108 true)))
 (let (($x213 (and $x102 $x224)))
 (let (($x34 (and $x213 $x76)))
 (let (($x198 (and $x34 $x141)))
 (let (($x33 (and $x198 $x134)))
 (let (($x114 (and $x33 $x217)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x207 (and $x19 $x114)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x182 (and $x77 $x207)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x22 (and $x79 $x182)))
 (let (($x154 (=> $x22 $x71)))
 (not $x154))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x13 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x20 (= $x13 true)))
 (let (($x71 (= $x20 true)))
 (let (($x6 (forall ((input.ind-%var750X (_ BitVec 32)) )(let ((?x87 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var750X)))
 (let ((?x129 (input.spec-%var-x-1.1.1 input.ind-%var750X)))
 (let (($x220 (input.spec-%var-x-1.0.1 input.ind-%var750X)))
 (=> $x220 (= ?x129 ?x87))))))
 ))
 (let (($x86 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x122 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var749X)))
 (let (($x220 (input.spec-%var-x-1.0.1 input.ind-%var749X)))
 (= $x220 $x122))))
 ))
 (let (($x81 (and $x86 $x6)))
 (let (($x217 (= $x81 true)))
 (let (($x29 (forall ((input.ind-%var744X (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul input.ind-%var744X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x159))))
 (let ((?x129 (input.spec-%var-x-1.1.1 input.ind-%var744X)))
 (let (($x220 (input.spec-%var-x-1.0.1 input.ind-%var744X)))
 (=> $x220 (= ?x129 ?x127))))))))
 ))
 (let (($x144 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x220 (input.spec-%var-x-1.0.1 input.ind-%var743X)))
 (= $x220 (and (bvule (_ bv0 32) input.ind-%var743X) (bvult input.ind-%var743X input.dst.llvm-%n)))))
 ))
 (let (($x166 (and $x144 $x29)))
 (let (($x134 (= $x166 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x70 (concat ?x31 (concat ?x233 ?x181)))))
 (let (($x192 (= ?x98 input.dst.llvm-%n)))
 (let (($x164 (= $x192 true)))
 (let (($x141 (= $x164 true)))
 (let (($x180 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x214 (= $x180 true)))
 (let (($x190 (= $x214 true)))
 (let (($x76 (= $x190 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x148)))
 (let ((?x216 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x216)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x205)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x162 $x142)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x160 $x105)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x113 $x173)))
 (let (($x149 (not $x41)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x75 $x221)))
 (let (($x96 (and (not $x187) $x149)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x28 $x132)))
 (let (($x123 (not $x100)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x133 $x63)))
 (let (($x47 (and (not $x193) $x123)))
 (let (($x116 (and (and (and (and (and (and $x47 $x96) $x143) $x90) $x138) $x174) $x170)))
 (let (($x58 (and $x116 $x169)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x46 (or false (or false (and (and true (or $x14 $x128)) (or $x61 $x111))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x46)))
 (let (($x206 (and $x126 $x58)))
 (let (($x219 (= $x206 true)))
 (let (($x228 (= $x219 true)))
 (let (($x224 (= $x228 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x107 (concat ?x72 (concat ?x32 ?x54)))))
 (let (($x88 (= ?x109 input.dst.llvm-%x)))
 (let (($x108 (= $x88 true)))
 (let (($x102 (= $x108 true)))
 (let (($x213 (and $x102 $x224)))
 (let (($x34 (and $x213 $x76)))
 (let (($x198 (and $x34 $x141)))
 (let (($x33 (and $x198 $x134)))
 (let (($x114 (and $x33 $x217)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x207 (and $x19 $x114)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x182 (and $x77 $x207)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x22 (and $x79 $x182)))
 (let (($x154 (=> $x22 $x71)))
 (not $x154))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x220 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x220 false)))
 (let (($x279 (= $x278 true)))
 (let (($x271 (forall ((input.ind-%var768X (_ BitVec 32)) )(let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var768X)))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var768X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var768X)))
 (=> $x74 (= ?x36 ?x235))))))
 ))
 (let (($x262 (forall ((input.ind-%var767X (_ BitVec 32)) )(let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var767X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var767X)))
 (= $x74 $x210))))
 ))
 (let (($x272 (and $x262 $x271)))
 (let (($x273 (= $x272 true)))
 (let (($x253 (forall ((input.ind-%var762X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var762X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x17))))
 (let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var762X)))
 (let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var762X)))
 (=> $x210 (= ?x235 ?x201))))))))
 ))
 (let (($x49 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x139 (and (bvule (_ bv0 32) input.ind-%var761X) (bvult input.ind-%var761X input.dst.llvm-%n))))
 (let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var761X)))
 (= $x210 $x139))))
 ))
 (let (($x254 (and $x49 $x253)))
 (let (($x255 (= $x254 true)))
 (let (($x145 (forall ((input.ind-%var756X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var756X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x17))))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var756X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var756X)))
 (=> $x74 (= ?x36 ?x201))))))))
 ))
 (let (($x225 (forall ((input.ind-%var755X (_ BitVec 32)) )(let (($x139 (and (bvule (_ bv0 32) input.ind-%var755X) (bvult input.ind-%var755X input.dst.llvm-%n))))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var755X)))
 (= $x74 $x139))))
 ))
 (let (($x45 (and $x225 $x145)))
 (let (($x130 (= $x45 true)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x59 true)))
 (let (($x104 (= $x85 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x71 (= $x20 true)))
 (let (($x154 (= $x71 true)))
 (let (($x120 (= $x154 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x114 true)))
 (let (($x182 (= $x207 true)))
 (let (($x22 (= $x182 true)))
 (let (($x222 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x26 (= $x222 true)))
 (let (($x6 (= $x26 true)))
 (let (($x81 (= $x6 true)))
 (let (($x33 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x122 (= $x33 true)))
 (let (($x9 (= $x122 true)))
 (let (($x86 (= $x9 true)))
 (let ((?x195 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x208 (bvadd input.dst.llvm-%x ?x195)))
 (let (($x176 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x191 (bvadd ?x208 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x53 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x191)))
 (let (($x127 (or false (or false (and (and true (or $x11 $x53)) (or $x15 $x176))))))
 (let (($x125 (=> (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x144 (=> (and $x220 (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x129 (= $x144 true)))
 (let (($x29 (= $x129 true)))
 (let (($x166 (= $x29 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x119)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x76)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x214)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x213)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (and $x228 $x10)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x219 $x131)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (and $x94 $x174)))
 (let (($x216 (not $x118)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x105 $x138)))
 (let (($x116 (and (not $x188) $x216)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x90 $x110)))
 (let (($x162 (not $x160)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x133 $x63)))
 (let (($x142 (and (not $x223) $x162)))
 (let (($x80 (and (and (and (and (and (and $x142 $x116) $x169) $x206) $x180) $x190) $x34)))
 (let (($x60 (and $x80 $x70)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x7 (or false (or false (and (and true (or $x123 $x47)) (or $x113 $x173))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x98 (and $x143 $x60)))
 (let (($x42 (= $x98 true)))
 (let (($x192 (= $x42 true)))
 (let (($x164 (= $x192 true)))
 (let (($x111 (= (_ bv0 32) input.spec-%var-ret-0.L3%6%bbentry)))
 (let (($x106 (= $x111 true)))
 (let (($x83 (= $x106 true)))
 (let (($x24 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x136 (= $x24 true)))
 (let (($x97 (= $x136 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x112 true)))
 (let (($x21 (= $x14 true)))
 (let (($x108 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x102 (= $x108 true)))
 (let (($x117 (= $x102 true)))
 (let (($x8 (= $x117 true)))
 (let (($x65 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x93 (= $x65 true)))
 (let (($x109 (= $x93 true)))
 (let (($x135 (= $x109 true)))
 (let (($x37 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x72 (= $x37 true)))
 (let (($x91 (= $x72 true)))
 (let (($x32 (= $x91 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x50 (= (_ bv0 2) ?x69)))
 (let (($x56 (= $x50 true)))
 (let (($x107 (= $x56 true)))
 (let (($x54 (and $x107 $x32)))
 (let (($x88 (and $x54 $x135)))
 (let (($x12 (and $x88 $x8)))
 (let (($x128 (and $x12 $x21)))
 (let (($x61 (and $x128 $x97)))
 (let (($x89 (and $x61 $x83)))
 (let (($x141 (and $x89 $x164)))
 (let (($x134 (and $x141 $x166)))
 (let (($x87 (and $x134 $x86)))
 (let (($x217 (and $x87 $x81)))
 (let (($x13 (and $x217 $x22)))
 (let (($x146 (and $x13 $x120)))
 (let (($x84 (and $x146 $x104)))
 (let (($x185 (and $x84 $x130)))
 (let (($x256 (and $x185 $x255)))
 (let (($x274 (and $x256 $x273)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x43 $x274)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x276 (and $x67 $x275)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x197 $x276)))
 (let (($x280 (=> $x277 $x279)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x220 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x220 false)))
 (let (($x279 (= $x278 true)))
 (let (($x271 (forall ((input.ind-%var768X (_ BitVec 32)) )(let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var768X)))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var768X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var768X)))
 (=> $x74 (= ?x36 ?x235))))))
 ))
 (let (($x262 (forall ((input.ind-%var767X (_ BitVec 32)) )(let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var767X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var767X)))
 (= $x74 $x210))))
 ))
 (let (($x272 (and $x262 $x271)))
 (let (($x273 (= $x272 true)))
 (let (($x253 (forall ((input.ind-%var762X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var762X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x17))))
 (let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var762X)))
 (let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var762X)))
 (=> $x210 (= ?x235 ?x201))))))))
 ))
 (let (($x49 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x139 (and (bvule (_ bv0 32) input.ind-%var761X) (bvult input.ind-%var761X input.dst.llvm-%n))))
 (let (($x210 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var761X)))
 (= $x210 $x139))))
 ))
 (let (($x254 (and $x49 $x253)))
 (let (($x255 (= $x254 true)))
 (let (($x145 (forall ((input.ind-%var756X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var756X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x17))))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var756X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var756X)))
 (=> $x74 (= ?x36 ?x201))))))))
 ))
 (let (($x225 (forall ((input.ind-%var755X (_ BitVec 32)) )(let (($x139 (and (bvule (_ bv0 32) input.ind-%var755X) (bvult input.ind-%var755X input.dst.llvm-%n))))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var755X)))
 (= $x74 $x139))))
 ))
 (let (($x45 (and $x225 $x145)))
 (let (($x130 (= $x45 true)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x59 true)))
 (let (($x104 (= $x85 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x71 (= $x20 true)))
 (let (($x154 (= $x71 true)))
 (let (($x120 (= $x154 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x114 true)))
 (let (($x182 (= $x207 true)))
 (let (($x22 (= $x182 true)))
 (let (($x222 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x26 (= $x222 true)))
 (let (($x6 (= $x26 true)))
 (let (($x81 (= $x6 true)))
 (let (($x33 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x122 (= $x33 true)))
 (let (($x9 (= $x122 true)))
 (let (($x86 (= $x9 true)))
 (let ((?x195 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x208 (bvadd input.dst.llvm-%x ?x195)))
 (let (($x176 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x191 (bvadd ?x208 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x53 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x191)))
 (let (($x127 (or false (or false (and (and true (or $x11 $x53)) (or $x15 $x176))))))
 (let (($x125 (=> (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x144 (=> (and $x220 (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x129 (= $x144 true)))
 (let (($x29 (= $x129 true)))
 (let (($x166 (= $x29 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x119)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x76)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x214)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x213)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (and $x228 $x10)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x219 $x131)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (and $x94 $x174)))
 (let (($x216 (not $x118)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x105 $x138)))
 (let (($x116 (and (not $x188) $x216)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x90 $x110)))
 (let (($x162 (not $x160)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x133 $x63)))
 (let (($x142 (and (not $x223) $x162)))
 (let (($x80 (and (and (and (and (and (and $x142 $x116) $x169) $x206) $x180) $x190) $x34)))
 (let (($x60 (and $x80 $x70)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x7 (or false (or false (and (and true (or $x123 $x47)) (or $x113 $x173))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x98 (and $x143 $x60)))
 (let (($x42 (= $x98 true)))
 (let (($x192 (= $x42 true)))
 (let (($x164 (= $x192 true)))
 (let (($x111 (= (_ bv0 32) input.spec-%var-ret-0.L3%6%bbentry)))
 (let (($x106 (= $x111 true)))
 (let (($x83 (= $x106 true)))
 (let (($x24 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x136 (= $x24 true)))
 (let (($x97 (= $x136 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x112 true)))
 (let (($x21 (= $x14 true)))
 (let (($x108 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x102 (= $x108 true)))
 (let (($x117 (= $x102 true)))
 (let (($x8 (= $x117 true)))
 (let (($x65 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x93 (= $x65 true)))
 (let (($x109 (= $x93 true)))
 (let (($x135 (= $x109 true)))
 (let (($x37 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x72 (= $x37 true)))
 (let (($x91 (= $x72 true)))
 (let (($x32 (= $x91 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x50 (= (_ bv0 2) ?x69)))
 (let (($x56 (= $x50 true)))
 (let (($x107 (= $x56 true)))
 (let (($x54 (and $x107 $x32)))
 (let (($x88 (and $x54 $x135)))
 (let (($x12 (and $x88 $x8)))
 (let (($x128 (and $x12 $x21)))
 (let (($x61 (and $x128 $x97)))
 (let (($x89 (and $x61 $x83)))
 (let (($x141 (and $x89 $x164)))
 (let (($x134 (and $x141 $x166)))
 (let (($x87 (and $x134 $x86)))
 (let (($x217 (and $x87 $x81)))
 (let (($x13 (and $x217 $x22)))
 (let (($x146 (and $x13 $x120)))
 (let (($x84 (and $x146 $x104)))
 (let (($x185 (and $x84 $x130)))
 (let (($x256 (and $x185 $x255)))
 (let (($x274 (and $x256 $x273)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x43 $x274)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x276 (and $x67 $x275)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x197 $x276)))
 (let (($x280 (=> $x277 $x279)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9d3011c4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xb7315590)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbbeda684)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbbeda687)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9d3011c7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbbeda684)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9d3011c4)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xb7315593 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xb7315592 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xb7315591 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xb7315590 (bvmul #x00000004 x!0))))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000040 x!0)
         (ite (bvule #x00000041 x!0) #x00000041 #x00000040)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #xb7315593 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xb7315592 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xb7315591 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xb7315590 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000255c4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00021bc0)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000255c7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00021bc3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000255c4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00021bc0)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x02000000 x!0)
         (ite (bvule #x02000001 x!0) #x02000001 #x02000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00008003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00008002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00008001 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00008000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00008003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00008002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00008001 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00008000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x295 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x296 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x296 (_ bv1 32))))
 (let (($x178 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (=> $x178 $x297)))
 (let ((?x172 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x79 (bvadd input.dst.llvm-%x ?x172)))
 (let ((?x182 (bvsub ?x79 ?x172)))
 (let (($x71 (ite (bvsge ?x172 (_ bv0 32)) (bvuge ?x79 ?x182) (bvult ?x79 ?x182))))
 (let (($x217 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x114 (ite $x217 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x26 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvmul (_ bv4 64) ?x26)))
 (let ((?x81 ((_ extract 63 32) ?x6)))
 (let (($x207 (= ?x81 ?x114)))
 (let (($x154 (and $x207 $x71)))
 (let (($x87 (= (bvand ?x79 (_ bv4294967292 32)) ?x79)))
 (let (($x120 (and $x87 $x154)))
 (let (($x146 (= true $x120)))
 (let (($x59 (=> $x178 $x146)))
 (let (($x299 (=> (and $x59 $x178) $x297)))
 (let (($x300 (= $x299 true)))
 (let (($x301 (= $x300 true)))
 (let (($x287 (forall ((input.ind-%var922X (_ BitVec 32)) )(let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var922X)))
 (let ((?x254 (input.spec-%var-x-1.1.1 input.ind-%var922X)))
 (let (($x201 (input.spec-%var-x-1.0.1 input.ind-%var922X)))
 (=> $x201 (= ?x254 ?x238))))))
 ))
 (let (($x267 (forall ((input.ind-%var921X (_ BitVec 32)) )(let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var921X)))
 (let (($x201 (input.spec-%var-x-1.0.1 input.ind-%var921X)))
 (= $x201 $x82))))
 ))
 (let (($x288 (and $x267 $x287)))
 (let (($x289 (= $x288 true)))
 (let (($x39 (forall ((input.ind-%var916X (_ BitVec 32)) )(let ((?x126 (bvadd (bvmul input.ind-%var916X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x5))))
 (let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var916X)))
 (let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var916X)))
 (=> $x82 (= ?x238 ?x218))))))))
 ))
 (let (($x215 (forall ((input.ind-%var915X (_ BitVec 32)) )(let (($x124 (and (bvule (_ bv0 32) input.ind-%var915X) (bvult input.ind-%var915X input.dst.llvm-%n))))
 (let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var915X)))
 (= $x82 $x124))))
 ))
 (let (($x258 (and $x215 $x39)))
 (let (($x175 (= $x258 true)))
 (let (($x57 (forall ((input.ind-%var910X (_ BitVec 32)) )(let ((?x126 (bvadd (bvmul input.ind-%var910X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x5))))
 (let ((?x254 (input.spec-%var-x-1.1.1 input.ind-%var910X)))
 (let (($x201 (input.spec-%var-x-1.0.1 input.ind-%var910X)))
 (=> $x201 (= ?x254 ?x218))))))))
 ))
 (let (($x235 (forall ((input.ind-%var909X (_ BitVec 32)) )(let (($x124 (and (bvule (_ bv0 32) input.ind-%var909X) (bvult input.ind-%var909X input.dst.llvm-%n))))
 (let (($x201 (input.spec-%var-x-1.0.1 input.ind-%var909X)))
 (= $x201 $x124))))
 ))
 (let (($x209 (and $x235 $x57)))
 (let (($x196 (= $x209 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x40)))
 (let (($x137 (= ?x35 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x168 (= $x137 true)))
 (let (($x95 (= $x168 true)))
 (let ((?x36 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x199 (= (_ bv0 2) ?x36)))
 (let (($x51 (= $x199 true)))
 (let (($x167 (= $x51 true)))
 (let (($x74 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x232 (= $x74 true)))
 (let (($x186 (= $x232 true)))
 (let (($x139 (= $x186 true)))
 (let (($x85 (= $x59 true)))
 (let (($x104 (= $x85 true)))
 (let (($x84 (= $x104 true)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x166 (= $x29 true)))
 (let (($x134 (= $x166 true)))
 (let (($x33 (= $x134 true)))
 (let (($x151 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x151 true)))
 (let (($x125 (= $x127 true)))
 (let (($x144 (= $x125 true)))
 (let (($x16 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x15 (= $x16 true)))
 (let (($x176 (= $x15 true)))
 (let (($x55 (= $x176 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x191 (= $x23 true)))
 (let (($x11 (= $x191 true)))
 (let (($x53 (= $x11 true)))
 (let (($x194 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x195 (= $x194 true)))
 (let (($x208 (= $x195 true)))
 (let (($x92 (= $x208 true)))
 (let (($x164 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x164 true)))
 (let (($x198 (= $x141 true)))
 (let (($x203 (= $x198 true)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x131)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x213)))
 (let ((?x228 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x228)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (and $x31 $x206)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (and $x169 $x189)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x138 $x188)))
 (let (($x94 (not $x170)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x162 $x142)))
 (let (($x118 (and (not $x105) $x94)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (and $x63 $x223)))
 (let (($x90 (not $x205)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x147 $x28)))
 (let (($x160 (and (not $x133) $x90)))
 (let (($x34 (and (and (and (and (and (and $x160 $x118) $x116) $x148) $x219) $x224) $x10)))
 (let (($x80 (and $x34 $x180)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x96 (or false (or false (and (and true (or $x47 $x75)) (or $x113 $x99))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x119 (and $x143 $x80)))
 (let (($x70 (= $x119 true)))
 (let (($x60 (= $x70 true)))
 (let (($x98 (= $x60 true)))
 (let ((?x204 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x204)))
 (let (($x83 (= ?x111 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x83 true)))
 (let (($x193 (= $x89 true)))
 (let (($x42 (and $x193 $x98)))
 (let (($x220 (and $x42 $x203)))
 (let (($x184 (and $x220 $x92)))
 (let (($x161 (and $x184 $x53)))
 (let (($x159 (and $x161 $x55)))
 (let (($x129 (and $x159 $x144)))
 (let (($x122 (and $x129 $x33)))
 (let (($x73 (and $x122 $x84)))
 (let (($x155 (and $x73 $x139)))
 (let (($x212 (and $x155 $x167)))
 (let (($x229 (and $x212 $x95)))
 (let (($x163 (and $x229 $x196)))
 (let (($x152 (and $x163 $x175)))
 (let (($x290 (and $x152 $x289)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x136 $x290)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x292 (and $x128 $x291)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x293 (and $x112 $x292)))
 (let (($x88 (bvugt ?x79 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd ?x79 (_ bv3 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x32 (bvugt ?x79 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x8 (or false (or false (and (and true (or $x91 $x32)) (or $x135 $x88))))))
 (let (($x157 (=> (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x56 (=> (and $x178 (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x294 (and $x56 $x293)))
 (let (($x302 (=> $x294 $x301)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x295 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x296 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x296 (_ bv1 32))))
 (let (($x178 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (=> $x178 $x297)))
 (let ((?x172 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x79 (bvadd input.dst.llvm-%x ?x172)))
 (let ((?x182 (bvsub ?x79 ?x172)))
 (let (($x71 (ite (bvsge ?x172 (_ bv0 32)) (bvuge ?x79 ?x182) (bvult ?x79 ?x182))))
 (let (($x217 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x114 (ite $x217 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x26 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvmul (_ bv4 64) ?x26)))
 (let ((?x81 ((_ extract 63 32) ?x6)))
 (let (($x207 (= ?x81 ?x114)))
 (let (($x154 (and $x207 $x71)))
 (let (($x87 (= (bvand ?x79 (_ bv4294967292 32)) ?x79)))
 (let (($x120 (and $x87 $x154)))
 (let (($x146 (= true $x120)))
 (let (($x59 (=> $x178 $x146)))
 (let (($x299 (=> (and $x59 $x178) $x297)))
 (let (($x300 (= $x299 true)))
 (let (($x301 (= $x300 true)))
 (let (($x287 (forall ((input.ind-%var922X (_ BitVec 32)) )(let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var922X)))
 (let ((?x254 (input.spec-%var-x-1.1.1 input.ind-%var922X)))
 (let (($x201 (input.spec-%var-x-1.0.1 input.ind-%var922X)))
 (=> $x201 (= ?x254 ?x238))))))
 ))
 (let (($x267 (forall ((input.ind-%var921X (_ BitVec 32)) )(let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var921X)))
 (let (($x201 (input.spec-%var-x-1.0.1 input.ind-%var921X)))
 (= $x201 $x82))))
 ))
 (let (($x288 (and $x267 $x287)))
 (let (($x289 (= $x288 true)))
 (let (($x39 (forall ((input.ind-%var916X (_ BitVec 32)) )(let ((?x126 (bvadd (bvmul input.ind-%var916X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x5))))
 (let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var916X)))
 (let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var916X)))
 (=> $x82 (= ?x238 ?x218))))))))
 ))
 (let (($x215 (forall ((input.ind-%var915X (_ BitVec 32)) )(let (($x124 (and (bvule (_ bv0 32) input.ind-%var915X) (bvult input.ind-%var915X input.dst.llvm-%n))))
 (let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var915X)))
 (= $x82 $x124))))
 ))
 (let (($x258 (and $x215 $x39)))
 (let (($x175 (= $x258 true)))
 (let (($x57 (forall ((input.ind-%var910X (_ BitVec 32)) )(let ((?x126 (bvadd (bvmul input.ind-%var910X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x5))))
 (let ((?x254 (input.spec-%var-x-1.1.1 input.ind-%var910X)))
 (let (($x201 (input.spec-%var-x-1.0.1 input.ind-%var910X)))
 (=> $x201 (= ?x254 ?x218))))))))
 ))
 (let (($x235 (forall ((input.ind-%var909X (_ BitVec 32)) )(let (($x124 (and (bvule (_ bv0 32) input.ind-%var909X) (bvult input.ind-%var909X input.dst.llvm-%n))))
 (let (($x201 (input.spec-%var-x-1.0.1 input.ind-%var909X)))
 (= $x201 $x124))))
 ))
 (let (($x209 (and $x235 $x57)))
 (let (($x196 (= $x209 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x40)))
 (let (($x137 (= ?x35 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x168 (= $x137 true)))
 (let (($x95 (= $x168 true)))
 (let ((?x36 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x199 (= (_ bv0 2) ?x36)))
 (let (($x51 (= $x199 true)))
 (let (($x167 (= $x51 true)))
 (let (($x74 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x232 (= $x74 true)))
 (let (($x186 (= $x232 true)))
 (let (($x139 (= $x186 true)))
 (let (($x85 (= $x59 true)))
 (let (($x104 (= $x85 true)))
 (let (($x84 (= $x104 true)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x166 (= $x29 true)))
 (let (($x134 (= $x166 true)))
 (let (($x33 (= $x134 true)))
 (let (($x151 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x151 true)))
 (let (($x125 (= $x127 true)))
 (let (($x144 (= $x125 true)))
 (let (($x16 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x15 (= $x16 true)))
 (let (($x176 (= $x15 true)))
 (let (($x55 (= $x176 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x191 (= $x23 true)))
 (let (($x11 (= $x191 true)))
 (let (($x53 (= $x11 true)))
 (let (($x194 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x195 (= $x194 true)))
 (let (($x208 (= $x195 true)))
 (let (($x92 (= $x208 true)))
 (let (($x164 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x164 true)))
 (let (($x198 (= $x141 true)))
 (let (($x203 (= $x198 true)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x131)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x213)))
 (let ((?x228 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x228)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (and $x31 $x206)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (and $x169 $x189)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x138 $x188)))
 (let (($x94 (not $x170)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x162 $x142)))
 (let (($x118 (and (not $x105) $x94)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (and $x63 $x223)))
 (let (($x90 (not $x205)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x147 $x28)))
 (let (($x160 (and (not $x133) $x90)))
 (let (($x34 (and (and (and (and (and (and $x160 $x118) $x116) $x148) $x219) $x224) $x10)))
 (let (($x80 (and $x34 $x180)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x96 (or false (or false (and (and true (or $x47 $x75)) (or $x113 $x99))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x119 (and $x143 $x80)))
 (let (($x70 (= $x119 true)))
 (let (($x60 (= $x70 true)))
 (let (($x98 (= $x60 true)))
 (let ((?x204 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x204)))
 (let (($x83 (= ?x111 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x83 true)))
 (let (($x193 (= $x89 true)))
 (let (($x42 (and $x193 $x98)))
 (let (($x220 (and $x42 $x203)))
 (let (($x184 (and $x220 $x92)))
 (let (($x161 (and $x184 $x53)))
 (let (($x159 (and $x161 $x55)))
 (let (($x129 (and $x159 $x144)))
 (let (($x122 (and $x129 $x33)))
 (let (($x73 (and $x122 $x84)))
 (let (($x155 (and $x73 $x139)))
 (let (($x212 (and $x155 $x167)))
 (let (($x229 (and $x212 $x95)))
 (let (($x163 (and $x229 $x196)))
 (let (($x152 (and $x163 $x175)))
 (let (($x290 (and $x152 $x289)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x136 $x290)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x292 (and $x128 $x291)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x293 (and $x112 $x292)))
 (let (($x88 (bvugt ?x79 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd ?x79 (_ bv3 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x32 (bvugt ?x79 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x8 (or false (or false (and (and true (or $x91 $x32)) (or $x135 $x88))))))
 (let (($x157 (=> (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x56 (=> (and $x178 (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x294 (and $x56 $x293)))
 (let (($x302 (=> $x294 $x301)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 205 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x263 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x304 (bvmul (_ bv4294967295 32) ?x263)))
 (let ((?x305 (bvneg ?x304)))
 (let (($x307 (= ?x305 ?x306)))
 (let (($x308 (= $x307 true)))
 (let (($x252 (forall ((input.ind-%var945X (_ BitVec 32)) )(let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var945X)))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var945X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var945X)))
 (=> $x236 (= ?x215 ?x270))))))
 ))
 (let (($x230 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x106 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var944X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var944X)))
 (= $x236 $x106))))
 ))
 (let (($x281 (and $x230 $x252)))
 (let (($x266 (= $x281 true)))
 (let (($x245 (forall ((input.ind-%var939X (_ BitVec 32)) )(let ((?x294 (bvadd (bvmul input.ind-%var939X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x298))))
 (let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var939X)))
 (let (($x106 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var939X)))
 (=> $x106 (= ?x270 ?x52))))))))
 ))
 (let (($x277 (forall ((input.ind-%var938X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var938X) (bvult input.ind-%var938X input.dst.llvm-%n))))
 (let (($x106 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var938X)))
 (= $x106 $x57))))
 ))
 (let (($x240 (and $x277 $x245)))
 (let (($x241 (= $x240 true)))
 (let (($x48 (forall ((input.ind-%var933X (_ BitVec 32)) )(let ((?x294 (bvadd (bvmul input.ind-%var933X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x298))))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var933X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var933X)))
 (=> $x236 (= ?x215 ?x52))))))))
 ))
 (let (($x196 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var932X) (bvult input.ind-%var932X input.dst.llvm-%n))))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var932X)))
 (= $x236 $x57))))
 ))
 (let (($x246 (and $x196 $x48)))
 (let (($x156 (= $x246 true)))
 (let ((?x256 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x256)))
 (let (($x126 (= ?x46 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x44 (= $x126 true)))
 (let (($x25 (= $x44 true)))
 (let (($x185 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x124 (= $x185 true)))
 (let (($x49 (= $x124 true)))
 (let (($x235 (= $x49 true)))
 (let ((?x30 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x178 (bvadd input.dst.llvm-%x ?x30)))
 (let ((?x199 (bvsub ?x178 ?x30)))
 (let (($x40 (ite (bvsge ?x30 (_ bv0 32)) (bvuge ?x178 ?x199) (bvult ?x178 ?x199))))
 (let (($x155 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x225 (ite $x155 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x232 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x186 (bvmul (_ bv4 64) ?x232)))
 (let ((?x139 ((_ extract 63 32) ?x186)))
 (let (($x36 (= ?x139 ?x225)))
 (let (($x35 (and $x36 $x40)))
 (let (($x73 (= (bvand ?x178 (_ bv4294967292 32)) ?x178)))
 (let (($x137 (and $x73 $x35)))
 (let (($x168 (= true $x137)))
 (let (($x19 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (=> $x19 $x168)))
 (let (($x229 (= $x95 true)))
 (let (($x115 (= $x229 true)))
 (let (($x201 (= $x115 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x120 (= $x154 true)))
 (let (($x146 (= $x120 true)))
 (let (($x59 (= $x146 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x182 (= $x22 true)))
 (let (($x13 (= $x182 true)))
 (let (($x20 (= $x13 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x81 (= $x6 true)))
 (let (($x217 (= $x81 true)))
 (let (($x114 (= $x217 true)))
 (let (($x9 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (= $x9 true)))
 (let (($x87 (= $x86 true)))
 (let (($x222 (= $x87 true)))
 (let (($x29 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (= $x29 true)))
 (let (($x134 (= $x166 true)))
 (let (($x33 (= $x134 true)))
 (let (($x151 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x151 true)))
 (let (($x125 (= $x127 true)))
 (let (($x144 (= $x125 true)))
 (let (($x15 (= $x19 true)))
 (let (($x176 (= $x15 true)))
 (let (($x55 (= $x176 true)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x198)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x164)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (and $x180 $x119)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x131 $x70)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x206 $x189)))
 (let (($x181 (not $x219)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x169 $x31)))
 (let (($x224 (and (not $x58) $x181)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x216 $x116)))
 (let (($x200 (not $x214)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x28 $x133)))
 (let (($x190 (and (not $x233) $x200)))
 (let (($x184 (and (and (and (and (and (and $x190 $x224) $x213) $x34) $x60) $x42) $x141)))
 (let (($x23 (and $x184 $x203)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x223)))
 (let (($x170 (or false (or false (and (and true (or $x205 $x90)) (or $x142 $x105))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x170)))
 (let (($x191 (and $x118 $x23)))
 (let (($x11 (= $x191 true)))
 (let (($x53 (= $x11 true)))
 (let (($x161 (= $x53 true)))
 (let ((?x173 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x41 (= (_ bv0 2) ?x173)))
 (let (($x149 (= $x41 true)))
 (let (($x96 (= $x149 true)))
 (let ((?x132 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x132)))
 (let (($x221 (= ?x47 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x221 true)))
 (let (($x113 (= $x187 true)))
 (let (($x143 (and $x113 $x96)))
 (let (($x16 (and $x143 $x161)))
 (let (($x159 (and $x16 $x55)))
 (let (($x129 (and $x159 $x144)))
 (let (($x122 (and $x129 $x33)))
 (let (($x26 (and $x122 $x222)))
 (let (($x207 (and $x26 $x114)))
 (let (($x71 (and $x207 $x20)))
 (let (($x85 (and $x71 $x59)))
 (let (($x210 (and $x85 $x201)))
 (let (($x254 (and $x210 $x235)))
 (let (($x273 (and $x254 $x25)))
 (let (($x255 (and $x273 $x156)))
 (let (($x244 (and $x255 $x241)))
 (let (($x165 (and $x244 $x266)))
 (let (($x89 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x193 (ite $x89 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x193 (_ bv1 32))))
 (let (($x62 (and $x100 $x165)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x61 $x62)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x283 (and $x136 $x177)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x21 $x283)))
 (let (($x117 (bvugt ?x178 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x178 (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x93 (bvugt ?x178 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x77 (or false (or false (and (and true (or $x65 $x93)) (or $x102 $x117))))))
 (let (($x14 (=> (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32))) $x77)))
 (let (($x12 (=> (and $x19 (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32)))) $x77)))
 (let (($x284 (and $x12 $x268)))
 (let (($x309 (=> $x284 $x308)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x263 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x304 (bvmul (_ bv4294967295 32) ?x263)))
 (let ((?x305 (bvneg ?x304)))
 (let (($x307 (= ?x305 ?x306)))
 (let (($x308 (= $x307 true)))
 (let (($x252 (forall ((input.ind-%var945X (_ BitVec 32)) )(let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var945X)))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var945X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var945X)))
 (=> $x236 (= ?x215 ?x270))))))
 ))
 (let (($x230 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x106 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var944X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var944X)))
 (= $x236 $x106))))
 ))
 (let (($x281 (and $x230 $x252)))
 (let (($x266 (= $x281 true)))
 (let (($x245 (forall ((input.ind-%var939X (_ BitVec 32)) )(let ((?x294 (bvadd (bvmul input.ind-%var939X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x298))))
 (let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var939X)))
 (let (($x106 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var939X)))
 (=> $x106 (= ?x270 ?x52))))))))
 ))
 (let (($x277 (forall ((input.ind-%var938X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var938X) (bvult input.ind-%var938X input.dst.llvm-%n))))
 (let (($x106 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var938X)))
 (= $x106 $x57))))
 ))
 (let (($x240 (and $x277 $x245)))
 (let (($x241 (= $x240 true)))
 (let (($x48 (forall ((input.ind-%var933X (_ BitVec 32)) )(let ((?x294 (bvadd (bvmul input.ind-%var933X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x298))))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var933X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var933X)))
 (=> $x236 (= ?x215 ?x52))))))))
 ))
 (let (($x196 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var932X) (bvult input.ind-%var932X input.dst.llvm-%n))))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var932X)))
 (= $x236 $x57))))
 ))
 (let (($x246 (and $x196 $x48)))
 (let (($x156 (= $x246 true)))
 (let ((?x256 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x256)))
 (let (($x126 (= ?x46 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x44 (= $x126 true)))
 (let (($x25 (= $x44 true)))
 (let (($x185 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x124 (= $x185 true)))
 (let (($x49 (= $x124 true)))
 (let (($x235 (= $x49 true)))
 (let ((?x30 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x178 (bvadd input.dst.llvm-%x ?x30)))
 (let ((?x199 (bvsub ?x178 ?x30)))
 (let (($x40 (ite (bvsge ?x30 (_ bv0 32)) (bvuge ?x178 ?x199) (bvult ?x178 ?x199))))
 (let (($x155 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x225 (ite $x155 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x232 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x186 (bvmul (_ bv4 64) ?x232)))
 (let ((?x139 ((_ extract 63 32) ?x186)))
 (let (($x36 (= ?x139 ?x225)))
 (let (($x35 (and $x36 $x40)))
 (let (($x73 (= (bvand ?x178 (_ bv4294967292 32)) ?x178)))
 (let (($x137 (and $x73 $x35)))
 (let (($x168 (= true $x137)))
 (let (($x19 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (=> $x19 $x168)))
 (let (($x229 (= $x95 true)))
 (let (($x115 (= $x229 true)))
 (let (($x201 (= $x115 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x120 (= $x154 true)))
 (let (($x146 (= $x120 true)))
 (let (($x59 (= $x146 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x182 (= $x22 true)))
 (let (($x13 (= $x182 true)))
 (let (($x20 (= $x13 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x81 (= $x6 true)))
 (let (($x217 (= $x81 true)))
 (let (($x114 (= $x217 true)))
 (let (($x9 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (= $x9 true)))
 (let (($x87 (= $x86 true)))
 (let (($x222 (= $x87 true)))
 (let (($x29 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (= $x29 true)))
 (let (($x134 (= $x166 true)))
 (let (($x33 (= $x134 true)))
 (let (($x151 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x151 true)))
 (let (($x125 (= $x127 true)))
 (let (($x144 (= $x125 true)))
 (let (($x15 (= $x19 true)))
 (let (($x176 (= $x15 true)))
 (let (($x55 (= $x176 true)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x198)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x164)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (and $x180 $x119)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x131 $x70)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x206 $x189)))
 (let (($x181 (not $x219)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x169 $x31)))
 (let (($x224 (and (not $x58) $x181)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x216 $x116)))
 (let (($x200 (not $x214)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x28 $x133)))
 (let (($x190 (and (not $x233) $x200)))
 (let (($x184 (and (and (and (and (and (and $x190 $x224) $x213) $x34) $x60) $x42) $x141)))
 (let (($x23 (and $x184 $x203)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x223)))
 (let (($x170 (or false (or false (and (and true (or $x205 $x90)) (or $x142 $x105))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x170)))
 (let (($x191 (and $x118 $x23)))
 (let (($x11 (= $x191 true)))
 (let (($x53 (= $x11 true)))
 (let (($x161 (= $x53 true)))
 (let ((?x173 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x41 (= (_ bv0 2) ?x173)))
 (let (($x149 (= $x41 true)))
 (let (($x96 (= $x149 true)))
 (let ((?x132 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x132)))
 (let (($x221 (= ?x47 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x221 true)))
 (let (($x113 (= $x187 true)))
 (let (($x143 (and $x113 $x96)))
 (let (($x16 (and $x143 $x161)))
 (let (($x159 (and $x16 $x55)))
 (let (($x129 (and $x159 $x144)))
 (let (($x122 (and $x129 $x33)))
 (let (($x26 (and $x122 $x222)))
 (let (($x207 (and $x26 $x114)))
 (let (($x71 (and $x207 $x20)))
 (let (($x85 (and $x71 $x59)))
 (let (($x210 (and $x85 $x201)))
 (let (($x254 (and $x210 $x235)))
 (let (($x273 (and $x254 $x25)))
 (let (($x255 (and $x273 $x156)))
 (let (($x244 (and $x255 $x241)))
 (let (($x165 (and $x244 $x266)))
 (let (($x89 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x193 (ite $x89 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x193 (_ bv1 32))))
 (let (($x62 (and $x100 $x165)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x61 $x62)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x283 (and $x136 $x177)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x21 $x283)))
 (let (($x117 (bvugt ?x178 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x178 (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x93 (bvugt ?x178 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x77 (or false (or false (and (and true (or $x65 $x93)) (or $x102 $x117))))))
 (let (($x14 (=> (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32))) $x77)))
 (let (($x12 (=> (and $x19 (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32)))) $x77)))
 (let (($x284 (and $x12 $x268)))
 (let (($x309 (=> $x284 $x308)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x192))))
 (let ((?x316 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x315)))
 (let ((?x243 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x264 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x243)))
 (let ((?x274 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x265 (bvneg ?x274)))
 (let (($x317 (= ?x265 ?x316)))
 (let (($x318 (= $x317 true)))
 (let (($x282 (forall ((input.ind-%var973X (_ BitVec 32)) )(let ((?x231 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var973X)))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var973X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var973X)))
 (=> $x215 (= ?x52 ?x231))))))
 ))
 (let (($x279 (forall ((input.ind-%var972X (_ BitVec 32)) )(let (($x100 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var972X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var972X)))
 (= $x215 $x100))))
 ))
 (let (($x218 (and $x279 $x282)))
 (let (($x253 (= $x218 true)))
 (let (($x211 (forall ((input.ind-%var967X (_ BitVec 32)) )(let ((?x249 (bvadd (bvmul input.ind-%var967X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x266))))
 (let ((?x231 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var967X)))
 (let (($x100 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var967X)))
 (=> $x100 (= ?x231 ?x284))))))))
 ))
 (let (($x238 (forall ((input.ind-%var966X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var966X) (bvult input.ind-%var966X input.dst.llvm-%n))))
 (let (($x100 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var966X)))
 (= $x100 $x300))))
 ))
 (let (($x269 (and $x238 $x211)))
 (let (($x226 (= $x269 true)))
 (let (($x305 (forall ((input.ind-%var961X (_ BitVec 32)) )(let ((?x249 (bvadd (bvmul input.ind-%var961X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x266))))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var961X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var961X)))
 (=> $x215 (= ?x52 ?x284))))))))
 ))
 (let (($x297 (forall ((input.ind-%var960X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var960X) (bvult input.ind-%var960X input.dst.llvm-%n))))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var960X)))
 (= $x215 $x300))))
 ))
 (let (($x306 (and $x297 $x305)))
 (let (($x307 (= $x306 true)))
 (let ((?x25 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x25)))
 (let (($x236 (= ?x273 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x236 true)))
 (let (($x171 (= $x78 true)))
 (let ((?x49 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x49)))
 (let (($x254 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (= $x254 true)))
 (let (($x46 (= $x256 true)))
 (let ((?x115 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x201 (= (_ bv0 2) ?x115)))
 (let (($x210 (= $x201 true)))
 (let (($x185 (= $x210 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x40 true)))
 (let (($x137 (= $x35 true)))
 (let (($x168 (= $x137 true)))
 (let (($x186 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 ?x50)) (bvult ?x72 (bvsub ?x72 ?x50)))))
 (let (($x146 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x85 (ite $x146 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x71 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x154 (bvmul (_ bv4 64) ?x71)))
 (let ((?x120 ((_ extract 63 32) ?x154)))
 (let (($x104 (= ?x120 ?x85)))
 (let (($x139 (and $x104 $x186)))
 (let (($x13 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x155 (and $x13 $x139)))
 (let (($x225 (= true $x155)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (=> $x172 $x225)))
 (let (($x51 (= $x36 true)))
 (let (($x199 (= $x51 true)))
 (let (($x167 (= $x199 true)))
 (let (($x6 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x81 (= $x6 true)))
 (let (($x217 (= $x81 true)))
 (let (($x114 (= $x217 true)))
 (let (($x9 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x86 (= $x9 true)))
 (let (($x87 (= $x86 true)))
 (let (($x222 (= $x87 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x166 (= $x29 true)))
 (let (($x134 (= $x166 true)))
 (let (($x33 (= $x134 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x151 true)))
 (let (($x125 (= $x127 true)))
 (let (($x144 (= $x125 true)))
 (let (($x16 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x15 (= $x16 true)))
 (let (($x176 (= $x15 true)))
 (let (($x55 (= $x176 true)))
 (let (($x23 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x191 (= $x23 true)))
 (let (($x11 (= $x191 true)))
 (let (($x53 (= $x11 true)))
 (let (($x141 (= $x172 true)))
 (let (($x184 (= $x141 true)))
 (let (($x198 (= $x184 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x34)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x194)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x219)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x189 $x181)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x206 $x224)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x148 $x216)))
 (let (($x214 (not $x116)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x233 (and $x28 $x133)))
 (let (($x190 (and (not $x233) $x214)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x105 $x174)))
 (let (($x188 (not $x138)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x221 $x187)))
 (let (($x118 (and (not $x142) $x188)))
 (let (($x60 (and (and (and (and (and (and $x118 $x190) $x31) $x228) $x220) $x213) $x10)))
 (let (($x208 (and $x60 $x195)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x90 (or false (or false (and (and true (or $x41 $x149)) (or $x110 $x63))))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x98 (and $x162 $x208)))
 (let (($x42 (= $x98 true)))
 (let (($x92 (= $x42 true)))
 (let (($x164 (= $x92 true)))
 (let (($x203 (and $x164 $x198)))
 (let (($x161 (and $x203 $x53)))
 (let (($x159 (and $x161 $x55)))
 (let (($x129 (and $x159 $x144)))
 (let (($x122 (and $x129 $x33)))
 (let (($x26 (and $x122 $x222)))
 (let (($x207 (and $x26 $x114)))
 (let (($x212 (and $x207 $x167)))
 (let (($x95 (and $x212 $x168)))
 (let (($x124 (and $x95 $x185)))
 (let (($x126 (and $x124 $x46)))
 (let (($x57 (and $x126 $x171)))
 (let (($x308 (and $x57 $x307)))
 (let (($x27 (and $x308 $x226)))
 (let (($x145 (and $x27 $x253)))
 (let (($x7 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x132 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x132 (_ bv1 32))))
 (let (($x291 (and $x47 $x145)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x248 (and $x204 $x291)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x261 (and $x97 $x248)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x128 $x261)))
 (let (($x157 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd ?x72 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x109 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x12 (or false (or false (and (and true (or $x135 $x109)) (or $x8 $x157))))))
 (let (($x21 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x12)))
 (let (($x112 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x12)))
 (let (($x292 (and $x112 $x82)))
 (let (($x319 (=> $x292 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x192))))
 (let ((?x316 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x315)))
 (let ((?x243 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x264 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x243)))
 (let ((?x274 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x265 (bvneg ?x274)))
 (let (($x317 (= ?x265 ?x316)))
 (let (($x318 (= $x317 true)))
 (let (($x282 (forall ((input.ind-%var973X (_ BitVec 32)) )(let ((?x231 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var973X)))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var973X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var973X)))
 (=> $x215 (= ?x52 ?x231))))))
 ))
 (let (($x279 (forall ((input.ind-%var972X (_ BitVec 32)) )(let (($x100 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var972X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var972X)))
 (= $x215 $x100))))
 ))
 (let (($x218 (and $x279 $x282)))
 (let (($x253 (= $x218 true)))
 (let (($x211 (forall ((input.ind-%var967X (_ BitVec 32)) )(let ((?x249 (bvadd (bvmul input.ind-%var967X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x266))))
 (let ((?x231 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var967X)))
 (let (($x100 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var967X)))
 (=> $x100 (= ?x231 ?x284))))))))
 ))
 (let (($x238 (forall ((input.ind-%var966X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var966X) (bvult input.ind-%var966X input.dst.llvm-%n))))
 (let (($x100 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var966X)))
 (= $x100 $x300))))
 ))
 (let (($x269 (and $x238 $x211)))
 (let (($x226 (= $x269 true)))
 (let (($x305 (forall ((input.ind-%var961X (_ BitVec 32)) )(let ((?x249 (bvadd (bvmul input.ind-%var961X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x266))))
 (let ((?x52 (input.spec-%var-x-1.1.1 input.ind-%var961X)))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var961X)))
 (=> $x215 (= ?x52 ?x284))))))))
 ))
 (let (($x297 (forall ((input.ind-%var960X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var960X) (bvult input.ind-%var960X input.dst.llvm-%n))))
 (let (($x215 (input.spec-%var-x-1.0.1 input.ind-%var960X)))
 (= $x215 $x300))))
 ))
 (let (($x306 (and $x297 $x305)))
 (let (($x307 (= $x306 true)))
 (let ((?x25 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x25)))
 (let (($x236 (= ?x273 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x236 true)))
 (let (($x171 (= $x78 true)))
 (let ((?x49 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x49)))
 (let (($x254 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (= $x254 true)))
 (let (($x46 (= $x256 true)))
 (let ((?x115 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x201 (= (_ bv0 2) ?x115)))
 (let (($x210 (= $x201 true)))
 (let (($x185 (= $x210 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x40 true)))
 (let (($x137 (= $x35 true)))
 (let (($x168 (= $x137 true)))
 (let (($x186 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 ?x50)) (bvult ?x72 (bvsub ?x72 ?x50)))))
 (let (($x146 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x85 (ite $x146 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x71 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x154 (bvmul (_ bv4 64) ?x71)))
 (let ((?x120 ((_ extract 63 32) ?x154)))
 (let (($x104 (= ?x120 ?x85)))
 (let (($x139 (and $x104 $x186)))
 (let (($x13 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x155 (and $x13 $x139)))
 (let (($x225 (= true $x155)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (=> $x172 $x225)))
 (let (($x51 (= $x36 true)))
 (let (($x199 (= $x51 true)))
 (let (($x167 (= $x199 true)))
 (let (($x6 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x81 (= $x6 true)))
 (let (($x217 (= $x81 true)))
 (let (($x114 (= $x217 true)))
 (let (($x9 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x86 (= $x9 true)))
 (let (($x87 (= $x86 true)))
 (let (($x222 (= $x87 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x166 (= $x29 true)))
 (let (($x134 (= $x166 true)))
 (let (($x33 (= $x134 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x151 true)))
 (let (($x125 (= $x127 true)))
 (let (($x144 (= $x125 true)))
 (let (($x16 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x15 (= $x16 true)))
 (let (($x176 (= $x15 true)))
 (let (($x55 (= $x176 true)))
 (let (($x23 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x191 (= $x23 true)))
 (let (($x11 (= $x191 true)))
 (let (($x53 (= $x11 true)))
 (let (($x141 (= $x172 true)))
 (let (($x184 (= $x141 true)))
 (let (($x198 (= $x184 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x34)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x194)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x219)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x189 $x181)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x206 $x224)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x148 $x216)))
 (let (($x214 (not $x116)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x233 (and $x28 $x133)))
 (let (($x190 (and (not $x233) $x214)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x105 $x174)))
 (let (($x188 (not $x138)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x221 $x187)))
 (let (($x118 (and (not $x142) $x188)))
 (let (($x60 (and (and (and (and (and (and $x118 $x190) $x31) $x228) $x220) $x213) $x10)))
 (let (($x208 (and $x60 $x195)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x90 (or false (or false (and (and true (or $x41 $x149)) (or $x110 $x63))))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x98 (and $x162 $x208)))
 (let (($x42 (= $x98 true)))
 (let (($x92 (= $x42 true)))
 (let (($x164 (= $x92 true)))
 (let (($x203 (and $x164 $x198)))
 (let (($x161 (and $x203 $x53)))
 (let (($x159 (and $x161 $x55)))
 (let (($x129 (and $x159 $x144)))
 (let (($x122 (and $x129 $x33)))
 (let (($x26 (and $x122 $x222)))
 (let (($x207 (and $x26 $x114)))
 (let (($x212 (and $x207 $x167)))
 (let (($x95 (and $x212 $x168)))
 (let (($x124 (and $x95 $x185)))
 (let (($x126 (and $x124 $x46)))
 (let (($x57 (and $x126 $x171)))
 (let (($x308 (and $x57 $x307)))
 (let (($x27 (and $x308 $x226)))
 (let (($x145 (and $x27 $x253)))
 (let (($x7 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x132 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x132 (_ bv1 32))))
 (let (($x291 (and $x47 $x145)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x248 (and $x204 $x291)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x261 (and $x97 $x248)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x128 $x261)))
 (let (($x157 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd ?x72 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x109 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x12 (or false (or false (and (and true (or $x135 $x109)) (or $x8 $x157))))))
 (let (($x21 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x12)))
 (let (($x112 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x12)))
 (let (($x292 (and $x112 $x82)))
 (let (($x319 (=> $x292 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 214 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x202 (bvule ?x45 (_ bv3 32))))
 (let (($x303 (= $x202 true)))
 (let (($x310 (= $x303 true)))
 (let (($x152 (forall ((input.ind-%var997X (_ BitVec 32)) )(let ((?x30 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var997X)))
 (let ((?x263 (input.spec-%var-x-1.1.1 input.ind-%var997X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var997X)))
 (=> $x38 (= ?x263 ?x30))))))
 ))
 (let (($x140 (forall ((input.ind-%var996X (_ BitVec 32)) )(let (($x113 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var996X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var996X)))
 (= $x38 $x113))))
 ))
 (let (($x289 (and $x140 $x152)))
 (let (($x285 (= $x289 true)))
 (let (($x255 (forall ((input.ind-%var991X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var991X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x145))))
 (let ((?x30 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var991X)))
 (let (($x113 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var991X)))
 (=> $x113 (= ?x30 ?x243))))))))
 ))
 (let (($x317 (forall ((input.ind-%var990X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var990X) (bvult input.ind-%var990X input.dst.llvm-%n))))
 (let (($x113 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var990X)))
 (= $x113 $x252))))
 ))
 (let (($x106 (and $x317 $x255)))
 (let (($x156 (= $x106 true)))
 (let (($x265 (forall ((input.ind-%var985X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var985X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x145))))
 (let ((?x263 (input.spec-%var-x-1.1.1 input.ind-%var985X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var985X)))
 (=> $x38 (= ?x263 ?x243))))))))
 ))
 (let (($x68 (forall ((input.ind-%var984X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var984X) (bvult input.ind-%var984X input.dst.llvm-%n))))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var984X)))
 (= $x38 $x252))))
 ))
 (let (($x314 (and $x68 $x265)))
 (let (($x311 (= $x314 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x193)))
 (let (($x299 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x111 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x236 (= $x111 true)))
 (let (($x78 (= $x236 true)))
 (let (($x171 (= $x78 true)))
 (let (($x46 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x126 (= $x46 true)))
 (let (($x44 (= $x126 true)))
 (let (($x25 (= $x44 true)))
 (let (($x124 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x49 (= $x124 true)))
 (let (($x235 (= $x49 true)))
 (let (($x254 (= $x235 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x51)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x225)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x73 $x74)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x104 $x232)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x22 $x182)))
 (let (($x20 (not $x13)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x217 $x114)))
 (let (($x154 (and (not $x207) $x20)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x86 $x87)))
 (let (($x26 (not $x222)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x53 $x161)))
 (let (($x81 (and (not $x9) $x26)))
 (let (($x168 (and (and (and (and (and (and $x81 $x154) $x146) $x85) $x186) $x155) $x36)))
 (let (($x95 (and $x168 $x199)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x134 (or false (or false (and (and true (or $x55 $x159)) (or $x125 $x144))))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x229 (and $x122 $x95)))
 (let (($x115 (= $x229 true)))
 (let (($x201 (= $x115 true)))
 (let (($x210 (= $x201 true)))
 (let ((?x184 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x198 (= (_ bv0 2) ?x184)))
 (let (($x203 (= $x198 true)))
 (let (($x23 (= $x203 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x76 (bvsub ?x72 ?x50)))
 (let (($x10 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x76) (bvult ?x72 ?x76))))
 (let (($x224 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x220 (ite $x224 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x189 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x219 (bvmul (_ bv4 64) ?x189)))
 (let ((?x181 ((_ extract 63 32) ?x219)))
 (let (($x119 (= ?x181 ?x220)))
 (let (($x60 (and $x119 $x10)))
 (let (($x80 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x34 (and $x80 $x60)))
 (let (($x195 (= true $x34)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (=> $x172 $x195)))
 (let (($x98 (= $x208 true)))
 (let (($x42 (= $x98 true)))
 (let (($x92 (= $x42 true)))
 (let (($x190 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x131 (= $x190 true)))
 (let (($x169 (= $x131 true)))
 (let (($x31 (= $x169 true)))
 (let (($x200 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x148 (= $x200 true)))
 (let (($x216 (= $x148 true)))
 (let (($x116 (= $x216 true)))
 (let (($x188 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x188 true)))
 (let (($x28 (= $x118 true)))
 (let (($x133 (= $x28 true)))
 (let (($x142 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x170 (= $x142 true)))
 (let (($x105 (= $x170 true)))
 (let (($x174 (= $x105 true)))
 (let ((?x94 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x223 (bvneg ?x94)))
 (let (($x90 (= ?x223 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x162 (= $x90 true)))
 (let (($x221 (= $x162 true)))
 (let (($x149 (= $x172 true)))
 (let (($x96 (= $x149 true)))
 (let (($x143 (= $x96 true)))
 (let (($x187 (and $x143 $x221)))
 (let (($x138 (and $x187 $x174)))
 (let (($x233 (and $x138 $x133)))
 (let (($x214 (and $x233 $x116)))
 (let (($x180 (and $x214 $x31)))
 (let (($x164 (and $x180 $x92)))
 (let (($x191 (and $x164 $x23)))
 (let (($x185 (and $x191 $x210)))
 (let (($x256 (and $x185 $x254)))
 (let (($x273 (and $x256 $x25)))
 (let (($x57 (and $x273 $x171)))
 (let (($x296 (and $x57 $x300)))
 (let (($x312 (and $x296 $x311)))
 (let (($x262 (and $x312 $x156)))
 (let (($x288 (and $x262 $x285)))
 (let (($x160 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x173 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x173 (_ bv1 32))))
 (let (($x286 (and $x41 $x288)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x258 (and $x7 $x286)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x290 (and $x61 $x258)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x158 (and $x24 $x290)))
 (let (($x77 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd ?x72 (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x102 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x109)))
 (let (($x112 (or false (or false (and (and true (or $x88 $x102)) (or $x56 $x77))))))
 (let (($x128 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x112)))
 (let (($x67 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x112)))
 (let (($x272 (and $x67 $x158)))
 (let (($x83 (=> $x272 $x310)))
 (not $x83))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x202 (bvule ?x45 (_ bv3 32))))
 (let (($x303 (= $x202 true)))
 (let (($x310 (= $x303 true)))
 (let (($x152 (forall ((input.ind-%var997X (_ BitVec 32)) )(let ((?x30 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var997X)))
 (let ((?x263 (input.spec-%var-x-1.1.1 input.ind-%var997X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var997X)))
 (=> $x38 (= ?x263 ?x30))))))
 ))
 (let (($x140 (forall ((input.ind-%var996X (_ BitVec 32)) )(let (($x113 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var996X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var996X)))
 (= $x38 $x113))))
 ))
 (let (($x289 (and $x140 $x152)))
 (let (($x285 (= $x289 true)))
 (let (($x255 (forall ((input.ind-%var991X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var991X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x145))))
 (let ((?x30 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var991X)))
 (let (($x113 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var991X)))
 (=> $x113 (= ?x30 ?x243))))))))
 ))
 (let (($x317 (forall ((input.ind-%var990X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var990X) (bvult input.ind-%var990X input.dst.llvm-%n))))
 (let (($x113 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var990X)))
 (= $x113 $x252))))
 ))
 (let (($x106 (and $x317 $x255)))
 (let (($x156 (= $x106 true)))
 (let (($x265 (forall ((input.ind-%var985X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var985X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x145))))
 (let ((?x263 (input.spec-%var-x-1.1.1 input.ind-%var985X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var985X)))
 (=> $x38 (= ?x263 ?x243))))))))
 ))
 (let (($x68 (forall ((input.ind-%var984X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var984X) (bvult input.ind-%var984X input.dst.llvm-%n))))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var984X)))
 (= $x38 $x252))))
 ))
 (let (($x314 (and $x68 $x265)))
 (let (($x311 (= $x314 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x193)))
 (let (($x299 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x111 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x236 (= $x111 true)))
 (let (($x78 (= $x236 true)))
 (let (($x171 (= $x78 true)))
 (let (($x46 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x126 (= $x46 true)))
 (let (($x44 (= $x126 true)))
 (let (($x25 (= $x44 true)))
 (let (($x124 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x49 (= $x124 true)))
 (let (($x235 (= $x49 true)))
 (let (($x254 (= $x235 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x51)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x225)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x73 $x74)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x104 $x232)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x22 $x182)))
 (let (($x20 (not $x13)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x217 $x114)))
 (let (($x154 (and (not $x207) $x20)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x86 $x87)))
 (let (($x26 (not $x222)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x53 $x161)))
 (let (($x81 (and (not $x9) $x26)))
 (let (($x168 (and (and (and (and (and (and $x81 $x154) $x146) $x85) $x186) $x155) $x36)))
 (let (($x95 (and $x168 $x199)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x134 (or false (or false (and (and true (or $x55 $x159)) (or $x125 $x144))))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x229 (and $x122 $x95)))
 (let (($x115 (= $x229 true)))
 (let (($x201 (= $x115 true)))
 (let (($x210 (= $x201 true)))
 (let ((?x184 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x198 (= (_ bv0 2) ?x184)))
 (let (($x203 (= $x198 true)))
 (let (($x23 (= $x203 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x76 (bvsub ?x72 ?x50)))
 (let (($x10 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x76) (bvult ?x72 ?x76))))
 (let (($x224 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x220 (ite $x224 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x189 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x219 (bvmul (_ bv4 64) ?x189)))
 (let ((?x181 ((_ extract 63 32) ?x219)))
 (let (($x119 (= ?x181 ?x220)))
 (let (($x60 (and $x119 $x10)))
 (let (($x80 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x34 (and $x80 $x60)))
 (let (($x195 (= true $x34)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (=> $x172 $x195)))
 (let (($x98 (= $x208 true)))
 (let (($x42 (= $x98 true)))
 (let (($x92 (= $x42 true)))
 (let (($x190 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x131 (= $x190 true)))
 (let (($x169 (= $x131 true)))
 (let (($x31 (= $x169 true)))
 (let (($x200 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x148 (= $x200 true)))
 (let (($x216 (= $x148 true)))
 (let (($x116 (= $x216 true)))
 (let (($x188 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x188 true)))
 (let (($x28 (= $x118 true)))
 (let (($x133 (= $x28 true)))
 (let (($x142 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x170 (= $x142 true)))
 (let (($x105 (= $x170 true)))
 (let (($x174 (= $x105 true)))
 (let ((?x94 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x223 (bvneg ?x94)))
 (let (($x90 (= ?x223 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x162 (= $x90 true)))
 (let (($x221 (= $x162 true)))
 (let (($x149 (= $x172 true)))
 (let (($x96 (= $x149 true)))
 (let (($x143 (= $x96 true)))
 (let (($x187 (and $x143 $x221)))
 (let (($x138 (and $x187 $x174)))
 (let (($x233 (and $x138 $x133)))
 (let (($x214 (and $x233 $x116)))
 (let (($x180 (and $x214 $x31)))
 (let (($x164 (and $x180 $x92)))
 (let (($x191 (and $x164 $x23)))
 (let (($x185 (and $x191 $x210)))
 (let (($x256 (and $x185 $x254)))
 (let (($x273 (and $x256 $x25)))
 (let (($x57 (and $x273 $x171)))
 (let (($x296 (and $x57 $x300)))
 (let (($x312 (and $x296 $x311)))
 (let (($x262 (and $x312 $x156)))
 (let (($x288 (and $x262 $x285)))
 (let (($x160 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x173 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x173 (_ bv1 32))))
 (let (($x286 (and $x41 $x288)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x258 (and $x7 $x286)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x290 (and $x61 $x258)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x158 (and $x24 $x290)))
 (let (($x77 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd ?x72 (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x102 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x109)))
 (let (($x112 (or false (or false (and (and true (or $x88 $x102)) (or $x56 $x77))))))
 (let (($x128 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x112)))
 (let (($x67 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x112)))
 (let (($x272 (and $x67 $x158)))
 (let (($x83 (=> $x272 $x310)))
 (not $x83))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x187001c0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000001d0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7c000044)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000001d3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7c000047)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000001d0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7c000044)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000006 x!0)
         (ite (bvule #x00000007 x!0) #x00000007 #x00000006)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x187001c3 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x187001c2 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x187001c1 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x187001c0 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x187001c3 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x187001c2 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x187001c1 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x187001c0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x380cad58)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x01ffc200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04353d8c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04353d8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x380cad5b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04353d8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x380cad58)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x01ffc203 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x01ffc202 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x01ffc201 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x01ffc200 (bvmul #x00000004 x!0))))))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x01ffc203 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x01ffc202 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x01ffc201 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x01ffc200 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x319 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x240 (bvule ?x319 (_ bv4 32))))
 (let (($x39 (= $x240 true)))
 (let (($x18 (= $x39 true)))
 (let (($x280 (forall ((input.ind-%var1060X (_ BitVec 32)) )(let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1060X)))
 (let ((?x243 (input.spec-%var-x-1.1.1 input.ind-%var1060X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1060X)))
 (=> $x263 (= ?x243 ?x306))))))
 ))
 (let (($x64 (forall ((input.ind-%var1059X (_ BitVec 32)) )(let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1059X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1059X)))
 (= $x263 $x41))))
 ))
 (let (($x313 (and $x64 $x280)))
 (let (($x153 (= $x313 true)))
 (let (($x52 (forall ((input.ind-%var1054X (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul input.ind-%var1054X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x285))))
 (let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1054X)))
 (let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1054X)))
 (=> $x41 (= ?x306 ?x272))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1053X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var1053X) (bvult input.ind-%var1053X input.dst.llvm-%n))))
 (let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1053X)))
 (= $x41 $x248))))
 ))
 (let (($x268 (and $x284 $x52)))
 (let (($x5 (= $x268 true)))
 (let (($x303 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul input.ind-%var1048X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x285))))
 (let ((?x243 (input.spec-%var-x-1.1.1 input.ind-%var1048X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1048X)))
 (=> $x263 (= ?x243 ?x272))))))))
 ))
 (let (($x253 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var1047X) (bvult input.ind-%var1047X input.dst.llvm-%n))))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1047X)))
 (= $x263 $x248))))
 ))
 (let (($x310 (and $x253 $x303)))
 (let (($x83 (= $x310 true)))
 (let ((?x296 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x296)))
 (let (($x38 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x38 true)))
 (let (($x165 (= $x62 true)))
 (let (($x193 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x215 (= $x193 true)))
 (let (($x299 (= $x215 true)))
 (let (($x267 (= $x299 true)))
 (let (($x111 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x236 (= $x111 true)))
 (let (($x78 (= $x236 true)))
 (let (($x171 (= $x78 true)))
 (let (($x46 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x126 (= $x46 true)))
 (let (($x44 (= $x126 true)))
 (let (($x25 (= $x44 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x168)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x225)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (and $x74 $x186)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x84 $x35)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x154 $x167)))
 (let (($x146 (not $x120)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x182 $x13)))
 (let (($x59 (and (not $x20) $x146)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x81 $x217)))
 (let (($x207 (not $x114)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x159 $x151)))
 (let (($x22 (and (not $x26) $x207)))
 (let (($x210 (and (and (and (and (and (and $x22 $x59) $x40) $x73) $x139) $x137) $x36)))
 (let (($x185 (and $x210 $x51)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x86 (or false (or false (and (and true (or $x129 $x29)) (or $x122 $x53))))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x86)))
 (let (($x124 (and $x222 $x185)))
 (let (($x49 (= $x124 true)))
 (let (($x235 (= $x49 true)))
 (let (($x254 (= $x235 true)))
 (let ((?x191 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x16 (= (_ bv0 2) ?x191)))
 (let (($x15 (= $x16 true)))
 (let (($x33 (= $x15 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x10 (bvsub ?x72 ?x50)))
 (let (($x208 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x10) (bvult ?x72 ?x10))))
 (let (($x76 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x70 (ite $x76 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x220 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x119 (bvmul (_ bv4 64) ?x220)))
 (let ((?x213 ((_ extract 63 32) ?x119)))
 (let (($x194 (= ?x213 ?x70)))
 (let (($x98 (and $x194 $x208)))
 (let (($x181 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x42 (and $x181 $x98)))
 (let (($x92 (= true $x42)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x172 $x92)))
 (let (($x141 (= $x164 true)))
 (let (($x184 (= $x141 true)))
 (let (($x198 (= $x184 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (= $x180 true)))
 (let (($x228 (= $x58 true)))
 (let (($x80 (= $x228 true)))
 (let (($x214 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (= $x214 true)))
 (let (($x131 (= $x190 true)))
 (let (($x169 (= $x131 true)))
 (let (($x233 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x200 (= $x233 true)))
 (let (($x148 (= $x200 true)))
 (let (($x216 (= $x148 true)))
 (let ((?x105 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x105)))
 (let (($x188 (= ?x174 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x188 true)))
 (let (($x28 (= $x118 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x90 (= $x205 true)))
 (let (($x162 (= $x90 true)))
 (let (($x221 (= $x162 true)))
 (let (($x63 (= $x172 true)))
 (let (($x94 (= $x63 true)))
 (let (($x223 (= $x94 true)))
 (let (($x187 (and $x223 $x221)))
 (let (($x133 (and $x187 $x28)))
 (let (($x116 (and $x133 $x216)))
 (let (($x31 (and $x116 $x169)))
 (let (($x206 (and $x31 $x80)))
 (let (($x203 (and $x206 $x198)))
 (let (($x176 (and $x203 $x33)))
 (let (($x256 (and $x176 $x254)))
 (let (($x273 (and $x256 $x25)))
 (let (($x57 (and $x273 $x171)))
 (let (($x300 (and $x57 $x267)))
 (let (($x252 (and $x300 $x165)))
 (let (($x244 (and $x252 $x83)))
 (let (($x294 (and $x244 $x5)))
 (let (($x241 (and $x294 $x153)))
 (let (($x96 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x143 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x143 (_ bv1 32))))
 (let (($x315 (and $x110 $x241)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x132 $x315)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x279 (and $x204 $x177)))
 (let (($x136 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x136 $x279)))
 (let (($x12 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd ?x72 (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x8 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x67 (or false (or false (and (and true (or $x108 $x8)) (or $x14 $x12))))))
 (let (($x24 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x67)))
 (let (($x54 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x67)))
 (let (($x121 (and $x54 $x245)))
 (let (($x250 (=> $x121 $x18)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x319 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x240 (bvule ?x319 (_ bv4 32))))
 (let (($x39 (= $x240 true)))
 (let (($x18 (= $x39 true)))
 (let (($x280 (forall ((input.ind-%var1060X (_ BitVec 32)) )(let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1060X)))
 (let ((?x243 (input.spec-%var-x-1.1.1 input.ind-%var1060X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1060X)))
 (=> $x263 (= ?x243 ?x306))))))
 ))
 (let (($x64 (forall ((input.ind-%var1059X (_ BitVec 32)) )(let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1059X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1059X)))
 (= $x263 $x41))))
 ))
 (let (($x313 (and $x64 $x280)))
 (let (($x153 (= $x313 true)))
 (let (($x52 (forall ((input.ind-%var1054X (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul input.ind-%var1054X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x285))))
 (let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1054X)))
 (let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1054X)))
 (=> $x41 (= ?x306 ?x272))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1053X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var1053X) (bvult input.ind-%var1053X input.dst.llvm-%n))))
 (let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1053X)))
 (= $x41 $x248))))
 ))
 (let (($x268 (and $x284 $x52)))
 (let (($x5 (= $x268 true)))
 (let (($x303 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul input.ind-%var1048X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x285))))
 (let ((?x243 (input.spec-%var-x-1.1.1 input.ind-%var1048X)))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1048X)))
 (=> $x263 (= ?x243 ?x272))))))))
 ))
 (let (($x253 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var1047X) (bvult input.ind-%var1047X input.dst.llvm-%n))))
 (let (($x263 (input.spec-%var-x-1.0.1 input.ind-%var1047X)))
 (= $x263 $x248))))
 ))
 (let (($x310 (and $x253 $x303)))
 (let (($x83 (= $x310 true)))
 (let ((?x296 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x296)))
 (let (($x38 (= ?x47 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x38 true)))
 (let (($x165 (= $x62 true)))
 (let (($x193 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x215 (= $x193 true)))
 (let (($x299 (= $x215 true)))
 (let (($x267 (= $x299 true)))
 (let (($x111 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x236 (= $x111 true)))
 (let (($x78 (= $x236 true)))
 (let (($x171 (= $x78 true)))
 (let (($x46 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x126 (= $x46 true)))
 (let (($x44 (= $x126 true)))
 (let (($x25 (= $x44 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x168)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x225)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (and $x74 $x186)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x84 $x35)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x154 $x167)))
 (let (($x146 (not $x120)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x182 $x13)))
 (let (($x59 (and (not $x20) $x146)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x81 $x217)))
 (let (($x207 (not $x114)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x159 $x151)))
 (let (($x22 (and (not $x26) $x207)))
 (let (($x210 (and (and (and (and (and (and $x22 $x59) $x40) $x73) $x139) $x137) $x36)))
 (let (($x185 (and $x210 $x51)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x86 (or false (or false (and (and true (or $x129 $x29)) (or $x122 $x53))))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x86)))
 (let (($x124 (and $x222 $x185)))
 (let (($x49 (= $x124 true)))
 (let (($x235 (= $x49 true)))
 (let (($x254 (= $x235 true)))
 (let ((?x191 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x16 (= (_ bv0 2) ?x191)))
 (let (($x15 (= $x16 true)))
 (let (($x33 (= $x15 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x10 (bvsub ?x72 ?x50)))
 (let (($x208 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x10) (bvult ?x72 ?x10))))
 (let (($x76 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x70 (ite $x76 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x220 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x119 (bvmul (_ bv4 64) ?x220)))
 (let ((?x213 ((_ extract 63 32) ?x119)))
 (let (($x194 (= ?x213 ?x70)))
 (let (($x98 (and $x194 $x208)))
 (let (($x181 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x42 (and $x181 $x98)))
 (let (($x92 (= true $x42)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x172 $x92)))
 (let (($x141 (= $x164 true)))
 (let (($x184 (= $x141 true)))
 (let (($x198 (= $x184 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (= $x180 true)))
 (let (($x228 (= $x58 true)))
 (let (($x80 (= $x228 true)))
 (let (($x214 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (= $x214 true)))
 (let (($x131 (= $x190 true)))
 (let (($x169 (= $x131 true)))
 (let (($x233 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x200 (= $x233 true)))
 (let (($x148 (= $x200 true)))
 (let (($x216 (= $x148 true)))
 (let ((?x105 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x105)))
 (let (($x188 (= ?x174 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x188 true)))
 (let (($x28 (= $x118 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x90 (= $x205 true)))
 (let (($x162 (= $x90 true)))
 (let (($x221 (= $x162 true)))
 (let (($x63 (= $x172 true)))
 (let (($x94 (= $x63 true)))
 (let (($x223 (= $x94 true)))
 (let (($x187 (and $x223 $x221)))
 (let (($x133 (and $x187 $x28)))
 (let (($x116 (and $x133 $x216)))
 (let (($x31 (and $x116 $x169)))
 (let (($x206 (and $x31 $x80)))
 (let (($x203 (and $x206 $x198)))
 (let (($x176 (and $x203 $x33)))
 (let (($x256 (and $x176 $x254)))
 (let (($x273 (and $x256 $x25)))
 (let (($x57 (and $x273 $x171)))
 (let (($x300 (and $x57 $x267)))
 (let (($x252 (and $x300 $x165)))
 (let (($x244 (and $x252 $x83)))
 (let (($x294 (and $x244 $x5)))
 (let (($x241 (and $x294 $x153)))
 (let (($x96 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x143 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x143 (_ bv1 32))))
 (let (($x315 (and $x110 $x241)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x132 $x315)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x279 (and $x204 $x177)))
 (let (($x136 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x136 $x279)))
 (let (($x12 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd ?x72 (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x8 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x67 (or false (or false (and (and true (or $x108 $x8)) (or $x14 $x12))))))
 (let (($x24 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x67)))
 (let (($x54 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x67)))
 (let (($x121 (and $x54 $x245)))
 (let (($x250 (=> $x121 $x18)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000012)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000104)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000107)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000104)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000012 x!0)
         (ite (bvule #x00000013 x!0) #x00000013 #x00000012)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00800001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4e84d9d0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x4035d284)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2091e8dc)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2091e8df)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4e84d9d3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2091e8dc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4e84d9d0)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x4035d287 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x4035d286 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x4035d285 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x4035d284 (bvmul #x00000004 x!0))))))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00800001 x!0)
         (ite (bvule #x00800002 x!0) #x00800002 #x00800001)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x4035d287 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x4035d286 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x4035d285 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x4035d284 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x292 (bvule ?x230 (_ bv4294967294 32))))
 (let (($x262 (= $x292 true)))
 (let (($x301 (= $x262 true)))
 (let (($x251 (forall ((input.ind-%var1129X (_ BitVec 32)) )(let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1129X)))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var1129X)))
 (let (($x165 (input.spec-%var-x-1.0.1 input.ind-%var1129X)))
 (=> $x165 (= ?x158 ?x149))))))
 ))
 (let (($x68 (forall ((input.ind-%var1128X (_ BitVec 32)) )(let (($x110 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1128X)))
 (let (($x165 (input.spec-%var-x-1.0.1 input.ind-%var1128X)))
 (= $x165 $x110))))
 ))
 (let (($x101 (and $x68 $x251)))
 (let (($x211 (= $x101 true)))
 (let (($x316 (forall ((input.ind-%var1123X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1123X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x268))))
 (let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1123X)))
 (let (($x110 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1123X)))
 (=> $x110 (= ?x149 ?x277))))))))
 ))
 (let (($x250 (forall ((input.ind-%var1122X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var1122X) (bvult input.ind-%var1122X input.dst.llvm-%n))))
 (let (($x110 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1122X)))
 (= $x110 $x253))))
 ))
 (let (($x257 (and $x250 $x316)))
 (let (($x156 (= $x257 true)))
 (let (($x153 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1117X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x268))))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var1117X)))
 (let (($x165 (input.spec-%var-x-1.0.1 input.ind-%var1117X)))
 (=> $x165 (= ?x158 ?x277))))))))
 ))
 (let (($x274 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var1116X) (bvult input.ind-%var1116X input.dst.llvm-%n))))
 (let (($x165 (input.spec-%var-x-1.0.1 input.ind-%var1116X)))
 (= $x165 $x253))))
 ))
 (let (($x241 (and $x274 $x153)))
 (let (($x315 (= $x241 true)))
 (let ((?x215 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x299 (bvneg ?x215)))
 (let (($x267 (= ?x299 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x300 (= $x267 true)))
 (let (($x296 (= $x300 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x78 (= $x236 true)))
 (let (($x171 (= $x78 true)))
 (let (($x57 (= $x171 true)))
 (let (($x126 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x44 (= $x126 true)))
 (let (($x25 (= $x44 true)))
 (let (($x273 (= $x25 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x137)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x115)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x229 $x74)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x73 $x232)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x154 $x167)))
 (let (($x146 (not $x120)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (and $x13 $x20)))
 (let (($x199 (and (not $x212) $x146)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x81 $x217)))
 (let (($x207 (not $x114)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x125 $x87)))
 (let (($x182 (and (not $x71) $x207)))
 (let (($x185 (and (and (and (and (and (and $x182 $x199) $x40) $x104) $x186) $x139) $x155)))
 (let (($x124 (and $x185 $x201)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x29 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x29)))
 (let (($x159 (or false (or false (and (and true (or $x166 $x134)) (or $x161 $x9))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x159)))
 (let (($x49 (and $x26 $x124)))
 (let (($x235 (= $x49 true)))
 (let (($x254 (= $x235 true)))
 (let (($x256 (= $x254 true)))
 (let ((?x191 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x16 (= (_ bv0 2) ?x191)))
 (let (($x15 (= $x16 true)))
 (let (($x33 (= $x15 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x60 (bvsub ?x72 ?x50)))
 (let (($x208 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x60) (bvult ?x72 ?x60))))
 (let (($x76 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x70 (ite $x76 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x220 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x119 (bvmul (_ bv4 64) ?x220)))
 (let ((?x213 ((_ extract 63 32) ?x119)))
 (let (($x194 (= ?x213 ?x70)))
 (let (($x98 (and $x194 $x208)))
 (let (($x181 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x42 (and $x181 $x98)))
 (let (($x92 (= true $x42)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x172 $x92)))
 (let (($x141 (= $x164 true)))
 (let (($x184 (= $x141 true)))
 (let (($x198 (= $x184 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x58 (= $x180 true)))
 (let (($x228 (= $x58 true)))
 (let (($x80 (= $x228 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x214 (= $x116 true)))
 (let (($x190 (= $x214 true)))
 (let (($x131 (= $x190 true)))
 (let (($x133 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x233 (= $x133 true)))
 (let (($x200 (= $x233 true)))
 (let (($x148 (= $x200 true)))
 (let ((?x170 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x170)))
 (let (($x138 (= ?x105 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x138 true)))
 (let (($x118 (= $x188 true)))
 (let (($x90 (= $x172 true)))
 (let (($x162 (= $x90 true)))
 (let (($x221 (= $x162 true)))
 (let (($x28 (and $x221 $x118)))
 (let (($x216 (and $x28 $x148)))
 (let (($x169 (and $x216 $x131)))
 (let (($x206 (and $x169 $x80)))
 (let (($x203 (and $x206 $x198)))
 (let (($x176 (and $x203 $x33)))
 (let (($x46 (and $x176 $x256)))
 (let (($x111 (and $x46 $x273)))
 (let (($x193 (and $x111 $x57)))
 (let (($x47 (and $x193 $x296)))
 (let (($x177 (and $x47 $x315)))
 (let (($x297 (and $x177 $x156)))
 (let (($x320 (and $x297 $x211)))
 (let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x223 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x223 (_ bv1 32))))
 (let (($x246 (and $x205 $x320)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x48 (and $x160 $x246)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x209 (and $x7 $x48)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x196 (and $x97 $x209)))
 (let (($x112 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x72 (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x56 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x54 (or false (or false (and (and true (or $x117 $x56)) (or $x21 $x112))))))
 (let (($x136 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x54)))
 (let (($x93 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x54)))
 (let (($x11 (and $x93 $x196)))
 (let (($x304 (=> $x11 $x301)))
 (not $x304))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x292 (bvule ?x230 (_ bv4294967294 32))))
 (let (($x262 (= $x292 true)))
 (let (($x301 (= $x262 true)))
 (let (($x251 (forall ((input.ind-%var1129X (_ BitVec 32)) )(let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1129X)))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var1129X)))
 (let (($x165 (input.spec-%var-x-1.0.1 input.ind-%var1129X)))
 (=> $x165 (= ?x158 ?x149))))))
 ))
 (let (($x68 (forall ((input.ind-%var1128X (_ BitVec 32)) )(let (($x110 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1128X)))
 (let (($x165 (input.spec-%var-x-1.0.1 input.ind-%var1128X)))
 (= $x165 $x110))))
 ))
 (let (($x101 (and $x68 $x251)))
 (let (($x211 (= $x101 true)))
 (let (($x316 (forall ((input.ind-%var1123X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1123X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x268))))
 (let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1123X)))
 (let (($x110 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1123X)))
 (=> $x110 (= ?x149 ?x277))))))))
 ))
 (let (($x250 (forall ((input.ind-%var1122X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var1122X) (bvult input.ind-%var1122X input.dst.llvm-%n))))
 (let (($x110 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1122X)))
 (= $x110 $x253))))
 ))
 (let (($x257 (and $x250 $x316)))
 (let (($x156 (= $x257 true)))
 (let (($x153 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1117X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x268))))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var1117X)))
 (let (($x165 (input.spec-%var-x-1.0.1 input.ind-%var1117X)))
 (=> $x165 (= ?x158 ?x277))))))))
 ))
 (let (($x274 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var1116X) (bvult input.ind-%var1116X input.dst.llvm-%n))))
 (let (($x165 (input.spec-%var-x-1.0.1 input.ind-%var1116X)))
 (= $x165 $x253))))
 ))
 (let (($x241 (and $x274 $x153)))
 (let (($x315 (= $x241 true)))
 (let ((?x215 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x299 (bvneg ?x215)))
 (let (($x267 (= ?x299 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x300 (= $x267 true)))
 (let (($x296 (= $x300 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x78 (= $x236 true)))
 (let (($x171 (= $x78 true)))
 (let (($x57 (= $x171 true)))
 (let (($x126 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x44 (= $x126 true)))
 (let (($x25 (= $x44 true)))
 (let (($x273 (= $x25 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x137)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x115)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x229 $x74)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x73 $x232)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x154 $x167)))
 (let (($x146 (not $x120)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (and $x13 $x20)))
 (let (($x199 (and (not $x212) $x146)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x81 $x217)))
 (let (($x207 (not $x114)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x125 $x87)))
 (let (($x182 (and (not $x71) $x207)))
 (let (($x185 (and (and (and (and (and (and $x182 $x199) $x40) $x104) $x186) $x139) $x155)))
 (let (($x124 (and $x185 $x201)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x29 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x29)))
 (let (($x159 (or false (or false (and (and true (or $x166 $x134)) (or $x161 $x9))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x159)))
 (let (($x49 (and $x26 $x124)))
 (let (($x235 (= $x49 true)))
 (let (($x254 (= $x235 true)))
 (let (($x256 (= $x254 true)))
 (let ((?x191 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x16 (= (_ bv0 2) ?x191)))
 (let (($x15 (= $x16 true)))
 (let (($x33 (= $x15 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x60 (bvsub ?x72 ?x50)))
 (let (($x208 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x60) (bvult ?x72 ?x60))))
 (let (($x76 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x70 (ite $x76 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x220 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x119 (bvmul (_ bv4 64) ?x220)))
 (let ((?x213 ((_ extract 63 32) ?x119)))
 (let (($x194 (= ?x213 ?x70)))
 (let (($x98 (and $x194 $x208)))
 (let (($x181 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x42 (and $x181 $x98)))
 (let (($x92 (= true $x42)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x172 $x92)))
 (let (($x141 (= $x164 true)))
 (let (($x184 (= $x141 true)))
 (let (($x198 (= $x184 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x58 (= $x180 true)))
 (let (($x228 (= $x58 true)))
 (let (($x80 (= $x228 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x214 (= $x116 true)))
 (let (($x190 (= $x214 true)))
 (let (($x131 (= $x190 true)))
 (let (($x133 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x233 (= $x133 true)))
 (let (($x200 (= $x233 true)))
 (let (($x148 (= $x200 true)))
 (let ((?x170 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x170)))
 (let (($x138 (= ?x105 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x138 true)))
 (let (($x118 (= $x188 true)))
 (let (($x90 (= $x172 true)))
 (let (($x162 (= $x90 true)))
 (let (($x221 (= $x162 true)))
 (let (($x28 (and $x221 $x118)))
 (let (($x216 (and $x28 $x148)))
 (let (($x169 (and $x216 $x131)))
 (let (($x206 (and $x169 $x80)))
 (let (($x203 (and $x206 $x198)))
 (let (($x176 (and $x203 $x33)))
 (let (($x46 (and $x176 $x256)))
 (let (($x111 (and $x46 $x273)))
 (let (($x193 (and $x111 $x57)))
 (let (($x47 (and $x193 $x296)))
 (let (($x177 (and $x47 $x315)))
 (let (($x297 (and $x177 $x156)))
 (let (($x320 (and $x297 $x211)))
 (let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x223 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x223 (_ bv1 32))))
 (let (($x246 (and $x205 $x320)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x48 (and $x160 $x246)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x209 (and $x7 $x48)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x196 (and $x97 $x209)))
 (let (($x112 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x72 (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x56 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x54 (or false (or false (and (and true (or $x117 $x56)) (or $x21 $x112))))))
 (let (($x136 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x54)))
 (let (($x93 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x54)))
 (let (($x11 (and $x93 $x196)))
 (let (($x304 (=> $x11 $x301)))
 (not $x304))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x312 (bvsge ?x79 (_ bv0 32))))
 (let (($x308 (= $x312 true)))
 (let (($x226 (= $x308 true)))
 (let (($x240 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1152X)))
 (let ((?x277 (input.spec-%var-x-1.1.1 input.ind-%var1152X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1152X)))
 (=> $x158 (= ?x277 ?x286))))))
 ))
 (let (($x282 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x205 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1151X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1151X)))
 (= $x158 $x205))))
 ))
 (let (($x231 (and $x282 $x240)))
 (let (($x41 (= $x231 true)))
 (let (($x62 (forall ((input.ind-%var1146X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var1146X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x211))))
 (let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1146X)))
 (let (($x205 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1146X)))
 (=> $x205 (= ?x286 ?x11))))))))
 ))
 (let (($x290 (forall ((input.ind-%var1145X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1145X) (bvult input.ind-%var1145X input.dst.llvm-%n))))
 (let (($x205 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1145X)))
 (= $x205 $x294))))
 ))
 (let (($x291 (and $x290 $x62)))
 (let (($x264 (= $x291 true)))
 (let (($x262 (forall ((input.ind-%var1140X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var1140X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x211))))
 (let ((?x277 (input.spec-%var-x-1.1.1 input.ind-%var1140X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1140X)))
 (=> $x158 (= ?x277 ?x11))))))))
 ))
 (let (($x52 (forall ((input.ind-%var1139X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1139X) (bvult input.ind-%var1139X input.dst.llvm-%n))))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1139X)))
 (= $x158 $x294))))
 ))
 (let (($x301 (and $x52 $x262)))
 (let (($x304 (= $x301 true)))
 (let ((?x47 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x47)))
 (let (($x165 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x218 (= $x165 true)))
 (let (($x248 (= $x218 true)))
 (let (($x215 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x299 (= $x215 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x236 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x236 true)))
 (let (($x171 (= $x78 true)))
 (let (($x57 (= $x171 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x185)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x115)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x74 $x186)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x84 $x168)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x199 $x225)))
 (let (($x40 (not $x85)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x167 $x120)))
 (let (($x95 (and (not $x146) $x40)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x182 $x13)))
 (let (($x212 (not $x20)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x134 $x122)))
 (let (($x154 (and (not $x207) $x212)))
 (let (($x256 (and (and (and (and (and (and $x154 $x95) $x210) $x229) $x35) $x51) $x155)))
 (let (($x46 (and $x256 $x137)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x81 (or false (or false (and (and true (or $x6 $x86)) (or $x26 $x125))))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x126 (and $x114 $x46)))
 (let (($x44 (= $x126 true)))
 (let (($x25 (= $x44 true)))
 (let (($x273 (= $x25 true)))
 (let ((?x176 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x144 (= (_ bv0 2) ?x176)))
 (let (($x129 (= $x144 true)))
 (let (($x151 (= $x129 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x208 (bvsub ?x72 ?x50)))
 (let (($x164 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x208) (bvult ?x72 ?x208))))
 (let (($x60 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x34 (ite $x60 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x70 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x194 (bvmul (_ bv4 64) ?x70)))
 (let ((?x10 ((_ extract 63 32) ?x194)))
 (let (($x195 (= ?x10 ?x34)))
 (let (($x141 (and $x195 $x164)))
 (let (($x213 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x184 (and $x213 $x141)))
 (let (($x198 (= true $x184)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (=> $x172 $x198)))
 (let (($x23 (= $x203 true)))
 (let (($x191 (= $x23 true)))
 (let (($x16 (= $x191 true)))
 (let (($x206 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x189 (= $x206 true)))
 (let (($x219 (= $x189 true)))
 (let (($x181 (= $x219 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (= $x169 true)))
 (let (($x180 (= $x31 true)))
 (let (($x58 (= $x180 true)))
 (let (($x216 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (= $x216 true)))
 (let (($x214 (= $x116 true)))
 (let (($x190 (= $x214 true)))
 (let ((?x188 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x188)))
 (let (($x133 (= ?x118 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x233 (= $x133 true)))
 (let (($x200 (= $x233 true)))
 (let (($x142 (= $x172 true)))
 (let (($x170 (= $x142 true)))
 (let (($x105 (= $x170 true)))
 (let (($x148 (and $x105 $x200)))
 (let (($x131 (and $x148 $x190)))
 (let (($x228 (and $x131 $x58)))
 (let (($x224 (and $x228 $x181)))
 (let (($x15 (and $x224 $x16)))
 (let (($x29 (and $x15 $x151)))
 (let (($x111 (and $x29 $x273)))
 (let (($x193 (and $x111 $x57)))
 (let (($x296 (and $x193 $x300)))
 (let (($x253 (and $x296 $x248)))
 (let (($x145 (and $x253 $x304)))
 (let (($x255 (and $x145 $x264)))
 (let (($x178 (and $x255 $x41)))
 (let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x221 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x221 (_ bv1 32))))
 (let (($x39 (and $x187 $x178)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x96 $x39)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x266 (and $x132 $x287)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x270 (and $x61 $x266)))
 (let (($x67 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd ?x72 (_ bv3 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x14 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x93 (or false (or false (and (and true (or $x157 $x14)) (or $x128 $x67))))))
 (let (($x97 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x93)))
 (let (($x109 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x93)))
 (let (($x75 (and $x109 $x270)))
 (let (($x238 (=> $x75 $x226)))
 (not $x238))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x312 (bvsge ?x79 (_ bv0 32))))
 (let (($x308 (= $x312 true)))
 (let (($x226 (= $x308 true)))
 (let (($x240 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1152X)))
 (let ((?x277 (input.spec-%var-x-1.1.1 input.ind-%var1152X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1152X)))
 (=> $x158 (= ?x277 ?x286))))))
 ))
 (let (($x282 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x205 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1151X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1151X)))
 (= $x158 $x205))))
 ))
 (let (($x231 (and $x282 $x240)))
 (let (($x41 (= $x231 true)))
 (let (($x62 (forall ((input.ind-%var1146X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var1146X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x211))))
 (let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1146X)))
 (let (($x205 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1146X)))
 (=> $x205 (= ?x286 ?x11))))))))
 ))
 (let (($x290 (forall ((input.ind-%var1145X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1145X) (bvult input.ind-%var1145X input.dst.llvm-%n))))
 (let (($x205 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1145X)))
 (= $x205 $x294))))
 ))
 (let (($x291 (and $x290 $x62)))
 (let (($x264 (= $x291 true)))
 (let (($x262 (forall ((input.ind-%var1140X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var1140X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x211))))
 (let ((?x277 (input.spec-%var-x-1.1.1 input.ind-%var1140X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1140X)))
 (=> $x158 (= ?x277 ?x11))))))))
 ))
 (let (($x52 (forall ((input.ind-%var1139X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1139X) (bvult input.ind-%var1139X input.dst.llvm-%n))))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var1139X)))
 (= $x158 $x294))))
 ))
 (let (($x301 (and $x52 $x262)))
 (let (($x304 (= $x301 true)))
 (let ((?x47 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x47)))
 (let (($x165 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x218 (= $x165 true)))
 (let (($x248 (= $x218 true)))
 (let (($x215 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x299 (= $x215 true)))
 (let (($x267 (= $x299 true)))
 (let (($x300 (= $x267 true)))
 (let (($x236 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x236 true)))
 (let (($x171 (= $x78 true)))
 (let (($x57 (= $x171 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x185)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x115)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x74 $x186)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x84 $x168)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x199 $x225)))
 (let (($x40 (not $x85)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x167 $x120)))
 (let (($x95 (and (not $x146) $x40)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x182 $x13)))
 (let (($x212 (not $x20)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x134 $x122)))
 (let (($x154 (and (not $x207) $x212)))
 (let (($x256 (and (and (and (and (and (and $x154 $x95) $x210) $x229) $x35) $x51) $x155)))
 (let (($x46 (and $x256 $x137)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x81 (or false (or false (and (and true (or $x6 $x86)) (or $x26 $x125))))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x126 (and $x114 $x46)))
 (let (($x44 (= $x126 true)))
 (let (($x25 (= $x44 true)))
 (let (($x273 (= $x25 true)))
 (let ((?x176 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x144 (= (_ bv0 2) ?x176)))
 (let (($x129 (= $x144 true)))
 (let (($x151 (= $x129 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x208 (bvsub ?x72 ?x50)))
 (let (($x164 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x208) (bvult ?x72 ?x208))))
 (let (($x60 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x34 (ite $x60 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x70 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x194 (bvmul (_ bv4 64) ?x70)))
 (let ((?x10 ((_ extract 63 32) ?x194)))
 (let (($x195 (= ?x10 ?x34)))
 (let (($x141 (and $x195 $x164)))
 (let (($x213 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x184 (and $x213 $x141)))
 (let (($x198 (= true $x184)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (=> $x172 $x198)))
 (let (($x23 (= $x203 true)))
 (let (($x191 (= $x23 true)))
 (let (($x16 (= $x191 true)))
 (let (($x206 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x189 (= $x206 true)))
 (let (($x219 (= $x189 true)))
 (let (($x181 (= $x219 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (= $x169 true)))
 (let (($x180 (= $x31 true)))
 (let (($x58 (= $x180 true)))
 (let (($x216 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (= $x216 true)))
 (let (($x214 (= $x116 true)))
 (let (($x190 (= $x214 true)))
 (let ((?x188 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x188)))
 (let (($x133 (= ?x118 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x233 (= $x133 true)))
 (let (($x200 (= $x233 true)))
 (let (($x142 (= $x172 true)))
 (let (($x170 (= $x142 true)))
 (let (($x105 (= $x170 true)))
 (let (($x148 (and $x105 $x200)))
 (let (($x131 (and $x148 $x190)))
 (let (($x228 (and $x131 $x58)))
 (let (($x224 (and $x228 $x181)))
 (let (($x15 (and $x224 $x16)))
 (let (($x29 (and $x15 $x151)))
 (let (($x111 (and $x29 $x273)))
 (let (($x193 (and $x111 $x57)))
 (let (($x296 (and $x193 $x300)))
 (let (($x253 (and $x296 $x248)))
 (let (($x145 (and $x253 $x304)))
 (let (($x255 (and $x145 $x264)))
 (let (($x178 (and $x255 $x41)))
 (let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x221 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x221 (_ bv1 32))))
 (let (($x39 (and $x187 $x178)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x96 $x39)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x266 (and $x132 $x287)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x270 (and $x61 $x266)))
 (let (($x67 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd ?x72 (_ bv3 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x14 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x93 (or false (or false (and (and true (or $x157 $x14)) (or $x128 $x67))))))
 (let (($x97 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x93)))
 (let (($x109 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x93)))
 (let (($x75 (and $x109 $x270)))
 (let (($x238 (=> $x75 $x226)))
 (not $x238))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x121 (bvule ?x173 (_ bv4294967294 32))))
 (let (($x283 (= $x121 true)))
 (let (($x314 (= $x283 true)))
 (let (($x127 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let ((?x153 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1175X)))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var1175X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1175X)))
 (=> $x277 (= ?x11 ?x153))))))
 ))
 (let (($x45 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1174X)))
 (= $x277 $x187))))
 ))
 (let (($x252 (and $x45 $x127)))
 (let (($x297 (= $x252 true)))
 (let (($x274 (forall ((input.ind-%var1169X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1169X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x41))))
 (let ((?x153 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1169X)))
 (let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1169X)))
 (=> $x187 (= ?x153 ?x75))))))))
 ))
 (let (($x237 (forall ((input.ind-%var1168X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var1168X) (bvult input.ind-%var1168X input.dst.llvm-%n))))
 (let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1168X)))
 (= $x187 $x246))))
 ))
 (let (($x64 (and $x237 $x274)))
 (let (($x83 (= $x64 true)))
 (let (($x308 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1163X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x41))))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var1163X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1163X)))
 (=> $x277 (= ?x11 ?x75))))))))
 ))
 (let (($x101 (forall ((input.ind-%var1162X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var1162X) (bvult input.ind-%var1162X input.dst.llvm-%n))))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1162X)))
 (= $x277 $x246))))
 ))
 (let (($x226 (and $x101 $x308)))
 (let (($x238 (= $x226 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x223 (bvneg ?x253)))
 (let (($x158 (= ?x223 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x158 true)))
 (let (($x272 (= $x5 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x171 (bvsub ?x72 ?x50)))
 (let (($x299 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x171) (bvult ?x72 ?x171))))
 (let (($x111 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x236 (ite $x111 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x44 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x25 (bvmul (_ bv4 64) ?x44)))
 (let ((?x273 ((_ extract 63 32) ?x25)))
 (let (($x78 (= ?x273 ?x236)))
 (let (($x267 (and $x78 $x299)))
 (let (($x46 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x300 (and $x46 $x267)))
 (let (($x296 (= true $x300)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (=> $x172 $x296)))
 (let (($x143 (= $x47 true)))
 (let (($x165 (= $x143 true)))
 (let (($x218 (= $x165 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x254 (= $x51 true)))
 (let (($x115 (= $x254 true)))
 (let (($x155 (= $x115 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (= $x186 true)))
 (let (($x35 (= $x168 true)))
 (let (($x235 (= $x35 true)))
 (let (($x229 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x49 (= $x229 true)))
 (let (($x84 (= $x49 true)))
 (let (($x74 (= $x84 true)))
 (let (($x104 (= $x172 true)))
 (let (($x210 (= $x104 true)))
 (let (($x124 (= $x210 true)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x13)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x59)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (and $x71 $x81)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x87 $x114)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (and $x53 $x161)))
 (let (($x9 (not $x217)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x129 $x151)))
 (let (($x86 (and (not $x29) $x9)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x191 $x16)))
 (let (($x33 (not $x15)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x213 $x76)))
 (let (($x144 (and (not $x23) $x33)))
 (let (($x36 (and (and (and (and (and (and $x144 $x86) $x159) $x125) $x134) $x207) $x182)))
 (let (($x199 (and $x36 $x20)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x10)))
 (let (($x184 (or false (or false (and (and true (or $x60 $x34)) (or $x208 $x42))))))
 (let (($x203 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x225 (and $x203 $x199)))
 (let (($x85 (= $x225 true)))
 (let (($x40 (= $x85 true)))
 (let (($x95 (= $x40 true)))
 (let (($x189 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x189 true)))
 (let (($x181 (= $x219 true)))
 (let (($x224 (= $x181 true)))
 (let ((?x180 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x58 (= (_ bv0 2) ?x180)))
 (let (($x228 (= $x58 true)))
 (let (($x80 (= $x228 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x214 (= $x116 true)))
 (let (($x190 (= $x214 true)))
 (let (($x131 (= $x190 true)))
 (let ((?x118 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x118)))
 (let (($x233 (= ?x28 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x233 true)))
 (let (($x148 (= $x200 true)))
 (let (($x169 (and $x148 $x131)))
 (let (($x206 (and $x169 $x80)))
 (let (($x220 (and $x206 $x224)))
 (let (($x201 (and $x220 $x95)))
 (let (($x73 (and $x201 $x124)))
 (let (($x232 (and $x73 $x74)))
 (let (($x139 (and $x232 $x235)))
 (let (($x256 (and $x139 $x155)))
 (let (($x248 (and $x256 $x218)))
 (let (($x294 (and $x248 $x272)))
 (let (($x295 (and $x294 $x238)))
 (let (($x244 (and $x295 $x83)))
 (let (($x259 (and $x244 $x297)))
 (let (($x170 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x105 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x105 (_ bv1 32))))
 (let (($x317 (and $x174 $x259)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x94 $x317)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x269 (and $x160 $x268)))
 (let (($x204 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x279 (and $x204 $x269)))
 (let (($x54 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd ?x72 (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x21 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x109 (or false (or false (and (and true (or $x77 $x21)) (or $x24 $x54))))))
 (let (($x61 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x109)))
 (let (($x102 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x109)))
 (let (($x261 (and $x102 $x279)))
 (let (($x99 (=> $x261 $x314)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x121 (bvule ?x173 (_ bv4294967294 32))))
 (let (($x283 (= $x121 true)))
 (let (($x314 (= $x283 true)))
 (let (($x127 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let ((?x153 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1175X)))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var1175X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1175X)))
 (=> $x277 (= ?x11 ?x153))))))
 ))
 (let (($x45 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1174X)))
 (= $x277 $x187))))
 ))
 (let (($x252 (and $x45 $x127)))
 (let (($x297 (= $x252 true)))
 (let (($x274 (forall ((input.ind-%var1169X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1169X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x41))))
 (let ((?x153 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1169X)))
 (let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1169X)))
 (=> $x187 (= ?x153 ?x75))))))))
 ))
 (let (($x237 (forall ((input.ind-%var1168X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var1168X) (bvult input.ind-%var1168X input.dst.llvm-%n))))
 (let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1168X)))
 (= $x187 $x246))))
 ))
 (let (($x64 (and $x237 $x274)))
 (let (($x83 (= $x64 true)))
 (let (($x308 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1163X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x41))))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var1163X)))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1163X)))
 (=> $x277 (= ?x11 ?x75))))))))
 ))
 (let (($x101 (forall ((input.ind-%var1162X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var1162X) (bvult input.ind-%var1162X input.dst.llvm-%n))))
 (let (($x277 (input.spec-%var-x-1.0.1 input.ind-%var1162X)))
 (= $x277 $x246))))
 ))
 (let (($x226 (and $x101 $x308)))
 (let (($x238 (= $x226 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x223 (bvneg ?x253)))
 (let (($x158 (= ?x223 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x158 true)))
 (let (($x272 (= $x5 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x171 (bvsub ?x72 ?x50)))
 (let (($x299 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x171) (bvult ?x72 ?x171))))
 (let (($x111 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x236 (ite $x111 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x44 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x25 (bvmul (_ bv4 64) ?x44)))
 (let ((?x273 ((_ extract 63 32) ?x25)))
 (let (($x78 (= ?x273 ?x236)))
 (let (($x267 (and $x78 $x299)))
 (let (($x46 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x300 (and $x46 $x267)))
 (let (($x296 (= true $x300)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (=> $x172 $x296)))
 (let (($x143 (= $x47 true)))
 (let (($x165 (= $x143 true)))
 (let (($x218 (= $x165 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x254 (= $x51 true)))
 (let (($x115 (= $x254 true)))
 (let (($x155 (= $x115 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (= $x186 true)))
 (let (($x35 (= $x168 true)))
 (let (($x235 (= $x35 true)))
 (let (($x229 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x49 (= $x229 true)))
 (let (($x84 (= $x49 true)))
 (let (($x74 (= $x84 true)))
 (let (($x104 (= $x172 true)))
 (let (($x210 (= $x104 true)))
 (let (($x124 (= $x210 true)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x13)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x59)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (and $x71 $x81)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x87 $x114)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (and $x53 $x161)))
 (let (($x9 (not $x217)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x129 $x151)))
 (let (($x86 (and (not $x29) $x9)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x191 $x16)))
 (let (($x33 (not $x15)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x213 $x76)))
 (let (($x144 (and (not $x23) $x33)))
 (let (($x36 (and (and (and (and (and (and $x144 $x86) $x159) $x125) $x134) $x207) $x182)))
 (let (($x199 (and $x36 $x20)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x10)))
 (let (($x184 (or false (or false (and (and true (or $x60 $x34)) (or $x208 $x42))))))
 (let (($x203 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x225 (and $x203 $x199)))
 (let (($x85 (= $x225 true)))
 (let (($x40 (= $x85 true)))
 (let (($x95 (= $x40 true)))
 (let (($x189 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x189 true)))
 (let (($x181 (= $x219 true)))
 (let (($x224 (= $x181 true)))
 (let ((?x180 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x58 (= (_ bv0 2) ?x180)))
 (let (($x228 (= $x58 true)))
 (let (($x80 (= $x228 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x214 (= $x116 true)))
 (let (($x190 (= $x214 true)))
 (let (($x131 (= $x190 true)))
 (let ((?x118 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x118)))
 (let (($x233 (= ?x28 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x233 true)))
 (let (($x148 (= $x200 true)))
 (let (($x169 (and $x148 $x131)))
 (let (($x206 (and $x169 $x80)))
 (let (($x220 (and $x206 $x224)))
 (let (($x201 (and $x220 $x95)))
 (let (($x73 (and $x201 $x124)))
 (let (($x232 (and $x73 $x74)))
 (let (($x139 (and $x232 $x235)))
 (let (($x256 (and $x139 $x155)))
 (let (($x248 (and $x256 $x218)))
 (let (($x294 (and $x248 $x272)))
 (let (($x295 (and $x294 $x238)))
 (let (($x244 (and $x295 $x83)))
 (let (($x259 (and $x244 $x297)))
 (let (($x170 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x105 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x105 (_ bv1 32))))
 (let (($x317 (and $x174 $x259)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x94 $x317)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x269 (and $x160 $x268)))
 (let (($x204 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x279 (and $x204 $x269)))
 (let (($x54 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd ?x72 (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x21 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x109 (or false (or false (and (and true (or $x77 $x21)) (or $x24 $x54))))))
 (let (($x61 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x109)))
 (let (($x102 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x109)))
 (let (($x261 (and $x102 $x279)))
 (let (($x99 (=> $x261 $x314)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x63 (bvsge ?x284 (_ bv0 32))))
 (let (($x106 (= $x63 true)))
 (let (($x303 (= $x106 true)))
 (let (($x166 (forall ((input.ind-%var1198X (_ BitVec 32)) )(let ((?x262 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1198X)))
 (let ((?x75 (input.spec-%var-x-1.1.1 input.ind-%var1198X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var1198X)))
 (=> $x11 (= ?x75 ?x262))))))
 ))
 (let (($x149 (forall ((input.ind-%var1197X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1197X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var1197X)))
 (= $x11 $x174))))
 ))
 (let (($x288 (and $x149 $x166)))
 (let (($x255 (= $x288 true)))
 (let (($x52 (forall ((input.ind-%var1192X (_ BitVec 32)) )(let ((?x27 (bvadd (bvmul input.ind-%var1192X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x297))))
 (let ((?x262 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1192X)))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1192X)))
 (=> $x174 (= ?x262 ?x261))))))))
 ))
 (let (($x48 (forall ((input.ind-%var1191X (_ BitVec 32)) )(let (($x39 (and (bvule (_ bv0 32) input.ind-%var1191X) (bvult input.ind-%var1191X input.dst.llvm-%n))))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1191X)))
 (= $x174 $x39))))
 ))
 (let (($x209 (and $x48 $x52)))
 (let (($x257 (= $x209 true)))
 (let (($x283 (forall ((input.ind-%var1186X (_ BitVec 32)) )(let ((?x27 (bvadd (bvmul input.ind-%var1186X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x297))))
 (let ((?x75 (input.spec-%var-x-1.1.1 input.ind-%var1186X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var1186X)))
 (=> $x11 (= ?x75 ?x261))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1185X (_ BitVec 32)) )(let (($x39 (and (bvule (_ bv0 32) input.ind-%var1185X) (bvult input.ind-%var1185X input.dst.llvm-%n))))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var1185X)))
 (= $x11 $x39))))
 ))
 (let (($x314 (and $x231 $x283)))
 (let (($x99 (= $x314 true)))
 (let ((?x294 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x221 (bvneg ?x294)))
 (let (($x277 (= ?x221 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x320 (= $x277 true)))
 (let (($x250 (= $x320 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x267 (bvsub ?x72 ?x50)))
 (let (($x143 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x267) (bvult ?x72 ?x267))))
 (let (($x193 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x215 (ite $x193 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x78 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x57 (bvmul (_ bv4 64) ?x78)))
 (let ((?x171 ((_ extract 63 32) ?x57)))
 (let (($x299 (= ?x171 ?x215)))
 (let (($x165 (and $x299 $x143)))
 (let (($x111 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x218 (and $x111 $x165)))
 (let (($x248 (= true $x218)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x253 (=> $x172 $x248)))
 (let (($x223 (= $x253 true)))
 (let (($x158 (= $x223 true)))
 (let (($x5 (= $x158 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x185 true)))
 (let (($x46 (= $x137 true)))
 (let (($x126 (= $x46 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x254 (= $x51 true)))
 (let (($x115 (= $x254 true)))
 (let (($x155 (= $x115 true)))
 (let (($x186 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x168 (= $x186 true)))
 (let (($x35 (= $x168 true)))
 (let (($x235 (= $x35 true)))
 (let (($x49 (= $x172 true)))
 (let (($x84 (= $x49 true)))
 (let (($x74 (= $x84 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x36)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x59)))
 (let ((?x207 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x207)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x114)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (and $x81 $x134)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x22 $x120)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x86 $x212)))
 (let (($x159 (not $x222)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x161 $x217)))
 (let (($x26 (and (not $x9) $x159)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x144 $x129)))
 (let (($x29 (not $x151)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x34 $x195)))
 (let (($x53 (and (not $x33) $x29)))
 (let (($x95 (and (and (and (and (and (and $x53 $x26) $x167) $x71) $x122) $x146) $x182)))
 (let (($x201 (and $x95 $x13)))
 (let (($x213 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x191 (or false (or false (and (and true (or $x92 $x164)) (or $x203 $x213))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x191)))
 (let (($x104 (and $x15 $x201)))
 (let (($x210 (= $x104 true)))
 (let (($x124 (= $x210 true)))
 (let (($x73 (= $x124 true)))
 (let (($x220 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x70 (= $x220 true)))
 (let (($x194 (= $x70 true)))
 (let (($x198 (= $x194 true)))
 (let ((?x206 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x189 (= (_ bv0 2) ?x206)))
 (let (($x219 (= $x189 true)))
 (let (($x181 (= $x219 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x31 (= $x169 true)))
 (let (($x180 (= $x31 true)))
 (let (($x58 (= $x180 true)))
 (let ((?x200 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x200)))
 (let (($x116 (= ?x148 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x116 true)))
 (let (($x190 (= $x214 true)))
 (let (($x228 (and $x190 $x58)))
 (let (($x224 (and $x228 $x181)))
 (let (($x10 (and $x224 $x198)))
 (let (($x229 (and $x10 $x73)))
 (let (($x232 (and $x229 $x74)))
 (let (($x139 (and $x232 $x235)))
 (let (($x256 (and $x139 $x155)))
 (let (($x44 (and $x256 $x126)))
 (let (($x272 (and $x44 $x5)))
 (let (($x246 (and $x272 $x250)))
 (let (($x82 (and $x246 $x99)))
 (let (($x156 (and $x82 $x257)))
 (let (($x289 (and $x156 $x255)))
 (let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x118 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x118 (_ bv1 32))))
 (let (($x280 (and $x28 $x289)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x211 (and $x162 $x280)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x281 (and $x96 $x211)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x43 (and $x7 $x281)))
 (let (($x93 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd ?x72 (_ bv3 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x128 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x102 (or false (or false (and (and true (or $x12 $x128)) (or $x136 $x93))))))
 (let (($x204 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x102)))
 (let (($x8 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x102)))
 (let (($x202 (and $x8 $x43)))
 (let (($x265 (=> $x202 $x303)))
 (not $x265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x63 (bvsge ?x284 (_ bv0 32))))
 (let (($x106 (= $x63 true)))
 (let (($x303 (= $x106 true)))
 (let (($x166 (forall ((input.ind-%var1198X (_ BitVec 32)) )(let ((?x262 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1198X)))
 (let ((?x75 (input.spec-%var-x-1.1.1 input.ind-%var1198X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var1198X)))
 (=> $x11 (= ?x75 ?x262))))))
 ))
 (let (($x149 (forall ((input.ind-%var1197X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1197X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var1197X)))
 (= $x11 $x174))))
 ))
 (let (($x288 (and $x149 $x166)))
 (let (($x255 (= $x288 true)))
 (let (($x52 (forall ((input.ind-%var1192X (_ BitVec 32)) )(let ((?x27 (bvadd (bvmul input.ind-%var1192X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x297))))
 (let ((?x262 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1192X)))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1192X)))
 (=> $x174 (= ?x262 ?x261))))))))
 ))
 (let (($x48 (forall ((input.ind-%var1191X (_ BitVec 32)) )(let (($x39 (and (bvule (_ bv0 32) input.ind-%var1191X) (bvult input.ind-%var1191X input.dst.llvm-%n))))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1191X)))
 (= $x174 $x39))))
 ))
 (let (($x209 (and $x48 $x52)))
 (let (($x257 (= $x209 true)))
 (let (($x283 (forall ((input.ind-%var1186X (_ BitVec 32)) )(let ((?x27 (bvadd (bvmul input.ind-%var1186X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x297))))
 (let ((?x75 (input.spec-%var-x-1.1.1 input.ind-%var1186X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var1186X)))
 (=> $x11 (= ?x75 ?x261))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1185X (_ BitVec 32)) )(let (($x39 (and (bvule (_ bv0 32) input.ind-%var1185X) (bvult input.ind-%var1185X input.dst.llvm-%n))))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var1185X)))
 (= $x11 $x39))))
 ))
 (let (($x314 (and $x231 $x283)))
 (let (($x99 (= $x314 true)))
 (let ((?x294 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x221 (bvneg ?x294)))
 (let (($x277 (= ?x221 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x320 (= $x277 true)))
 (let (($x250 (= $x320 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x267 (bvsub ?x72 ?x50)))
 (let (($x143 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x267) (bvult ?x72 ?x267))))
 (let (($x193 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x215 (ite $x193 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x78 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x57 (bvmul (_ bv4 64) ?x78)))
 (let ((?x171 ((_ extract 63 32) ?x57)))
 (let (($x299 (= ?x171 ?x215)))
 (let (($x165 (and $x299 $x143)))
 (let (($x111 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x218 (and $x111 $x165)))
 (let (($x248 (= true $x218)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x253 (=> $x172 $x248)))
 (let (($x223 (= $x253 true)))
 (let (($x158 (= $x223 true)))
 (let (($x5 (= $x158 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x185 true)))
 (let (($x46 (= $x137 true)))
 (let (($x126 (= $x46 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x254 (= $x51 true)))
 (let (($x115 (= $x254 true)))
 (let (($x155 (= $x115 true)))
 (let (($x186 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x168 (= $x186 true)))
 (let (($x35 (= $x168 true)))
 (let (($x235 (= $x35 true)))
 (let (($x49 (= $x172 true)))
 (let (($x84 (= $x49 true)))
 (let (($x74 (= $x84 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x36)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x59)))
 (let ((?x207 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x207)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x114)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (and $x81 $x134)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x22 $x120)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x86 $x212)))
 (let (($x159 (not $x222)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x161 $x217)))
 (let (($x26 (and (not $x9) $x159)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x144 $x129)))
 (let (($x29 (not $x151)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x34 $x195)))
 (let (($x53 (and (not $x33) $x29)))
 (let (($x95 (and (and (and (and (and (and $x53 $x26) $x167) $x71) $x122) $x146) $x182)))
 (let (($x201 (and $x95 $x13)))
 (let (($x213 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x191 (or false (or false (and (and true (or $x92 $x164)) (or $x203 $x213))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x191)))
 (let (($x104 (and $x15 $x201)))
 (let (($x210 (= $x104 true)))
 (let (($x124 (= $x210 true)))
 (let (($x73 (= $x124 true)))
 (let (($x220 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x70 (= $x220 true)))
 (let (($x194 (= $x70 true)))
 (let (($x198 (= $x194 true)))
 (let ((?x206 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x189 (= (_ bv0 2) ?x206)))
 (let (($x219 (= $x189 true)))
 (let (($x181 (= $x219 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x31 (= $x169 true)))
 (let (($x180 (= $x31 true)))
 (let (($x58 (= $x180 true)))
 (let ((?x200 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x200)))
 (let (($x116 (= ?x148 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x116 true)))
 (let (($x190 (= $x214 true)))
 (let (($x228 (and $x190 $x58)))
 (let (($x224 (and $x228 $x181)))
 (let (($x10 (and $x224 $x198)))
 (let (($x229 (and $x10 $x73)))
 (let (($x232 (and $x229 $x74)))
 (let (($x139 (and $x232 $x235)))
 (let (($x256 (and $x139 $x155)))
 (let (($x44 (and $x256 $x126)))
 (let (($x272 (and $x44 $x5)))
 (let (($x246 (and $x272 $x250)))
 (let (($x82 (and $x246 $x99)))
 (let (($x156 (and $x82 $x257)))
 (let (($x289 (and $x156 $x255)))
 (let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x118 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x118 (_ bv1 32))))
 (let (($x280 (and $x28 $x289)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x211 (and $x162 $x280)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x281 (and $x96 $x211)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x43 (and $x7 $x281)))
 (let (($x93 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd ?x72 (_ bv3 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x128 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x102 (or false (or false (and (and true (or $x12 $x128)) (or $x136 $x93))))))
 (let (($x204 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x102)))
 (let (($x8 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x102)))
 (let (($x202 (and $x8 $x43)))
 (let (($x265 (=> $x202 $x303)))
 (not $x265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (bvule ?x68 input.dst.llvm-%n)))
 (let (($x89 (= $x90 true)))
 (let (($x311 (= $x89 true)))
 (let (($x119 (forall ((input.ind-%var1221X (_ BitVec 32)) )(let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1221X)))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var1221X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1221X)))
 (=> $x75 (= ?x261 ?x308))))))
 ))
 (let (($x286 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1220X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1220X)))
 (= $x75 $x28))))
 ))
 (let (($x313 (and $x286 $x119)))
 (let (($x244 (= $x313 true)))
 (let (($x101 (forall ((input.ind-%var1215X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var1215X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x255))))
 (let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1215X)))
 (let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1215X)))
 (=> $x28 (= ?x308 ?x202))))))))
 ))
 (let (($x287 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1214X) (bvult input.ind-%var1214X input.dst.llvm-%n))))
 (let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1214X)))
 (= $x28 $x317))))
 ))
 (let (($x266 (and $x287 $x101)))
 (let (($x291 (= $x266 true)))
 (let (($x106 (forall ((input.ind-%var1209X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var1209X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x255))))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var1209X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1209X)))
 (=> $x75 (= ?x261 ?x202))))))))
 ))
 (let (($x252 (forall ((input.ind-%var1208X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1208X) (bvult input.ind-%var1208X input.dst.llvm-%n))))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1208X)))
 (= $x75 $x317))))
 ))
 (let (($x303 (and $x252 $x106)))
 (let (($x265 (= $x303 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x246)))
 (let (($x11 (= ?x105 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x11 true)))
 (let (($x290 (= $x178 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x165 (bvsub ?x72 ?x50)))
 (let (($x223 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x165) (bvult ?x72 ?x165))))
 (let (($x296 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x47 (ite $x296 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x299 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x300 (bvmul (_ bv4 64) ?x299)))
 (let ((?x267 ((_ extract 63 32) ?x300)))
 (let (($x143 (= ?x267 ?x47)))
 (let (($x158 (and $x143 $x223)))
 (let (($x193 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x5 (and $x193 $x158)))
 (let (($x272 (= true $x5)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (=> $x172 $x272)))
 (let (($x221 (= $x294 true)))
 (let (($x277 (= $x221 true)))
 (let (($x320 (= $x277 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x273 (= $x25 true)))
 (let (($x111 (= $x273 true)))
 (let (($x236 (= $x111 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x137 (= $x185 true)))
 (let (($x46 (= $x137 true)))
 (let (($x126 (= $x46 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x254 (= $x51 true)))
 (let (($x115 (= $x254 true)))
 (let (($x155 (= $x115 true)))
 (let (($x168 (= $x172 true)))
 (let (($x35 (= $x168 true)))
 (let (($x235 (= $x35 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x95)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x59)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (and $x134 $x122)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x114 $x85)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x26 $x20)))
 (let (($x167 (not $x125)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x212 $x222)))
 (let (($x87 (and (not $x159) $x167)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x53 $x161)))
 (let (($x9 (not $x217)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x164 $x141)))
 (let (($x86 (and (not $x29) $x9)))
 (let (($x73 (and (and (and (and (and (and $x86 $x87) $x225) $x81) $x207) $x40) $x182)))
 (let (($x229 (and $x73 $x36)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x213 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x213)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x213)))
 (let (($x144 (or false (or false (and (and true (or $x76 $x23)) (or $x15 $x34))))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x49 (and $x151 $x229)))
 (let (($x84 (= $x49 true)))
 (let (($x74 (= $x84 true)))
 (let (($x232 (= $x74 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x98 (= $x10 true)))
 (let (($x208 (= $x98 true)))
 (let (($x16 (= $x208 true)))
 (let ((?x224 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x220 (= (_ bv0 2) ?x224)))
 (let (($x70 (= $x220 true)))
 (let (($x194 (= $x70 true)))
 (let (($x228 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x80 (= $x228 true)))
 (let (($x206 (= $x80 true)))
 (let (($x189 (= $x206 true)))
 (let ((?x214 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x190 (bvneg ?x214)))
 (let (($x169 (= ?x190 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x169 true)))
 (let (($x180 (= $x31 true)))
 (let (($x219 (and $x180 $x189)))
 (let (($x198 (and $x219 $x194)))
 (let (($x42 (and $x198 $x16)))
 (let (($x186 (and $x42 $x232)))
 (let (($x139 (and $x186 $x235)))
 (let (($x256 (and $x139 $x155)))
 (let (($x44 (and $x256 $x126)))
 (let (($x78 (and $x44 $x236)))
 (let (($x250 (and $x78 $x320)))
 (let (($x39 (and $x250 $x290)))
 (let (($x239 (and $x39 $x265)))
 (let (($x264 (and $x239 $x291)))
 (let (($x315 (and $x264 $x244)))
 (let (($x233 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x200 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x200 (_ bv1 32))))
 (let (($x230 (and $x148 $x315)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x41 (and $x170 $x230)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x175 (and $x94 $x41)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x132 $x175)))
 (let (($x109 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd ?x72 (_ bv3 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x24 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x8 (or false (or false (and (and true (or $x112 $x24)) (or $x97 $x109))))))
 (let (($x7 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x56 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x113 (and $x56 $x37)))
 (let (($x258 (=> $x113 $x311)))
 (not $x258))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (bvule ?x68 input.dst.llvm-%n)))
 (let (($x89 (= $x90 true)))
 (let (($x311 (= $x89 true)))
 (let (($x119 (forall ((input.ind-%var1221X (_ BitVec 32)) )(let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1221X)))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var1221X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1221X)))
 (=> $x75 (= ?x261 ?x308))))))
 ))
 (let (($x286 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1220X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1220X)))
 (= $x75 $x28))))
 ))
 (let (($x313 (and $x286 $x119)))
 (let (($x244 (= $x313 true)))
 (let (($x101 (forall ((input.ind-%var1215X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var1215X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x255))))
 (let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1215X)))
 (let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1215X)))
 (=> $x28 (= ?x308 ?x202))))))))
 ))
 (let (($x287 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1214X) (bvult input.ind-%var1214X input.dst.llvm-%n))))
 (let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1214X)))
 (= $x28 $x317))))
 ))
 (let (($x266 (and $x287 $x101)))
 (let (($x291 (= $x266 true)))
 (let (($x106 (forall ((input.ind-%var1209X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var1209X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x255))))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var1209X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1209X)))
 (=> $x75 (= ?x261 ?x202))))))))
 ))
 (let (($x252 (forall ((input.ind-%var1208X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1208X) (bvult input.ind-%var1208X input.dst.llvm-%n))))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1208X)))
 (= $x75 $x317))))
 ))
 (let (($x303 (and $x252 $x106)))
 (let (($x265 (= $x303 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x246)))
 (let (($x11 (= ?x105 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x11 true)))
 (let (($x290 (= $x178 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x165 (bvsub ?x72 ?x50)))
 (let (($x223 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x165) (bvult ?x72 ?x165))))
 (let (($x296 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x47 (ite $x296 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x299 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x300 (bvmul (_ bv4 64) ?x299)))
 (let ((?x267 ((_ extract 63 32) ?x300)))
 (let (($x143 (= ?x267 ?x47)))
 (let (($x158 (and $x143 $x223)))
 (let (($x193 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x5 (and $x193 $x158)))
 (let (($x272 (= true $x5)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (=> $x172 $x272)))
 (let (($x221 (= $x294 true)))
 (let (($x277 (= $x221 true)))
 (let (($x320 (= $x277 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x273 (= $x25 true)))
 (let (($x111 (= $x273 true)))
 (let (($x236 (= $x111 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x137 (= $x185 true)))
 (let (($x46 (= $x137 true)))
 (let (($x126 (= $x46 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x254 (= $x51 true)))
 (let (($x115 (= $x254 true)))
 (let (($x155 (= $x115 true)))
 (let (($x168 (= $x172 true)))
 (let (($x35 (= $x168 true)))
 (let (($x235 (= $x35 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x95)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x59)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (and $x134 $x122)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x114 $x85)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x26 $x20)))
 (let (($x167 (not $x125)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x212 $x222)))
 (let (($x87 (and (not $x159) $x167)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x53 $x161)))
 (let (($x9 (not $x217)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x164 $x141)))
 (let (($x86 (and (not $x29) $x9)))
 (let (($x73 (and (and (and (and (and (and $x86 $x87) $x225) $x81) $x207) $x40) $x182)))
 (let (($x229 (and $x73 $x36)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x213 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x213)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x213)))
 (let (($x144 (or false (or false (and (and true (or $x76 $x23)) (or $x15 $x34))))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x49 (and $x151 $x229)))
 (let (($x84 (= $x49 true)))
 (let (($x74 (= $x84 true)))
 (let (($x232 (= $x74 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x98 (= $x10 true)))
 (let (($x208 (= $x98 true)))
 (let (($x16 (= $x208 true)))
 (let ((?x224 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x220 (= (_ bv0 2) ?x224)))
 (let (($x70 (= $x220 true)))
 (let (($x194 (= $x70 true)))
 (let (($x228 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x80 (= $x228 true)))
 (let (($x206 (= $x80 true)))
 (let (($x189 (= $x206 true)))
 (let ((?x214 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x190 (bvneg ?x214)))
 (let (($x169 (= ?x190 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x169 true)))
 (let (($x180 (= $x31 true)))
 (let (($x219 (and $x180 $x189)))
 (let (($x198 (and $x219 $x194)))
 (let (($x42 (and $x198 $x16)))
 (let (($x186 (and $x42 $x232)))
 (let (($x139 (and $x186 $x235)))
 (let (($x256 (and $x139 $x155)))
 (let (($x44 (and $x256 $x126)))
 (let (($x78 (and $x44 $x236)))
 (let (($x250 (and $x78 $x320)))
 (let (($x39 (and $x250 $x290)))
 (let (($x239 (and $x39 $x265)))
 (let (($x264 (and $x239 $x291)))
 (let (($x315 (and $x264 $x244)))
 (let (($x233 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x200 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x200 (_ bv1 32))))
 (let (($x230 (and $x148 $x315)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x41 (and $x170 $x230)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x175 (and $x94 $x41)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x132 $x175)))
 (let (($x109 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd ?x72 (_ bv3 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x24 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x8 (or false (or false (and (and true (or $x112 $x24)) (or $x97 $x109))))))
 (let (($x7 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x56 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x113 (and $x56 $x37)))
 (let (($x258 (=> $x113 $x311)))
 (not $x258))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x282 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x142 (bvmul (_ bv4294967295 32) ?x282)))
 (let ((?x38 (bvneg ?x142)))
 (let (($x18 (= ?x38 ?x305)))
 (let (($x110 (= $x18 true)))
 (let (($x60 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let ((?x283 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1244X)))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var1244X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1244X)))
 (=> $x261 (= ?x202 ?x283))))))
 ))
 (let (($x153 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1243X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1243X)))
 (= $x261 $x148))))
 ))
 (let (($x292 (and $x153 $x60)))
 (let (($x156 (= $x292 true)))
 (let (($x231 (forall ((input.ind-%var1238X (_ BitVec 32)) )(let ((?x55 (bvadd (bvmul input.ind-%var1238X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x244))))
 (let ((?x283 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1238X)))
 (let (($x148 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1238X)))
 (=> $x148 (= ?x283 ?x113))))))))
 ))
 (let (($x268 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1237X) (bvult input.ind-%var1237X input.dst.llvm-%n))))
 (let (($x148 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1237X)))
 (= $x148 $x280))))
 ))
 (let (($x269 (and $x268 $x231)))
 (let (($x64 (= $x269 true)))
 (let (($x89 (forall ((input.ind-%var1232X (_ BitVec 32)) )(let ((?x55 (bvadd (bvmul input.ind-%var1232X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x244))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var1232X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1232X)))
 (=> $x261 (= ?x202 ?x113))))))))
 ))
 (let (($x288 (forall ((input.ind-%var1231X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1231X) (bvult input.ind-%var1231X input.dst.llvm-%n))))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1231X)))
 (= $x261 $x280))))
 ))
 (let (($x311 (and $x288 $x89)))
 (let (($x258 (= $x311 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x39)))
 (let (($x75 (= ?x118 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x259 (= $x75 true)))
 (let (($x237 (= $x259 true)))
 (let (($x246 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x105 (= $x246 true)))
 (let (($x11 (= $x105 true)))
 (let (($x178 (= $x11 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x218 (bvsub ?x72 ?x50)))
 (let (($x223 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x218) (bvult ?x72 ?x218))))
 (let (($x296 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x47 (ite $x296 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x299 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x300 (bvmul (_ bv4 64) ?x299)))
 (let ((?x267 ((_ extract 63 32) ?x300)))
 (let (($x143 (= ?x267 ?x47)))
 (let (($x158 (and $x143 $x223)))
 (let (($x193 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x5 (and $x193 $x158)))
 (let (($x272 (= true $x5)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (=> $x172 $x272)))
 (let (($x221 (= $x294 true)))
 (let (($x277 (= $x221 true)))
 (let (($x320 (= $x277 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x273 (= $x25 true)))
 (let (($x111 (= $x273 true)))
 (let (($x236 (= $x111 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x137 (= $x185 true)))
 (let (($x46 (= $x137 true)))
 (let (($x126 (= $x46 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x254 (= $x51 true)))
 (let (($x115 (= $x254 true)))
 (let (($x155 (= $x115 true)))
 (let (($x186 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x186 true)))
 (let (($x35 (= $x168 true)))
 (let (($x235 (= $x35 true)))
 (let (($x229 (= $x172 true)))
 (let (($x49 (= $x229 true)))
 (let (($x84 (= $x49 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x134)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x104)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (and $x87 $x71)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x167 $x225)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (and $x217 $x9)))
 (let (($x212 (not $x86)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (and $x154 $x53)))
 (let (($x159 (and (not $x161) $x212)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x6 $x144)))
 (let (($x164 (not $x151)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x198 $x10)))
 (let (($x29 (and (not $x33) $x164)))
 (let (($x40 (and (and (and (and (and (and $x29 $x159) $x26) $x125) $x201) $x81) $x114)))
 (let (($x124 (and $x40 $x120)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x15 (or false (or false (and (and true (or $x42 $x184)) (or $x213 $x76))))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x59 (and $x195 $x124)))
 (let (($x182 (= $x59 true)))
 (let (($x73 (= $x182 true)))
 (let (($x95 (= $x73 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x181 (= (_ bv0 2) ?x219)))
 (let (($x224 (= $x181 true)))
 (let (($x220 (= $x224 true)))
 (let ((?x31 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x31)))
 (let (($x228 (= ?x180 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x228 true)))
 (let (($x206 (= $x80 true)))
 (let (($x70 (and $x206 $x220)))
 (let (($x36 (and $x70 $x95)))
 (let (($x74 (and $x36 $x84)))
 (let (($x139 (and $x74 $x235)))
 (let (($x256 (and $x139 $x155)))
 (let (($x44 (and $x256 $x126)))
 (let (($x78 (and $x44 $x236)))
 (let (($x250 (and $x78 $x320)))
 (let (($x290 (and $x250 $x178)))
 (let (($x317 (and $x290 $x237)))
 (let (($x285 (and $x317 $x258)))
 (let (($x83 (and $x285 $x64)))
 (let (($x304 (and $x83 $x156)))
 (let (($x116 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x214 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x214 (_ bv1 32))))
 (let (($x79 (and $x190 $x304)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x188 $x79)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x177 (and $x162 $x297)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x107 (and $x160 $x177)))
 (let (($x102 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd ?x72 (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x136 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x56 (or false (or false (and (and true (or $x67 $x136)) (or $x61 $x102))))))
 (let (($x132 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x56)))
 (let (($x14 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x56)))
 (let (($x319 (and $x14 $x107)))
 (let (($x309 (=> $x319 $x110)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x282 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x142 (bvmul (_ bv4294967295 32) ?x282)))
 (let ((?x38 (bvneg ?x142)))
 (let (($x18 (= ?x38 ?x305)))
 (let (($x110 (= $x18 true)))
 (let (($x60 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let ((?x283 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1244X)))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var1244X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1244X)))
 (=> $x261 (= ?x202 ?x283))))))
 ))
 (let (($x153 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1243X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1243X)))
 (= $x261 $x148))))
 ))
 (let (($x292 (and $x153 $x60)))
 (let (($x156 (= $x292 true)))
 (let (($x231 (forall ((input.ind-%var1238X (_ BitVec 32)) )(let ((?x55 (bvadd (bvmul input.ind-%var1238X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x244))))
 (let ((?x283 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1238X)))
 (let (($x148 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1238X)))
 (=> $x148 (= ?x283 ?x113))))))))
 ))
 (let (($x268 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1237X) (bvult input.ind-%var1237X input.dst.llvm-%n))))
 (let (($x148 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1237X)))
 (= $x148 $x280))))
 ))
 (let (($x269 (and $x268 $x231)))
 (let (($x64 (= $x269 true)))
 (let (($x89 (forall ((input.ind-%var1232X (_ BitVec 32)) )(let ((?x55 (bvadd (bvmul input.ind-%var1232X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x244))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var1232X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1232X)))
 (=> $x261 (= ?x202 ?x113))))))))
 ))
 (let (($x288 (forall ((input.ind-%var1231X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1231X) (bvult input.ind-%var1231X input.dst.llvm-%n))))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var1231X)))
 (= $x261 $x280))))
 ))
 (let (($x311 (and $x288 $x89)))
 (let (($x258 (= $x311 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x39)))
 (let (($x75 (= ?x118 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x259 (= $x75 true)))
 (let (($x237 (= $x259 true)))
 (let (($x246 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x105 (= $x246 true)))
 (let (($x11 (= $x105 true)))
 (let (($x178 (= $x11 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x218 (bvsub ?x72 ?x50)))
 (let (($x223 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x218) (bvult ?x72 ?x218))))
 (let (($x296 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x47 (ite $x296 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x299 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x300 (bvmul (_ bv4 64) ?x299)))
 (let ((?x267 ((_ extract 63 32) ?x300)))
 (let (($x143 (= ?x267 ?x47)))
 (let (($x158 (and $x143 $x223)))
 (let (($x193 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x5 (and $x193 $x158)))
 (let (($x272 (= true $x5)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (=> $x172 $x272)))
 (let (($x221 (= $x294 true)))
 (let (($x277 (= $x221 true)))
 (let (($x320 (= $x277 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x273 (= $x25 true)))
 (let (($x111 (= $x273 true)))
 (let (($x236 (= $x111 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x137 (= $x185 true)))
 (let (($x46 (= $x137 true)))
 (let (($x126 (= $x46 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x254 (= $x51 true)))
 (let (($x115 (= $x254 true)))
 (let (($x155 (= $x115 true)))
 (let (($x186 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x186 true)))
 (let (($x35 (= $x168 true)))
 (let (($x235 (= $x35 true)))
 (let (($x229 (= $x172 true)))
 (let (($x49 (= $x229 true)))
 (let (($x84 (= $x49 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x134)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x104)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (and $x87 $x71)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x167 $x225)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (and $x217 $x9)))
 (let (($x212 (not $x86)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (and $x154 $x53)))
 (let (($x159 (and (not $x161) $x212)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x6 $x144)))
 (let (($x164 (not $x151)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x198 $x10)))
 (let (($x29 (and (not $x33) $x164)))
 (let (($x40 (and (and (and (and (and (and $x29 $x159) $x26) $x125) $x201) $x81) $x114)))
 (let (($x124 (and $x40 $x120)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x15 (or false (or false (and (and true (or $x42 $x184)) (or $x213 $x76))))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x59 (and $x195 $x124)))
 (let (($x182 (= $x59 true)))
 (let (($x73 (= $x182 true)))
 (let (($x95 (= $x73 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x181 (= (_ bv0 2) ?x219)))
 (let (($x224 (= $x181 true)))
 (let (($x220 (= $x224 true)))
 (let ((?x31 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x31)))
 (let (($x228 (= ?x180 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x228 true)))
 (let (($x206 (= $x80 true)))
 (let (($x70 (and $x206 $x220)))
 (let (($x36 (and $x70 $x95)))
 (let (($x74 (and $x36 $x84)))
 (let (($x139 (and $x74 $x235)))
 (let (($x256 (and $x139 $x155)))
 (let (($x44 (and $x256 $x126)))
 (let (($x78 (and $x44 $x236)))
 (let (($x250 (and $x78 $x320)))
 (let (($x290 (and $x250 $x178)))
 (let (($x317 (and $x290 $x237)))
 (let (($x285 (and $x317 $x258)))
 (let (($x83 (and $x285 $x64)))
 (let (($x304 (and $x83 $x156)))
 (let (($x116 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x214 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x214 (_ bv1 32))))
 (let (($x79 (and $x190 $x304)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x188 $x79)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x177 (and $x162 $x297)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x107 (and $x160 $x177)))
 (let (($x102 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd ?x72 (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x136 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x56 (or false (or false (and (and true (or $x67 $x136)) (or $x61 $x102))))))
 (let (($x132 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x56)))
 (let (($x14 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x56)))
 (let (($x319 (and $x14 $x107)))
 (let (($x309 (=> $x319 $x110)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x205))))
 (let ((?x163 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x293)))
 (let ((?x91 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x307 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x91)))
 (let ((?x45 (bvmul (_ bv4294967295 32) ?x307)))
 (let ((?x138 (bvneg ?x45)))
 (let (($x147 (= ?x138 ?x163)))
 (let (($x17 (= $x147 true)))
 (let (($x306 (forall ((input.ind-%var1267X (_ BitVec 32)) )(let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1267X)))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var1267X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var1267X)))
 (=> $x202 (= ?x113 ?x149))))))
 ))
 (let (($x152 (forall ((input.ind-%var1266X (_ BitVec 32)) )(let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1266X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var1266X)))
 (= $x202 $x190))))
 ))
 (let (($x43 (and $x152 $x306)))
 (let (($x92 (= $x43 true)))
 (let (($x226 (forall ((input.ind-%var1261X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1261X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x156))))
 (let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1261X)))
 (let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1261X)))
 (=> $x190 (= ?x149 ?x319))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1260X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var1260X) (bvult input.ind-%var1260X input.dst.llvm-%n))))
 (let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1260X)))
 (= $x190 $x230))))
 ))
 (let (($x52 (and $x284 $x226)))
 (let (($x252 (= $x52 true)))
 (let (($x38 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1255X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x156))))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var1255X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var1255X)))
 (=> $x202 (= ?x113 ?x319))))))))
 ))
 (let (($x313 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var1254X) (bvult input.ind-%var1254X input.dst.llvm-%n))))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var1254X)))
 (= $x202 $x230))))
 ))
 (let (($x305 (and $x313 $x38)))
 (let (($x18 (= $x305 true)))
 (let ((?x237 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x237)))
 (let (($x261 (= ?x317 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x261 true)))
 (let (($x48 (= $x289 true)))
 (let ((?x11 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x11)))
 (let (($x290 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x290 true)))
 (let (($x118 (= $x39 true)))
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x320 (= (_ bv0 2) ?x277)))
 (let (($x250 (= $x320 true)))
 (let (($x246 (= $x250 true)))
 (let (($x223 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x158 (= $x223 true)))
 (let (($x5 (= $x158 true)))
 (let (($x272 (= $x5 true)))
 (let (($x300 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 ?x50)) (bvult ?x72 (bvsub ?x72 ?x50)))))
 (let (($x111 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x78 (ite $x111 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x44 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x25 (bvmul (_ bv4 64) ?x44)))
 (let ((?x273 ((_ extract 63 32) ?x25)))
 (let (($x57 (= ?x273 ?x78)))
 (let (($x267 (and $x57 $x300)))
 (let (($x46 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x296 (and $x46 $x267)))
 (let (($x47 (= true $x296)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (=> $x172 $x47)))
 (let (($x165 (= $x143 true)))
 (let (($x218 (= $x165 true)))
 (let (($x248 (= $x218 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x254 (= $x51 true)))
 (let (($x115 (= $x254 true)))
 (let (($x155 (= $x115 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (= $x186 true)))
 (let (($x35 (= $x168 true)))
 (let (($x235 (= $x35 true)))
 (let (($x229 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x49 (= $x229 true)))
 (let (($x84 (= $x49 true)))
 (let (($x74 (= $x84 true)))
 (let (($x59 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x182 (= $x59 true)))
 (let (($x73 (= $x182 true)))
 (let (($x95 (= $x73 true)))
 (let (($x114 (= $x172 true)))
 (let (($x40 (= $x114 true)))
 (let (($x134 (= $x40 true)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x125)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x85)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x9 $x212)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x217 $x159)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x141 $x6)))
 (let (($x151 (not $x144)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x198 $x10)))
 (let (($x29 (and (not $x33) $x151)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x76 $x23)))
 (let (($x191 (not $x176)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x228 $x80)))
 (let (($x195 (and (not $x213) $x191)))
 (let (($x201 (and (and (and (and (and (and $x195 $x29) $x53) $x222) $x122) $x26) $x20)))
 (let (($x210 (and $x201 $x207)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x219 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x219)))
 (let (($x184 (or false (or false (and (and true (or $x181 $x224)) (or $x98 $x208))))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x22 (and $x129 $x210)))
 (let (($x81 (= $x22 true)))
 (let (($x146 (= $x81 true)))
 (let (($x104 (= $x146 true)))
 (let (($x120 (and $x104 $x134)))
 (let (($x36 (and $x120 $x95)))
 (let (($x232 (and $x36 $x74)))
 (let (($x139 (and $x232 $x235)))
 (let (($x256 (and $x139 $x155)))
 (let (($x253 (and $x256 $x248)))
 (let (($x294 (and $x253 $x272)))
 (let (($x105 (and $x294 $x246)))
 (let (($x75 (and $x105 $x118)))
 (let (($x280 (and $x75 $x48)))
 (let (($x110 (and $x280 $x18)))
 (let (($x281 (and $x110 $x252)))
 (let (($x312 (and $x281 $x92)))
 (let (($x169 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x31 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x31 (_ bv1 32))))
 (let (($x264 (and $x180 $x312)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x238 (and $x233 $x264)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x173 (and $x170 $x238)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x255 (and $x96 $x173)))
 (let (($x8 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd ?x72 (_ bv3 32))))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x97 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x14 (or false (or false (and (and true (or $x54 $x97)) (or $x204 $x8))))))
 (let (($x160 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x21 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x145 (and $x21 $x255)))
 (let (($x271 (=> $x145 $x17)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x205))))
 (let ((?x163 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x293)))
 (let ((?x91 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x307 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x91)))
 (let ((?x45 (bvmul (_ bv4294967295 32) ?x307)))
 (let ((?x138 (bvneg ?x45)))
 (let (($x147 (= ?x138 ?x163)))
 (let (($x17 (= $x147 true)))
 (let (($x306 (forall ((input.ind-%var1267X (_ BitVec 32)) )(let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1267X)))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var1267X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var1267X)))
 (=> $x202 (= ?x113 ?x149))))))
 ))
 (let (($x152 (forall ((input.ind-%var1266X (_ BitVec 32)) )(let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1266X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var1266X)))
 (= $x202 $x190))))
 ))
 (let (($x43 (and $x152 $x306)))
 (let (($x92 (= $x43 true)))
 (let (($x226 (forall ((input.ind-%var1261X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1261X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x156))))
 (let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1261X)))
 (let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1261X)))
 (=> $x190 (= ?x149 ?x319))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1260X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var1260X) (bvult input.ind-%var1260X input.dst.llvm-%n))))
 (let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1260X)))
 (= $x190 $x230))))
 ))
 (let (($x52 (and $x284 $x226)))
 (let (($x252 (= $x52 true)))
 (let (($x38 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1255X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x156))))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var1255X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var1255X)))
 (=> $x202 (= ?x113 ?x319))))))))
 ))
 (let (($x313 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var1254X) (bvult input.ind-%var1254X input.dst.llvm-%n))))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var1254X)))
 (= $x202 $x230))))
 ))
 (let (($x305 (and $x313 $x38)))
 (let (($x18 (= $x305 true)))
 (let ((?x237 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x237)))
 (let (($x261 (= ?x317 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x261 true)))
 (let (($x48 (= $x289 true)))
 (let ((?x11 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x11)))
 (let (($x290 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x290 true)))
 (let (($x118 (= $x39 true)))
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x320 (= (_ bv0 2) ?x277)))
 (let (($x250 (= $x320 true)))
 (let (($x246 (= $x250 true)))
 (let (($x223 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x158 (= $x223 true)))
 (let (($x5 (= $x158 true)))
 (let (($x272 (= $x5 true)))
 (let (($x300 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 ?x50)) (bvult ?x72 (bvsub ?x72 ?x50)))))
 (let (($x111 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x78 (ite $x111 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x44 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x25 (bvmul (_ bv4 64) ?x44)))
 (let ((?x273 ((_ extract 63 32) ?x25)))
 (let (($x57 (= ?x273 ?x78)))
 (let (($x267 (and $x57 $x300)))
 (let (($x46 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x296 (and $x46 $x267)))
 (let (($x47 (= true $x296)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (=> $x172 $x47)))
 (let (($x165 (= $x143 true)))
 (let (($x218 (= $x165 true)))
 (let (($x248 (= $x218 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x254 (= $x51 true)))
 (let (($x115 (= $x254 true)))
 (let (($x155 (= $x115 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (= $x186 true)))
 (let (($x35 (= $x168 true)))
 (let (($x235 (= $x35 true)))
 (let (($x229 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x49 (= $x229 true)))
 (let (($x84 (= $x49 true)))
 (let (($x74 (= $x84 true)))
 (let (($x59 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x182 (= $x59 true)))
 (let (($x73 (= $x182 true)))
 (let (($x95 (= $x73 true)))
 (let (($x114 (= $x172 true)))
 (let (($x40 (= $x114 true)))
 (let (($x134 (= $x40 true)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x125)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x85)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x9 $x212)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x217 $x159)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x141 $x6)))
 (let (($x151 (not $x144)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x198 $x10)))
 (let (($x29 (and (not $x33) $x151)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x76 $x23)))
 (let (($x191 (not $x176)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x228 $x80)))
 (let (($x195 (and (not $x213) $x191)))
 (let (($x201 (and (and (and (and (and (and $x195 $x29) $x53) $x222) $x122) $x26) $x20)))
 (let (($x210 (and $x201 $x207)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x219 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x219)))
 (let (($x184 (or false (or false (and (and true (or $x181 $x224)) (or $x98 $x208))))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x22 (and $x129 $x210)))
 (let (($x81 (= $x22 true)))
 (let (($x146 (= $x81 true)))
 (let (($x104 (= $x146 true)))
 (let (($x120 (and $x104 $x134)))
 (let (($x36 (and $x120 $x95)))
 (let (($x232 (and $x36 $x74)))
 (let (($x139 (and $x232 $x235)))
 (let (($x256 (and $x139 $x155)))
 (let (($x253 (and $x256 $x248)))
 (let (($x294 (and $x253 $x272)))
 (let (($x105 (and $x294 $x246)))
 (let (($x75 (and $x105 $x118)))
 (let (($x280 (and $x75 $x48)))
 (let (($x110 (and $x280 $x18)))
 (let (($x281 (and $x110 $x252)))
 (let (($x312 (and $x281 $x92)))
 (let (($x169 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x31 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x31 (_ bv1 32))))
 (let (($x264 (and $x180 $x312)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x238 (and $x233 $x264)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x173 (and $x170 $x238)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x255 (and $x96 $x173)))
 (let (($x8 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd ?x72 (_ bv3 32))))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x97 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x14 (or false (or false (and (and true (or $x54 $x97)) (or $x204 $x8))))))
 (let (($x160 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x21 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x145 (and $x21 $x255)))
 (let (($x271 (=> $x145 $x17)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 204 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x316 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x37 (= $x316 true)))
 (let (($x227 (= $x37 true)))
 (let (($x28 (forall ((input.ind-%var1291X (_ BitVec 32)) )(let ((?x65 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1291X)))
 (let ((?x282 (input.spec-%var-x-1.1.1 input.ind-%var1291X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var1291X)))
 (=> $x90 (= ?x282 ?x65))))))
 ))
 (let (($x66 (forall ((input.ind-%var1290X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1290X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var1290X)))
 (= $x90 $x206))))
 ))
 (let (($x266 (and $x66 $x28)))
 (let (($x308 (= $x266 true)))
 (let (($x285 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var1285X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x312))))
 (let ((?x65 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1285X)))
 (let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1285X)))
 (=> $x206 (= ?x65 ?x91))))))))
 ))
 (let (($x147 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x60 (and (bvule (_ bv0 32) input.ind-%var1284X) (bvult input.ind-%var1284X input.dst.llvm-%n))))
 (let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1284X)))
 (= $x206 $x60))))
 ))
 (let (($x148 (and $x147 $x285)))
 (let (($x258 (= $x148 true)))
 (let (($x138 (forall ((input.ind-%var1279X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var1279X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x312))))
 (let ((?x282 (input.spec-%var-x-1.1.1 input.ind-%var1279X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var1279X)))
 (=> $x90 (= ?x282 ?x91))))))))
 ))
 (let (($x279 (forall ((input.ind-%var1278X (_ BitVec 32)) )(let (($x60 (and (bvule (_ bv0 32) input.ind-%var1278X) (bvult input.ind-%var1278X input.dst.llvm-%n))))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var1278X)))
 (= $x90 $x60))))
 ))
 (let (($x242 (and $x279 $x138)))
 (let (($x197 (= $x242 true)))
 (let ((?x214 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x214)))
 (let (($x315 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x315 true)))
 (let (($x230 (= $x287 true)))
 (let (($x200 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x261 (= $x200 true)))
 (let (($x289 (= $x261 true)))
 (let (($x48 (= $x289 true)))
 (let (($x118 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x75 (= $x118 true)))
 (let (($x259 (= $x75 true)))
 (let (($x237 (= $x259 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x158)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x253)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x296 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x296)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x267 $x47)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x300 $x143)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x25 $x273)))
 (let (($x236 (not $x111)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x46 $x126)))
 (let (($x57 (and (not $x44) $x236)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x254 $x115)))
 (let (($x256 (not $x155)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x120 $x124)))
 (let (($x137 (and (not $x51) $x256)))
 (let (($x250 (and (and (and (and (and (and $x137 $x57) $x171) $x299) $x165) $x248) $x223)))
 (let (($x246 (and $x250 $x5)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x35 (or false (or false (and (and true (or $x95 $x36)) (or $x84 $x74))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x35)))
 (let (($x105 (and $x139 $x246)))
 (let (($x11 (= $x105 true)))
 (let (($x178 (= $x11 true)))
 (let (($x290 (= $x178 true)))
 (let ((?x81 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x146 (= (_ bv0 2) ?x81)))
 (let (($x104 (= $x146 true)))
 (let (($x114 (= $x104 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x212 (bvsub ?x72 ?x50)))
 (let (($x199 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x212) (bvult ?x72 ?x212))))
 (let (($x217 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x9 (ite $x217 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x161 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvmul (_ bv4 64) ?x161)))
 (let ((?x13 ((_ extract 63 32) ?x222)))
 (let (($x86 (= ?x13 ?x9)))
 (let (($x26 (and $x86 $x199)))
 (let (($x53 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x225 (and $x53 $x26)))
 (let (($x85 (= true $x225)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (=> $x172 $x85)))
 (let (($x201 (= $x20 true)))
 (let (($x125 (= $x201 true)))
 (let (($x207 (= $x125 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x6 (= $x141 true)))
 (let (($x144 (= $x6 true)))
 (let (($x151 (= $x144 true)))
 (let (($x191 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (= $x191 true)))
 (let (($x198 (= $x195 true)))
 (let (($x10 (= $x198 true)))
 (let (($x213 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x15 (= $x213 true)))
 (let (($x76 (= $x15 true)))
 (let (($x23 (= $x76 true)))
 (let ((?x34 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x34)))
 (let (($x184 (= ?x16 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x184 true)))
 (let (($x228 (= $x129 true)))
 (let (($x224 (= $x172 true)))
 (let (($x220 (= $x224 true)))
 (let (($x70 (= $x220 true)))
 (let (($x80 (and $x70 $x228)))
 (let (($x176 (and $x80 $x23)))
 (let (($x33 (and $x176 $x10)))
 (let (($x29 (and $x33 $x151)))
 (let (($x210 (and $x29 $x207)))
 (let (($x40 (and $x210 $x114)))
 (let (($x39 (and $x40 $x290)))
 (let (($x317 (and $x39 $x237)))
 (let (($x280 (and $x317 $x48)))
 (let (($x119 (and $x280 $x230)))
 (let (($x249 (and $x119 $x197)))
 (let (($x302 (and $x249 $x258)))
 (let (($x101 (and $x302 $x308)))
 (let (($x203 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x219 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x219 (_ bv1 32))))
 (let (($x241 (and $x181 $x101)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x169 $x241)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x291 (and $x188 $x265)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x174 (and $x94 $x291)))
 (let (($x56 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd ?x72 (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x61 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x21 (or false (or false (and (and true (or $x93 $x61)) (or $x7 $x56))))))
 (let (($x96 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x21)))
 (let (($x128 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x21)))
 (let (($x209 (and $x128 $x174)))
 (let (($x216 (=> $x209 $x227)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x316 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x37 (= $x316 true)))
 (let (($x227 (= $x37 true)))
 (let (($x28 (forall ((input.ind-%var1291X (_ BitVec 32)) )(let ((?x65 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1291X)))
 (let ((?x282 (input.spec-%var-x-1.1.1 input.ind-%var1291X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var1291X)))
 (=> $x90 (= ?x282 ?x65))))))
 ))
 (let (($x66 (forall ((input.ind-%var1290X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1290X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var1290X)))
 (= $x90 $x206))))
 ))
 (let (($x266 (and $x66 $x28)))
 (let (($x308 (= $x266 true)))
 (let (($x285 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var1285X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x312))))
 (let ((?x65 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1285X)))
 (let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1285X)))
 (=> $x206 (= ?x65 ?x91))))))))
 ))
 (let (($x147 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x60 (and (bvule (_ bv0 32) input.ind-%var1284X) (bvult input.ind-%var1284X input.dst.llvm-%n))))
 (let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1284X)))
 (= $x206 $x60))))
 ))
 (let (($x148 (and $x147 $x285)))
 (let (($x258 (= $x148 true)))
 (let (($x138 (forall ((input.ind-%var1279X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var1279X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x312))))
 (let ((?x282 (input.spec-%var-x-1.1.1 input.ind-%var1279X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var1279X)))
 (=> $x90 (= ?x282 ?x91))))))))
 ))
 (let (($x279 (forall ((input.ind-%var1278X (_ BitVec 32)) )(let (($x60 (and (bvule (_ bv0 32) input.ind-%var1278X) (bvult input.ind-%var1278X input.dst.llvm-%n))))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var1278X)))
 (= $x90 $x60))))
 ))
 (let (($x242 (and $x279 $x138)))
 (let (($x197 (= $x242 true)))
 (let ((?x214 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x214)))
 (let (($x315 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x315 true)))
 (let (($x230 (= $x287 true)))
 (let (($x200 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x261 (= $x200 true)))
 (let (($x289 (= $x261 true)))
 (let (($x48 (= $x289 true)))
 (let (($x118 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x75 (= $x118 true)))
 (let (($x259 (= $x75 true)))
 (let (($x237 (= $x259 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x158)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x253)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x296 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x296)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x267 $x47)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x300 $x143)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x25 $x273)))
 (let (($x236 (not $x111)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x46 $x126)))
 (let (($x57 (and (not $x44) $x236)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x254 $x115)))
 (let (($x256 (not $x155)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x120 $x124)))
 (let (($x137 (and (not $x51) $x256)))
 (let (($x250 (and (and (and (and (and (and $x137 $x57) $x171) $x299) $x165) $x248) $x223)))
 (let (($x246 (and $x250 $x5)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x35 (or false (or false (and (and true (or $x95 $x36)) (or $x84 $x74))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x35)))
 (let (($x105 (and $x139 $x246)))
 (let (($x11 (= $x105 true)))
 (let (($x178 (= $x11 true)))
 (let (($x290 (= $x178 true)))
 (let ((?x81 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x146 (= (_ bv0 2) ?x81)))
 (let (($x104 (= $x146 true)))
 (let (($x114 (= $x104 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x212 (bvsub ?x72 ?x50)))
 (let (($x199 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x212) (bvult ?x72 ?x212))))
 (let (($x217 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x9 (ite $x217 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x161 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvmul (_ bv4 64) ?x161)))
 (let ((?x13 ((_ extract 63 32) ?x222)))
 (let (($x86 (= ?x13 ?x9)))
 (let (($x26 (and $x86 $x199)))
 (let (($x53 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x225 (and $x53 $x26)))
 (let (($x85 (= true $x225)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (=> $x172 $x85)))
 (let (($x201 (= $x20 true)))
 (let (($x125 (= $x201 true)))
 (let (($x207 (= $x125 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x6 (= $x141 true)))
 (let (($x144 (= $x6 true)))
 (let (($x151 (= $x144 true)))
 (let (($x191 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (= $x191 true)))
 (let (($x198 (= $x195 true)))
 (let (($x10 (= $x198 true)))
 (let (($x213 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x15 (= $x213 true)))
 (let (($x76 (= $x15 true)))
 (let (($x23 (= $x76 true)))
 (let ((?x34 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x34)))
 (let (($x184 (= ?x16 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x184 true)))
 (let (($x228 (= $x129 true)))
 (let (($x224 (= $x172 true)))
 (let (($x220 (= $x224 true)))
 (let (($x70 (= $x220 true)))
 (let (($x80 (and $x70 $x228)))
 (let (($x176 (and $x80 $x23)))
 (let (($x33 (and $x176 $x10)))
 (let (($x29 (and $x33 $x151)))
 (let (($x210 (and $x29 $x207)))
 (let (($x40 (and $x210 $x114)))
 (let (($x39 (and $x40 $x290)))
 (let (($x317 (and $x39 $x237)))
 (let (($x280 (and $x317 $x48)))
 (let (($x119 (and $x280 $x230)))
 (let (($x249 (and $x119 $x197)))
 (let (($x302 (and $x249 $x258)))
 (let (($x101 (and $x302 $x308)))
 (let (($x203 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x219 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x219 (_ bv1 32))))
 (let (($x241 (and $x181 $x101)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x169 $x241)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x291 (and $x188 $x265)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x174 (and $x94 $x291)))
 (let (($x56 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd ?x72 (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x61 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x21 (or false (or false (and (and true (or $x93 $x61)) (or $x7 $x56))))))
 (let (($x96 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x21)))
 (let (($x128 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x21)))
 (let (($x209 (and $x128 $x174)))
 (let (($x216 (=> $x209 $x227)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x269 (bvsge ?x271 (_ bv0 32))))
 (let (($x303 (= $x269 true)))
 (let (($x106 (= $x303 true)))
 (let (($x140 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1314X)))
 (let ((?x91 (input.spec-%var-x-1.1.1 input.ind-%var1314X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1314X)))
 (=> $x282 (= ?x91 ?x305))))))
 ))
 (let (($x63 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x181 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1313X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1313X)))
 (= $x282 $x181))))
 ))
 (let (($x130 (and $x63 $x140)))
 (let (($x100 (= $x130 true)))
 (let (($x113 (forall ((input.ind-%var1308X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var1308X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x308))))
 (let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1308X)))
 (let (($x181 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1308X)))
 (=> $x181 (= ?x305 ?x209))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1307X) (bvult input.ind-%var1307X input.dst.llvm-%n))))
 (let (($x181 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1307X)))
 (= $x181 $x238))))
 ))
 (let (($x107 (and $x319 $x113)))
 (let (($x30 (= $x107 true)))
 (let (($x37 (forall ((input.ind-%var1302X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var1302X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x308))))
 (let ((?x91 (input.spec-%var-x-1.1.1 input.ind-%var1302X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1302X)))
 (=> $x282 (= ?x91 ?x209))))))))
 ))
 (let (($x92 (forall ((input.ind-%var1301X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1301X) (bvult input.ind-%var1301X input.dst.llvm-%n))))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1301X)))
 (= $x282 $x238))))
 ))
 (let (($x227 (and $x92 $x37)))
 (let (($x216 (= $x227 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x119)))
 (let (($x90 (= ?x180 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x90 true)))
 (let (($x304 (= $x79 true)))
 (let (($x214 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x202 (= $x214 true)))
 (let (($x315 (= $x202 true)))
 (let (($x287 (= $x315 true)))
 (let (($x200 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x200 true)))
 (let (($x289 (= $x261 true)))
 (let (($x48 (= $x289 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x250)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x253)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x320 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x248)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (and $x47 $x165)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x296 $x277)))
 (let (($x267 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x57 $x272)))
 (let (($x171 (not $x193)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x273 $x111)))
 (let (($x215 (and (not $x236) $x171)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x137 $x46)))
 (let (($x44 (not $x126)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x36 $x229)))
 (let (($x25 (and (not $x256) $x44)))
 (let (($x290 (and (and (and (and (and (and $x25 $x215) $x221) $x267) $x218) $x320) $x223)))
 (let (($x39 (and $x290 $x158)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x254 (or false (or false (and (and true (or $x232 $x186)) (or $x139 $x120))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x254)))
 (let (($x118 (and $x155 $x39)))
 (let (($x75 (= $x118 true)))
 (let (($x259 (= $x75 true)))
 (let (($x237 (= $x259 true)))
 (let ((?x40 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x59 (= (_ bv0 2) ?x40)))
 (let (($x182 (= $x59 true)))
 (let (($x235 (= $x182 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x199 (bvsub ?x72 ?x50)))
 (let (($x20 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x199) (bvult ?x72 ?x199))))
 (let (($x212 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x122 (ite $x212 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x9 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvmul (_ bv4 64) ?x9)))
 (let ((?x159 ((_ extract 63 32) ?x86)))
 (let (($x71 (= ?x159 ?x122)))
 (let (($x201 (and $x71 $x20)))
 (let (($x13 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x125 (and $x13 $x201)))
 (let (($x207 (= true $x125)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (=> $x172 $x207)))
 (let (($x22 (= $x210 true)))
 (let (($x81 (= $x22 true)))
 (let (($x146 (= $x81 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x29 true)))
 (let (($x154 (= $x167 true)))
 (let (($x53 (= $x154 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (= $x33 true)))
 (let (($x141 (= $x164 true)))
 (let (($x6 (= $x141 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x191 (= $x176 true)))
 (let (($x195 (= $x191 true)))
 (let (($x198 (= $x195 true)))
 (let ((?x129 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x129)))
 (let (($x213 (= ?x228 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x213 true)))
 (let (($x76 (= $x15 true)))
 (let (($x208 (= $x172 true)))
 (let (($x34 (= $x208 true)))
 (let (($x16 (= $x34 true)))
 (let (($x23 (and $x16 $x76)))
 (let (($x10 (and $x23 $x198)))
 (let (($x144 (and $x10 $x6)))
 (let (($x87 (and $x144 $x53)))
 (let (($x104 (and $x87 $x146)))
 (let (($x73 (and $x104 $x235)))
 (let (($x317 (and $x73 $x237)))
 (let (($x280 (and $x317 $x48)))
 (let (($x230 (and $x280 $x287)))
 (let (($x60 (and $x230 $x304)))
 (let (($x83 (and $x60 $x216)))
 (let (($x55 (and $x83 $x30)))
 (let (($x64 (and $x55 $x100)))
 (let (($x220 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x70 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x70 (_ bv1 32))))
 (let (($x293 (and $x98 $x64)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x31 $x293)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x152 (and $x233 $x297)))
 (let (($x162 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x162 $x152)))
 (let (($x14 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd ?x72 (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x204 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x128 (or false (or false (and (and true (or $x109 $x204)) (or $x132 $x14))))))
 (let (($x94 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x128)))
 (let (($x24 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x128)))
 (let (($x127 (and $x24 $x231)))
 (let (($x245 (=> $x127 $x106)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x269 (bvsge ?x271 (_ bv0 32))))
 (let (($x303 (= $x269 true)))
 (let (($x106 (= $x303 true)))
 (let (($x140 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1314X)))
 (let ((?x91 (input.spec-%var-x-1.1.1 input.ind-%var1314X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1314X)))
 (=> $x282 (= ?x91 ?x305))))))
 ))
 (let (($x63 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x181 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1313X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1313X)))
 (= $x282 $x181))))
 ))
 (let (($x130 (and $x63 $x140)))
 (let (($x100 (= $x130 true)))
 (let (($x113 (forall ((input.ind-%var1308X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var1308X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x308))))
 (let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1308X)))
 (let (($x181 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1308X)))
 (=> $x181 (= ?x305 ?x209))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1307X) (bvult input.ind-%var1307X input.dst.llvm-%n))))
 (let (($x181 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1307X)))
 (= $x181 $x238))))
 ))
 (let (($x107 (and $x319 $x113)))
 (let (($x30 (= $x107 true)))
 (let (($x37 (forall ((input.ind-%var1302X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var1302X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x308))))
 (let ((?x91 (input.spec-%var-x-1.1.1 input.ind-%var1302X)))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1302X)))
 (=> $x282 (= ?x91 ?x209))))))))
 ))
 (let (($x92 (forall ((input.ind-%var1301X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1301X) (bvult input.ind-%var1301X input.dst.llvm-%n))))
 (let (($x282 (input.spec-%var-x-1.0.1 input.ind-%var1301X)))
 (= $x282 $x238))))
 ))
 (let (($x227 (and $x92 $x37)))
 (let (($x216 (= $x227 true)))
 (let ((?x119 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x119)))
 (let (($x90 (= ?x180 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x90 true)))
 (let (($x304 (= $x79 true)))
 (let (($x214 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x202 (= $x214 true)))
 (let (($x315 (= $x202 true)))
 (let (($x287 (= $x315 true)))
 (let (($x200 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x200 true)))
 (let (($x289 (= $x261 true)))
 (let (($x48 (= $x289 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x250)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x253)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x320 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x248)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (and $x47 $x165)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x296 $x277)))
 (let (($x267 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x57 $x272)))
 (let (($x171 (not $x193)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x273 $x111)))
 (let (($x215 (and (not $x236) $x171)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x137 $x46)))
 (let (($x44 (not $x126)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x36 $x229)))
 (let (($x25 (and (not $x256) $x44)))
 (let (($x290 (and (and (and (and (and (and $x25 $x215) $x221) $x267) $x218) $x320) $x223)))
 (let (($x39 (and $x290 $x158)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x254 (or false (or false (and (and true (or $x232 $x186)) (or $x139 $x120))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x254)))
 (let (($x118 (and $x155 $x39)))
 (let (($x75 (= $x118 true)))
 (let (($x259 (= $x75 true)))
 (let (($x237 (= $x259 true)))
 (let ((?x40 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x59 (= (_ bv0 2) ?x40)))
 (let (($x182 (= $x59 true)))
 (let (($x235 (= $x182 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x199 (bvsub ?x72 ?x50)))
 (let (($x20 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x199) (bvult ?x72 ?x199))))
 (let (($x212 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x122 (ite $x212 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x9 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvmul (_ bv4 64) ?x9)))
 (let ((?x159 ((_ extract 63 32) ?x86)))
 (let (($x71 (= ?x159 ?x122)))
 (let (($x201 (and $x71 $x20)))
 (let (($x13 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x125 (and $x13 $x201)))
 (let (($x207 (= true $x125)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (=> $x172 $x207)))
 (let (($x22 (= $x210 true)))
 (let (($x81 (= $x22 true)))
 (let (($x146 (= $x81 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x29 true)))
 (let (($x154 (= $x167 true)))
 (let (($x53 (= $x154 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (= $x33 true)))
 (let (($x141 (= $x164 true)))
 (let (($x6 (= $x141 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x191 (= $x176 true)))
 (let (($x195 (= $x191 true)))
 (let (($x198 (= $x195 true)))
 (let ((?x129 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x129)))
 (let (($x213 (= ?x228 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x213 true)))
 (let (($x76 (= $x15 true)))
 (let (($x208 (= $x172 true)))
 (let (($x34 (= $x208 true)))
 (let (($x16 (= $x34 true)))
 (let (($x23 (and $x16 $x76)))
 (let (($x10 (and $x23 $x198)))
 (let (($x144 (and $x10 $x6)))
 (let (($x87 (and $x144 $x53)))
 (let (($x104 (and $x87 $x146)))
 (let (($x73 (and $x104 $x235)))
 (let (($x317 (and $x73 $x237)))
 (let (($x280 (and $x317 $x48)))
 (let (($x230 (and $x280 $x287)))
 (let (($x60 (and $x230 $x304)))
 (let (($x83 (and $x60 $x216)))
 (let (($x55 (and $x83 $x30)))
 (let (($x64 (and $x55 $x100)))
 (let (($x220 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x70 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x70 (_ bv1 32))))
 (let (($x293 (and $x98 $x64)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x31 $x293)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x152 (and $x233 $x297)))
 (let (($x162 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x162 $x152)))
 (let (($x14 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd ?x72 (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x204 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x128 (or false (or false (and (and true (or $x109 $x204)) (or $x132 $x14))))))
 (let (($x94 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x128)))
 (let (($x24 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x128)))
 (let (($x127 (and $x24 $x231)))
 (let (($x245 (=> $x127 $x106)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x243 (bvule ?x263 (_ bv4294967294 32))))
 (let (($x274 (= $x243 true)))
 (let (($x286 (= $x274 true)))
 (let (($x134 (forall ((input.ind-%var1337X (_ BitVec 32)) )(let ((?x138 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1337X)))
 (let ((?x209 (input.spec-%var-x-1.1.1 input.ind-%var1337X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var1337X)))
 (=> $x91 (= ?x209 ?x138))))))
 ))
 (let (($x32 (forall ((input.ind-%var1336X (_ BitVec 32)) )(let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1336X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var1336X)))
 (= $x91 $x98))))
 ))
 (let (($x153 (and $x32 $x134)))
 (let (($x302 (= $x153 true)))
 (let (($x279 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul input.ind-%var1331X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x100))))
 (let ((?x138 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1331X)))
 (let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1331X)))
 (=> $x98 (= ?x138 ?x127))))))))
 ))
 (let (($x173 (forall ((input.ind-%var1330X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1330X) (bvult input.ind-%var1330X input.dst.llvm-%n))))
 (let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1330X)))
 (= $x98 $x241))))
 ))
 (let (($x255 (and $x173 $x279)))
 (let (($x252 (= $x255 true)))
 (let (($x303 (forall ((input.ind-%var1325X (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul input.ind-%var1325X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x100))))
 (let ((?x209 (input.spec-%var-x-1.1.1 input.ind-%var1325X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var1325X)))
 (=> $x91 (= ?x209 ?x127))))))))
 ))
 (let (($x266 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1324X) (bvult input.ind-%var1324X input.dst.llvm-%n))))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var1324X)))
 (= $x91 $x241))))
 ))
 (let (($x106 (and $x266 $x303)))
 (let (($x245 (= $x106 true)))
 (let ((?x60 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x60)))
 (let (($x282 (= ?x219 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x264 (= $x282 true)))
 (let (($x149 (= $x264 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x289 (bvsub ?x72 ?x50)))
 (let (($x202 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x289) (bvult ?x72 ?x289))))
 (let (($x317 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x200 (ite $x317 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x75 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x259 (bvmul (_ bv4 64) ?x75)))
 (let ((?x237 ((_ extract 63 32) ?x259)))
 (let (($x261 (= ?x237 ?x200)))
 (let (($x315 (and $x261 $x202)))
 (let (($x39 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x287 (and $x39 $x315)))
 (let (($x230 (= true $x287)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (=> $x172 $x230)))
 (let (($x180 (= $x119 true)))
 (let (($x90 (= $x180 true)))
 (let (($x79 (= $x90 true)))
 (let (($x320 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x320 true)))
 (let (($x253 (= $x178 true)))
 (let (($x223 (= $x253 true)))
 (let (($x165 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x165 true)))
 (let (($x218 (= $x277 true)))
 (let (($x11 (= $x218 true)))
 (let (($x267 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x105 (= $x267 true)))
 (let (($x296 (= $x105 true)))
 (let (($x47 (= $x296 true)))
 (let (($x299 (= $x172 true)))
 (let (($x221 (= $x299 true)))
 (let (($x246 (= $x221 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x46)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x78)))
 (let ((?x229 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x229)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x185)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (and $x51 $x254)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x124 $x155)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x49 $x84)))
 (let (($x74 (not $x115)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (and $x182 $x235)))
 (let (($x186 (and (not $x73) $x74)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x81 $x146)))
 (let (($x114 (not $x104)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x13 $x217)))
 (let (($x59 (and (not $x22) $x114)))
 (let (($x294 (and (and (and (and (and (and $x59 $x186) $x35) $x120) $x36) $x256) $x137)))
 (let (($x57 (and $x294 $x126)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x159 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x159)))
 (let (($x125 (or false (or false (and (and true (or $x212 $x122)) (or $x199 $x225))))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x272 (and $x210 $x57)))
 (let (($x193 (= $x272 true)))
 (let (($x171 (= $x193 true)))
 (let (($x215 (= $x171 true)))
 (let (($x167 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x154 (= $x167 true)))
 (let (($x53 (= $x154 true)))
 (let (($x87 (= $x53 true)))
 (let ((?x141 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x6 (= (_ bv0 2) ?x141)))
 (let (($x144 (= $x6 true)))
 (let (($x151 (= $x144 true)))
 (let (($x191 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x195 (= $x191 true)))
 (let (($x198 (= $x195 true)))
 (let (($x10 (= $x198 true)))
 (let ((?x228 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x228)))
 (let (($x15 (= ?x80 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x15 true)))
 (let (($x23 (= $x76 true)))
 (let (($x33 (and $x23 $x10)))
 (let (($x29 (and $x33 $x151)))
 (let (($x161 (and $x29 $x87)))
 (let (($x5 (and $x161 $x215)))
 (let (($x300 (and $x5 $x246)))
 (let (($x143 (and $x300 $x47)))
 (let (($x248 (and $x143 $x11)))
 (let (($x290 (and $x248 $x223)))
 (let (($x304 (and $x290 $x79)))
 (let (($x238 (and $x304 $x149)))
 (let (($x116 (and $x238 $x245)))
 (let (($x281 (and $x116 $x252)))
 (let (($x41 (and $x281 $x302)))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x16 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x16 (_ bv1 32))))
 (let (($x142 (and $x42 $x41)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x203 $x142)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x309 (and $x169 $x312)))
 (let (($x170 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x170 $x309)))
 (let (($x21 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd ?x72 (_ bv3 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x7 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x204)))
 (let (($x24 (or false (or false (and (and true (or $x102 $x7)) (or $x160 $x21))))))
 (let (($x162 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x24)))
 (let (($x136 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x24)))
 (let (($x68 (and $x136 $x310)))
 (let (($x196 (=> $x68 $x286)))
 (not $x196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x243 (bvule ?x263 (_ bv4294967294 32))))
 (let (($x274 (= $x243 true)))
 (let (($x286 (= $x274 true)))
 (let (($x134 (forall ((input.ind-%var1337X (_ BitVec 32)) )(let ((?x138 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1337X)))
 (let ((?x209 (input.spec-%var-x-1.1.1 input.ind-%var1337X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var1337X)))
 (=> $x91 (= ?x209 ?x138))))))
 ))
 (let (($x32 (forall ((input.ind-%var1336X (_ BitVec 32)) )(let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1336X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var1336X)))
 (= $x91 $x98))))
 ))
 (let (($x153 (and $x32 $x134)))
 (let (($x302 (= $x153 true)))
 (let (($x279 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul input.ind-%var1331X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x100))))
 (let ((?x138 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1331X)))
 (let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1331X)))
 (=> $x98 (= ?x138 ?x127))))))))
 ))
 (let (($x173 (forall ((input.ind-%var1330X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1330X) (bvult input.ind-%var1330X input.dst.llvm-%n))))
 (let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1330X)))
 (= $x98 $x241))))
 ))
 (let (($x255 (and $x173 $x279)))
 (let (($x252 (= $x255 true)))
 (let (($x303 (forall ((input.ind-%var1325X (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul input.ind-%var1325X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x100))))
 (let ((?x209 (input.spec-%var-x-1.1.1 input.ind-%var1325X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var1325X)))
 (=> $x91 (= ?x209 ?x127))))))))
 ))
 (let (($x266 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1324X) (bvult input.ind-%var1324X input.dst.llvm-%n))))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var1324X)))
 (= $x91 $x241))))
 ))
 (let (($x106 (and $x266 $x303)))
 (let (($x245 (= $x106 true)))
 (let ((?x60 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x60)))
 (let (($x282 (= ?x219 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x264 (= $x282 true)))
 (let (($x149 (= $x264 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x289 (bvsub ?x72 ?x50)))
 (let (($x202 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x289) (bvult ?x72 ?x289))))
 (let (($x317 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x200 (ite $x317 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x75 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x259 (bvmul (_ bv4 64) ?x75)))
 (let ((?x237 ((_ extract 63 32) ?x259)))
 (let (($x261 (= ?x237 ?x200)))
 (let (($x315 (and $x261 $x202)))
 (let (($x39 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x287 (and $x39 $x315)))
 (let (($x230 (= true $x287)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (=> $x172 $x230)))
 (let (($x180 (= $x119 true)))
 (let (($x90 (= $x180 true)))
 (let (($x79 (= $x90 true)))
 (let (($x320 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x320 true)))
 (let (($x253 (= $x178 true)))
 (let (($x223 (= $x253 true)))
 (let (($x165 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x165 true)))
 (let (($x218 (= $x277 true)))
 (let (($x11 (= $x218 true)))
 (let (($x267 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x105 (= $x267 true)))
 (let (($x296 (= $x105 true)))
 (let (($x47 (= $x296 true)))
 (let (($x299 (= $x172 true)))
 (let (($x221 (= $x299 true)))
 (let (($x246 (= $x221 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x46)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x78)))
 (let ((?x229 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x229)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x185)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (and $x51 $x254)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x124 $x155)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x49 $x84)))
 (let (($x74 (not $x115)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (and $x182 $x235)))
 (let (($x186 (and (not $x73) $x74)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x81 $x146)))
 (let (($x114 (not $x104)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x13 $x217)))
 (let (($x59 (and (not $x22) $x114)))
 (let (($x294 (and (and (and (and (and (and $x59 $x186) $x35) $x120) $x36) $x256) $x137)))
 (let (($x57 (and $x294 $x126)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x159 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x159)))
 (let (($x125 (or false (or false (and (and true (or $x212 $x122)) (or $x199 $x225))))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x272 (and $x210 $x57)))
 (let (($x193 (= $x272 true)))
 (let (($x171 (= $x193 true)))
 (let (($x215 (= $x171 true)))
 (let (($x167 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x154 (= $x167 true)))
 (let (($x53 (= $x154 true)))
 (let (($x87 (= $x53 true)))
 (let ((?x141 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x6 (= (_ bv0 2) ?x141)))
 (let (($x144 (= $x6 true)))
 (let (($x151 (= $x144 true)))
 (let (($x191 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x195 (= $x191 true)))
 (let (($x198 (= $x195 true)))
 (let (($x10 (= $x198 true)))
 (let ((?x228 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x228)))
 (let (($x15 (= ?x80 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x15 true)))
 (let (($x23 (= $x76 true)))
 (let (($x33 (and $x23 $x10)))
 (let (($x29 (and $x33 $x151)))
 (let (($x161 (and $x29 $x87)))
 (let (($x5 (and $x161 $x215)))
 (let (($x300 (and $x5 $x246)))
 (let (($x143 (and $x300 $x47)))
 (let (($x248 (and $x143 $x11)))
 (let (($x290 (and $x248 $x223)))
 (let (($x304 (and $x290 $x79)))
 (let (($x238 (and $x304 $x149)))
 (let (($x116 (and $x238 $x245)))
 (let (($x281 (and $x116 $x252)))
 (let (($x41 (and $x281 $x302)))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x16 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x16 (_ bv1 32))))
 (let (($x142 (and $x42 $x41)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x203 $x142)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x309 (and $x169 $x312)))
 (let (($x170 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x170 $x309)))
 (let (($x21 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd ?x72 (_ bv3 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x7 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x204)))
 (let (($x24 (or false (or false (and (and true (or $x102 $x7)) (or $x160 $x21))))))
 (let (($x162 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x24)))
 (let (($x136 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x24)))
 (let (($x68 (and $x136 $x310)))
 (let (($x196 (=> $x68 $x286)))
 (not $x196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x189 (bvsge ?x123 (_ bv0 32))))
 (let (($x89 (= $x189 true)))
 (let (($x226 (= $x89 true)))
 (let (($x95 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1360X)))
 (let ((?x127 (input.spec-%var-x-1.1.1 input.ind-%var1360X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var1360X)))
 (=> $x209 (= ?x127 ?x37))))))
 ))
 (let (($x65 (forall ((input.ind-%var1359X (_ BitVec 32)) )(let (($x42 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1359X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var1359X)))
 (= $x209 $x42))))
 ))
 (let (($x38 (and $x65 $x95)))
 (let (($x55 (= $x38 true)))
 (let (($x92 (forall ((input.ind-%var1354X (_ BitVec 32)) )(let ((?x288 (bvadd (bvmul input.ind-%var1354X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x302))))
 (let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1354X)))
 (let (($x42 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1354X)))
 (=> $x42 (= ?x37 ?x68))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1353X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var1353X) (bvult input.ind-%var1353X input.dst.llvm-%n))))
 (let (($x42 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1353X)))
 (= $x42 $x293))))
 ))
 (let (($x291 (and $x265 $x92)))
 (let (($x148 (= $x291 true)))
 (let (($x274 (forall ((input.ind-%var1348X (_ BitVec 32)) )(let ((?x288 (bvadd (bvmul input.ind-%var1348X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x302))))
 (let ((?x127 (input.spec-%var-x-1.1.1 input.ind-%var1348X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var1348X)))
 (=> $x209 (= ?x127 ?x68))))))))
 ))
 (let (($x130 (forall ((input.ind-%var1347X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var1347X) (bvult input.ind-%var1347X input.dst.llvm-%n))))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var1347X)))
 (= $x209 $x293))))
 ))
 (let (($x286 (and $x130 $x274)))
 (let (($x196 (= $x286 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x238)))
 (let (($x91 (= ?x70 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x91 true)))
 (let (($x147 (= $x101 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x315 (bvsub ?x72 ?x50)))
 (let (($x180 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x315) (bvult ?x72 ?x315))))
 (let (($x280 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x280 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x261 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x48 (bvmul (_ bv4 64) ?x261)))
 (let ((?x289 ((_ extract 63 32) ?x48)))
 (let (($x202 (= ?x289 ?x214)))
 (let (($x90 (and $x202 $x180)))
 (let (($x317 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x79 (and $x317 $x90)))
 (let (($x304 (= true $x79)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x60 (=> $x172 $x304)))
 (let (($x219 (= $x60 true)))
 (let (($x282 (= $x219 true)))
 (let (($x264 (= $x282 true)))
 (let (($x250 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x158 (= $x250 true)))
 (let (($x39 (= $x158 true)))
 (let (($x118 (= $x39 true)))
 (let (($x320 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x320 true)))
 (let (($x253 (= $x178 true)))
 (let (($x223 (= $x253 true)))
 (let (($x165 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x277 (= $x165 true)))
 (let (($x218 (= $x277 true)))
 (let (($x11 (= $x218 true)))
 (let (($x105 (= $x172 true)))
 (let (($x296 (= $x105 true)))
 (let (($x47 (= $x296 true)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x294)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x78)))
 (let ((?x256 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x256)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x254 $x36)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x185 $x111)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x186 $x44)))
 (let (($x35 (not $x168)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x84 $x115)))
 (let (($x139 (and (not $x74) $x35)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x59 $x182)))
 (let (($x73 (not $x235)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x122 $x71)))
 (let (($x49 (and (not $x114) $x73)))
 (let (($x215 (and (and (and (and (and (and $x49 $x139) $x273) $x51) $x229) $x236) $x137)))
 (let (($x5 (and $x215 $x46)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x225 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x225)))
 (let (($x81 (or false (or false (and (and true (or $x85 $x20)) (or $x210 $x13))))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x299 (and $x104 $x5)))
 (let (($x221 (= $x299 true)))
 (let (($x246 (= $x221 true)))
 (let (($x300 (= $x246 true)))
 (let (($x161 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x9 (= $x161 true)))
 (let (($x86 (= $x9 true)))
 (let (($x207 (= $x86 true)))
 (let ((?x29 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x167 (= (_ bv0 2) ?x29)))
 (let (($x154 (= $x167 true)))
 (let (($x53 (= $x154 true)))
 (let (($x33 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x164 (= $x33 true)))
 (let (($x141 (= $x164 true)))
 (let (($x6 (= $x141 true)))
 (let ((?x76 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x76)))
 (let (($x191 (= ?x23 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x191 true)))
 (let (($x198 (= $x195 true)))
 (let (($x144 (and $x198 $x6)))
 (let (($x87 (and $x144 $x53)))
 (let (($x159 (and $x87 $x207)))
 (let (($x267 (and $x159 $x300)))
 (let (($x143 (and $x267 $x47)))
 (let (($x248 (and $x143 $x11)))
 (let (($x290 (and $x248 $x223)))
 (let (($x75 (and $x290 $x118)))
 (let (($x149 (and $x75 $x264)))
 (let (($x241 (and $x149 $x147)))
 (let (($x194 (and $x241 $x196)))
 (let (($x258 (and $x194 $x148)))
 (let (($x110 (and $x258 $x55)))
 (let (($x129 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x228 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x228 (_ bv1 32))))
 (let (($x307 (and $x80 $x110)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x308 (and $x220 $x307)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x82 (and $x31 $x308)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x19 (and $x188 $x82)))
 (let (($x128 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x72 (_ bv3 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x132 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x136 (or false (or false (and (and true (or $x8 $x132)) (or $x96 $x128))))))
 (let (($x170 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x136)))
 (let (($x97 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x136)))
 (let (($x133 (and $x97 $x19)))
 (let (($x166 (=> $x133 $x226)))
 (not $x166))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x189 (bvsge ?x123 (_ bv0 32))))
 (let (($x89 (= $x189 true)))
 (let (($x226 (= $x89 true)))
 (let (($x95 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1360X)))
 (let ((?x127 (input.spec-%var-x-1.1.1 input.ind-%var1360X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var1360X)))
 (=> $x209 (= ?x127 ?x37))))))
 ))
 (let (($x65 (forall ((input.ind-%var1359X (_ BitVec 32)) )(let (($x42 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1359X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var1359X)))
 (= $x209 $x42))))
 ))
 (let (($x38 (and $x65 $x95)))
 (let (($x55 (= $x38 true)))
 (let (($x92 (forall ((input.ind-%var1354X (_ BitVec 32)) )(let ((?x288 (bvadd (bvmul input.ind-%var1354X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x302))))
 (let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1354X)))
 (let (($x42 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1354X)))
 (=> $x42 (= ?x37 ?x68))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1353X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var1353X) (bvult input.ind-%var1353X input.dst.llvm-%n))))
 (let (($x42 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1353X)))
 (= $x42 $x293))))
 ))
 (let (($x291 (and $x265 $x92)))
 (let (($x148 (= $x291 true)))
 (let (($x274 (forall ((input.ind-%var1348X (_ BitVec 32)) )(let ((?x288 (bvadd (bvmul input.ind-%var1348X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x302))))
 (let ((?x127 (input.spec-%var-x-1.1.1 input.ind-%var1348X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var1348X)))
 (=> $x209 (= ?x127 ?x68))))))))
 ))
 (let (($x130 (forall ((input.ind-%var1347X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var1347X) (bvult input.ind-%var1347X input.dst.llvm-%n))))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var1347X)))
 (= $x209 $x293))))
 ))
 (let (($x286 (and $x130 $x274)))
 (let (($x196 (= $x286 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x238)))
 (let (($x91 (= ?x70 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x91 true)))
 (let (($x147 (= $x101 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x315 (bvsub ?x72 ?x50)))
 (let (($x180 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x315) (bvult ?x72 ?x315))))
 (let (($x280 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x280 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x261 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x48 (bvmul (_ bv4 64) ?x261)))
 (let ((?x289 ((_ extract 63 32) ?x48)))
 (let (($x202 (= ?x289 ?x214)))
 (let (($x90 (and $x202 $x180)))
 (let (($x317 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x79 (and $x317 $x90)))
 (let (($x304 (= true $x79)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x60 (=> $x172 $x304)))
 (let (($x219 (= $x60 true)))
 (let (($x282 (= $x219 true)))
 (let (($x264 (= $x282 true)))
 (let (($x250 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x158 (= $x250 true)))
 (let (($x39 (= $x158 true)))
 (let (($x118 (= $x39 true)))
 (let (($x320 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x320 true)))
 (let (($x253 (= $x178 true)))
 (let (($x223 (= $x253 true)))
 (let (($x165 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x277 (= $x165 true)))
 (let (($x218 (= $x277 true)))
 (let (($x11 (= $x218 true)))
 (let (($x105 (= $x172 true)))
 (let (($x296 (= $x105 true)))
 (let (($x47 (= $x296 true)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x294)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x78)))
 (let ((?x256 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x256)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x254 $x36)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x185 $x111)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x186 $x44)))
 (let (($x35 (not $x168)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x84 $x115)))
 (let (($x139 (and (not $x74) $x35)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x59 $x182)))
 (let (($x73 (not $x235)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x122 $x71)))
 (let (($x49 (and (not $x114) $x73)))
 (let (($x215 (and (and (and (and (and (and $x49 $x139) $x273) $x51) $x229) $x236) $x137)))
 (let (($x5 (and $x215 $x46)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x225 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x225)))
 (let (($x81 (or false (or false (and (and true (or $x85 $x20)) (or $x210 $x13))))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x299 (and $x104 $x5)))
 (let (($x221 (= $x299 true)))
 (let (($x246 (= $x221 true)))
 (let (($x300 (= $x246 true)))
 (let (($x161 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x9 (= $x161 true)))
 (let (($x86 (= $x9 true)))
 (let (($x207 (= $x86 true)))
 (let ((?x29 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x167 (= (_ bv0 2) ?x29)))
 (let (($x154 (= $x167 true)))
 (let (($x53 (= $x154 true)))
 (let (($x33 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x164 (= $x33 true)))
 (let (($x141 (= $x164 true)))
 (let (($x6 (= $x141 true)))
 (let ((?x76 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x76)))
 (let (($x191 (= ?x23 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x191 true)))
 (let (($x198 (= $x195 true)))
 (let (($x144 (and $x198 $x6)))
 (let (($x87 (and $x144 $x53)))
 (let (($x159 (and $x87 $x207)))
 (let (($x267 (and $x159 $x300)))
 (let (($x143 (and $x267 $x47)))
 (let (($x248 (and $x143 $x11)))
 (let (($x290 (and $x248 $x223)))
 (let (($x75 (and $x290 $x118)))
 (let (($x149 (and $x75 $x264)))
 (let (($x241 (and $x149 $x147)))
 (let (($x194 (and $x241 $x196)))
 (let (($x258 (and $x194 $x148)))
 (let (($x110 (and $x258 $x55)))
 (let (($x129 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x228 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x228 (_ bv1 32))))
 (let (($x307 (and $x80 $x110)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x308 (and $x220 $x307)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x82 (and $x31 $x308)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x19 (and $x188 $x82)))
 (let (($x128 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x72 (_ bv3 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x132 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x136 (or false (or false (and (and true (or $x8 $x132)) (or $x96 $x128))))))
 (let (($x170 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x136)))
 (let (($x97 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x136)))
 (let (($x133 (and $x97 $x19)))
 (let (($x166 (=> $x133 $x226)))
 (not $x166))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x224 (bvule ?x66 input.dst.llvm-%n)))
 (let (($x17 (= $x224 true)))
 (let (($x301 (= $x17 true)))
 (let (($x222 (forall ((input.ind-%var1383X (_ BitVec 32)) )(let ((?x303 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1383X)))
 (let ((?x68 (input.spec-%var-x-1.1.1 input.ind-%var1383X)))
 (let (($x127 (input.spec-%var-x-1.0.1 input.ind-%var1383X)))
 (=> $x127 (= ?x68 ?x303))))))
 ))
 (let (($x305 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1382X)))
 (let (($x127 (input.spec-%var-x-1.0.1 input.ind-%var1382X)))
 (= $x127 $x80))))
 ))
 (let (($x45 (and $x305 $x222)))
 (let (($x281 (= $x45 true)))
 (let (($x266 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1377X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x55))))
 (let ((?x303 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1377X)))
 (let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1377X)))
 (=> $x80 (= ?x303 ?x133))))))))
 ))
 (let (($x297 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x142 (and (bvule (_ bv0 32) input.ind-%var1376X) (bvult input.ind-%var1376X input.dst.llvm-%n))))
 (let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1376X)))
 (= $x80 $x142))))
 ))
 (let (($x152 (and $x297 $x266)))
 (let (($x107 (= $x152 true)))
 (let (($x89 (forall ((input.ind-%var1371X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1371X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x55))))
 (let ((?x68 (input.spec-%var-x-1.1.1 input.ind-%var1371X)))
 (let (($x127 (input.spec-%var-x-1.0.1 input.ind-%var1371X)))
 (=> $x127 (= ?x68 ?x133))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1370X (_ BitVec 32)) )(let (($x142 (and (bvule (_ bv0 32) input.ind-%var1370X) (bvult input.ind-%var1370X input.dst.llvm-%n))))
 (let (($x127 (input.spec-%var-x-1.0.1 input.ind-%var1370X)))
 (= $x127 $x142))))
 ))
 (let (($x226 (and $x153 $x89)))
 (let (($x166 (= $x226 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x241)))
 (let (($x209 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x64 (= $x209 true)))
 (let (($x319 (= $x64 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x90 (bvsub ?x72 ?x50)))
 (let (($x219 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x90) (bvult ?x72 ?x90))))
 (let (($x230 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x119 (ite $x230 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x202 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x287 (bvmul (_ bv4 64) ?x202)))
 (let ((?x315 ((_ extract 63 32) ?x287)))
 (let (($x180 (= ?x315 ?x119)))
 (let (($x282 (and $x180 $x219)))
 (let (($x280 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x264 (and $x280 $x282)))
 (let (($x149 (= true $x264)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (=> $x172 $x149)))
 (let (($x70 (= $x238 true)))
 (let (($x91 (= $x70 true)))
 (let (($x101 (= $x91 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x237 (= $x259 true)))
 (let (($x317 (= $x237 true)))
 (let (($x200 (= $x317 true)))
 (let (($x250 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x250 true)))
 (let (($x39 (= $x158 true)))
 (let (($x118 (= $x39 true)))
 (let (($x320 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x320 true)))
 (let (($x253 (= $x178 true)))
 (let (($x223 (= $x253 true)))
 (let (($x277 (= $x172 true)))
 (let (($x218 (= $x277 true)))
 (let (($x11 (= $x218 true)))
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x215)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x78)))
 (let ((?x236 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x236)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x111)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (and $x36 $x229)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x155 $x193)))
 (let (($x254 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x139 $x126)))
 (let (($x273 (not $x120)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x44 $x168)))
 (let (($x124 (and (not $x35) $x273)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x49 $x84)))
 (let (($x74 (not $x115)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x20 $x201)))
 (let (($x186 (and (not $x73) $x74)))
 (let (($x300 (and (and (and (and (and (and $x186 $x124) $x272) $x254) $x256) $x171) $x137)))
 (let (($x267 (and $x300 $x294)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x59 (or false (or false (and (and true (or $x217 $x22)) (or $x104 $x122))))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x59)))
 (let (($x105 (and $x235 $x267)))
 (let (($x296 (= $x105 true)))
 (let (($x47 (= $x296 true)))
 (let (($x143 (= $x47 true)))
 (let (($x159 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x159 true)))
 (let (($x199 (= $x26 true)))
 (let (($x146 (= $x199 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x161 (= (_ bv0 2) ?x87)))
 (let (($x9 (= $x161 true)))
 (let (($x86 (= $x9 true)))
 (let (($x144 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x151 (= $x144 true)))
 (let (($x29 (= $x151 true)))
 (let (($x167 (= $x29 true)))
 (let ((?x195 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x195)))
 (let (($x33 (= ?x198 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x33 true)))
 (let (($x141 (= $x164 true)))
 (let (($x154 (and $x141 $x167)))
 (let (($x207 (and $x154 $x86)))
 (let (($x225 (and $x207 $x146)))
 (let (($x165 (and $x225 $x143)))
 (let (($x248 (and $x165 $x11)))
 (let (($x290 (and $x248 $x223)))
 (let (($x75 (and $x290 $x118)))
 (let (($x261 (and $x75 $x200)))
 (let (($x147 (and $x261 $x101)))
 (let (($x293 (and $x147 $x319)))
 (let (($x270 (and $x293 $x166)))
 (let (($x30 (and $x270 $x107)))
 (let (($x197 (and $x30 $x281)))
 (let (($x15 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x76 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x76 (_ bv1 32))))
 (let (($x251 (and $x23 $x197)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x34 $x251)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x190 (and $x203 $x100)))
 (let (($x233 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x69 (and $x233 $x190)))
 (let (($x24 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd ?x72 (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x160 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x97 (or false (or false (and (and true (or $x56 $x160)) (or $x94 $x24))))))
 (let (($x188 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x97)))
 (let (($x61 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x97)))
 (let (($x283 (and $x61 $x69)))
 (let (($x284 (=> $x283 $x301)))
 (not $x284))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x224 (bvule ?x66 input.dst.llvm-%n)))
 (let (($x17 (= $x224 true)))
 (let (($x301 (= $x17 true)))
 (let (($x222 (forall ((input.ind-%var1383X (_ BitVec 32)) )(let ((?x303 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1383X)))
 (let ((?x68 (input.spec-%var-x-1.1.1 input.ind-%var1383X)))
 (let (($x127 (input.spec-%var-x-1.0.1 input.ind-%var1383X)))
 (=> $x127 (= ?x68 ?x303))))))
 ))
 (let (($x305 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1382X)))
 (let (($x127 (input.spec-%var-x-1.0.1 input.ind-%var1382X)))
 (= $x127 $x80))))
 ))
 (let (($x45 (and $x305 $x222)))
 (let (($x281 (= $x45 true)))
 (let (($x266 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1377X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x55))))
 (let ((?x303 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1377X)))
 (let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1377X)))
 (=> $x80 (= ?x303 ?x133))))))))
 ))
 (let (($x297 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x142 (and (bvule (_ bv0 32) input.ind-%var1376X) (bvult input.ind-%var1376X input.dst.llvm-%n))))
 (let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1376X)))
 (= $x80 $x142))))
 ))
 (let (($x152 (and $x297 $x266)))
 (let (($x107 (= $x152 true)))
 (let (($x89 (forall ((input.ind-%var1371X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1371X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x55))))
 (let ((?x68 (input.spec-%var-x-1.1.1 input.ind-%var1371X)))
 (let (($x127 (input.spec-%var-x-1.0.1 input.ind-%var1371X)))
 (=> $x127 (= ?x68 ?x133))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1370X (_ BitVec 32)) )(let (($x142 (and (bvule (_ bv0 32) input.ind-%var1370X) (bvult input.ind-%var1370X input.dst.llvm-%n))))
 (let (($x127 (input.spec-%var-x-1.0.1 input.ind-%var1370X)))
 (= $x127 $x142))))
 ))
 (let (($x226 (and $x153 $x89)))
 (let (($x166 (= $x226 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x241)))
 (let (($x209 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x64 (= $x209 true)))
 (let (($x319 (= $x64 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x90 (bvsub ?x72 ?x50)))
 (let (($x219 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x90) (bvult ?x72 ?x90))))
 (let (($x230 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x119 (ite $x230 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x202 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x287 (bvmul (_ bv4 64) ?x202)))
 (let ((?x315 ((_ extract 63 32) ?x287)))
 (let (($x180 (= ?x315 ?x119)))
 (let (($x282 (and $x180 $x219)))
 (let (($x280 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x264 (and $x280 $x282)))
 (let (($x149 (= true $x264)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (=> $x172 $x149)))
 (let (($x70 (= $x238 true)))
 (let (($x91 (= $x70 true)))
 (let (($x101 (= $x91 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x237 (= $x259 true)))
 (let (($x317 (= $x237 true)))
 (let (($x200 (= $x317 true)))
 (let (($x250 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x250 true)))
 (let (($x39 (= $x158 true)))
 (let (($x118 (= $x39 true)))
 (let (($x320 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x320 true)))
 (let (($x253 (= $x178 true)))
 (let (($x223 (= $x253 true)))
 (let (($x277 (= $x172 true)))
 (let (($x218 (= $x277 true)))
 (let (($x11 (= $x218 true)))
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x215)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x78)))
 (let ((?x236 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x236)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x111)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (and $x36 $x229)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x155 $x193)))
 (let (($x254 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x139 $x126)))
 (let (($x273 (not $x120)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x44 $x168)))
 (let (($x124 (and (not $x35) $x273)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x49 $x84)))
 (let (($x74 (not $x115)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x20 $x201)))
 (let (($x186 (and (not $x73) $x74)))
 (let (($x300 (and (and (and (and (and (and $x186 $x124) $x272) $x254) $x256) $x171) $x137)))
 (let (($x267 (and $x300 $x294)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x59 (or false (or false (and (and true (or $x217 $x22)) (or $x104 $x122))))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x59)))
 (let (($x105 (and $x235 $x267)))
 (let (($x296 (= $x105 true)))
 (let (($x47 (= $x296 true)))
 (let (($x143 (= $x47 true)))
 (let (($x159 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x159 true)))
 (let (($x199 (= $x26 true)))
 (let (($x146 (= $x199 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x161 (= (_ bv0 2) ?x87)))
 (let (($x9 (= $x161 true)))
 (let (($x86 (= $x9 true)))
 (let (($x144 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x151 (= $x144 true)))
 (let (($x29 (= $x151 true)))
 (let (($x167 (= $x29 true)))
 (let ((?x195 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x195)))
 (let (($x33 (= ?x198 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x33 true)))
 (let (($x141 (= $x164 true)))
 (let (($x154 (and $x141 $x167)))
 (let (($x207 (and $x154 $x86)))
 (let (($x225 (and $x207 $x146)))
 (let (($x165 (and $x225 $x143)))
 (let (($x248 (and $x165 $x11)))
 (let (($x290 (and $x248 $x223)))
 (let (($x75 (and $x290 $x118)))
 (let (($x261 (and $x75 $x200)))
 (let (($x147 (and $x261 $x101)))
 (let (($x293 (and $x147 $x319)))
 (let (($x270 (and $x293 $x166)))
 (let (($x30 (and $x270 $x107)))
 (let (($x197 (and $x30 $x281)))
 (let (($x15 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x76 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x76 (_ bv1 32))))
 (let (($x251 (and $x23 $x197)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x34 $x251)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x190 (and $x203 $x100)))
 (let (($x233 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x69 (and $x233 $x190)))
 (let (($x24 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd ?x72 (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x160 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x97 (or false (or false (and (and true (or $x56 $x160)) (or $x94 $x24))))))
 (let (($x188 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x97)))
 (let (($x61 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x97)))
 (let (($x283 (and $x61 $x69)))
 (let (($x284 (=> $x283 $x301)))
 (not $x284))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x316 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x258 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x258 (_ bv1 32))))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (=> $x172 $x216)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x75 (bvsub ?x72 ?x50)))
 (let (($x200 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x75) (bvult ?x72 ?x75))))
 (let (($x158 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x39 (ite $x158 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x223 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x290 (bvmul (_ bv4 64) ?x223)))
 (let ((?x250 ((_ extract 63 32) ?x290)))
 (let (($x118 (= ?x250 ?x39)))
 (let (($x261 (and $x118 $x200)))
 (let (($x178 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x48 (and $x178 $x261)))
 (let (($x289 (= true $x48)))
 (let (($x280 (=> $x172 $x289)))
 (let (($x302 (=> (and $x280 $x172) $x216)))
 (let (($x249 (= $x302 true)))
 (let (($x135 (= $x249 true)))
 (let (($x52 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let ((?x269 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1406X)))
 (let ((?x19 (input.spec-%var-x-1.1.1 input.ind-%var1406X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1406X)))
 (=> $x319 (= ?x19 ?x269))))))
 ))
 (let (($x255 (forall ((input.ind-%var1405X (_ BitVec 32)) )(let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1405X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1405X)))
 (= $x319 $x283))))
 ))
 (let (($x62 (and $x255 $x52)))
 (let (($x192 (= $x62 true)))
 (let (($x148 (forall ((input.ind-%var1400X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1400X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x152))))
 (let ((?x269 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1400X)))
 (let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1400X)))
 (=> $x283 (= ?x269 ?x231))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var1399X) (bvult input.ind-%var1399X input.dst.llvm-%n))))
 (let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1399X)))
 (= $x283 $x153))))
 ))
 (let (($x28 (and $x108 $x148)))
 (let (($x175 (= $x28 true)))
 (let (($x281 (forall ((input.ind-%var1394X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1394X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x152))))
 (let ((?x19 (input.spec-%var-x-1.1.1 input.ind-%var1394X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1394X)))
 (=> $x319 (= ?x19 ?x231))))))))
 ))
 (let (($x243 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var1393X) (bvult input.ind-%var1393X input.dst.llvm-%n))))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1393X)))
 (= $x319 $x153))))
 ))
 (let (($x197 (and $x243 $x281)))
 (let (($x251 (= $x197 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x238)))
 (let (($x91 (= ?x70 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x91 true)))
 (let (($x147 (= $x101 true)))
 (let ((?x60 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x219 (= (_ bv0 2) ?x60)))
 (let (($x282 (= $x219 true)))
 (let (($x264 (= $x282 true)))
 (let (($x230 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x119 (= $x230 true)))
 (let (($x180 (= $x119 true)))
 (let (($x79 (= $x180 true)))
 (let (($x214 (= $x280 true)))
 (let (($x202 (= $x214 true)))
 (let (($x287 (= $x202 true)))
 (let (($x143 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x165 (= $x143 true)))
 (let (($x277 (= $x165 true)))
 (let (($x218 (= $x277 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x267 (= $x294 true)))
 (let (($x105 (= $x267 true)))
 (let (($x296 (= $x105 true)))
 (let (($x246 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (= $x246 true)))
 (let (($x137 (= $x78 true)))
 (let (($x300 (= $x137 true)))
 (let (($x193 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x256 (= $x193 true)))
 (let (($x221 (= $x256 true)))
 (let (($x236 (= $x221 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x139)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x35)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x49 $x115)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x25 $x74)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x104 $x122)))
 (let (($x114 (not $x71)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x22 $x40)))
 (let (($x59 (and (not $x81) $x114)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x225 $x125)))
 (let (($x182 (not $x210)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x164 $x141)))
 (let (($x217 (and (not $x146) $x182)))
 (let (($x272 (and (and (and (and (and (and $x217 $x59) $x20) $x73) $x186) $x168) $x57)))
 (let (($x5 (and $x272 $x126)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x159 (or false (or false (and (and true (or $x29 $x167)) (or $x87 $x161))))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x159)))
 (let (($x185 (and $x199 $x5)))
 (let (($x254 (= $x185 true)))
 (let (($x299 (= $x254 true)))
 (let (($x155 (= $x299 true)))
 (let ((?x23 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x23)))
 (let (($x195 (= ?x176 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x195 true)))
 (let (($x10 (= $x198 true)))
 (let (($x36 (and $x10 $x155)))
 (let (($x171 (and $x36 $x236)))
 (let (($x215 (and $x171 $x300)))
 (let (($x47 (and $x215 $x296)))
 (let (($x11 (and $x47 $x218)))
 (let (($x315 (and $x11 $x287)))
 (let (($x90 (and $x315 $x79)))
 (let (($x149 (and $x90 $x264)))
 (let (($x241 (and $x149 $x147)))
 (let (($x100 (and $x241 $x251)))
 (let (($x88 (and $x100 $x175)))
 (let (($x292 (and $x88 $x192)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x156 (and $x129 $x292)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x177 (and $x220 $x156)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x169 $x177)))
 (let (($x136 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd ?x72 (_ bv3 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x96 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x160)))
 (let (($x61 (or false (or false (and (and true (or $x14 $x96)) (or $x162 $x136))))))
 (let (($x233 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x61)))
 (let (($x204 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x61)))
 (let (($x212 (and $x204 $x310)))
 (let (($x205 (=> $x212 $x135)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x316 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x258 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x258 (_ bv1 32))))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (=> $x172 $x216)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x75 (bvsub ?x72 ?x50)))
 (let (($x200 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x75) (bvult ?x72 ?x75))))
 (let (($x158 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x39 (ite $x158 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x223 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x290 (bvmul (_ bv4 64) ?x223)))
 (let ((?x250 ((_ extract 63 32) ?x290)))
 (let (($x118 (= ?x250 ?x39)))
 (let (($x261 (and $x118 $x200)))
 (let (($x178 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x48 (and $x178 $x261)))
 (let (($x289 (= true $x48)))
 (let (($x280 (=> $x172 $x289)))
 (let (($x302 (=> (and $x280 $x172) $x216)))
 (let (($x249 (= $x302 true)))
 (let (($x135 (= $x249 true)))
 (let (($x52 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let ((?x269 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1406X)))
 (let ((?x19 (input.spec-%var-x-1.1.1 input.ind-%var1406X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1406X)))
 (=> $x319 (= ?x19 ?x269))))))
 ))
 (let (($x255 (forall ((input.ind-%var1405X (_ BitVec 32)) )(let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1405X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1405X)))
 (= $x319 $x283))))
 ))
 (let (($x62 (and $x255 $x52)))
 (let (($x192 (= $x62 true)))
 (let (($x148 (forall ((input.ind-%var1400X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1400X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x152))))
 (let ((?x269 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1400X)))
 (let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1400X)))
 (=> $x283 (= ?x269 ?x231))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var1399X) (bvult input.ind-%var1399X input.dst.llvm-%n))))
 (let (($x283 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1399X)))
 (= $x283 $x153))))
 ))
 (let (($x28 (and $x108 $x148)))
 (let (($x175 (= $x28 true)))
 (let (($x281 (forall ((input.ind-%var1394X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1394X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x152))))
 (let ((?x19 (input.spec-%var-x-1.1.1 input.ind-%var1394X)))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1394X)))
 (=> $x319 (= ?x19 ?x231))))))))
 ))
 (let (($x243 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var1393X) (bvult input.ind-%var1393X input.dst.llvm-%n))))
 (let (($x319 (input.spec-%var-x-1.0.1 input.ind-%var1393X)))
 (= $x319 $x153))))
 ))
 (let (($x197 (and $x243 $x281)))
 (let (($x251 (= $x197 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x238)))
 (let (($x91 (= ?x70 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x91 true)))
 (let (($x147 (= $x101 true)))
 (let ((?x60 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x219 (= (_ bv0 2) ?x60)))
 (let (($x282 (= $x219 true)))
 (let (($x264 (= $x282 true)))
 (let (($x230 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x119 (= $x230 true)))
 (let (($x180 (= $x119 true)))
 (let (($x79 (= $x180 true)))
 (let (($x214 (= $x280 true)))
 (let (($x202 (= $x214 true)))
 (let (($x287 (= $x202 true)))
 (let (($x143 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x165 (= $x143 true)))
 (let (($x277 (= $x165 true)))
 (let (($x218 (= $x277 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x267 (= $x294 true)))
 (let (($x105 (= $x267 true)))
 (let (($x296 (= $x105 true)))
 (let (($x246 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (= $x246 true)))
 (let (($x137 (= $x78 true)))
 (let (($x300 (= $x137 true)))
 (let (($x193 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x256 (= $x193 true)))
 (let (($x221 (= $x256 true)))
 (let (($x236 (= $x221 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x139)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x35)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x49 $x115)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x25 $x74)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x104 $x122)))
 (let (($x114 (not $x71)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x22 $x40)))
 (let (($x59 (and (not $x81) $x114)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x225 $x125)))
 (let (($x182 (not $x210)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x164 $x141)))
 (let (($x217 (and (not $x146) $x182)))
 (let (($x272 (and (and (and (and (and (and $x217 $x59) $x20) $x73) $x186) $x168) $x57)))
 (let (($x5 (and $x272 $x126)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x159 (or false (or false (and (and true (or $x29 $x167)) (or $x87 $x161))))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x159)))
 (let (($x185 (and $x199 $x5)))
 (let (($x254 (= $x185 true)))
 (let (($x299 (= $x254 true)))
 (let (($x155 (= $x299 true)))
 (let ((?x23 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x23)))
 (let (($x195 (= ?x176 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x195 true)))
 (let (($x10 (= $x198 true)))
 (let (($x36 (and $x10 $x155)))
 (let (($x171 (and $x36 $x236)))
 (let (($x215 (and $x171 $x300)))
 (let (($x47 (and $x215 $x296)))
 (let (($x11 (and $x47 $x218)))
 (let (($x315 (and $x11 $x287)))
 (let (($x90 (and $x315 $x79)))
 (let (($x149 (and $x90 $x264)))
 (let (($x241 (and $x149 $x147)))
 (let (($x100 (and $x241 $x251)))
 (let (($x88 (and $x100 $x175)))
 (let (($x292 (and $x88 $x192)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x156 (and $x129 $x292)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x177 (and $x220 $x156)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x169 $x177)))
 (let (($x136 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd ?x72 (_ bv3 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x96 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x160)))
 (let (($x61 (or false (or false (and (and true (or $x14 $x96)) (or $x162 $x136))))))
 (let (($x233 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x61)))
 (let (($x204 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x61)))
 (let (($x212 (and $x204 $x310)))
 (let (($x205 (=> $x212 $x135)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 195 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x181 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x208 (bvmul (_ bv4294967295 32) ?x181)))
 (let ((?x313 (bvneg ?x208)))
 (let (($x163 (= ?x313 ?x131)))
 (let (($x206 (= $x163 true)))
 (let (($x311 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1429X)))
 (let ((?x121 (input.spec-%var-x-1.1.1 input.ind-%var1429X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1429X)))
 (=> $x30 (= ?x121 ?x189))))))
 ))
 (let (($x184 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x176 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1428X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1428X)))
 (= $x30 $x176))))
 ))
 (let (($x268 (and $x184 $x311)))
 (let (($x42 (= $x268 true)))
 (let (($x286 (forall ((input.ind-%var1423X (_ BitVec 32)) )(let ((?x310 (bvadd (bvmul input.ind-%var1423X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x216))))
 (let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1423X)))
 (let (($x176 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1423X)))
 (=> $x176 (= ?x189 ?x63))))))))
 ))
 (let (($x95 (forall ((input.ind-%var1422X (_ BitVec 32)) )(let (($x45 (and (bvule (_ bv0 32) input.ind-%var1422X) (bvult input.ind-%var1422X input.dst.llvm-%n))))
 (let (($x176 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1422X)))
 (= $x176 $x45))))
 ))
 (let (($x92 (and $x95 $x286)))
 (let (($x32 (= $x92 true)))
 (let (($x66 (forall ((input.ind-%var1417X (_ BitVec 32)) )(let ((?x310 (bvadd (bvmul input.ind-%var1417X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x216))))
 (let ((?x121 (input.spec-%var-x-1.1.1 input.ind-%var1417X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1417X)))
 (=> $x30 (= ?x121 ?x63))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1416X (_ BitVec 32)) )(let (($x45 (and (bvule (_ bv0 32) input.ind-%var1416X) (bvult input.ind-%var1416X input.dst.llvm-%n))))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1416X)))
 (= $x30 $x45))))
 ))
 (let (($x263 (and $x197 $x66)))
 (let (($x293 (= $x263 true)))
 (let ((?x19 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x19)))
 (let (($x297 (= ?x110 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let (($x134 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x142 (= $x134 true)))
 (let (($x153 (= $x142 true)))
 (let (($x68 (= $x153 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x60 (bvsub ?x72 ?x50)))
 (let (($x149 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x60) (bvult ?x72 ?x60))))
 (let (($x79 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x90 (ite $x79 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x230 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x119 (bvmul (_ bv4 64) ?x230)))
 (let ((?x180 ((_ extract 63 32) ?x119)))
 (let (($x304 (= ?x180 ?x90)))
 (let (($x238 (and $x304 $x149)))
 (let (($x287 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x70 (and $x287 $x238)))
 (let (($x91 (= true $x70)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (=> $x172 $x91)))
 (let (($x147 (= $x101 true)))
 (let (($x241 (= $x147 true)))
 (let (($x64 (= $x241 true)))
 (let (($x200 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x200 true)))
 (let (($x48 (= $x261 true)))
 (let (($x289 (= $x48 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (= $x118 true)))
 (let (($x75 (= $x259 true)))
 (let (($x237 (= $x75 true)))
 (let (($x223 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x290 (= $x223 true)))
 (let (($x250 (= $x290 true)))
 (let (($x158 (= $x250 true)))
 (let (($x11 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x248 (= $x11 true)))
 (let (($x320 (= $x248 true)))
 (let (($x178 (= $x320 true)))
 (let (($x47 (= $x172 true)))
 (let (($x143 (= $x47 true)))
 (let (($x165 (= $x143 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x256 (= (_ bv0 32) ?x193)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x229 (= (_ bv0 32) ?x36)))
 (let ((?x299 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x126)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (and $x139 $x5)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (and $x272 $x185)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x84 $x115)))
 (let (($x186 (not $x74)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x124 $x25)))
 (let (($x44 (and (not $x49) $x186)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x120 $x235)))
 (let (($x273 (not $x20)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x164 $x141)))
 (let (($x73 (and (not $x59) $x273)))
 (let (($x137 (and (and (and (and (and (and $x73 $x44) $x51) $x57) $x254) $x155) $x229)))
 (let (($x300 (and $x137 $x256)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x225 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x225)))
 (let (($x122 (or false (or false (and (and true (or $x125 $x210)) (or $x22 $x40))))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x122)))
 (let (($x215 (and $x114 $x300)))
 (let (($x294 (= $x215 true)))
 (let (($x267 (= $x294 true)))
 (let (($x105 (= $x267 true)))
 (let ((?x161 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x9 (= (_ bv0 2) ?x161)))
 (let (($x86 (= $x9 true)))
 (let (($x207 (= $x86 true)))
 (let ((?x26 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x26)))
 (let (($x167 (= ?x151 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x154 (= $x167 true)))
 (let (($x53 (= $x154 true)))
 (let (($x159 (and $x53 $x207)))
 (let (($x296 (and $x159 $x105)))
 (let (($x277 (and $x296 $x165)))
 (let (($x253 (and $x277 $x178)))
 (let (($x39 (and $x253 $x158)))
 (let (($x317 (and $x39 $x237)))
 (let (($x280 (and $x317 $x289)))
 (let (($x319 (and $x280 $x64)))
 (let (($x243 (and $x319 $x68)))
 (let (($x298 (and $x243 $x305)))
 (let (($x265 (and $x298 $x293)))
 (let (($x288 (and $x265 $x32)))
 (let (($x130 (and $x288 $x42)))
 (let (($x195 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x198 (ite $x195 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x198 (_ bv1 32))))
 (let (($x213 (and $x10 $x130)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x15 $x213)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x58 (and $x34 $x196)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x43 (and $x31 $x58)))
 (let (($x97 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd ?x72 (_ bv3 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x94 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x204 (or false (or false (and (and true (or $x21 $x94)) (or $x170 $x97))))))
 (let (($x169 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x204)))
 (let (($x7 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x204)))
 (let (($x116 (and $x7 $x43)))
 (let (($x257 (=> $x116 $x206)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x181 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x208 (bvmul (_ bv4294967295 32) ?x181)))
 (let ((?x313 (bvneg ?x208)))
 (let (($x163 (= ?x313 ?x131)))
 (let (($x206 (= $x163 true)))
 (let (($x311 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1429X)))
 (let ((?x121 (input.spec-%var-x-1.1.1 input.ind-%var1429X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1429X)))
 (=> $x30 (= ?x121 ?x189))))))
 ))
 (let (($x184 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x176 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1428X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1428X)))
 (= $x30 $x176))))
 ))
 (let (($x268 (and $x184 $x311)))
 (let (($x42 (= $x268 true)))
 (let (($x286 (forall ((input.ind-%var1423X (_ BitVec 32)) )(let ((?x310 (bvadd (bvmul input.ind-%var1423X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x216))))
 (let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1423X)))
 (let (($x176 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1423X)))
 (=> $x176 (= ?x189 ?x63))))))))
 ))
 (let (($x95 (forall ((input.ind-%var1422X (_ BitVec 32)) )(let (($x45 (and (bvule (_ bv0 32) input.ind-%var1422X) (bvult input.ind-%var1422X input.dst.llvm-%n))))
 (let (($x176 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1422X)))
 (= $x176 $x45))))
 ))
 (let (($x92 (and $x95 $x286)))
 (let (($x32 (= $x92 true)))
 (let (($x66 (forall ((input.ind-%var1417X (_ BitVec 32)) )(let ((?x310 (bvadd (bvmul input.ind-%var1417X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x216))))
 (let ((?x121 (input.spec-%var-x-1.1.1 input.ind-%var1417X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1417X)))
 (=> $x30 (= ?x121 ?x63))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1416X (_ BitVec 32)) )(let (($x45 (and (bvule (_ bv0 32) input.ind-%var1416X) (bvult input.ind-%var1416X input.dst.llvm-%n))))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1416X)))
 (= $x30 $x45))))
 ))
 (let (($x263 (and $x197 $x66)))
 (let (($x293 (= $x263 true)))
 (let ((?x19 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x19)))
 (let (($x297 (= ?x110 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let (($x134 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x142 (= $x134 true)))
 (let (($x153 (= $x142 true)))
 (let (($x68 (= $x153 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x60 (bvsub ?x72 ?x50)))
 (let (($x149 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x60) (bvult ?x72 ?x60))))
 (let (($x79 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x90 (ite $x79 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x230 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x119 (bvmul (_ bv4 64) ?x230)))
 (let ((?x180 ((_ extract 63 32) ?x119)))
 (let (($x304 (= ?x180 ?x90)))
 (let (($x238 (and $x304 $x149)))
 (let (($x287 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x70 (and $x287 $x238)))
 (let (($x91 (= true $x70)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (=> $x172 $x91)))
 (let (($x147 (= $x101 true)))
 (let (($x241 (= $x147 true)))
 (let (($x64 (= $x241 true)))
 (let (($x200 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x200 true)))
 (let (($x48 (= $x261 true)))
 (let (($x289 (= $x48 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (= $x118 true)))
 (let (($x75 (= $x259 true)))
 (let (($x237 (= $x75 true)))
 (let (($x223 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x290 (= $x223 true)))
 (let (($x250 (= $x290 true)))
 (let (($x158 (= $x250 true)))
 (let (($x11 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x248 (= $x11 true)))
 (let (($x320 (= $x248 true)))
 (let (($x178 (= $x320 true)))
 (let (($x47 (= $x172 true)))
 (let (($x143 (= $x47 true)))
 (let (($x165 (= $x143 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x256 (= (_ bv0 32) ?x193)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x229 (= (_ bv0 32) ?x36)))
 (let ((?x299 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x126)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (and $x139 $x5)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (and $x272 $x185)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x84 $x115)))
 (let (($x186 (not $x74)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x124 $x25)))
 (let (($x44 (and (not $x49) $x186)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x120 $x235)))
 (let (($x273 (not $x20)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x164 $x141)))
 (let (($x73 (and (not $x59) $x273)))
 (let (($x137 (and (and (and (and (and (and $x73 $x44) $x51) $x57) $x254) $x155) $x229)))
 (let (($x300 (and $x137 $x256)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x225 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x225)))
 (let (($x122 (or false (or false (and (and true (or $x125 $x210)) (or $x22 $x40))))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x122)))
 (let (($x215 (and $x114 $x300)))
 (let (($x294 (= $x215 true)))
 (let (($x267 (= $x294 true)))
 (let (($x105 (= $x267 true)))
 (let ((?x161 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x9 (= (_ bv0 2) ?x161)))
 (let (($x86 (= $x9 true)))
 (let (($x207 (= $x86 true)))
 (let ((?x26 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x26)))
 (let (($x167 (= ?x151 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x154 (= $x167 true)))
 (let (($x53 (= $x154 true)))
 (let (($x159 (and $x53 $x207)))
 (let (($x296 (and $x159 $x105)))
 (let (($x277 (and $x296 $x165)))
 (let (($x253 (and $x277 $x178)))
 (let (($x39 (and $x253 $x158)))
 (let (($x317 (and $x39 $x237)))
 (let (($x280 (and $x317 $x289)))
 (let (($x319 (and $x280 $x64)))
 (let (($x243 (and $x319 $x68)))
 (let (($x298 (and $x243 $x305)))
 (let (($x265 (and $x298 $x293)))
 (let (($x288 (and $x265 $x32)))
 (let (($x130 (and $x288 $x42)))
 (let (($x195 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x198 (ite $x195 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x198 (_ bv1 32))))
 (let (($x213 (and $x10 $x130)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x15 $x213)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x58 (and $x34 $x196)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x43 (and $x31 $x58)))
 (let (($x97 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd ?x72 (_ bv3 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x94 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x204 (or false (or false (and (and true (or $x21 $x94)) (or $x170 $x97))))))
 (let (($x169 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x204)))
 (let (($x7 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x204)))
 (let (($x116 (and $x7 $x43)))
 (let (($x257 (=> $x116 $x206)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x111))))
 (let ((?x27 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x211)))
 (let ((?x41 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x194 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x41)))
 (let ((?x166 (bvmul (_ bv4294967295 32) ?x194)))
 (let ((?x312 (bvneg ?x166)))
 (let (($x318 (= ?x312 ?x27)))
 (let (($x262 (= $x318 true)))
 (let (($x69 (forall ((input.ind-%var1452X (_ BitVec 32)) )(let ((?x266 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1452X)))
 (let ((?x63 (input.spec-%var-x-1.1.1 input.ind-%var1452X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1452X)))
 (=> $x121 (= ?x63 ?x266))))))
 ))
 (let (($x89 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let (($x10 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1451X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1451X)))
 (= $x121 $x10))))
 ))
 (let (($x83 (and $x89 $x69)))
 (let (($x65 (= $x83 true)))
 (let (($x16 (forall ((input.ind-%var1446X (_ BitVec 32)) )(let ((?x227 (bvadd (bvmul input.ind-%var1446X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x42))))
 (let ((?x266 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1446X)))
 (let (($x10 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1446X)))
 (=> $x10 (= ?x266 ?x116))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1445X (_ BitVec 32)) )(let (($x302 (and (bvule (_ bv0 32) input.ind-%var1445X) (bvult input.ind-%var1445X input.dst.llvm-%n))))
 (let (($x10 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1445X)))
 (= $x10 $x302))))
 ))
 (let (($x55 (and $x108 $x16)))
 (let (($x107 (= $x55 true)))
 (let (($x313 (forall ((input.ind-%var1440X (_ BitVec 32)) )(let ((?x227 (bvadd (bvmul input.ind-%var1440X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x42))))
 (let ((?x63 (input.spec-%var-x-1.1.1 input.ind-%var1440X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1440X)))
 (=> $x121 (= ?x63 ?x116))))))))
 ))
 (let (($x258 (forall ((input.ind-%var1439X (_ BitVec 32)) )(let (($x302 (and (bvule (_ bv0 32) input.ind-%var1439X) (bvult input.ind-%var1439X input.dst.llvm-%n))))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1439X)))
 (= $x121 $x302))))
 ))
 (let (($x131 (and $x258 $x313)))
 (let (($x163 (= $x131 true)))
 (let ((?x305 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x305)))
 (let (($x30 (= ?x298 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x222 (= $x30 true)))
 (let (($x231 (= $x222 true)))
 (let ((?x153 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x153)))
 (let (($x243 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x243 true)))
 (let (($x110 (= $x19 true)))
 (let ((?x241 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x64 (= (_ bv0 2) ?x241)))
 (let (($x319 (= $x64 true)))
 (let (($x134 (= $x319 true)))
 (let (($x149 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x238 (= $x149 true)))
 (let (($x70 (= $x238 true)))
 (let (($x91 (= $x70 true)))
 (let (($x119 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 ?x50)) (bvult ?x72 (bvsub ?x72 ?x50)))))
 (let (($x48 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x280 (ite $x48 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x317 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvmul (_ bv4 64) ?x317)))
 (let ((?x261 ((_ extract 63 32) ?x200)))
 (let (($x214 (= ?x261 ?x280)))
 (let (($x180 (and $x214 $x119)))
 (let (($x75 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x79 (and $x75 $x180)))
 (let (($x90 (= true $x79)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x304 (=> $x172 $x90)))
 (let (($x219 (= $x304 true)))
 (let (($x60 (= $x219 true)))
 (let (($x282 (= $x60 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x223 true)))
 (let (($x250 (= $x290 true)))
 (let (($x158 (= $x250 true)))
 (let (($x11 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (= $x11 true)))
 (let (($x320 (= $x248 true)))
 (let (($x178 (= $x320 true)))
 (let (($x47 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x47 true)))
 (let (($x165 (= $x143 true)))
 (let (($x277 (= $x165 true)))
 (let (($x215 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x294 (= $x215 true)))
 (let (($x267 (= $x294 true)))
 (let (($x105 (= $x267 true)))
 (let (($x229 (= $x172 true)))
 (let (($x137 (= $x229 true)))
 (let (($x193 (= $x137 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x57)))
 (let ((?x236 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x236)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x115 $x186)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x84 $x44)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (and $x201 $x120)))
 (let (($x20 (not $x235)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x164 $x141)))
 (let (($x73 (and (not $x59) $x20)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (and $x40 $x81)))
 (let (($x104 (not $x232)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x167 $x154)))
 (let (($x114 (and (not $x22) $x104)))
 (let (($x254 (and (and (and (and (and (and $x114 $x73) $x25) $x46) $x221) $x51) $x35)))
 (let (($x246 (and $x254 $x171)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x161)))
 (let (($x210 (or false (or false (and (and true (or $x9 $x86)) (or $x146 $x13))))))
 (let (($x217 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x210)))
 (let (($x299 (and $x217 $x246)))
 (let (($x155 (= $x299 true)))
 (let (($x78 (= $x155 true)))
 (let (($x36 (= $x78 true)))
 (let (($x256 (and $x36 $x193)))
 (let (($x296 (and $x256 $x105)))
 (let (($x218 (and $x296 $x277)))
 (let (($x253 (and $x218 $x178)))
 (let (($x39 (and $x253 $x158)))
 (let (($x264 (and $x39 $x282)))
 (let (($x101 (and $x264 $x91)))
 (let (($x142 (and $x101 $x134)))
 (let (($x297 (and $x142 $x110)))
 (let (($x45 (and $x297 $x231)))
 (let (($x206 (and $x45 $x163)))
 (let (($x152 (and $x206 $x107)))
 (let (($x228 (and $x152 $x65)))
 (let (($x144 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x26 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x26 (_ bv1 32))))
 (let (($x292 (and $x151 $x228)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x76 $x292)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x127 (and $x129 $x274)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x203 $x127)))
 (let (($x61 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd ?x72 (_ bv3 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x162 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x7 (or false (or false (and (and true (or $x128 $x162)) (or $x188 $x61))))))
 (let (($x31 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x7)))
 (let (($x132 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x7)))
 (let (($x156 (and $x132 $x100)))
 (let (($x103 (=> $x156 $x262)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x111))))
 (let ((?x27 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x211)))
 (let ((?x41 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x194 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x41)))
 (let ((?x166 (bvmul (_ bv4294967295 32) ?x194)))
 (let ((?x312 (bvneg ?x166)))
 (let (($x318 (= ?x312 ?x27)))
 (let (($x262 (= $x318 true)))
 (let (($x69 (forall ((input.ind-%var1452X (_ BitVec 32)) )(let ((?x266 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1452X)))
 (let ((?x63 (input.spec-%var-x-1.1.1 input.ind-%var1452X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1452X)))
 (=> $x121 (= ?x63 ?x266))))))
 ))
 (let (($x89 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let (($x10 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1451X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1451X)))
 (= $x121 $x10))))
 ))
 (let (($x83 (and $x89 $x69)))
 (let (($x65 (= $x83 true)))
 (let (($x16 (forall ((input.ind-%var1446X (_ BitVec 32)) )(let ((?x227 (bvadd (bvmul input.ind-%var1446X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x42))))
 (let ((?x266 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1446X)))
 (let (($x10 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1446X)))
 (=> $x10 (= ?x266 ?x116))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1445X (_ BitVec 32)) )(let (($x302 (and (bvule (_ bv0 32) input.ind-%var1445X) (bvult input.ind-%var1445X input.dst.llvm-%n))))
 (let (($x10 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1445X)))
 (= $x10 $x302))))
 ))
 (let (($x55 (and $x108 $x16)))
 (let (($x107 (= $x55 true)))
 (let (($x313 (forall ((input.ind-%var1440X (_ BitVec 32)) )(let ((?x227 (bvadd (bvmul input.ind-%var1440X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x42))))
 (let ((?x63 (input.spec-%var-x-1.1.1 input.ind-%var1440X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1440X)))
 (=> $x121 (= ?x63 ?x116))))))))
 ))
 (let (($x258 (forall ((input.ind-%var1439X (_ BitVec 32)) )(let (($x302 (and (bvule (_ bv0 32) input.ind-%var1439X) (bvult input.ind-%var1439X input.dst.llvm-%n))))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1439X)))
 (= $x121 $x302))))
 ))
 (let (($x131 (and $x258 $x313)))
 (let (($x163 (= $x131 true)))
 (let ((?x305 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x305)))
 (let (($x30 (= ?x298 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x222 (= $x30 true)))
 (let (($x231 (= $x222 true)))
 (let ((?x153 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x153)))
 (let (($x243 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x243 true)))
 (let (($x110 (= $x19 true)))
 (let ((?x241 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x64 (= (_ bv0 2) ?x241)))
 (let (($x319 (= $x64 true)))
 (let (($x134 (= $x319 true)))
 (let (($x149 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x238 (= $x149 true)))
 (let (($x70 (= $x238 true)))
 (let (($x91 (= $x70 true)))
 (let (($x119 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 ?x50)) (bvult ?x72 (bvsub ?x72 ?x50)))))
 (let (($x48 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x280 (ite $x48 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x317 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x200 (bvmul (_ bv4 64) ?x317)))
 (let ((?x261 ((_ extract 63 32) ?x200)))
 (let (($x214 (= ?x261 ?x280)))
 (let (($x180 (and $x214 $x119)))
 (let (($x75 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x79 (and $x75 $x180)))
 (let (($x90 (= true $x79)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x304 (=> $x172 $x90)))
 (let (($x219 (= $x304 true)))
 (let (($x60 (= $x219 true)))
 (let (($x282 (= $x60 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x223 true)))
 (let (($x250 (= $x290 true)))
 (let (($x158 (= $x250 true)))
 (let (($x11 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (= $x11 true)))
 (let (($x320 (= $x248 true)))
 (let (($x178 (= $x320 true)))
 (let (($x47 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x47 true)))
 (let (($x165 (= $x143 true)))
 (let (($x277 (= $x165 true)))
 (let (($x215 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x294 (= $x215 true)))
 (let (($x267 (= $x294 true)))
 (let (($x105 (= $x267 true)))
 (let (($x229 (= $x172 true)))
 (let (($x137 (= $x229 true)))
 (let (($x193 (= $x137 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x57)))
 (let ((?x236 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x236)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x115 $x186)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x84 $x44)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (and $x201 $x120)))
 (let (($x20 (not $x235)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x164 $x141)))
 (let (($x73 (and (not $x59) $x20)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (and $x40 $x81)))
 (let (($x104 (not $x232)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x167 $x154)))
 (let (($x114 (and (not $x22) $x104)))
 (let (($x254 (and (and (and (and (and (and $x114 $x73) $x25) $x46) $x221) $x51) $x35)))
 (let (($x246 (and $x254 $x171)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x161)))
 (let (($x210 (or false (or false (and (and true (or $x9 $x86)) (or $x146 $x13))))))
 (let (($x217 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x210)))
 (let (($x299 (and $x217 $x246)))
 (let (($x155 (= $x299 true)))
 (let (($x78 (= $x155 true)))
 (let (($x36 (= $x78 true)))
 (let (($x256 (and $x36 $x193)))
 (let (($x296 (and $x256 $x105)))
 (let (($x218 (and $x296 $x277)))
 (let (($x253 (and $x218 $x178)))
 (let (($x39 (and $x253 $x158)))
 (let (($x264 (and $x39 $x282)))
 (let (($x101 (and $x264 $x91)))
 (let (($x142 (and $x101 $x134)))
 (let (($x297 (and $x142 $x110)))
 (let (($x45 (and $x297 $x231)))
 (let (($x206 (and $x45 $x163)))
 (let (($x152 (and $x206 $x107)))
 (let (($x228 (and $x152 $x65)))
 (let (($x144 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x26 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x26 (_ bv1 32))))
 (let (($x292 (and $x151 $x228)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x76 $x292)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x127 (and $x129 $x274)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x203 $x127)))
 (let (($x61 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd ?x72 (_ bv3 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x162 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x7 (or false (or false (and (and true (or $x128 $x162)) (or $x188 $x61))))))
 (let (($x31 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x7)))
 (let (($x132 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x7)))
 (let (($x156 (and $x132 $x100)))
 (let (($x103 (=> $x156 $x262)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 204 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x224 (bvule ?x145 (_ bv4294967294 32))))
 (let (($x205 (= $x224 true)))
 (let (($x314 (= $x205 true)))
 (let (($x175 (forall ((input.ind-%var1476X (_ BitVec 32)) )(let ((?x77 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1476X)))
 (let ((?x181 (input.spec-%var-x-1.1.1 input.ind-%var1476X)))
 (let (($x33 (input.spec-%var-x-1.0.1 input.ind-%var1476X)))
 (=> $x33 (= ?x181 ?x77))))))
 ))
 (let (($x157 (forall ((input.ind-%var1475X (_ BitVec 32)) )(let (($x53 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1475X)))
 (let (($x33 (input.spec-%var-x-1.0.1 input.ind-%var1475X)))
 (= $x33 $x53))))
 ))
 (let (($x62 (and $x157 $x175)))
 (let (($x255 (= $x62 true)))
 (let (($x265 (forall ((input.ind-%var1470X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1470X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x228))))
 (let ((?x77 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1470X)))
 (let (($x53 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1470X)))
 (=> $x53 (= ?x77 ?x41))))))))
 ))
 (let (($x318 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let (($x311 (and (bvule (_ bv0 32) input.ind-%var1469X) (bvult input.ind-%var1469X input.dst.llvm-%n))))
 (let (($x53 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1469X)))
 (= $x53 $x311))))
 ))
 (let (($x176 (and $x318 $x265)))
 (let (($x293 (= $x176 true)))
 (let (($x312 (forall ((input.ind-%var1464X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1464X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x228))))
 (let ((?x181 (input.spec-%var-x-1.1.1 input.ind-%var1464X)))
 (let (($x33 (input.spec-%var-x-1.0.1 input.ind-%var1464X)))
 (=> $x33 (= ?x181 ?x41))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1463X (_ BitVec 32)) )(let (($x311 (and (bvule (_ bv0 32) input.ind-%var1463X) (bvult input.ind-%var1463X input.dst.llvm-%n))))
 (let (($x33 (input.spec-%var-x-1.0.1 input.ind-%var1463X)))
 (= $x33 $x311))))
 ))
 (let (($x99 (and $x284 $x312)))
 (let (($x244 (= $x99 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x198)))
 (let (($x271 (= ?x121 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x309 (= $x271 true)))
 (let (($x302 (= $x309 true)))
 (let (($x23 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x30 (= $x23 true)))
 (let (($x222 (= $x30 true)))
 (let (($x231 (= $x222 true)))
 (let (($x110 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x297 (= $x110 true)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x238)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x264)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x304 (and $x180 $x90)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (and $x119 $x304)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x200 $x261)))
 (let (($x289 (not $x48)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (and $x75 $x237)))
 (let (($x214 (and (not $x317) $x289)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x290 $x250)))
 (let (($x39 (not $x158)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x256 $x300)))
 (let (($x259 (and (not $x223) $x39)))
 (let (($x319 (and (and (and (and (and (and $x259 $x214) $x202) $x230) $x219) $x282) $x149)))
 (let (($x134 (and $x319 $x70)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x296 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x320 (or false (or false (and (and true (or $x105 $x296)) (or $x165 $x277))))))
 (let (($x253 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x320)))
 (let (($x142 (and $x253 $x134)))
 (let (($x153 (= $x142 true)))
 (let (($x68 (= $x153 true)))
 (let (($x243 (= $x68 true)))
 (let ((?x155 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x78 (= (_ bv0 2) ?x155)))
 (let (($x36 (= $x78 true)))
 (let (($x229 (= $x36 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x186 (bvsub ?x72 ?x50)))
 (let (($x168 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x186) (bvult ?x72 ?x186))))
 (let (($x84 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x115 (ite $x84 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x49 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvmul (_ bv4 64) ?x49)))
 (let ((?x126 ((_ extract 63 32) ?x46)))
 (let (($x74 (= ?x126 ?x115)))
 (let (($x51 (and $x74 $x168)))
 (let (($x25 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x185 (and $x25 $x51)))
 (let (($x236 (= true $x185)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (=> $x172 $x236)))
 (let (($x254 (= $x35 true)))
 (let (($x57 (= $x254 true)))
 (let (($x171 (= $x57 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x120 (= $x201 true)))
 (let (($x235 (= $x120 true)))
 (let (($x20 (= $x235 true)))
 (let (($x104 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x114 (= $x104 true)))
 (let (($x164 (= $x114 true)))
 (let (($x141 (= $x164 true)))
 (let (($x22 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x122 (= $x22 true)))
 (let (($x40 (= $x122 true)))
 (let (($x81 (= $x40 true)))
 (let ((?x71 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x71)))
 (let (($x210 (= ?x225 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x217 (= $x210 true)))
 (let (($x167 (= $x217 true)))
 (let (($x86 (= $x172 true)))
 (let (($x207 (= $x86 true)))
 (let (($x159 (= $x207 true)))
 (let (($x154 (and $x159 $x167)))
 (let (($x232 (and $x154 $x81)))
 (let (($x59 (and $x232 $x141)))
 (let (($x73 (and $x59 $x20)))
 (let (($x246 (and $x73 $x171)))
 (let (($x137 (and $x246 $x229)))
 (let (($x19 (and $x137 $x243)))
 (let (($x298 (and $x19 $x305)))
 (let (($x45 (and $x298 $x231)))
 (let (($x316 (and $x45 $x302)))
 (let (($x295 (and $x316 $x244)))
 (let (($x307 (and $x295 $x293)))
 (let (($x52 (and $x307 $x255)))
 (let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x161 (ite $x182 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x161 (_ bv1 32))))
 (let (($x138 (and $x9 $x52)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x148 (and $x144 $x138)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x192 (and $x15 $x148)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x85 (and $x220 $x192)))
 (let (($x204 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd ?x72 (_ bv3 32))))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x170 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x132 (or false (or false (and (and true (or $x24 $x170)) (or $x233 $x204))))))
 (let (($x203 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x132)))
 (let (($x160 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x132)))
 (let (($x38 (and $x160 $x85)))
 (let (($x191 (=> $x38 $x314)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x224 (bvule ?x145 (_ bv4294967294 32))))
 (let (($x205 (= $x224 true)))
 (let (($x314 (= $x205 true)))
 (let (($x175 (forall ((input.ind-%var1476X (_ BitVec 32)) )(let ((?x77 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1476X)))
 (let ((?x181 (input.spec-%var-x-1.1.1 input.ind-%var1476X)))
 (let (($x33 (input.spec-%var-x-1.0.1 input.ind-%var1476X)))
 (=> $x33 (= ?x181 ?x77))))))
 ))
 (let (($x157 (forall ((input.ind-%var1475X (_ BitVec 32)) )(let (($x53 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1475X)))
 (let (($x33 (input.spec-%var-x-1.0.1 input.ind-%var1475X)))
 (= $x33 $x53))))
 ))
 (let (($x62 (and $x157 $x175)))
 (let (($x255 (= $x62 true)))
 (let (($x265 (forall ((input.ind-%var1470X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1470X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x228))))
 (let ((?x77 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1470X)))
 (let (($x53 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1470X)))
 (=> $x53 (= ?x77 ?x41))))))))
 ))
 (let (($x318 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let (($x311 (and (bvule (_ bv0 32) input.ind-%var1469X) (bvult input.ind-%var1469X input.dst.llvm-%n))))
 (let (($x53 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1469X)))
 (= $x53 $x311))))
 ))
 (let (($x176 (and $x318 $x265)))
 (let (($x293 (= $x176 true)))
 (let (($x312 (forall ((input.ind-%var1464X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1464X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x228))))
 (let ((?x181 (input.spec-%var-x-1.1.1 input.ind-%var1464X)))
 (let (($x33 (input.spec-%var-x-1.0.1 input.ind-%var1464X)))
 (=> $x33 (= ?x181 ?x41))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1463X (_ BitVec 32)) )(let (($x311 (and (bvule (_ bv0 32) input.ind-%var1463X) (bvult input.ind-%var1463X input.dst.llvm-%n))))
 (let (($x33 (input.spec-%var-x-1.0.1 input.ind-%var1463X)))
 (= $x33 $x311))))
 ))
 (let (($x99 (and $x284 $x312)))
 (let (($x244 (= $x99 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x198)))
 (let (($x271 (= ?x121 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x309 (= $x271 true)))
 (let (($x302 (= $x309 true)))
 (let (($x23 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x30 (= $x23 true)))
 (let (($x222 (= $x30 true)))
 (let (($x231 (= $x222 true)))
 (let (($x110 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x297 (= $x110 true)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x238)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x264)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x304 (and $x180 $x90)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (and $x119 $x304)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x200 $x261)))
 (let (($x289 (not $x48)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (and $x75 $x237)))
 (let (($x214 (and (not $x317) $x289)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x290 $x250)))
 (let (($x39 (not $x158)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x256 $x300)))
 (let (($x259 (and (not $x223) $x39)))
 (let (($x319 (and (and (and (and (and (and $x259 $x214) $x202) $x230) $x219) $x282) $x149)))
 (let (($x134 (and $x319 $x70)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x296 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x320 (or false (or false (and (and true (or $x105 $x296)) (or $x165 $x277))))))
 (let (($x253 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x320)))
 (let (($x142 (and $x253 $x134)))
 (let (($x153 (= $x142 true)))
 (let (($x68 (= $x153 true)))
 (let (($x243 (= $x68 true)))
 (let ((?x155 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x78 (= (_ bv0 2) ?x155)))
 (let (($x36 (= $x78 true)))
 (let (($x229 (= $x36 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x186 (bvsub ?x72 ?x50)))
 (let (($x168 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x186) (bvult ?x72 ?x186))))
 (let (($x84 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x115 (ite $x84 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x49 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvmul (_ bv4 64) ?x49)))
 (let ((?x126 ((_ extract 63 32) ?x46)))
 (let (($x74 (= ?x126 ?x115)))
 (let (($x51 (and $x74 $x168)))
 (let (($x25 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x185 (and $x25 $x51)))
 (let (($x236 (= true $x185)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (=> $x172 $x236)))
 (let (($x254 (= $x35 true)))
 (let (($x57 (= $x254 true)))
 (let (($x171 (= $x57 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x120 (= $x201 true)))
 (let (($x235 (= $x120 true)))
 (let (($x20 (= $x235 true)))
 (let (($x104 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x114 (= $x104 true)))
 (let (($x164 (= $x114 true)))
 (let (($x141 (= $x164 true)))
 (let (($x22 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x122 (= $x22 true)))
 (let (($x40 (= $x122 true)))
 (let (($x81 (= $x40 true)))
 (let ((?x71 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x71)))
 (let (($x210 (= ?x225 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x217 (= $x210 true)))
 (let (($x167 (= $x217 true)))
 (let (($x86 (= $x172 true)))
 (let (($x207 (= $x86 true)))
 (let (($x159 (= $x207 true)))
 (let (($x154 (and $x159 $x167)))
 (let (($x232 (and $x154 $x81)))
 (let (($x59 (and $x232 $x141)))
 (let (($x73 (and $x59 $x20)))
 (let (($x246 (and $x73 $x171)))
 (let (($x137 (and $x246 $x229)))
 (let (($x19 (and $x137 $x243)))
 (let (($x298 (and $x19 $x305)))
 (let (($x45 (and $x298 $x231)))
 (let (($x316 (and $x45 $x302)))
 (let (($x295 (and $x316 $x244)))
 (let (($x307 (and $x295 $x293)))
 (let (($x52 (and $x307 $x255)))
 (let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x161 (ite $x182 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x161 (_ bv1 32))))
 (let (($x138 (and $x9 $x52)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x148 (and $x144 $x138)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x192 (and $x15 $x148)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x85 (and $x220 $x192)))
 (let (($x204 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd ?x72 (_ bv3 32))))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x170 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x132 (or false (or false (and (and true (or $x24 $x170)) (or $x233 $x204))))))
 (let (($x203 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x132)))
 (let (($x160 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x132)))
 (let (($x38 (and $x160 $x85)))
 (let (($x191 (=> $x38 $x314)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x92 (bvsge ?x103 (_ bv0 32))))
 (let (($x285 (= $x92 true)))
 (let (($x239 (= $x285 true)))
 (let (($x80 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1499X)))
 (let ((?x41 (input.spec-%var-x-1.1.1 input.ind-%var1499X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var1499X)))
 (=> $x181 (= ?x41 ?x131))))))
 ))
 (let (($x269 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x9 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1498X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var1498X)))
 (= $x181 $x9))))
 ))
 (let (($x240 (and $x269 $x80)))
 (let (($x190 (= $x240 true)))
 (let (($x63 (forall ((input.ind-%var1493X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var1493X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x255))))
 (let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1493X)))
 (let (($x9 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1493X)))
 (=> $x9 (= ?x131 ?x38))))))))
 ))
 (let (($x116 (forall ((input.ind-%var1492X (_ BitVec 32)) )(let (($x274 (and (bvule (_ bv0 32) input.ind-%var1492X) (bvult input.ind-%var1492X input.dst.llvm-%n))))
 (let (($x9 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1492X)))
 (= $x9 $x274))))
 ))
 (let (($x43 (and $x116 $x63)))
 (let (($x242 (= $x43 true)))
 (let (($x205 (forall ((input.ind-%var1487X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var1487X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x255))))
 (let ((?x41 (input.spec-%var-x-1.1.1 input.ind-%var1487X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var1487X)))
 (=> $x181 (= ?x41 ?x38))))))))
 ))
 (let (($x65 (forall ((input.ind-%var1486X (_ BitVec 32)) )(let (($x274 (and (bvule (_ bv0 32) input.ind-%var1486X) (bvult input.ind-%var1486X input.dst.llvm-%n))))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var1486X)))
 (= $x181 $x274))))
 ))
 (let (($x314 (and $x65 $x205)))
 (let (($x191 (= $x314 true)))
 (let ((?x316 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x316)))
 (let (($x33 (= ?x151 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x33 true)))
 (let (($x130 (= $x213 true)))
 (let (($x198 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x121 (= $x198 true)))
 (let (($x271 (= $x121 true)))
 (let (($x309 (= $x271 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x30 (= $x23 true)))
 (let (($x222 (= $x30 true)))
 (let (($x231 (= $x222 true)))
 (let ((?x319 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x319)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x264)))
 (let ((?x282 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x282)))
 (let ((?x304 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x304)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (and $x90 $x219)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x79 $x241)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x214 $x91)))
 (let (($x202 (not $x287)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x289 (and $x261 $x48)))
 (let (($x315 (and (not $x289) $x202)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x259 $x75)))
 (let (($x317 (not $x237)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x296 $x47)))
 (let (($x200 (and (not $x39) $x317)))
 (let (($x243 (and (and (and (and (and (and $x200 $x315) $x147) $x180) $x60) $x64) $x149)))
 (let (($x19 (and $x243 $x238)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x277 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x277)))
 (let (($x290 (or false (or false (and (and true (or $x218 $x11)) (or $x253 $x256))))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x290)))
 (let (($x110 (and $x158 $x19)))
 (let (($x297 (= $x110 true)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let ((?x137 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x215 (= (_ bv0 2) ?x137)))
 (let (($x294 (= $x215 true)))
 (let (($x178 (= $x294 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x168 (bvsub ?x72 ?x50)))
 (let (($x35 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x168) (bvult ?x72 ?x168))))
 (let (($x186 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x221 (ite $x186 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x115 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x74 (bvmul (_ bv4 64) ?x115)))
 (let ((?x44 ((_ extract 63 32) ?x74)))
 (let (($x5 (= ?x44 ?x221)))
 (let (($x254 (and $x5 $x35)))
 (let (($x126 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x57 (and $x126 $x254)))
 (let (($x171 (= true $x57)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x246 (=> $x172 $x171)))
 (let (($x299 (= $x246 true)))
 (let (($x155 (= $x299 true)))
 (let (($x78 (= $x155 true)))
 (let (($x73 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x272 (= $x73 true)))
 (let (($x124 (= $x272 true)))
 (let (($x25 (= $x124 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x273 (= $x59 true)))
 (let (($x201 (= $x273 true)))
 (let (($x120 (= $x201 true)))
 (let (($x232 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (= $x232 true)))
 (let (($x114 (= $x104 true)))
 (let (($x164 (= $x114 true)))
 (let ((?x217 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x217)))
 (let (($x22 (= ?x167 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x22 true)))
 (let (($x40 (= $x122 true)))
 (let (($x13 (= $x172 true)))
 (let (($x71 (= $x13 true)))
 (let (($x225 (= $x71 true)))
 (let (($x81 (and $x225 $x40)))
 (let (($x141 (and $x81 $x164)))
 (let (($x235 (and $x141 $x120)))
 (let (($x139 (and $x235 $x25)))
 (let (($x36 (and $x139 $x78)))
 (let (($x267 (and $x36 $x178)))
 (let (($x298 (and $x267 $x305)))
 (let (($x45 (and $x298 $x231)))
 (let (($x302 (and $x45 $x309)))
 (let (($x311 (and $x302 $x130)))
 (let (($x288 (and $x311 $x191)))
 (let (($x310 (and $x288 $x242)))
 (let (($x32 (and $x310 $x190)))
 (let (($x207 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x159 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x159 (_ bv1 32))))
 (let (($x211 (and $x146 $x32)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x26 $x211)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x89 (and $x76 $x196)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x286 (and $x34 $x89)))
 (let (($x7 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd ?x72 (_ bv3 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x188 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x160 (or false (or false (and (and true (or $x136 $x188)) (or $x169 $x7))))))
 (let (($x220 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x160)))
 (let (($x96 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x160)))
 (let (($x133 (and $x96 $x286)))
 (let (($x88 (=> $x133 $x239)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x92 (bvsge ?x103 (_ bv0 32))))
 (let (($x285 (= $x92 true)))
 (let (($x239 (= $x285 true)))
 (let (($x80 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1499X)))
 (let ((?x41 (input.spec-%var-x-1.1.1 input.ind-%var1499X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var1499X)))
 (=> $x181 (= ?x41 ?x131))))))
 ))
 (let (($x269 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x9 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1498X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var1498X)))
 (= $x181 $x9))))
 ))
 (let (($x240 (and $x269 $x80)))
 (let (($x190 (= $x240 true)))
 (let (($x63 (forall ((input.ind-%var1493X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var1493X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x255))))
 (let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1493X)))
 (let (($x9 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1493X)))
 (=> $x9 (= ?x131 ?x38))))))))
 ))
 (let (($x116 (forall ((input.ind-%var1492X (_ BitVec 32)) )(let (($x274 (and (bvule (_ bv0 32) input.ind-%var1492X) (bvult input.ind-%var1492X input.dst.llvm-%n))))
 (let (($x9 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1492X)))
 (= $x9 $x274))))
 ))
 (let (($x43 (and $x116 $x63)))
 (let (($x242 (= $x43 true)))
 (let (($x205 (forall ((input.ind-%var1487X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var1487X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x255))))
 (let ((?x41 (input.spec-%var-x-1.1.1 input.ind-%var1487X)))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var1487X)))
 (=> $x181 (= ?x41 ?x38))))))))
 ))
 (let (($x65 (forall ((input.ind-%var1486X (_ BitVec 32)) )(let (($x274 (and (bvule (_ bv0 32) input.ind-%var1486X) (bvult input.ind-%var1486X input.dst.llvm-%n))))
 (let (($x181 (input.spec-%var-x-1.0.1 input.ind-%var1486X)))
 (= $x181 $x274))))
 ))
 (let (($x314 (and $x65 $x205)))
 (let (($x191 (= $x314 true)))
 (let ((?x316 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x316)))
 (let (($x33 (= ?x151 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x33 true)))
 (let (($x130 (= $x213 true)))
 (let (($x198 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x121 (= $x198 true)))
 (let (($x271 (= $x121 true)))
 (let (($x309 (= $x271 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x30 (= $x23 true)))
 (let (($x222 (= $x30 true)))
 (let (($x231 (= $x222 true)))
 (let ((?x319 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x319)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x264)))
 (let ((?x282 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x282)))
 (let ((?x304 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x304)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (and $x90 $x219)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x79 $x241)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x214 $x91)))
 (let (($x202 (not $x287)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x289 (and $x261 $x48)))
 (let (($x315 (and (not $x289) $x202)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x259 $x75)))
 (let (($x317 (not $x237)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x296 $x47)))
 (let (($x200 (and (not $x39) $x317)))
 (let (($x243 (and (and (and (and (and (and $x200 $x315) $x147) $x180) $x60) $x64) $x149)))
 (let (($x19 (and $x243 $x238)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x277 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x277)))
 (let (($x290 (or false (or false (and (and true (or $x218 $x11)) (or $x253 $x256))))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x290)))
 (let (($x110 (and $x158 $x19)))
 (let (($x297 (= $x110 true)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let ((?x137 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x215 (= (_ bv0 2) ?x137)))
 (let (($x294 (= $x215 true)))
 (let (($x178 (= $x294 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x168 (bvsub ?x72 ?x50)))
 (let (($x35 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x168) (bvult ?x72 ?x168))))
 (let (($x186 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x221 (ite $x186 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x115 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x74 (bvmul (_ bv4 64) ?x115)))
 (let ((?x44 ((_ extract 63 32) ?x74)))
 (let (($x5 (= ?x44 ?x221)))
 (let (($x254 (and $x5 $x35)))
 (let (($x126 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x57 (and $x126 $x254)))
 (let (($x171 (= true $x57)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x246 (=> $x172 $x171)))
 (let (($x299 (= $x246 true)))
 (let (($x155 (= $x299 true)))
 (let (($x78 (= $x155 true)))
 (let (($x73 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x272 (= $x73 true)))
 (let (($x124 (= $x272 true)))
 (let (($x25 (= $x124 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x273 (= $x59 true)))
 (let (($x201 (= $x273 true)))
 (let (($x120 (= $x201 true)))
 (let (($x232 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (= $x232 true)))
 (let (($x114 (= $x104 true)))
 (let (($x164 (= $x114 true)))
 (let ((?x217 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x217)))
 (let (($x22 (= ?x167 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x22 true)))
 (let (($x40 (= $x122 true)))
 (let (($x13 (= $x172 true)))
 (let (($x71 (= $x13 true)))
 (let (($x225 (= $x71 true)))
 (let (($x81 (and $x225 $x40)))
 (let (($x141 (and $x81 $x164)))
 (let (($x235 (and $x141 $x120)))
 (let (($x139 (and $x235 $x25)))
 (let (($x36 (and $x139 $x78)))
 (let (($x267 (and $x36 $x178)))
 (let (($x298 (and $x267 $x305)))
 (let (($x45 (and $x298 $x231)))
 (let (($x302 (and $x45 $x309)))
 (let (($x311 (and $x302 $x130)))
 (let (($x288 (and $x311 $x191)))
 (let (($x310 (and $x288 $x242)))
 (let (($x32 (and $x310 $x190)))
 (let (($x207 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x159 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x159 (_ bv1 32))))
 (let (($x211 (and $x146 $x32)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x26 $x211)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x89 (and $x76 $x196)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x286 (and $x34 $x89)))
 (let (($x7 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd ?x72 (_ bv3 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x188 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x160 (or false (or false (and (and true (or $x136 $x188)) (or $x169 $x7))))))
 (let (($x220 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x160)))
 (let (($x96 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x160)))
 (let (($x133 (and $x96 $x286)))
 (let (($x88 (=> $x133 $x239)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x227 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (bvule ?x227 (_ bv4294967294 32))))
 (let (($x18 (= $x301 true)))
 (let (($x177 (= $x18 true)))
 (let (($x193 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let ((?x312 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1522X)))
 (let ((?x38 (input.spec-%var-x-1.1.1 input.ind-%var1522X)))
 (let (($x41 (input.spec-%var-x-1.0.1 input.ind-%var1522X)))
 (=> $x41 (= ?x38 ?x312))))))
 ))
 (let (($x252 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1521X)))
 (let (($x41 (input.spec-%var-x-1.0.1 input.ind-%var1521X)))
 (= $x41 $x146))))
 ))
 (let (($x184 (and $x252 $x193)))
 (let (($x307 (= $x184 true)))
 (let (($x284 (forall ((input.ind-%var1516X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var1516X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x190))))
 (let ((?x312 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1516X)))
 (let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1516X)))
 (=> $x146 (= ?x312 ?x133))))))))
 ))
 (let (($x127 (forall ((input.ind-%var1515X (_ BitVec 32)) )(let (($x138 (and (bvule (_ bv0 32) input.ind-%var1515X) (bvult input.ind-%var1515X input.dst.llvm-%n))))
 (let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1515X)))
 (= $x146 $x138))))
 ))
 (let (($x100 (and $x127 $x284)))
 (let (($x107 (= $x100 true)))
 (let (($x285 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var1510X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x190))))
 (let ((?x38 (input.spec-%var-x-1.1.1 input.ind-%var1510X)))
 (let (($x41 (input.spec-%var-x-1.0.1 input.ind-%var1510X)))
 (=> $x41 (= ?x38 ?x133))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let (($x138 (and (bvule (_ bv0 32) input.ind-%var1509X) (bvult input.ind-%var1509X input.dst.llvm-%n))))
 (let (($x41 (input.spec-%var-x-1.0.1 input.ind-%var1509X)))
 (= $x41 $x138))))
 ))
 (let (($x239 (and $x62 $x285)))
 (let (($x88 (= $x239 true)))
 (let ((?x311 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x311)))
 (let (($x181 (= ?x161 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x181 true)))
 (let (($x266 (= $x292 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x222 (bvsub ?x72 ?x50)))
 (let (($x121 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x222) (bvult ?x72 ?x222))))
 (let (($x298 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x23 (ite $x298 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x297 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x303 (bvmul (_ bv4 64) ?x297)))
 (let ((?x305 ((_ extract 63 32) ?x303)))
 (let (($x30 (= ?x305 ?x23)))
 (let (($x271 (and $x30 $x121)))
 (let (($x19 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x309 (and $x19 $x271)))
 (let (($x302 (= true $x309)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x316 (=> $x172 $x302)))
 (let (($x151 (= $x316 true)))
 (let (($x33 (= $x151 true)))
 (let (($x213 (= $x33 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x241 (= $x219 true)))
 (let (($x60 (= $x241 true)))
 (let (($x153 (= $x60 true)))
 (let (($x180 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x142 (= $x180 true)))
 (let (($x79 (= $x142 true)))
 (let (($x90 (= $x79 true)))
 (let (($x230 (= $x172 true)))
 (let (($x147 (= $x230 true)))
 (let (($x134 (= $x147 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x75)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x280)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x118)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x223 $x290)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x300 $x158)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x143 $x165)))
 (let (($x277 (not $x250)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x294 $x178)))
 (let (($x11 (and (not $x267) $x277)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x155 $x78)))
 (let (($x229 (not $x36)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x126 $x84)))
 (let (($x215 (and (not $x299) $x229)))
 (let (($x101 (and (and (and (and (and (and $x215 $x11) $x320) $x256) $x296) $x39) $x259)))
 (let (($x214 (and $x101 $x237)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x57 (or false (or false (and (and true (or $x186 $x221)) (or $x168 $x185))))))
 (let (($x246 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x91 (and $x246 $x214)))
 (let (($x287 (= $x91 true)))
 (let (($x202 (= $x287 true)))
 (let (($x315 (= $x202 true)))
 (let (($x272 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x124 (= $x272 true)))
 (let (($x25 (= $x124 true)))
 (let (($x139 (= $x25 true)))
 (let ((?x201 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x120 (= (_ bv0 2) ?x201)))
 (let (($x235 (= $x120 true)))
 (let (($x20 (= $x235 true)))
 (let (($x104 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x114 (= $x104 true)))
 (let (($x164 (= $x114 true)))
 (let (($x141 (= $x164 true)))
 (let ((?x167 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x167)))
 (let (($x122 (= ?x154 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x122 true)))
 (let (($x81 (= $x40 true)))
 (let (($x59 (and $x81 $x141)))
 (let (($x73 (and $x59 $x20)))
 (let (($x49 (and $x73 $x139)))
 (let (($x70 (and $x49 $x315)))
 (let (($x119 (and $x70 $x134)))
 (let (($x304 (and $x119 $x90)))
 (let (($x282 (and $x304 $x153)))
 (let (($x243 (and $x282 $x149)))
 (let (($x130 (and $x243 $x213)))
 (let (($x274 (and $x130 $x266)))
 (let (($x195 (and $x274 $x88)))
 (let (($x152 (and $x195 $x107)))
 (let (($x249 (and $x152 $x307)))
 (let (($x71 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x225 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x225 (_ bv1 32))))
 (let (($x208 (and $x125 $x249)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x228 (and $x182 $x208)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x257 (and $x144 $x228)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x306 (and $x129 $x257)))
 (let (($x132 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd ?x72 (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x233 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x96 (or false (or false (and (and true (or $x97 $x233)) (or $x31 $x132))))))
 (let (($x34 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x96)))
 (let (($x94 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x96)))
 (let (($x117 (and $x94 $x306)))
 (let (($x251 (=> $x117 $x177)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x227 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (bvule ?x227 (_ bv4294967294 32))))
 (let (($x18 (= $x301 true)))
 (let (($x177 (= $x18 true)))
 (let (($x193 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let ((?x312 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1522X)))
 (let ((?x38 (input.spec-%var-x-1.1.1 input.ind-%var1522X)))
 (let (($x41 (input.spec-%var-x-1.0.1 input.ind-%var1522X)))
 (=> $x41 (= ?x38 ?x312))))))
 ))
 (let (($x252 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1521X)))
 (let (($x41 (input.spec-%var-x-1.0.1 input.ind-%var1521X)))
 (= $x41 $x146))))
 ))
 (let (($x184 (and $x252 $x193)))
 (let (($x307 (= $x184 true)))
 (let (($x284 (forall ((input.ind-%var1516X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var1516X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x190))))
 (let ((?x312 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1516X)))
 (let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1516X)))
 (=> $x146 (= ?x312 ?x133))))))))
 ))
 (let (($x127 (forall ((input.ind-%var1515X (_ BitVec 32)) )(let (($x138 (and (bvule (_ bv0 32) input.ind-%var1515X) (bvult input.ind-%var1515X input.dst.llvm-%n))))
 (let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1515X)))
 (= $x146 $x138))))
 ))
 (let (($x100 (and $x127 $x284)))
 (let (($x107 (= $x100 true)))
 (let (($x285 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var1510X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x190))))
 (let ((?x38 (input.spec-%var-x-1.1.1 input.ind-%var1510X)))
 (let (($x41 (input.spec-%var-x-1.0.1 input.ind-%var1510X)))
 (=> $x41 (= ?x38 ?x133))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let (($x138 (and (bvule (_ bv0 32) input.ind-%var1509X) (bvult input.ind-%var1509X input.dst.llvm-%n))))
 (let (($x41 (input.spec-%var-x-1.0.1 input.ind-%var1509X)))
 (= $x41 $x138))))
 ))
 (let (($x239 (and $x62 $x285)))
 (let (($x88 (= $x239 true)))
 (let ((?x311 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x311)))
 (let (($x181 (= ?x161 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x181 true)))
 (let (($x266 (= $x292 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x222 (bvsub ?x72 ?x50)))
 (let (($x121 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x222) (bvult ?x72 ?x222))))
 (let (($x298 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x23 (ite $x298 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x297 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x303 (bvmul (_ bv4 64) ?x297)))
 (let ((?x305 ((_ extract 63 32) ?x303)))
 (let (($x30 (= ?x305 ?x23)))
 (let (($x271 (and $x30 $x121)))
 (let (($x19 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x309 (and $x19 $x271)))
 (let (($x302 (= true $x309)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x316 (=> $x172 $x302)))
 (let (($x151 (= $x316 true)))
 (let (($x33 (= $x151 true)))
 (let (($x213 (= $x33 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x241 (= $x219 true)))
 (let (($x60 (= $x241 true)))
 (let (($x153 (= $x60 true)))
 (let (($x180 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x142 (= $x180 true)))
 (let (($x79 (= $x142 true)))
 (let (($x90 (= $x79 true)))
 (let (($x230 (= $x172 true)))
 (let (($x147 (= $x230 true)))
 (let (($x134 (= $x147 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x75)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x280)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x118)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x223 $x290)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x300 $x158)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x143 $x165)))
 (let (($x277 (not $x250)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x294 $x178)))
 (let (($x11 (and (not $x267) $x277)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x155 $x78)))
 (let (($x229 (not $x36)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x126 $x84)))
 (let (($x215 (and (not $x299) $x229)))
 (let (($x101 (and (and (and (and (and (and $x215 $x11) $x320) $x256) $x296) $x39) $x259)))
 (let (($x214 (and $x101 $x237)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x57 (or false (or false (and (and true (or $x186 $x221)) (or $x168 $x185))))))
 (let (($x246 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x91 (and $x246 $x214)))
 (let (($x287 (= $x91 true)))
 (let (($x202 (= $x287 true)))
 (let (($x315 (= $x202 true)))
 (let (($x272 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x124 (= $x272 true)))
 (let (($x25 (= $x124 true)))
 (let (($x139 (= $x25 true)))
 (let ((?x201 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x120 (= (_ bv0 2) ?x201)))
 (let (($x235 (= $x120 true)))
 (let (($x20 (= $x235 true)))
 (let (($x104 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x114 (= $x104 true)))
 (let (($x164 (= $x114 true)))
 (let (($x141 (= $x164 true)))
 (let ((?x167 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x167)))
 (let (($x122 (= ?x154 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x122 true)))
 (let (($x81 (= $x40 true)))
 (let (($x59 (and $x81 $x141)))
 (let (($x73 (and $x59 $x20)))
 (let (($x49 (and $x73 $x139)))
 (let (($x70 (and $x49 $x315)))
 (let (($x119 (and $x70 $x134)))
 (let (($x304 (and $x119 $x90)))
 (let (($x282 (and $x304 $x153)))
 (let (($x243 (and $x282 $x149)))
 (let (($x130 (and $x243 $x213)))
 (let (($x274 (and $x130 $x266)))
 (let (($x195 (and $x274 $x88)))
 (let (($x152 (and $x195 $x107)))
 (let (($x249 (and $x152 $x307)))
 (let (($x71 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x225 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x225 (_ bv1 32))))
 (let (($x208 (and $x125 $x249)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x228 (and $x182 $x208)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x257 (and $x144 $x228)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x306 (and $x129 $x257)))
 (let (($x132 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd ?x72 (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x233 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x96 (or false (or false (and (and true (or $x97 $x233)) (or $x31 $x132))))))
 (let (($x34 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x96)))
 (let (($x94 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x96)))
 (let (($x117 (and $x94 $x306)))
 (let (($x251 (=> $x117 $x177)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (bvsge ?x140 (_ bv0 32))))
 (let (($x66 (= $x87 true)))
 (let (($x16 (= $x66 true)))
 (let (($x105 (forall ((input.ind-%var1545X (_ BitVec 32)) )(let ((?x205 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1545X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var1545X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1545X)))
 (=> $x38 (= ?x133 ?x205))))))
 ))
 (let (($x77 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x125 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1544X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1544X)))
 (= $x38 $x125))))
 ))
 (let (($x313 (and $x77 $x105)))
 (let (($x310 (= $x313 true)))
 (let (($x65 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul input.ind-%var1539X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x307))))
 (let ((?x205 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1539X)))
 (let (($x125 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1539X)))
 (=> $x125 (= ?x205 ?x117))))))))
 ))
 (let (($x148 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x211 (and (bvule (_ bv0 32) input.ind-%var1538X) (bvult input.ind-%var1538X input.dst.llvm-%n))))
 (let (($x125 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1538X)))
 (= $x125 $x211))))
 ))
 (let (($x192 (and $x148 $x65)))
 (let (($x176 (= $x192 true)))
 (let (($x18 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul input.ind-%var1533X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x307))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var1533X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1533X)))
 (=> $x38 (= ?x133 ?x117))))))))
 ))
 (let (($x240 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x211 (and (bvule (_ bv0 32) input.ind-%var1532X) (bvult input.ind-%var1532X input.dst.llvm-%n))))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1532X)))
 (= $x38 $x211))))
 ))
 (let (($x177 (and $x240 $x18)))
 (let (($x251 (= $x177 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x274)))
 (let (($x41 (= ?x159 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x41 true)))
 (let (($x318 (= $x52 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x271 (bvsub ?x72 ?x50)))
 (let (($x151 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x271) (bvult ?x72 ?x271))))
 (let (($x45 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x198 (ite $x45 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x30 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvmul (_ bv4 64) ?x30)))
 (let ((?x222 ((_ extract 63 32) ?x231)))
 (let (($x121 (= ?x222 ?x198)))
 (let (($x33 (and $x121 $x151)))
 (let (($x298 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x213 (and $x298 $x33)))
 (let (($x130 (= true $x213)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x311 (=> $x172 $x130)))
 (let (($x161 (= $x311 true)))
 (let (($x181 (= $x161 true)))
 (let (($x292 (= $x181 true)))
 (let (($x319 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x238 (= $x319 true)))
 (let (($x19 (= $x238 true)))
 (let (($x110 (= $x19 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x219 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x219 true)))
 (let (($x60 (= $x241 true)))
 (let (($x153 (= $x60 true)))
 (let (($x142 (= $x172 true)))
 (let (($x79 (= $x142 true)))
 (let (($x90 (= $x79 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x101)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x280)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x158)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (and $x290 $x296)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x118 $x48)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x11 $x317)))
 (let (($x320 (not $x248)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x165 $x250)))
 (let (($x253 (and (not $x277) $x320)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x215 $x294)))
 (let (($x267 (not $x178)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x221 $x5)))
 (let (($x143 (and (not $x229) $x267)))
 (let (($x315 (and (and (and (and (and (and $x143 $x253) $x261) $x223) $x47) $x289) $x259)))
 (let (($x70 (and $x315 $x75)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x155 (or false (or false (and (and true (or $x236 $x35)) (or $x246 $x126))))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x230 (and $x36 $x70)))
 (let (($x147 (= $x230 true)))
 (let (($x134 (= $x147 true)))
 (let (($x119 (= $x134 true)))
 (let (($x49 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x115 (= $x49 true)))
 (let (($x74 (= $x115 true)))
 (let (($x171 (= $x74 true)))
 (let ((?x73 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x272 (= (_ bv0 2) ?x73)))
 (let (($x124 (= $x272 true)))
 (let (($x25 (= $x124 true)))
 (let (($x59 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x273 (= $x59 true)))
 (let (($x201 (= $x273 true)))
 (let (($x120 (= $x201 true)))
 (let ((?x40 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x40)))
 (let (($x104 (= ?x81 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x104 true)))
 (let (($x164 (= $x114 true)))
 (let (($x235 (and $x164 $x120)))
 (let (($x139 (and $x235 $x25)))
 (let (($x44 (and $x139 $x171)))
 (let (($x180 (and $x44 $x119)))
 (let (($x304 (and $x180 $x90)))
 (let (($x282 (and $x304 $x153)))
 (let (($x243 (and $x282 $x149)))
 (let (($x297 (and $x243 $x110)))
 (let (($x266 (and $x297 $x292)))
 (let (($x138 (and $x266 $x318)))
 (let (($x199 (and $x138 $x251)))
 (let (($x293 (and $x199 $x176)))
 (let (($x206 (and $x293 $x310)))
 (let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x167 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x167 (_ bv1 32))))
 (let (($x194 (and $x154 $x206)))
 (let (($x207 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x255 (and $x207 $x194)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x270 (and $x26 $x255)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x12 (and $x15 $x270)))
 (let (($x160 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x233 (bvadd ?x72 (_ bv3 32))))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x169 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x233)))
 (let (($x94 (or false (or false (and (and true (or $x61 $x169)) (or $x203 $x160))))))
 (let (($x129 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x94)))
 (let (($x162 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x94)))
 (let (($x82 (and $x162 $x12)))
 (let (($x281 (=> $x82 $x16)))
 (not $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (bvsge ?x140 (_ bv0 32))))
 (let (($x66 (= $x87 true)))
 (let (($x16 (= $x66 true)))
 (let (($x105 (forall ((input.ind-%var1545X (_ BitVec 32)) )(let ((?x205 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1545X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var1545X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1545X)))
 (=> $x38 (= ?x133 ?x205))))))
 ))
 (let (($x77 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x125 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1544X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1544X)))
 (= $x38 $x125))))
 ))
 (let (($x313 (and $x77 $x105)))
 (let (($x310 (= $x313 true)))
 (let (($x65 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul input.ind-%var1539X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x307))))
 (let ((?x205 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1539X)))
 (let (($x125 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1539X)))
 (=> $x125 (= ?x205 ?x117))))))))
 ))
 (let (($x148 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x211 (and (bvule (_ bv0 32) input.ind-%var1538X) (bvult input.ind-%var1538X input.dst.llvm-%n))))
 (let (($x125 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1538X)))
 (= $x125 $x211))))
 ))
 (let (($x192 (and $x148 $x65)))
 (let (($x176 (= $x192 true)))
 (let (($x18 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul input.ind-%var1533X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x307))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var1533X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1533X)))
 (=> $x38 (= ?x133 ?x117))))))))
 ))
 (let (($x240 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x211 (and (bvule (_ bv0 32) input.ind-%var1532X) (bvult input.ind-%var1532X input.dst.llvm-%n))))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1532X)))
 (= $x38 $x211))))
 ))
 (let (($x177 (and $x240 $x18)))
 (let (($x251 (= $x177 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x274)))
 (let (($x41 (= ?x159 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x41 true)))
 (let (($x318 (= $x52 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x271 (bvsub ?x72 ?x50)))
 (let (($x151 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x271) (bvult ?x72 ?x271))))
 (let (($x45 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x198 (ite $x45 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x30 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvmul (_ bv4 64) ?x30)))
 (let ((?x222 ((_ extract 63 32) ?x231)))
 (let (($x121 (= ?x222 ?x198)))
 (let (($x33 (and $x121 $x151)))
 (let (($x298 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x213 (and $x298 $x33)))
 (let (($x130 (= true $x213)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x311 (=> $x172 $x130)))
 (let (($x161 (= $x311 true)))
 (let (($x181 (= $x161 true)))
 (let (($x292 (= $x181 true)))
 (let (($x319 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x238 (= $x319 true)))
 (let (($x19 (= $x238 true)))
 (let (($x110 (= $x19 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x219 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x219 true)))
 (let (($x60 (= $x241 true)))
 (let (($x153 (= $x60 true)))
 (let (($x142 (= $x172 true)))
 (let (($x79 (= $x142 true)))
 (let (($x90 (= $x79 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x101)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x280)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x158)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (and $x290 $x296)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x118 $x48)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x11 $x317)))
 (let (($x320 (not $x248)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x165 $x250)))
 (let (($x253 (and (not $x277) $x320)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x215 $x294)))
 (let (($x267 (not $x178)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x221 $x5)))
 (let (($x143 (and (not $x229) $x267)))
 (let (($x315 (and (and (and (and (and (and $x143 $x253) $x261) $x223) $x47) $x289) $x259)))
 (let (($x70 (and $x315 $x75)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x155 (or false (or false (and (and true (or $x236 $x35)) (or $x246 $x126))))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x230 (and $x36 $x70)))
 (let (($x147 (= $x230 true)))
 (let (($x134 (= $x147 true)))
 (let (($x119 (= $x134 true)))
 (let (($x49 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x115 (= $x49 true)))
 (let (($x74 (= $x115 true)))
 (let (($x171 (= $x74 true)))
 (let ((?x73 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x272 (= (_ bv0 2) ?x73)))
 (let (($x124 (= $x272 true)))
 (let (($x25 (= $x124 true)))
 (let (($x59 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x273 (= $x59 true)))
 (let (($x201 (= $x273 true)))
 (let (($x120 (= $x201 true)))
 (let ((?x40 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x40)))
 (let (($x104 (= ?x81 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x104 true)))
 (let (($x164 (= $x114 true)))
 (let (($x235 (and $x164 $x120)))
 (let (($x139 (and $x235 $x25)))
 (let (($x44 (and $x139 $x171)))
 (let (($x180 (and $x44 $x119)))
 (let (($x304 (and $x180 $x90)))
 (let (($x282 (and $x304 $x153)))
 (let (($x243 (and $x282 $x149)))
 (let (($x297 (and $x243 $x110)))
 (let (($x266 (and $x297 $x292)))
 (let (($x138 (and $x266 $x318)))
 (let (($x199 (and $x138 $x251)))
 (let (($x293 (and $x199 $x176)))
 (let (($x206 (and $x293 $x310)))
 (let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x167 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x167 (_ bv1 32))))
 (let (($x194 (and $x154 $x206)))
 (let (($x207 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x255 (and $x207 $x194)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x270 (and $x26 $x255)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x12 (and $x15 $x270)))
 (let (($x160 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x233 (bvadd ?x72 (_ bv3 32))))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x169 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x233)))
 (let (($x94 (or false (or false (and (and true (or $x61 $x169)) (or $x203 $x160))))))
 (let (($x129 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x94)))
 (let (($x162 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x94)))
 (let (($x82 (and $x162 $x12)))
 (let (($x281 (=> $x82 $x16)))
 (not $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (bvule ?x157 input.dst.llvm-%n)))
 (let (($x262 (= $x86 true)))
 (let (($x37 (= $x262 true)))
 (let (($x46 (forall ((input.ind-%var1568X (_ BitVec 32)) )(let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1568X)))
 (let ((?x117 (input.spec-%var-x-1.1.1 input.ind-%var1568X)))
 (let (($x133 (input.spec-%var-x-1.0.1 input.ind-%var1568X)))
 (=> $x133 (= ?x117 ?x285))))))
 ))
 (let (($x131 (forall ((input.ind-%var1567X (_ BitVec 32)) )(let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1567X)))
 (let (($x133 (input.spec-%var-x-1.0.1 input.ind-%var1567X)))
 (= $x133 $x154))))
 ))
 (let (($x166 (and $x131 $x46)))
 (let (($x152 (= $x166 true)))
 (let (($x62 (forall ((input.ind-%var1562X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1562X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x310))))
 (let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1562X)))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1562X)))
 (=> $x154 (= ?x285 ?x82))))))))
 ))
 (let (($x196 (forall ((input.ind-%var1561X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var1561X) (bvult input.ind-%var1561X input.dst.llvm-%n))))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1561X)))
 (= $x154 $x208))))
 ))
 (let (($x89 (and $x196 $x62)))
 (let (($x43 (= $x89 true)))
 (let (($x66 (forall ((input.ind-%var1556X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1556X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x310))))
 (let ((?x117 (input.spec-%var-x-1.1.1 input.ind-%var1556X)))
 (let (($x133 (input.spec-%var-x-1.0.1 input.ind-%var1556X)))
 (=> $x133 (= ?x117 ?x82))))))))
 ))
 (let (($x184 (forall ((input.ind-%var1555X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var1555X) (bvult input.ind-%var1555X input.dst.llvm-%n))))
 (let (($x133 (input.spec-%var-x-1.0.1 input.ind-%var1555X)))
 (= $x133 $x208))))
 ))
 (let (($x16 (and $x184 $x66)))
 (let (($x281 (= $x16 true)))
 (let ((?x138 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x138)))
 (let (($x38 (= ?x225 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x32 (= $x38 true)))
 (let (($x116 (= $x32 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x33 (bvsub ?x72 ?x50)))
 (let (($x161 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x33) (bvult ?x72 ?x33))))
 (let (($x302 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x316 (ite $x302 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x121 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x309 (bvmul (_ bv4 64) ?x121)))
 (let ((?x271 ((_ extract 63 32) ?x309)))
 (let (($x151 (= ?x271 ?x316)))
 (let (($x181 (and $x151 $x161)))
 (let (($x45 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x292 (and $x45 $x181)))
 (let (($x266 (= true $x292)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x274 (=> $x172 $x266)))
 (let (($x159 (= $x274 true)))
 (let (($x41 (= $x159 true)))
 (let (($x52 (= $x41 true)))
 (let (($x303 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x305 (= $x303 true)))
 (let (($x298 (= $x305 true)))
 (let (($x23 (= $x298 true)))
 (let (($x319 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (= $x319 true)))
 (let (($x19 (= $x238 true)))
 (let (($x110 (= $x19 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x241 (= $x172 true)))
 (let (($x60 (= $x241 true)))
 (let (($x153 (= $x60 true)))
 (let ((?x315 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x315)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x280)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (and $x296 $x47)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x158 $x287)))
 (let (($x290 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x253 $x237)))
 (let (($x261 (not $x256)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x320 (and $x317 $x248)))
 (let (($x300 (and (not $x320) $x261)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x143 $x165)))
 (let (($x277 (not $x250)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x35 $x254)))
 (let (($x11 (and (not $x267) $x277)))
 (let (($x119 (and (and (and (and (and (and $x11 $x300) $x91) $x290) $x39) $x202) $x259)))
 (let (($x180 (and $x119 $x101)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x299 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x215 (or false (or false (and (and true (or $x84 $x299)) (or $x36 $x221))))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x142 (and $x178 $x180)))
 (let (($x79 (= $x142 true)))
 (let (($x90 (= $x79 true)))
 (let (($x304 (= $x90 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x44 true)))
 (let (($x168 (= $x51 true)))
 (let (($x78 (= $x168 true)))
 (let ((?x139 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x49 (= (_ bv0 2) ?x139)))
 (let (($x115 (= $x49 true)))
 (let (($x74 (= $x115 true)))
 (let (($x235 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x20 (= $x235 true)))
 (let (($x73 (= $x20 true)))
 (let (($x272 (= $x73 true)))
 (let ((?x114 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x114)))
 (let (($x59 (= ?x164 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x59 true)))
 (let (($x201 (= $x273 true)))
 (let (($x124 (and $x201 $x272)))
 (let (($x171 (and $x124 $x74)))
 (let (($x185 (and $x171 $x78)))
 (let (($x219 (and $x185 $x304)))
 (let (($x282 (and $x219 $x153)))
 (let (($x243 (and $x282 $x149)))
 (let (($x297 (and $x243 $x110)))
 (let (($x30 (and $x297 $x23)))
 (let (($x318 (and $x30 $x52)))
 (let (($x211 (and $x318 $x116)))
 (let (($x212 (and $x211 $x281)))
 (let (($x242 (and $x212 $x43)))
 (let (($x244 (and $x242 $x152)))
 (let (($x122 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x40 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x40 (_ bv1 32))))
 (let (($x145 (and $x81 $x244)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x190 (and $x71 $x145)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x10 (and $x182 $x190)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x112 (and $x76 $x10)))
 (let (($x96 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd ?x72 (_ bv3 32))))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x31 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x162 (or false (or false (and (and true (or $x204 $x31)) (or $x220 $x96))))))
 (let (($x15 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x162)))
 (let (($x170 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x162)))
 (let (($x189 (and $x170 $x112)))
 (let (($x108 (=> $x189 $x37)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (bvule ?x157 input.dst.llvm-%n)))
 (let (($x262 (= $x86 true)))
 (let (($x37 (= $x262 true)))
 (let (($x46 (forall ((input.ind-%var1568X (_ BitVec 32)) )(let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1568X)))
 (let ((?x117 (input.spec-%var-x-1.1.1 input.ind-%var1568X)))
 (let (($x133 (input.spec-%var-x-1.0.1 input.ind-%var1568X)))
 (=> $x133 (= ?x117 ?x285))))))
 ))
 (let (($x131 (forall ((input.ind-%var1567X (_ BitVec 32)) )(let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1567X)))
 (let (($x133 (input.spec-%var-x-1.0.1 input.ind-%var1567X)))
 (= $x133 $x154))))
 ))
 (let (($x166 (and $x131 $x46)))
 (let (($x152 (= $x166 true)))
 (let (($x62 (forall ((input.ind-%var1562X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1562X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x310))))
 (let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1562X)))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1562X)))
 (=> $x154 (= ?x285 ?x82))))))))
 ))
 (let (($x196 (forall ((input.ind-%var1561X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var1561X) (bvult input.ind-%var1561X input.dst.llvm-%n))))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1561X)))
 (= $x154 $x208))))
 ))
 (let (($x89 (and $x196 $x62)))
 (let (($x43 (= $x89 true)))
 (let (($x66 (forall ((input.ind-%var1556X (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul input.ind-%var1556X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x310))))
 (let ((?x117 (input.spec-%var-x-1.1.1 input.ind-%var1556X)))
 (let (($x133 (input.spec-%var-x-1.0.1 input.ind-%var1556X)))
 (=> $x133 (= ?x117 ?x82))))))))
 ))
 (let (($x184 (forall ((input.ind-%var1555X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var1555X) (bvult input.ind-%var1555X input.dst.llvm-%n))))
 (let (($x133 (input.spec-%var-x-1.0.1 input.ind-%var1555X)))
 (= $x133 $x208))))
 ))
 (let (($x16 (and $x184 $x66)))
 (let (($x281 (= $x16 true)))
 (let ((?x138 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x138)))
 (let (($x38 (= ?x225 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x32 (= $x38 true)))
 (let (($x116 (= $x32 true)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let ((?x33 (bvsub ?x72 ?x50)))
 (let (($x161 (ite (bvsge ?x50 (_ bv0 32)) (bvuge ?x72 ?x33) (bvult ?x72 ?x33))))
 (let (($x302 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x316 (ite $x302 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x121 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x309 (bvmul (_ bv4 64) ?x121)))
 (let ((?x271 ((_ extract 63 32) ?x309)))
 (let (($x151 (= ?x271 ?x316)))
 (let (($x181 (and $x151 $x161)))
 (let (($x45 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x292 (and $x45 $x181)))
 (let (($x266 (= true $x292)))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x274 (=> $x172 $x266)))
 (let (($x159 (= $x274 true)))
 (let (($x41 (= $x159 true)))
 (let (($x52 (= $x41 true)))
 (let (($x303 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x305 (= $x303 true)))
 (let (($x298 (= $x305 true)))
 (let (($x23 (= $x298 true)))
 (let (($x319 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (= $x319 true)))
 (let (($x19 (= $x238 true)))
 (let (($x110 (= $x19 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x241 (= $x172 true)))
 (let (($x60 (= $x241 true)))
 (let (($x153 (= $x60 true)))
 (let ((?x315 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x315)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x280)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (and $x296 $x47)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x158 $x287)))
 (let (($x290 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x253 $x237)))
 (let (($x261 (not $x256)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x320 (and $x317 $x248)))
 (let (($x300 (and (not $x320) $x261)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x143 $x165)))
 (let (($x277 (not $x250)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x35 $x254)))
 (let (($x11 (and (not $x267) $x277)))
 (let (($x119 (and (and (and (and (and (and $x11 $x300) $x91) $x290) $x39) $x202) $x259)))
 (let (($x180 (and $x119 $x101)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x299 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x215 (or false (or false (and (and true (or $x84 $x299)) (or $x36 $x221))))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x142 (and $x178 $x180)))
 (let (($x79 (= $x142 true)))
 (let (($x90 (= $x79 true)))
 (let (($x304 (= $x90 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x44 true)))
 (let (($x168 (= $x51 true)))
 (let (($x78 (= $x168 true)))
 (let ((?x139 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x49 (= (_ bv0 2) ?x139)))
 (let (($x115 (= $x49 true)))
 (let (($x74 (= $x115 true)))
 (let (($x235 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x20 (= $x235 true)))
 (let (($x73 (= $x20 true)))
 (let (($x272 (= $x73 true)))
 (let ((?x114 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x114)))
 (let (($x59 (= ?x164 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x59 true)))
 (let (($x201 (= $x273 true)))
 (let (($x124 (and $x201 $x272)))
 (let (($x171 (and $x124 $x74)))
 (let (($x185 (and $x171 $x78)))
 (let (($x219 (and $x185 $x304)))
 (let (($x282 (and $x219 $x153)))
 (let (($x243 (and $x282 $x149)))
 (let (($x297 (and $x243 $x110)))
 (let (($x30 (and $x297 $x23)))
 (let (($x318 (and $x30 $x52)))
 (let (($x211 (and $x318 $x116)))
 (let (($x212 (and $x211 $x281)))
 (let (($x242 (and $x212 $x43)))
 (let (($x244 (and $x242 $x152)))
 (let (($x122 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x40 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x40 (_ bv1 32))))
 (let (($x145 (and $x81 $x244)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x190 (and $x71 $x145)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x10 (and $x182 $x190)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x112 (and $x76 $x10)))
 (let (($x96 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd ?x72 (_ bv3 32))))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x31 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x162 (or false (or false (and (and true (or $x204 $x31)) (or $x220 $x96))))))
 (let (($x15 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x162)))
 (let (($x170 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x162)))
 (let (($x189 (and $x170 $x112)))
 (let (($x108 (=> $x189 $x37)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (not $x172)))
 (let (($x210 (= $x54 false)))
 (let (($x314 (= $x210 true)))
 (let (($x199 (forall ((input.ind-%var1591X (_ BitVec 32)) )(let ((?x288 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1591X)))
 (let ((?x274 (input.spec-%var-x-1.1.1 input.ind-%var1591X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1591X)))
 (=> $x121 (= ?x274 ?x288))))))
 ))
 (let (($x80 (forall ((input.ind-%var1590X (_ BitVec 32)) )(let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1590X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1590X)))
 (= $x121 $x212))))
 ))
 (let (($x125 (and $x80 $x199)))
 (let (($x251 (= $x125 true)))
 (let (($x113 (forall ((input.ind-%var1585X (_ BitVec 32)) )(let ((?x301 (bvadd (bvmul input.ind-%var1585X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x12))))
 (let ((?x288 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1585X)))
 (let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1585X)))
 (=> $x212 (= ?x288 ?x85))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1584X (_ BitVec 32)) )(let (($x130 (and (bvule (_ bv0 32) input.ind-%var1584X) (bvult input.ind-%var1584X input.dst.llvm-%n))))
 (let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1584X)))
 (= $x212 $x130))))
 ))
 (let (($x93 (and $x62 $x113)))
 (let (($x236 (= $x93 true)))
 (let (($x82 (forall ((input.ind-%var1579X (_ BitVec 32)) )(let ((?x301 (bvadd (bvmul input.ind-%var1579X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x12))))
 (let ((?x274 (input.spec-%var-x-1.1.1 input.ind-%var1579X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1579X)))
 (=> $x121 (= ?x274 ?x85))))))))
 ))
 (let (($x161 (forall ((input.ind-%var1578X (_ BitVec 32)) )(let (($x130 (and (bvule (_ bv0 32) input.ind-%var1578X) (bvult input.ind-%var1578X input.dst.llvm-%n))))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1578X)))
 (= $x121 $x130))))
 ))
 (let (($x140 (and $x161 $x82)))
 (let (($x87 (= $x140 true)))
 (let ((?x303 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x305 (bvneg ?x303)))
 (let (($x298 (= ?x305 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x23 (= $x298 true)))
 (let (($x30 (= $x23 true)))
 (let (($x319 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x238 (= $x319 true)))
 (let (($x19 (= $x238 true)))
 (let (($x110 (= $x19 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x219 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x219 true)))
 (let (($x60 (= $x241 true)))
 (let (($x153 (= $x60 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x147)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x287)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x290 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x290)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x118 $x230)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x70 $x158)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x320 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (and $x320 $x214)))
 (let (($x237 (not $x253)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x11 $x317)))
 (let (($x261 (and (not $x248) $x237)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x267 $x200)))
 (let (($x165 (not $x143)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x185 $x57)))
 (let (($x277 (and (not $x254) $x165)))
 (let (($x315 (and (and (and (and (and (and $x277 $x261) $x75) $x91) $x296) $x47) $x39)))
 (let (($x101 (and $x315 $x289)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x299 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x215 (or false (or false (and (and true (or $x84 $x299)) (or $x36 $x221))))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x180 (and $x35 $x101)))
 (let (($x142 (= $x180 true)))
 (let (($x79 (= $x142 true)))
 (let (($x90 (= $x79 true)))
 (let (($x74 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x171 (= $x74 true)))
 (let (($x44 (= $x171 true)))
 (let (($x51 (= $x44 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x25 (= (_ bv0 2) ?x124)))
 (let (($x139 (= $x25 true)))
 (let (($x49 (= $x139 true)))
 (let (($x201 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x120 (= $x201 true)))
 (let (($x235 (= $x120 true)))
 (let (($x20 (= $x235 true)))
 (let ((?x81 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x81)))
 (let (($x114 (= ?x232 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x114 true)))
 (let (($x141 (= $x164 true)))
 (let (($x73 (and $x141 $x20)))
 (let (($x115 (and $x73 $x49)))
 (let (($x168 (and $x115 $x51)))
 (let (($x304 (and $x168 $x90)))
 (let (($x282 (and $x304 $x153)))
 (let (($x243 (and $x282 $x149)))
 (let (($x297 (and $x243 $x110)))
 (let (($x231 (and $x297 $x30)))
 (let (($x66 (and $x231 $x87)))
 (let (($x22 (and $x66 $x236)))
 (let (($x28 (and $x22 $x251)))
 (let (($x217 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x217 $x28)))
 (let (($x207 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x176 (and $x207 $x265)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x144 $x176)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let (($x94 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd ?x72 (_ bv3 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x203 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x170 (or false (or false (and (and true (or $x7 $x203)) (or $x34 $x94))))))
 (let (($x76 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x170)))
 (let (($x188 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x170)))
 (let (($x135 (and $x188 $x175)))
 (let (($x284 (=> $x135 $x314)))
 (not $x284))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (not $x172)))
 (let (($x210 (= $x54 false)))
 (let (($x314 (= $x210 true)))
 (let (($x199 (forall ((input.ind-%var1591X (_ BitVec 32)) )(let ((?x288 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1591X)))
 (let ((?x274 (input.spec-%var-x-1.1.1 input.ind-%var1591X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1591X)))
 (=> $x121 (= ?x274 ?x288))))))
 ))
 (let (($x80 (forall ((input.ind-%var1590X (_ BitVec 32)) )(let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1590X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1590X)))
 (= $x121 $x212))))
 ))
 (let (($x125 (and $x80 $x199)))
 (let (($x251 (= $x125 true)))
 (let (($x113 (forall ((input.ind-%var1585X (_ BitVec 32)) )(let ((?x301 (bvadd (bvmul input.ind-%var1585X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x12))))
 (let ((?x288 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1585X)))
 (let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1585X)))
 (=> $x212 (= ?x288 ?x85))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1584X (_ BitVec 32)) )(let (($x130 (and (bvule (_ bv0 32) input.ind-%var1584X) (bvult input.ind-%var1584X input.dst.llvm-%n))))
 (let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1584X)))
 (= $x212 $x130))))
 ))
 (let (($x93 (and $x62 $x113)))
 (let (($x236 (= $x93 true)))
 (let (($x82 (forall ((input.ind-%var1579X (_ BitVec 32)) )(let ((?x301 (bvadd (bvmul input.ind-%var1579X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x12))))
 (let ((?x274 (input.spec-%var-x-1.1.1 input.ind-%var1579X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1579X)))
 (=> $x121 (= ?x274 ?x85))))))))
 ))
 (let (($x161 (forall ((input.ind-%var1578X (_ BitVec 32)) )(let (($x130 (and (bvule (_ bv0 32) input.ind-%var1578X) (bvult input.ind-%var1578X input.dst.llvm-%n))))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var1578X)))
 (= $x121 $x130))))
 ))
 (let (($x140 (and $x161 $x82)))
 (let (($x87 (= $x140 true)))
 (let ((?x303 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x305 (bvneg ?x303)))
 (let (($x298 (= ?x305 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x23 (= $x298 true)))
 (let (($x30 (= $x23 true)))
 (let (($x319 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x238 (= $x319 true)))
 (let (($x19 (= $x238 true)))
 (let (($x110 (= $x19 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x219 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x219 true)))
 (let (($x60 (= $x241 true)))
 (let (($x153 (= $x60 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x147)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x287)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x290 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x290)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x118 $x230)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x70 $x158)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x320 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (and $x320 $x214)))
 (let (($x237 (not $x253)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x11 $x317)))
 (let (($x261 (and (not $x248) $x237)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x267 $x200)))
 (let (($x165 (not $x143)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x185 $x57)))
 (let (($x277 (and (not $x254) $x165)))
 (let (($x315 (and (and (and (and (and (and $x277 $x261) $x75) $x91) $x296) $x47) $x39)))
 (let (($x101 (and $x315 $x289)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x299 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x215 (or false (or false (and (and true (or $x84 $x299)) (or $x36 $x221))))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x180 (and $x35 $x101)))
 (let (($x142 (= $x180 true)))
 (let (($x79 (= $x142 true)))
 (let (($x90 (= $x79 true)))
 (let (($x74 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x171 (= $x74 true)))
 (let (($x44 (= $x171 true)))
 (let (($x51 (= $x44 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x25 (= (_ bv0 2) ?x124)))
 (let (($x139 (= $x25 true)))
 (let (($x49 (= $x139 true)))
 (let (($x201 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x120 (= $x201 true)))
 (let (($x235 (= $x120 true)))
 (let (($x20 (= $x235 true)))
 (let ((?x81 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x81)))
 (let (($x114 (= ?x232 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x114 true)))
 (let (($x141 (= $x164 true)))
 (let (($x73 (and $x141 $x20)))
 (let (($x115 (and $x73 $x49)))
 (let (($x168 (and $x115 $x51)))
 (let (($x304 (and $x168 $x90)))
 (let (($x282 (and $x304 $x153)))
 (let (($x243 (and $x282 $x149)))
 (let (($x297 (and $x243 $x110)))
 (let (($x231 (and $x297 $x30)))
 (let (($x66 (and $x231 $x87)))
 (let (($x22 (and $x66 $x236)))
 (let (($x28 (and $x22 $x251)))
 (let (($x217 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x217 $x28)))
 (let (($x207 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x176 (and $x207 $x265)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x144 $x176)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let (($x94 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd ?x72 (_ bv3 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x203 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x170 (or false (or false (and (and true (or $x7 $x203)) (or $x34 $x94))))))
 (let (($x76 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x170)))
 (let (($x188 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x170)))
 (let (($x135 (and $x188 $x175)))
 (let (($x284 (=> $x135 $x314)))
 (not $x284))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6146f8e2)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x6146f8e2)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x6146f8e2)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6146f8e2 x!0)
         (ite (bvule #x6146f8e3 x!0) #x6146f8e3 #x6146f8e2)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!8 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6c68937c)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x6c68937c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x66df8d98)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8b12ae9c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x6c68937c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8b12ae9f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x66df8d9b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8b12ae9c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x66df8d98)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6c68937c x!0)
         (ite (bvule #x6c68937d x!0) #x6c68937d #x6c68937c)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!8 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x197 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (= ?x197 (_ bv0 32))))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x262 (not $x172)))
 (let (($x9 (=> $x262 $x192)))
 (let (($x257 (= $x9 true)))
 (let (($x100 (= $x257 true)))
 (let (($x193 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let ((?x249 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1642X)))
 (let ((?x12 (input.spec-%var-x-1.1.1 input.ind-%var1642X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1642X)))
 (=> $x311 (= ?x12 ?x249))))))
 ))
 (let (($x10 (forall ((input.ind-%var1641X (_ BitVec 32)) )(let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1641X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1641X)))
 (= $x311 $x154))))
 ))
 (let (($x92 (and $x10 $x193)))
 (let (($x99 (= $x92 true)))
 (let (($x286 (forall ((input.ind-%var1636X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var1636X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x199))))
 (let ((?x249 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1636X)))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1636X)))
 (=> $x154 (= ?x249 ?x175))))))))
 ))
 (let (($x271 (forall ((input.ind-%var1635X (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) input.ind-%var1635X) (bvult input.ind-%var1635X input.dst.llvm-%n))))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1635X)))
 (= $x154 $x116))))
 ))
 (let (($x112 (and $x271 $x286)))
 (let (($x189 (= $x112 true)))
 (let (($x210 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var1630X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x199))))
 (let ((?x12 (input.spec-%var-x-1.1.1 input.ind-%var1630X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1630X)))
 (=> $x311 (= ?x12 ?x175))))))))
 ))
 (let (($x206 (forall ((input.ind-%var1629X (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) input.ind-%var1629X) (bvult input.ind-%var1629X input.dst.llvm-%n))))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1629X)))
 (= $x311 $x116))))
 ))
 (let (($x314 (and $x206 $x210)))
 (let (($x284 (= $x314 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x298)))
 (let (($x30 (= ?x23 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x231 (= $x30 true)))
 (let (($x198 (= $x231 true)))
 (let (($x19 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x110 (= $x19 true)))
 (let (($x297 (= $x110 true)))
 (let (($x303 (= $x297 true)))
 (let (($x264 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x264 true)))
 (let (($x243 (= $x149 true)))
 (let (($x319 (= $x243 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x60 true)))
 (let (($x282 (= $x153 true)))
 (let (($x64 (= $x282 true)))
 (let (($x79 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x90 (= $x79 true)))
 (let (($x304 (= $x90 true)))
 (let (($x219 (= $x304 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x289 (= $x147 true)))
 (let (($x101 (= $x289 true)))
 (let (($x180 (= $x101 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x223)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x75)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x300 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x214)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x237 (and $x320 $x253)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (and $x256 $x237)))
 (let (($x248 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x254 $x250)))
 (let (($x200 (not $x267)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x35 $x185)))
 (let (($x165 (and (not $x57) $x200)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x36 $x221)))
 (let (($x229 (not $x5)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x124 $x25)))
 (let (($x215 (and (not $x155) $x229)))
 (let (($x158 (and (and (and (and (and (and $x215 $x165) $x11) $x248) $x261) $x300) $x134)))
 (let (($x296 (and $x158 $x91)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x84 (or false (or false (and (and true (or $x74 $x171)) (or $x168 $x246))))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x84)))
 (let (($x259 (and $x137 $x296)))
 (let (($x48 (= $x259 true)))
 (let (($x47 (= $x48 true)))
 (let (($x119 (= $x47 true)))
 (let ((?x201 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x120 (= (_ bv0 2) ?x201)))
 (let (($x235 (= $x120 true)))
 (let (($x20 (= $x235 true)))
 (let ((?x232 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x232)))
 (let (($x164 (= ?x104 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x164 true)))
 (let (($x59 (= $x141 true)))
 (let (($x73 (and $x59 $x20)))
 (let (($x287 (and $x73 $x119)))
 (let (($x142 (and $x287 $x180)))
 (let (($x241 (and $x142 $x219)))
 (let (($x68 (and $x241 $x64)))
 (let (($x238 (and $x68 $x319)))
 (let (($x305 (and $x238 $x303)))
 (let (($x121 (and $x305 $x198)))
 (let (($x240 (and $x121 $x284)))
 (let (($x145 (and $x240 $x189)))
 (let (($x292 (and $x145 $x99)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x184 (and $x122 $x292)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x86 (and $x71 $x184)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x26 $x86)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let (($x162 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x203 (bvadd ?x72 (_ bv3 32))))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x203)))
 (let (($x220 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x203)))
 (let (($x188 (or false (or false (and (and true (or $x132 $x220)) (or $x129 $x162))))))
 (let (($x144 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x188)))
 (let (($x233 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x188)))
 (let (($x43 (and $x233 $x156)))
 (let (($x107 (=> $x43 $x100)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x197 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (= ?x197 (_ bv0 32))))
 (let (($x172 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x262 (not $x172)))
 (let (($x9 (=> $x262 $x192)))
 (let (($x257 (= $x9 true)))
 (let (($x100 (= $x257 true)))
 (let (($x193 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let ((?x249 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1642X)))
 (let ((?x12 (input.spec-%var-x-1.1.1 input.ind-%var1642X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1642X)))
 (=> $x311 (= ?x12 ?x249))))))
 ))
 (let (($x10 (forall ((input.ind-%var1641X (_ BitVec 32)) )(let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1641X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1641X)))
 (= $x311 $x154))))
 ))
 (let (($x92 (and $x10 $x193)))
 (let (($x99 (= $x92 true)))
 (let (($x286 (forall ((input.ind-%var1636X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var1636X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x199))))
 (let ((?x249 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1636X)))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1636X)))
 (=> $x154 (= ?x249 ?x175))))))))
 ))
 (let (($x271 (forall ((input.ind-%var1635X (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) input.ind-%var1635X) (bvult input.ind-%var1635X input.dst.llvm-%n))))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1635X)))
 (= $x154 $x116))))
 ))
 (let (($x112 (and $x271 $x286)))
 (let (($x189 (= $x112 true)))
 (let (($x210 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var1630X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x199))))
 (let ((?x12 (input.spec-%var-x-1.1.1 input.ind-%var1630X)))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1630X)))
 (=> $x311 (= ?x12 ?x175))))))))
 ))
 (let (($x206 (forall ((input.ind-%var1629X (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) input.ind-%var1629X) (bvult input.ind-%var1629X input.dst.llvm-%n))))
 (let (($x311 (input.spec-%var-x-1.0.1 input.ind-%var1629X)))
 (= $x311 $x116))))
 ))
 (let (($x314 (and $x206 $x210)))
 (let (($x284 (= $x314 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x298)))
 (let (($x30 (= ?x23 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x231 (= $x30 true)))
 (let (($x198 (= $x231 true)))
 (let (($x19 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x110 (= $x19 true)))
 (let (($x297 (= $x110 true)))
 (let (($x303 (= $x297 true)))
 (let (($x264 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x264 true)))
 (let (($x243 (= $x149 true)))
 (let (($x319 (= $x243 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x60 true)))
 (let (($x282 (= $x153 true)))
 (let (($x64 (= $x282 true)))
 (let (($x79 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x90 (= $x79 true)))
 (let (($x304 (= $x90 true)))
 (let (($x219 (= $x304 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x289 (= $x147 true)))
 (let (($x101 (= $x289 true)))
 (let (($x180 (= $x101 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x223)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x75)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x300 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x214)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x237 (and $x320 $x253)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (and $x256 $x237)))
 (let (($x248 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x254 $x250)))
 (let (($x200 (not $x267)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x35 $x185)))
 (let (($x165 (and (not $x57) $x200)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x36 $x221)))
 (let (($x229 (not $x5)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x124 $x25)))
 (let (($x215 (and (not $x155) $x229)))
 (let (($x158 (and (and (and (and (and (and $x215 $x165) $x11) $x248) $x261) $x300) $x134)))
 (let (($x296 (and $x158 $x91)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x84 (or false (or false (and (and true (or $x74 $x171)) (or $x168 $x246))))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x84)))
 (let (($x259 (and $x137 $x296)))
 (let (($x48 (= $x259 true)))
 (let (($x47 (= $x48 true)))
 (let (($x119 (= $x47 true)))
 (let ((?x201 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x120 (= (_ bv0 2) ?x201)))
 (let (($x235 (= $x120 true)))
 (let (($x20 (= $x235 true)))
 (let ((?x232 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x232)))
 (let (($x164 (= ?x104 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x164 true)))
 (let (($x59 (= $x141 true)))
 (let (($x73 (and $x59 $x20)))
 (let (($x287 (and $x73 $x119)))
 (let (($x142 (and $x287 $x180)))
 (let (($x241 (and $x142 $x219)))
 (let (($x68 (and $x241 $x64)))
 (let (($x238 (and $x68 $x319)))
 (let (($x305 (and $x238 $x303)))
 (let (($x121 (and $x305 $x198)))
 (let (($x240 (and $x121 $x284)))
 (let (($x145 (and $x240 $x189)))
 (let (($x292 (and $x145 $x99)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x184 (and $x122 $x292)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x86 (and $x71 $x184)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x26 $x86)))
 (let ((?x50 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x50)))
 (let (($x162 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x203 (bvadd ?x72 (_ bv3 32))))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x203)))
 (let (($x220 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x203)))
 (let (($x188 (or false (or false (and (and true (or $x132 $x220)) (or $x129 $x162))))))
 (let (($x144 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x188)))
 (let (($x233 (=> (and $x172 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x188)))
 (let (($x43 (and $x233 $x156)))
 (let (($x107 (=> $x43 $x100)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x190 true)))
 (let (($x227 (= $x152 true)))
 (let (($x208 (forall ((input.ind-%var1665X (_ BitVec 32)) )(let ((?x102 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1665X)))
 (let ((?x265 (input.spec-%var-x-1.1.1 input.ind-%var1665X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var1665X)))
 (=> $x231 (= ?x265 ?x102))))))
 ))
 (let (($x309 (forall ((input.ind-%var1664X (_ BitVec 32)) )(let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1664X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var1664X)))
 (= $x231 $x61))))
 ))
 (let (($x38 (and $x309 $x208)))
 (let (($x138 (= $x38 true)))
 (let (($x140 (forall ((input.ind-%var1659X (_ BitVec 32)) )(let ((?x45 (bvadd (bvmul input.ind-%var1659X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x189))))
 (let ((?x102 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1659X)))
 (let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1659X)))
 (=> $x61 (= ?x102 ?x193))))))))
 ))
 (let (($x100 (forall ((input.ind-%var1658X (_ BitVec 32)) )(let (($x148 (and (bvule (_ bv0 32) input.ind-%var1658X) (bvult input.ind-%var1658X input.dst.llvm-%n))))
 (let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1658X)))
 (= $x61 $x148))))
 ))
 (let (($x87 (and $x100 $x140)))
 (let (($x82 (= $x87 true)))
 (let (($x292 (forall ((input.ind-%var1653X (_ BitVec 32)) )(let ((?x45 (bvadd (bvmul input.ind-%var1653X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x189))))
 (let ((?x265 (input.spec-%var-x-1.1.1 input.ind-%var1653X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var1653X)))
 (=> $x231 (= ?x265 ?x193))))))))
 ))
 (let (($x12 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let (($x148 (and (bvule (_ bv0 32) input.ind-%var1652X) (bvult input.ind-%var1652X input.dst.llvm-%n))))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var1652X)))
 (= $x231 $x148))))
 ))
 (let (($x184 (and $x12 $x292)))
 (let (($x86 (= $x184 true)))
 (let ((?x238 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x238)))
 (let (($x297 (= ?x19 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x142)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x101)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (and $x259 $x119)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (and $x296 $x287)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (and $x261 $x290)))
 (let (($x300 (not $x202)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (and $x214 $x253)))
 (let (($x75 (and (not $x237) $x300)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x70 $x317)))
 (let (($x118 (not $x248)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x137 $x124)))
 (let (($x320 (and (not $x11) $x118)))
 (let (($x153 (and (and (and (and (and (and $x320 $x75) $x158) $x91) $x315) $x289) $x180)))
 (let (($x282 (and $x153 $x79)))
 (let (($x254 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x221 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x221)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x221)))
 (let (($x165 (or false (or false (and (and true (or $x5 $x229)) (or $x143 $x254))))))
 (let (($x277 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x165)))
 (let (($x64 (and $x277 $x282)))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x168 (= $x51 true)))
 (let (($x246 (= $x168 true)))
 (let (($x294 (= $x246 true)))
 (let ((?x299 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x115 (= (_ bv0 2) ?x299)))
 (let (($x74 (= $x115 true)))
 (let (($x171 (= $x74 true)))
 (let ((?x273 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x273)))
 (let (($x120 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x235 (= $x120 true)))
 (let (($x20 (= $x235 true)))
 (let (($x232 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x104 (= $x232 true)))
 (let (($x114 (= $x104 true)))
 (let (($x164 (= $x114 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (= $x207 true)))
 (let (($x217 (= $x71 true)))
 (let (($x122 (= $x217 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x233 (= $x144 true)))
 (let (($x97 (= $x233 true)))
 (let (($x26 (= $x97 true)))
 (let (($x162 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x162 true)))
 (let (($x170 (= $x15 true)))
 (let (($x76 (= $x170 true)))
 (let (($x220 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (not $x220)))
 (let (($x34 (= $x160 true)))
 (let (($x96 (= $x34 true)))
 (let (($x129 (= $x96 true)))
 (let (($x188 (and $x129 $x76)))
 (let (($x182 (and $x188 $x26)))
 (let (($x81 (and $x182 $x122)))
 (let (($x141 (and $x81 $x164)))
 (let (($x73 (and $x141 $x20)))
 (let (($x44 (and $x73 $x171)))
 (let (($x178 (and $x44 $x294)))
 (let (($x243 (and $x178 $x149)))
 (let (($x298 (and $x243 $x305)))
 (let (($x156 (and $x298 $x86)))
 (let (($x66 (and $x156 $x82)))
 (let (($x225 (and $x66 $x138)))
 (let (($x31 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x204 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x204 (_ bv0 32))))
 (let (($x32 (and $x203 $x225)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x89 (and $x72 $x32)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x95 (and $x56 $x89)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x239 (and $x21 $x95)))
 (let (($x301 (=> $x239 $x227)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x190 true)))
 (let (($x227 (= $x152 true)))
 (let (($x208 (forall ((input.ind-%var1665X (_ BitVec 32)) )(let ((?x102 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1665X)))
 (let ((?x265 (input.spec-%var-x-1.1.1 input.ind-%var1665X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var1665X)))
 (=> $x231 (= ?x265 ?x102))))))
 ))
 (let (($x309 (forall ((input.ind-%var1664X (_ BitVec 32)) )(let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1664X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var1664X)))
 (= $x231 $x61))))
 ))
 (let (($x38 (and $x309 $x208)))
 (let (($x138 (= $x38 true)))
 (let (($x140 (forall ((input.ind-%var1659X (_ BitVec 32)) )(let ((?x45 (bvadd (bvmul input.ind-%var1659X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x189))))
 (let ((?x102 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1659X)))
 (let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1659X)))
 (=> $x61 (= ?x102 ?x193))))))))
 ))
 (let (($x100 (forall ((input.ind-%var1658X (_ BitVec 32)) )(let (($x148 (and (bvule (_ bv0 32) input.ind-%var1658X) (bvult input.ind-%var1658X input.dst.llvm-%n))))
 (let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1658X)))
 (= $x61 $x148))))
 ))
 (let (($x87 (and $x100 $x140)))
 (let (($x82 (= $x87 true)))
 (let (($x292 (forall ((input.ind-%var1653X (_ BitVec 32)) )(let ((?x45 (bvadd (bvmul input.ind-%var1653X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x189))))
 (let ((?x265 (input.spec-%var-x-1.1.1 input.ind-%var1653X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var1653X)))
 (=> $x231 (= ?x265 ?x193))))))))
 ))
 (let (($x12 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let (($x148 (and (bvule (_ bv0 32) input.ind-%var1652X) (bvult input.ind-%var1652X input.dst.llvm-%n))))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var1652X)))
 (= $x231 $x148))))
 ))
 (let (($x184 (and $x12 $x292)))
 (let (($x86 (= $x184 true)))
 (let ((?x238 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x238)))
 (let (($x297 (= ?x19 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x303 (= $x297 true)))
 (let (($x305 (= $x303 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x142)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x101)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (and $x259 $x119)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (and $x296 $x287)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (and $x261 $x290)))
 (let (($x300 (not $x202)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (and $x214 $x253)))
 (let (($x75 (and (not $x237) $x300)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x70 $x317)))
 (let (($x118 (not $x248)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x137 $x124)))
 (let (($x320 (and (not $x11) $x118)))
 (let (($x153 (and (and (and (and (and (and $x320 $x75) $x158) $x91) $x315) $x289) $x180)))
 (let (($x282 (and $x153 $x79)))
 (let (($x254 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x221 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x221)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x221)))
 (let (($x165 (or false (or false (and (and true (or $x5 $x229)) (or $x143 $x254))))))
 (let (($x277 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x165)))
 (let (($x64 (and $x277 $x282)))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x168 (= $x51 true)))
 (let (($x246 (= $x168 true)))
 (let (($x294 (= $x246 true)))
 (let ((?x299 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x115 (= (_ bv0 2) ?x299)))
 (let (($x74 (= $x115 true)))
 (let (($x171 (= $x74 true)))
 (let ((?x273 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x273)))
 (let (($x120 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x235 (= $x120 true)))
 (let (($x20 (= $x235 true)))
 (let (($x232 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x104 (= $x232 true)))
 (let (($x114 (= $x104 true)))
 (let (($x164 (= $x114 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (= $x207 true)))
 (let (($x217 (= $x71 true)))
 (let (($x122 (= $x217 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x233 (= $x144 true)))
 (let (($x97 (= $x233 true)))
 (let (($x26 (= $x97 true)))
 (let (($x162 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x162 true)))
 (let (($x170 (= $x15 true)))
 (let (($x76 (= $x170 true)))
 (let (($x220 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (not $x220)))
 (let (($x34 (= $x160 true)))
 (let (($x96 (= $x34 true)))
 (let (($x129 (= $x96 true)))
 (let (($x188 (and $x129 $x76)))
 (let (($x182 (and $x188 $x26)))
 (let (($x81 (and $x182 $x122)))
 (let (($x141 (and $x81 $x164)))
 (let (($x73 (and $x141 $x20)))
 (let (($x44 (and $x73 $x171)))
 (let (($x178 (and $x44 $x294)))
 (let (($x243 (and $x178 $x149)))
 (let (($x298 (and $x243 $x305)))
 (let (($x156 (and $x298 $x86)))
 (let (($x66 (and $x156 $x82)))
 (let (($x225 (and $x66 $x138)))
 (let (($x31 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x204 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x204 (_ bv0 32))))
 (let (($x32 (and $x203 $x225)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x89 (and $x72 $x32)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x95 (and $x56 $x89)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x239 (and $x21 $x95)))
 (let (($x301 (=> $x239 $x227)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x21 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x236 (not $x21)))
 (let (($x196 (or $x21 $x236)))
 (let (($x46 (= $x196 true)))
 (let (($x52 (= $x46 true)))
 (let (($x211 (forall ((input.ind-%var1688X (_ BitVec 32)) )(let ((?x107 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1688X)))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1688X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1688X)))
 (=> $x244 (= ?x257 ?x107))))))
 ))
 (let (($x113 (forall ((input.ind-%var1687X (_ BitVec 32)) )(let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1687X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1687X)))
 (= $x244 $x163))))
 ))
 (let (($x242 (and $x113 $x211)))
 (let (($x39 (= $x242 true)))
 (let (($x255 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var1682X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x227))))
 (let ((?x107 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1682X)))
 (let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1682X)))
 (=> $x163 (= ?x107 ?x272))))))))
 ))
 (let (($x80 (forall ((input.ind-%var1681X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var1681X) (bvult input.ind-%var1681X input.dst.llvm-%n))))
 (let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1681X)))
 (= $x163 $x99))))
 ))
 (let (($x213 (and $x80 $x255)))
 (let (($x288 (= $x213 true)))
 (let (($x85 (forall ((input.ind-%var1676X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var1676X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x227))))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1676X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1676X)))
 (=> $x244 (= ?x257 ?x272))))))))
 ))
 (let (($x184 (forall ((input.ind-%var1675X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var1675X) (bvult input.ind-%var1675X input.dst.llvm-%n))))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1675X)))
 (= $x244 $x99))))
 ))
 (let (($x228 (and $x184 $x85)))
 (let (($x23 (= $x228 true)))
 (let ((?x265 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x265)))
 (let (($x251 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x251 true)))
 (let (($x45 (= $x249 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x105 (= $x116 true)))
 (let (($x148 (= $x105 true)))
 (let (($x206 (= $x148 true)))
 (let (($x303 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x305 (= $x303 true)))
 (let (($x298 (= $x305 true)))
 (let (($x169 (= $x298 true)))
 (let (($x319 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x238 (= $x319 true)))
 (let (($x19 (= $x238 true)))
 (let (($x110 (= $x19 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x147)))
 (let ((?x315 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x315)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x296 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x296)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (and $x219 $x259)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x91 $x48)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (and $x261 $x290)))
 (let (($x300 (not $x202)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (and $x253 $x237)))
 (let (($x90 (and (not $x230) $x300)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x70 $x317)))
 (let (($x118 (not $x248)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x5 $x36)))
 (let (($x214 (and (not $x256) $x118)))
 (let (($x79 (and (and (and (and (and (and $x214 $x90) $x158) $x223) $x47) $x287) $x241)))
 (let (($x282 (and $x79 $x289)))
 (let (($x267 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x137 (or false (or false (and (and true (or $x185 $x143)) (or $x250 $x267))))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x137)))
 (let (($x64 (and $x11 $x282)))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x178 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x25 (= $x178 true)))
 (let (($x155 (= $x25 true)))
 (let (($x280 (= $x155 true)))
 (let ((?x44 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x51 (= (_ bv0 2) ?x44)))
 (let (($x168 (= $x51 true)))
 (let (($x246 (= $x168 true)))
 (let (($x139 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x139 true)))
 (let (($x299 (= $x49 true)))
 (let (($x115 (= $x299 true)))
 (let ((?x141 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x141)))
 (let (($x201 (= ?x59 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x201 true)))
 (let (($x235 (= $x120 true)))
 (let (($x74 (and $x235 $x115)))
 (let (($x294 (and $x74 $x246)))
 (let (($x218 (and $x294 $x280)))
 (let (($x243 (and $x218 $x149)))
 (let (($x297 (and $x243 $x110)))
 (let (($x231 (and $x297 $x169)))
 (let (($x12 (and $x231 $x206)))
 (let (($x281 (and $x12 $x45)))
 (let (($x121 (and $x281 $x23)))
 (let (($x302 (and $x121 $x288)))
 (let (($x181 (and $x302 $x39)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x93 (and $x104 $x181)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x166 (and $x81 $x93)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x71 $x166)))
 (let ((?x56 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x50 (bvadd input.dst.llvm-%x ?x56)))
 (let (($x188 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd ?x50 (_ bv3 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x129 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x26 (or false (or false (and (and true (or $x96 $x129)) (or $x76 $x188))))))
 (let (($x207 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x24 (=> (and $x21 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x270 (and $x24 $x266)))
 (let (($x187 (=> $x270 $x52)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x21 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x236 (not $x21)))
 (let (($x196 (or $x21 $x236)))
 (let (($x46 (= $x196 true)))
 (let (($x52 (= $x46 true)))
 (let (($x211 (forall ((input.ind-%var1688X (_ BitVec 32)) )(let ((?x107 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1688X)))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1688X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1688X)))
 (=> $x244 (= ?x257 ?x107))))))
 ))
 (let (($x113 (forall ((input.ind-%var1687X (_ BitVec 32)) )(let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1687X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1687X)))
 (= $x244 $x163))))
 ))
 (let (($x242 (and $x113 $x211)))
 (let (($x39 (= $x242 true)))
 (let (($x255 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var1682X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x227))))
 (let ((?x107 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1682X)))
 (let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1682X)))
 (=> $x163 (= ?x107 ?x272))))))))
 ))
 (let (($x80 (forall ((input.ind-%var1681X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var1681X) (bvult input.ind-%var1681X input.dst.llvm-%n))))
 (let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1681X)))
 (= $x163 $x99))))
 ))
 (let (($x213 (and $x80 $x255)))
 (let (($x288 (= $x213 true)))
 (let (($x85 (forall ((input.ind-%var1676X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var1676X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x227))))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1676X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1676X)))
 (=> $x244 (= ?x257 ?x272))))))))
 ))
 (let (($x184 (forall ((input.ind-%var1675X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var1675X) (bvult input.ind-%var1675X input.dst.llvm-%n))))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1675X)))
 (= $x244 $x99))))
 ))
 (let (($x228 (and $x184 $x85)))
 (let (($x23 (= $x228 true)))
 (let ((?x265 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x265)))
 (let (($x251 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x251 true)))
 (let (($x45 (= $x249 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x105 (= $x116 true)))
 (let (($x148 (= $x105 true)))
 (let (($x206 (= $x148 true)))
 (let (($x303 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x305 (= $x303 true)))
 (let (($x298 (= $x305 true)))
 (let (($x169 (= $x298 true)))
 (let (($x319 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x238 (= $x319 true)))
 (let (($x19 (= $x238 true)))
 (let (($x110 (= $x19 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x147)))
 (let ((?x315 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x315)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x296 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x296)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (and $x219 $x259)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x91 $x48)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (and $x261 $x290)))
 (let (($x300 (not $x202)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (and $x253 $x237)))
 (let (($x90 (and (not $x230) $x300)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x70 $x317)))
 (let (($x118 (not $x248)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x5 $x36)))
 (let (($x214 (and (not $x256) $x118)))
 (let (($x79 (and (and (and (and (and (and $x214 $x90) $x158) $x223) $x47) $x287) $x241)))
 (let (($x282 (and $x79 $x289)))
 (let (($x267 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x137 (or false (or false (and (and true (or $x185 $x143)) (or $x250 $x267))))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x137)))
 (let (($x64 (and $x11 $x282)))
 (let (($x68 (= $x64 true)))
 (let (($x264 (= $x68 true)))
 (let (($x149 (= $x264 true)))
 (let (($x178 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x25 (= $x178 true)))
 (let (($x155 (= $x25 true)))
 (let (($x280 (= $x155 true)))
 (let ((?x44 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x51 (= (_ bv0 2) ?x44)))
 (let (($x168 (= $x51 true)))
 (let (($x246 (= $x168 true)))
 (let (($x139 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x139 true)))
 (let (($x299 (= $x49 true)))
 (let (($x115 (= $x299 true)))
 (let ((?x141 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x141)))
 (let (($x201 (= ?x59 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x201 true)))
 (let (($x235 (= $x120 true)))
 (let (($x74 (and $x235 $x115)))
 (let (($x294 (and $x74 $x246)))
 (let (($x218 (and $x294 $x280)))
 (let (($x243 (and $x218 $x149)))
 (let (($x297 (and $x243 $x110)))
 (let (($x231 (and $x297 $x169)))
 (let (($x12 (and $x231 $x206)))
 (let (($x281 (and $x12 $x45)))
 (let (($x121 (and $x281 $x23)))
 (let (($x302 (and $x121 $x288)))
 (let (($x181 (and $x302 $x39)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x93 (and $x104 $x181)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x166 (and $x81 $x93)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x71 $x166)))
 (let ((?x56 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x50 (bvadd input.dst.llvm-%x ?x56)))
 (let (($x188 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd ?x50 (_ bv3 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x129 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x26 (or false (or false (and (and true (or $x96 $x129)) (or $x76 $x188))))))
 (let (($x207 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x24 (=> (and $x21 (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x270 (and $x24 $x266)))
 (let (($x187 (=> $x270 $x52)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x236 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x196 (= (_ bv0 2) ?x236)))
 (let (($x46 (= $x196 true)))
 (let (($x211 (forall ((input.ind-%var1700X (_ BitVec 32)) )(let ((?x288 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1700X)))
 (let ((?x231 (input.spec-%var-x-1.1.1 input.ind-%var1700X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var1700X)))
 (=> $x64 (= ?x231 ?x288))))))
 ))
 (let (($x107 (forall ((input.ind-%var1699X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1699X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var1699X)))
 (= $x64 $x121))))
 ))
 (let (($x242 (and $x107 $x211)))
 (let (($x39 (= $x242 true)))
 (let (($x126 (forall ((input.ind-%var1694X (_ BitVec 32)) )(let ((?x257 (bvadd (bvmul input.ind-%var1694X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x84))))
 (let ((?x231 (input.spec-%var-x-1.1.1 input.ind-%var1694X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var1694X)))
 (=> $x64 (= ?x231 ?x152))))))))
 ))
 (let (($x303 (forall ((input.ind-%var1693X (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var1693X)))
 (= $x64 (and (bvule (_ bv0 32) input.ind-%var1693X) (bvult input.ind-%var1693X input.dst.llvm-%n)))))
 ))
 (let (($x272 (and $x303 $x126)))
 (let (($x198 (= $x272 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x287 (concat ?x119 (concat ?x48 (concat ?x219 ?x180)))))
 (let (($x142 (= ?x287 input.dst.llvm-%x)))
 (let (($x315 (= $x142 true)))
 (let (($x241 (= $x315 true)))
 (let (($x60 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x134 (= $x60 true)))
 (let (($x158 (= $x134 true)))
 (let (($x101 (= $x158 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x256 (= (_ bv0 32) ?x36)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x11)))
 (let ((?x277 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x277)))
 (let ((?x250 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x250)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x254 $x267)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x57 $x200)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (and $x155 $x280)))
 (let (($x229 (not $x218)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x294 $x178)))
 (let (($x124 (and (not $x25) $x229)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x74 $x171)))
 (let (($x51 (not $x44)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x24 $x31)))
 (let (($x246 (and (not $x115) $x51)))
 (let (($x214 (and (and (and (and (and (and $x246 $x124) $x35) $x143) $x165) $x137) $x5)))
 (let (($x253 (and $x214 $x256)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x139 (or false (or false (and (and true (or $x104 $x114)) (or $x201 $x120))))))
 (let (($x299 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x139)))
 (let (($x237 (and $x299 $x253)))
 (let (($x230 (= $x237 true)))
 (let (($x75 (= $x230 true)))
 (let (($x261 (= $x75 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x188 (concat ?x170 (concat ?x94 (concat ?x34 ?x7)))))
 (let (($x233 (= ?x188 input.dst.llvm-%n)))
 (let (($x97 (= $x233 true)))
 (let (($x26 (= $x97 true)))
 (let (($x290 (and $x26 $x261)))
 (let (($x304 (and $x290 $x101)))
 (let (($x79 (and $x304 $x241)))
 (let (($x176 (and $x79 $x198)))
 (let (($x181 (and $x176 $x39)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x93 (and $x50 $x181)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x166 (and $x125 $x93)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x40 $x166)))
 (let (($x52 (=> $x266 $x46)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x236 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x196 (= (_ bv0 2) ?x236)))
 (let (($x46 (= $x196 true)))
 (let (($x211 (forall ((input.ind-%var1700X (_ BitVec 32)) )(let ((?x288 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1700X)))
 (let ((?x231 (input.spec-%var-x-1.1.1 input.ind-%var1700X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var1700X)))
 (=> $x64 (= ?x231 ?x288))))))
 ))
 (let (($x107 (forall ((input.ind-%var1699X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1699X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var1699X)))
 (= $x64 $x121))))
 ))
 (let (($x242 (and $x107 $x211)))
 (let (($x39 (= $x242 true)))
 (let (($x126 (forall ((input.ind-%var1694X (_ BitVec 32)) )(let ((?x257 (bvadd (bvmul input.ind-%var1694X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x84))))
 (let ((?x231 (input.spec-%var-x-1.1.1 input.ind-%var1694X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var1694X)))
 (=> $x64 (= ?x231 ?x152))))))))
 ))
 (let (($x303 (forall ((input.ind-%var1693X (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var1693X)))
 (= $x64 (and (bvule (_ bv0 32) input.ind-%var1693X) (bvult input.ind-%var1693X input.dst.llvm-%n)))))
 ))
 (let (($x272 (and $x303 $x126)))
 (let (($x198 (= $x272 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x287 (concat ?x119 (concat ?x48 (concat ?x219 ?x180)))))
 (let (($x142 (= ?x287 input.dst.llvm-%x)))
 (let (($x315 (= $x142 true)))
 (let (($x241 (= $x315 true)))
 (let (($x60 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x134 (= $x60 true)))
 (let (($x158 (= $x134 true)))
 (let (($x101 (= $x158 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x256 (= (_ bv0 32) ?x36)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x11)))
 (let ((?x277 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x277)))
 (let ((?x250 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x250)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x254 $x267)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x57 $x200)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (and $x155 $x280)))
 (let (($x229 (not $x218)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x294 $x178)))
 (let (($x124 (and (not $x25) $x229)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x74 $x171)))
 (let (($x51 (not $x44)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x24 $x31)))
 (let (($x246 (and (not $x115) $x51)))
 (let (($x214 (and (and (and (and (and (and $x246 $x124) $x35) $x143) $x165) $x137) $x5)))
 (let (($x253 (and $x214 $x256)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x139 (or false (or false (and (and true (or $x104 $x114)) (or $x201 $x120))))))
 (let (($x299 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x139)))
 (let (($x237 (and $x299 $x253)))
 (let (($x230 (= $x237 true)))
 (let (($x75 (= $x230 true)))
 (let (($x261 (= $x75 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x188 (concat ?x170 (concat ?x94 (concat ?x34 ?x7)))))
 (let (($x233 (= ?x188 input.dst.llvm-%n)))
 (let (($x97 (= $x233 true)))
 (let (($x26 (= $x97 true)))
 (let (($x290 (and $x26 $x261)))
 (let (($x304 (and $x290 $x101)))
 (let (($x79 (and $x304 $x241)))
 (let (($x176 (and $x79 $x198)))
 (let (($x181 (and $x176 $x39)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x93 (and $x50 $x181)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x166 (and $x125 $x93)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x40 $x166)))
 (let (($x52 (=> $x266 $x46)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x298 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x292 (= $x298 true)))
 (let (($x222 (= $x292 true)))
 (let (($x213 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let ((?x249 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1712X)))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var1712X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1712X)))
 (=> $x303 (= ?x152 ?x249))))))
 ))
 (let (($x45 (forall ((input.ind-%var1711X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1711X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1711X)))
 (= $x303 $x206))))
 ))
 (let (($x289 (and $x45 $x213)))
 (let (($x243 (= $x289 true)))
 (let (($x68 (forall ((input.ind-%var1706X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var1706X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x46))))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var1706X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1706X)))
 (=> $x303 (= ?x152 ?x223))))))))
 ))
 (let (($x95 (forall ((input.ind-%var1705X (_ BitVec 32)) )(let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1705X)))
 (= $x303 (and (bvule (_ bv0 32) input.ind-%var1705X) (bvult input.ind-%var1705X input.dst.llvm-%n)))))
 ))
 (let (($x116 (and $x95 $x68)))
 (let (($x305 (= $x116 true)))
 (let ((?x259 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x315 (concat ?x142 (concat ?x296 (concat ?x91 ?x259)))))
 (let (($x79 (= ?x315 input.dst.llvm-%n)))
 (let (($x282 (= $x79 true)))
 (let (($x64 (= $x282 true)))
 (let (($x134 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x158 (= $x134 true)))
 (let (($x101 (= $x158 true)))
 (let (($x304 (= $x101 true)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x118)))
 (let ((?x277 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x277)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x254 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x250 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x254)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x267 (and $x57 $x250)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x317 $x267)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x229 (and $x280 $x218)))
 (let (($x124 (not $x229)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x25 $x215)))
 (let (($x35 (and (not $x155) $x124)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x171 $x44)))
 (let (($x246 (not $x51)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x49 $x122)))
 (let (($x178 (and (not $x74) $x246)))
 (let (($x237 (and (and (and (and (and (and $x178 $x35) $x185) $x143) $x200) $x248) $x137)))
 (let (($x230 (and $x237 $x11)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x164)))
 (let (($x31 (or false (or false (and (and true (or $x141 $x59)) (or $x20 $x73))))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x75 (and $x168 $x230)))
 (let (($x261 (= $x75 true)))
 (let (($x290 (= $x261 true)))
 (let (($x202 (= $x290 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x188 (concat ?x34 (concat ?x220 ?x76)))))
 (let (($x97 (= ?x144 input.dst.llvm-%x)))
 (let (($x26 (= $x97 true)))
 (let (($x71 (= $x26 true)))
 (let (($x300 (and $x71 $x202)))
 (let (($x153 (and $x300 $x304)))
 (let (($x19 (and $x153 $x64)))
 (let (($x169 (and $x19 $x305)))
 (let (($x319 (and $x169 $x243)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x99 (and $x56 $x319)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x228 (and $x8 $x99)))
 (let (($x172 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x28 (and $x172 $x228)))
 (let (($x274 (=> $x28 $x222)))
 (not $x274))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x298 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x292 (= $x298 true)))
 (let (($x222 (= $x292 true)))
 (let (($x213 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let ((?x249 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1712X)))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var1712X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1712X)))
 (=> $x303 (= ?x152 ?x249))))))
 ))
 (let (($x45 (forall ((input.ind-%var1711X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1711X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1711X)))
 (= $x303 $x206))))
 ))
 (let (($x289 (and $x45 $x213)))
 (let (($x243 (= $x289 true)))
 (let (($x68 (forall ((input.ind-%var1706X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var1706X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x46))))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var1706X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1706X)))
 (=> $x303 (= ?x152 ?x223))))))))
 ))
 (let (($x95 (forall ((input.ind-%var1705X (_ BitVec 32)) )(let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1705X)))
 (= $x303 (and (bvule (_ bv0 32) input.ind-%var1705X) (bvult input.ind-%var1705X input.dst.llvm-%n)))))
 ))
 (let (($x116 (and $x95 $x68)))
 (let (($x305 (= $x116 true)))
 (let ((?x259 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x315 (concat ?x142 (concat ?x296 (concat ?x91 ?x259)))))
 (let (($x79 (= ?x315 input.dst.llvm-%n)))
 (let (($x282 (= $x79 true)))
 (let (($x64 (= $x282 true)))
 (let (($x134 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x158 (= $x134 true)))
 (let (($x101 (= $x158 true)))
 (let (($x304 (= $x101 true)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x118)))
 (let ((?x277 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x277)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x254 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x250 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x254)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x267 (and $x57 $x250)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x317 $x267)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x229 (and $x280 $x218)))
 (let (($x124 (not $x229)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x25 $x215)))
 (let (($x35 (and (not $x155) $x124)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x171 $x44)))
 (let (($x246 (not $x51)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x49 $x122)))
 (let (($x178 (and (not $x74) $x246)))
 (let (($x237 (and (and (and (and (and (and $x178 $x35) $x185) $x143) $x200) $x248) $x137)))
 (let (($x230 (and $x237 $x11)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x164)))
 (let (($x31 (or false (or false (and (and true (or $x141 $x59)) (or $x20 $x73))))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x75 (and $x168 $x230)))
 (let (($x261 (= $x75 true)))
 (let (($x290 (= $x261 true)))
 (let (($x202 (= $x290 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x188 (concat ?x34 (concat ?x220 ?x76)))))
 (let (($x97 (= ?x144 input.dst.llvm-%x)))
 (let (($x26 (= $x97 true)))
 (let (($x71 (= $x26 true)))
 (let (($x300 (and $x71 $x202)))
 (let (($x153 (and $x300 $x304)))
 (let (($x19 (and $x153 $x64)))
 (let (($x169 (and $x19 $x305)))
 (let (($x319 (and $x169 $x243)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x99 (and $x56 $x319)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x228 (and $x8 $x99)))
 (let (($x172 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x28 (and $x172 $x228)))
 (let (($x274 (=> $x28 $x222)))
 (not $x274))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x304 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x93 (=> $x304 true)))
 (let (($x193 (= $x93 true)))
 (let (($x212 (= $x193 true)))
 (let (($x110 (forall ((input.ind-%var1724X (_ BitVec 32)) )(let ((?x167 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1724X)))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var1724X)))
 (let (($x95 (input.spec-%var-x-1.0.1 input.ind-%var1724X)))
 (=> $x95 (= ?x223 ?x167))))))
 ))
 (let (($x108 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let (($x198 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1723X)))
 (let (($x95 (input.spec-%var-x-1.0.1 input.ind-%var1723X)))
 (= $x95 $x198))))
 ))
 (let (($x257 (and $x108 $x110)))
 (let (($x78 (= $x257 true)))
 (let (($x239 (forall ((input.ind-%var1718X (_ BitVec 32)) )(let ((?x28 (bvadd (bvmul input.ind-%var1718X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x274))))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var1718X)))
 (let (($x95 (input.spec-%var-x-1.0.1 input.ind-%var1718X)))
 (=> $x95 (= ?x223 ?x12))))))))
 ))
 (let (($x196 (forall ((input.ind-%var1717X (_ BitVec 32)) )(let (($x95 (input.spec-%var-x-1.0.1 input.ind-%var1717X)))
 (= $x95 (and (bvule (_ bv0 32) input.ind-%var1717X) (bvult input.ind-%var1717X input.dst.llvm-%n)))))
 ))
 (let (($x102 (and $x196 $x239)))
 (let (($x301 (= $x102 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x259 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x282 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x282 (concat ?x315 (concat ?x259 ?x48)))))
 (let (($x19 (= ?x64 input.dst.llvm-%x)))
 (let (($x297 (= $x19 true)))
 (let (($x303 (= $x297 true)))
 (let (($x153 (= $x304 true)))
 (let (($x287 (= $x153 true)))
 (let (($x142 (= $x287 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x277 (= (_ bv0 32) ?x253)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x165)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x317 $x254)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (and $x36 $x250)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x218 $x229)))
 (let (($x35 (not $x124)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (and $x155 $x320)))
 (let (($x70 (and (not $x280) $x35)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x44 $x51)))
 (let (($x178 (not $x246)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x115 $x81)))
 (let (($x215 (and (not $x171) $x178)))
 (let (($x75 (and (and (and (and (and (and $x215 $x70) $x185) $x143) $x267) $x256) $x248)))
 (let (($x261 (and $x75 $x277)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x122 (or false (or false (and (and true (or $x273 $x120)) (or $x299 $x24))))))
 (let (($x294 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x122)))
 (let (($x290 (and $x294 $x261)))
 (let (($x202 (= $x290 true)))
 (let (($x300 (= $x202 true)))
 (let (($x90 (= $x300 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x233 (concat ?x144 (concat ?x220 (concat ?x94 ?x162)))))
 (let (($x26 (= ?x233 input.dst.llvm-%n)))
 (let (($x71 (= $x26 true)))
 (let (($x232 (= $x71 true)))
 (let (($x60 (and $x232 $x90)))
 (let (($x180 (and $x60 $x142)))
 (let (($x136 (and $x180 $x303)))
 (let (($x238 (and $x136 $x301)))
 (let (($x181 (and $x238 $x78)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x264 (and $x125 $x181)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x244 (and $x21 $x264)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x84 (and $x72 $x244)))
 (let (($x255 (=> $x84 $x212)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x304 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x93 (=> $x304 true)))
 (let (($x193 (= $x93 true)))
 (let (($x212 (= $x193 true)))
 (let (($x110 (forall ((input.ind-%var1724X (_ BitVec 32)) )(let ((?x167 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1724X)))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var1724X)))
 (let (($x95 (input.spec-%var-x-1.0.1 input.ind-%var1724X)))
 (=> $x95 (= ?x223 ?x167))))))
 ))
 (let (($x108 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let (($x198 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1723X)))
 (let (($x95 (input.spec-%var-x-1.0.1 input.ind-%var1723X)))
 (= $x95 $x198))))
 ))
 (let (($x257 (and $x108 $x110)))
 (let (($x78 (= $x257 true)))
 (let (($x239 (forall ((input.ind-%var1718X (_ BitVec 32)) )(let ((?x28 (bvadd (bvmul input.ind-%var1718X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x274))))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var1718X)))
 (let (($x95 (input.spec-%var-x-1.0.1 input.ind-%var1718X)))
 (=> $x95 (= ?x223 ?x12))))))))
 ))
 (let (($x196 (forall ((input.ind-%var1717X (_ BitVec 32)) )(let (($x95 (input.spec-%var-x-1.0.1 input.ind-%var1717X)))
 (= $x95 (and (bvule (_ bv0 32) input.ind-%var1717X) (bvult input.ind-%var1717X input.dst.llvm-%n)))))
 ))
 (let (($x102 (and $x196 $x239)))
 (let (($x301 (= $x102 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x259 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x282 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x282 (concat ?x315 (concat ?x259 ?x48)))))
 (let (($x19 (= ?x64 input.dst.llvm-%x)))
 (let (($x297 (= $x19 true)))
 (let (($x303 (= $x297 true)))
 (let (($x153 (= $x304 true)))
 (let (($x287 (= $x153 true)))
 (let (($x142 (= $x287 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x277 (= (_ bv0 32) ?x253)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x165)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x317 $x254)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (and $x36 $x250)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x218 $x229)))
 (let (($x35 (not $x124)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (and $x155 $x320)))
 (let (($x70 (and (not $x280) $x35)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x44 $x51)))
 (let (($x178 (not $x246)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x115 $x81)))
 (let (($x215 (and (not $x171) $x178)))
 (let (($x75 (and (and (and (and (and (and $x215 $x70) $x185) $x143) $x267) $x256) $x248)))
 (let (($x261 (and $x75 $x277)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x122 (or false (or false (and (and true (or $x273 $x120)) (or $x299 $x24))))))
 (let (($x294 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x122)))
 (let (($x290 (and $x294 $x261)))
 (let (($x202 (= $x290 true)))
 (let (($x300 (= $x202 true)))
 (let (($x90 (= $x300 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x233 (concat ?x144 (concat ?x220 (concat ?x94 ?x162)))))
 (let (($x26 (= ?x233 input.dst.llvm-%n)))
 (let (($x71 (= $x26 true)))
 (let (($x232 (= $x71 true)))
 (let (($x60 (and $x232 $x90)))
 (let (($x180 (and $x60 $x142)))
 (let (($x136 (and $x180 $x303)))
 (let (($x238 (and $x136 $x301)))
 (let (($x181 (and $x238 $x78)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x264 (and $x125 $x181)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x244 (and $x21 $x264)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x84 (and $x72 $x244)))
 (let (($x255 (=> $x84 $x212)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x174))))
 (let ((?x123 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x283)))
 (let ((?x269 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x13 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x269)))
 (let ((?x258 (bvmul (_ bv4294967295 32) ?x13)))
 (let ((?x6 (bvneg ?x258)))
 (let (($x209 (= ?x6 ?x123)))
 (let (($x308 (= $x209 true)))
 (let (($x186 (forall ((input.ind-%var1742X (_ BitVec 32)) )(let ((?x271 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1742X)))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1742X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1742X)))
 (=> $x243 (= ?x80 ?x271))))))
 ))
 (let (($x312 (forall ((input.ind-%var1741X (_ BitVec 32)) )(let (($x24 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1741X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1741X)))
 (= $x243 $x24))))
 ))
 (let (($x224 (and $x312 $x186)))
 (let (($x293 (= $x224 true)))
 (let (($x83 (forall ((input.ind-%var1736X (_ BitVec 32)) )(let ((?x38 (bvadd (bvmul input.ind-%var1736X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x82))))
 (let ((?x271 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1736X)))
 (let (($x24 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1736X)))
 (=> $x24 (= ?x271 ?x154))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1735X (_ BitVec 32)) )(let (($x319 (and (bvule (_ bv0 32) input.ind-%var1735X) (bvult input.ind-%var1735X input.dst.llvm-%n))))
 (let (($x24 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1735X)))
 (= $x24 $x319))))
 ))
 (let (($x159 (and $x197 $x83)))
 (let (($x18 (= $x159 true)))
 (let (($x54 (forall ((input.ind-%var1730X (_ BitVec 32)) )(let ((?x38 (bvadd (bvmul input.ind-%var1730X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x82))))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1730X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1730X)))
 (=> $x243 (= ?x80 ?x154))))))))
 ))
 (let (($x242 (forall ((input.ind-%var1729X (_ BitVec 32)) )(let (($x319 (and (bvule (_ bv0 32) input.ind-%var1729X) (bvult input.ind-%var1729X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1729X)))
 (= $x243 $x319))))
 ))
 (let (($x43 (and $x242 $x54)))
 (let (($x135 (= $x43 true)))
 (let ((?x213 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x213)))
 (let (($x85 (= ?x289 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x85 true)))
 (let (($x92 (= $x206 true)))
 (let ((?x270 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x270)))
 (let (($x190 (= ?x203 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x190 true)))
 (let (($x166 (= $x126 true)))
 (let ((?x296 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x211 (= (_ bv0 2) ?x296)))
 (let (($x39 (= $x211 true)))
 (let (($x152 (= $x39 true)))
 (let (($x212 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x255 (= $x212 true)))
 (let (($x263 (= $x255 true)))
 (let (($x50 (= $x263 true)))
 (let (($x110 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 ?x21)) (bvult ?x8 (bvsub ?x8 ?x21)))))
 (let (($x301 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x198 (ite $x301 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x231 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x239 (bvmul (_ bv4 64) ?x231)))
 (let ((?x102 ((_ extract 63 32) ?x239)))
 (let (($x288 (= ?x102 ?x198)))
 (let (($x257 (and $x288 $x110)))
 (let (($x12 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x78 (and $x12 $x257)))
 (let (($x181 (= true $x78)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (=> $x72 $x181)))
 (let (($x244 (= $x264 true)))
 (let (($x84 (= $x244 true)))
 (let (($x93 (= $x84 true)))
 (let (($x113 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x204 (= $x113 true)))
 (let (($x292 (= $x204 true)))
 (let (($x222 (= $x292 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (= $x68 true)))
 (let (($x28 (= $x228 true)))
 (let (($x119 (= $x28 true)))
 (let (($x132 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x187 (= $x132 true)))
 (let (($x236 (= $x187 true)))
 (let (($x196 (= $x236 true)))
 (let (($x303 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x303 true)))
 (let (($x89 (= $x136 true)))
 (let (($x95 (= $x89 true)))
 (let (($x219 (= $x72 true)))
 (let (($x241 (= $x219 true)))
 (let (($x64 (= $x241 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x101)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x134)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x261)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x277 $x290)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (and $x253 $x202)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x254 $x250)))
 (let (($x11 (not $x267)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x36 $x317)))
 (let (($x256 (and (not $x57) $x11)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x137 $x185)))
 (let (($x214 (not $x237)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x115 $x81)))
 (let (($x118 (and (not $x70) $x214)))
 (let (($x282 (and (and (and (and (and (and $x118 $x256) $x165) $x75) $x300) $x60) $x158)))
 (let (($x47 (and $x282 $x304)))
 (let (($x320 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x229 (or false (or false (and (and true (or $x51 $x246)) (or $x155 $x320))))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x229)))
 (let (($x315 (and $x35 $x47)))
 (let (($x91 (= $x315 true)))
 (let (($x259 (= $x91 true)))
 (let (($x48 (= $x259 true)))
 (let (($x19 (and $x48 $x64)))
 (let (($x52 (and $x19 $x95)))
 (let (($x223 (and $x52 $x196)))
 (let (($x182 (and $x223 $x119)))
 (let (($x298 (and $x182 $x222)))
 (let (($x193 (and $x298 $x93)))
 (let (($x104 (and $x193 $x50)))
 (let (($x163 (and $x104 $x152)))
 (let (($x116 (and $x163 $x166)))
 (let (($x169 (and $x116 $x92)))
 (let (($x189 (and $x169 $x135)))
 (let (($x151 (and $x189 $x18)))
 (let (($x191 (and $x151 $x293)))
 (let (($x168 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x49 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x49 (_ bv1 32))))
 (let (($x103 (and $x122 $x191)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x307 (and $x73 $x103)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x295 (and $x20 $x307)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x67 (and $x273 $x295)))
 (let (($x71 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd ?x8 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x162 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x74 (or false (or false (and (and true (or $x94 $x162)) (or $x26 $x71))))))
 (let (($x201 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x74)))
 (let (($x56 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x74)))
 (let (($x111 (and $x56 $x67)))
 (let (($x173 (=> $x111 $x308)))
 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x174))))
 (let ((?x123 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x283)))
 (let ((?x269 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x13 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x269)))
 (let ((?x258 (bvmul (_ bv4294967295 32) ?x13)))
 (let ((?x6 (bvneg ?x258)))
 (let (($x209 (= ?x6 ?x123)))
 (let (($x308 (= $x209 true)))
 (let (($x186 (forall ((input.ind-%var1742X (_ BitVec 32)) )(let ((?x271 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1742X)))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1742X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1742X)))
 (=> $x243 (= ?x80 ?x271))))))
 ))
 (let (($x312 (forall ((input.ind-%var1741X (_ BitVec 32)) )(let (($x24 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1741X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1741X)))
 (= $x243 $x24))))
 ))
 (let (($x224 (and $x312 $x186)))
 (let (($x293 (= $x224 true)))
 (let (($x83 (forall ((input.ind-%var1736X (_ BitVec 32)) )(let ((?x38 (bvadd (bvmul input.ind-%var1736X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x82))))
 (let ((?x271 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1736X)))
 (let (($x24 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1736X)))
 (=> $x24 (= ?x271 ?x154))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1735X (_ BitVec 32)) )(let (($x319 (and (bvule (_ bv0 32) input.ind-%var1735X) (bvult input.ind-%var1735X input.dst.llvm-%n))))
 (let (($x24 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1735X)))
 (= $x24 $x319))))
 ))
 (let (($x159 (and $x197 $x83)))
 (let (($x18 (= $x159 true)))
 (let (($x54 (forall ((input.ind-%var1730X (_ BitVec 32)) )(let ((?x38 (bvadd (bvmul input.ind-%var1730X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x82))))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1730X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1730X)))
 (=> $x243 (= ?x80 ?x154))))))))
 ))
 (let (($x242 (forall ((input.ind-%var1729X (_ BitVec 32)) )(let (($x319 (and (bvule (_ bv0 32) input.ind-%var1729X) (bvult input.ind-%var1729X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1729X)))
 (= $x243 $x319))))
 ))
 (let (($x43 (and $x242 $x54)))
 (let (($x135 (= $x43 true)))
 (let ((?x213 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x213)))
 (let (($x85 (= ?x289 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x85 true)))
 (let (($x92 (= $x206 true)))
 (let ((?x270 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x270)))
 (let (($x190 (= ?x203 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x190 true)))
 (let (($x166 (= $x126 true)))
 (let ((?x296 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x211 (= (_ bv0 2) ?x296)))
 (let (($x39 (= $x211 true)))
 (let (($x152 (= $x39 true)))
 (let (($x212 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x255 (= $x212 true)))
 (let (($x263 (= $x255 true)))
 (let (($x50 (= $x263 true)))
 (let (($x110 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 ?x21)) (bvult ?x8 (bvsub ?x8 ?x21)))))
 (let (($x301 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x198 (ite $x301 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x231 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x239 (bvmul (_ bv4 64) ?x231)))
 (let ((?x102 ((_ extract 63 32) ?x239)))
 (let (($x288 (= ?x102 ?x198)))
 (let (($x257 (and $x288 $x110)))
 (let (($x12 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x78 (and $x12 $x257)))
 (let (($x181 (= true $x78)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (=> $x72 $x181)))
 (let (($x244 (= $x264 true)))
 (let (($x84 (= $x244 true)))
 (let (($x93 (= $x84 true)))
 (let (($x113 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x204 (= $x113 true)))
 (let (($x292 (= $x204 true)))
 (let (($x222 (= $x292 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (= $x68 true)))
 (let (($x28 (= $x228 true)))
 (let (($x119 (= $x28 true)))
 (let (($x132 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x187 (= $x132 true)))
 (let (($x236 (= $x187 true)))
 (let (($x196 (= $x236 true)))
 (let (($x303 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x303 true)))
 (let (($x89 (= $x136 true)))
 (let (($x95 (= $x89 true)))
 (let (($x219 (= $x72 true)))
 (let (($x241 (= $x219 true)))
 (let (($x64 (= $x241 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x101)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x134)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x261)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x277 $x290)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (and $x253 $x202)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x254 $x250)))
 (let (($x11 (not $x267)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x36 $x317)))
 (let (($x256 (and (not $x57) $x11)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x137 $x185)))
 (let (($x214 (not $x237)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x115 $x81)))
 (let (($x118 (and (not $x70) $x214)))
 (let (($x282 (and (and (and (and (and (and $x118 $x256) $x165) $x75) $x300) $x60) $x158)))
 (let (($x47 (and $x282 $x304)))
 (let (($x320 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x229 (or false (or false (and (and true (or $x51 $x246)) (or $x155 $x320))))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x229)))
 (let (($x315 (and $x35 $x47)))
 (let (($x91 (= $x315 true)))
 (let (($x259 (= $x91 true)))
 (let (($x48 (= $x259 true)))
 (let (($x19 (and $x48 $x64)))
 (let (($x52 (and $x19 $x95)))
 (let (($x223 (and $x52 $x196)))
 (let (($x182 (and $x223 $x119)))
 (let (($x298 (and $x182 $x222)))
 (let (($x193 (and $x298 $x93)))
 (let (($x104 (and $x193 $x50)))
 (let (($x163 (and $x104 $x152)))
 (let (($x116 (and $x163 $x166)))
 (let (($x169 (and $x116 $x92)))
 (let (($x189 (and $x169 $x135)))
 (let (($x151 (and $x189 $x18)))
 (let (($x191 (and $x151 $x293)))
 (let (($x168 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x49 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x49 (_ bv1 32))))
 (let (($x103 (and $x122 $x191)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x307 (and $x73 $x103)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x295 (and $x20 $x307)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x67 (and $x273 $x295)))
 (let (($x71 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd ?x8 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x162 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x74 (or false (or false (and (and true (or $x94 $x162)) (or $x26 $x71))))))
 (let (($x201 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x74)))
 (let (($x56 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x74)))
 (let (($x111 (and $x56 $x67)))
 (let (($x173 (=> $x111 $x308)))
 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 204 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x291 (bvule ?x69 (_ bv4294967294 32))))
 (let (($x109 (= $x291 true)))
 (let (($x77 (= $x109 true)))
 (let (($x199 (forall ((input.ind-%var1766X (_ BitVec 32)) )(let ((?x172 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1766X)))
 (let ((?x130 (input.spec-%var-x-1.1.1 input.ind-%var1766X)))
 (let (($x281 (input.spec-%var-x-1.0.1 input.ind-%var1766X)))
 (=> $x281 (= ?x130 ?x172))))))
 ))
 (let (($x33 (forall ((input.ind-%var1765X (_ BitVec 32)) )(let (($x171 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1765X)))
 (let (($x281 (input.spec-%var-x-1.0.1 input.ind-%var1765X)))
 (= $x281 $x171))))
 ))
 (let (($x205 (and $x33 $x199)))
 (let (($x210 (= $x205 true)))
 (let (($x221 (forall ((input.ind-%var1760X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1760X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x191))))
 (let ((?x172 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1760X)))
 (let (($x171 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1760X)))
 (=> $x171 (= ?x172 ?x269))))))))
 ))
 (let (($x209 (forall ((input.ind-%var1759X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1759X) (bvult input.ind-%var1759X input.dst.llvm-%n))))
 (let (($x171 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1759X)))
 (= $x171 $x16))))
 ))
 (let (($x284 (and $x209 $x221)))
 (let (($x14 (= $x284 true)))
 (let (($x6 (forall ((input.ind-%var1754X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1754X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x191))))
 (let ((?x130 (input.spec-%var-x-1.1.1 input.ind-%var1754X)))
 (let (($x281 (input.spec-%var-x-1.0.1 input.ind-%var1754X)))
 (=> $x281 (= ?x130 ?x269))))))))
 ))
 (let (($x309 (forall ((input.ind-%var1753X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1753X) (bvult input.ind-%var1753X input.dst.llvm-%n))))
 (let (($x281 (input.spec-%var-x-1.0.1 input.ind-%var1753X)))
 (= $x281 $x16))))
 ))
 (let (($x106 (and $x309 $x6)))
 (let (($x216 (= $x106 true)))
 (let ((?x139 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x139)))
 (let (($x207 (= ?x243 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x266 (= $x207 true)))
 (let (($x319 (= $x266 true)))
 (let (($x249 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x85 (= $x249 true)))
 (let (($x206 (= $x85 true)))
 (let (($x92 (= $x206 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x116 (= $x166 true)))
 (let (($x305 (= $x116 true)))
 (let (($x213 (= $x305 true)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x255)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x193)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (and $x257 $x181)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x110 $x264)))
 (let (($x265 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x301 (and $x239 $x102)))
 (let (($x238 (not $x301)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (and $x12 $x145)))
 (let (($x288 (and (not $x231) $x238)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x204 $x292)))
 (let (($x298 (not $x222)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x19 $x297)))
 (let (($x217 (and (not $x113) $x298)))
 (let (($x39 (and (and (and (and (and (and $x217 $x288) $x108) $x265) $x244) $x93) $x212)))
 (let (($x152 (and $x39 $x263)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x28 (or false (or false (and (and true (or $x95 $x52)) (or $x236 $x196))))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x28)))
 (let (($x163 (and $x182 $x152)))
 (let (($x270 (= $x163 true)))
 (let (($x203 (= $x270 true)))
 (let (($x190 (= $x203 true)))
 (let ((?x91 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x259 (= (_ bv0 2) ?x91)))
 (let (($x48 (= $x259 true)))
 (let (($x219 (= $x48 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x290 (bvsub ?x8 ?x21)))
 (let (($x90 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x290) (bvult ?x8 ?x290))))
 (let (($x253 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x277 (ite $x253 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x75 (bvmul (_ bv4 64) ?x248)))
 (let ((?x142 ((_ extract 63 32) ?x75)))
 (let (($x261 (= ?x142 ?x277)))
 (let (($x60 (and $x261 $x90)))
 (let (($x165 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x79 (and $x165 $x60)))
 (let (($x134 (= true $x79)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (=> $x72 $x134)))
 (let (($x282 (= $x158 true)))
 (let (($x101 (= $x282 true)))
 (let (($x304 (= $x101 true)))
 (let (($x254 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x250 (= $x254 true)))
 (let (($x267 (= $x250 true)))
 (let (($x11 (= $x267 true)))
 (let (($x214 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x214 true)))
 (let (($x36 (= $x118 true)))
 (let (($x317 (= $x36 true)))
 (let (($x70 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x70 true)))
 (let (($x137 (= $x143 true)))
 (let (($x185 (= $x137 true)))
 (let ((?x280 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x280)))
 (let (($x229 (= ?x5 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x35 (= $x229 true)))
 (let (($x115 (= $x35 true)))
 (let (($x246 (= $x72 true)))
 (let (($x178 (= $x246 true)))
 (let (($x215 (= $x178 true)))
 (let (($x81 (and $x215 $x115)))
 (let (($x237 (and $x81 $x185)))
 (let (($x57 (and $x237 $x317)))
 (let (($x256 (and $x57 $x11)))
 (let (($x47 (and $x256 $x304)))
 (let (($x241 (and $x47 $x219)))
 (let (($x126 (and $x241 $x190)))
 (let (($x289 (and $x126 $x213)))
 (let (($x169 (and $x289 $x92)))
 (let (($x184 (and $x169 $x319)))
 (let (($x245 (and $x184 $x216)))
 (let (($x128 (and $x245 $x14)))
 (let (($x10 (and $x128 $x210)))
 (let (($x124 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x44 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x44 (_ bv1 32))))
 (let (($x225 (and $x51 $x10)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x156 (and $x168 $x225)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x192 (and $x235 $x156)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x59 $x192)))
 (let (($x164 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd ?x8 (_ bv3 32))))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x76 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x56 (or false (or false (and (and true (or $x160 $x76)) (or $x232 $x164))))))
 (let (($x273 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x56)))
 (let (($x7 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x56)))
 (let (($x252 (and $x7 $x98)))
 (let (($x41 (=> $x252 $x77)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x291 (bvule ?x69 (_ bv4294967294 32))))
 (let (($x109 (= $x291 true)))
 (let (($x77 (= $x109 true)))
 (let (($x199 (forall ((input.ind-%var1766X (_ BitVec 32)) )(let ((?x172 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1766X)))
 (let ((?x130 (input.spec-%var-x-1.1.1 input.ind-%var1766X)))
 (let (($x281 (input.spec-%var-x-1.0.1 input.ind-%var1766X)))
 (=> $x281 (= ?x130 ?x172))))))
 ))
 (let (($x33 (forall ((input.ind-%var1765X (_ BitVec 32)) )(let (($x171 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1765X)))
 (let (($x281 (input.spec-%var-x-1.0.1 input.ind-%var1765X)))
 (= $x281 $x171))))
 ))
 (let (($x205 (and $x33 $x199)))
 (let (($x210 (= $x205 true)))
 (let (($x221 (forall ((input.ind-%var1760X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1760X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x191))))
 (let ((?x172 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1760X)))
 (let (($x171 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1760X)))
 (=> $x171 (= ?x172 ?x269))))))))
 ))
 (let (($x209 (forall ((input.ind-%var1759X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1759X) (bvult input.ind-%var1759X input.dst.llvm-%n))))
 (let (($x171 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1759X)))
 (= $x171 $x16))))
 ))
 (let (($x284 (and $x209 $x221)))
 (let (($x14 (= $x284 true)))
 (let (($x6 (forall ((input.ind-%var1754X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1754X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x191))))
 (let ((?x130 (input.spec-%var-x-1.1.1 input.ind-%var1754X)))
 (let (($x281 (input.spec-%var-x-1.0.1 input.ind-%var1754X)))
 (=> $x281 (= ?x130 ?x269))))))))
 ))
 (let (($x309 (forall ((input.ind-%var1753X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1753X) (bvult input.ind-%var1753X input.dst.llvm-%n))))
 (let (($x281 (input.spec-%var-x-1.0.1 input.ind-%var1753X)))
 (= $x281 $x16))))
 ))
 (let (($x106 (and $x309 $x6)))
 (let (($x216 (= $x106 true)))
 (let ((?x139 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x139)))
 (let (($x207 (= ?x243 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x266 (= $x207 true)))
 (let (($x319 (= $x266 true)))
 (let (($x249 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x85 (= $x249 true)))
 (let (($x206 (= $x85 true)))
 (let (($x92 (= $x206 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x116 (= $x166 true)))
 (let (($x305 (= $x116 true)))
 (let (($x213 (= $x305 true)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x255)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x193)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (and $x257 $x181)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x110 $x264)))
 (let (($x265 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x301 (and $x239 $x102)))
 (let (($x238 (not $x301)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (and $x12 $x145)))
 (let (($x288 (and (not $x231) $x238)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x204 $x292)))
 (let (($x298 (not $x222)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x19 $x297)))
 (let (($x217 (and (not $x113) $x298)))
 (let (($x39 (and (and (and (and (and (and $x217 $x288) $x108) $x265) $x244) $x93) $x212)))
 (let (($x152 (and $x39 $x263)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x28 (or false (or false (and (and true (or $x95 $x52)) (or $x236 $x196))))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x28)))
 (let (($x163 (and $x182 $x152)))
 (let (($x270 (= $x163 true)))
 (let (($x203 (= $x270 true)))
 (let (($x190 (= $x203 true)))
 (let ((?x91 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x259 (= (_ bv0 2) ?x91)))
 (let (($x48 (= $x259 true)))
 (let (($x219 (= $x48 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x290 (bvsub ?x8 ?x21)))
 (let (($x90 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x290) (bvult ?x8 ?x290))))
 (let (($x253 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x277 (ite $x253 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x75 (bvmul (_ bv4 64) ?x248)))
 (let ((?x142 ((_ extract 63 32) ?x75)))
 (let (($x261 (= ?x142 ?x277)))
 (let (($x60 (and $x261 $x90)))
 (let (($x165 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x79 (and $x165 $x60)))
 (let (($x134 (= true $x79)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (=> $x72 $x134)))
 (let (($x282 (= $x158 true)))
 (let (($x101 (= $x282 true)))
 (let (($x304 (= $x101 true)))
 (let (($x254 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x250 (= $x254 true)))
 (let (($x267 (= $x250 true)))
 (let (($x11 (= $x267 true)))
 (let (($x214 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x214 true)))
 (let (($x36 (= $x118 true)))
 (let (($x317 (= $x36 true)))
 (let (($x70 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x70 true)))
 (let (($x137 (= $x143 true)))
 (let (($x185 (= $x137 true)))
 (let ((?x280 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x280)))
 (let (($x229 (= ?x5 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x35 (= $x229 true)))
 (let (($x115 (= $x35 true)))
 (let (($x246 (= $x72 true)))
 (let (($x178 (= $x246 true)))
 (let (($x215 (= $x178 true)))
 (let (($x81 (and $x215 $x115)))
 (let (($x237 (and $x81 $x185)))
 (let (($x57 (and $x237 $x317)))
 (let (($x256 (and $x57 $x11)))
 (let (($x47 (and $x256 $x304)))
 (let (($x241 (and $x47 $x219)))
 (let (($x126 (and $x241 $x190)))
 (let (($x289 (and $x126 $x213)))
 (let (($x169 (and $x289 $x92)))
 (let (($x184 (and $x169 $x319)))
 (let (($x245 (and $x184 $x216)))
 (let (($x128 (and $x245 $x14)))
 (let (($x10 (and $x128 $x210)))
 (let (($x124 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x44 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x44 (_ bv1 32))))
 (let (($x225 (and $x51 $x10)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x156 (and $x168 $x225)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x192 (and $x235 $x156)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x59 $x192)))
 (let (($x164 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd ?x8 (_ bv3 32))))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x76 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x56 (or false (or false (and (and true (or $x160 $x76)) (or $x232 $x164))))))
 (let (($x273 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x56)))
 (let (($x7 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x56)))
 (let (($x252 (and $x7 $x98)))
 (let (($x41 (=> $x252 $x77)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x112 (bvule ?x173 (_ bv4294967294 32))))
 (let (($x37 (= $x112 true)))
 (let (($x262 (= $x37 true)))
 (let (($x17 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let ((?x43 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1789X)))
 (let ((?x269 (input.spec-%var-x-1.1.1 input.ind-%var1789X)))
 (let (($x130 (input.spec-%var-x-1.0.1 input.ind-%var1789X)))
 (=> $x130 (= ?x269 ?x43))))))
 ))
 (let (($x176 (forall ((input.ind-%var1788X (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1788X)))
 (let (($x130 (input.spec-%var-x-1.0.1 input.ind-%var1788X)))
 (= $x130 $x51))))
 ))
 (let (($x226 (and $x176 $x17)))
 (let (($x195 (= $x226 true)))
 (let (($x80 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let ((?x157 (bvadd (bvmul input.ind-%var1783X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x210))))
 (let ((?x43 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1783X)))
 (let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1783X)))
 (=> $x51 (= ?x43 ?x252))))))))
 ))
 (let (($x154 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x307 (and (bvule (_ bv0 32) input.ind-%var1782X) (bvult input.ind-%var1782X input.dst.llvm-%n))))
 (let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1782X)))
 (= $x51 $x307))))
 ))
 (let (($x175 (and $x154 $x80)))
 (let (($x117 (= $x175 true)))
 (let (($x109 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let ((?x157 (bvadd (bvmul input.ind-%var1777X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x210))))
 (let ((?x269 (input.spec-%var-x-1.1.1 input.ind-%var1777X)))
 (let (($x130 (input.spec-%var-x-1.0.1 input.ind-%var1777X)))
 (=> $x130 (= ?x269 ?x252))))))))
 ))
 (let (($x293 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let (($x307 (and (bvule (_ bv0 32) input.ind-%var1776X) (bvult input.ind-%var1776X input.dst.llvm-%n))))
 (let (($x130 (input.spec-%var-x-1.0.1 input.ind-%var1776X)))
 (= $x130 $x307))))
 ))
 (let (($x77 (and $x293 $x109)))
 (let (($x41 (= $x77 true)))
 (let ((?x184 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x184)))
 (let (($x281 (= ?x122 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x281 true)))
 (let (($x140 (= $x66 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x305 (bvsub ?x8 ?x21)))
 (let (($x85 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x305) (bvult ?x8 ?x305))))
 (let (($x126 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x166 (ite $x126 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x270 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvmul (_ bv4 64) ?x270)))
 (let ((?x190 ((_ extract 63 32) ?x203)))
 (let (($x116 (= ?x190 ?x166)))
 (let (($x206 (and $x116 $x85)))
 (let (($x152 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x92 (and $x152 $x206)))
 (let (($x169 (= true $x92)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (=> $x72 $x169)))
 (let (($x243 (= $x139 true)))
 (let (($x207 (= $x243 true)))
 (let (($x266 (= $x207 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x211 (= $x93 true)))
 (let (($x193 (= $x211 true)))
 (let (($x212 (= $x193 true)))
 (let (($x181 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (= $x181 true)))
 (let (($x244 (= $x264 true)))
 (let (($x296 (= $x244 true)))
 (let (($x265 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x15 (= $x265 true)))
 (let (($x110 (= $x15 true)))
 (let (($x257 (= $x110 true)))
 (let (($x167 (= $x72 true)))
 (let (($x108 (= $x167 true)))
 (let (($x104 (= $x108 true)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x292)))
 (let ((?x274 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x274)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let ((?x228 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x228)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x68 $x28)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x223 $x182)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x303 $x136)))
 (let (($x89 (not $x119)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x241 (and $x48 $x219)))
 (let (($x52 (and (not $x241) $x89)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x101 $x304)))
 (let (($x315 (not $x47)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x165 $x287)))
 (let (($x259 (and (not $x282) $x315)))
 (let (($x198 (and (and (and (and (and (and $x259 $x52) $x187) $x196) $x19) $x113) $x204)))
 (let (($x239 (and $x198 $x222)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x79 (or false (or false (and (and true (or $x253 $x277)) (or $x290 $x300))))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x102 (and $x158 $x239)))
 (let (($x301 (= $x102 true)))
 (let (($x238 (= $x301 true)))
 (let (($x288 (= $x238 true)))
 (let (($x250 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x267 (= $x250 true)))
 (let (($x11 (= $x267 true)))
 (let (($x256 (= $x11 true)))
 (let ((?x36 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x317 (= (_ bv0 2) ?x36)))
 (let (($x57 (= $x317 true)))
 (let (($x200 (= $x57 true)))
 (let (($x143 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x143 true)))
 (let (($x185 (= $x137 true)))
 (let (($x237 (= $x185 true)))
 (let ((?x5 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x218 (bvneg ?x5)))
 (let (($x35 (= ?x218 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x35 true)))
 (let (($x81 (= $x115 true)))
 (let (($x214 (and $x81 $x237)))
 (let (($x254 (and $x214 $x200)))
 (let (($x153 (and $x254 $x256)))
 (let (($x50 (and $x153 $x288)))
 (let (($x149 (and $x50 $x104)))
 (let (($x78 (and $x149 $x257)))
 (let (($x84 (and $x78 $x296)))
 (let (($x39 (and $x84 $x212)))
 (let (($x319 (and $x39 $x266)))
 (let (($x16 (and $x319 $x140)))
 (let (($x63 (and $x16 $x41)))
 (let (($x272 (and $x63 $x117)))
 (let (($x316 (and $x272 $x195)))
 (let (($x178 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x215 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x215 (_ bv1 32))))
 (let (($x283 (and $x155 $x316)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x49 $x283)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x312 (and $x73 $x133)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x285 (and $x120 $x312)))
 (let (($x74 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd ?x8 (_ bv3 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x26 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x7 (or false (or false (and (and true (or $x233 $x26)) (or $x141 $x74))))))
 (let (($x59 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x7)))
 (let (($x34 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x7)))
 (let (($x194 (and $x34 $x285)))
 (let (($x32 (=> $x194 $x262)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x112 (bvule ?x173 (_ bv4294967294 32))))
 (let (($x37 (= $x112 true)))
 (let (($x262 (= $x37 true)))
 (let (($x17 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let ((?x43 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1789X)))
 (let ((?x269 (input.spec-%var-x-1.1.1 input.ind-%var1789X)))
 (let (($x130 (input.spec-%var-x-1.0.1 input.ind-%var1789X)))
 (=> $x130 (= ?x269 ?x43))))))
 ))
 (let (($x176 (forall ((input.ind-%var1788X (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1788X)))
 (let (($x130 (input.spec-%var-x-1.0.1 input.ind-%var1788X)))
 (= $x130 $x51))))
 ))
 (let (($x226 (and $x176 $x17)))
 (let (($x195 (= $x226 true)))
 (let (($x80 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let ((?x157 (bvadd (bvmul input.ind-%var1783X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x210))))
 (let ((?x43 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1783X)))
 (let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1783X)))
 (=> $x51 (= ?x43 ?x252))))))))
 ))
 (let (($x154 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x307 (and (bvule (_ bv0 32) input.ind-%var1782X) (bvult input.ind-%var1782X input.dst.llvm-%n))))
 (let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1782X)))
 (= $x51 $x307))))
 ))
 (let (($x175 (and $x154 $x80)))
 (let (($x117 (= $x175 true)))
 (let (($x109 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let ((?x157 (bvadd (bvmul input.ind-%var1777X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x210))))
 (let ((?x269 (input.spec-%var-x-1.1.1 input.ind-%var1777X)))
 (let (($x130 (input.spec-%var-x-1.0.1 input.ind-%var1777X)))
 (=> $x130 (= ?x269 ?x252))))))))
 ))
 (let (($x293 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let (($x307 (and (bvule (_ bv0 32) input.ind-%var1776X) (bvult input.ind-%var1776X input.dst.llvm-%n))))
 (let (($x130 (input.spec-%var-x-1.0.1 input.ind-%var1776X)))
 (= $x130 $x307))))
 ))
 (let (($x77 (and $x293 $x109)))
 (let (($x41 (= $x77 true)))
 (let ((?x184 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x184)))
 (let (($x281 (= ?x122 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x281 true)))
 (let (($x140 (= $x66 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x305 (bvsub ?x8 ?x21)))
 (let (($x85 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x305) (bvult ?x8 ?x305))))
 (let (($x126 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x166 (ite $x126 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x270 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvmul (_ bv4 64) ?x270)))
 (let ((?x190 ((_ extract 63 32) ?x203)))
 (let (($x116 (= ?x190 ?x166)))
 (let (($x206 (and $x116 $x85)))
 (let (($x152 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x92 (and $x152 $x206)))
 (let (($x169 (= true $x92)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (=> $x72 $x169)))
 (let (($x243 (= $x139 true)))
 (let (($x207 (= $x243 true)))
 (let (($x266 (= $x207 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x211 (= $x93 true)))
 (let (($x193 (= $x211 true)))
 (let (($x212 (= $x193 true)))
 (let (($x181 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (= $x181 true)))
 (let (($x244 (= $x264 true)))
 (let (($x296 (= $x244 true)))
 (let (($x265 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x15 (= $x265 true)))
 (let (($x110 (= $x15 true)))
 (let (($x257 (= $x110 true)))
 (let (($x167 (= $x72 true)))
 (let (($x108 (= $x167 true)))
 (let (($x104 (= $x108 true)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x292)))
 (let ((?x274 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x274)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let ((?x228 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x228)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x68 $x28)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x223 $x182)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x303 $x136)))
 (let (($x89 (not $x119)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x241 (and $x48 $x219)))
 (let (($x52 (and (not $x241) $x89)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x101 $x304)))
 (let (($x315 (not $x47)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x165 $x287)))
 (let (($x259 (and (not $x282) $x315)))
 (let (($x198 (and (and (and (and (and (and $x259 $x52) $x187) $x196) $x19) $x113) $x204)))
 (let (($x239 (and $x198 $x222)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x79 (or false (or false (and (and true (or $x253 $x277)) (or $x290 $x300))))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x102 (and $x158 $x239)))
 (let (($x301 (= $x102 true)))
 (let (($x238 (= $x301 true)))
 (let (($x288 (= $x238 true)))
 (let (($x250 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x267 (= $x250 true)))
 (let (($x11 (= $x267 true)))
 (let (($x256 (= $x11 true)))
 (let ((?x36 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x317 (= (_ bv0 2) ?x36)))
 (let (($x57 (= $x317 true)))
 (let (($x200 (= $x57 true)))
 (let (($x143 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x143 true)))
 (let (($x185 (= $x137 true)))
 (let (($x237 (= $x185 true)))
 (let ((?x5 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x218 (bvneg ?x5)))
 (let (($x35 (= ?x218 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x35 true)))
 (let (($x81 (= $x115 true)))
 (let (($x214 (and $x81 $x237)))
 (let (($x254 (and $x214 $x200)))
 (let (($x153 (and $x254 $x256)))
 (let (($x50 (and $x153 $x288)))
 (let (($x149 (and $x50 $x104)))
 (let (($x78 (and $x149 $x257)))
 (let (($x84 (and $x78 $x296)))
 (let (($x39 (and $x84 $x212)))
 (let (($x319 (and $x39 $x266)))
 (let (($x16 (and $x319 $x140)))
 (let (($x63 (and $x16 $x41)))
 (let (($x272 (and $x63 $x117)))
 (let (($x316 (and $x272 $x195)))
 (let (($x178 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x215 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x215 (_ bv1 32))))
 (let (($x283 (and $x155 $x316)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x49 $x283)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x312 (and $x73 $x133)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x285 (and $x120 $x312)))
 (let (($x74 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd ?x8 (_ bv3 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x26 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x7 (or false (or false (and (and true (or $x233 $x26)) (or $x141 $x74))))))
 (let (($x59 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x7)))
 (let (($x34 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x7)))
 (let (($x194 (and $x34 $x285)))
 (let (($x32 (=> $x194 $x262)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x38 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x27 (bvmul (_ bv4294967295 32) ?x38)))
 (let ((?x61 (bvneg ?x27)))
 (let (($x311 (= ?x61 ?x148)))
 (let (($x127 (= $x311 true)))
 (let (($x64 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let ((?x6 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1812X)))
 (let ((?x252 (input.spec-%var-x-1.1.1 input.ind-%var1812X)))
 (let (($x269 (input.spec-%var-x-1.0.1 input.ind-%var1812X)))
 (=> $x269 (= ?x252 ?x6))))))
 ))
 (let (($x318 (forall ((input.ind-%var1811X (_ BitVec 32)) )(let (($x155 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1811X)))
 (let (($x269 (input.spec-%var-x-1.0.1 input.ind-%var1811X)))
 (= $x269 $x155))))
 ))
 (let (($x208 (and $x318 $x64)))
 (let (($x128 (= $x208 true)))
 (let (($x309 (forall ((input.ind-%var1806X (_ BitVec 32)) )(let ((?x107 (bvadd (bvmul input.ind-%var1806X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x195))))
 (let ((?x6 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1806X)))
 (let (($x155 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1806X)))
 (=> $x155 (= ?x6 ?x194))))))))
 ))
 (let (($x295 (forall ((input.ind-%var1805X (_ BitVec 32)) )(let (($x225 (and (bvule (_ bv0 32) input.ind-%var1805X) (bvult input.ind-%var1805X input.dst.llvm-%n))))
 (let (($x155 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1805X)))
 (= $x155 $x225))))
 ))
 (let (($x67 (and $x295 $x309)))
 (let (($x18 (= $x67 true)))
 (let (($x37 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let ((?x107 (bvadd (bvmul input.ind-%var1800X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x195))))
 (let ((?x252 (input.spec-%var-x-1.1.1 input.ind-%var1800X)))
 (let (($x269 (input.spec-%var-x-1.0.1 input.ind-%var1800X)))
 (=> $x269 (= ?x252 ?x194))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1799X (_ BitVec 32)) )(let (($x225 (and (bvule (_ bv0 32) input.ind-%var1799X) (bvult input.ind-%var1799X input.dst.llvm-%n))))
 (let (($x269 (input.spec-%var-x-1.0.1 input.ind-%var1799X)))
 (= $x269 $x225))))
 ))
 (let (($x262 (and $x205 $x37)))
 (let (($x32 (= $x262 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x16)))
 (let (($x130 (= ?x44 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x130 true)))
 (let (($x271 (= $x103 true)))
 (let (($x184 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x122 (= $x184 true)))
 (let (($x281 (= $x122 true)))
 (let (($x66 (= $x281 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x213 (bvsub ?x8 ?x21)))
 (let (($x85 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x213) (bvult ?x8 ?x213))))
 (let (($x126 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x166 (ite $x126 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x270 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvmul (_ bv4 64) ?x270)))
 (let ((?x190 ((_ extract 63 32) ?x203)))
 (let (($x116 (= ?x190 ?x166)))
 (let (($x206 (and $x116 $x85)))
 (let (($x152 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x92 (and $x152 $x206)))
 (let (($x169 (= true $x92)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (=> $x72 $x169)))
 (let (($x243 (= $x139 true)))
 (let (($x207 (= $x243 true)))
 (let (($x266 (= $x207 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x211 (= $x93 true)))
 (let (($x193 (= $x211 true)))
 (let (($x212 (= $x193 true)))
 (let (($x181 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (= $x181 true)))
 (let (($x244 (= $x264 true)))
 (let (($x296 (= $x244 true)))
 (let (($x265 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x15 (= $x265 true)))
 (let (($x110 (= $x15 true)))
 (let (($x257 (= $x110 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x50 true)))
 (let (($x108 (= $x167 true)))
 (let (($x104 (= $x108 true)))
 (let (($x239 (= $x72 true)))
 (let (($x102 (= $x239 true)))
 (let (($x301 (= $x102 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x68)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x12)))
 (let ((?x236 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x236)))
 (let ((?x298 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x298)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x52 $x132)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (and $x89 $x187)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x47 $x315)))
 (let (($x48 (not $x259)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (and $x91 $x101)))
 (let (($x241 (and (not $x304) $x48)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x60 $x79)))
 (let (($x165 (not $x158)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x254 $x250)))
 (let (($x282 (and (not $x90) $x165)))
 (let (($x113 (and (and (and (and (and (and $x282 $x241) $x303) $x119) $x217) $x196) $x223)))
 (let (($x231 (and $x113 $x228)))
 (let (($x253 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x290 (or false (or false (and (and true (or $x153 $x248)) (or $x142 $x253))))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x290)))
 (let (($x274 (and $x180 $x231)))
 (let (($x204 (= $x274 true)))
 (let (($x198 (= $x204 true)))
 (let (($x292 (= $x198 true)))
 (let ((?x214 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x118 (= (_ bv0 2) ?x214)))
 (let (($x36 (= $x118 true)))
 (let (($x317 (= $x36 true)))
 (let ((?x115 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x115)))
 (let (($x143 (= ?x81 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x137 (= $x143 true)))
 (let (($x185 (= $x137 true)))
 (let (($x57 (and $x185 $x317)))
 (let (($x222 (and $x57 $x292)))
 (let (($x238 (and $x222 $x301)))
 (let (($x149 (and $x238 $x104)))
 (let (($x78 (and $x149 $x257)))
 (let (($x84 (and $x78 $x296)))
 (let (($x39 (and $x84 $x212)))
 (let (($x319 (and $x39 $x266)))
 (let (($x140 (and $x319 $x66)))
 (let (($x307 (and $x140 $x271)))
 (let (($x299 (and $x307 $x32)))
 (let (($x151 (and $x299 $x18)))
 (let (($x251 (and $x151 $x128)))
 (let (($x280 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x5 (ite $x280 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x5 (_ bv1 32))))
 (let (($x240 (and $x218 $x251)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x124 $x240)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x65 (and $x168 $x191)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x53 (and $x20 $x65)))
 (let (($x56 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd ?x8 (_ bv3 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x232 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x34 (or false (or false (and (and true (or $x97 $x232)) (or $x201 $x56))))))
 (let (($x120 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x34)))
 (let (($x188 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x34)))
 (let (($x147 (and $x188 $x53)))
 (let (($x88 (=> $x147 $x127)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x38 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x27 (bvmul (_ bv4294967295 32) ?x38)))
 (let ((?x61 (bvneg ?x27)))
 (let (($x311 (= ?x61 ?x148)))
 (let (($x127 (= $x311 true)))
 (let (($x64 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let ((?x6 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1812X)))
 (let ((?x252 (input.spec-%var-x-1.1.1 input.ind-%var1812X)))
 (let (($x269 (input.spec-%var-x-1.0.1 input.ind-%var1812X)))
 (=> $x269 (= ?x252 ?x6))))))
 ))
 (let (($x318 (forall ((input.ind-%var1811X (_ BitVec 32)) )(let (($x155 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1811X)))
 (let (($x269 (input.spec-%var-x-1.0.1 input.ind-%var1811X)))
 (= $x269 $x155))))
 ))
 (let (($x208 (and $x318 $x64)))
 (let (($x128 (= $x208 true)))
 (let (($x309 (forall ((input.ind-%var1806X (_ BitVec 32)) )(let ((?x107 (bvadd (bvmul input.ind-%var1806X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x195))))
 (let ((?x6 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1806X)))
 (let (($x155 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1806X)))
 (=> $x155 (= ?x6 ?x194))))))))
 ))
 (let (($x295 (forall ((input.ind-%var1805X (_ BitVec 32)) )(let (($x225 (and (bvule (_ bv0 32) input.ind-%var1805X) (bvult input.ind-%var1805X input.dst.llvm-%n))))
 (let (($x155 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1805X)))
 (= $x155 $x225))))
 ))
 (let (($x67 (and $x295 $x309)))
 (let (($x18 (= $x67 true)))
 (let (($x37 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let ((?x107 (bvadd (bvmul input.ind-%var1800X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x195))))
 (let ((?x252 (input.spec-%var-x-1.1.1 input.ind-%var1800X)))
 (let (($x269 (input.spec-%var-x-1.0.1 input.ind-%var1800X)))
 (=> $x269 (= ?x252 ?x194))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1799X (_ BitVec 32)) )(let (($x225 (and (bvule (_ bv0 32) input.ind-%var1799X) (bvult input.ind-%var1799X input.dst.llvm-%n))))
 (let (($x269 (input.spec-%var-x-1.0.1 input.ind-%var1799X)))
 (= $x269 $x225))))
 ))
 (let (($x262 (and $x205 $x37)))
 (let (($x32 (= $x262 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x16)))
 (let (($x130 (= ?x44 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x130 true)))
 (let (($x271 (= $x103 true)))
 (let (($x184 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x122 (= $x184 true)))
 (let (($x281 (= $x122 true)))
 (let (($x66 (= $x281 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x213 (bvsub ?x8 ?x21)))
 (let (($x85 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x213) (bvult ?x8 ?x213))))
 (let (($x126 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x166 (ite $x126 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x270 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvmul (_ bv4 64) ?x270)))
 (let ((?x190 ((_ extract 63 32) ?x203)))
 (let (($x116 (= ?x190 ?x166)))
 (let (($x206 (and $x116 $x85)))
 (let (($x152 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x92 (and $x152 $x206)))
 (let (($x169 (= true $x92)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (=> $x72 $x169)))
 (let (($x243 (= $x139 true)))
 (let (($x207 (= $x243 true)))
 (let (($x266 (= $x207 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x211 (= $x93 true)))
 (let (($x193 (= $x211 true)))
 (let (($x212 (= $x193 true)))
 (let (($x181 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (= $x181 true)))
 (let (($x244 (= $x264 true)))
 (let (($x296 (= $x244 true)))
 (let (($x265 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x15 (= $x265 true)))
 (let (($x110 (= $x15 true)))
 (let (($x257 (= $x110 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x50 true)))
 (let (($x108 (= $x167 true)))
 (let (($x104 (= $x108 true)))
 (let (($x239 (= $x72 true)))
 (let (($x102 (= $x239 true)))
 (let (($x301 (= $x102 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x68)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x12)))
 (let ((?x236 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x236)))
 (let ((?x298 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x298)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x52 $x132)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (and $x89 $x187)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x47 $x315)))
 (let (($x48 (not $x259)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (and $x91 $x101)))
 (let (($x241 (and (not $x304) $x48)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x60 $x79)))
 (let (($x165 (not $x158)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x254 $x250)))
 (let (($x282 (and (not $x90) $x165)))
 (let (($x113 (and (and (and (and (and (and $x282 $x241) $x303) $x119) $x217) $x196) $x223)))
 (let (($x231 (and $x113 $x228)))
 (let (($x253 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x290 (or false (or false (and (and true (or $x153 $x248)) (or $x142 $x253))))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x290)))
 (let (($x274 (and $x180 $x231)))
 (let (($x204 (= $x274 true)))
 (let (($x198 (= $x204 true)))
 (let (($x292 (= $x198 true)))
 (let ((?x214 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x118 (= (_ bv0 2) ?x214)))
 (let (($x36 (= $x118 true)))
 (let (($x317 (= $x36 true)))
 (let ((?x115 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x115)))
 (let (($x143 (= ?x81 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x137 (= $x143 true)))
 (let (($x185 (= $x137 true)))
 (let (($x57 (and $x185 $x317)))
 (let (($x222 (and $x57 $x292)))
 (let (($x238 (and $x222 $x301)))
 (let (($x149 (and $x238 $x104)))
 (let (($x78 (and $x149 $x257)))
 (let (($x84 (and $x78 $x296)))
 (let (($x39 (and $x84 $x212)))
 (let (($x319 (and $x39 $x266)))
 (let (($x140 (and $x319 $x66)))
 (let (($x307 (and $x140 $x271)))
 (let (($x299 (and $x307 $x32)))
 (let (($x151 (and $x299 $x18)))
 (let (($x251 (and $x151 $x128)))
 (let (($x280 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x5 (ite $x280 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x5 (_ bv1 32))))
 (let (($x240 (and $x218 $x251)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x124 $x240)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x65 (and $x168 $x191)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x53 (and $x20 $x65)))
 (let (($x56 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd ?x8 (_ bv3 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x232 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x34 (or false (or false (and (and true (or $x97 $x232)) (or $x201 $x56))))))
 (let (($x120 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x34)))
 (let (($x188 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x34)))
 (let (($x147 (and $x188 $x53)))
 (let (($x88 (=> $x147 $x127)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x227 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x22 (bvsge ?x227 (_ bv0 32))))
 (let (($x58 (= $x22 true)))
 (let (($x25 (= $x58 true)))
 (let (($x177 (forall ((input.ind-%var1835X (_ BitVec 32)) )(let ((?x33 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1835X)))
 (let ((?x194 (input.spec-%var-x-1.1.1 input.ind-%var1835X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1835X)))
 (=> $x252 (= ?x194 ?x33))))))
 ))
 (let (($x100 (forall ((input.ind-%var1834X (_ BitVec 32)) )(let (($x218 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1834X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1834X)))
 (= $x252 $x218))))
 ))
 (let (($x98 (and $x100 $x177)))
 (let (($x230 (= $x98 true)))
 (let (($x135 (forall ((input.ind-%var1829X (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul input.ind-%var1829X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x128))))
 (let ((?x33 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1829X)))
 (let (($x218 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1829X)))
 (=> $x218 (= ?x33 ?x147))))))))
 ))
 (let (($x69 (forall ((input.ind-%var1828X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var1828X) (bvult input.ind-%var1828X input.dst.llvm-%n))))
 (let (($x218 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1828X)))
 (= $x218 $x283))))
 ))
 (let (($x221 (and $x69 $x135)))
 (let (($x293 (= $x221 true)))
 (let (($x61 (forall ((input.ind-%var1823X (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul input.ind-%var1823X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x128))))
 (let ((?x194 (input.spec-%var-x-1.1.1 input.ind-%var1823X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1823X)))
 (=> $x252 (= ?x194 ?x147))))))))
 ))
 (let (($x226 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var1822X) (bvult input.ind-%var1822X input.dst.llvm-%n))))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1822X)))
 (= $x252 $x283))))
 ))
 (let (($x148 (and $x226 $x61)))
 (let (($x311 (= $x148 true)))
 (let ((?x307 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x307)))
 (let (($x269 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x10 (= $x269 true)))
 (let (($x209 (= $x10 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x44 (= $x16 true)))
 (let (($x130 (= $x44 true)))
 (let (($x103 (= $x130 true)))
 (let (($x184 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x184 true)))
 (let (($x281 (= $x122 true)))
 (let (($x66 (= $x281 true)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x305 (= (_ bv0 32) ?x116)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x126)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let ((?x263 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x263)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (and $x255 $x152)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (and $x39 $x163)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x78 $x181)))
 (let (($x244 (not $x264)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x257 (and $x15 $x110)))
 (let (($x84 (and (not $x257) $x244)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x50 $x167)))
 (let (($x104 (not $x108)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x196 $x297)))
 (let (($x265 (and (not $x288) $x104)))
 (let (($x92 (and (and (and (and (and (and $x265 $x84) $x211) $x212) $x270) $x190) $x166)))
 (let (($x169 (and $x92 $x305)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x228 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x102 (or false (or false (and (and true (or $x68 $x228)) (or $x204 $x198))))))
 (let (($x238 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x102)))
 (let (($x139 (and $x238 $x169)))
 (let (($x243 (= $x139 true)))
 (let (($x207 (= $x243 true)))
 (let (($x266 (= $x207 true)))
 (let ((?x298 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x132 (= (_ bv0 2) ?x298)))
 (let (($x187 (= $x132 true)))
 (let (($x217 (= $x187 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x47 (bvsub ?x8 ?x21)))
 (let (($x241 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x47) (bvult ?x8 ?x47))))
 (let (($x101 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x304 (ite $x101 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x165 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x282 (bvmul (_ bv4 64) ?x165)))
 (let ((?x91 ((_ extract 63 32) ?x282)))
 (let (($x219 (= ?x91 ?x304)))
 (let (($x28 (and $x219 $x241)))
 (let (($x79 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x95 (and $x79 $x28)))
 (let (($x303 (= true $x95)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (=> $x72 $x303)))
 (let (($x136 (= $x182 true)))
 (let (($x119 (= $x136 true)))
 (let (($x19 (= $x119 true)))
 (let (($x290 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x290 true)))
 (let (($x254 (= $x180 true)))
 (let (($x250 (= $x254 true)))
 (let (($x134 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x134 true)))
 (let (($x253 (= $x142 true)))
 (let (($x277 (= $x253 true)))
 (let (($x300 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x256 (= $x300 true)))
 (let (($x153 (= $x256 true)))
 (let (($x248 (= $x153 true)))
 (let ((?x214 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x214)))
 (let (($x317 (= ?x118 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x57 (= $x317 true)))
 (let (($x267 (= $x57 true)))
 (let (($x70 (= $x72 true)))
 (let (($x143 (= $x70 true)))
 (let (($x137 (= $x143 true)))
 (let (($x11 (and $x137 $x267)))
 (let (($x75 (and $x11 $x248)))
 (let (($x261 (and $x75 $x277)))
 (let (($x90 (and $x261 $x250)))
 (let (($x89 (and $x90 $x19)))
 (let (($x145 (and $x89 $x217)))
 (let (($x319 (and $x145 $x266)))
 (let (($x140 (and $x319 $x66)))
 (let (($x271 (and $x140 $x103)))
 (let (($x225 (and $x271 $x209)))
 (let (($x127 (and $x225 $x311)))
 (let (($x192 (and $x127 $x293)))
 (let (($x54 (and $x192 $x230)))
 (let (($x35 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x115 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x115 (_ bv1 32))))
 (let (($x272 (and $x81 $x54)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x178 $x272)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x13 (and $x49 $x189)))
 (let (($x235 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x210 (and $x235 $x13)))
 (let (($x7 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd ?x8 (_ bv3 32))))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x141 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x188 (or false (or false (and (and true (or $x71 $x141)) (or $x273 $x7))))))
 (let (($x20 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x188)))
 (let (($x162 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x188)))
 (let (($x146 (and $x162 $x210)))
 (let (($x9 (=> $x146 $x25)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x227 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x22 (bvsge ?x227 (_ bv0 32))))
 (let (($x58 (= $x22 true)))
 (let (($x25 (= $x58 true)))
 (let (($x177 (forall ((input.ind-%var1835X (_ BitVec 32)) )(let ((?x33 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1835X)))
 (let ((?x194 (input.spec-%var-x-1.1.1 input.ind-%var1835X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1835X)))
 (=> $x252 (= ?x194 ?x33))))))
 ))
 (let (($x100 (forall ((input.ind-%var1834X (_ BitVec 32)) )(let (($x218 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1834X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1834X)))
 (= $x252 $x218))))
 ))
 (let (($x98 (and $x100 $x177)))
 (let (($x230 (= $x98 true)))
 (let (($x135 (forall ((input.ind-%var1829X (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul input.ind-%var1829X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x128))))
 (let ((?x33 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1829X)))
 (let (($x218 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1829X)))
 (=> $x218 (= ?x33 ?x147))))))))
 ))
 (let (($x69 (forall ((input.ind-%var1828X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var1828X) (bvult input.ind-%var1828X input.dst.llvm-%n))))
 (let (($x218 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1828X)))
 (= $x218 $x283))))
 ))
 (let (($x221 (and $x69 $x135)))
 (let (($x293 (= $x221 true)))
 (let (($x61 (forall ((input.ind-%var1823X (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul input.ind-%var1823X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x128))))
 (let ((?x194 (input.spec-%var-x-1.1.1 input.ind-%var1823X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1823X)))
 (=> $x252 (= ?x194 ?x147))))))))
 ))
 (let (($x226 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var1822X) (bvult input.ind-%var1822X input.dst.llvm-%n))))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1822X)))
 (= $x252 $x283))))
 ))
 (let (($x148 (and $x226 $x61)))
 (let (($x311 (= $x148 true)))
 (let ((?x307 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x307)))
 (let (($x269 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x10 (= $x269 true)))
 (let (($x209 (= $x10 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x44 (= $x16 true)))
 (let (($x130 (= $x44 true)))
 (let (($x103 (= $x130 true)))
 (let (($x184 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x184 true)))
 (let (($x281 (= $x122 true)))
 (let (($x66 (= $x281 true)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x305 (= (_ bv0 32) ?x116)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x126)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let ((?x263 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x263)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (and $x255 $x152)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (and $x39 $x163)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x78 $x181)))
 (let (($x244 (not $x264)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x257 (and $x15 $x110)))
 (let (($x84 (and (not $x257) $x244)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x50 $x167)))
 (let (($x104 (not $x108)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x196 $x297)))
 (let (($x265 (and (not $x288) $x104)))
 (let (($x92 (and (and (and (and (and (and $x265 $x84) $x211) $x212) $x270) $x190) $x166)))
 (let (($x169 (and $x92 $x305)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x228 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x102 (or false (or false (and (and true (or $x68 $x228)) (or $x204 $x198))))))
 (let (($x238 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x102)))
 (let (($x139 (and $x238 $x169)))
 (let (($x243 (= $x139 true)))
 (let (($x207 (= $x243 true)))
 (let (($x266 (= $x207 true)))
 (let ((?x298 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x132 (= (_ bv0 2) ?x298)))
 (let (($x187 (= $x132 true)))
 (let (($x217 (= $x187 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x47 (bvsub ?x8 ?x21)))
 (let (($x241 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x47) (bvult ?x8 ?x47))))
 (let (($x101 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x304 (ite $x101 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x165 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x282 (bvmul (_ bv4 64) ?x165)))
 (let ((?x91 ((_ extract 63 32) ?x282)))
 (let (($x219 (= ?x91 ?x304)))
 (let (($x28 (and $x219 $x241)))
 (let (($x79 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x95 (and $x79 $x28)))
 (let (($x303 (= true $x95)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (=> $x72 $x303)))
 (let (($x136 (= $x182 true)))
 (let (($x119 (= $x136 true)))
 (let (($x19 (= $x119 true)))
 (let (($x290 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x290 true)))
 (let (($x254 (= $x180 true)))
 (let (($x250 (= $x254 true)))
 (let (($x134 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x134 true)))
 (let (($x253 (= $x142 true)))
 (let (($x277 (= $x253 true)))
 (let (($x300 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x256 (= $x300 true)))
 (let (($x153 (= $x256 true)))
 (let (($x248 (= $x153 true)))
 (let ((?x214 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x214)))
 (let (($x317 (= ?x118 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x57 (= $x317 true)))
 (let (($x267 (= $x57 true)))
 (let (($x70 (= $x72 true)))
 (let (($x143 (= $x70 true)))
 (let (($x137 (= $x143 true)))
 (let (($x11 (and $x137 $x267)))
 (let (($x75 (and $x11 $x248)))
 (let (($x261 (and $x75 $x277)))
 (let (($x90 (and $x261 $x250)))
 (let (($x89 (and $x90 $x19)))
 (let (($x145 (and $x89 $x217)))
 (let (($x319 (and $x145 $x266)))
 (let (($x140 (and $x319 $x66)))
 (let (($x271 (and $x140 $x103)))
 (let (($x225 (and $x271 $x209)))
 (let (($x127 (and $x225 $x311)))
 (let (($x192 (and $x127 $x293)))
 (let (($x54 (and $x192 $x230)))
 (let (($x35 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x115 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x115 (_ bv1 32))))
 (let (($x272 (and $x81 $x54)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x178 $x272)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x13 (and $x49 $x189)))
 (let (($x235 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x210 (and $x235 $x13)))
 (let (($x7 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd ?x8 (_ bv3 32))))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x141 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x188 (or false (or false (and (and true (or $x71 $x141)) (or $x273 $x7))))))
 (let (($x20 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x188)))
 (let (($x162 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x188)))
 (let (($x146 (and $x162 $x210)))
 (let (($x9 (=> $x146 $x25)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x156 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x306 (bvsge ?x156 (_ bv0 32))))
 (let (($x138 (= $x306 true)))
 (let (($x172 (= $x138 true)))
 (let (($x131 (forall ((input.ind-%var1858X (_ BitVec 32)) )(let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1858X)))
 (let ((?x147 (input.spec-%var-x-1.1.1 input.ind-%var1858X)))
 (let (($x194 (input.spec-%var-x-1.0.1 input.ind-%var1858X)))
 (=> $x194 (= ?x147 ?x37))))))
 ))
 (let (($x80 (forall ((input.ind-%var1857X (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1857X)))
 (let (($x194 (input.spec-%var-x-1.0.1 input.ind-%var1857X)))
 (= $x194 $x81))))
 ))
 (let (($x320 (and $x80 $x131)))
 (let (($x151 (= $x320 true)))
 (let (($x205 (forall ((input.ind-%var1852X (_ BitVec 32)) )(let ((?x308 (bvadd (bvmul input.ind-%var1852X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x230))))
 (let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1852X)))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1852X)))
 (=> $x81 (= ?x37 ?x146))))))))
 ))
 (let (($x133 (forall ((input.ind-%var1851X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1851X) (bvult input.ind-%var1851X input.dst.llvm-%n))))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1851X)))
 (= $x81 $x240))))
 ))
 (let (($x312 (and $x133 $x205)))
 (let (($x77 (= $x312 true)))
 (let (($x58 (forall ((input.ind-%var1846X (_ BitVec 32)) )(let ((?x308 (bvadd (bvmul input.ind-%var1846X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x230))))
 (let ((?x147 (input.spec-%var-x-1.1.1 input.ind-%var1846X)))
 (let (($x194 (input.spec-%var-x-1.0.1 input.ind-%var1846X)))
 (=> $x194 (= ?x147 ?x146))))))))
 ))
 (let (($x208 (forall ((input.ind-%var1845X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1845X) (bvult input.ind-%var1845X input.dst.llvm-%n))))
 (let (($x194 (input.spec-%var-x-1.0.1 input.ind-%var1845X)))
 (= $x194 $x240))))
 ))
 (let (($x25 (and $x208 $x58)))
 (let (($x9 (= $x25 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x225)))
 (let (($x252 (= ?x5 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (= $x252 true)))
 (let (($x154 (= $x316 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x281 (bvsub ?x8 ?x21)))
 (let (($x44 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x281) (bvult ?x8 ?x281))))
 (let (($x319 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x184 (ite $x319 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x243 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x207 (bvmul (_ bv4 64) ?x243)))
 (let ((?x266 ((_ extract 63 32) ?x207)))
 (let (($x122 (= ?x266 ?x184)))
 (let (($x130 (and $x122 $x44)))
 (let (($x169 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x103 (and $x169 $x130)))
 (let (($x271 (= true $x103)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x307 (=> $x72 $x271)))
 (let (($x215 (= $x307 true)))
 (let (($x269 (= $x215 true)))
 (let (($x10 (= $x269 true)))
 (let (($x190 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x190 true)))
 (let (($x126 (= $x206 true)))
 (let (($x166 (= $x126 true)))
 (let (($x152 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x152 true)))
 (let (($x270 (= $x163 true)))
 (let (($x85 (= $x270 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x212 true)))
 (let (($x39 (= $x249 true)))
 (let (($x255 (= $x39 true)))
 (let (($x93 (= $x72 true)))
 (let (($x211 (= $x93 true)))
 (let (($x289 (= $x211 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x167)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x149)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x288 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x239)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x238 (and $x222 $x102)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x292 $x238)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x301 (and $x12 $x223)))
 (let (($x113 (not $x301)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x187 $x217)))
 (let (($x228 (and (not $x145) $x113)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x119 $x19)))
 (let (($x52 (not $x89)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x79 $x158)))
 (let (($x132 (and (not $x136) $x52)))
 (let (($x296 (and (and (and (and (and (and $x132 $x228) $x274) $x198) $x196) $x288) $x50)))
 (let (($x78 (and $x296 $x108)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x304 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x91)))
 (let (($x95 (or false (or false (and (and true (or $x101 $x304)) (or $x47 $x259))))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x95)))
 (let (($x181 (and $x182 $x78)))
 (let (($x264 (= $x181 true)))
 (let (($x244 (= $x264 true)))
 (let (($x84 (= $x244 true)))
 (let (($x180 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x254 (= $x180 true)))
 (let (($x250 (= $x254 true)))
 (let (($x90 (= $x250 true)))
 (let ((?x253 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x277 (= (_ bv0 2) ?x253)))
 (let (($x261 (= $x277 true)))
 (let (($x202 (= $x261 true)))
 (let (($x256 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x153 (= $x256 true)))
 (let (($x248 (= $x153 true)))
 (let (($x75 (= $x248 true)))
 (let ((?x118 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x118)))
 (let (($x57 (= ?x36 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x57 true)))
 (let (($x11 (= $x267 true)))
 (let (($x134 (and $x11 $x75)))
 (let (($x290 (and $x134 $x202)))
 (let (($x287 (and $x290 $x90)))
 (let (($x213 (and $x287 $x84)))
 (let (($x193 (and $x213 $x289)))
 (let (($x263 (and $x193 $x255)))
 (let (($x203 (and $x263 $x85)))
 (let (($x92 (and $x203 $x166)))
 (let (($x209 (and $x92 $x10)))
 (let (($x283 (and $x209 $x154)))
 (let (($x83 (and $x283 $x9)))
 (let (($x82 (and $x83 $x77)))
 (let (($x14 (and $x82 $x151)))
 (let (($x143 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x137 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x137 (_ bv1 32))))
 (let (($x106 (and $x185 $x14)))
 (let (($x280 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x280 $x106)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x24 (and $x124 $x195)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x87 (and $x73 $x24)))
 (let (($x34 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd ?x8 (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x201 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x162 (or false (or false (and (and true (or $x164 $x201)) (or $x59 $x34))))))
 (let (($x235 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x162)))
 (let (($x76 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x162)))
 (let (($x216 (and $x76 $x87)))
 (let (($x279 (=> $x216 $x172)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x156 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x306 (bvsge ?x156 (_ bv0 32))))
 (let (($x138 (= $x306 true)))
 (let (($x172 (= $x138 true)))
 (let (($x131 (forall ((input.ind-%var1858X (_ BitVec 32)) )(let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1858X)))
 (let ((?x147 (input.spec-%var-x-1.1.1 input.ind-%var1858X)))
 (let (($x194 (input.spec-%var-x-1.0.1 input.ind-%var1858X)))
 (=> $x194 (= ?x147 ?x37))))))
 ))
 (let (($x80 (forall ((input.ind-%var1857X (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1857X)))
 (let (($x194 (input.spec-%var-x-1.0.1 input.ind-%var1857X)))
 (= $x194 $x81))))
 ))
 (let (($x320 (and $x80 $x131)))
 (let (($x151 (= $x320 true)))
 (let (($x205 (forall ((input.ind-%var1852X (_ BitVec 32)) )(let ((?x308 (bvadd (bvmul input.ind-%var1852X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x230))))
 (let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1852X)))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1852X)))
 (=> $x81 (= ?x37 ?x146))))))))
 ))
 (let (($x133 (forall ((input.ind-%var1851X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1851X) (bvult input.ind-%var1851X input.dst.llvm-%n))))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1851X)))
 (= $x81 $x240))))
 ))
 (let (($x312 (and $x133 $x205)))
 (let (($x77 (= $x312 true)))
 (let (($x58 (forall ((input.ind-%var1846X (_ BitVec 32)) )(let ((?x308 (bvadd (bvmul input.ind-%var1846X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x230))))
 (let ((?x147 (input.spec-%var-x-1.1.1 input.ind-%var1846X)))
 (let (($x194 (input.spec-%var-x-1.0.1 input.ind-%var1846X)))
 (=> $x194 (= ?x147 ?x146))))))))
 ))
 (let (($x208 (forall ((input.ind-%var1845X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1845X) (bvult input.ind-%var1845X input.dst.llvm-%n))))
 (let (($x194 (input.spec-%var-x-1.0.1 input.ind-%var1845X)))
 (= $x194 $x240))))
 ))
 (let (($x25 (and $x208 $x58)))
 (let (($x9 (= $x25 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x225)))
 (let (($x252 (= ?x5 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (= $x252 true)))
 (let (($x154 (= $x316 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x281 (bvsub ?x8 ?x21)))
 (let (($x44 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x281) (bvult ?x8 ?x281))))
 (let (($x319 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x184 (ite $x319 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x243 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x207 (bvmul (_ bv4 64) ?x243)))
 (let ((?x266 ((_ extract 63 32) ?x207)))
 (let (($x122 (= ?x266 ?x184)))
 (let (($x130 (and $x122 $x44)))
 (let (($x169 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x103 (and $x169 $x130)))
 (let (($x271 (= true $x103)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x307 (=> $x72 $x271)))
 (let (($x215 (= $x307 true)))
 (let (($x269 (= $x215 true)))
 (let (($x10 (= $x269 true)))
 (let (($x190 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x190 true)))
 (let (($x126 (= $x206 true)))
 (let (($x166 (= $x126 true)))
 (let (($x152 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x152 true)))
 (let (($x270 (= $x163 true)))
 (let (($x85 (= $x270 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x212 true)))
 (let (($x39 (= $x249 true)))
 (let (($x255 (= $x39 true)))
 (let (($x93 (= $x72 true)))
 (let (($x211 (= $x93 true)))
 (let (($x289 (= $x211 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x167)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x149)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x288 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x239)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x238 (and $x222 $x102)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x292 $x238)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x301 (and $x12 $x223)))
 (let (($x113 (not $x301)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x187 $x217)))
 (let (($x228 (and (not $x145) $x113)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x119 $x19)))
 (let (($x52 (not $x89)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x79 $x158)))
 (let (($x132 (and (not $x136) $x52)))
 (let (($x296 (and (and (and (and (and (and $x132 $x228) $x274) $x198) $x196) $x288) $x50)))
 (let (($x78 (and $x296 $x108)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x304 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x91)))
 (let (($x95 (or false (or false (and (and true (or $x101 $x304)) (or $x47 $x259))))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x95)))
 (let (($x181 (and $x182 $x78)))
 (let (($x264 (= $x181 true)))
 (let (($x244 (= $x264 true)))
 (let (($x84 (= $x244 true)))
 (let (($x180 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x254 (= $x180 true)))
 (let (($x250 (= $x254 true)))
 (let (($x90 (= $x250 true)))
 (let ((?x253 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x277 (= (_ bv0 2) ?x253)))
 (let (($x261 (= $x277 true)))
 (let (($x202 (= $x261 true)))
 (let (($x256 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x153 (= $x256 true)))
 (let (($x248 (= $x153 true)))
 (let (($x75 (= $x248 true)))
 (let ((?x118 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x118)))
 (let (($x57 (= ?x36 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x57 true)))
 (let (($x11 (= $x267 true)))
 (let (($x134 (and $x11 $x75)))
 (let (($x290 (and $x134 $x202)))
 (let (($x287 (and $x290 $x90)))
 (let (($x213 (and $x287 $x84)))
 (let (($x193 (and $x213 $x289)))
 (let (($x263 (and $x193 $x255)))
 (let (($x203 (and $x263 $x85)))
 (let (($x92 (and $x203 $x166)))
 (let (($x209 (and $x92 $x10)))
 (let (($x283 (and $x209 $x154)))
 (let (($x83 (and $x283 $x9)))
 (let (($x82 (and $x83 $x77)))
 (let (($x14 (and $x82 $x151)))
 (let (($x143 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x137 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x137 (_ bv1 32))))
 (let (($x106 (and $x185 $x14)))
 (let (($x280 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x280 $x106)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x24 (and $x124 $x195)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x87 (and $x73 $x24)))
 (let (($x34 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd ?x8 (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x201 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x162 (or false (or false (and (and true (or $x164 $x201)) (or $x59 $x34))))))
 (let (($x235 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x162)))
 (let (($x76 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x162)))
 (let (($x216 (and $x76 $x87)))
 (let (($x279 (=> $x216 $x172)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x176 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (bvule ?x176 input.dst.llvm-%n)))
 (let (($x284 (= $x40 true)))
 (let (($x41 (= $x284 true)))
 (let (($x236 (forall ((input.ind-%var1881X (_ BitVec 32)) )(let ((?x61 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1881X)))
 (let ((?x146 (input.spec-%var-x-1.1.1 input.ind-%var1881X)))
 (let (($x147 (input.spec-%var-x-1.0.1 input.ind-%var1881X)))
 (=> $x147 (= ?x146 ?x61))))))
 ))
 (let (($x6 (forall ((input.ind-%var1880X (_ BitVec 32)) )(let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1880X)))
 (let (($x147 (input.spec-%var-x-1.0.1 input.ind-%var1880X)))
 (= $x147 $x185))))
 ))
 (let (($x291 (and $x6 $x236)))
 (let (($x192 (= $x291 true)))
 (let (($x226 (forall ((input.ind-%var1875X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var1875X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x151))))
 (let ((?x61 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1875X)))
 (let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1875X)))
 (=> $x185 (= ?x61 ?x216))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1874X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1874X) (bvult input.ind-%var1874X input.dst.llvm-%n))))
 (let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1874X)))
 (= $x185 $x272))))
 ))
 (let (($x65 (and $x191 $x226)))
 (let (($x67 (= $x65 true)))
 (let (($x138 (forall ((input.ind-%var1869X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var1869X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x151))))
 (let ((?x146 (input.spec-%var-x-1.1.1 input.ind-%var1869X)))
 (let (($x147 (input.spec-%var-x-1.0.1 input.ind-%var1869X)))
 (=> $x147 (= ?x146 ?x216))))))))
 ))
 (let (($x98 (forall ((input.ind-%var1868X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1868X) (bvult input.ind-%var1868X input.dst.llvm-%n))))
 (let (($x147 (input.spec-%var-x-1.0.1 input.ind-%var1868X)))
 (= $x147 $x272))))
 ))
 (let (($x172 (and $x98 $x138)))
 (let (($x279 (= $x172 true)))
 (let ((?x283 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x283)))
 (let (($x194 (= ?x115 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x194 true)))
 (let (($x295 (= $x251 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x130 (bvsub ?x8 ?x21)))
 (let (($x215 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x130) (bvult ?x8 ?x130))))
 (let (($x140 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x16 (ite $x140 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x122 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x66 (bvmul (_ bv4 64) ?x122)))
 (let ((?x281 ((_ extract 63 32) ?x66)))
 (let (($x44 (= ?x281 ?x16)))
 (let (($x269 (and $x44 $x215)))
 (let (($x319 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x10 (and $x319 $x269)))
 (let (($x209 (= true $x10)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x225 (=> $x72 $x209)))
 (let (($x5 (= $x225 true)))
 (let (($x252 (= $x5 true)))
 (let (($x316 (= $x252 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x305 (= $x116 true)))
 (let (($x169 (= $x305 true)))
 (let (($x139 (= $x169 true)))
 (let (($x190 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (= $x190 true)))
 (let (($x126 (= $x206 true)))
 (let (($x166 (= $x126 true)))
 (let (($x152 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x163 (= $x152 true)))
 (let (($x270 (= $x163 true)))
 (let (($x85 (= $x270 true)))
 (let (($x249 (= $x72 true)))
 (let (($x39 (= $x249 true)))
 (let (($x255 (= $x39 true)))
 (let ((?x296 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x296)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x149)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x238)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (and $x102 $x196)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (and $x239 $x110)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (and $x228 $x104)))
 (let (($x274 (not $x231)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (and $x223 $x301)))
 (let (($x204 (and (not $x113) $x274)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x132 $x187)))
 (let (($x145 (not $x217)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x304 $x219)))
 (let (($x12 (and (not $x52) $x145)))
 (let (($x84 (and (and (and (and (and (and $x12 $x204) $x15) $x222) $x297) $x257) $x50)))
 (let (($x213 (and $x84 $x167)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x259 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x259)))
 (let (($x241 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x259)))
 (let (($x119 (or false (or false (and (and true (or $x48 $x241)) (or $x182 $x79))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x119)))
 (let (($x93 (and $x89 $x213)))
 (let (($x211 (= $x93 true)))
 (let (($x289 (= $x211 true)))
 (let (($x193 (= $x289 true)))
 (let (($x287 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x165 (= $x287 true)))
 (let (($x282 (= $x165 true)))
 (let (($x303 (= $x282 true)))
 (let ((?x290 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x180 (= (_ bv0 2) ?x290)))
 (let (($x254 (= $x180 true)))
 (let (($x250 (= $x254 true)))
 (let (($x134 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x134 true)))
 (let (($x253 (= $x142 true)))
 (let (($x277 (= $x253 true)))
 (let ((?x267 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x267)))
 (let (($x256 (= ?x11 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x256 true)))
 (let (($x248 (= $x153 true)))
 (let (($x261 (and $x248 $x277)))
 (let (($x90 (and $x261 $x250)))
 (let (($x91 (and $x90 $x303)))
 (let (($x212 (and $x91 $x193)))
 (let (($x263 (and $x212 $x255)))
 (let (($x203 (and $x263 $x85)))
 (let (($x92 (and $x203 $x166)))
 (let (($x243 (and $x92 $x139)))
 (let (($x154 (and $x243 $x316)))
 (let (($x240 (and $x154 $x295)))
 (let (($x30 (and $x240 $x279)))
 (let (($x18 (and $x30 $x67)))
 (let (($x63 (and $x18 $x192)))
 (let (($x214 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x118 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x118 (_ bv1 32))))
 (let (($x173 (and $x36 $x63)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x35 $x173)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x123 (and $x178 $x128)))
 (let (($x168 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x168 $x123)))
 (let (($x188 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd ?x8 (_ bv3 32))))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x273 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x76 (or false (or false (and (and true (or $x74 $x273)) (or $x120 $x188))))))
 (let (($x73 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x76)))
 (let (($x26 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x76)))
 (let (($x175 (and $x26 $x88)))
 (let (($x242 (=> $x175 $x41)))
 (not $x242))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x176 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (bvule ?x176 input.dst.llvm-%n)))
 (let (($x284 (= $x40 true)))
 (let (($x41 (= $x284 true)))
 (let (($x236 (forall ((input.ind-%var1881X (_ BitVec 32)) )(let ((?x61 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1881X)))
 (let ((?x146 (input.spec-%var-x-1.1.1 input.ind-%var1881X)))
 (let (($x147 (input.spec-%var-x-1.0.1 input.ind-%var1881X)))
 (=> $x147 (= ?x146 ?x61))))))
 ))
 (let (($x6 (forall ((input.ind-%var1880X (_ BitVec 32)) )(let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1880X)))
 (let (($x147 (input.spec-%var-x-1.0.1 input.ind-%var1880X)))
 (= $x147 $x185))))
 ))
 (let (($x291 (and $x6 $x236)))
 (let (($x192 (= $x291 true)))
 (let (($x226 (forall ((input.ind-%var1875X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var1875X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x151))))
 (let ((?x61 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1875X)))
 (let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1875X)))
 (=> $x185 (= ?x61 ?x216))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1874X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1874X) (bvult input.ind-%var1874X input.dst.llvm-%n))))
 (let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1874X)))
 (= $x185 $x272))))
 ))
 (let (($x65 (and $x191 $x226)))
 (let (($x67 (= $x65 true)))
 (let (($x138 (forall ((input.ind-%var1869X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var1869X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x151))))
 (let ((?x146 (input.spec-%var-x-1.1.1 input.ind-%var1869X)))
 (let (($x147 (input.spec-%var-x-1.0.1 input.ind-%var1869X)))
 (=> $x147 (= ?x146 ?x216))))))))
 ))
 (let (($x98 (forall ((input.ind-%var1868X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1868X) (bvult input.ind-%var1868X input.dst.llvm-%n))))
 (let (($x147 (input.spec-%var-x-1.0.1 input.ind-%var1868X)))
 (= $x147 $x272))))
 ))
 (let (($x172 (and $x98 $x138)))
 (let (($x279 (= $x172 true)))
 (let ((?x283 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x283)))
 (let (($x194 (= ?x115 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x194 true)))
 (let (($x295 (= $x251 true)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x130 (bvsub ?x8 ?x21)))
 (let (($x215 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x130) (bvult ?x8 ?x130))))
 (let (($x140 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x16 (ite $x140 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x122 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x66 (bvmul (_ bv4 64) ?x122)))
 (let ((?x281 ((_ extract 63 32) ?x66)))
 (let (($x44 (= ?x281 ?x16)))
 (let (($x269 (and $x44 $x215)))
 (let (($x319 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x10 (and $x319 $x269)))
 (let (($x209 (= true $x10)))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x225 (=> $x72 $x209)))
 (let (($x5 (= $x225 true)))
 (let (($x252 (= $x5 true)))
 (let (($x316 (= $x252 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x305 (= $x116 true)))
 (let (($x169 (= $x305 true)))
 (let (($x139 (= $x169 true)))
 (let (($x190 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (= $x190 true)))
 (let (($x126 (= $x206 true)))
 (let (($x166 (= $x126 true)))
 (let (($x152 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x163 (= $x152 true)))
 (let (($x270 (= $x163 true)))
 (let (($x85 (= $x270 true)))
 (let (($x249 (= $x72 true)))
 (let (($x39 (= $x249 true)))
 (let (($x255 (= $x39 true)))
 (let ((?x296 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x296)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x149)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x238)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (and $x102 $x196)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (and $x239 $x110)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (and $x228 $x104)))
 (let (($x274 (not $x231)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (and $x223 $x301)))
 (let (($x204 (and (not $x113) $x274)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x132 $x187)))
 (let (($x145 (not $x217)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x304 $x219)))
 (let (($x12 (and (not $x52) $x145)))
 (let (($x84 (and (and (and (and (and (and $x12 $x204) $x15) $x222) $x297) $x257) $x50)))
 (let (($x213 (and $x84 $x167)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x259 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x259)))
 (let (($x241 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x259)))
 (let (($x119 (or false (or false (and (and true (or $x48 $x241)) (or $x182 $x79))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x119)))
 (let (($x93 (and $x89 $x213)))
 (let (($x211 (= $x93 true)))
 (let (($x289 (= $x211 true)))
 (let (($x193 (= $x289 true)))
 (let (($x287 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x165 (= $x287 true)))
 (let (($x282 (= $x165 true)))
 (let (($x303 (= $x282 true)))
 (let ((?x290 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x180 (= (_ bv0 2) ?x290)))
 (let (($x254 (= $x180 true)))
 (let (($x250 (= $x254 true)))
 (let (($x134 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x134 true)))
 (let (($x253 (= $x142 true)))
 (let (($x277 (= $x253 true)))
 (let ((?x267 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x267)))
 (let (($x256 (= ?x11 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x256 true)))
 (let (($x248 (= $x153 true)))
 (let (($x261 (and $x248 $x277)))
 (let (($x90 (and $x261 $x250)))
 (let (($x91 (and $x90 $x303)))
 (let (($x212 (and $x91 $x193)))
 (let (($x263 (and $x212 $x255)))
 (let (($x203 (and $x263 $x85)))
 (let (($x92 (and $x203 $x166)))
 (let (($x243 (and $x92 $x139)))
 (let (($x154 (and $x243 $x316)))
 (let (($x240 (and $x154 $x295)))
 (let (($x30 (and $x240 $x279)))
 (let (($x18 (and $x30 $x67)))
 (let (($x63 (and $x18 $x192)))
 (let (($x214 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x118 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x118 (_ bv1 32))))
 (let (($x173 (and $x36 $x63)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x35 $x173)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x123 (and $x178 $x128)))
 (let (($x168 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x168 $x123)))
 (let (($x188 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd ?x8 (_ bv3 32))))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x273 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x76 (or false (or false (and (and true (or $x74 $x273)) (or $x120 $x188))))))
 (let (($x73 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x76)))
 (let (($x26 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x76)))
 (let (($x175 (and $x26 $x88)))
 (let (($x242 (=> $x175 $x41)))
 (not $x242))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x82 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x82 (_ bv1 32))))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (=> $x72 $x32)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x92 (bvsub ?x8 ?x21)))
 (let (($x139 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x92) (bvult ?x8 ?x92))))
 (let (($x206 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x126 (ite $x206 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x85 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvmul (_ bv4 64) ?x85)))
 (let ((?x190 ((_ extract 63 32) ?x203)))
 (let (($x166 (= ?x190 ?x126)))
 (let (($x243 (and $x166 $x139)))
 (let (($x163 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x207 (and $x163 $x243)))
 (let (($x266 (= true $x207)))
 (let (($x319 (=> $x72 $x266)))
 (let (($x230 (=> (and $x319 $x72) $x32)))
 (let (($x43 (= $x230 true)))
 (let (($x302 (= $x43 true)))
 (let (($x246 (forall ((input.ind-%var1904X (_ BitVec 32)) )(let ((?x27 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1904X)))
 (let ((?x87 (input.spec-%var-x-1.1.1 input.ind-%var1904X)))
 (let (($x295 (input.spec-%var-x-1.0.1 input.ind-%var1904X)))
 (=> $x295 (= ?x87 ?x27))))))
 ))
 (let (($x221 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1903X)))
 (let (($x295 (input.spec-%var-x-1.0.1 input.ind-%var1903X)))
 (= $x295 $x175))))
 ))
 (let (($x107 (and $x221 $x246)))
 (let (($x224 (= $x107 true)))
 (let (($x77 (forall ((input.ind-%var1898X (_ BitVec 32)) )(let ((?x61 (bvadd (bvmul input.ind-%var1898X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x65))))
 (let ((?x27 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1898X)))
 (let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1898X)))
 (=> $x175 (= ?x27 ?x53))))))))
 ))
 (let (($x129 (forall ((input.ind-%var1897X (_ BitVec 32)) )(let (($x98 (and (bvule (_ bv0 32) input.ind-%var1897X) (bvult input.ind-%var1897X input.dst.llvm-%n))))
 (let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1897X)))
 (= $x175 $x98))))
 ))
 (let (($x17 (and $x129 $x77)))
 (let (($x23 (= $x17 true)))
 (let (($x192 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let ((?x61 (bvadd (bvmul input.ind-%var1892X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x65))))
 (let ((?x87 (input.spec-%var-x-1.1.1 input.ind-%var1892X)))
 (let (($x295 (input.spec-%var-x-1.0.1 input.ind-%var1892X)))
 (=> $x295 (= ?x87 ?x53))))))))
 ))
 (let (($x22 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let (($x98 (and (bvule (_ bv0 32) input.ind-%var1891X) (bvult input.ind-%var1891X input.dst.llvm-%n))))
 (let (($x295 (input.spec-%var-x-1.0.1 input.ind-%var1891X)))
 (= $x295 $x98))))
 ))
 (let (($x63 (and $x22 $x192)))
 (let (($x173 (= $x63 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x225)))
 (let (($x252 (= ?x5 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (= $x252 true)))
 (let (($x154 (= $x316 true)))
 (let ((?x307 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x215 (= (_ bv0 2) ?x307)))
 (let (($x269 (= $x215 true)))
 (let (($x10 (= $x269 true)))
 (let (($x140 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x16 (= $x140 true)))
 (let (($x44 (= $x16 true)))
 (let (($x103 (= $x44 true)))
 (let (($x184 (= $x319 true)))
 (let (($x122 (= $x184 true)))
 (let (($x66 (= $x122 true)))
 (let (($x193 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x212 (= $x193 true)))
 (let (($x249 (= $x212 true)))
 (let (($x39 (= $x249 true)))
 (let (($x167 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (= $x167 true)))
 (let (($x93 (= $x213 true)))
 (let (($x211 (= $x93 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x149 (= $x244 true)))
 (let (($x50 (= $x149 true)))
 (let (($x84 (= $x50 true)))
 (let (($x110 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x297 (= $x110 true)))
 (let (($x264 (= $x297 true)))
 (let (($x288 (= $x264 true)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x228)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x265 (= (_ bv0 32) ?x113)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x223)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x217 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x187)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (and $x132 $x217)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x68 $x145)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x182 $x79)))
 (let (($x136 (not $x158)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x241 $x28)))
 (let (($x119 (and (not $x95) $x136)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x91 $x315)))
 (let (($x19 (not $x47)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (and $x153 $x248)))
 (let (($x48 (and (not $x303) $x19)))
 (let (($x15 (and (and (and (and (and (and $x48 $x119) $x304) $x52) $x12) $x301) $x265)))
 (let (($x78 (and $x15 $x104)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x287 (or false (or false (and (and true (or $x253 $x277)) (or $x290 $x180))))))
 (let (($x282 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x287)))
 (let (($x292 (and $x282 $x78)))
 (let (($x222 (= $x292 true)))
 (let (($x181 (= $x222 true)))
 (let (($x239 (= $x181 true)))
 (let ((?x36 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x36)))
 (let (($x267 (= ?x317 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x11 (= $x267 true)))
 (let (($x300 (= $x11 true)))
 (let (($x102 (and $x300 $x239)))
 (let (($x257 (and $x102 $x288)))
 (let (($x296 (and $x257 $x84)))
 (let (($x289 (and $x296 $x211)))
 (let (($x255 (and $x289 $x39)))
 (let (($x281 (and $x255 $x66)))
 (let (($x130 (and $x281 $x103)))
 (let (($x209 (and $x130 $x10)))
 (let (($x283 (and $x209 $x154)))
 (let (($x128 (and $x283 $x173)))
 (let (($x125 (and $x128 $x23)))
 (let (($x313 (and $x125 $x224)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x186 (and $x143 $x313)))
 (let (($x280 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x117 (and $x280 $x186)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x210 (and $x49 $x117)))
 (let (($x162 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x273 (bvadd ?x8 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x273)))
 (let (($x59 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x273)))
 (let (($x26 (or false (or false (and (and true (or $x56 $x59)) (or $x20 $x162))))))
 (let (($x168 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x232 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x60 (and $x232 $x210)))
 (let (($x294 (=> $x60 $x302)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x82 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x82 (_ bv1 32))))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (=> $x72 $x32)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let ((?x92 (bvsub ?x8 ?x21)))
 (let (($x139 (ite (bvsge ?x21 (_ bv0 32)) (bvuge ?x8 ?x92) (bvult ?x8 ?x92))))
 (let (($x206 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x126 (ite $x206 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x85 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvmul (_ bv4 64) ?x85)))
 (let ((?x190 ((_ extract 63 32) ?x203)))
 (let (($x166 (= ?x190 ?x126)))
 (let (($x243 (and $x166 $x139)))
 (let (($x163 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x207 (and $x163 $x243)))
 (let (($x266 (= true $x207)))
 (let (($x319 (=> $x72 $x266)))
 (let (($x230 (=> (and $x319 $x72) $x32)))
 (let (($x43 (= $x230 true)))
 (let (($x302 (= $x43 true)))
 (let (($x246 (forall ((input.ind-%var1904X (_ BitVec 32)) )(let ((?x27 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1904X)))
 (let ((?x87 (input.spec-%var-x-1.1.1 input.ind-%var1904X)))
 (let (($x295 (input.spec-%var-x-1.0.1 input.ind-%var1904X)))
 (=> $x295 (= ?x87 ?x27))))))
 ))
 (let (($x221 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1903X)))
 (let (($x295 (input.spec-%var-x-1.0.1 input.ind-%var1903X)))
 (= $x295 $x175))))
 ))
 (let (($x107 (and $x221 $x246)))
 (let (($x224 (= $x107 true)))
 (let (($x77 (forall ((input.ind-%var1898X (_ BitVec 32)) )(let ((?x61 (bvadd (bvmul input.ind-%var1898X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x65))))
 (let ((?x27 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1898X)))
 (let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1898X)))
 (=> $x175 (= ?x27 ?x53))))))))
 ))
 (let (($x129 (forall ((input.ind-%var1897X (_ BitVec 32)) )(let (($x98 (and (bvule (_ bv0 32) input.ind-%var1897X) (bvult input.ind-%var1897X input.dst.llvm-%n))))
 (let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1897X)))
 (= $x175 $x98))))
 ))
 (let (($x17 (and $x129 $x77)))
 (let (($x23 (= $x17 true)))
 (let (($x192 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let ((?x61 (bvadd (bvmul input.ind-%var1892X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x65))))
 (let ((?x87 (input.spec-%var-x-1.1.1 input.ind-%var1892X)))
 (let (($x295 (input.spec-%var-x-1.0.1 input.ind-%var1892X)))
 (=> $x295 (= ?x87 ?x53))))))))
 ))
 (let (($x22 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let (($x98 (and (bvule (_ bv0 32) input.ind-%var1891X) (bvult input.ind-%var1891X input.dst.llvm-%n))))
 (let (($x295 (input.spec-%var-x-1.0.1 input.ind-%var1891X)))
 (= $x295 $x98))))
 ))
 (let (($x63 (and $x22 $x192)))
 (let (($x173 (= $x63 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x225)))
 (let (($x252 (= ?x5 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (= $x252 true)))
 (let (($x154 (= $x316 true)))
 (let ((?x307 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x215 (= (_ bv0 2) ?x307)))
 (let (($x269 (= $x215 true)))
 (let (($x10 (= $x269 true)))
 (let (($x140 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x16 (= $x140 true)))
 (let (($x44 (= $x16 true)))
 (let (($x103 (= $x44 true)))
 (let (($x184 (= $x319 true)))
 (let (($x122 (= $x184 true)))
 (let (($x66 (= $x122 true)))
 (let (($x193 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x212 (= $x193 true)))
 (let (($x249 (= $x212 true)))
 (let (($x39 (= $x249 true)))
 (let (($x167 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (= $x167 true)))
 (let (($x93 (= $x213 true)))
 (let (($x211 (= $x93 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x149 (= $x244 true)))
 (let (($x50 (= $x149 true)))
 (let (($x84 (= $x50 true)))
 (let (($x110 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x297 (= $x110 true)))
 (let (($x264 (= $x297 true)))
 (let (($x288 (= $x264 true)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x228)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x265 (= (_ bv0 32) ?x113)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x223)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x217 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x187)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (and $x132 $x217)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x68 $x145)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x182 $x79)))
 (let (($x136 (not $x158)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x241 $x28)))
 (let (($x119 (and (not $x95) $x136)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x91 $x315)))
 (let (($x19 (not $x47)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (and $x153 $x248)))
 (let (($x48 (and (not $x303) $x19)))
 (let (($x15 (and (and (and (and (and (and $x48 $x119) $x304) $x52) $x12) $x301) $x265)))
 (let (($x78 (and $x15 $x104)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x287 (or false (or false (and (and true (or $x253 $x277)) (or $x290 $x180))))))
 (let (($x282 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x287)))
 (let (($x292 (and $x282 $x78)))
 (let (($x222 (= $x292 true)))
 (let (($x181 (= $x222 true)))
 (let (($x239 (= $x181 true)))
 (let ((?x36 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x36)))
 (let (($x267 (= ?x317 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x11 (= $x267 true)))
 (let (($x300 (= $x11 true)))
 (let (($x102 (and $x300 $x239)))
 (let (($x257 (and $x102 $x288)))
 (let (($x296 (and $x257 $x84)))
 (let (($x289 (and $x296 $x211)))
 (let (($x255 (and $x289 $x39)))
 (let (($x281 (and $x255 $x66)))
 (let (($x130 (and $x281 $x103)))
 (let (($x209 (and $x130 $x10)))
 (let (($x283 (and $x209 $x154)))
 (let (($x128 (and $x283 $x173)))
 (let (($x125 (and $x128 $x23)))
 (let (($x313 (and $x125 $x224)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x186 (and $x143 $x313)))
 (let (($x280 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x117 (and $x280 $x186)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x210 (and $x49 $x117)))
 (let (($x162 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x273 (bvadd ?x8 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x273)))
 (let (($x59 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x273)))
 (let (($x26 (or false (or false (and (and true (or $x56 $x59)) (or $x20 $x162))))))
 (let (($x168 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x232 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x60 (and $x232 $x210)))
 (let (($x294 (=> $x60 $x302)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 195 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x37 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x37 (_ bv0 32))))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (not $x72)))
 (let (($x25 (=> $x54 $x200)))
 (let (($x205 (= $x25 true)))
 (let (($x100 (= $x205 true)))
 (let (($x30 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x186 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1927X)))
 (let ((?x316 (input.spec-%var-x-1.1.1 input.ind-%var1927X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1927X)))
 (=> $x140 (= ?x316 ?x186))))))
 ))
 (let (($x172 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1926X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1926X)))
 (= $x140 $x17))))
 ))
 (let (($x101 (and $x172 $x30)))
 (let (($x148 (= $x101 true)))
 (let (($x133 (forall ((input.ind-%var1921X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1921X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x299))))
 (let ((?x186 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1921X)))
 (let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1921X)))
 (=> $x17 (= ?x186 ?x173))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1920X (_ BitVec 32)) )(let (($x269 (and (bvule (_ bv0 32) input.ind-%var1920X) (bvult input.ind-%var1920X input.dst.llvm-%n))))
 (let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1920X)))
 (= $x17 $x269))))
 ))
 (let (($x293 (and $x246 $x133)))
 (let (($x80 (= $x293 true)))
 (let (($x245 (forall ((input.ind-%var1915X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1915X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x299))))
 (let ((?x316 (input.spec-%var-x-1.1.1 input.ind-%var1915X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1915X)))
 (=> $x140 (= ?x316 ?x173))))))))
 ))
 (let (($x209 (forall ((input.ind-%var1914X (_ BitVec 32)) )(let (($x269 (and (bvule (_ bv0 32) input.ind-%var1914X) (bvult input.ind-%var1914X input.dst.llvm-%n))))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1914X)))
 (= $x140 $x269))))
 ))
 (let (($x129 (and $x209 $x245)))
 (let (($x27 (= $x129 true)))
 (let ((?x169 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x169)))
 (let (($x243 (= ?x139 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x243 true)))
 (let (($x266 (= $x207 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x166 (= $x126 true)))
 (let (($x116 (= $x166 true)))
 (let (($x92 (= $x116 true)))
 (let (($x270 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x85 (= $x270 true)))
 (let (($x203 (= $x85 true)))
 (let (($x190 (= $x203 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x255 (= $x39 true)))
 (let (($x263 (= $x255 true)))
 (let (($x152 (= $x263 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x211 true)))
 (let (($x193 (= $x289 true)))
 (let (($x212 (= $x193 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x296 (= $x84 true)))
 (let (($x167 (= $x296 true)))
 (let (($x213 (= $x167 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x78)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x228)))
 (let ((?x265 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x265)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x223)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (and $x108 $x301)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x12 $x198)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x304 $x274)))
 (let (($x52 (not $x219)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x119 $x231)))
 (let (($x68 (and (not $x89) $x52)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x95 $x298)))
 (let (($x79 (not $x182)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x290 $x180)))
 (let (($x136 (and (not $x28) $x79)))
 (let (($x110 (and (and (and (and (and (and $x136 $x68) $x187) $x145) $x113) $x15) $x104)))
 (let (($x297 (and $x110 $x292)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x282 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x19 (or false (or false (and (and true (or $x287 $x282)) (or $x303 $x259))))))
 (let (($x241 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x19)))
 (let (($x264 (and $x241 $x297)))
 (let (($x288 (= $x264 true)))
 (let (($x257 (= $x288 true)))
 (let (($x244 (= $x257 true)))
 (let ((?x165 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x142 (= (_ bv0 2) ?x165)))
 (let (($x253 (= $x142 true)))
 (let (($x277 (= $x253 true)))
 (let ((?x317 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x317)))
 (let (($x11 (= ?x57 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x300 (= $x11 true)))
 (let (($x75 (= $x300 true)))
 (let (($x261 (and $x75 $x277)))
 (let (($x149 (and $x261 $x244)))
 (let (($x93 (and $x149 $x213)))
 (let (($x249 (and $x93 $x212)))
 (let (($x163 (and $x249 $x152)))
 (let (($x206 (and $x163 $x190)))
 (let (($x305 (and $x206 $x92)))
 (let (($x319 (and $x305 $x266)))
 (let (($x286 (and $x319 $x27)))
 (let (($x24 (and $x286 $x80)))
 (let (($x123 (and $x24 $x148)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x40 (and $x214 $x123)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x284 (and $x35 $x40)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x124 $x284)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let (($x76 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x8 (_ bv3 32))))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x120 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x59)))
 (let (($x232 (or false (or false (and (and true (or $x7 $x120)) (or $x235 $x76))))))
 (let (($x49 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x232)))
 (let (($x141 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x232)))
 (let (($x194 (and $x141 $x197)))
 (let (($x308 (=> $x194 $x100)))
 (not $x308))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x37 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x37 (_ bv0 32))))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (not $x72)))
 (let (($x25 (=> $x54 $x200)))
 (let (($x205 (= $x25 true)))
 (let (($x100 (= $x205 true)))
 (let (($x30 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x186 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1927X)))
 (let ((?x316 (input.spec-%var-x-1.1.1 input.ind-%var1927X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1927X)))
 (=> $x140 (= ?x316 ?x186))))))
 ))
 (let (($x172 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1926X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1926X)))
 (= $x140 $x17))))
 ))
 (let (($x101 (and $x172 $x30)))
 (let (($x148 (= $x101 true)))
 (let (($x133 (forall ((input.ind-%var1921X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1921X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x299))))
 (let ((?x186 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1921X)))
 (let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1921X)))
 (=> $x17 (= ?x186 ?x173))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1920X (_ BitVec 32)) )(let (($x269 (and (bvule (_ bv0 32) input.ind-%var1920X) (bvult input.ind-%var1920X input.dst.llvm-%n))))
 (let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1920X)))
 (= $x17 $x269))))
 ))
 (let (($x293 (and $x246 $x133)))
 (let (($x80 (= $x293 true)))
 (let (($x245 (forall ((input.ind-%var1915X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1915X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x299))))
 (let ((?x316 (input.spec-%var-x-1.1.1 input.ind-%var1915X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1915X)))
 (=> $x140 (= ?x316 ?x173))))))))
 ))
 (let (($x209 (forall ((input.ind-%var1914X (_ BitVec 32)) )(let (($x269 (and (bvule (_ bv0 32) input.ind-%var1914X) (bvult input.ind-%var1914X input.dst.llvm-%n))))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1914X)))
 (= $x140 $x269))))
 ))
 (let (($x129 (and $x209 $x245)))
 (let (($x27 (= $x129 true)))
 (let ((?x169 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x169)))
 (let (($x243 (= ?x139 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x243 true)))
 (let (($x266 (= $x207 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x166 (= $x126 true)))
 (let (($x116 (= $x166 true)))
 (let (($x92 (= $x116 true)))
 (let (($x270 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x85 (= $x270 true)))
 (let (($x203 (= $x85 true)))
 (let (($x190 (= $x203 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x255 (= $x39 true)))
 (let (($x263 (= $x255 true)))
 (let (($x152 (= $x263 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x211 true)))
 (let (($x193 (= $x289 true)))
 (let (($x212 (= $x193 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x296 (= $x84 true)))
 (let (($x167 (= $x296 true)))
 (let (($x213 (= $x167 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x78)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x228)))
 (let ((?x265 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x265)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x223)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (and $x108 $x301)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x12 $x198)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x304 $x274)))
 (let (($x52 (not $x219)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x119 $x231)))
 (let (($x68 (and (not $x89) $x52)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x95 $x298)))
 (let (($x79 (not $x182)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x290 $x180)))
 (let (($x136 (and (not $x28) $x79)))
 (let (($x110 (and (and (and (and (and (and $x136 $x68) $x187) $x145) $x113) $x15) $x104)))
 (let (($x297 (and $x110 $x292)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x282 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x19 (or false (or false (and (and true (or $x287 $x282)) (or $x303 $x259))))))
 (let (($x241 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x19)))
 (let (($x264 (and $x241 $x297)))
 (let (($x288 (= $x264 true)))
 (let (($x257 (= $x288 true)))
 (let (($x244 (= $x257 true)))
 (let ((?x165 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x142 (= (_ bv0 2) ?x165)))
 (let (($x253 (= $x142 true)))
 (let (($x277 (= $x253 true)))
 (let ((?x317 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x317)))
 (let (($x11 (= ?x57 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x300 (= $x11 true)))
 (let (($x75 (= $x300 true)))
 (let (($x261 (and $x75 $x277)))
 (let (($x149 (and $x261 $x244)))
 (let (($x93 (and $x149 $x213)))
 (let (($x249 (and $x93 $x212)))
 (let (($x163 (and $x249 $x152)))
 (let (($x206 (and $x163 $x190)))
 (let (($x305 (and $x206 $x92)))
 (let (($x319 (and $x305 $x266)))
 (let (($x286 (and $x319 $x27)))
 (let (($x24 (and $x286 $x80)))
 (let (($x123 (and $x24 $x148)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x40 (and $x214 $x123)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x284 (and $x35 $x40)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x124 $x284)))
 (let ((?x21 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x8 (bvadd input.dst.llvm-%x ?x21)))
 (let (($x76 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x8 (_ bv3 32))))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x120 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x59)))
 (let (($x232 (or false (or false (and (and true (or $x7 $x120)) (or $x235 $x76))))))
 (let (($x49 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) $x232)))
 (let (($x141 (=> (and $x72 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) $x232)))
 (let (($x194 (and $x141 $x197)))
 (let (($x308 (=> $x194 $x100)))
 (not $x308))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x115 true)))
 (let (($x285 (= $x147 true)))
 (let (($x43 (forall ((input.ind-%var1950X (_ BitVec 32)) )(let ((?x96 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1950X)))
 (let ((?x319 (input.spec-%var-x-1.1.1 input.ind-%var1950X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1950X)))
 (=> $x243 (= ?x319 ?x96))))))
 ))
 (let (($x125 (forall ((input.ind-%var1949X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1949X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1949X)))
 (= $x243 $x164))))
 ))
 (let (($x82 (and $x125 $x43)))
 (let (($x32 (= $x82 true)))
 (let (($x272 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1944X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x245))))
 (let ((?x96 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1944X)))
 (let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1944X)))
 (=> $x164 (= ?x96 ?x246))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var1943X) (bvult input.ind-%var1943X input.dst.llvm-%n))))
 (let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1943X)))
 (= $x164 $x30))))
 ))
 (let (($x98 (and $x205 $x272)))
 (let (($x177 (= $x98 true)))
 (let (($x148 (forall ((input.ind-%var1937X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var1937X) (bvult input.ind-%var1937X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1937X)))
 (= $x243 $x30))))
 ))
 (let (($x240 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1938X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x245))))
 (let ((?x319 (input.spec-%var-x-1.1.1 input.ind-%var1938X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1938X)))
 (=> $x243 (= ?x319 ?x246))))))))
 ))
 (let (($x123 (and $x240 $x148)))
 (let (($x40 (= $x123 true)))
 (let ((?x190 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x190)))
 (let (($x166 (= ?x206 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x166 true)))
 (let (($x92 (= $x116 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x213)))
 (let ((?x296 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x296)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x288)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x297 $x257)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x292 $x244)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x198 $x113)))
 (let (($x265 (not $x102)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x301 (and $x108 $x223)))
 (let (($x196 (and (not $x301) $x265)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x187 $x181)))
 (let (($x145 (not $x217)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x19 $x241)))
 (let (($x12 (and (not $x132) $x145)))
 (let (($x39 (and (and (and (and (and (and $x12 $x196) $x104) $x78) $x149) $x84) $x167)))
 (let (($x255 (and $x39 $x93)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x52 (or false (or false (and (and true (or $x298 $x182)) (or $x89 $x204))))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x52)))
 (let (($x263 (and $x222 $x255)))
 (let (($x152 (= $x263 true)))
 (let (($x163 (= $x152 true)))
 (let (($x270 (= $x163 true)))
 (let (($x153 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x248 (= $x153 true)))
 (let (($x303 (= $x248 true)))
 (let (($x259 (= $x303 true)))
 (let ((?x250 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x48 (= (_ bv0 2) ?x250)))
 (let (($x90 (= $x48 true)))
 (let (($x287 (= $x90 true)))
 (let ((?x75 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x75)))
 (let (($x165 (= ?x134 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x165 true)))
 (let (($x253 (= $x142 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x317 (= $x36 true)))
 (let (($x57 (= $x317 true)))
 (let (($x267 (= $x57 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x280 true)))
 (let (($x143 (= $x35 true)))
 (let (($x214 (= $x143 true)))
 (let (($x49 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (= $x49 true)))
 (let (($x71 (= $x141 true)))
 (let (($x124 (= $x71 true)))
 (let (($x76 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x73 (= $x76 true)))
 (let (($x26 (= $x73 true)))
 (let (($x168 (= $x26 true)))
 (let (($x120 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x34 (not $x120)))
 (let (($x20 (= $x34 true)))
 (let (($x188 (= $x20 true)))
 (let (($x235 (= $x188 true)))
 (let (($x232 (and $x235 $x168)))
 (let (($x178 (and $x232 $x124)))
 (let (($x118 (and $x178 $x214)))
 (let (($x11 (and $x118 $x267)))
 (let (($x277 (and $x11 $x253)))
 (let (($x282 (and $x277 $x287)))
 (let (($x91 (and $x282 $x259)))
 (let (($x85 (and $x91 $x270)))
 (let (($x305 (and $x85 $x92)))
 (let (($x284 (and $x305 $x40)))
 (let (($x146 (and $x284 $x177)))
 (let (($x112 (and $x146 $x32)))
 (let (($x273 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x74 (ite $x273 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x74 (_ bv0 32))))
 (let (($x38 (and $x59 $x112)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x302 (and $x8 $x38)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x114 (and $x170 $x302)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x306 (and $x144 $x114)))
 (let (($x271 (=> $x306 $x285)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x115 true)))
 (let (($x285 (= $x147 true)))
 (let (($x43 (forall ((input.ind-%var1950X (_ BitVec 32)) )(let ((?x96 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1950X)))
 (let ((?x319 (input.spec-%var-x-1.1.1 input.ind-%var1950X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1950X)))
 (=> $x243 (= ?x319 ?x96))))))
 ))
 (let (($x125 (forall ((input.ind-%var1949X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1949X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1949X)))
 (= $x243 $x164))))
 ))
 (let (($x82 (and $x125 $x43)))
 (let (($x32 (= $x82 true)))
 (let (($x272 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1944X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x245))))
 (let ((?x96 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1944X)))
 (let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1944X)))
 (=> $x164 (= ?x96 ?x246))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var1943X) (bvult input.ind-%var1943X input.dst.llvm-%n))))
 (let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1943X)))
 (= $x164 $x30))))
 ))
 (let (($x98 (and $x205 $x272)))
 (let (($x177 (= $x98 true)))
 (let (($x148 (forall ((input.ind-%var1937X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var1937X) (bvult input.ind-%var1937X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1937X)))
 (= $x243 $x30))))
 ))
 (let (($x240 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let ((?x291 (bvadd (bvmul input.ind-%var1938X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x245))))
 (let ((?x319 (input.spec-%var-x-1.1.1 input.ind-%var1938X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var1938X)))
 (=> $x243 (= ?x319 ?x246))))))))
 ))
 (let (($x123 (and $x240 $x148)))
 (let (($x40 (= $x123 true)))
 (let ((?x190 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x190)))
 (let (($x166 (= ?x206 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x166 true)))
 (let (($x92 (= $x116 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x213)))
 (let ((?x296 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x296)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x288)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x297 $x257)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x292 $x244)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x198 $x113)))
 (let (($x265 (not $x102)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x301 (and $x108 $x223)))
 (let (($x196 (and (not $x301) $x265)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x187 $x181)))
 (let (($x145 (not $x217)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x19 $x241)))
 (let (($x12 (and (not $x132) $x145)))
 (let (($x39 (and (and (and (and (and (and $x12 $x196) $x104) $x78) $x149) $x84) $x167)))
 (let (($x255 (and $x39 $x93)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x52 (or false (or false (and (and true (or $x298 $x182)) (or $x89 $x204))))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x52)))
 (let (($x263 (and $x222 $x255)))
 (let (($x152 (= $x263 true)))
 (let (($x163 (= $x152 true)))
 (let (($x270 (= $x163 true)))
 (let (($x153 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x248 (= $x153 true)))
 (let (($x303 (= $x248 true)))
 (let (($x259 (= $x303 true)))
 (let ((?x250 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x48 (= (_ bv0 2) ?x250)))
 (let (($x90 (= $x48 true)))
 (let (($x287 (= $x90 true)))
 (let ((?x75 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x75)))
 (let (($x165 (= ?x134 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x165 true)))
 (let (($x253 (= $x142 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x317 (= $x36 true)))
 (let (($x57 (= $x317 true)))
 (let (($x267 (= $x57 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x280 true)))
 (let (($x143 (= $x35 true)))
 (let (($x214 (= $x143 true)))
 (let (($x49 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (= $x49 true)))
 (let (($x71 (= $x141 true)))
 (let (($x124 (= $x71 true)))
 (let (($x76 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x73 (= $x76 true)))
 (let (($x26 (= $x73 true)))
 (let (($x168 (= $x26 true)))
 (let (($x120 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x34 (not $x120)))
 (let (($x20 (= $x34 true)))
 (let (($x188 (= $x20 true)))
 (let (($x235 (= $x188 true)))
 (let (($x232 (and $x235 $x168)))
 (let (($x178 (and $x232 $x124)))
 (let (($x118 (and $x178 $x214)))
 (let (($x11 (and $x118 $x267)))
 (let (($x277 (and $x11 $x253)))
 (let (($x282 (and $x277 $x287)))
 (let (($x91 (and $x282 $x259)))
 (let (($x85 (and $x91 $x270)))
 (let (($x305 (and $x85 $x92)))
 (let (($x284 (and $x305 $x40)))
 (let (($x146 (and $x284 $x177)))
 (let (($x112 (and $x146 $x32)))
 (let (($x273 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x74 (ite $x273 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x74 (_ bv0 32))))
 (let (($x38 (and $x59 $x112)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x302 (and $x8 $x38)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x114 (and $x170 $x302)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x306 (and $x144 $x114)))
 (let (($x271 (=> $x306 $x285)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1505227/query
