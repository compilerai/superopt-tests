==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x260 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x261 (not $x260)))
 (let (($x262 (or $x260 $x261)))
 (let (($x263 (= $x262 false)))
 (let (($x264 (= $x263 true)))
 (let (($x240 (forall ((input.ind-%var497X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var497X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x150 (= input.ind-%var497X (_ bv1 32))))
 (let ((?x167 (ite $x150 ?x22 ?x166)))
 (let ((?x230 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var497X)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var497X)))
 (=> $x219 (= ?x230 ?x167)))))))))))
 ))
 (let (($x226 (forall ((input.ind-%var496X (_ BitVec 32)) )(let (($x150 (= input.ind-%var496X (_ bv1 32))))
 (let (($x151 (= input.ind-%var496X (_ bv0 32))))
 (let (($x152 (or $x151 $x150)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var496X)))
 (= $x219 $x152))))))
 ))
 (let (($x241 (and $x226 $x240)))
 (let (($x242 (= $x241 true)))
 (let (($x213 (forall ((input.ind-%var485X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var485X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x21 (_ bv0 32))))
 (let ((?x205 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var485X)))
 (let (($x196 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var485X)))
 (=> $x196 (= ?x205 ?x166))))))))
 ))
 (let (($x201 (forall ((input.ind-%var484X (_ BitVec 32)) )(let (($x151 (= input.ind-%var484X (_ bv0 32))))
 (let (($x196 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var484X)))
 (= $x196 $x151))))
 ))
 (let (($x214 (and $x201 $x213)))
 (let (($x215 (= $x214 true)))
 (let (($x190 (forall ((input.ind-%var475X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var475X)))
 (=> $x176 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var475X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var474X)))
 (= $x176 false)))
 ))
 (let (($x191 (and $x180 $x190)))
 (let (($x192 (= $x191 true)))
 (let (($x170 (forall ((input.ind-%var463X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var463X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x150 (= input.ind-%var463X (_ bv1 32))))
 (let ((?x167 (ite $x150 ?x22 ?x166)))
 (let ((?x158 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var463X)))
 (let (($x144 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var463X)))
 (=> $x144 (= ?x158 ?x167)))))))))))
 ))
 (let (($x154 (forall ((input.ind-%var462X (_ BitVec 32)) )(let (($x150 (= input.ind-%var462X (_ bv1 32))))
 (let (($x151 (= input.ind-%var462X (_ bv0 32))))
 (let (($x152 (or $x151 $x150)))
 (let (($x144 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var462X)))
 (= $x144 $x152))))))
 ))
 (let (($x171 (and $x154 $x170)))
 (let (($x172 (= $x171 true)))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x48 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x41 ?x22 ?x11)))
 (let (($x133 (= input.spec-%tmpvar-12.L2%17%d.2 ?x25)))
 (let (($x129 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x134 (=> $x129 $x133)))
 (let (($x124 (or $x48 $x41)))
 (let ((?x125 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x125 (_ bv1 32))))
 (let (($x131 (= $x129 $x130)))
 (let (($x46 (= false false)))
 (let (($x123 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x128 (=> $x123 $x46)))
 (let (($x126 (= ?x125 (_ bv0 32))))
 (let (($x127 (= $x123 $x126)))
 (let (($x137 (and (and (and $x127 $x128) $x131) $x134)))
 (let (($x138 (= $x137 true)))
 (let (($x19 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x19 ?x21 (_ bv0 32))))
 (let (($x45 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x24 (ite $x45 ?x22 ?x34)))
 (let (($x115 (= input.spec-%tmpvar-16.L2%25%d.2 ?x24)))
 (let (($x105 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x116 (=> $x105 $x115)))
 (let (($x110 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x113 (=> $x110 $x46)))
 (let (($x106 (or $x19 $x45)))
 (let ((?x107 (ite $x106 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x107 (_ bv0 32))))
 (let (($x112 (= $x110 $x111)))
 (let (($x108 (bvuge ?x107 (_ bv1 32))))
 (let (($x109 (= $x105 $x108)))
 (let (($x119 (and (and (and $x109 $x112) $x113) $x116)))
 (let (($x120 (= $x119 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 (concat ?x91 ?x89)))))
 (let (($x100 (= ?x99 input.dst.llvm-%x)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x82 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x73)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x68 $x71)))
 (let (($x75 (and $x72 $x74)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x54 $x75)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x61)))))))
 (let (($x77 (and $x67 $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x86 (and $x80 $x85)))
 (let (($x103 (and $x86 $x102)))
 (let (($x121 (and $x103 $x120)))
 (let (($x139 (and $x121 $x138)))
 (let (($x173 (and $x139 $x172)))
 (let (($x193 (and $x173 $x192)))
 (let (($x216 (and $x193 $x215)))
 (let (($x243 (and $x216 $x242)))
 (let (($x14 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x50 (= input.spec-%tmpvar-10.L2%13%d $x14)))
 (let (($x244 (and $x50 $x243)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x245 (and $x30 $x244)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x246 (and $x42 $x245)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x247 (and $x16 $x246)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x248 (and $x40 $x247)))
 (let (($x33 (= ?x21 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x249 (and $x33 $x248)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x250 (and $x9 $x249)))
 (let (($x7 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x251 (and $x7 $x250)))
 (let (($x17 (= ?x22 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x252 (and $x17 $x251)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x253 (and $x8 $x252)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x254 (and $x13 $x253)))
 (let (($x255 (and $x46 $x254)))
 (let (($x35 (= input.spec-%var-y-0.L2%23%bbentry ?x25)))
 (let (($x256 (and $x35 $x255)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x257 (and $x44 $x256)))
 (let (($x258 (and $x46 $x257)))
 (let (($x18 (= input.spec-%var-y-1.L2%31%bbentry ?x24)))
 (let (($x259 (and $x18 $x258)))
 (let (($x265 (=> $x259 $x264)))
 (not $x265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x260 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x261 (not $x260)))
 (let (($x262 (or $x260 $x261)))
 (let (($x263 (= $x262 false)))
 (let (($x264 (= $x263 true)))
 (let (($x240 (forall ((input.ind-%var497X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var497X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x150 (= input.ind-%var497X (_ bv1 32))))
 (let ((?x167 (ite $x150 ?x22 ?x166)))
 (let ((?x230 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var497X)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var497X)))
 (=> $x219 (= ?x230 ?x167)))))))))))
 ))
 (let (($x226 (forall ((input.ind-%var496X (_ BitVec 32)) )(let (($x150 (= input.ind-%var496X (_ bv1 32))))
 (let (($x151 (= input.ind-%var496X (_ bv0 32))))
 (let (($x152 (or $x151 $x150)))
 (let (($x219 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var496X)))
 (= $x219 $x152))))))
 ))
 (let (($x241 (and $x226 $x240)))
 (let (($x242 (= $x241 true)))
 (let (($x213 (forall ((input.ind-%var485X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var485X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x21 (_ bv0 32))))
 (let ((?x205 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var485X)))
 (let (($x196 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var485X)))
 (=> $x196 (= ?x205 ?x166))))))))
 ))
 (let (($x201 (forall ((input.ind-%var484X (_ BitVec 32)) )(let (($x151 (= input.ind-%var484X (_ bv0 32))))
 (let (($x196 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var484X)))
 (= $x196 $x151))))
 ))
 (let (($x214 (and $x201 $x213)))
 (let (($x215 (= $x214 true)))
 (let (($x190 (forall ((input.ind-%var475X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var475X)))
 (=> $x176 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var475X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var474X)))
 (= $x176 false)))
 ))
 (let (($x191 (and $x180 $x190)))
 (let (($x192 (= $x191 true)))
 (let (($x170 (forall ((input.ind-%var463X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x151 (= input.ind-%var463X (_ bv0 32))))
 (let ((?x166 (ite $x151 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x150 (= input.ind-%var463X (_ bv1 32))))
 (let ((?x167 (ite $x150 ?x22 ?x166)))
 (let ((?x158 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var463X)))
 (let (($x144 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var463X)))
 (=> $x144 (= ?x158 ?x167)))))))))))
 ))
 (let (($x154 (forall ((input.ind-%var462X (_ BitVec 32)) )(let (($x150 (= input.ind-%var462X (_ bv1 32))))
 (let (($x151 (= input.ind-%var462X (_ bv0 32))))
 (let (($x152 (or $x151 $x150)))
 (let (($x144 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var462X)))
 (= $x144 $x152))))))
 ))
 (let (($x171 (and $x154 $x170)))
 (let (($x172 (= $x171 true)))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x48 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x41 ?x22 ?x11)))
 (let (($x133 (= input.spec-%tmpvar-12.L2%17%d.2 ?x25)))
 (let (($x129 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x134 (=> $x129 $x133)))
 (let (($x124 (or $x48 $x41)))
 (let ((?x125 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x125 (_ bv1 32))))
 (let (($x131 (= $x129 $x130)))
 (let (($x46 (= false false)))
 (let (($x123 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x128 (=> $x123 $x46)))
 (let (($x126 (= ?x125 (_ bv0 32))))
 (let (($x127 (= $x123 $x126)))
 (let (($x137 (and (and (and $x127 $x128) $x131) $x134)))
 (let (($x138 (= $x137 true)))
 (let (($x19 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x19 ?x21 (_ bv0 32))))
 (let (($x45 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x24 (ite $x45 ?x22 ?x34)))
 (let (($x115 (= input.spec-%tmpvar-16.L2%25%d.2 ?x24)))
 (let (($x105 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x116 (=> $x105 $x115)))
 (let (($x110 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x113 (=> $x110 $x46)))
 (let (($x106 (or $x19 $x45)))
 (let ((?x107 (ite $x106 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x107 (_ bv0 32))))
 (let (($x112 (= $x110 $x111)))
 (let (($x108 (bvuge ?x107 (_ bv1 32))))
 (let (($x109 (= $x105 $x108)))
 (let (($x119 (and (and (and $x109 $x112) $x113) $x116)))
 (let (($x120 (= $x119 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 (concat ?x91 ?x89)))))
 (let (($x100 (= ?x99 input.dst.llvm-%x)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x82 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x73)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x68 $x71)))
 (let (($x75 (and $x72 $x74)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x54 $x75)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x61)))))))
 (let (($x77 (and $x67 $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x86 (and $x80 $x85)))
 (let (($x103 (and $x86 $x102)))
 (let (($x121 (and $x103 $x120)))
 (let (($x139 (and $x121 $x138)))
 (let (($x173 (and $x139 $x172)))
 (let (($x193 (and $x173 $x192)))
 (let (($x216 (and $x193 $x215)))
 (let (($x243 (and $x216 $x242)))
 (let (($x14 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x50 (= input.spec-%tmpvar-10.L2%13%d $x14)))
 (let (($x244 (and $x50 $x243)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x245 (and $x30 $x244)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x246 (and $x42 $x245)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x247 (and $x16 $x246)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x248 (and $x40 $x247)))
 (let (($x33 (= ?x21 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x249 (and $x33 $x248)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x250 (and $x9 $x249)))
 (let (($x7 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x251 (and $x7 $x250)))
 (let (($x17 (= ?x22 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x252 (and $x17 $x251)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x253 (and $x8 $x252)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x254 (and $x13 $x253)))
 (let (($x255 (and $x46 $x254)))
 (let (($x35 (= input.spec-%var-y-0.L2%23%bbentry ?x25)))
 (let (($x256 (and $x35 $x255)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x257 (and $x44 $x256)))
 (let (($x258 (and $x46 $x257)))
 (let (($x18 (= input.spec-%var-y-1.L2%31%bbentry ?x24)))
 (let (($x259 (and $x18 $x258)))
 (let (($x265 (=> $x259 $x264)))
 (not $x265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa0800000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!51))
  (define-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32)
    #x00200001)
  (define-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32)
    #x00200012)
  (define-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32)
    #x00200001)
  (define-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32)
    #x00200012)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00200006)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa0800003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa0800000)
  (define-fun input.spec-%tmpvar-10.L2%13%d () Bool
    false)
  (define-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32)
    #x00200001)
  (define-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32)
    #x00200012)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00200006)
  (define-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1!61 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1!56 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
    (ite (= x!0 #x00200001) #x00200001
      #x00000004))))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-t1-0.L2%13%d.0.1!56 (k!52 x!0)))
  (define-fun k!55 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
    (ite (= x!0 #x00200001) #x00200001
      #x00000004))))
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-8.L2%13%d.0.1!61 (k!55 x!0)))
  (define-fun k!54 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00200001) #x00200001
      #x00000004)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1!59 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%13%d.0.1!59 (k!54 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1!58 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00200001
    (ite (= x!0 #x00000001) #x00200012
      #x00000007)))
  (define-fun k!51 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa0800000) #x06
    (ite (= x!0 #xa0800002) #x20
      #x00)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-8.L2%13%d.1.1!58 (k!55 x!0)))
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1!57 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00200001
    (ite (= x!0 #x00000001) #x00200012
      #x00000006)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1!60 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00200001
      #x00000008))
  (define-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-t1-0.L2%13%d.1.1!57 (k!52 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%13%d.1.1!60 (k!54 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%tmpvar-10.L2%13%d () Bool
    true)
  (define-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32)
    #xad0003c0)
  (define-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!34))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd22033f8)
  (define-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32)
    #xad0003d1)
  (define-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32)
    #xad0003c0)
  (define-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32)
    #xad0003d1)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xad0003c5)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd22033fb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd22033f8)
  (define-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32)
    #xad0003c0)
  (define-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32)
    #xad0003d1)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #xad0003c5)
  (define-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1!40 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #xad0003c0
    (ite (= x!0 #x00000001) #xad0003d1
      #x00000006)))
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-8.L2%13%d.1.1!40 (k!38 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1!41 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #xad0003c0
      #x00000007))
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1!42 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #xad0003c0
    (ite (= x!0 #x00000001) #xad0003d1
      #x00000008)))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1!43 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1!39 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun k!37 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      #x00000004))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%13%d.0.1!44 (k!37 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!34 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd22033f9) #x03
    (ite (= x!0 #xd22033fb) #xad
    (ite (= x!0 #xd22033f8) #xc5
      #x00))))
  (define-fun k!35 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000001
      #x00000004)))
  (define-fun input.spec-%var-t1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-t1-0.L2%13%d.1.1!42 (k!35 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%13%d.1.1!41 (k!37 x!0)))
  (define-fun input.spec-%var-t1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-t1-0.L2%13%d.0.1!43 (k!35 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-8.L2%13%d.0.1!39 (k!38 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x228 (and true $x14)))
 (let (($x236 (not $x14)))
 (let (($x237 (or $x236 $x228)))
 (let (($x233 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x234 (not $x233)))
 (let (($x235 (or $x233 $x234)))
 (let (($x141 (=> $x235 $x237)))
 (let (($x267 (= $x141 true)))
 (let (($x268 (= $x267 true)))
 (let (($x146 (forall ((input.ind-%var767X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var767X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x169 (= input.ind-%var767X (_ bv1 32))))
 (let ((?x201 (ite $x169 ?x22 ?x200)))
 (let ((?x207 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var767X)))
 (let (($x185 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var767X)))
 (=> $x185 (= ?x207 ?x201)))))))))))
 ))
 (let (($x202 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x169 (= input.ind-%var766X (_ bv1 32))))
 (let (($x170 (= input.ind-%var766X (_ bv0 32))))
 (let (($x171 (or $x170 $x169)))
 (let (($x185 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var766X)))
 (= $x185 $x171))))))
 ))
 (let (($x148 (and $x202 $x146)))
 (let (($x149 (= $x148 true)))
 (let (($x157 (forall ((input.ind-%var757X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var757X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x21 (_ bv0 32))))
 (let ((?x264 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var757X)))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var757X)))
 (=> $x255 (= ?x264 ?x200))))))))
 ))
 (let (($x260 (forall ((input.ind-%var756X (_ BitVec 32)) )(let (($x170 (= input.ind-%var756X (_ bv0 32))))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var756X)))
 (= $x255 $x170))))
 ))
 (let (($x140 (and $x260 $x157)))
 (let (($x147 (= $x140 true)))
 (let (($x249 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var749X)))
 (=> $x225 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x239 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var748X)))
 (= $x225 false)))
 ))
 (let (($x250 (and $x239 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x212 (forall ((input.ind-%var743X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var743X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x169 (= input.ind-%var743X (_ bv1 32))))
 (let ((?x201 (ite $x169 ?x22 ?x200)))
 (let ((?x184 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var743X)))
 (let (($x153 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var743X)))
 (=> $x153 (= ?x184 ?x201)))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x169 (= input.ind-%var742X (_ bv1 32))))
 (let (($x170 (= input.ind-%var742X (_ bv0 32))))
 (let (($x171 (or $x170 $x169)))
 (let (($x153 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var742X)))
 (= $x153 $x171))))))
 ))
 (let (($x213 (and $x173 $x212)))
 (let (($x214 (= $x213 true)))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x48 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x41 ?x22 ?x11)))
 (let (($x133 (= input.spec-%tmpvar-12.L2%17%d.2 ?x25)))
 (let (($x130 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x134 (=> $x130 $x133)))
 (let (($x126 (or $x48 $x41)))
 (let ((?x127 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x127 (_ bv1 32))))
 (let (($x136 (= $x130 $x131)))
 (let (($x18 (= false false)))
 (let (($x125 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x129 (=> $x125 $x18)))
 (let (($x128 (= ?x127 (_ bv0 32))))
 (let (($x135 (= $x125 $x128)))
 (let (($x139 (and (and (and $x135 $x129) $x136) $x134)))
 (let (($x143 (= $x139 true)))
 (let (($x19 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x19 ?x21 (_ bv0 32))))
 (let (($x45 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x20 (ite $x45 ?x22 ?x34)))
 (let (($x115 (= input.spec-%tmpvar-16.L2%25%d.2 ?x20)))
 (let (($x108 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x116 (=> $x108 $x115)))
 (let (($x117 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x118 (=> $x117 $x18)))
 (let (($x109 (or $x19 $x45)))
 (let ((?x110 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x110 (_ bv0 32))))
 (let (($x113 (= $x117 $x46)))
 (let (($x111 (bvuge ?x110 (_ bv1 32))))
 (let (($x112 (= $x108 $x111)))
 (let (($x121 (and (and (and $x112 $x113) $x118) $x116)))
 (let (($x122 (= $x121 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x96 (concat ?x90 ?x94)))))
 (let (($x103 (= ?x102 input.dst.llvm-%x)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x84 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x75)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x70 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x57 $x77)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x64)))))))
 (let (($x79 (and $x69 $x78)))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x97 (and $x82 $x87)))
 (let (($x106 (and $x97 $x105)))
 (let (($x123 (and $x106 $x122)))
 (let (($x144 (and $x123 $x143)))
 (let (($x215 (and $x144 $x214)))
 (let (($x252 (and $x215 $x251)))
 (let (($x160 (and $x252 $x147)))
 (let (($x161 (and $x160 $x149)))
 (let (($x50 (= input.spec-%tmpvar-10.L2%13%d $x14)))
 (let (($x162 (and $x50 $x161)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x163 (and $x30 $x162)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x164 (and $x42 $x163)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x178 (and $x16 $x164)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x156 (and $x40 $x178)))
 (let (($x33 (= ?x21 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x165 (and $x33 $x156)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x186 (and $x9 $x165)))
 (let (($x7 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x199 (and $x7 $x186)))
 (let (($x17 (= ?x22 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x182 (and $x17 $x199)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x187 (and $x8 $x182)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x209 (and $x13 $x187)))
 (let (($x221 (and $x18 $x209)))
 (let (($x35 (= input.spec-%var-y-0.L2%23%bbentry ?x25)))
 (let (($x203 (and $x35 $x221)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x210 (and $x44 $x203)))
 (let (($x223 (and $x18 $x210)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x20)))
 (let (($x224 (and $x24 $x223)))
 (let (($x269 (=> $x224 $x268)))
 (not $x269))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x228 (and true $x14)))
 (let (($x236 (not $x14)))
 (let (($x237 (or $x236 $x228)))
 (let (($x233 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x234 (not $x233)))
 (let (($x235 (or $x233 $x234)))
 (let (($x141 (=> $x235 $x237)))
 (let (($x267 (= $x141 true)))
 (let (($x268 (= $x267 true)))
 (let (($x146 (forall ((input.ind-%var767X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var767X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x169 (= input.ind-%var767X (_ bv1 32))))
 (let ((?x201 (ite $x169 ?x22 ?x200)))
 (let ((?x207 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var767X)))
 (let (($x185 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var767X)))
 (=> $x185 (= ?x207 ?x201)))))))))))
 ))
 (let (($x202 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x169 (= input.ind-%var766X (_ bv1 32))))
 (let (($x170 (= input.ind-%var766X (_ bv0 32))))
 (let (($x171 (or $x170 $x169)))
 (let (($x185 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var766X)))
 (= $x185 $x171))))))
 ))
 (let (($x148 (and $x202 $x146)))
 (let (($x149 (= $x148 true)))
 (let (($x157 (forall ((input.ind-%var757X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var757X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x21 (_ bv0 32))))
 (let ((?x264 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var757X)))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var757X)))
 (=> $x255 (= ?x264 ?x200))))))))
 ))
 (let (($x260 (forall ((input.ind-%var756X (_ BitVec 32)) )(let (($x170 (= input.ind-%var756X (_ bv0 32))))
 (let (($x255 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var756X)))
 (= $x255 $x170))))
 ))
 (let (($x140 (and $x260 $x157)))
 (let (($x147 (= $x140 true)))
 (let (($x249 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var749X)))
 (=> $x225 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x239 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var748X)))
 (= $x225 false)))
 ))
 (let (($x250 (and $x239 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x212 (forall ((input.ind-%var743X (_ BitVec 32)) )(let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x170 (= input.ind-%var743X (_ bv0 32))))
 (let ((?x200 (ite $x170 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x169 (= input.ind-%var743X (_ bv1 32))))
 (let ((?x201 (ite $x169 ?x22 ?x200)))
 (let ((?x184 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var743X)))
 (let (($x153 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var743X)))
 (=> $x153 (= ?x184 ?x201)))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x169 (= input.ind-%var742X (_ bv1 32))))
 (let (($x170 (= input.ind-%var742X (_ bv0 32))))
 (let (($x171 (or $x170 $x169)))
 (let (($x153 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var742X)))
 (= $x153 $x171))))))
 ))
 (let (($x213 (and $x173 $x212)))
 (let (($x214 (= $x213 true)))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x48 ?x21 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x41 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x25 (ite $x41 ?x22 ?x11)))
 (let (($x133 (= input.spec-%tmpvar-12.L2%17%d.2 ?x25)))
 (let (($x130 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x134 (=> $x130 $x133)))
 (let (($x126 (or $x48 $x41)))
 (let ((?x127 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x127 (_ bv1 32))))
 (let (($x136 (= $x130 $x131)))
 (let (($x18 (= false false)))
 (let (($x125 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x129 (=> $x125 $x18)))
 (let (($x128 (= ?x127 (_ bv0 32))))
 (let (($x135 (= $x125 $x128)))
 (let (($x139 (and (and (and $x135 $x129) $x136) $x134)))
 (let (($x143 (= $x139 true)))
 (let (($x19 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x19 ?x21 (_ bv0 32))))
 (let (($x45 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x20 (ite $x45 ?x22 ?x34)))
 (let (($x115 (= input.spec-%tmpvar-16.L2%25%d.2 ?x20)))
 (let (($x108 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x116 (=> $x108 $x115)))
 (let (($x117 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x118 (=> $x117 $x18)))
 (let (($x109 (or $x19 $x45)))
 (let ((?x110 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x110 (_ bv0 32))))
 (let (($x113 (= $x117 $x46)))
 (let (($x111 (bvuge ?x110 (_ bv1 32))))
 (let (($x112 (= $x108 $x111)))
 (let (($x121 (and (and (and $x112 $x113) $x118) $x116)))
 (let (($x122 (= $x121 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x96 (concat ?x90 ?x94)))))
 (let (($x103 (= ?x102 input.dst.llvm-%x)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x84 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x75)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x70 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x57 $x77)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x64)))))))
 (let (($x79 (and $x69 $x78)))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x97 (and $x82 $x87)))
 (let (($x106 (and $x97 $x105)))
 (let (($x123 (and $x106 $x122)))
 (let (($x144 (and $x123 $x143)))
 (let (($x215 (and $x144 $x214)))
 (let (($x252 (and $x215 $x251)))
 (let (($x160 (and $x252 $x147)))
 (let (($x161 (and $x160 $x149)))
 (let (($x50 (= input.spec-%tmpvar-10.L2%13%d $x14)))
 (let (($x162 (and $x50 $x161)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x163 (and $x30 $x162)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x164 (and $x42 $x163)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x178 (and $x16 $x164)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x156 (and $x40 $x178)))
 (let (($x33 (= ?x21 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x165 (and $x33 $x156)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x186 (and $x9 $x165)))
 (let (($x7 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x199 (and $x7 $x186)))
 (let (($x17 (= ?x22 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x182 (and $x17 $x199)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x187 (and $x8 $x182)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x209 (and $x13 $x187)))
 (let (($x221 (and $x18 $x209)))
 (let (($x35 (= input.spec-%var-y-0.L2%23%bbentry ?x25)))
 (let (($x203 (and $x35 $x221)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x210 (and $x44 $x203)))
 (let (($x223 (and $x18 $x210)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x20)))
 (let (($x224 (and $x24 $x223)))
 (let (($x269 (=> $x224 $x268)))
 (not $x269))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x227 (= (_ bv0 32) ?x222)))
 (let (($x271 (= $x227 true)))
 (let (($x272 (= $x271 true)))
 (let (($x191 (forall ((input.ind-%var861X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x252 (= input.ind-%var861X (_ bv0 32))))
 (let ((?x255 (ite $x252 ?x34 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x259 (= input.ind-%var861X (_ bv1 32))))
 (let ((?x260 (ite $x259 ?x5 ?x255)))
 (let ((?x198 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var861X)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var861X)))
 (=> $x240 (= ?x198 ?x260)))))))))))
 ))
 (let (($x266 (forall ((input.ind-%var860X (_ BitVec 32)) )(let (($x259 (= input.ind-%var860X (_ bv1 32))))
 (let (($x252 (= input.ind-%var860X (_ bv0 32))))
 (let (($x202 (or $x252 $x259)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var860X)))
 (= $x240 $x202))))))
 ))
 (let (($x192 (and $x266 $x191)))
 (let (($x193 (= $x192 true)))
 (let (($x208 (forall ((input.ind-%var851X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x252 (= input.ind-%var851X (_ bv0 32))))
 (let ((?x255 (ite $x252 ?x34 (_ bv0 32))))
 (let ((?x154 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var851X)))
 (let (($x228 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var851X)))
 (=> $x228 (= ?x154 ?x255))))))))
 ))
 (let (($x269 (forall ((input.ind-%var850X (_ BitVec 32)) )(let (($x252 (= input.ind-%var850X (_ bv0 32))))
 (let (($x228 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var850X)))
 (= $x228 $x252))))
 ))
 (let (($x176 (and $x269 $x208)))
 (let (($x180 (= $x176 true)))
 (let (($x223 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var842X)))
 (= $x162 false)))
 ))
 (let (($x187 (forall ((input.ind-%var843X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var843X)))
 (=> $x162 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var843X) (_ bv0 32)))))
 ))
 (let (($x224 (and $x187 $x223)))
 (let (($x233 (= $x224 true)))
 (let (($x232 (forall ((input.ind-%var836X (_ BitVec 32)) )(let (($x259 (= input.ind-%var836X (_ bv1 32))))
 (let (($x252 (= input.ind-%var836X (_ bv0 32))))
 (let (($x202 (or $x252 $x259)))
 (let (($x214 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var836X)))
 (= $x214 $x202))))))
 ))
 (let (($x155 (forall ((input.ind-%var837X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x252 (= input.ind-%var837X (_ bv0 32))))
 (let ((?x255 (ite $x252 ?x34 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x259 (= input.ind-%var837X (_ bv1 32))))
 (let ((?x260 (ite $x259 ?x5 ?x255)))
 (let ((?x238 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var837X)))
 (let (($x214 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var837X)))
 (=> $x214 (= ?x238 ?x260)))))))))))
 ))
 (let (($x218 (and $x155 $x232)))
 (let (($x146 (= $x218 true)))
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x25 (ite $x11 ?x34 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x48 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x35 (ite $x48 ?x5 ?x25)))
 (let (($x171 (= input.spec-%tmpvar-12.L2%17%d.2 ?x35)))
 (let (($x152 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x172 (=> $x152 $x171)))
 (let (($x133 (or $x11 $x48)))
 (let ((?x134 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x134 (_ bv1 32))))
 (let (($x170 (= $x152 $x153)))
 (let (($x26 (= false false)))
 (let (($x132 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x144 (=> $x132 $x26)))
 (let (($x139 (= ?x134 (_ bv0 32))))
 (let (($x143 (= $x132 $x139)))
 (let (($x200 (and (and (and $x143 $x144) $x170) $x172)))
 (let (($x201 (= $x200 true)))
 (let (($x31 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x20 (ite $x31 ?x34 (_ bv0 32))))
 (let (($x22 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x23 (ite $x22 ?x5 ?x20)))
 (let (($x128 (= input.spec-%tmpvar-16.L2%25%d.2 ?x23)))
 (let (($x114 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x135 (=> $x114 $x128)))
 (let (($x123 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x126 (=> $x123 $x26)))
 (let (($x115 (or $x31 $x22)))
 (let ((?x116 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x116 (_ bv0 32))))
 (let (($x125 (= $x123 $x124)))
 (let (($x121 (bvuge ?x116 (_ bv1 32))))
 (let (($x122 (= $x114 $x121)))
 (let (($x130 (and (and (and $x122 $x125) $x126) $x135)))
 (let (($x131 (= $x130 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x117 (concat ?x110 (concat ?x106 ?x104)))))
 (let (($x113 (= ?x46 input.dst.llvm-%x)))
 (let (($x119 (= $x113 true)))
 (let (($x18 (= $x119 true)))
 (let (($x95 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x90 (= $x95 true)))
 (let (($x94 (= $x90 true)))
 (let (($x91 (= $x94 true)))
 (let (($x100 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x101 (= $x100 true)))
 (let (($x89 (= $x101 true)))
 (let (($x92 (= $x89 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x76 $x79)))
 (let (($x83 (and $x80 $x82)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x64 $x83)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x57)))))))
 (let (($x85 (and $x75 $x84)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x97 (= $x87 true)))
 (let (($x96 (and $x97 $x92)))
 (let (($x99 (and $x96 $x91)))
 (let (($x118 (and $x99 $x18)))
 (let (($x136 (and $x118 $x131)))
 (let (($x205 (and $x136 $x201)))
 (let (($x148 (and $x205 $x146)))
 (let (($x234 (and $x148 $x233)))
 (let (($x151 (and $x234 $x180)))
 (let (($x230 (and $x151 $x193)))
 (let (($x68 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x58 (or false $x68)))
 (let (($x179 (and $x58 $x230)))
 (let (($x50 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x59 (= input.spec-%tmpvar-10.L2%13%d $x50)))
 (let (($x196 (and $x59 $x179)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x245 (and $x29 $x196)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x258 (and $x12 $x245)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x241 (and $x27 $x258)))
 (let (($x43 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x246 (and $x43 $x241)))
 (let (($x10 (= ?x34 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x145 (and $x10 $x246)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x183 (and $x37 $x145)))
 (let (($x6 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x262 (and $x6 $x183)))
 (let (($x28 (= ?x5 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x159 (and $x28 $x262)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x174 (and $x38 $x159)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x175 (and $x36 $x174)))
 (let (($x195 (and $x26 $x175)))
 (let (($x15 (= input.spec-%var-y-0.L2%23%bbentry ?x35)))
 (let (($x231 (and $x15 $x195)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x229 (and $x39 $x231)))
 (let (($x217 (and $x26 $x229)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x23)))
 (let (($x194 (and $x24 $x217)))
 (let (($x273 (=> $x194 $x272)))
 (not $x273)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x227 (= (_ bv0 32) ?x222)))
 (let (($x271 (= $x227 true)))
 (let (($x272 (= $x271 true)))
 (let (($x191 (forall ((input.ind-%var861X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x252 (= input.ind-%var861X (_ bv0 32))))
 (let ((?x255 (ite $x252 ?x34 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x259 (= input.ind-%var861X (_ bv1 32))))
 (let ((?x260 (ite $x259 ?x5 ?x255)))
 (let ((?x198 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var861X)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var861X)))
 (=> $x240 (= ?x198 ?x260)))))))))))
 ))
 (let (($x266 (forall ((input.ind-%var860X (_ BitVec 32)) )(let (($x259 (= input.ind-%var860X (_ bv1 32))))
 (let (($x252 (= input.ind-%var860X (_ bv0 32))))
 (let (($x202 (or $x252 $x259)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var860X)))
 (= $x240 $x202))))))
 ))
 (let (($x192 (and $x266 $x191)))
 (let (($x193 (= $x192 true)))
 (let (($x208 (forall ((input.ind-%var851X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x252 (= input.ind-%var851X (_ bv0 32))))
 (let ((?x255 (ite $x252 ?x34 (_ bv0 32))))
 (let ((?x154 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var851X)))
 (let (($x228 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var851X)))
 (=> $x228 (= ?x154 ?x255))))))))
 ))
 (let (($x269 (forall ((input.ind-%var850X (_ BitVec 32)) )(let (($x252 (= input.ind-%var850X (_ bv0 32))))
 (let (($x228 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var850X)))
 (= $x228 $x252))))
 ))
 (let (($x176 (and $x269 $x208)))
 (let (($x180 (= $x176 true)))
 (let (($x223 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var842X)))
 (= $x162 false)))
 ))
 (let (($x187 (forall ((input.ind-%var843X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var843X)))
 (=> $x162 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var843X) (_ bv0 32)))))
 ))
 (let (($x224 (and $x187 $x223)))
 (let (($x233 (= $x224 true)))
 (let (($x232 (forall ((input.ind-%var836X (_ BitVec 32)) )(let (($x259 (= input.ind-%var836X (_ bv1 32))))
 (let (($x252 (= input.ind-%var836X (_ bv0 32))))
 (let (($x202 (or $x252 $x259)))
 (let (($x214 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var836X)))
 (= $x214 $x202))))))
 ))
 (let (($x155 (forall ((input.ind-%var837X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x252 (= input.ind-%var837X (_ bv0 32))))
 (let ((?x255 (ite $x252 ?x34 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x259 (= input.ind-%var837X (_ bv1 32))))
 (let ((?x260 (ite $x259 ?x5 ?x255)))
 (let ((?x238 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var837X)))
 (let (($x214 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var837X)))
 (=> $x214 (= ?x238 ?x260)))))))))))
 ))
 (let (($x218 (and $x155 $x232)))
 (let (($x146 (= $x218 true)))
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x11 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x25 (ite $x11 ?x34 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x48 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x35 (ite $x48 ?x5 ?x25)))
 (let (($x171 (= input.spec-%tmpvar-12.L2%17%d.2 ?x35)))
 (let (($x152 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x172 (=> $x152 $x171)))
 (let (($x133 (or $x11 $x48)))
 (let ((?x134 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x134 (_ bv1 32))))
 (let (($x170 (= $x152 $x153)))
 (let (($x26 (= false false)))
 (let (($x132 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x144 (=> $x132 $x26)))
 (let (($x139 (= ?x134 (_ bv0 32))))
 (let (($x143 (= $x132 $x139)))
 (let (($x200 (and (and (and $x143 $x144) $x170) $x172)))
 (let (($x201 (= $x200 true)))
 (let (($x31 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x20 (ite $x31 ?x34 (_ bv0 32))))
 (let (($x22 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x23 (ite $x22 ?x5 ?x20)))
 (let (($x128 (= input.spec-%tmpvar-16.L2%25%d.2 ?x23)))
 (let (($x114 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x135 (=> $x114 $x128)))
 (let (($x123 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x126 (=> $x123 $x26)))
 (let (($x115 (or $x31 $x22)))
 (let ((?x116 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x116 (_ bv0 32))))
 (let (($x125 (= $x123 $x124)))
 (let (($x121 (bvuge ?x116 (_ bv1 32))))
 (let (($x122 (= $x114 $x121)))
 (let (($x130 (and (and (and $x122 $x125) $x126) $x135)))
 (let (($x131 (= $x130 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x117 (concat ?x110 (concat ?x106 ?x104)))))
 (let (($x113 (= ?x46 input.dst.llvm-%x)))
 (let (($x119 (= $x113 true)))
 (let (($x18 (= $x119 true)))
 (let (($x95 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x90 (= $x95 true)))
 (let (($x94 (= $x90 true)))
 (let (($x91 (= $x94 true)))
 (let (($x100 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x101 (= $x100 true)))
 (let (($x89 (= $x101 true)))
 (let (($x92 (= $x89 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x76 $x79)))
 (let (($x83 (and $x80 $x82)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x64 $x83)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x57)))))))
 (let (($x85 (and $x75 $x84)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x97 (= $x87 true)))
 (let (($x96 (and $x97 $x92)))
 (let (($x99 (and $x96 $x91)))
 (let (($x118 (and $x99 $x18)))
 (let (($x136 (and $x118 $x131)))
 (let (($x205 (and $x136 $x201)))
 (let (($x148 (and $x205 $x146)))
 (let (($x234 (and $x148 $x233)))
 (let (($x151 (and $x234 $x180)))
 (let (($x230 (and $x151 $x193)))
 (let (($x68 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x58 (or false $x68)))
 (let (($x179 (and $x58 $x230)))
 (let (($x50 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x59 (= input.spec-%tmpvar-10.L2%13%d $x50)))
 (let (($x196 (and $x59 $x179)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x245 (and $x29 $x196)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x258 (and $x12 $x245)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x241 (and $x27 $x258)))
 (let (($x43 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x246 (and $x43 $x241)))
 (let (($x10 (= ?x34 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x145 (and $x10 $x246)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x183 (and $x37 $x145)))
 (let (($x6 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x262 (and $x6 $x183)))
 (let (($x28 (= ?x5 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x159 (and $x28 $x262)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x174 (and $x38 $x159)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x175 (and $x36 $x174)))
 (let (($x195 (and $x26 $x175)))
 (let (($x15 (= input.spec-%var-y-0.L2%23%bbentry ?x35)))
 (let (($x231 (and $x15 $x195)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x229 (and $x39 $x231)))
 (let (($x217 (and $x26 $x229)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x23)))
 (let (($x194 (and $x24 $x217)))
 (let (($x273 (=> $x194 $x272)))
 (not $x273)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x167 (= (_ bv0 32) ?x158)))
 (let (($x219 (= $x167 true)))
 (let (($x168 (= $x219 true)))
 (let (($x206 (forall ((input.ind-%var955X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x199 (= input.ind-%var955X (_ bv0 32))))
 (let ((?x182 (ite $x199 ?x20 (_ bv0 32))))
 (let ((?x45 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x187 (= input.ind-%var955X (_ bv1 32))))
 (let ((?x210 (ite $x187 ?x45 ?x182)))
 (let ((?x209 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var955X)))
 (let (($x157 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var955X)))
 (=> $x157 (= ?x209 ?x210)))))))))))
 ))
 (let (($x140 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x187 (= input.ind-%var954X (_ bv1 32))))
 (let (($x199 (= input.ind-%var954X (_ bv0 32))))
 (let (($x181 (or $x199 $x187)))
 (let (($x157 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var954X)))
 (= $x157 $x181))))))
 ))
 (let (($x189 (and $x140 $x206)))
 (let (($x247 (= $x189 true)))
 (let (($x237 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x199 (= input.ind-%var944X (_ bv0 32))))
 (let (($x231 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var944X)))
 (= $x231 $x199))))
 ))
 (let (($x63 (forall ((input.ind-%var945X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x199 (= input.ind-%var945X (_ bv0 32))))
 (let ((?x182 (ite $x199 ?x20 (_ bv0 32))))
 (let ((?x194 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var945X)))
 (let (($x231 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var945X)))
 (=> $x231 (= ?x194 ?x182))))))))
 ))
 (let (($x188 (and $x63 $x237)))
 (let (($x242 (= $x188 true)))
 (let (($x183 (forall ((input.ind-%var937X (_ BitVec 32)) )(let (($x198 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var937X)))
 (=> $x198 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var937X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var936X (_ BitVec 32)) )(let (($x198 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var936X)))
 (= $x198 false)))
 ))
 (let (($x262 (and $x192 $x183)))
 (let (($x159 (= $x262 true)))
 (let (($x176 (forall ((input.ind-%var930X (_ BitVec 32)) )(let (($x187 (= input.ind-%var930X (_ bv1 32))))
 (let (($x199 (= input.ind-%var930X (_ bv0 32))))
 (let (($x181 (or $x199 $x187)))
 (let (($x264 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var930X)))
 (= $x264 $x181))))))
 ))
 (let (($x233 (forall ((input.ind-%var931X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x199 (= input.ind-%var931X (_ bv0 32))))
 (let ((?x182 (ite $x199 ?x20 (_ bv0 32))))
 (let ((?x45 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x187 (= input.ind-%var931X (_ bv1 32))))
 (let ((?x210 (ite $x187 ?x45 ?x182)))
 (let ((?x202 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var931X)))
 (let (($x264 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var931X)))
 (=> $x264 (= ?x202 ?x210)))))))))))
 ))
 (let (($x180 (and $x233 $x176)))
 (let (($x151 (= $x180 true)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x25 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x35 (ite $x25 ?x20 (_ bv0 32))))
 (let ((?x45 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x11 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x15 (ite $x11 ?x45 ?x35)))
 (let (($x200 (= input.spec-%tmpvar-12.L2%17%d.2 ?x15)))
 (let (($x184 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x201 (=> $x184 $x200)))
 (let (($x144 (or $x25 $x11)))
 (let ((?x173 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x173 (_ bv1 32))))
 (let (($x171 (= $x184 $x169)))
 (let (($x44 (= false false)))
 (let (($x143 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x170 (=> $x143 $x44)))
 (let (($x152 (= ?x173 (_ bv0 32))))
 (let (($x153 (= $x143 $x152)))
 (let (($x214 (and (and (and $x153 $x170) $x171) $x201)))
 (let (($x238 (= $x214 true)))
 (let (($x49 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x23 (ite $x49 ?x20 (_ bv0 32))))
 (let (($x51 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x19 (ite $x51 ?x45 ?x23)))
 (let (($x130 (= input.spec-%tmpvar-16.L2%25%d.2 ?x19)))
 (let (($x123 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x131 (=> $x123 $x130)))
 (let (($x126 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x128 (=> $x126 $x44)))
 (let (($x124 (or $x49 $x51)))
 (let ((?x125 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (= ?x125 (_ bv0 32))))
 (let (($x127 (= $x126 $x137)))
 (let (($x129 (bvuge ?x125 (_ bv1 32))))
 (let (($x26 (= $x123 $x129)))
 (let (($x132 (and (and (and $x26 $x127) $x128) $x131)))
 (let (($x133 (= $x132 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x118 (concat ?x113 (concat ?x104 ?x105)))))
 (let (($x114 (= ?x120 input.dst.llvm-%x)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x99 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x102 (= $x99 true)))
 (let (($x112 (= $x102 true)))
 (let (($x117 (= $x112 true)))
 (let (($x92 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x96 (not $x92)))
 (let (($x95 (= $x96 true)))
 (let (($x90 (= $x95 true)))
 (let (($x94 (= $x90 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x84)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x79 $x82)))
 (let (($x86 (and $x83 $x85)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x69 $x86)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x73)))))))
 (let (($x97 (and $x78 $x87)))
 (let (($x98 (= $x97 true)))
 (let (($x100 (= $x98 true)))
 (let (($x101 (= $x100 true)))
 (let (($x91 (and $x101 $x94)))
 (let (($x108 (and $x91 $x117)))
 (let (($x121 (and $x108 $x116)))
 (let (($x134 (and $x121 $x133)))
 (let (($x259 (and $x134 $x238)))
 (let (($x240 (and $x259 $x151)))
 (let (($x174 (and $x240 $x159)))
 (let (($x177 (and $x174 $x242)))
 (let (($x248 (and $x177 $x247)))
 (let (($x58 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x65 (or false $x58)))
 (let (($x249 (and $x65 $x248)))
 (let (($x59 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x60 (= input.spec-%tmpvar-10.L2%13%d $x59)))
 (let (($x250 (and $x60 $x249)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x203 (and $x14 $x250)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x212 (and $x30 $x203)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x251 (and $x42 $x212)))
 (let (($x16 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x165 (and $x16 $x251)))
 (let (($x32 (= ?x20 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x267 (and $x32 $x165)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x161 (and $x33 $x267)))
 (let (($x9 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x186 (and $x9 $x161)))
 (let (($x7 (= ?x45 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x244 (and $x7 $x186)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x261 (and $x17 $x244)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x55 (and $x8 $x261)))
 (let (($x256 (and $x44 $x55)))
 (let (($x13 (= input.spec-%var-y-0.L2%23%bbentry ?x15)))
 (let (($x150 (and $x13 $x256)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x253 (and $x41 $x150)))
 (let (($x254 (and $x44 $x253)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x19)))
 (let (($x220 (and $x24 $x254)))
 (let (($x204 (=> $x220 $x168)))
 (not $x204))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x167 (= (_ bv0 32) ?x158)))
 (let (($x219 (= $x167 true)))
 (let (($x168 (= $x219 true)))
 (let (($x206 (forall ((input.ind-%var955X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x199 (= input.ind-%var955X (_ bv0 32))))
 (let ((?x182 (ite $x199 ?x20 (_ bv0 32))))
 (let ((?x45 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x187 (= input.ind-%var955X (_ bv1 32))))
 (let ((?x210 (ite $x187 ?x45 ?x182)))
 (let ((?x209 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var955X)))
 (let (($x157 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var955X)))
 (=> $x157 (= ?x209 ?x210)))))))))))
 ))
 (let (($x140 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x187 (= input.ind-%var954X (_ bv1 32))))
 (let (($x199 (= input.ind-%var954X (_ bv0 32))))
 (let (($x181 (or $x199 $x187)))
 (let (($x157 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var954X)))
 (= $x157 $x181))))))
 ))
 (let (($x189 (and $x140 $x206)))
 (let (($x247 (= $x189 true)))
 (let (($x237 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x199 (= input.ind-%var944X (_ bv0 32))))
 (let (($x231 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var944X)))
 (= $x231 $x199))))
 ))
 (let (($x63 (forall ((input.ind-%var945X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x199 (= input.ind-%var945X (_ bv0 32))))
 (let ((?x182 (ite $x199 ?x20 (_ bv0 32))))
 (let ((?x194 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var945X)))
 (let (($x231 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var945X)))
 (=> $x231 (= ?x194 ?x182))))))))
 ))
 (let (($x188 (and $x63 $x237)))
 (let (($x242 (= $x188 true)))
 (let (($x183 (forall ((input.ind-%var937X (_ BitVec 32)) )(let (($x198 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var937X)))
 (=> $x198 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var937X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var936X (_ BitVec 32)) )(let (($x198 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var936X)))
 (= $x198 false)))
 ))
 (let (($x262 (and $x192 $x183)))
 (let (($x159 (= $x262 true)))
 (let (($x176 (forall ((input.ind-%var930X (_ BitVec 32)) )(let (($x187 (= input.ind-%var930X (_ bv1 32))))
 (let (($x199 (= input.ind-%var930X (_ bv0 32))))
 (let (($x181 (or $x199 $x187)))
 (let (($x264 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var930X)))
 (= $x264 $x181))))))
 ))
 (let (($x233 (forall ((input.ind-%var931X (_ BitVec 32)) )(let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x199 (= input.ind-%var931X (_ bv0 32))))
 (let ((?x182 (ite $x199 ?x20 (_ bv0 32))))
 (let ((?x45 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x187 (= input.ind-%var931X (_ bv1 32))))
 (let ((?x210 (ite $x187 ?x45 ?x182)))
 (let ((?x202 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var931X)))
 (let (($x264 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var931X)))
 (=> $x264 (= ?x202 ?x210)))))))))))
 ))
 (let (($x180 (and $x233 $x176)))
 (let (($x151 (= $x180 true)))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x25 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x35 (ite $x25 ?x20 (_ bv0 32))))
 (let ((?x45 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x11 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x15 (ite $x11 ?x45 ?x35)))
 (let (($x200 (= input.spec-%tmpvar-12.L2%17%d.2 ?x15)))
 (let (($x184 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x201 (=> $x184 $x200)))
 (let (($x144 (or $x25 $x11)))
 (let ((?x173 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x173 (_ bv1 32))))
 (let (($x171 (= $x184 $x169)))
 (let (($x44 (= false false)))
 (let (($x143 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x170 (=> $x143 $x44)))
 (let (($x152 (= ?x173 (_ bv0 32))))
 (let (($x153 (= $x143 $x152)))
 (let (($x214 (and (and (and $x153 $x170) $x171) $x201)))
 (let (($x238 (= $x214 true)))
 (let (($x49 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x23 (ite $x49 ?x20 (_ bv0 32))))
 (let (($x51 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x19 (ite $x51 ?x45 ?x23)))
 (let (($x130 (= input.spec-%tmpvar-16.L2%25%d.2 ?x19)))
 (let (($x123 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x131 (=> $x123 $x130)))
 (let (($x126 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x128 (=> $x126 $x44)))
 (let (($x124 (or $x49 $x51)))
 (let ((?x125 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (= ?x125 (_ bv0 32))))
 (let (($x127 (= $x126 $x137)))
 (let (($x129 (bvuge ?x125 (_ bv1 32))))
 (let (($x26 (= $x123 $x129)))
 (let (($x132 (and (and (and $x26 $x127) $x128) $x131)))
 (let (($x133 (= $x132 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x118 (concat ?x113 (concat ?x104 ?x105)))))
 (let (($x114 (= ?x120 input.dst.llvm-%x)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x99 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x102 (= $x99 true)))
 (let (($x112 (= $x102 true)))
 (let (($x117 (= $x112 true)))
 (let (($x92 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x96 (not $x92)))
 (let (($x95 (= $x96 true)))
 (let (($x90 (= $x95 true)))
 (let (($x94 (= $x90 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x84)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x79 $x82)))
 (let (($x86 (and $x83 $x85)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x69 $x86)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x73)))))))
 (let (($x97 (and $x78 $x87)))
 (let (($x98 (= $x97 true)))
 (let (($x100 (= $x98 true)))
 (let (($x101 (= $x100 true)))
 (let (($x91 (and $x101 $x94)))
 (let (($x108 (and $x91 $x117)))
 (let (($x121 (and $x108 $x116)))
 (let (($x134 (and $x121 $x133)))
 (let (($x259 (and $x134 $x238)))
 (let (($x240 (and $x259 $x151)))
 (let (($x174 (and $x240 $x159)))
 (let (($x177 (and $x174 $x242)))
 (let (($x248 (and $x177 $x247)))
 (let (($x58 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x65 (or false $x58)))
 (let (($x249 (and $x65 $x248)))
 (let (($x59 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x60 (= input.spec-%tmpvar-10.L2%13%d $x59)))
 (let (($x250 (and $x60 $x249)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x203 (and $x14 $x250)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x212 (and $x30 $x203)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x251 (and $x42 $x212)))
 (let (($x16 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x165 (and $x16 $x251)))
 (let (($x32 (= ?x20 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x267 (and $x32 $x165)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x161 (and $x33 $x267)))
 (let (($x9 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x186 (and $x9 $x161)))
 (let (($x7 (= ?x45 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x244 (and $x7 $x186)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x261 (and $x17 $x244)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x55 (and $x8 $x261)))
 (let (($x256 (and $x44 $x55)))
 (let (($x13 (= input.spec-%var-y-0.L2%23%bbentry ?x15)))
 (let (($x150 (and $x13 $x256)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x253 (and $x41 $x150)))
 (let (($x254 (and $x44 $x253)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x19)))
 (let (($x220 (and $x24 $x254)))
 (let (($x204 (=> $x220 $x168)))
 (not $x204))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x49 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x19 (ite $x49 ?x23 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x21 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x34 (ite $x21 ?x5 ?x19)))
 (let ((?x164 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x270 (= ?x164 ?x34)))
 (let (($x52 (= $x270 true)))
 (let (($x166 (= $x52 true)))
 (let (($x149 (forall ((input.ind-%var1049X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x180 (= input.ind-%var1049X (_ bv0 32))))
 (let ((?x151 (ite $x180 ?x23 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x240 (= input.ind-%var1049X (_ bv1 32))))
 (let ((?x198 (ite $x240 ?x5 ?x151)))
 (let ((?x217 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1049X)))
 (let (($x222 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1049X)))
 (=> $x222 (= ?x217 ?x198)))))))))))
 ))
 (let (($x232 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let (($x240 (= input.ind-%var1048X (_ bv1 32))))
 (let (($x180 (= input.ind-%var1048X (_ bv0 32))))
 (let (($x231 (or $x180 $x240)))
 (let (($x222 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1048X)))
 (= $x222 $x231))))))
 ))
 (let (($x239 (and $x232 $x149)))
 (let (($x226 (= $x239 true)))
 (let (($x88 (forall ((input.ind-%var1038X (_ BitVec 32)) )(let (($x180 (= input.ind-%var1038X (_ bv0 32))))
 (let (($x186 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1038X)))
 (= $x186 $x180))))
 ))
 (let (($x219 (forall ((input.ind-%var1039X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x180 (= input.ind-%var1039X (_ bv0 32))))
 (let ((?x151 (ite $x180 ?x23 (_ bv0 32))))
 (let ((?x55 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1039X)))
 (let (($x186 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1039X)))
 (=> $x186 (= ?x55 ?x151))))))))
 ))
 (let (($x207 (and $x219 $x88)))
 (let (($x110 (= $x207 true)))
 (let (($x203 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1031X)))
 (=> $x242 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1031X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1030X)))
 (= $x242 false)))
 ))
 (let (($x212 (and $x140 $x203)))
 (let (($x251 (= $x212 true)))
 (let (($x274 (forall ((input.ind-%var1024X (_ BitVec 32)) )(let (($x240 (= input.ind-%var1024X (_ bv1 32))))
 (let (($x180 (= input.ind-%var1024X (_ bv0 32))))
 (let (($x231 (or $x180 $x240)))
 (let (($x202 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1024X)))
 (= $x202 $x231))))))
 ))
 (let (($x196 (forall ((input.ind-%var1025X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x180 (= input.ind-%var1025X (_ bv0 32))))
 (let ((?x151 (ite $x180 ?x23 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x240 (= input.ind-%var1025X (_ bv1 32))))
 (let ((?x198 (ite $x240 ?x5 ?x151)))
 (let ((?x182 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1025X)))
 (let (($x202 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1025X)))
 (=> $x202 (= ?x182 ?x198)))))))))))
 ))
 (let (($x62 (and $x196 $x274)))
 (let (($x63 (= $x62 true)))
 (let (($x35 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x15 (ite $x35 ?x23 (_ bv0 32))))
 (let (($x25 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x13 (ite $x25 ?x5 ?x15)))
 (let (($x171 (= input.spec-%tmpvar-12.L2%17%d.2 ?x13)))
 (let (($x170 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x213 (=> $x170 $x171)))
 (let (($x143 (or $x35 $x25)))
 (let ((?x144 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x144 (_ bv1 32))))
 (let (($x184 (= $x170 $x205)))
 (let (($x39 (= false false)))
 (let (($x139 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x153 (=> $x139 $x39)))
 (let (($x173 (= ?x144 (_ bv0 32))))
 (let (($x152 (= $x139 $x173)))
 (let (($x201 (and (and (and $x152 $x153) $x184) $x213)))
 (let (($x214 (= $x201 true)))
 (let (($x128 (= input.spec-%tmpvar-16.L2%25%d.2 ?x34)))
 (let (($x123 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x138 (=> $x123 $x128)))
 (let (($x126 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x136 (=> $x126 $x39)))
 (let (($x124 (or $x49 $x21)))
 (let ((?x125 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (= ?x125 (_ bv0 32))))
 (let (($x127 (= $x126 $x137)))
 (let (($x129 (bvuge ?x125 (_ bv1 32))))
 (let (($x26 (= $x123 $x129)))
 (let (($x131 (and (and (and $x26 $x127) $x136) $x138)))
 (let (($x132 (= $x131 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x119 (concat ?x104 (concat ?x111 ?x18)))))
 (let (($x114 (= ?x120 input.dst.llvm-%x)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x91 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x99 (= $x91 true)))
 (let (($x102 (= $x99 true)))
 (let (($x112 (= $x102 true)))
 (let (($x92 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x96 (= $x92 true)))
 (let (($x95 (= $x96 true)))
 (let (($x90 (= $x95 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x84)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x79 $x82)))
 (let (($x86 (and $x83 $x85)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x54 $x86)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x75)))))))
 (let (($x97 (and $x69 $x87)))
 (let (($x98 (= $x97 true)))
 (let (($x100 (= $x98 true)))
 (let (($x101 (= $x100 true)))
 (let (($x94 (and $x101 $x90)))
 (let (($x117 (and $x94 $x112)))
 (let (($x121 (and $x117 $x116)))
 (let (($x133 (and $x121 $x132)))
 (let (($x238 (and $x133 $x214)))
 (let (($x156 (and $x238 $x63)))
 (let (($x165 (and $x156 $x251)))
 (let (($x142 (and $x165 $x110)))
 (let (($x268 (and $x142 $x226)))
 (let (($x265 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x268)))
 (let (($x60 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x68 (= input.spec-%tmpvar-10.L2%13%d $x60)))
 (let (($x225 (and $x68 $x265)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x218 (and $x50 $x225)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x146 (and $x29 $x218)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x148 (and $x12 $x146)))
 (let (($x27 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x162 (and $x27 $x148)))
 (let (($x40 (= ?x23 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x190 (and $x40 $x162)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x255 (and $x10 $x190)))
 (let (($x37 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x178 (and $x37 $x255)))
 (let (($x6 (= ?x5 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x258 (and $x6 $x178)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x163 (and $x28 $x258)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x230 (and $x38 $x163)))
 (let (($x241 (and $x39 $x230)))
 (let (($x36 (= input.spec-%var-y-0.L2%23%bbentry ?x13)))
 (let (($x272 (and $x36 $x241)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x243 (and $x48 $x272)))
 (let (($x195 (and $x39 $x243)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x34)))
 (let (($x273 (and $x24 $x195)))
 (let (($x263 (=> $x273 $x166)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x49 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x19 (ite $x49 ?x23 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x21 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x34 (ite $x21 ?x5 ?x19)))
 (let ((?x164 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x270 (= ?x164 ?x34)))
 (let (($x52 (= $x270 true)))
 (let (($x166 (= $x52 true)))
 (let (($x149 (forall ((input.ind-%var1049X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x180 (= input.ind-%var1049X (_ bv0 32))))
 (let ((?x151 (ite $x180 ?x23 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x240 (= input.ind-%var1049X (_ bv1 32))))
 (let ((?x198 (ite $x240 ?x5 ?x151)))
 (let ((?x217 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1049X)))
 (let (($x222 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1049X)))
 (=> $x222 (= ?x217 ?x198)))))))))))
 ))
 (let (($x232 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let (($x240 (= input.ind-%var1048X (_ bv1 32))))
 (let (($x180 (= input.ind-%var1048X (_ bv0 32))))
 (let (($x231 (or $x180 $x240)))
 (let (($x222 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1048X)))
 (= $x222 $x231))))))
 ))
 (let (($x239 (and $x232 $x149)))
 (let (($x226 (= $x239 true)))
 (let (($x88 (forall ((input.ind-%var1038X (_ BitVec 32)) )(let (($x180 (= input.ind-%var1038X (_ bv0 32))))
 (let (($x186 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1038X)))
 (= $x186 $x180))))
 ))
 (let (($x219 (forall ((input.ind-%var1039X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x180 (= input.ind-%var1039X (_ bv0 32))))
 (let ((?x151 (ite $x180 ?x23 (_ bv0 32))))
 (let ((?x55 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1039X)))
 (let (($x186 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1039X)))
 (=> $x186 (= ?x55 ?x151))))))))
 ))
 (let (($x207 (and $x219 $x88)))
 (let (($x110 (= $x207 true)))
 (let (($x203 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1031X)))
 (=> $x242 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1031X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1030X)))
 (= $x242 false)))
 ))
 (let (($x212 (and $x140 $x203)))
 (let (($x251 (= $x212 true)))
 (let (($x274 (forall ((input.ind-%var1024X (_ BitVec 32)) )(let (($x240 (= input.ind-%var1024X (_ bv1 32))))
 (let (($x180 (= input.ind-%var1024X (_ bv0 32))))
 (let (($x231 (or $x180 $x240)))
 (let (($x202 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1024X)))
 (= $x202 $x231))))))
 ))
 (let (($x196 (forall ((input.ind-%var1025X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x180 (= input.ind-%var1025X (_ bv0 32))))
 (let ((?x151 (ite $x180 ?x23 (_ bv0 32))))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x240 (= input.ind-%var1025X (_ bv1 32))))
 (let ((?x198 (ite $x240 ?x5 ?x151)))
 (let ((?x182 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1025X)))
 (let (($x202 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1025X)))
 (=> $x202 (= ?x182 ?x198)))))))))))
 ))
 (let (($x62 (and $x196 $x274)))
 (let (($x63 (= $x62 true)))
 (let (($x35 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x15 (ite $x35 ?x23 (_ bv0 32))))
 (let (($x25 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x13 (ite $x25 ?x5 ?x15)))
 (let (($x171 (= input.spec-%tmpvar-12.L2%17%d.2 ?x13)))
 (let (($x170 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x213 (=> $x170 $x171)))
 (let (($x143 (or $x35 $x25)))
 (let ((?x144 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x144 (_ bv1 32))))
 (let (($x184 (= $x170 $x205)))
 (let (($x39 (= false false)))
 (let (($x139 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x153 (=> $x139 $x39)))
 (let (($x173 (= ?x144 (_ bv0 32))))
 (let (($x152 (= $x139 $x173)))
 (let (($x201 (and (and (and $x152 $x153) $x184) $x213)))
 (let (($x214 (= $x201 true)))
 (let (($x128 (= input.spec-%tmpvar-16.L2%25%d.2 ?x34)))
 (let (($x123 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x138 (=> $x123 $x128)))
 (let (($x126 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x136 (=> $x126 $x39)))
 (let (($x124 (or $x49 $x21)))
 (let ((?x125 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (= ?x125 (_ bv0 32))))
 (let (($x127 (= $x126 $x137)))
 (let (($x129 (bvuge ?x125 (_ bv1 32))))
 (let (($x26 (= $x123 $x129)))
 (let (($x131 (and (and (and $x26 $x127) $x136) $x138)))
 (let (($x132 (= $x131 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x119 (concat ?x104 (concat ?x111 ?x18)))))
 (let (($x114 (= ?x120 input.dst.llvm-%x)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x91 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x99 (= $x91 true)))
 (let (($x102 (= $x99 true)))
 (let (($x112 (= $x102 true)))
 (let (($x92 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x96 (= $x92 true)))
 (let (($x95 (= $x96 true)))
 (let (($x90 (= $x95 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x84)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x79 $x82)))
 (let (($x86 (and $x83 $x85)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x54 $x86)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x75)))))))
 (let (($x97 (and $x69 $x87)))
 (let (($x98 (= $x97 true)))
 (let (($x100 (= $x98 true)))
 (let (($x101 (= $x100 true)))
 (let (($x94 (and $x101 $x90)))
 (let (($x117 (and $x94 $x112)))
 (let (($x121 (and $x117 $x116)))
 (let (($x133 (and $x121 $x132)))
 (let (($x238 (and $x133 $x214)))
 (let (($x156 (and $x238 $x63)))
 (let (($x165 (and $x156 $x251)))
 (let (($x142 (and $x165 $x110)))
 (let (($x268 (and $x142 $x226)))
 (let (($x265 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x268)))
 (let (($x60 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x68 (= input.spec-%tmpvar-10.L2%13%d $x60)))
 (let (($x225 (and $x68 $x265)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x218 (and $x50 $x225)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x146 (and $x29 $x218)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x148 (and $x12 $x146)))
 (let (($x27 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x162 (and $x27 $x148)))
 (let (($x40 (= ?x23 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x190 (and $x40 $x162)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x255 (and $x10 $x190)))
 (let (($x37 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x178 (and $x37 $x255)))
 (let (($x6 (= ?x5 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x258 (and $x6 $x178)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x163 (and $x28 $x258)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x230 (and $x38 $x163)))
 (let (($x241 (and $x39 $x230)))
 (let (($x36 (= input.spec-%var-y-0.L2%23%bbentry ?x13)))
 (let (($x272 (and $x36 $x241)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x243 (and $x48 $x272)))
 (let (($x195 (and $x39 $x243)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x34)))
 (let (($x273 (and $x24 $x195)))
 (let (($x263 (=> $x273 $x166)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x45 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x45 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x5 (ite $x20 ?x51 ?x34)))
 (let ((?x257 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x266 (= ?x257 ?x5)))
 (let (($x179 (= $x266 true)))
 (let (($x271 (= $x179 true)))
 (let (($x159 (forall ((input.ind-%var1143X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x56 (= input.ind-%var1143X (_ bv0 32))))
 (let ((?x140 (ite $x56 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x206 (= input.ind-%var1143X (_ bv1 32))))
 (let ((?x249 (ite $x206 ?x51 ?x140)))
 (let ((?x150 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1143X)))
 (let (($x199 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1143X)))
 (=> $x199 (= ?x150 ?x249)))))))))))
 ))
 (let (($x261 (forall ((input.ind-%var1142X (_ BitVec 32)) )(let (($x206 (= input.ind-%var1142X (_ bv1 32))))
 (let (($x56 (= input.ind-%var1142X (_ bv0 32))))
 (let (($x219 (or $x56 $x206)))
 (let (($x199 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1142X)))
 (= $x199 $x219))))))
 ))
 (let (($x174 (and $x261 $x159)))
 (let (($x229 (= $x174 true)))
 (let (($x189 (forall ((input.ind-%var1132X (_ BitVec 32)) )(let (($x56 (= input.ind-%var1132X (_ bv0 32))))
 (let (($x241 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1132X)))
 (= $x241 $x56))))
 ))
 (let (($x58 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x56 (= input.ind-%var1133X (_ bv0 32))))
 (let ((?x140 (ite $x56 ?x19 (_ bv0 32))))
 (let ((?x195 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1133X)))
 (let (($x241 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1133X)))
 (=> $x241 (= ?x195 ?x140))))))))
 ))
 (let (($x244 (and $x58 $x189)))
 (let (($x256 (= $x244 true)))
 (let (($x190 (forall ((input.ind-%var1125X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1125X)))
 (=> $x232 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1125X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var1124X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1124X)))
 (= $x232 false)))
 ))
 (let (($x255 (and $x149 $x190)))
 (let (($x178 (= $x255 true)))
 (let (($x88 (forall ((input.ind-%var1118X (_ BitVec 32)) )(let (($x206 (= input.ind-%var1118X (_ bv1 32))))
 (let (($x56 (= input.ind-%var1118X (_ bv0 32))))
 (let (($x219 (or $x56 $x206)))
 (let (($x198 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1118X)))
 (= $x198 $x219))))))
 ))
 (let (($x212 (forall ((input.ind-%var1119X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x56 (= input.ind-%var1119X (_ bv0 32))))
 (let ((?x140 (ite $x56 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x206 (= input.ind-%var1119X (_ bv1 32))))
 (let ((?x249 (ite $x206 ?x51 ?x140)))
 (let ((?x196 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1119X)))
 (let (($x198 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1119X)))
 (=> $x198 (= ?x196 ?x249)))))))))))
 ))
 (let (($x207 (and $x212 $x88)))
 (let (($x110 (= $x207 true)))
 (let (($x15 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x13 (ite $x15 ?x19 (_ bv0 32))))
 (let (($x35 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x36 (ite $x35 ?x51 ?x13)))
 (let (($x213 (= input.spec-%tmpvar-12.L2%17%d.2 ?x36)))
 (let (($x184 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x201 (=> $x184 $x213)))
 (let (($x152 (or $x15 $x35)))
 (let ((?x153 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x153 (_ bv1 32))))
 (let (($x169 (= $x184 $x200)))
 (let (($x41 (= false false)))
 (let (($x173 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x205 (=> $x173 $x41)))
 (let (($x172 (= ?x153 (_ bv0 32))))
 (let (($x170 (= $x173 $x172)))
 (let (($x264 (and (and (and $x170 $x205) $x169) $x201)))
 (let (($x202 (= $x264 true)))
 (let (($x138 (= input.spec-%tmpvar-16.L2%25%d.2 ?x5)))
 (let (($x26 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x131 (=> $x26 $x138)))
 (let (($x39 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x44 (=> $x39 $x41)))
 (let (($x126 (or $x45 $x20)))
 (let ((?x137 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x137 (_ bv0 32))))
 (let (($x130 (= $x39 $x136)))
 (let (($x127 (bvuge ?x137 (_ bv1 32))))
 (let (($x135 (= $x26 $x127)))
 (let (($x134 (and (and (and $x135 $x130) $x44) $x131)))
 (let (($x139 (= $x134 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x116 (concat ?x120 (concat ?x111 ?x104)))))
 (let (($x122 (= ?x121 input.dst.llvm-%x)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x112 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x117 (= $x112 true)))
 (let (($x108 (= $x117 true)))
 (let (($x107 (= $x108 true)))
 (let (($x95 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x90 (not $x95)))
 (let (($x94 (= $x90 true)))
 (let (($x91 (= $x94 true)))
 (let (($x99 (= $x91 true)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x86)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x81 $x84)))
 (let (($x97 (and $x85 $x87)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x71 $x97)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x76)))))))
 (let (($x100 (and $x80 $x98)))
 (let (($x101 (= $x100 true)))
 (let (($x89 (= $x101 true)))
 (let (($x92 (= $x89 true)))
 (let (($x102 (and $x92 $x99)))
 (let (($x119 (and $x102 $x107)))
 (let (($x125 (and $x119 $x124)))
 (let (($x143 (and $x125 $x139)))
 (let (($x182 (and $x143 $x202)))
 (let (($x142 (and $x182 $x110)))
 (let (($x258 (and $x142 $x178)))
 (let (($x160 (and $x258 $x256)))
 (let (($x224 (and $x160 $x229)))
 (let (($x181 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x224)))
 (let (($x68 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x154 (= input.spec-%tmpvar-10.L2%13%d $x68)))
 (let (($x208 (and $x154 $x181)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x157 (and $x59 $x208)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x260 (and $x14 $x157)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x176 (and $x30 $x260)))
 (let (($x42 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x247 (and $x42 $x176)))
 (let (($x43 (= ?x19 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x67 (and $x43 $x247)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x147 (and $x32 $x67)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x248 (and $x33 $x147)))
 (let (($x9 (= ?x51 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x254 (and $x9 $x248)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x221 (and $x7 $x254)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x161 (and $x17 $x221)))
 (let (($x220 (and $x41 $x161)))
 (let (($x8 (= input.spec-%var-y-0.L2%23%bbentry ?x36)))
 (let (($x155 (and $x8 $x220)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x234 (and $x11 $x155)))
 (let (($x103 (and $x41 $x234)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x5)))
 (let (($x227 (and $x24 $x103)))
 (let (($x235 (=> $x227 $x271)))
 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x45 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x34 (ite $x45 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x5 (ite $x20 ?x51 ?x34)))
 (let ((?x257 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x266 (= ?x257 ?x5)))
 (let (($x179 (= $x266 true)))
 (let (($x271 (= $x179 true)))
 (let (($x159 (forall ((input.ind-%var1143X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x56 (= input.ind-%var1143X (_ bv0 32))))
 (let ((?x140 (ite $x56 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x206 (= input.ind-%var1143X (_ bv1 32))))
 (let ((?x249 (ite $x206 ?x51 ?x140)))
 (let ((?x150 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1143X)))
 (let (($x199 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1143X)))
 (=> $x199 (= ?x150 ?x249)))))))))))
 ))
 (let (($x261 (forall ((input.ind-%var1142X (_ BitVec 32)) )(let (($x206 (= input.ind-%var1142X (_ bv1 32))))
 (let (($x56 (= input.ind-%var1142X (_ bv0 32))))
 (let (($x219 (or $x56 $x206)))
 (let (($x199 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1142X)))
 (= $x199 $x219))))))
 ))
 (let (($x174 (and $x261 $x159)))
 (let (($x229 (= $x174 true)))
 (let (($x189 (forall ((input.ind-%var1132X (_ BitVec 32)) )(let (($x56 (= input.ind-%var1132X (_ bv0 32))))
 (let (($x241 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1132X)))
 (= $x241 $x56))))
 ))
 (let (($x58 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x56 (= input.ind-%var1133X (_ bv0 32))))
 (let ((?x140 (ite $x56 ?x19 (_ bv0 32))))
 (let ((?x195 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1133X)))
 (let (($x241 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1133X)))
 (=> $x241 (= ?x195 ?x140))))))))
 ))
 (let (($x244 (and $x58 $x189)))
 (let (($x256 (= $x244 true)))
 (let (($x190 (forall ((input.ind-%var1125X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1125X)))
 (=> $x232 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1125X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var1124X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1124X)))
 (= $x232 false)))
 ))
 (let (($x255 (and $x149 $x190)))
 (let (($x178 (= $x255 true)))
 (let (($x88 (forall ((input.ind-%var1118X (_ BitVec 32)) )(let (($x206 (= input.ind-%var1118X (_ bv1 32))))
 (let (($x56 (= input.ind-%var1118X (_ bv0 32))))
 (let (($x219 (or $x56 $x206)))
 (let (($x198 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1118X)))
 (= $x198 $x219))))))
 ))
 (let (($x212 (forall ((input.ind-%var1119X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x56 (= input.ind-%var1119X (_ bv0 32))))
 (let ((?x140 (ite $x56 ?x19 (_ bv0 32))))
 (let ((?x51 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x206 (= input.ind-%var1119X (_ bv1 32))))
 (let ((?x249 (ite $x206 ?x51 ?x140)))
 (let ((?x196 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1119X)))
 (let (($x198 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1119X)))
 (=> $x198 (= ?x196 ?x249)))))))))))
 ))
 (let (($x207 (and $x212 $x88)))
 (let (($x110 (= $x207 true)))
 (let (($x15 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x13 (ite $x15 ?x19 (_ bv0 32))))
 (let (($x35 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x36 (ite $x35 ?x51 ?x13)))
 (let (($x213 (= input.spec-%tmpvar-12.L2%17%d.2 ?x36)))
 (let (($x184 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x201 (=> $x184 $x213)))
 (let (($x152 (or $x15 $x35)))
 (let ((?x153 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x153 (_ bv1 32))))
 (let (($x169 (= $x184 $x200)))
 (let (($x41 (= false false)))
 (let (($x173 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x205 (=> $x173 $x41)))
 (let (($x172 (= ?x153 (_ bv0 32))))
 (let (($x170 (= $x173 $x172)))
 (let (($x264 (and (and (and $x170 $x205) $x169) $x201)))
 (let (($x202 (= $x264 true)))
 (let (($x138 (= input.spec-%tmpvar-16.L2%25%d.2 ?x5)))
 (let (($x26 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x131 (=> $x26 $x138)))
 (let (($x39 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x44 (=> $x39 $x41)))
 (let (($x126 (or $x45 $x20)))
 (let ((?x137 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x137 (_ bv0 32))))
 (let (($x130 (= $x39 $x136)))
 (let (($x127 (bvuge ?x137 (_ bv1 32))))
 (let (($x135 (= $x26 $x127)))
 (let (($x134 (and (and (and $x135 $x130) $x44) $x131)))
 (let (($x139 (= $x134 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x116 (concat ?x120 (concat ?x111 ?x104)))))
 (let (($x122 (= ?x121 input.dst.llvm-%x)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x112 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x117 (= $x112 true)))
 (let (($x108 (= $x117 true)))
 (let (($x107 (= $x108 true)))
 (let (($x95 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x90 (not $x95)))
 (let (($x94 (= $x90 true)))
 (let (($x91 (= $x94 true)))
 (let (($x99 (= $x91 true)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x86)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x81 $x84)))
 (let (($x97 (and $x85 $x87)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x71 $x97)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x76)))))))
 (let (($x100 (and $x80 $x98)))
 (let (($x101 (= $x100 true)))
 (let (($x89 (= $x101 true)))
 (let (($x92 (= $x89 true)))
 (let (($x102 (and $x92 $x99)))
 (let (($x119 (and $x102 $x107)))
 (let (($x125 (and $x119 $x124)))
 (let (($x143 (and $x125 $x139)))
 (let (($x182 (and $x143 $x202)))
 (let (($x142 (and $x182 $x110)))
 (let (($x258 (and $x142 $x178)))
 (let (($x160 (and $x258 $x256)))
 (let (($x224 (and $x160 $x229)))
 (let (($x181 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x224)))
 (let (($x68 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x154 (= input.spec-%tmpvar-10.L2%13%d $x68)))
 (let (($x208 (and $x154 $x181)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x157 (and $x59 $x208)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x260 (and $x14 $x157)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x176 (and $x30 $x260)))
 (let (($x42 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x247 (and $x42 $x176)))
 (let (($x43 (= ?x19 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x67 (and $x43 $x247)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x147 (and $x32 $x67)))
 (let (($x33 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x248 (and $x33 $x147)))
 (let (($x9 (= ?x51 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x254 (and $x9 $x248)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x221 (and $x7 $x254)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x161 (and $x17 $x221)))
 (let (($x220 (and $x41 $x161)))
 (let (($x8 (= input.spec-%var-y-0.L2%23%bbentry ?x36)))
 (let (($x155 (and $x8 $x220)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x234 (and $x11 $x155)))
 (let (($x103 (and $x41 $x234)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x5)))
 (let (($x227 (and $x24 $x103)))
 (let (($x235 (=> $x227 $x271)))
 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x36 (ite $x13 ?x34 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x8 (ite $x15 ?x21 ?x36)))
 (let ((?x253 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x175 (= ?x253 ?x8)))
 (let (($x245 (= $x175 true)))
 (let (($x252 (= $x245 true)))
 (let (($x186 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x232 (= input.ind-%var1237X (_ bv0 32))))
 (let ((?x211 (ite $x232 ?x34 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x149 (= input.ind-%var1237X (_ bv1 32))))
 (let ((?x265 (ite $x149 ?x21 ?x211)))
 (let ((?x210 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1237X)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1237X)))
 (=> $x240 (= ?x210 ?x265)))))))))))
 ))
 (let (($x163 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1236X (_ bv1 32))))
 (let (($x232 (= input.ind-%var1236X (_ bv0 32))))
 (let (($x236 (or $x232 $x149)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1236X)))
 (= $x240 $x236))))))
 ))
 (let (($x158 (and $x163 $x186)))
 (let (($x167 (= $x158 true)))
 (let (($x217 (forall ((input.ind-%var1226X (_ BitVec 32)) )(let (($x232 (= input.ind-%var1226X (_ bv0 32))))
 (let (($x161 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1226X)))
 (= $x161 $x232))))
 ))
 (let (($x141 (forall ((input.ind-%var1227X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x232 (= input.ind-%var1227X (_ bv0 32))))
 (let ((?x211 (ite $x232 ?x34 (_ bv0 32))))
 (let ((?x234 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1227X)))
 (let (($x161 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1227X)))
 (=> $x161 (= ?x234 ?x211))))))))
 ))
 (let (($x225 (and $x141 $x217)))
 (let (($x272 (= $x225 true)))
 (let (($x247 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1219X)))
 (=> $x267 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1219X) (_ bv0 32)))))
 ))
 (let (($x183 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1218X)))
 (= $x267 false)))
 ))
 (let (($x67 (and $x183 $x247)))
 (let (($x147 (= $x67 true)))
 (let (($x177 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1212X (_ bv1 32))))
 (let (($x232 (= input.ind-%var1212X (_ bv0 32))))
 (let (($x236 (or $x232 $x149)))
 (let (($x140 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1212X)))
 (= $x140 $x236))))))
 ))
 (let (($x190 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x232 (= input.ind-%var1213X (_ bv0 32))))
 (let ((?x211 (ite $x232 ?x34 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x149 (= input.ind-%var1213X (_ bv1 32))))
 (let ((?x265 (ite $x149 ?x21 ?x211)))
 (let ((?x203 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1213X)))
 (let (($x140 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1213X)))
 (=> $x140 (= ?x203 ?x265)))))))))))
 ))
 (let (($x189 (and $x190 $x177)))
 (let (($x244 (= $x189 true)))
 (let (($x213 (= input.spec-%tmpvar-12.L2%17%d.2 ?x8)))
 (let (($x200 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x201 (=> $x200 $x213)))
 (let (($x172 (or $x13 $x15)))
 (let ((?x170 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x170 (_ bv1 32))))
 (let (($x238 (= $x200 $x169)))
 (let (($x48 (= false false)))
 (let (($x153 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x184 (=> $x153 $x48)))
 (let (($x205 (= ?x170 (_ bv0 32))))
 (let (($x214 (= $x153 $x205)))
 (let (($x182 (and (and (and $x214 $x184) $x238) $x201)))
 (let (($x151 (= $x182 true)))
 (let (($x45 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite $x45 ?x34 (_ bv0 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x20 ?x21 ?x5)))
 (let (($x138 (= input.spec-%tmpvar-16.L2%25%d.2 ?x47)))
 (let (($x127 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x131 (=> $x127 $x138)))
 (let (($x132 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x133 (=> $x132 $x48)))
 (let (($x135 (or $x45 $x20)))
 (let ((?x39 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x39 (_ bv0 32))))
 (let (($x44 (= $x132 $x41)))
 (let (($x136 (bvuge ?x39 (_ bv1 32))))
 (let (($x130 (= $x127 $x136)))
 (let (($x143 (and (and (and $x130 $x44) $x133) $x131)))
 (let (($x144 (= $x143 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x123 (concat ?x114 (concat ?x118 ?x105)))))
 (let (($x125 (= ?x124 input.dst.llvm-%x)))
 (let (($x129 (= $x125 true)))
 (let (($x26 (= $x129 true)))
 (let (($x108 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x107 (= $x108 true)))
 (let (($x119 (= $x107 true)))
 (let (($x113 (= $x119 true)))
 (let (($x91 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x99 (= $x91 true)))
 (let (($x102 (= $x99 true)))
 (let (($x112 (= $x102 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x98)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x84 $x87)))
 (let (($x101 (and $x97 $x100)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x61 $x101)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x54)))))))
 (let (($x92 (and $x83 $x89)))
 (let (($x96 (= $x92 true)))
 (let (($x95 (= $x96 true)))
 (let (($x90 (= $x95 true)))
 (let (($x117 (and $x90 $x112)))
 (let (($x115 (and $x117 $x113)))
 (let (($x126 (and $x115 $x26)))
 (let (($x173 (and $x126 $x144)))
 (let (($x198 (and $x173 $x151)))
 (let (($x256 (and $x198 $x244)))
 (let (($x248 (and $x256 $x147)))
 (let (($x273 (and $x248 $x272)))
 (let (($x259 (and $x273 $x167)))
 (let (($x154 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (and true $x154)))
 (let (($x274 (and $x70 $x259)))
 (let (($x233 (= input.spec-%tmpvar-10.L2%13%d $x154)))
 (let (($x62 (and $x233 $x274)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x63 (and $x60 $x62)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x156 (and $x50 $x63)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x93 (and $x29 $x156)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x180 (and $x12 $x93)))
 (let (($x16 (= ?x34 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x242 (and $x16 $x180)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x218 (and $x40 $x242)))
 (let (($x10 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x109 (and $x10 $x218)))
 (let (($x37 (= ?x21 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x226 (and $x37 $x109)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x146 (and $x6 $x226)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x52 (and $x28 $x146)))
 (let (($x262 (and $x48 $x52)))
 (let (($x38 (= input.spec-%var-y-0.L2%23%bbentry ?x8)))
 (let (($x230 (and $x38 $x262)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x166 (and $x25 $x230)))
 (let (($x209 (and $x48 $x166)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x47)))
 (let (($x185 (and $x24 $x209)))
 (let (($x168 (=> $x185 $x252)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x36 (ite $x13 ?x34 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x15 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x8 (ite $x15 ?x21 ?x36)))
 (let ((?x253 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x175 (= ?x253 ?x8)))
 (let (($x245 (= $x175 true)))
 (let (($x252 (= $x245 true)))
 (let (($x186 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x232 (= input.ind-%var1237X (_ bv0 32))))
 (let ((?x211 (ite $x232 ?x34 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x149 (= input.ind-%var1237X (_ bv1 32))))
 (let ((?x265 (ite $x149 ?x21 ?x211)))
 (let ((?x210 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1237X)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1237X)))
 (=> $x240 (= ?x210 ?x265)))))))))))
 ))
 (let (($x163 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1236X (_ bv1 32))))
 (let (($x232 (= input.ind-%var1236X (_ bv0 32))))
 (let (($x236 (or $x232 $x149)))
 (let (($x240 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1236X)))
 (= $x240 $x236))))))
 ))
 (let (($x158 (and $x163 $x186)))
 (let (($x167 (= $x158 true)))
 (let (($x217 (forall ((input.ind-%var1226X (_ BitVec 32)) )(let (($x232 (= input.ind-%var1226X (_ bv0 32))))
 (let (($x161 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1226X)))
 (= $x161 $x232))))
 ))
 (let (($x141 (forall ((input.ind-%var1227X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x232 (= input.ind-%var1227X (_ bv0 32))))
 (let ((?x211 (ite $x232 ?x34 (_ bv0 32))))
 (let ((?x234 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1227X)))
 (let (($x161 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1227X)))
 (=> $x161 (= ?x234 ?x211))))))))
 ))
 (let (($x225 (and $x141 $x217)))
 (let (($x272 (= $x225 true)))
 (let (($x247 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1219X)))
 (=> $x267 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1219X) (_ bv0 32)))))
 ))
 (let (($x183 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1218X)))
 (= $x267 false)))
 ))
 (let (($x67 (and $x183 $x247)))
 (let (($x147 (= $x67 true)))
 (let (($x177 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1212X (_ bv1 32))))
 (let (($x232 (= input.ind-%var1212X (_ bv0 32))))
 (let (($x236 (or $x232 $x149)))
 (let (($x140 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1212X)))
 (= $x140 $x236))))))
 ))
 (let (($x190 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x232 (= input.ind-%var1213X (_ bv0 32))))
 (let ((?x211 (ite $x232 ?x34 (_ bv0 32))))
 (let ((?x21 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x149 (= input.ind-%var1213X (_ bv1 32))))
 (let ((?x265 (ite $x149 ?x21 ?x211)))
 (let ((?x203 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1213X)))
 (let (($x140 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1213X)))
 (=> $x140 (= ?x203 ?x265)))))))))))
 ))
 (let (($x189 (and $x190 $x177)))
 (let (($x244 (= $x189 true)))
 (let (($x213 (= input.spec-%tmpvar-12.L2%17%d.2 ?x8)))
 (let (($x200 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x201 (=> $x200 $x213)))
 (let (($x172 (or $x13 $x15)))
 (let ((?x170 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x170 (_ bv1 32))))
 (let (($x238 (= $x200 $x169)))
 (let (($x48 (= false false)))
 (let (($x153 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x184 (=> $x153 $x48)))
 (let (($x205 (= ?x170 (_ bv0 32))))
 (let (($x214 (= $x153 $x205)))
 (let (($x182 (and (and (and $x214 $x184) $x238) $x201)))
 (let (($x151 (= $x182 true)))
 (let (($x45 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite $x45 ?x34 (_ bv0 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x20 ?x21 ?x5)))
 (let (($x138 (= input.spec-%tmpvar-16.L2%25%d.2 ?x47)))
 (let (($x127 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x131 (=> $x127 $x138)))
 (let (($x132 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x133 (=> $x132 $x48)))
 (let (($x135 (or $x45 $x20)))
 (let ((?x39 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x39 (_ bv0 32))))
 (let (($x44 (= $x132 $x41)))
 (let (($x136 (bvuge ?x39 (_ bv1 32))))
 (let (($x130 (= $x127 $x136)))
 (let (($x143 (and (and (and $x130 $x44) $x133) $x131)))
 (let (($x144 (= $x143 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x123 (concat ?x114 (concat ?x118 ?x105)))))
 (let (($x125 (= ?x124 input.dst.llvm-%x)))
 (let (($x129 (= $x125 true)))
 (let (($x26 (= $x129 true)))
 (let (($x108 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x107 (= $x108 true)))
 (let (($x119 (= $x107 true)))
 (let (($x113 (= $x119 true)))
 (let (($x91 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x99 (= $x91 true)))
 (let (($x102 (= $x99 true)))
 (let (($x112 (= $x102 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x98)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x84 $x87)))
 (let (($x101 (and $x97 $x100)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x61 $x101)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x54)))))))
 (let (($x92 (and $x83 $x89)))
 (let (($x96 (= $x92 true)))
 (let (($x95 (= $x96 true)))
 (let (($x90 (= $x95 true)))
 (let (($x117 (and $x90 $x112)))
 (let (($x115 (and $x117 $x113)))
 (let (($x126 (and $x115 $x26)))
 (let (($x173 (and $x126 $x144)))
 (let (($x198 (and $x173 $x151)))
 (let (($x256 (and $x198 $x244)))
 (let (($x248 (and $x256 $x147)))
 (let (($x273 (and $x248 $x272)))
 (let (($x259 (and $x273 $x167)))
 (let (($x154 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (and true $x154)))
 (let (($x274 (and $x70 $x259)))
 (let (($x233 (= input.spec-%tmpvar-10.L2%13%d $x154)))
 (let (($x62 (and $x233 $x274)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x63 (and $x60 $x62)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x156 (and $x50 $x63)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x93 (and $x29 $x156)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x180 (and $x12 $x93)))
 (let (($x16 (= ?x34 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x242 (and $x16 $x180)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x218 (and $x40 $x242)))
 (let (($x10 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x109 (and $x10 $x218)))
 (let (($x37 (= ?x21 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x226 (and $x37 $x109)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x146 (and $x6 $x226)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x52 (and $x28 $x146)))
 (let (($x262 (and $x48 $x52)))
 (let (($x38 (= input.spec-%var-y-0.L2%23%bbentry ?x8)))
 (let (($x230 (and $x38 $x262)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x166 (and $x25 $x230)))
 (let (($x209 (and $x48 $x166)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x47)))
 (let (($x185 (and $x24 $x209)))
 (let (($x168 (=> $x185 $x252)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x23 ?x8)))
 (let ((?x275 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x228 (= ?x275 ?x38)))
 (let (($x165 (= $x228 true)))
 (let (($x223 (= $x165 true)))
 (let (($x263 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x183 (= input.ind-%var1331X (_ bv0 32))))
 (let ((?x224 (ite $x183 ?x5 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x260 (= input.ind-%var1331X (_ bv1 32))))
 (let ((?x176 (ite $x260 ?x23 ?x224)))
 (let ((?x160 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1331X)))
 (let (($x255 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1331X)))
 (=> $x255 (= ?x160 ?x176)))))))))))
 ))
 (let (($x178 (forall ((input.ind-%var1330X (_ BitVec 32)) )(let (($x260 (= input.ind-%var1330X (_ bv1 32))))
 (let (($x183 (= input.ind-%var1330X (_ bv0 32))))
 (let (($x106 (or $x183 $x260)))
 (let (($x255 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1330X)))
 (= $x255 $x106))))))
 ))
 (let (($x237 (and $x178 $x263)))
 (let (($x74 (= $x237 true)))
 (let (($x220 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let (($x183 (= input.ind-%var1320X (_ bv0 32))))
 (let (($x230 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1320X)))
 (= $x230 $x183))))
 ))
 (let (($x79 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x183 (= input.ind-%var1321X (_ bv0 32))))
 (let ((?x224 (ite $x183 ?x5 (_ bv0 32))))
 (let ((?x185 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1321X)))
 (let (($x230 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1321X)))
 (=> $x230 (= ?x185 ?x224))))))))
 ))
 (let (($x103 (and $x79 $x220)))
 (let (($x192 (= $x103 true)))
 (let (($x218 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1313X)))
 (=> $x210 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1313X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var1312X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1312X)))
 (= $x210 false)))
 ))
 (let (($x109 (and $x158 $x218)))
 (let (($x226 (= $x109 true)))
 (let (($x225 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x260 (= input.ind-%var1306X (_ bv1 32))))
 (let (($x183 (= input.ind-%var1306X (_ bv0 32))))
 (let (($x106 (or $x183 $x260)))
 (let (($x148 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1306X)))
 (= $x148 $x106))))))
 ))
 (let (($x147 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x183 (= input.ind-%var1307X (_ bv0 32))))
 (let ((?x224 (ite $x183 ?x5 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x260 (= input.ind-%var1307X (_ bv1 32))))
 (let ((?x176 (ite $x260 ?x23 ?x224)))
 (let ((?x236 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1307X)))
 (let (($x148 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1307X)))
 (=> $x148 (= ?x236 ?x176)))))))))))
 ))
 (let (($x272 (and $x147 $x225)))
 (let (($x273 (= $x272 true)))
 (let (($x182 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x202 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x151 (=> $x202 $x182)))
 (let (($x184 (or $x36 $x13)))
 (let ((?x264 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x264 (_ bv1 32))))
 (let (($x213 (= $x202 $x171)))
 (let (($x11 (= false false)))
 (let (($x214 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x238 (=> $x214 $x11)))
 (let (($x200 (= ?x264 (_ bv0 32))))
 (let (($x169 (= $x214 $x200)))
 (let (($x140 (and (and (and $x169 $x238) $x213) $x151)))
 (let (($x203 (= $x140 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x19 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x21 (ite $x19 ?x23 ?x47)))
 (let (($x143 (= input.spec-%tmpvar-16.L2%25%d.2 ?x21)))
 (let (($x132 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x144 (=> $x132 $x143)))
 (let (($x133 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x138 (=> $x133 $x11)))
 (let (($x41 (or $x51 $x19)))
 (let ((?x44 (ite $x41 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x44 (_ bv0 32))))
 (let (($x128 (= $x133 $x139)))
 (let (($x134 (bvuge ?x44 (_ bv1 32))))
 (let (($x48 (= $x132 $x134)))
 (let (($x153 (and (and (and $x48 $x128) $x138) $x144)))
 (let (($x172 (= $x153 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x126 (concat ?x125 (concat ?x105 ?x120)))))
 (let (($x127 (= ?x137 input.dst.llvm-%x)))
 (let (($x135 (= $x127 true)))
 (let (($x39 (= $x135 true)))
 (let (($x115 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x116 (= $x115 true)))
 (let (($x122 (= $x116 true)))
 (let (($x123 (= $x122 true)))
 (let (($x112 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x117 (not $x112)))
 (let (($x108 (= $x117 true)))
 (let (($x107 (= $x108 true)))
 (let (($x119 (= $x107 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x89)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x87 $x100)))
 (let (($x96 (and $x101 $x92)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x69 $x96)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x81)))))))
 (let (($x90 (and $x86 $x95)))
 (let (($x94 (= $x90 true)))
 (let (($x91 (= $x94 true)))
 (let (($x99 (= $x91 true)))
 (let (($x113 (and $x99 $x119)))
 (let (($x104 (and $x113 $x123)))
 (let (($x136 (and $x104 $x39)))
 (let (($x170 (and $x136 $x172)))
 (let (($x149 (and $x170 $x203)))
 (let (($x240 (and $x149 $x273)))
 (let (($x146 (and $x240 $x226)))
 (let (($x164 (and $x146 $x192)))
 (let (($x88 (and $x164 $x74)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x64 (and true $x233)))
 (let (($x207 (and $x64 $x88)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x110 (and $x70 $x207)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x150 (and $x68 $x110)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x206 (and $x59 $x150)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x142 (and $x14 $x206)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x208 (and $x30 $x142)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x231 (and $x27 $x208)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x174 (and $x43 $x231)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x157 (and $x32 $x174)))
 (let (($x33 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x266 (and $x33 $x157)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x251 (and $x9 $x266)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x221 (and $x7 $x251)))
 (let (($x179 (and $x11 $x221)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x194 (and $x17 $x179)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x239 (and $x35 $x194)))
 (let (($x269 (and $x11 $x239)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x21)))
 (let (($x270 (and $x24 $x269)))
 (let (($x145 (=> $x270 $x223)))
 (not $x145)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x23 ?x8)))
 (let ((?x275 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x228 (= ?x275 ?x38)))
 (let (($x165 (= $x228 true)))
 (let (($x223 (= $x165 true)))
 (let (($x263 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x183 (= input.ind-%var1331X (_ bv0 32))))
 (let ((?x224 (ite $x183 ?x5 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x260 (= input.ind-%var1331X (_ bv1 32))))
 (let ((?x176 (ite $x260 ?x23 ?x224)))
 (let ((?x160 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1331X)))
 (let (($x255 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1331X)))
 (=> $x255 (= ?x160 ?x176)))))))))))
 ))
 (let (($x178 (forall ((input.ind-%var1330X (_ BitVec 32)) )(let (($x260 (= input.ind-%var1330X (_ bv1 32))))
 (let (($x183 (= input.ind-%var1330X (_ bv0 32))))
 (let (($x106 (or $x183 $x260)))
 (let (($x255 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1330X)))
 (= $x255 $x106))))))
 ))
 (let (($x237 (and $x178 $x263)))
 (let (($x74 (= $x237 true)))
 (let (($x220 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let (($x183 (= input.ind-%var1320X (_ bv0 32))))
 (let (($x230 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1320X)))
 (= $x230 $x183))))
 ))
 (let (($x79 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x183 (= input.ind-%var1321X (_ bv0 32))))
 (let ((?x224 (ite $x183 ?x5 (_ bv0 32))))
 (let ((?x185 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1321X)))
 (let (($x230 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1321X)))
 (=> $x230 (= ?x185 ?x224))))))))
 ))
 (let (($x103 (and $x79 $x220)))
 (let (($x192 (= $x103 true)))
 (let (($x218 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1313X)))
 (=> $x210 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1313X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var1312X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1312X)))
 (= $x210 false)))
 ))
 (let (($x109 (and $x158 $x218)))
 (let (($x226 (= $x109 true)))
 (let (($x225 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x260 (= input.ind-%var1306X (_ bv1 32))))
 (let (($x183 (= input.ind-%var1306X (_ bv0 32))))
 (let (($x106 (or $x183 $x260)))
 (let (($x148 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1306X)))
 (= $x148 $x106))))))
 ))
 (let (($x147 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x183 (= input.ind-%var1307X (_ bv0 32))))
 (let ((?x224 (ite $x183 ?x5 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x260 (= input.ind-%var1307X (_ bv1 32))))
 (let ((?x176 (ite $x260 ?x23 ?x224)))
 (let ((?x236 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1307X)))
 (let (($x148 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1307X)))
 (=> $x148 (= ?x236 ?x176)))))))))))
 ))
 (let (($x272 (and $x147 $x225)))
 (let (($x273 (= $x272 true)))
 (let (($x182 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x202 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x151 (=> $x202 $x182)))
 (let (($x184 (or $x36 $x13)))
 (let ((?x264 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x264 (_ bv1 32))))
 (let (($x213 (= $x202 $x171)))
 (let (($x11 (= false false)))
 (let (($x214 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x238 (=> $x214 $x11)))
 (let (($x200 (= ?x264 (_ bv0 32))))
 (let (($x169 (= $x214 $x200)))
 (let (($x140 (and (and (and $x169 $x238) $x213) $x151)))
 (let (($x203 (= $x140 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x19 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x21 (ite $x19 ?x23 ?x47)))
 (let (($x143 (= input.spec-%tmpvar-16.L2%25%d.2 ?x21)))
 (let (($x132 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x144 (=> $x132 $x143)))
 (let (($x133 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x138 (=> $x133 $x11)))
 (let (($x41 (or $x51 $x19)))
 (let ((?x44 (ite $x41 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x44 (_ bv0 32))))
 (let (($x128 (= $x133 $x139)))
 (let (($x134 (bvuge ?x44 (_ bv1 32))))
 (let (($x48 (= $x132 $x134)))
 (let (($x153 (and (and (and $x48 $x128) $x138) $x144)))
 (let (($x172 (= $x153 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x126 (concat ?x125 (concat ?x105 ?x120)))))
 (let (($x127 (= ?x137 input.dst.llvm-%x)))
 (let (($x135 (= $x127 true)))
 (let (($x39 (= $x135 true)))
 (let (($x115 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x116 (= $x115 true)))
 (let (($x122 (= $x116 true)))
 (let (($x123 (= $x122 true)))
 (let (($x112 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x117 (not $x112)))
 (let (($x108 (= $x117 true)))
 (let (($x107 (= $x108 true)))
 (let (($x119 (= $x107 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x89)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x87 $x100)))
 (let (($x96 (and $x101 $x92)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x69 $x96)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x81)))))))
 (let (($x90 (and $x86 $x95)))
 (let (($x94 (= $x90 true)))
 (let (($x91 (= $x94 true)))
 (let (($x99 (= $x91 true)))
 (let (($x113 (and $x99 $x119)))
 (let (($x104 (and $x113 $x123)))
 (let (($x136 (and $x104 $x39)))
 (let (($x170 (and $x136 $x172)))
 (let (($x149 (and $x170 $x203)))
 (let (($x240 (and $x149 $x273)))
 (let (($x146 (and $x240 $x226)))
 (let (($x164 (and $x146 $x192)))
 (let (($x88 (and $x164 $x74)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x64 (and true $x233)))
 (let (($x207 (and $x64 $x88)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x110 (and $x70 $x207)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x150 (and $x68 $x110)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x206 (and $x59 $x150)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x142 (and $x14 $x206)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x208 (and $x30 $x142)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x231 (and $x27 $x208)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x174 (and $x43 $x231)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x157 (and $x32 $x174)))
 (let (($x33 (= ?x23 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x266 (and $x33 $x157)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x251 (and $x9 $x266)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x221 (and $x7 $x251)))
 (let (($x179 (and $x11 $x221)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x194 (and $x17 $x179)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x239 (and $x35 $x194)))
 (let (($x269 (and $x11 $x239)))
 (let (($x24 (= input.spec-%var-y-1.L2%31%bbentry ?x21)))
 (let (($x270 (and $x24 $x269)))
 (let (($x145 (=> $x270 $x223)))
 (not $x145)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x252 (not $x93)))
 (let (($x219 (or $x93 $x252)))
 (let (($x262 (= $x219 true)))
 (let (($x168 (= $x262 true)))
 (let (($x245 (forall ((input.ind-%var1425X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x224 (= input.ind-%var1425X (_ bv0 32))))
 (let ((?x180 (ite $x224 ?x5 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x183 (= input.ind-%var1425X (_ bv1 32))))
 (let ((?x242 (ite $x183 ?x20 ?x180)))
 (let ((?x167 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1425X)))
 (let (($x187 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1425X)))
 (=> $x187 (= ?x167 ?x242)))))))))))
 ))
 (let (($x190 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x183 (= input.ind-%var1424X (_ bv1 32))))
 (let (($x224 (= input.ind-%var1424X (_ bv0 32))))
 (let (($x176 (or $x224 $x183)))
 (let (($x187 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1424X)))
 (= $x187 $x176))))))
 ))
 (let (($x227 (and $x190 $x245)))
 (let (($x196 (= $x227 true)))
 (let (($x145 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x224 (= input.ind-%var1414X (_ bv0 32))))
 (let (($x142 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1414X)))
 (= $x142 $x224))))
 ))
 (let (($x269 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x224 (= input.ind-%var1415X (_ bv0 32))))
 (let ((?x180 (ite $x224 ?x5 (_ bv0 32))))
 (let ((?x174 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1415X)))
 (let (($x142 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1415X)))
 (=> $x142 (= ?x174 ?x180))))))))
 ))
 (let (($x193 (and $x269 $x145)))
 (let (($x82 (= $x193 true)))
 (let (($x74 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1406X)))
 (= $x79 false)))
 ))
 (let (($x160 (forall ((input.ind-%var1407X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1407X)))
 (=> $x79 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1407X) (_ bv0 32)))))
 ))
 (let (($x88 (and $x160 $x74)))
 (let (($x207 (= $x88 true)))
 (let (($x226 (forall ((input.ind-%var1401X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x224 (= input.ind-%var1401X (_ bv0 32))))
 (let ((?x180 (ite $x224 ?x5 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x183 (= input.ind-%var1401X (_ bv1 32))))
 (let ((?x242 (ite $x183 ?x20 ?x180)))
 (let ((?x225 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1401X)))
 (let (($x203 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1401X)))
 (=> $x203 (= ?x225 ?x242)))))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1400X (_ BitVec 32)) )(let (($x183 (= input.ind-%var1400X (_ bv1 32))))
 (let (($x224 (= input.ind-%var1400X (_ bv0 32))))
 (let (($x176 (or $x224 $x183)))
 (let (($x203 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1400X)))
 (= $x203 $x176))))))
 ))
 (let (($x146 (and $x67 $x226)))
 (let (($x230 (= $x146 true)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x20 ?x8)))
 (let (($x238 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x184 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x198 (=> $x184 $x238)))
 (let (($x153 (or $x36 $x13)))
 (let ((?x172 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x172 (_ bv1 32))))
 (let (($x200 (= $x184 $x264)))
 (let (($x24 (= false false)))
 (let (($x144 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x214 (=> $x144 $x24)))
 (let (($x170 (= ?x172 (_ bv0 32))))
 (let (($x205 (= $x144 $x170)))
 (let (($x213 (and (and (and $x205 $x214) $x200) $x198)))
 (let (($x56 (= $x213 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x23 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x19 (ite $x23 ?x20 ?x47)))
 (let (($x139 (= input.spec-%tmpvar-16.L2%25%d.2 ?x19)))
 (let (($x135 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x128 (=> $x135 $x139)))
 (let (($x41 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x48 (=> $x41 $x24)))
 (let (($x39 (or $x51 $x23)))
 (let ((?x136 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x136 (_ bv0 32))))
 (let (($x134 (= $x41 $x44)))
 (let (($x130 (bvuge ?x136 (_ bv1 32))))
 (let (($x132 (= $x135 $x130)))
 (let (($x138 (and (and (and $x132 $x134) $x48) $x128)))
 (let (($x152 (= $x138 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x118 (concat ?x121 (concat ?x104 ?x122)))))
 (let (($x120 (= ?x105 input.dst.llvm-%x)))
 (let (($x111 (= $x120 true)))
 (let (($x129 (= $x111 true)))
 (let (($x117 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x108 (= $x117 true)))
 (let (($x107 (= $x108 true)))
 (let (($x119 (= $x107 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x92)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x97 $x101)))
 (let (($x95 (and $x89 $x96)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x85 $x95)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x72)))))))
 (let (($x94 (and $x87 $x90)))
 (let (($x91 (= $x94 true)))
 (let (($x99 (= $x91 true)))
 (let (($x102 (= $x99 true)))
 (let (($x113 (and $x102 $x119)))
 (let (($x137 (and $x113 $x129)))
 (let (($x131 (and $x137 $x152)))
 (let (($x201 (and $x131 $x56)))
 (let (($x185 (and $x201 $x230)))
 (let (($x110 (and $x185 $x207)))
 (let (($x162 (and $x110 $x82)))
 (let (($x159 (and $x162 $x196)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x212 (and $x70 $x159)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x257 (and $x68 $x212)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x234 (and $x59 $x257)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x235 (and $x14 $x234)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x141 (and $x30 $x235)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x250 (and $x27 $x141)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x189 (and $x43 $x250)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x244 (and $x32 $x189)))
 (let (($x33 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x256 (and $x33 $x244)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x267 (and $x9 $x256)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x188 (and $x7 $x267)))
 (let (($x211 (and $x24 $x188)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x215 (and $x17 $x211)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x156 (and $x35 $x215)))
 (let (($x261 (and $x24 $x156)))
 (let (($x21 (= input.spec-%var-y-1.L2%31%bbentry ?x19)))
 (let (($x259 (and $x21 $x261)))
 (let (($x229 (=> $x259 $x168)))
 (not $x229))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x252 (not $x93)))
 (let (($x219 (or $x93 $x252)))
 (let (($x262 (= $x219 true)))
 (let (($x168 (= $x262 true)))
 (let (($x245 (forall ((input.ind-%var1425X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x224 (= input.ind-%var1425X (_ bv0 32))))
 (let ((?x180 (ite $x224 ?x5 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x183 (= input.ind-%var1425X (_ bv1 32))))
 (let ((?x242 (ite $x183 ?x20 ?x180)))
 (let ((?x167 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1425X)))
 (let (($x187 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1425X)))
 (=> $x187 (= ?x167 ?x242)))))))))))
 ))
 (let (($x190 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x183 (= input.ind-%var1424X (_ bv1 32))))
 (let (($x224 (= input.ind-%var1424X (_ bv0 32))))
 (let (($x176 (or $x224 $x183)))
 (let (($x187 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1424X)))
 (= $x187 $x176))))))
 ))
 (let (($x227 (and $x190 $x245)))
 (let (($x196 (= $x227 true)))
 (let (($x145 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x224 (= input.ind-%var1414X (_ bv0 32))))
 (let (($x142 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1414X)))
 (= $x142 $x224))))
 ))
 (let (($x269 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x224 (= input.ind-%var1415X (_ bv0 32))))
 (let ((?x180 (ite $x224 ?x5 (_ bv0 32))))
 (let ((?x174 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1415X)))
 (let (($x142 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1415X)))
 (=> $x142 (= ?x174 ?x180))))))))
 ))
 (let (($x193 (and $x269 $x145)))
 (let (($x82 (= $x193 true)))
 (let (($x74 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1406X)))
 (= $x79 false)))
 ))
 (let (($x160 (forall ((input.ind-%var1407X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1407X)))
 (=> $x79 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1407X) (_ bv0 32)))))
 ))
 (let (($x88 (and $x160 $x74)))
 (let (($x207 (= $x88 true)))
 (let (($x226 (forall ((input.ind-%var1401X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x224 (= input.ind-%var1401X (_ bv0 32))))
 (let ((?x180 (ite $x224 ?x5 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x183 (= input.ind-%var1401X (_ bv1 32))))
 (let ((?x242 (ite $x183 ?x20 ?x180)))
 (let ((?x225 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1401X)))
 (let (($x203 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1401X)))
 (=> $x203 (= ?x225 ?x242)))))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1400X (_ BitVec 32)) )(let (($x183 (= input.ind-%var1400X (_ bv1 32))))
 (let (($x224 (= input.ind-%var1400X (_ bv0 32))))
 (let (($x176 (or $x224 $x183)))
 (let (($x203 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1400X)))
 (= $x203 $x176))))))
 ))
 (let (($x146 (and $x67 $x226)))
 (let (($x230 (= $x146 true)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x20 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x20 ?x8)))
 (let (($x238 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x184 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x198 (=> $x184 $x238)))
 (let (($x153 (or $x36 $x13)))
 (let ((?x172 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x172 (_ bv1 32))))
 (let (($x200 (= $x184 $x264)))
 (let (($x24 (= false false)))
 (let (($x144 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x214 (=> $x144 $x24)))
 (let (($x170 (= ?x172 (_ bv0 32))))
 (let (($x205 (= $x144 $x170)))
 (let (($x213 (and (and (and $x205 $x214) $x200) $x198)))
 (let (($x56 (= $x213 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x23 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x19 (ite $x23 ?x20 ?x47)))
 (let (($x139 (= input.spec-%tmpvar-16.L2%25%d.2 ?x19)))
 (let (($x135 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x128 (=> $x135 $x139)))
 (let (($x41 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x48 (=> $x41 $x24)))
 (let (($x39 (or $x51 $x23)))
 (let ((?x136 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x136 (_ bv0 32))))
 (let (($x134 (= $x41 $x44)))
 (let (($x130 (bvuge ?x136 (_ bv1 32))))
 (let (($x132 (= $x135 $x130)))
 (let (($x138 (and (and (and $x132 $x134) $x48) $x128)))
 (let (($x152 (= $x138 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x118 (concat ?x121 (concat ?x104 ?x122)))))
 (let (($x120 (= ?x105 input.dst.llvm-%x)))
 (let (($x111 (= $x120 true)))
 (let (($x129 (= $x111 true)))
 (let (($x117 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x108 (= $x117 true)))
 (let (($x107 (= $x108 true)))
 (let (($x119 (= $x107 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x92)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x97 $x101)))
 (let (($x95 (and $x89 $x96)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x85 $x95)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x72)))))))
 (let (($x94 (and $x87 $x90)))
 (let (($x91 (= $x94 true)))
 (let (($x99 (= $x91 true)))
 (let (($x102 (= $x99 true)))
 (let (($x113 (and $x102 $x119)))
 (let (($x137 (and $x113 $x129)))
 (let (($x131 (and $x137 $x152)))
 (let (($x201 (and $x131 $x56)))
 (let (($x185 (and $x201 $x230)))
 (let (($x110 (and $x185 $x207)))
 (let (($x162 (and $x110 $x82)))
 (let (($x159 (and $x162 $x196)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x212 (and $x70 $x159)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x257 (and $x68 $x212)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x234 (and $x59 $x257)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x235 (and $x14 $x234)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x141 (and $x30 $x235)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x250 (and $x27 $x141)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x189 (and $x43 $x250)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x244 (and $x32 $x189)))
 (let (($x33 (= ?x20 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x256 (and $x33 $x244)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x267 (and $x9 $x256)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x188 (and $x7 $x267)))
 (let (($x211 (and $x24 $x188)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x215 (and $x17 $x211)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x156 (and $x35 $x215)))
 (let (($x261 (and $x24 $x156)))
 (let (($x21 (= input.spec-%var-y-1.L2%31%bbentry ?x19)))
 (let (($x259 (and $x21 $x261)))
 (let (($x229 (=> $x259 $x168)))
 (not $x229))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x271 (and true $x233)))
 (let (($x46 (not $x233)))
 (let (($x175 (or $x46 $x271)))
 (let (($x209 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x161 (not $x209)))
 (let (($x249 (or $x209 $x161)))
 (let (($x77 (=> $x249 $x175)))
 (let (($x65 (= $x77 true)))
 (let (($x246 (= $x65 true)))
 (let (($x236 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x226 (= input.ind-%var1519X (_ bv0 32))))
 (let ((?x174 (ite $x226 ?x5 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= input.ind-%var1519X (_ bv1 32))))
 (let ((?x194 (ite $x109 ?x22 ?x174)))
 (let ((?x266 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1519X)))
 (let (($x217 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1519X)))
 (=> $x217 (= ?x266 ?x194)))))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1518X (_ BitVec 32)) )(let (($x109 (= input.ind-%var1518X (_ bv1 32))))
 (let (($x226 (= input.ind-%var1518X (_ bv0 32))))
 (let (($x146 (or $x226 $x109)))
 (let (($x217 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1518X)))
 (= $x217 $x146))))))
 ))
 (let (($x260 (and $x231 $x236)))
 (let (($x114 (= $x260 true)))
 (let (($x192 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x226 (= input.ind-%var1509X (_ bv0 32))))
 (let ((?x174 (ite $x226 ?x5 (_ bv0 32))))
 (let ((?x168 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1509X)))
 (let (($x211 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1509X)))
 (=> $x211 (= ?x168 ?x174))))))))
 ))
 (let (($x93 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x226 (= input.ind-%var1508X (_ bv0 32))))
 (let (($x211 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1508X)))
 (= $x211 $x226))))
 ))
 (let (($x208 (and $x93 $x192)))
 (let (($x157 (= $x208 true)))
 (let (($x250 (forall ((input.ind-%var1500X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1500X)))
 (= $x232 false)))
 ))
 (let (($x212 (forall ((input.ind-%var1501X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1501X)))
 (=> $x232 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1501X) (_ bv0 32)))))
 ))
 (let (($x189 (and $x212 $x250)))
 (let (($x244 (= $x189 true)))
 (let (($x223 (forall ((input.ind-%var1495X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x226 (= input.ind-%var1495X (_ bv0 32))))
 (let ((?x174 (ite $x226 ?x5 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= input.ind-%var1495X (_ bv1 32))))
 (let ((?x194 (ite $x109 ?x22 ?x174)))
 (let ((?x178 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1495X)))
 (let (($x247 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1495X)))
 (=> $x247 (= ?x178 ?x194)))))))))))
 ))
 (let (($x185 (forall ((input.ind-%var1494X (_ BitVec 32)) )(let (($x109 (= input.ind-%var1494X (_ bv1 32))))
 (let (($x226 (= input.ind-%var1494X (_ bv0 32))))
 (let (($x146 (or $x226 $x109)))
 (let (($x247 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1494X)))
 (= $x247 $x146))))))
 ))
 (let (($x145 (and $x185 $x223)))
 (let (($x193 (= $x145 true)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x22 ?x8)))
 (let (($x238 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x264 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x198 (=> $x264 $x238)))
 (let (($x170 (or $x36 $x13)))
 (let ((?x205 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x205 (_ bv1 32))))
 (let (($x171 (= $x264 $x200)))
 (let (($x21 (= false false)))
 (let (($x172 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x184 (=> $x172 $x21)))
 (let (($x214 (= ?x205 (_ bv0 32))))
 (let (($x202 (= $x172 $x214)))
 (let (($x201 (and (and (and $x202 $x184) $x171) $x198)))
 (let (($x140 (= $x201 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x75 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x23 (ite $x75 ?x22 ?x47)))
 (let (($x139 (= input.spec-%tmpvar-16.L2%25%d.2 ?x23)))
 (let (($x130 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x128 (=> $x130 $x139)))
 (let (($x173 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x11 (=> $x173 $x21)))
 (let (($x132 (or $x51 $x75)))
 (let ((?x41 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (= ?x41 (_ bv0 32))))
 (let (($x48 (= $x173 $x24)))
 (let (($x44 (bvuge ?x41 (_ bv1 32))))
 (let (($x134 (= $x130 $x44)))
 (let (($x131 (and (and (and $x134 $x48) $x11) $x128)))
 (let (($x143 (= $x131 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x111 (concat ?x124 (concat ?x123 ?x126)))))
 (let (($x137 (= ?x129 input.dst.llvm-%x)))
 (let (($x127 (= $x137 true)))
 (let (($x135 (= $x127 true)))
 (let (($x107 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x119 (= $x107 true)))
 (let (($x113 (= $x119 true)))
 (let (($x115 (= $x113 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x95)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x100 $x92)))
 (let (($x94 (and $x96 $x90)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x71 $x94)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x86)))))))
 (let (($x99 (and $x98 $x91)))
 (let (($x102 (= $x99 true)))
 (let (($x112 (= $x102 true)))
 (let (($x117 (= $x112 true)))
 (let (($x125 (and $x117 $x115)))
 (let (($x39 (and $x125 $x135)))
 (let (($x144 (and $x39 $x143)))
 (let (($x203 (and $x144 $x140)))
 (let (($x82 (and $x203 $x193)))
 (let (($x256 (and $x82 $x244)))
 (let (($x63 (and $x256 $x157)))
 (let (($x240 (and $x63 $x114)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x210 (and $x70 $x240)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x186 (and $x68 $x210)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x158 (and $x59 $x186)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x263 (and $x14 $x158)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x106 (and $x30 $x263)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x62 (and $x27 $x106)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x164 (and $x43 $x62)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x165 (and $x32 $x164)))
 (let (($x33 (= ?x22 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x73 (and $x33 $x165)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x255 (and $x9 $x73)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x221 (and $x7 $x255)))
 (let (($x166 (and $x21 $x221)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x206 (and $x17 $x166)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x179 (and $x35 $x206)))
 (let (($x241 (and $x21 $x179)))
 (let (($x19 (= input.spec-%var-y-1.L2%31%bbentry ?x23)))
 (let (($x199 (and $x19 $x241)))
 (let (($x55 (=> $x199 $x246)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x271 (and true $x233)))
 (let (($x46 (not $x233)))
 (let (($x175 (or $x46 $x271)))
 (let (($x209 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x161 (not $x209)))
 (let (($x249 (or $x209 $x161)))
 (let (($x77 (=> $x249 $x175)))
 (let (($x65 (= $x77 true)))
 (let (($x246 (= $x65 true)))
 (let (($x236 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x226 (= input.ind-%var1519X (_ bv0 32))))
 (let ((?x174 (ite $x226 ?x5 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= input.ind-%var1519X (_ bv1 32))))
 (let ((?x194 (ite $x109 ?x22 ?x174)))
 (let ((?x266 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1519X)))
 (let (($x217 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1519X)))
 (=> $x217 (= ?x266 ?x194)))))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1518X (_ BitVec 32)) )(let (($x109 (= input.ind-%var1518X (_ bv1 32))))
 (let (($x226 (= input.ind-%var1518X (_ bv0 32))))
 (let (($x146 (or $x226 $x109)))
 (let (($x217 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1518X)))
 (= $x217 $x146))))))
 ))
 (let (($x260 (and $x231 $x236)))
 (let (($x114 (= $x260 true)))
 (let (($x192 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x226 (= input.ind-%var1509X (_ bv0 32))))
 (let ((?x174 (ite $x226 ?x5 (_ bv0 32))))
 (let ((?x168 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1509X)))
 (let (($x211 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1509X)))
 (=> $x211 (= ?x168 ?x174))))))))
 ))
 (let (($x93 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x226 (= input.ind-%var1508X (_ bv0 32))))
 (let (($x211 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1508X)))
 (= $x211 $x226))))
 ))
 (let (($x208 (and $x93 $x192)))
 (let (($x157 (= $x208 true)))
 (let (($x250 (forall ((input.ind-%var1500X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1500X)))
 (= $x232 false)))
 ))
 (let (($x212 (forall ((input.ind-%var1501X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1501X)))
 (=> $x232 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1501X) (_ bv0 32)))))
 ))
 (let (($x189 (and $x212 $x250)))
 (let (($x244 (= $x189 true)))
 (let (($x223 (forall ((input.ind-%var1495X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x226 (= input.ind-%var1495X (_ bv0 32))))
 (let ((?x174 (ite $x226 ?x5 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x109 (= input.ind-%var1495X (_ bv1 32))))
 (let ((?x194 (ite $x109 ?x22 ?x174)))
 (let ((?x178 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1495X)))
 (let (($x247 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1495X)))
 (=> $x247 (= ?x178 ?x194)))))))))))
 ))
 (let (($x185 (forall ((input.ind-%var1494X (_ BitVec 32)) )(let (($x109 (= input.ind-%var1494X (_ bv1 32))))
 (let (($x226 (= input.ind-%var1494X (_ bv0 32))))
 (let (($x146 (or $x226 $x109)))
 (let (($x247 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1494X)))
 (= $x247 $x146))))))
 ))
 (let (($x145 (and $x185 $x223)))
 (let (($x193 (= $x145 true)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x22 ?x8)))
 (let (($x238 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x264 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x198 (=> $x264 $x238)))
 (let (($x170 (or $x36 $x13)))
 (let ((?x205 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x205 (_ bv1 32))))
 (let (($x171 (= $x264 $x200)))
 (let (($x21 (= false false)))
 (let (($x172 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x184 (=> $x172 $x21)))
 (let (($x214 (= ?x205 (_ bv0 32))))
 (let (($x202 (= $x172 $x214)))
 (let (($x201 (and (and (and $x202 $x184) $x171) $x198)))
 (let (($x140 (= $x201 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x75 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x23 (ite $x75 ?x22 ?x47)))
 (let (($x139 (= input.spec-%tmpvar-16.L2%25%d.2 ?x23)))
 (let (($x130 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x128 (=> $x130 $x139)))
 (let (($x173 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x11 (=> $x173 $x21)))
 (let (($x132 (or $x51 $x75)))
 (let ((?x41 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (= ?x41 (_ bv0 32))))
 (let (($x48 (= $x173 $x24)))
 (let (($x44 (bvuge ?x41 (_ bv1 32))))
 (let (($x134 (= $x130 $x44)))
 (let (($x131 (and (and (and $x134 $x48) $x11) $x128)))
 (let (($x143 (= $x131 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x111 (concat ?x124 (concat ?x123 ?x126)))))
 (let (($x137 (= ?x129 input.dst.llvm-%x)))
 (let (($x127 (= $x137 true)))
 (let (($x135 (= $x127 true)))
 (let (($x107 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x119 (= $x107 true)))
 (let (($x113 (= $x119 true)))
 (let (($x115 (= $x113 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x95)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x100 $x92)))
 (let (($x94 (and $x96 $x90)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x71 $x94)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x86)))))))
 (let (($x99 (and $x98 $x91)))
 (let (($x102 (= $x99 true)))
 (let (($x112 (= $x102 true)))
 (let (($x117 (= $x112 true)))
 (let (($x125 (and $x117 $x115)))
 (let (($x39 (and $x125 $x135)))
 (let (($x144 (and $x39 $x143)))
 (let (($x203 (and $x144 $x140)))
 (let (($x82 (and $x203 $x193)))
 (let (($x256 (and $x82 $x244)))
 (let (($x63 (and $x256 $x157)))
 (let (($x240 (and $x63 $x114)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x210 (and $x70 $x240)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x186 (and $x68 $x210)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x158 (and $x59 $x186)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x263 (and $x14 $x158)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x106 (and $x30 $x263)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x62 (and $x27 $x106)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x164 (and $x43 $x62)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x165 (and $x32 $x164)))
 (let (($x33 (= ?x22 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x73 (and $x33 $x165)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x255 (and $x9 $x73)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x221 (and $x7 $x255)))
 (let (($x166 (and $x21 $x221)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x206 (and $x17 $x166)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x179 (and $x35 $x206)))
 (let (($x241 (and $x21 $x179)))
 (let (($x19 (= input.spec-%var-y-1.L2%31%bbentry ?x23)))
 (let (($x199 (and $x19 $x241)))
 (let (($x55 (=> $x199 $x246)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x275 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x248 (= (_ bv0 32) ?x275)))
 (let (($x191 (= $x248 true)))
 (let (($x222 (= $x191 true)))
 (let (($x88 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x212 (= input.ind-%var1613X (_ bv0 32))))
 (let ((?x63 (ite $x212 ?x5 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x159 (= input.ind-%var1613X (_ bv1 32))))
 (let ((?x217 (ite $x159 ?x64 ?x63)))
 (let ((?x228 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1613X)))
 (let (($x162 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1613X)))
 (=> $x162 (= ?x228 ?x217)))))))))))
 ))
 (let (($x254 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let (($x159 (= input.ind-%var1612X (_ bv1 32))))
 (let (($x212 (= input.ind-%var1612X (_ bv0 32))))
 (let (($x141 (or $x212 $x159)))
 (let (($x162 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1612X)))
 (= $x162 $x141))))))
 ))
 (let (($x207 (and $x254 $x88)))
 (let (($x110 (= $x207 true)))
 (let (($x258 (forall ((input.ind-%var1603X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x212 (= input.ind-%var1603X (_ bv0 32))))
 (let ((?x63 (ite $x212 ?x5 (_ bv0 32))))
 (let ((?x67 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1603X)))
 (let (($x46 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1603X)))
 (=> $x46 (= ?x67 ?x63))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1602X (_ BitVec 32)) )(let (($x212 (= input.ind-%var1602X (_ bv0 32))))
 (let (($x46 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1602X)))
 (= $x46 $x212))))
 ))
 (let (($x79 (and $x246 $x258)))
 (let (($x155 (= $x79 true)))
 (let (($x179 (forall ((input.ind-%var1594X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1594X)))
 (= $x240 false)))
 ))
 (let (($x73 (forall ((input.ind-%var1595X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1595X)))
 (=> $x240 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1595X) (_ bv0 32)))))
 ))
 (let (($x241 (and $x73 $x179)))
 (let (($x199 (= $x241 true)))
 (let (($x266 (forall ((input.ind-%var1589X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x212 (= input.ind-%var1589X (_ bv0 32))))
 (let ((?x63 (ite $x212 ?x5 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x159 (= input.ind-%var1589X (_ bv1 32))))
 (let ((?x217 (ite $x159 ?x64 ?x63)))
 (let ((?x259 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1589X)))
 (let (($x145 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1589X)))
 (=> $x145 (= ?x259 ?x217)))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var1588X (_ BitVec 32)) )(let (($x159 (= input.ind-%var1588X (_ bv1 32))))
 (let (($x212 (= input.ind-%var1588X (_ bv0 32))))
 (let (($x141 (or $x212 $x159)))
 (let (($x145 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1588X)))
 (= $x145 $x141))))))
 ))
 (let (($x52 (and $x189 $x266)))
 (let (($x265 (= $x52 true)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x64 ?x8)))
 (let (($x109 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x203 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x146 (=> $x203 $x109)))
 (let (($x169 (or $x36 $x13)))
 (let ((?x238 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x238 (_ bv1 32))))
 (let (($x247 (= $x203 $x176)))
 (let (($x19 (= false false)))
 (let (($x56 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x140 (=> $x56 $x19)))
 (let (($x198 (= ?x238 (_ bv0 32))))
 (let (($x201 (= $x56 $x198)))
 (let (($x178 (and (and (and $x201 $x140) $x247) $x146)))
 (let (($x174 (= $x178 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x75 (ite $x20 ?x64 ?x47)))
 (let (($x205 (= input.spec-%tmpvar-16.L2%25%d.2 ?x75)))
 (let (($x152 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x214 (=> $x152 $x205)))
 (let (($x143 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x172 (=> $x143 $x19)))
 (let (($x133 (or $x51 $x20)))
 (let ((?x139 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x139 (_ bv0 32))))
 (let (($x153 (= $x143 $x144)))
 (let (($x128 (bvuge ?x139 (_ bv1 32))))
 (let (($x131 (= $x152 $x128)))
 (let (($x213 (and (and (and $x131 $x153) $x172) $x214)))
 (let (($x264 (= $x213 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x134 (concat ?x132 (concat ?x135 ?x137)))))
 (let (($x24 (= ?x173 input.dst.llvm-%x)))
 (let (($x48 (= $x24 true)))
 (let (($x138 (= $x48 true)))
 (let (($x124 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x121 (= $x124 true)))
 (let (($x123 (= $x121 true)))
 (let (($x126 (= $x123 true)))
 (let (($x118 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x120 (= $x118 true)))
 (let (($x111 (= $x120 true)))
 (let (($x122 (= $x111 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x102)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x95 $x91)))
 (let (($x117 (and $x99 $x112)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x72 $x117)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x69)))))))
 (let (($x107 (and $x96 $x108)))
 (let (($x119 (= $x107 true)))
 (let (($x113 (= $x119 true)))
 (let (($x115 (= $x113 true)))
 (let (($x18 (and $x115 $x122)))
 (let (($x104 (and $x18 $x126)))
 (let (($x21 (and $x104 $x138)))
 (let (($x200 (and $x21 $x264)))
 (let (($x194 (and $x200 $x174)))
 (let (($x236 (and $x194 $x265)))
 (let (($x209 (and $x236 $x199)))
 (let (($x224 (and $x209 $x155)))
 (let (($x235 (and $x224 $x110)))
 (let (($x83 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x97 (or false $x83)))
 (let (($x103 (and $x97 $x235)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x142 (and $x70 $x103)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x245 (and $x68 $x142)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x261 (and $x59 $x245)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x187 (and $x14 $x261)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x227 (and $x30 $x187)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x149 (and $x27 $x227)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x148 (and $x43 $x149)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x219 (and $x32 $x148)))
 (let (($x33 (= ?x64 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x272 (and $x33 $x219)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x204 (and $x9 $x272)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x220 (and $x7 $x204)))
 (let (($x251 (and $x19 $x220)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x177 (and $x17 $x251)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x58 (and $x35 $x177)))
 (let (($x253 (and $x19 $x58)))
 (let (($x23 (= input.spec-%var-y-1.L2%31%bbentry ?x75)))
 (let (($x270 (and $x23 $x253)))
 (let (($x243 (=> $x270 $x222)))
 (not $x243)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x275 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x248 (= (_ bv0 32) ?x275)))
 (let (($x191 (= $x248 true)))
 (let (($x222 (= $x191 true)))
 (let (($x88 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x212 (= input.ind-%var1613X (_ bv0 32))))
 (let ((?x63 (ite $x212 ?x5 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x159 (= input.ind-%var1613X (_ bv1 32))))
 (let ((?x217 (ite $x159 ?x64 ?x63)))
 (let ((?x228 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1613X)))
 (let (($x162 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1613X)))
 (=> $x162 (= ?x228 ?x217)))))))))))
 ))
 (let (($x254 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let (($x159 (= input.ind-%var1612X (_ bv1 32))))
 (let (($x212 (= input.ind-%var1612X (_ bv0 32))))
 (let (($x141 (or $x212 $x159)))
 (let (($x162 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1612X)))
 (= $x162 $x141))))))
 ))
 (let (($x207 (and $x254 $x88)))
 (let (($x110 (= $x207 true)))
 (let (($x258 (forall ((input.ind-%var1603X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x212 (= input.ind-%var1603X (_ bv0 32))))
 (let ((?x63 (ite $x212 ?x5 (_ bv0 32))))
 (let ((?x67 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1603X)))
 (let (($x46 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1603X)))
 (=> $x46 (= ?x67 ?x63))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1602X (_ BitVec 32)) )(let (($x212 (= input.ind-%var1602X (_ bv0 32))))
 (let (($x46 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1602X)))
 (= $x46 $x212))))
 ))
 (let (($x79 (and $x246 $x258)))
 (let (($x155 (= $x79 true)))
 (let (($x179 (forall ((input.ind-%var1594X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1594X)))
 (= $x240 false)))
 ))
 (let (($x73 (forall ((input.ind-%var1595X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1595X)))
 (=> $x240 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1595X) (_ bv0 32)))))
 ))
 (let (($x241 (and $x73 $x179)))
 (let (($x199 (= $x241 true)))
 (let (($x266 (forall ((input.ind-%var1589X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x212 (= input.ind-%var1589X (_ bv0 32))))
 (let ((?x63 (ite $x212 ?x5 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x159 (= input.ind-%var1589X (_ bv1 32))))
 (let ((?x217 (ite $x159 ?x64 ?x63)))
 (let ((?x259 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1589X)))
 (let (($x145 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1589X)))
 (=> $x145 (= ?x259 ?x217)))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var1588X (_ BitVec 32)) )(let (($x159 (= input.ind-%var1588X (_ bv1 32))))
 (let (($x212 (= input.ind-%var1588X (_ bv0 32))))
 (let (($x141 (or $x212 $x159)))
 (let (($x145 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1588X)))
 (= $x145 $x141))))))
 ))
 (let (($x52 (and $x189 $x266)))
 (let (($x265 (= $x52 true)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x64 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x64 ?x8)))
 (let (($x109 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x203 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x146 (=> $x203 $x109)))
 (let (($x169 (or $x36 $x13)))
 (let ((?x238 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x238 (_ bv1 32))))
 (let (($x247 (= $x203 $x176)))
 (let (($x19 (= false false)))
 (let (($x56 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x140 (=> $x56 $x19)))
 (let (($x198 (= ?x238 (_ bv0 32))))
 (let (($x201 (= $x56 $x198)))
 (let (($x178 (and (and (and $x201 $x140) $x247) $x146)))
 (let (($x174 (= $x178 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x20 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x75 (ite $x20 ?x64 ?x47)))
 (let (($x205 (= input.spec-%tmpvar-16.L2%25%d.2 ?x75)))
 (let (($x152 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x214 (=> $x152 $x205)))
 (let (($x143 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x172 (=> $x143 $x19)))
 (let (($x133 (or $x51 $x20)))
 (let ((?x139 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x139 (_ bv0 32))))
 (let (($x153 (= $x143 $x144)))
 (let (($x128 (bvuge ?x139 (_ bv1 32))))
 (let (($x131 (= $x152 $x128)))
 (let (($x213 (and (and (and $x131 $x153) $x172) $x214)))
 (let (($x264 (= $x213 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x134 (concat ?x132 (concat ?x135 ?x137)))))
 (let (($x24 (= ?x173 input.dst.llvm-%x)))
 (let (($x48 (= $x24 true)))
 (let (($x138 (= $x48 true)))
 (let (($x124 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x121 (= $x124 true)))
 (let (($x123 (= $x121 true)))
 (let (($x126 (= $x123 true)))
 (let (($x118 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x120 (= $x118 true)))
 (let (($x111 (= $x120 true)))
 (let (($x122 (= $x111 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x102)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x95 $x91)))
 (let (($x117 (and $x99 $x112)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x72 $x117)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x69)))))))
 (let (($x107 (and $x96 $x108)))
 (let (($x119 (= $x107 true)))
 (let (($x113 (= $x119 true)))
 (let (($x115 (= $x113 true)))
 (let (($x18 (and $x115 $x122)))
 (let (($x104 (and $x18 $x126)))
 (let (($x21 (and $x104 $x138)))
 (let (($x200 (and $x21 $x264)))
 (let (($x194 (and $x200 $x174)))
 (let (($x236 (and $x194 $x265)))
 (let (($x209 (and $x236 $x199)))
 (let (($x224 (and $x209 $x155)))
 (let (($x235 (and $x224 $x110)))
 (let (($x83 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x97 (or false $x83)))
 (let (($x103 (and $x97 $x235)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x142 (and $x70 $x103)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x245 (and $x68 $x142)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x261 (and $x59 $x245)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x187 (and $x14 $x261)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x227 (and $x30 $x187)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x149 (and $x27 $x227)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x148 (and $x43 $x149)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x219 (and $x32 $x148)))
 (let (($x33 (= ?x64 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x272 (and $x33 $x219)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x204 (and $x9 $x272)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x220 (and $x7 $x204)))
 (let (($x251 (and $x19 $x220)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x177 (and $x17 $x251)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x58 (and $x35 $x177)))
 (let (($x253 (and $x19 $x58)))
 (let (($x23 (= input.spec-%var-y-1.L2%31%bbentry ?x75)))
 (let (($x270 (and $x23 $x253)))
 (let (($x243 (=> $x270 $x222)))
 (not $x243)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x225 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x242 (= (_ bv0 32) ?x225)))
 (let (($x234 (= $x242 true)))
 (let (($x218 (= $x234 true)))
 (let (($x196 (forall ((input.ind-%var1707X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x52 (= input.ind-%var1707X (_ bv0 32))))
 (let ((?x246 (ite $x52 ?x5 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x266 (= input.ind-%var1707X (_ bv1 32))))
 (let ((?x67 (ite $x266 ?x54 ?x246)))
 (let ((?x255 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1707X)))
 (let (($x239 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1707X)))
 (=> $x239 (= ?x255 ?x67)))))))))))
 ))
 (let (($x269 (forall ((input.ind-%var1706X (_ BitVec 32)) )(let (($x266 (= input.ind-%var1706X (_ bv1 32))))
 (let (($x52 (= input.ind-%var1706X (_ bv0 32))))
 (let (($x265 (or $x52 $x266)))
 (let (($x239 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1706X)))
 (= $x239 $x265))))))
 ))
 (let (($x237 (and $x269 $x196)))
 (let (($x116 (= $x237 true)))
 (let (($x271 (forall ((input.ind-%var1697X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x52 (= input.ind-%var1697X (_ bv0 32))))
 (let ((?x246 (ite $x52 ?x5 (_ bv0 32))))
 (let ((?x243 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1697X)))
 (let (($x251 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1697X)))
 (=> $x251 (= ?x243 ?x246))))))))
 ))
 (let (($x275 (forall ((input.ind-%var1696X (_ BitVec 32)) )(let (($x52 (= input.ind-%var1696X (_ bv0 32))))
 (let (($x251 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1696X)))
 (= $x251 $x52))))
 ))
 (let (($x160 (and $x275 $x271)))
 (let (($x167 (= $x160 true)))
 (let (($x149 (forall ((input.ind-%var1688X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1688X)))
 (= $x254 false)))
 ))
 (let (($x142 (forall ((input.ind-%var1689X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1689X)))
 (=> $x254 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1689X) (_ bv0 32)))))
 ))
 (let (($x148 (and $x142 $x149)))
 (let (($x219 (= $x148 true)))
 (let (($x258 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x52 (= input.ind-%var1683X (_ bv0 32))))
 (let ((?x246 (ite $x52 ?x5 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x266 (= input.ind-%var1683X (_ bv1 32))))
 (let ((?x67 (ite $x266 ?x54 ?x246)))
 (let ((?x73 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1683X)))
 (let (($x189 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1683X)))
 (=> $x189 (= ?x73 ?x67)))))))))))
 ))
 (let (($x240 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x266 (= input.ind-%var1682X (_ bv1 32))))
 (let (($x52 (= input.ind-%var1682X (_ bv0 32))))
 (let (($x265 (or $x52 $x266)))
 (let (($x189 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1682X)))
 (= $x189 $x265))))))
 ))
 (let (($x79 (and $x240 $x258)))
 (let (($x155 (= $x79 true)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x54 ?x8)))
 (let (($x146 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x247 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x178 (=> $x247 $x146)))
 (let (($x201 (or $x36 $x13)))
 (let ((?x140 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x140 (_ bv1 32))))
 (let (($x226 (= $x247 $x185)))
 (let (($x23 (= false false)))
 (let (($x198 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x176 (=> $x198 $x23)))
 (let (($x230 (= ?x140 (_ bv0 32))))
 (let (($x203 (= $x198 $x230)))
 (let (($x223 (and (and (and $x203 $x176) $x226) $x178)))
 (let (($x145 (= $x223 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x22 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x20 (ite $x22 ?x54 ?x47)))
 (let (($x214 (= input.spec-%tmpvar-16.L2%25%d.2 ?x20)))
 (let (($x131 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x213 (=> $x131 $x214)))
 (let (($x19 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x170 (=> $x19 $x23)))
 (let (($x143 (or $x51 $x22)))
 (let ((?x144 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x144 (_ bv0 32))))
 (let (($x184 (= $x19 $x172)))
 (let (($x153 (bvuge ?x144 (_ bv1 32))))
 (let (($x202 (= $x131 $x153)))
 (let (($x171 (and (and (and $x202 $x184) $x170) $x213)))
 (let (($x56 (= $x171 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x138 (concat ?x173 (concat ?x135 ?x132)))))
 (let (($x11 (= ?x21 input.dst.llvm-%x)))
 (let (($x152 (= $x11 true)))
 (let (($x133 (= $x152 true)))
 (let (($x126 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x104 (= $x126 true)))
 (let (($x105 (= $x104 true)))
 (let (($x44 (= $x105 true)))
 (let (($x111 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x122 (not $x111)))
 (let (($x18 (= $x122 true)))
 (let (($x124 (= $x18 true)))
 (let (($x121 (= $x124 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x117)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x94 $x102)))
 (let (($x107 (and $x112 $x108)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x87 $x107)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x101)))))))
 (let (($x113 (and $x90 $x119)))
 (let (($x115 (= $x113 true)))
 (let (($x125 (= $x115 true)))
 (let (($x118 (= $x125 true)))
 (let (($x123 (and $x118 $x121)))
 (let (($x134 (and $x123 $x44)))
 (let (($x139 (and $x134 $x133)))
 (let (($x169 (and $x139 $x56)))
 (let (($x212 (and $x169 $x145)))
 (let (($x224 (and $x212 $x155)))
 (let (($x272 (and $x224 $x219)))
 (let (($x274 (and $x272 $x167)))
 (let (($x181 (and $x274 $x116)))
 (let (($x83 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x97 (or false $x83)))
 (let (($x192 (and $x97 $x181)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x208 (and $x70 $x192)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x166 (and $x68 $x208)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x256 (and $x59 $x166)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x157 (and $x14 $x256)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x106 (and $x30 $x157)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x77 (and $x27 $x106)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x114 (and $x43 $x77)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x62 (and $x32 $x114)))
 (let (($x33 (= ?x54 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x163 (and $x33 $x62)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x252 (and $x9 $x163)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x57 (and $x7 $x252)))
 (let (($x215 (and $x23 $x57)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x183 (and $x17 $x215)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x267 (and $x35 $x183)))
 (let (($x188 (and $x23 $x267)))
 (let (($x75 (= input.spec-%var-y-1.L2%31%bbentry ?x20)))
 (let (($x195 (and $x75 $x188)))
 (let (($x151 (=> $x195 $x218)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x225 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x242 (= (_ bv0 32) ?x225)))
 (let (($x234 (= $x242 true)))
 (let (($x218 (= $x234 true)))
 (let (($x196 (forall ((input.ind-%var1707X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x52 (= input.ind-%var1707X (_ bv0 32))))
 (let ((?x246 (ite $x52 ?x5 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x266 (= input.ind-%var1707X (_ bv1 32))))
 (let ((?x67 (ite $x266 ?x54 ?x246)))
 (let ((?x255 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1707X)))
 (let (($x239 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1707X)))
 (=> $x239 (= ?x255 ?x67)))))))))))
 ))
 (let (($x269 (forall ((input.ind-%var1706X (_ BitVec 32)) )(let (($x266 (= input.ind-%var1706X (_ bv1 32))))
 (let (($x52 (= input.ind-%var1706X (_ bv0 32))))
 (let (($x265 (or $x52 $x266)))
 (let (($x239 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1706X)))
 (= $x239 $x265))))))
 ))
 (let (($x237 (and $x269 $x196)))
 (let (($x116 (= $x237 true)))
 (let (($x271 (forall ((input.ind-%var1697X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x52 (= input.ind-%var1697X (_ bv0 32))))
 (let ((?x246 (ite $x52 ?x5 (_ bv0 32))))
 (let ((?x243 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1697X)))
 (let (($x251 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1697X)))
 (=> $x251 (= ?x243 ?x246))))))))
 ))
 (let (($x275 (forall ((input.ind-%var1696X (_ BitVec 32)) )(let (($x52 (= input.ind-%var1696X (_ bv0 32))))
 (let (($x251 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1696X)))
 (= $x251 $x52))))
 ))
 (let (($x160 (and $x275 $x271)))
 (let (($x167 (= $x160 true)))
 (let (($x149 (forall ((input.ind-%var1688X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1688X)))
 (= $x254 false)))
 ))
 (let (($x142 (forall ((input.ind-%var1689X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1689X)))
 (=> $x254 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1689X) (_ bv0 32)))))
 ))
 (let (($x148 (and $x142 $x149)))
 (let (($x219 (= $x148 true)))
 (let (($x258 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x52 (= input.ind-%var1683X (_ bv0 32))))
 (let ((?x246 (ite $x52 ?x5 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x266 (= input.ind-%var1683X (_ bv1 32))))
 (let ((?x67 (ite $x266 ?x54 ?x246)))
 (let ((?x73 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1683X)))
 (let (($x189 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1683X)))
 (=> $x189 (= ?x73 ?x67)))))))))))
 ))
 (let (($x240 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x266 (= input.ind-%var1682X (_ bv1 32))))
 (let (($x52 (= input.ind-%var1682X (_ bv0 32))))
 (let (($x265 (or $x52 $x266)))
 (let (($x189 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1682X)))
 (= $x189 $x265))))))
 ))
 (let (($x79 (and $x240 $x258)))
 (let (($x155 (= $x79 true)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x54 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x54 ?x8)))
 (let (($x146 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x247 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x178 (=> $x247 $x146)))
 (let (($x201 (or $x36 $x13)))
 (let ((?x140 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x140 (_ bv1 32))))
 (let (($x226 (= $x247 $x185)))
 (let (($x23 (= false false)))
 (let (($x198 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x176 (=> $x198 $x23)))
 (let (($x230 (= ?x140 (_ bv0 32))))
 (let (($x203 (= $x198 $x230)))
 (let (($x223 (and (and (and $x203 $x176) $x226) $x178)))
 (let (($x145 (= $x223 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x22 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x20 (ite $x22 ?x54 ?x47)))
 (let (($x214 (= input.spec-%tmpvar-16.L2%25%d.2 ?x20)))
 (let (($x131 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x213 (=> $x131 $x214)))
 (let (($x19 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x170 (=> $x19 $x23)))
 (let (($x143 (or $x51 $x22)))
 (let ((?x144 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x144 (_ bv0 32))))
 (let (($x184 (= $x19 $x172)))
 (let (($x153 (bvuge ?x144 (_ bv1 32))))
 (let (($x202 (= $x131 $x153)))
 (let (($x171 (and (and (and $x202 $x184) $x170) $x213)))
 (let (($x56 (= $x171 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x138 (concat ?x173 (concat ?x135 ?x132)))))
 (let (($x11 (= ?x21 input.dst.llvm-%x)))
 (let (($x152 (= $x11 true)))
 (let (($x133 (= $x152 true)))
 (let (($x126 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x104 (= $x126 true)))
 (let (($x105 (= $x104 true)))
 (let (($x44 (= $x105 true)))
 (let (($x111 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x122 (not $x111)))
 (let (($x18 (= $x122 true)))
 (let (($x124 (= $x18 true)))
 (let (($x121 (= $x124 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x117)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x94 $x102)))
 (let (($x107 (and $x112 $x108)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x87 $x107)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x101)))))))
 (let (($x113 (and $x90 $x119)))
 (let (($x115 (= $x113 true)))
 (let (($x125 (= $x115 true)))
 (let (($x118 (= $x125 true)))
 (let (($x123 (and $x118 $x121)))
 (let (($x134 (and $x123 $x44)))
 (let (($x139 (and $x134 $x133)))
 (let (($x169 (and $x139 $x56)))
 (let (($x212 (and $x169 $x145)))
 (let (($x224 (and $x212 $x155)))
 (let (($x272 (and $x224 $x219)))
 (let (($x274 (and $x272 $x167)))
 (let (($x181 (and $x274 $x116)))
 (let (($x83 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) false)))
 (let (($x97 (or false $x83)))
 (let (($x192 (and $x97 $x181)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x208 (and $x70 $x192)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x166 (and $x68 $x208)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x256 (and $x59 $x166)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x157 (and $x14 $x256)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x106 (and $x30 $x157)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x77 (and $x27 $x106)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x114 (and $x43 $x77)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x62 (and $x32 $x114)))
 (let (($x33 (= ?x54 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x163 (and $x33 $x62)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x252 (and $x9 $x163)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x57 (and $x7 $x252)))
 (let (($x215 (and $x23 $x57)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x183 (and $x17 $x215)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x267 (and $x35 $x183)))
 (let (($x188 (and $x23 $x267)))
 (let (($x75 (= input.spec-%var-y-1.L2%31%bbentry ?x20)))
 (let (($x195 (and $x75 $x188)))
 (let (($x151 (=> $x195 $x218)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x64 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x22 (ite $x64 ?x80 ?x47)))
 (let ((?x186 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x55 (= ?x186 ?x22)))
 (let (($x66 (= $x55 true)))
 (let (($x180 (= $x66 true)))
 (let (($x260 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x246 (= input.ind-%var1801X (_ bv0 32))))
 (let ((?x148 (ite $x246 ?x5 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x73 (= input.ind-%var1801X (_ bv1 32))))
 (let ((?x219 (ite $x73 ?x80 ?x148)))
 (let ((?x222 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1801X)))
 (let (($x197 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1801X)))
 (=> $x197 (= ?x222 ?x219)))))))))))
 ))
 (let (($x179 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let (($x73 (= input.ind-%var1800X (_ bv1 32))))
 (let (($x246 (= input.ind-%var1800X (_ bv0 32))))
 (let (($x67 (or $x246 $x73)))
 (let (($x197 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1800X)))
 (= $x197 $x67))))))
 ))
 (let (($x220 (and $x179 $x260)))
 (let (($x190 (= $x220 true)))
 (let (($x259 (forall ((input.ind-%var1791X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x246 (= input.ind-%var1791X (_ bv0 32))))
 (let ((?x148 (ite $x246 ?x5 (_ bv0 32))))
 (let ((?x195 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1791X)))
 (let (($x114 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1791X)))
 (=> $x114 (= ?x195 ?x148))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1790X (_ BitVec 32)) )(let (($x246 (= input.ind-%var1790X (_ bv0 32))))
 (let (($x114 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1790X)))
 (= $x114 $x246))))
 ))
 (let (($x206 (and $x215 $x259)))
 (let (($x130 (= $x206 true)))
 (let (($x208 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1782X)))
 (= $x160 false)))
 ))
 (let (($x196 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1783X)))
 (=> $x160 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1783X) (_ bv0 32)))))
 ))
 (let (($x166 (and $x196 $x208)))
 (let (($x256 (= $x166 true)))
 (let (($x270 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x246 (= input.ind-%var1777X (_ bv0 32))))
 (let ((?x148 (ite $x246 ?x5 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x73 (= input.ind-%var1777X (_ bv1 32))))
 (let ((?x219 (ite $x73 ?x80 ?x148)))
 (let ((?x224 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1777X)))
 (let (($x189 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1777X)))
 (=> $x189 (= ?x224 ?x219)))))))))))
 ))
 (let (($x182 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let (($x73 (= input.ind-%var1776X (_ bv1 32))))
 (let (($x246 (= input.ind-%var1776X (_ bv0 32))))
 (let (($x67 (or $x246 $x73)))
 (let (($x189 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1776X)))
 (= $x189 $x67))))))
 ))
 (let (($x275 (and $x182 $x270)))
 (let (($x243 (= $x275 true)))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x80 ?x8)))
 (let (($x185 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x203 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x226 (=> $x203 $x185)))
 (let (($x238 (or $x36 $x13)))
 (let ((?x198 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x198 (_ bv1 32))))
 (let (($x174 (= $x203 $x176)))
 (let (($x75 (= false false)))
 (let (($x169 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x230 (=> $x169 $x75)))
 (let (($x201 (= ?x198 (_ bv0 32))))
 (let (($x140 (= $x169 $x201)))
 (let (($x146 (and (and (and $x140 $x230) $x174) $x226)))
 (let (($x178 (= $x146 true)))
 (let (($x23 (= input.spec-%tmpvar-16.L2%25%d.2 ?x22)))
 (let (($x128 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x170 (=> $x128 $x23)))
 (let (($x202 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x184 (=> $x202 $x75)))
 (let (($x131 (or $x51 $x64)))
 (let ((?x143 (ite $x131 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x143 (_ bv0 32))))
 (let (($x172 (= $x202 $x19)))
 (let (($x144 (bvuge ?x143 (_ bv1 32))))
 (let (($x153 (= $x128 $x144)))
 (let (($x214 (and (and (and $x153 $x172) $x184) $x170)))
 (let (($x213 (= $x214 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x137 (concat ?x127 (concat ?x138 ?x136)))))
 (let (($x21 (= ?x24 input.dst.llvm-%x)))
 (let (($x11 (= $x21 true)))
 (let (($x152 (= $x11 true)))
 (let (($x121 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x123 (= $x121 true)))
 (let (($x126 (= $x123 true)))
 (let (($x104 (= $x126 true)))
 (let (($x120 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x111 (= $x120 true)))
 (let (($x122 (= $x111 true)))
 (let (($x18 (= $x122 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x112)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x87 $x99)))
 (let (($x108 (and $x102 $x117)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x85 $x108)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x101)))))))
 (let (($x119 (and $x92 $x107)))
 (let (($x113 (= $x119 true)))
 (let (($x115 (= $x113 true)))
 (let (($x125 (= $x115 true)))
 (let (($x124 (and $x125 $x18)))
 (let (($x105 (and $x124 $x104)))
 (let (($x133 (and $x105 $x152)))
 (let (($x171 (and $x133 $x213)))
 (let (($x223 (and $x171 $x178)))
 (let (($x210 (and $x223 $x243)))
 (let (($x157 (and $x210 $x256)))
 (let (($x228 (and $x157 $x130)))
 (let (($x63 (and $x228 $x190)))
 (let (($x231 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x63)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x211 (and $x70 $x231)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x241 (and $x68 $x211)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x199 (and $x59 $x241)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x209 (and $x14 $x199)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x46 (and $x30 $x209)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x187 (and $x27 $x46)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x164 (and $x43 $x187)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x65 (and $x32 $x164)))
 (let (($x33 (= ?x80 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x207 (and $x33 $x65)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x253 (and $x9 $x207)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x156 (and $x7 $x253)))
 (let (($x110 (and $x75 $x156)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x93 (and $x17 $x110)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x168 (and $x35 $x93)))
 (let (($x191 (and $x75 $x168)))
 (let (($x20 (= input.spec-%var-y-1.L2%31%bbentry ?x22)))
 (let (($x129 (and $x20 $x191)))
 (let (($x262 (=> $x129 $x180)))
 (not $x262)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x64 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x22 (ite $x64 ?x80 ?x47)))
 (let ((?x186 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x55 (= ?x186 ?x22)))
 (let (($x66 (= $x55 true)))
 (let (($x180 (= $x66 true)))
 (let (($x260 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x246 (= input.ind-%var1801X (_ bv0 32))))
 (let ((?x148 (ite $x246 ?x5 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x73 (= input.ind-%var1801X (_ bv1 32))))
 (let ((?x219 (ite $x73 ?x80 ?x148)))
 (let ((?x222 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1801X)))
 (let (($x197 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1801X)))
 (=> $x197 (= ?x222 ?x219)))))))))))
 ))
 (let (($x179 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let (($x73 (= input.ind-%var1800X (_ bv1 32))))
 (let (($x246 (= input.ind-%var1800X (_ bv0 32))))
 (let (($x67 (or $x246 $x73)))
 (let (($x197 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1800X)))
 (= $x197 $x67))))))
 ))
 (let (($x220 (and $x179 $x260)))
 (let (($x190 (= $x220 true)))
 (let (($x259 (forall ((input.ind-%var1791X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x246 (= input.ind-%var1791X (_ bv0 32))))
 (let ((?x148 (ite $x246 ?x5 (_ bv0 32))))
 (let ((?x195 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1791X)))
 (let (($x114 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1791X)))
 (=> $x114 (= ?x195 ?x148))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1790X (_ BitVec 32)) )(let (($x246 (= input.ind-%var1790X (_ bv0 32))))
 (let (($x114 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1790X)))
 (= $x114 $x246))))
 ))
 (let (($x206 (and $x215 $x259)))
 (let (($x130 (= $x206 true)))
 (let (($x208 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1782X)))
 (= $x160 false)))
 ))
 (let (($x196 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1783X)))
 (=> $x160 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1783X) (_ bv0 32)))))
 ))
 (let (($x166 (and $x196 $x208)))
 (let (($x256 (= $x166 true)))
 (let (($x270 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x246 (= input.ind-%var1777X (_ bv0 32))))
 (let ((?x148 (ite $x246 ?x5 (_ bv0 32))))
 (let ((?x80 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x73 (= input.ind-%var1777X (_ bv1 32))))
 (let ((?x219 (ite $x73 ?x80 ?x148)))
 (let ((?x224 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1777X)))
 (let (($x189 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1777X)))
 (=> $x189 (= ?x224 ?x219)))))))))))
 ))
 (let (($x182 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let (($x73 (= input.ind-%var1776X (_ bv1 32))))
 (let (($x246 (= input.ind-%var1776X (_ bv0 32))))
 (let (($x67 (or $x246 $x73)))
 (let (($x189 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1776X)))
 (= $x189 $x67))))))
 ))
 (let (($x275 (and $x182 $x270)))
 (let (($x243 (= $x275 true)))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x80 ?x8)))
 (let (($x185 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x203 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x226 (=> $x203 $x185)))
 (let (($x238 (or $x36 $x13)))
 (let ((?x198 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x198 (_ bv1 32))))
 (let (($x174 (= $x203 $x176)))
 (let (($x75 (= false false)))
 (let (($x169 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x230 (=> $x169 $x75)))
 (let (($x201 (= ?x198 (_ bv0 32))))
 (let (($x140 (= $x169 $x201)))
 (let (($x146 (and (and (and $x140 $x230) $x174) $x226)))
 (let (($x178 (= $x146 true)))
 (let (($x23 (= input.spec-%tmpvar-16.L2%25%d.2 ?x22)))
 (let (($x128 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x170 (=> $x128 $x23)))
 (let (($x202 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x184 (=> $x202 $x75)))
 (let (($x131 (or $x51 $x64)))
 (let ((?x143 (ite $x131 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x143 (_ bv0 32))))
 (let (($x172 (= $x202 $x19)))
 (let (($x144 (bvuge ?x143 (_ bv1 32))))
 (let (($x153 (= $x128 $x144)))
 (let (($x214 (and (and (and $x153 $x172) $x184) $x170)))
 (let (($x213 (= $x214 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x137 (concat ?x127 (concat ?x138 ?x136)))))
 (let (($x21 (= ?x24 input.dst.llvm-%x)))
 (let (($x11 (= $x21 true)))
 (let (($x152 (= $x11 true)))
 (let (($x121 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x123 (= $x121 true)))
 (let (($x126 (= $x123 true)))
 (let (($x104 (= $x126 true)))
 (let (($x120 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x111 (= $x120 true)))
 (let (($x122 (= $x111 true)))
 (let (($x18 (= $x122 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x112)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x87 $x99)))
 (let (($x108 (and $x102 $x117)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x85 $x108)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x101)))))))
 (let (($x119 (and $x92 $x107)))
 (let (($x113 (= $x119 true)))
 (let (($x115 (= $x113 true)))
 (let (($x125 (= $x115 true)))
 (let (($x124 (and $x125 $x18)))
 (let (($x105 (and $x124 $x104)))
 (let (($x133 (and $x105 $x152)))
 (let (($x171 (and $x133 $x213)))
 (let (($x223 (and $x171 $x178)))
 (let (($x210 (and $x223 $x243)))
 (let (($x157 (and $x210 $x256)))
 (let (($x228 (and $x157 $x130)))
 (let (($x63 (and $x228 $x190)))
 (let (($x231 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x63)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x211 (and $x70 $x231)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x241 (and $x68 $x211)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x199 (and $x59 $x241)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x209 (and $x14 $x199)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x46 (and $x30 $x209)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x187 (and $x27 $x46)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x164 (and $x43 $x187)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x65 (and $x32 $x164)))
 (let (($x33 (= ?x80 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x207 (and $x33 $x65)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x253 (and $x9 $x207)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x156 (and $x7 $x253)))
 (let (($x110 (and $x75 $x156)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x93 (and $x17 $x110)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x168 (and $x35 $x93)))
 (let (($x191 (and $x75 $x168)))
 (let (($x20 (= input.spec-%var-y-1.L2%31%bbentry ?x22)))
 (let (($x129 (and $x20 $x191)))
 (let (($x262 (=> $x129 $x180)))
 (not $x262)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x54 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x64 (ite $x54 ?x86 ?x47)))
 (let ((?x245 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x261 (= ?x245 ?x64)))
 (let (($x147 (= $x261 true)))
 (let (($x193 (= $x147 true)))
 (let (($x236 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x270 (= input.ind-%var1895X (_ bv0 32))))
 (let ((?x57 (ite $x270 ?x5 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x251 (= input.ind-%var1895X (_ bv1 32))))
 (let ((?x215 (ite $x251 ?x86 ?x57)))
 (let ((?x242 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1895X)))
 (let (($x155 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1895X)))
 (=> $x155 (= ?x242 ?x215)))))))))))
 ))
 (let (($x188 (forall ((input.ind-%var1894X (_ BitVec 32)) )(let (($x251 (= input.ind-%var1894X (_ bv1 32))))
 (let (($x270 (= input.ind-%var1894X (_ bv0 32))))
 (let (($x275 (or $x270 $x251)))
 (let (($x155 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1894X)))
 (= $x155 $x275))))))
 ))
 (let (($x240 (and $x188 $x236)))
 (let (($x177 (= $x240 true)))
 (let (($x53 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x270 (= input.ind-%var1885X (_ bv0 32))))
 (let ((?x57 (ite $x270 ?x5 (_ bv0 32))))
 (let ((?x180 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1885X)))
 (let (($x156 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1885X)))
 (=> $x156 (= ?x180 ?x57))))))))
 ))
 (let (($x129 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x270 (= input.ind-%var1884X (_ bv0 32))))
 (let (($x156 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1884X)))
 (= $x156 $x270))))
 ))
 (let (($x62 (and $x129 $x53)))
 (let (($x225 (= $x62 true)))
 (let (($x46 (forall ((input.ind-%var1876X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1876X)))
 (= $x217 false)))
 ))
 (let (($x231 (forall ((input.ind-%var1877X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1877X)))
 (=> $x217 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1877X) (_ bv0 32)))))
 ))
 (let (($x187 (and $x231 $x46)))
 (let (($x164 (= $x187 true)))
 (let (($x76 (forall ((input.ind-%var1871X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x270 (= input.ind-%var1871X (_ bv0 32))))
 (let ((?x57 (ite $x270 ?x5 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x251 (= input.ind-%var1871X (_ bv1 32))))
 (let ((?x215 (ite $x251 ?x86 ?x57)))
 (let ((?x268 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1871X)))
 (let (($x229 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1871X)))
 (=> $x229 (= ?x268 ?x215)))))))))))
 ))
 (let (($x210 (forall ((input.ind-%var1870X (_ BitVec 32)) )(let (($x251 (= input.ind-%var1870X (_ bv1 32))))
 (let (($x270 (= input.ind-%var1870X (_ bv0 32))))
 (let (($x275 (or $x270 $x251)))
 (let (($x229 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1870X)))
 (= $x229 $x275))))))
 ))
 (let (($x259 (and $x210 $x76)))
 (let (($x206 (= $x259 true)))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x86 ?x8)))
 (let (($x185 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x176 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x226 (=> $x176 $x185)))
 (let (($x201 (or $x36 $x13)))
 (let ((?x140 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x140 (_ bv1 32))))
 (let (($x109 (= $x176 $x174)))
 (let (($x20 (= false false)))
 (let (($x198 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x203 (=> $x198 $x20)))
 (let (($x230 (= ?x140 (_ bv0 32))))
 (let (($x194 (= $x198 $x230)))
 (let (($x223 (and (and (and $x194 $x203) $x109) $x226)))
 (let (($x250 (= $x223 true)))
 (let (($x23 (= input.spec-%tmpvar-16.L2%25%d.2 ?x64)))
 (let (($x144 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x170 (=> $x144 $x23)))
 (let (($x200 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x205 (=> $x200 $x20)))
 (let (($x153 (or $x51 $x54)))
 (let ((?x202 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x202 (_ bv0 32))))
 (let (($x184 (= $x200 $x75)))
 (let (($x19 (bvuge ?x202 (_ bv1 32))))
 (let (($x172 (= $x144 $x19)))
 (let (($x171 (and (and (and $x172 $x184) $x205) $x170)))
 (let (($x56 (= $x171 true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x152 (concat ?x11 (concat ?x135 (concat ?x48 ?x173)))))
 (let (($x133 (= ?x152 input.dst.llvm-%x)))
 (let (($x139 (= $x133 true)))
 (let (($x128 (= $x139 true)))
 (let (($x126 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x104 (= $x126 true)))
 (let (($x105 (= $x104 true)))
 (let (($x44 (= $x105 true)))
 (let (($x111 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x122 (not $x111)))
 (let (($x18 (= $x122 true)))
 (let (($x124 (= $x18 true)))
 (let (($x121 (= $x124 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x117)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x94 $x102)))
 (let (($x107 (and $x112 $x108)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x90 $x107)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x96)))))))
 (let (($x113 (and $x87 $x119)))
 (let (($x115 (= $x113 true)))
 (let (($x125 (= $x115 true)))
 (let (($x118 (= $x125 true)))
 (let (($x123 (and $x118 $x121)))
 (let (($x132 (and $x123 $x44)))
 (let (($x131 (and $x132 $x128)))
 (let (($x169 (and $x131 $x56)))
 (let (($x189 (and $x169 $x250)))
 (let (($x130 (and $x189 $x206)))
 (let (($x65 (and $x130 $x164)))
 (let (($x232 (and $x65 $x225)))
 (let (($x235 (and $x232 $x177)))
 (let (($x142 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x235)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x227 (and $x70 $x142)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x181 (and $x68 $x227)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x79 (and $x59 $x181)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x149 (and $x14 $x79)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x269 (and $x30 $x149)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x252 (and $x27 $x269)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x271 (and $x43 $x252)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x255 (and $x32 $x271)))
 (let (($x33 (= ?x86 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x218 (and $x33 $x255)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x221 (and $x9 $x218)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x267 (and $x7 $x221)))
 (let (($x151 (and $x20 $x267)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x165 (and $x17 $x151)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x159 (and $x35 $x165)))
 (let (($x58 (and $x20 $x159)))
 (let (($x22 (= input.spec-%var-y-1.L2%31%bbentry ?x64)))
 (let (($x61 (and $x22 $x58)))
 (let (($x161 (=> $x61 $x193)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x54 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x64 (ite $x54 ?x86 ?x47)))
 (let ((?x245 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x261 (= ?x245 ?x64)))
 (let (($x147 (= $x261 true)))
 (let (($x193 (= $x147 true)))
 (let (($x236 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x270 (= input.ind-%var1895X (_ bv0 32))))
 (let ((?x57 (ite $x270 ?x5 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x251 (= input.ind-%var1895X (_ bv1 32))))
 (let ((?x215 (ite $x251 ?x86 ?x57)))
 (let ((?x242 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1895X)))
 (let (($x155 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1895X)))
 (=> $x155 (= ?x242 ?x215)))))))))))
 ))
 (let (($x188 (forall ((input.ind-%var1894X (_ BitVec 32)) )(let (($x251 (= input.ind-%var1894X (_ bv1 32))))
 (let (($x270 (= input.ind-%var1894X (_ bv0 32))))
 (let (($x275 (or $x270 $x251)))
 (let (($x155 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1894X)))
 (= $x155 $x275))))))
 ))
 (let (($x240 (and $x188 $x236)))
 (let (($x177 (= $x240 true)))
 (let (($x53 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x270 (= input.ind-%var1885X (_ bv0 32))))
 (let ((?x57 (ite $x270 ?x5 (_ bv0 32))))
 (let ((?x180 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1885X)))
 (let (($x156 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1885X)))
 (=> $x156 (= ?x180 ?x57))))))))
 ))
 (let (($x129 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x270 (= input.ind-%var1884X (_ bv0 32))))
 (let (($x156 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1884X)))
 (= $x156 $x270))))
 ))
 (let (($x62 (and $x129 $x53)))
 (let (($x225 (= $x62 true)))
 (let (($x46 (forall ((input.ind-%var1876X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1876X)))
 (= $x217 false)))
 ))
 (let (($x231 (forall ((input.ind-%var1877X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1877X)))
 (=> $x217 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1877X) (_ bv0 32)))))
 ))
 (let (($x187 (and $x231 $x46)))
 (let (($x164 (= $x187 true)))
 (let (($x76 (forall ((input.ind-%var1871X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x270 (= input.ind-%var1871X (_ bv0 32))))
 (let ((?x57 (ite $x270 ?x5 (_ bv0 32))))
 (let ((?x86 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x251 (= input.ind-%var1871X (_ bv1 32))))
 (let ((?x215 (ite $x251 ?x86 ?x57)))
 (let ((?x268 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1871X)))
 (let (($x229 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1871X)))
 (=> $x229 (= ?x268 ?x215)))))))))))
 ))
 (let (($x210 (forall ((input.ind-%var1870X (_ BitVec 32)) )(let (($x251 (= input.ind-%var1870X (_ bv1 32))))
 (let (($x270 (= input.ind-%var1870X (_ bv0 32))))
 (let (($x275 (or $x270 $x251)))
 (let (($x229 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1870X)))
 (= $x229 $x275))))))
 ))
 (let (($x259 (and $x210 $x76)))
 (let (($x206 (= $x259 true)))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x86 ?x8)))
 (let (($x185 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x176 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x226 (=> $x176 $x185)))
 (let (($x201 (or $x36 $x13)))
 (let ((?x140 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x140 (_ bv1 32))))
 (let (($x109 (= $x176 $x174)))
 (let (($x20 (= false false)))
 (let (($x198 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x203 (=> $x198 $x20)))
 (let (($x230 (= ?x140 (_ bv0 32))))
 (let (($x194 (= $x198 $x230)))
 (let (($x223 (and (and (and $x194 $x203) $x109) $x226)))
 (let (($x250 (= $x223 true)))
 (let (($x23 (= input.spec-%tmpvar-16.L2%25%d.2 ?x64)))
 (let (($x144 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x170 (=> $x144 $x23)))
 (let (($x200 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x205 (=> $x200 $x20)))
 (let (($x153 (or $x51 $x54)))
 (let ((?x202 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x202 (_ bv0 32))))
 (let (($x184 (= $x200 $x75)))
 (let (($x19 (bvuge ?x202 (_ bv1 32))))
 (let (($x172 (= $x144 $x19)))
 (let (($x171 (and (and (and $x172 $x184) $x205) $x170)))
 (let (($x56 (= $x171 true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x152 (concat ?x11 (concat ?x135 (concat ?x48 ?x173)))))
 (let (($x133 (= ?x152 input.dst.llvm-%x)))
 (let (($x139 (= $x133 true)))
 (let (($x128 (= $x139 true)))
 (let (($x126 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x104 (= $x126 true)))
 (let (($x105 (= $x104 true)))
 (let (($x44 (= $x105 true)))
 (let (($x111 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x122 (not $x111)))
 (let (($x18 (= $x122 true)))
 (let (($x124 (= $x18 true)))
 (let (($x121 (= $x124 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x117)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x94 $x102)))
 (let (($x107 (and $x112 $x108)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x90 $x107)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x96)))))))
 (let (($x113 (and $x87 $x119)))
 (let (($x115 (= $x113 true)))
 (let (($x125 (= $x115 true)))
 (let (($x118 (= $x125 true)))
 (let (($x123 (and $x118 $x121)))
 (let (($x132 (and $x123 $x44)))
 (let (($x131 (and $x132 $x128)))
 (let (($x169 (and $x131 $x56)))
 (let (($x189 (and $x169 $x250)))
 (let (($x130 (and $x189 $x206)))
 (let (($x65 (and $x130 $x164)))
 (let (($x232 (and $x65 $x225)))
 (let (($x235 (and $x232 $x177)))
 (let (($x142 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x235)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x227 (and $x70 $x142)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x181 (and $x68 $x227)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x79 (and $x59 $x181)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x149 (and $x14 $x79)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x269 (and $x30 $x149)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x252 (and $x27 $x269)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x271 (and $x43 $x252)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x255 (and $x32 $x271)))
 (let (($x33 (= ?x86 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x218 (and $x33 $x255)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x221 (and $x9 $x218)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x267 (and $x7 $x221)))
 (let (($x151 (and $x20 $x267)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x165 (and $x17 $x151)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x159 (and $x35 $x165)))
 (let (($x58 (and $x20 $x159)))
 (let (($x22 (= input.spec-%var-y-1.L2%31%bbentry ?x64)))
 (let (($x61 (and $x22 $x58)))
 (let (($x161 (=> $x61 $x193)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x81 ?x8)))
 (let ((?x234 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x248 (= ?x234 ?x38)))
 (let (($x88 (= $x248 true)))
 (let (($x158 (= $x88 true)))
 (let (($x224 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x216 (= input.ind-%var1989X (_ bv0 32))))
 (let ((?x156 (ite $x216 ?x5 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x195 (= input.ind-%var1989X (_ bv1 32))))
 (let ((?x191 (ite $x195 ?x81 ?x156)))
 (let ((?x93 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1989X)))
 (let (($x160 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1989X)))
 (=> $x160 (= ?x93 ?x191)))))))))))
 ))
 (let (($x186 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x195 (= input.ind-%var1988X (_ bv1 32))))
 (let (($x216 (= input.ind-%var1988X (_ bv0 32))))
 (let (($x76 (or $x216 $x195)))
 (let (($x160 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1988X)))
 (= $x160 $x76))))))
 ))
 (let (($x219 (and $x186 $x224)))
 (let (($x272 (= $x219 true)))
 (let (($x179 (forall ((input.ind-%var1979X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x216 (= input.ind-%var1979X (_ bv0 32))))
 (let ((?x156 (ite $x216 ?x5 (_ bv0 32))))
 (let ((?x147 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1979X)))
 (let (($x221 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1979X)))
 (=> $x221 (= ?x147 ?x156))))))))
 ))
 (let (($x58 (forall ((input.ind-%var1978X (_ BitVec 32)) )(let (($x216 (= input.ind-%var1978X (_ bv0 32))))
 (let (($x221 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1978X)))
 (= $x221 $x216))))
 ))
 (let (($x244 (and $x58 $x179)))
 (let (($x110 (= $x244 true)))
 (let (($x149 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1970X)))
 (= $x155 false)))
 ))
 (let (($x235 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1971X)))
 (=> $x155 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1971X) (_ bv0 32)))))
 ))
 (let (($x269 (and $x235 $x149)))
 (let (($x252 (= $x269 true)))
 (let (($x134 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x216 (= input.ind-%var1965X (_ bv0 32))))
 (let ((?x156 (ite $x216 ?x5 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x195 (= input.ind-%var1965X (_ bv1 32))))
 (let ((?x191 (ite $x195 ?x81 ?x156)))
 (let ((?x190 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1965X)))
 (let (($x275 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1965X)))
 (=> $x275 (= ?x190 ?x191)))))))))))
 ))
 (let (($x206 (forall ((input.ind-%var1964X (_ BitVec 32)) )(let (($x195 (= input.ind-%var1964X (_ bv1 32))))
 (let (($x216 (= input.ind-%var1964X (_ bv0 32))))
 (let (($x76 (or $x216 $x195)))
 (let (($x275 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1964X)))
 (= $x275 $x76))))))
 ))
 (let (($x167 (and $x206 $x134)))
 (let (($x53 (= $x167 true)))
 (let (($x247 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x176 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x185 (=> $x176 $x247)))
 (let (($x140 (or $x36 $x13)))
 (let ((?x230 (ite $x140 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x230 (_ bv1 32))))
 (let (($x109 (= $x176 $x174)))
 (let (($x22 (= false false)))
 (let (($x201 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x146 (=> $x201 $x22)))
 (let (($x194 (= ?x230 (_ bv0 32))))
 (let (($x203 (= $x201 $x194)))
 (let (($x250 (and (and (and $x203 $x146) $x109) $x185)))
 (let (($x189 (= $x250 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x80 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x54 (ite $x80 ?x81 ?x47)))
 (let (($x264 (= input.spec-%tmpvar-16.L2%25%d.2 ?x54)))
 (let (($x202 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x23 (=> $x202 $x264)))
 (let (($x184 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x205 (=> $x184 $x22)))
 (let (($x19 (or $x51 $x80)))
 (let ((?x172 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (= ?x172 (_ bv0 32))))
 (let (($x20 (= $x184 $x214)))
 (let (($x200 (bvuge ?x172 (_ bv1 32))))
 (let (($x75 (= $x202 $x200)))
 (let (($x56 (and (and (and $x75 $x20) $x205) $x23)))
 (let (($x169 (= $x56 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x133 (concat ?x138 (concat ?x135 ?x136)))))
 (let (($x128 (= ?x139 input.dst.llvm-%x)))
 (let (($x131 (= $x128 true)))
 (let (($x143 (= $x131 true)))
 (let (($x104 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x105 (= $x104 true)))
 (let (($x44 (= $x105 true)))
 (let (($x132 (= $x44 true)))
 (let (($x18 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x124 (= $x18 true)))
 (let (($x121 (= $x124 true)))
 (let (($x123 (= $x121 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x107)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x99 $x117)))
 (let (($x113 (and $x108 $x119)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x69 $x113)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x92)))))))
 (let (($x125 (and $x91 $x115)))
 (let (($x118 (= $x125 true)))
 (let (($x120 (= $x118 true)))
 (let (($x111 (= $x120 true)))
 (let (($x126 (and $x111 $x123)))
 (let (($x137 (and $x126 $x132)))
 (let (($x144 (and $x137 $x143)))
 (let (($x238 (and $x144 $x169)))
 (let (($x67 (and $x238 $x189)))
 (let (($x62 (and $x67 $x53)))
 (let (($x271 (and $x62 $x252)))
 (let (($x262 (and $x271 $x110)))
 (let (($x258 (and $x262 $x272)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x103 (and true $x233)))
 (let (($x208 (and $x103 $x258)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x166 (and $x70 $x208)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x256 (and $x68 $x166)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x157 (and $x59 $x256)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x199 (and $x14 $x157)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x239 (and $x30 $x199)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x114 (and $x27 $x239)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x260 (and $x43 $x114)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x168 (and $x32 $x260)))
 (let (($x33 (= ?x81 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x197 (and $x33 $x168)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x220 (and $x9 $x197)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x52 (and $x7 $x220)))
 (let (($x265 (and $x22 $x52)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x55 (and $x17 $x265)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x254 (and $x35 $x55)))
 (let (($x263 (and $x22 $x254)))
 (let (($x64 (= input.spec-%var-y-1.L2%31%bbentry ?x54)))
 (let (($x274 (and $x64 $x263)))
 (let (($x106 (=> $x274 $x158)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x81 ?x8)))
 (let ((?x234 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let (($x248 (= ?x234 ?x38)))
 (let (($x88 (= $x248 true)))
 (let (($x158 (= $x88 true)))
 (let (($x224 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x216 (= input.ind-%var1989X (_ bv0 32))))
 (let ((?x156 (ite $x216 ?x5 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x195 (= input.ind-%var1989X (_ bv1 32))))
 (let ((?x191 (ite $x195 ?x81 ?x156)))
 (let ((?x93 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var1989X)))
 (let (($x160 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1989X)))
 (=> $x160 (= ?x93 ?x191)))))))))))
 ))
 (let (($x186 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x195 (= input.ind-%var1988X (_ bv1 32))))
 (let (($x216 (= input.ind-%var1988X (_ bv0 32))))
 (let (($x76 (or $x216 $x195)))
 (let (($x160 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var1988X)))
 (= $x160 $x76))))))
 ))
 (let (($x219 (and $x186 $x224)))
 (let (($x272 (= $x219 true)))
 (let (($x179 (forall ((input.ind-%var1979X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x216 (= input.ind-%var1979X (_ bv0 32))))
 (let ((?x156 (ite $x216 ?x5 (_ bv0 32))))
 (let ((?x147 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var1979X)))
 (let (($x221 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1979X)))
 (=> $x221 (= ?x147 ?x156))))))))
 ))
 (let (($x58 (forall ((input.ind-%var1978X (_ BitVec 32)) )(let (($x216 (= input.ind-%var1978X (_ bv0 32))))
 (let (($x221 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var1978X)))
 (= $x221 $x216))))
 ))
 (let (($x244 (and $x58 $x179)))
 (let (($x110 (= $x244 true)))
 (let (($x149 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1970X)))
 (= $x155 false)))
 ))
 (let (($x235 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var1971X)))
 (=> $x155 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var1971X) (_ bv0 32)))))
 ))
 (let (($x269 (and $x235 $x149)))
 (let (($x252 (= $x269 true)))
 (let (($x134 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x216 (= input.ind-%var1965X (_ bv0 32))))
 (let ((?x156 (ite $x216 ?x5 (_ bv0 32))))
 (let ((?x81 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x195 (= input.ind-%var1965X (_ bv1 32))))
 (let ((?x191 (ite $x195 ?x81 ?x156)))
 (let ((?x190 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var1965X)))
 (let (($x275 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1965X)))
 (=> $x275 (= ?x190 ?x191)))))))))))
 ))
 (let (($x206 (forall ((input.ind-%var1964X (_ BitVec 32)) )(let (($x195 (= input.ind-%var1964X (_ bv1 32))))
 (let (($x216 (= input.ind-%var1964X (_ bv0 32))))
 (let (($x76 (or $x216 $x195)))
 (let (($x275 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var1964X)))
 (= $x275 $x76))))))
 ))
 (let (($x167 (and $x206 $x134)))
 (let (($x53 (= $x167 true)))
 (let (($x247 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x176 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x185 (=> $x176 $x247)))
 (let (($x140 (or $x36 $x13)))
 (let ((?x230 (ite $x140 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x230 (_ bv1 32))))
 (let (($x109 (= $x176 $x174)))
 (let (($x22 (= false false)))
 (let (($x201 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x146 (=> $x201 $x22)))
 (let (($x194 (= ?x230 (_ bv0 32))))
 (let (($x203 (= $x201 $x194)))
 (let (($x250 (and (and (and $x203 $x146) $x109) $x185)))
 (let (($x189 (= $x250 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x80 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x54 (ite $x80 ?x81 ?x47)))
 (let (($x264 (= input.spec-%tmpvar-16.L2%25%d.2 ?x54)))
 (let (($x202 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x23 (=> $x202 $x264)))
 (let (($x184 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x205 (=> $x184 $x22)))
 (let (($x19 (or $x51 $x80)))
 (let ((?x172 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (= ?x172 (_ bv0 32))))
 (let (($x20 (= $x184 $x214)))
 (let (($x200 (bvuge ?x172 (_ bv1 32))))
 (let (($x75 (= $x202 $x200)))
 (let (($x56 (and (and (and $x75 $x20) $x205) $x23)))
 (let (($x169 (= $x56 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x133 (concat ?x138 (concat ?x135 ?x136)))))
 (let (($x128 (= ?x139 input.dst.llvm-%x)))
 (let (($x131 (= $x128 true)))
 (let (($x143 (= $x131 true)))
 (let (($x104 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x105 (= $x104 true)))
 (let (($x44 (= $x105 true)))
 (let (($x132 (= $x44 true)))
 (let (($x18 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x124 (= $x18 true)))
 (let (($x121 (= $x124 true)))
 (let (($x123 (= $x121 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x107)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x99 $x117)))
 (let (($x113 (and $x108 $x119)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x69 $x113)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x92)))))))
 (let (($x125 (and $x91 $x115)))
 (let (($x118 (= $x125 true)))
 (let (($x120 (= $x118 true)))
 (let (($x111 (= $x120 true)))
 (let (($x126 (and $x111 $x123)))
 (let (($x137 (and $x126 $x132)))
 (let (($x144 (and $x137 $x143)))
 (let (($x238 (and $x144 $x169)))
 (let (($x67 (and $x238 $x189)))
 (let (($x62 (and $x67 $x53)))
 (let (($x271 (and $x62 $x252)))
 (let (($x262 (and $x271 $x110)))
 (let (($x258 (and $x262 $x272)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x103 (and true $x233)))
 (let (($x208 (and $x103 $x258)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x166 (and $x70 $x208)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x256 (and $x68 $x166)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x157 (and $x59 $x256)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x199 (and $x14 $x157)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x239 (and $x30 $x199)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x114 (and $x27 $x239)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x260 (and $x43 $x114)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x168 (and $x32 $x260)))
 (let (($x33 (= ?x81 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x197 (and $x33 $x168)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x220 (and $x9 $x197)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x52 (and $x7 $x220)))
 (let (($x265 (and $x22 $x52)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x55 (and $x17 $x265)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x254 (and $x35 $x55)))
 (let (($x263 (and $x22 $x254)))
 (let (($x64 (= input.spec-%var-y-1.L2%31%bbentry ?x54)))
 (let (($x274 (and $x64 $x263)))
 (let (($x106 (=> $x274 $x158)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x150 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x150 ?x8)))
 (let ((?x163 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x141 (= ?x163 ?x38)))
 (let (($x73 (= $x141 true)))
 (let (($x74 (= $x73 true)))
 (let (($x215 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x167 (= input.ind-%var2083X (_ bv0 32))))
 (let ((?x58 (ite $x167 ?x5 (_ bv0 32))))
 (let ((?x150 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x134 (= input.ind-%var2083X (_ bv1 32))))
 (let ((?x147 (ite $x134 ?x150 ?x58)))
 (let ((?x142 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2083X)))
 (let (($x229 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2083X)))
 (=> $x229 (= ?x142 ?x147)))))))))))
 ))
 (let (($x270 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x134 (= input.ind-%var2082X (_ bv1 32))))
 (let (($x167 (= input.ind-%var2082X (_ bv0 32))))
 (let (($x53 (or $x167 $x134)))
 (let (($x229 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2082X)))
 (= $x229 $x53))))))
 ))
 (let (($x237 (and $x270 $x215)))
 (let (($x209 (= $x237 true)))
 (let (($x267 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x167 (= input.ind-%var2073X (_ bv0 32))))
 (let ((?x58 (ite $x167 ?x5 (_ bv0 32))))
 (let ((?x106 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2073X)))
 (let (($x265 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2073X)))
 (=> $x265 (= ?x106 ?x58))))))))
 ))
 (let (($x234 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x167 (= input.ind-%var2072X (_ bv0 32))))
 (let (($x265 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2072X)))
 (= $x265 $x167))))
 ))
 (let (($x193 (and $x234 $x267)))
 (let (($x82 (= $x193 true)))
 (let (($x114 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2064X)))
 (= $x186 false)))
 ))
 (let (($x166 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2065X)))
 (=> $x186 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2065X) (_ bv0 32)))))
 ))
 (let (($x260 (and $x166 $x114)))
 (let (($x168 (= $x260 true)))
 (let (($x179 (forall ((input.ind-%var2059X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x167 (= input.ind-%var2059X (_ bv0 32))))
 (let ((?x58 (ite $x167 ?x5 (_ bv0 32))))
 (let ((?x150 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x134 (= input.ind-%var2059X (_ bv1 32))))
 (let ((?x147 (ite $x134 ?x150 ?x58)))
 (let ((?x235 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2059X)))
 (let (($x206 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2059X)))
 (=> $x206 (= ?x235 ?x147)))))))))))
 ))
 (let (($x155 (forall ((input.ind-%var2058X (_ BitVec 32)) )(let (($x134 (= input.ind-%var2058X (_ bv1 32))))
 (let (($x167 (= input.ind-%var2058X (_ bv0 32))))
 (let (($x53 (or $x167 $x134)))
 (let (($x206 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2058X)))
 (= $x206 $x53))))))
 ))
 (let (($x244 (and $x155 $x179)))
 (let (($x110 (= $x244 true)))
 (let (($x185 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x109 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x250 (=> $x109 $x185)))
 (let (($x203 (or $x36 $x13)))
 (let ((?x146 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x146 (_ bv1 32))))
 (let (($x178 (= $x109 $x223)))
 (let (($x64 (= false false)))
 (let (($x194 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x174 (=> $x194 $x64)))
 (let (($x226 (= ?x146 (_ bv0 32))))
 (let (($x176 (= $x194 $x226)))
 (let (($x251 (and (and (and $x176 $x174) $x178) $x250)))
 (let (($x275 (= $x251 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x86 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x80 (ite $x86 ?x150 ?x47)))
 (let (($x23 (= input.spec-%tmpvar-16.L2%25%d.2 ?x80)))
 (let (($x75 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x56 (=> $x75 $x23)))
 (let (($x22 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x213 (=> $x22 $x64)))
 (let (($x184 (or $x51 $x86)))
 (let ((?x214 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x214 (_ bv0 32))))
 (let (($x171 (= $x22 $x205)))
 (let (($x20 (bvuge ?x214 (_ bv1 32))))
 (let (($x170 (= $x75 $x20)))
 (let (($x198 (and (and (and $x170 $x171) $x213) $x56)))
 (let (($x201 (= $x198 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x143 (concat ?x139 (concat ?x135 ?x138)))))
 (let (($x153 (= ?x144 input.dst.llvm-%x)))
 (let (($x202 (= $x153 true)))
 (let (($x19 (= $x202 true)))
 (let (($x132 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x137 (= $x132 true)))
 (let (($x21 (= $x137 true)))
 (let (($x152 (= $x21 true)))
 (let (($x121 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x123 (not $x121)))
 (let (($x126 (= $x123 true)))
 (let (($x104 (= $x126 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x113)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x112 $x107)))
 (let (($x125 (and $x119 $x115)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x71 $x125)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x95)))))))
 (let (($x120 (and $x102 $x118)))
 (let (($x111 (= $x120 true)))
 (let (($x122 (= $x111 true)))
 (let (($x18 (= $x122 true)))
 (let (($x44 (and $x18 $x105)))
 (let (($x133 (and $x44 $x152)))
 (let (($x172 (and $x133 $x19)))
 (let (($x140 (and $x172 $x201)))
 (let (($x216 (and $x140 $x275)))
 (let (($x262 (and $x216 $x110)))
 (let (($x197 (and $x262 $x168)))
 (let (($x249 (and $x197 $x82)))
 (let (($x46 (and $x249 $x209)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x103 (and true $x233)))
 (let (($x187 (and $x103 $x46)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x164 (and $x70 $x187)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x181 (and $x68 $x164)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x217 (and $x59 $x181)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x65 (and $x14 $x217)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x266 (and $x30 $x65)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x165 (and $x27 $x266)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x232 (and $x43 $x165)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x236 (and $x32 $x232)))
 (let (($x33 (= ?x150 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x98 (and $x33 $x236)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x246 (and $x9 $x98)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x245 (and $x7 $x246)))
 (let (($x182 (and $x64 $x245)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x192 (and $x17 $x182)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x228 (and $x35 $x192)))
 (let (($x241 (and $x64 $x228)))
 (let (($x54 (= input.spec-%var-y-1.L2%31%bbentry ?x80)))
 (let (($x83 (and $x54 $x241)))
 (let (($x212 (=> $x83 $x74)))
 (not $x212)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-t1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-12.L2%17%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%17%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L2%25%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%13%d () Bool)
(declare-fun input.spec-%tmpvar-11.L2%17%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%25%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-0.L2%23%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-17.L2%31%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-y-1.L2%31%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x36 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x36 ?x5 (_ bv0 32))))
 (let ((?x150 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x13 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x38 (ite $x13 ?x150 ?x8)))
 (let ((?x163 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let (($x141 (= ?x163 ?x38)))
 (let (($x73 (= $x141 true)))
 (let (($x74 (= $x73 true)))
 (let (($x215 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x167 (= input.ind-%var2083X (_ bv0 32))))
 (let ((?x58 (ite $x167 ?x5 (_ bv0 32))))
 (let ((?x150 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x134 (= input.ind-%var2083X (_ bv1 32))))
 (let ((?x147 (ite $x134 ?x150 ?x58)))
 (let ((?x142 (input.spec-%tmpvar-8.L2%13%d.1.1 input.ind-%var2083X)))
 (let (($x229 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2083X)))
 (=> $x229 (= ?x142 ?x147)))))))))))
 ))
 (let (($x270 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x134 (= input.ind-%var2082X (_ bv1 32))))
 (let (($x167 (= input.ind-%var2082X (_ bv0 32))))
 (let (($x53 (or $x167 $x134)))
 (let (($x229 (input.spec-%tmpvar-8.L2%13%d.0.1 input.ind-%var2082X)))
 (= $x229 $x53))))))
 ))
 (let (($x237 (and $x270 $x215)))
 (let (($x209 (= $x237 true)))
 (let (($x267 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x167 (= input.ind-%var2073X (_ bv0 32))))
 (let ((?x58 (ite $x167 ?x5 (_ bv0 32))))
 (let ((?x106 (input.spec-%tmpvar-4.L2%13%d.1.1 input.ind-%var2073X)))
 (let (($x265 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2073X)))
 (=> $x265 (= ?x106 ?x58))))))))
 ))
 (let (($x234 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x167 (= input.ind-%var2072X (_ bv0 32))))
 (let (($x265 (input.spec-%tmpvar-4.L2%13%d.0.1 input.ind-%var2072X)))
 (= $x265 $x167))))
 ))
 (let (($x193 (and $x234 $x267)))
 (let (($x82 (= $x193 true)))
 (let (($x114 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2064X)))
 (= $x186 false)))
 ))
 (let (($x166 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-0.L2%13%d.0.1 input.ind-%var2065X)))
 (=> $x186 (= (input.spec-%tmpvar-0.L2%13%d.1.1 input.ind-%var2065X) (_ bv0 32)))))
 ))
 (let (($x260 (and $x166 $x114)))
 (let (($x168 (= $x260 true)))
 (let (($x179 (forall ((input.ind-%var2059X (_ BitVec 32)) )(let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x167 (= input.ind-%var2059X (_ bv0 32))))
 (let ((?x58 (ite $x167 ?x5 (_ bv0 32))))
 (let ((?x150 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x134 (= input.ind-%var2059X (_ bv1 32))))
 (let ((?x147 (ite $x134 ?x150 ?x58)))
 (let ((?x235 (input.spec-%var-t1-0.L2%13%d.1.1 input.ind-%var2059X)))
 (let (($x206 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2059X)))
 (=> $x206 (= ?x235 ?x147)))))))))))
 ))
 (let (($x155 (forall ((input.ind-%var2058X (_ BitVec 32)) )(let (($x134 (= input.ind-%var2058X (_ bv1 32))))
 (let (($x167 (= input.ind-%var2058X (_ bv0 32))))
 (let (($x53 (or $x167 $x134)))
 (let (($x206 (input.spec-%var-t1-0.L2%13%d.0.1 input.ind-%var2058X)))
 (= $x206 $x53))))))
 ))
 (let (($x244 (and $x155 $x179)))
 (let (($x110 (= $x244 true)))
 (let (($x185 (= input.spec-%tmpvar-12.L2%17%d.2 ?x38)))
 (let (($x109 (bvuge input.spec-%tmpvar-12.L2%17%d.0 (_ bv1 32))))
 (let (($x250 (=> $x109 $x185)))
 (let (($x203 (or $x36 $x13)))
 (let ((?x146 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x146 (_ bv1 32))))
 (let (($x178 (= $x109 $x223)))
 (let (($x64 (= false false)))
 (let (($x194 (= input.spec-%tmpvar-12.L2%17%d.0 (_ bv0 32))))
 (let (($x174 (=> $x194 $x64)))
 (let (($x226 (= ?x146 (_ bv0 32))))
 (let (($x176 (= $x194 $x226)))
 (let (($x251 (and (and (and $x176 $x174) $x178) $x250)))
 (let (($x275 (= $x251 true)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x47 (ite $x51 ?x5 (_ bv0 32))))
 (let (($x86 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x80 (ite $x86 ?x150 ?x47)))
 (let (($x23 (= input.spec-%tmpvar-16.L2%25%d.2 ?x80)))
 (let (($x75 (bvuge input.spec-%tmpvar-16.L2%25%d.0 (_ bv1 32))))
 (let (($x56 (=> $x75 $x23)))
 (let (($x22 (= input.spec-%tmpvar-16.L2%25%d.0 (_ bv0 32))))
 (let (($x213 (=> $x22 $x64)))
 (let (($x184 (or $x51 $x86)))
 (let ((?x214 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x214 (_ bv0 32))))
 (let (($x171 (= $x22 $x205)))
 (let (($x20 (bvuge ?x214 (_ bv1 32))))
 (let (($x170 (= $x75 $x20)))
 (let (($x198 (and (and (and $x170 $x171) $x213) $x56)))
 (let (($x201 (= $x198 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x143 (concat ?x139 (concat ?x135 ?x138)))))
 (let (($x153 (= ?x144 input.dst.llvm-%x)))
 (let (($x202 (= $x153 true)))
 (let (($x19 (= $x202 true)))
 (let (($x132 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x137 (= $x132 true)))
 (let (($x21 (= $x137 true)))
 (let (($x152 (= $x21 true)))
 (let (($x121 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x123 (not $x121)))
 (let (($x126 (= $x123 true)))
 (let (($x104 (= $x126 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x113)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x112 $x107)))
 (let (($x125 (and $x119 $x115)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x71 $x125)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x95)))))))
 (let (($x120 (and $x102 $x118)))
 (let (($x111 (= $x120 true)))
 (let (($x122 (= $x111 true)))
 (let (($x18 (= $x122 true)))
 (let (($x44 (and $x18 $x105)))
 (let (($x133 (and $x44 $x152)))
 (let (($x172 (and $x133 $x19)))
 (let (($x140 (and $x172 $x201)))
 (let (($x216 (and $x140 $x275)))
 (let (($x262 (and $x216 $x110)))
 (let (($x197 (and $x262 $x168)))
 (let (($x249 (and $x197 $x82)))
 (let (($x46 (and $x249 $x209)))
 (let (($x233 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x103 (and true $x233)))
 (let (($x187 (and $x103 $x46)))
 (let (($x70 (= input.spec-%tmpvar-10.L2%13%d $x233)))
 (let (($x164 (and $x70 $x187)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L2%17%d)))
 (let (($x181 (and $x68 $x164)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-15.L2%25%d)))
 (let (($x217 (and $x59 $x181)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-1.L2%13%d)))
 (let (($x65 (and $x14 $x217)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-2.L2%13%d)))
 (let (($x266 (and $x30 $x65)))
 (let (($x27 (= ?x5 input.spec-%tmpvar-3.L2%13%d)))
 (let (($x165 (and $x27 $x266)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-5.L2%13%d)))
 (let (($x232 (and $x43 $x165)))
 (let (($x32 (= (_ bv12 32) input.spec-%tmpvar-6.L2%13%d)))
 (let (($x236 (and $x32 $x232)))
 (let (($x33 (= ?x150 input.spec-%tmpvar-7.L2%13%d)))
 (let (($x98 (and $x33 $x236)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L2%13%d)))
 (let (($x246 (and $x9 $x98)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-13.L2%23%bbentry)))
 (let (($x245 (and $x7 $x246)))
 (let (($x182 (and $x64 $x245)))
 (let (($x17 (= input.spec-%var-y-0.L2%23%bbentry ?x38)))
 (let (($x192 (and $x17 $x182)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-17.L2%31%bbentry)))
 (let (($x228 (and $x35 $x192)))
 (let (($x241 (and $x64 $x228)))
 (let (($x54 (= input.spec-%var-y-1.L2%31%bbentry ?x80)))
 (let (($x83 (and $x54 $x241)))
 (let (($x212 (=> $x83 $x74)))
 (not $x212)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492176/query
