==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x5 $x6)))
 (let (($x17 (and $x7 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x5 $x6)))
 (let (($x17 (and $x7 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (= true false)))
 (let (($x146 (= $x145 true)))
 (let (($x138 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x124 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x124 false)))
 ))
 (let (($x139 (and $x128 $x138)))
 (let (($x140 (= $x139 true)))
 (let (($x115 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x101)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x92 $x94)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x91 $x95)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x64 $x74)))
 (let (($x88 (not $x87)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x83 $x61)))
 (let (($x58 (and (not $x13) $x88)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x47 $x20)))
 (let (($x26 (not $x16)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x41 $x45)))
 (let (($x75 (and (not $x18) $x26)))
 (let (($x108 (and (and (and (and (and (and $x75 $x58) $x57) $x59) $x96) $x98) $x100)))
 (let (($x109 (and $x108 $x102)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x78)))
 (let (($x82 (or false (or false (and (and true (or $x62 $x80)) (or $x84 $x12))))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x110 (and $x53 $x109)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x85 (concat ?x60 (concat ?x52 ?x19)))))
 (let (($x81 (= ?x22 input.dst.llvm-%m)))
 (let (($x67 (= $x81 true)))
 (let (($x46 (= $x67 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x79 (concat ?x5 (concat ?x77 ?x30)))))
 (let (($x7 (= ?x86 input.dst.llvm-%n)))
 (let (($x9 (= $x7 true)))
 (let (($x23 (= $x9 true)))
 (let (($x49 (and $x23 $x46)))
 (let (($x114 (and $x49 $x113)))
 (let (($x119 (and $x114 $x118)))
 (let (($x141 (and $x119 $x140)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and $x34 $x141)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x14 $x142)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x55 $x143)))
 (let (($x147 (=> $x144 $x146)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (= true false)))
 (let (($x146 (= $x145 true)))
 (let (($x138 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x124 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x124 false)))
 ))
 (let (($x139 (and $x128 $x138)))
 (let (($x140 (= $x139 true)))
 (let (($x115 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x101)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x92 $x94)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x91 $x95)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x64 $x74)))
 (let (($x88 (not $x87)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x83 $x61)))
 (let (($x58 (and (not $x13) $x88)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x47 $x20)))
 (let (($x26 (not $x16)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x41 $x45)))
 (let (($x75 (and (not $x18) $x26)))
 (let (($x108 (and (and (and (and (and (and $x75 $x58) $x57) $x59) $x96) $x98) $x100)))
 (let (($x109 (and $x108 $x102)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x78)))
 (let (($x82 (or false (or false (and (and true (or $x62 $x80)) (or $x84 $x12))))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x110 (and $x53 $x109)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x85 (concat ?x60 (concat ?x52 ?x19)))))
 (let (($x81 (= ?x22 input.dst.llvm-%m)))
 (let (($x67 (= $x81 true)))
 (let (($x46 (= $x67 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x79 (concat ?x5 (concat ?x77 ?x30)))))
 (let (($x7 (= ?x86 input.dst.llvm-%n)))
 (let (($x9 (= $x7 true)))
 (let (($x23 (= $x9 true)))
 (let (($x49 (and $x23 $x46)))
 (let (($x114 (and $x49 $x113)))
 (let (($x119 (and $x114 $x118)))
 (let (($x141 (and $x119 $x140)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and $x34 $x141)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x14 $x142)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x55 $x143)))
 (let (($x147 (=> $x144 $x146)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1be5ee7c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1303f310)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1303f313)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1be5ee7f)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1be5ee7c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1303f310)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x110 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x152 (=> $x110 true)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x134 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x144 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x144 false)))
 ))
 (let (($x130 (and $x148 $x134)))
 (let (($x135 (= $x130 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x132 (concat ?x124 (concat ?x118 ?x116)))))
 (let (($x137 (= ?x136 input.dst.llvm-%m)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let (($x98 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x107 (= $x98 true)))
 (let (($x99 (= $x107 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x58)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x87)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x83)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x75 $x61)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x26 $x13)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x82 $x53)))
 (let (($x45 (not $x41)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x28 $x65)))
 (let (($x8 (and (not $x66) $x45)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x71 $x32)))
 (let (($x84 (not $x39)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x85 $x63)))
 (let (($x12 (and (not $x80) $x84)))
 (let (($x92 (and (and (and (and (and (and $x12 $x8) $x20) $x16) $x90) $x74) $x88)))
 (let (($x93 (and $x92 $x103)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x78 (or false (or false (and (and true (or $x31 $x22)) (or $x49 $x11))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x94 (and $x50 $x93)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let (($x106 (= $x96 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x86 (concat ?x77 (concat ?x33 ?x17)))))
 (let (($x9 (= ?x44 input.dst.llvm-%n)))
 (let (($x23 (= $x9 true)))
 (let (($x54 (= $x23 true)))
 (let (($x97 (and $x54 $x106)))
 (let (($x108 (and $x97 $x100)))
 (let (($x114 (and $x108 $x113)))
 (let (($x140 (and $x114 $x139)))
 (let (($x121 (and $x140 $x135)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x6 $x121)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x14 $x149)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x151 (and $x10 $x150)))
 (let (($x155 (=> $x151 $x154)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x110 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x152 (=> $x110 true)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x134 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x144 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x144 false)))
 ))
 (let (($x130 (and $x148 $x134)))
 (let (($x135 (= $x130 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x132 (concat ?x124 (concat ?x118 ?x116)))))
 (let (($x137 (= ?x136 input.dst.llvm-%m)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let (($x98 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x107 (= $x98 true)))
 (let (($x99 (= $x107 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x58)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x87)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x83)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x75 $x61)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x26 $x13)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x82 $x53)))
 (let (($x45 (not $x41)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x28 $x65)))
 (let (($x8 (and (not $x66) $x45)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x71 $x32)))
 (let (($x84 (not $x39)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x85 $x63)))
 (let (($x12 (and (not $x80) $x84)))
 (let (($x92 (and (and (and (and (and (and $x12 $x8) $x20) $x16) $x90) $x74) $x88)))
 (let (($x93 (and $x92 $x103)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x78 (or false (or false (and (and true (or $x31 $x22)) (or $x49 $x11))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x94 (and $x50 $x93)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let (($x106 (= $x96 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x86 (concat ?x77 (concat ?x33 ?x17)))))
 (let (($x9 (= ?x44 input.dst.llvm-%n)))
 (let (($x23 (= $x9 true)))
 (let (($x54 (= $x23 true)))
 (let (($x97 (and $x54 $x106)))
 (let (($x108 (and $x97 $x100)))
 (let (($x114 (and $x108 $x113)))
 (let (($x140 (and $x114 $x139)))
 (let (($x121 (and $x140 $x135)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x6 $x121)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x14 $x149)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x151 (and $x10 $x150)))
 (let (($x155 (=> $x151 $x154)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x131 (= $x146 true)))
 (let (($x115 (forall ((input.ind-%var73X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var73X)))
 (=> $x126 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var73X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var72X)))
 (= $x126 false)))
 ))
 (let (($x51 (and $x121 $x115)))
 (let (($x145 (= $x51 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x138 (concat ?x127 (concat ?x118 ?x124)))))
 (let (($x140 (= ?x139 input.dst.llvm-%n)))
 (let (($x143 (= $x140 true)))
 (let (($x144 (= $x143 true)))
 (let (($x112 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (= $x112 true)))
 (let (($x114 (= $x113 true)))
 (let (($x128 (= $x114 true)))
 (let (($x108 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x101 (= $x108 true)))
 (let (($x102 (= $x101 true)))
 (let (($x109 (= $x102 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x91)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x64)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x26 $x83)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x59 $x61)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x53 $x41)))
 (let (($x8 (not $x45)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x66 $x18)))
 (let (($x47 (and (not $x82) $x8)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x32 $x39)))
 (let (($x12 (not $x84)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x62 $x52)))
 (let (($x65 (and (not $x71) $x12)))
 (let (($x94 (and (and (and (and (and (and $x65 $x47) $x20) $x16) $x13) $x105) $x74)))
 (let (($x95 (and $x94 $x87)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x63 (or false (or false (and (and true (or $x81 $x67)) (or $x89 $x72))))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x96 (and $x73 $x95)))
 (let (($x106 (= $x96 true)))
 (let (($x97 (= $x106 true)))
 (let (($x98 (= $x97 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x44 (concat ?x33 (concat ?x5 ?x24)))))
 (let (($x23 (= ?x7 input.dst.llvm-%m)))
 (let (($x54 (= $x23 true)))
 (let (($x60 (= $x54 true)))
 (let (($x107 (and $x60 $x98)))
 (let (($x110 (and $x107 $x109)))
 (let (($x132 (and $x110 $x128)))
 (let (($x147 (and $x132 $x144)))
 (let (($x133 (and $x147 $x145)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (and $x48 $x133)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x43 $x37)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x142 (and $x36 $x141)))
 (let (($x27 (=> $x142 $x131)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x131 (= $x146 true)))
 (let (($x115 (forall ((input.ind-%var73X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var73X)))
 (=> $x126 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var73X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var72X)))
 (= $x126 false)))
 ))
 (let (($x51 (and $x121 $x115)))
 (let (($x145 (= $x51 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x138 (concat ?x127 (concat ?x118 ?x124)))))
 (let (($x140 (= ?x139 input.dst.llvm-%n)))
 (let (($x143 (= $x140 true)))
 (let (($x144 (= $x143 true)))
 (let (($x112 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (= $x112 true)))
 (let (($x114 (= $x113 true)))
 (let (($x128 (= $x114 true)))
 (let (($x108 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x101 (= $x108 true)))
 (let (($x102 (= $x101 true)))
 (let (($x109 (= $x102 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x91)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x64)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x26 $x83)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x59 $x61)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x53 $x41)))
 (let (($x8 (not $x45)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x66 $x18)))
 (let (($x47 (and (not $x82) $x8)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x32 $x39)))
 (let (($x12 (not $x84)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x62 $x52)))
 (let (($x65 (and (not $x71) $x12)))
 (let (($x94 (and (and (and (and (and (and $x65 $x47) $x20) $x16) $x13) $x105) $x74)))
 (let (($x95 (and $x94 $x87)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x63 (or false (or false (and (and true (or $x81 $x67)) (or $x89 $x72))))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x96 (and $x73 $x95)))
 (let (($x106 (= $x96 true)))
 (let (($x97 (= $x106 true)))
 (let (($x98 (= $x97 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x44 (concat ?x33 (concat ?x5 ?x24)))))
 (let (($x23 (= ?x7 input.dst.llvm-%m)))
 (let (($x54 (= $x23 true)))
 (let (($x60 (= $x54 true)))
 (let (($x107 (and $x60 $x98)))
 (let (($x110 (and $x107 $x109)))
 (let (($x132 (and $x110 $x128)))
 (let (($x147 (and $x132 $x144)))
 (let (($x133 (and $x147 $x145)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (and $x48 $x133)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x43 $x37)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x142 (and $x36 $x141)))
 (let (($x27 (=> $x142 $x131)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00044d0c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00020d88)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00044d0f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00020d8b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00044d0c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x01010100)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00020d88)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00020d88) #x00
      #x01))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6d14fefc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffef8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffefb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6d14feff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffef8)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6d14fefc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffef9) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x150)))
 (let (($x56 (= ?x155 input.dst.llvm-%n)))
 (let (($x129 (= $x56 true)))
 (let (($x123 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x115 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x37 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x115 false)))
 ))
 (let (($x134 (and $x37 $x123)))
 (let (($x153 (= $x134 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x144 (concat ?x139 (concat ?x124 ?x117)))))
 (let (($x122 (= ?x147 input.dst.llvm-%n)))
 (let (($x126 (= $x122 true)))
 (let (($x135 (= $x126 true)))
 (let (($x128 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x132 (= $x128 true)))
 (let (($x137 (= $x132 true)))
 (let (($x138 (= $x137 true)))
 (let (($x109 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x64)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x105)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x26 $x83)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x59 $x61)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x45 $x8)))
 (let (($x88 (not $x47)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x57 $x53)))
 (let (($x92 (and (not $x41) $x88)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x84 $x12)))
 (let (($x66 (not $x65)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x19 $x68)))
 (let (($x82 (and (not $x39) $x66)))
 (let (($x106 (and (and (and (and (and (and $x82 $x92) $x104) $x58) $x13) $x90) $x93)))
 (let (($x97 (and $x106 $x74)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x71 (or false (or false (and (and true (or $x11 $x89)) (or $x85 $x63))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x98 (and $x32 $x97)))
 (let (($x107 (= $x98 true)))
 (let (($x99 (= $x107 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x9 (concat ?x24 (concat ?x79 ?x44)))))
 (let (($x60 (= ?x23 input.dst.llvm-%m)))
 (let (($x15 (= $x60 true)))
 (let (($x31 (= $x15 true)))
 (let (($x108 (and $x31 $x100)))
 (let (($x113 (and $x108 $x112)))
 (let (($x119 (and $x113 $x138)))
 (let (($x121 (and $x119 $x135)))
 (let (($x151 (and $x121 $x153)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x148 (and $x48 $x151)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x125 (and $x29 $x148)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x14 $x125)))
 (let (($x157 (=> $x130 $x129)))
 (not $x157)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x150)))
 (let (($x56 (= ?x155 input.dst.llvm-%n)))
 (let (($x129 (= $x56 true)))
 (let (($x123 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x115 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x37 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x115 false)))
 ))
 (let (($x134 (and $x37 $x123)))
 (let (($x153 (= $x134 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x144 (concat ?x139 (concat ?x124 ?x117)))))
 (let (($x122 (= ?x147 input.dst.llvm-%n)))
 (let (($x126 (= $x122 true)))
 (let (($x135 (= $x126 true)))
 (let (($x128 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x132 (= $x128 true)))
 (let (($x137 (= $x132 true)))
 (let (($x138 (= $x137 true)))
 (let (($x109 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x64)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x105)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x26 $x83)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x59 $x61)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x45 $x8)))
 (let (($x88 (not $x47)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x57 $x53)))
 (let (($x92 (and (not $x41) $x88)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x84 $x12)))
 (let (($x66 (not $x65)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x19 $x68)))
 (let (($x82 (and (not $x39) $x66)))
 (let (($x106 (and (and (and (and (and (and $x82 $x92) $x104) $x58) $x13) $x90) $x93)))
 (let (($x97 (and $x106 $x74)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x71 (or false (or false (and (and true (or $x11 $x89)) (or $x85 $x63))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x98 (and $x32 $x97)))
 (let (($x107 (= $x98 true)))
 (let (($x99 (= $x107 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x9 (concat ?x24 (concat ?x79 ?x44)))))
 (let (($x60 (= ?x23 input.dst.llvm-%m)))
 (let (($x15 (= $x60 true)))
 (let (($x31 (= $x15 true)))
 (let (($x108 (and $x31 $x100)))
 (let (($x113 (and $x108 $x112)))
 (let (($x119 (and $x113 $x138)))
 (let (($x121 (and $x119 $x135)))
 (let (($x151 (and $x121 $x153)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x148 (and $x48 $x151)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x125 (and $x29 $x148)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x14 $x125)))
 (let (($x157 (=> $x130 $x129)))
 (not $x157)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x152 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x145 (bvmul ?x152 (_ bv256 16))))
 (let (($x142 (= ?x145 ?x120)))
 (let (($x34 (= $x142 true)))
 (let (($x158 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x70 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x151 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x70 false)))
 ))
 (let (($x80 (and $x151 $x158)))
 (let (($x21 (= $x80 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x126 (concat ?x140 (concat ?x124 ?x139)))))
 (let (($x121 (= ?x135 input.dst.llvm-%m)))
 (let (($x76 (= $x121 true)))
 (let (($x115 (= $x76 true)))
 (let (($x137 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x138 (= $x137 true)))
 (let (($x119 (= $x138 true)))
 (let (($x143 (= $x119 true)))
 (let (($x112 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x113 (= $x112 true)))
 (let (($x114 (= $x113 true)))
 (let (($x128 (= $x114 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x96)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x103)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x59 $x75)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x87 $x83)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x8 $x47)))
 (let (($x92 (not $x88)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x41 $x20)))
 (let (($x104 (and (not $x45) $x92)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x12 $x65)))
 (let (($x82 (not $x66)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x28 $x67)))
 (let (($x53 (and (not $x84) $x82)))
 (let (($x98 (and (and (and (and (and (and $x53 $x104) $x16) $x58) $x61) $x95) $x90)))
 (let (($x107 (and $x98 $x105)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x68 (or false (or false (and (and true (or $x72 $x78)) (or $x62 $x52))))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x68)))
 (let (($x99 (and $x18 $x107)))
 (let (($x100 (= $x99 true)))
 (let (($x108 (= $x100 true)))
 (let (($x101 (= $x108 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x23 (concat ?x79 (concat ?x86 ?x7)))))
 (let (($x15 (= ?x54 input.dst.llvm-%n)))
 (let (($x31 (= $x15 true)))
 (let (($x81 (= $x31 true)))
 (let (($x102 (and $x81 $x101)))
 (let (($x132 (and $x102 $x128)))
 (let (($x144 (and $x132 $x143)))
 (let (($x133 (and $x144 $x115)))
 (let (($x127 (and $x133 $x21)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x25 $x127)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x27 (and $x35 $x51)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x36 $x27)))
 (let (($x149 (=> $x146 $x34)))
 (not $x149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x152 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x145 (bvmul ?x152 (_ bv256 16))))
 (let (($x142 (= ?x145 ?x120)))
 (let (($x34 (= $x142 true)))
 (let (($x158 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x70 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x151 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x70 false)))
 ))
 (let (($x80 (and $x151 $x158)))
 (let (($x21 (= $x80 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x126 (concat ?x140 (concat ?x124 ?x139)))))
 (let (($x121 (= ?x135 input.dst.llvm-%m)))
 (let (($x76 (= $x121 true)))
 (let (($x115 (= $x76 true)))
 (let (($x137 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x138 (= $x137 true)))
 (let (($x119 (= $x138 true)))
 (let (($x143 (= $x119 true)))
 (let (($x112 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x113 (= $x112 true)))
 (let (($x114 (= $x113 true)))
 (let (($x128 (= $x114 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x96)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x103)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x59 $x75)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x87 $x83)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x8 $x47)))
 (let (($x92 (not $x88)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x41 $x20)))
 (let (($x104 (and (not $x45) $x92)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x12 $x65)))
 (let (($x82 (not $x66)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x28 $x67)))
 (let (($x53 (and (not $x84) $x82)))
 (let (($x98 (and (and (and (and (and (and $x53 $x104) $x16) $x58) $x61) $x95) $x90)))
 (let (($x107 (and $x98 $x105)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x68 (or false (or false (and (and true (or $x72 $x78)) (or $x62 $x52))))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x68)))
 (let (($x99 (and $x18 $x107)))
 (let (($x100 (= $x99 true)))
 (let (($x108 (= $x100 true)))
 (let (($x101 (= $x108 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x23 (concat ?x79 (concat ?x86 ?x7)))))
 (let (($x15 (= ?x54 input.dst.llvm-%n)))
 (let (($x31 (= $x15 true)))
 (let (($x81 (= $x31 true)))
 (let (($x102 (and $x81 $x101)))
 (let (($x132 (and $x102 $x128)))
 (let (($x144 (and $x132 $x143)))
 (let (($x133 (and $x144 $x115)))
 (let (($x127 (and $x133 $x21)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x25 $x127)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x27 (and $x35 $x51)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x36 $x27)))
 (let (($x149 (=> $x146 $x34)))
 (not $x149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x131 (= (_ bv0 2) ?x37)))
 (let (($x134 (= $x131 true)))
 (let (($x159 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var107X)))
 (=> $x158 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var107X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var106X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var106X)))
 (= $x158 false)))
 ))
 (let (($x6 (and $x51 $x159)))
 (let (($x22 (= $x6 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x115 (concat ?x135 (concat ?x139 ?x118)))))
 (let (($x38 (= ?x133 input.dst.llvm-%m)))
 (let (($x70 (= $x38 true)))
 (let (($x153 (= $x70 true)))
 (let (($x143 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x144 (= $x143 true)))
 (let (($x122 (= $x144 true)))
 (let (($x126 (= $x122 true)))
 (let (($x112 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (= $x112 true)))
 (let (($x114 (= $x113 true)))
 (let (($x128 (= $x114 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x97)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x13)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x87 $x26)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x64 $x75)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x47 $x88)))
 (let (($x104 (not $x92)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x45 $x94)))
 (let (($x91 (and (not $x8) $x104)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x65 $x66)))
 (let (($x53 (not $x82)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x39 $x49)))
 (let (($x20 (and (not $x12) $x53)))
 (let (($x99 (and (and (and (and (and (and $x20 $x91) $x106) $x58) $x83) $x74) $x95)))
 (let (($x100 (and $x99 $x103)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x67 (or false (or false (and (and true (or $x50 $x63)) (or $x32 $x19))))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x108 (and $x57 $x100)))
 (let (($x101 (= $x108 true)))
 (let (($x102 (= $x101 true)))
 (let (($x110 (= $x102 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x54 (concat ?x86 (concat ?x24 ?x69)))))
 (let (($x31 (= ?x60 input.dst.llvm-%n)))
 (let (($x81 (= $x31 true)))
 (let (($x46 (= $x81 true)))
 (let (($x111 (and $x46 $x110)))
 (let (($x132 (and $x111 $x128)))
 (let (($x116 (and $x132 $x126)))
 (let (($x151 (and $x116 $x153)))
 (let (($x136 (and $x151 $x22)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (and $x43 $x136)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x123 (and $x10 $x30)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x109 $x123)))
 (let (($x155 (=> $x150 $x134)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x131 (= (_ bv0 2) ?x37)))
 (let (($x134 (= $x131 true)))
 (let (($x159 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var107X)))
 (=> $x158 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var107X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var106X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var106X)))
 (= $x158 false)))
 ))
 (let (($x6 (and $x51 $x159)))
 (let (($x22 (= $x6 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x115 (concat ?x135 (concat ?x139 ?x118)))))
 (let (($x38 (= ?x133 input.dst.llvm-%m)))
 (let (($x70 (= $x38 true)))
 (let (($x153 (= $x70 true)))
 (let (($x143 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x144 (= $x143 true)))
 (let (($x122 (= $x144 true)))
 (let (($x126 (= $x122 true)))
 (let (($x112 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (= $x112 true)))
 (let (($x114 (= $x113 true)))
 (let (($x128 (= $x114 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x97)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x13)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x87 $x26)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x64 $x75)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x47 $x88)))
 (let (($x104 (not $x92)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x45 $x94)))
 (let (($x91 (and (not $x8) $x104)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x65 $x66)))
 (let (($x53 (not $x82)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x39 $x49)))
 (let (($x20 (and (not $x12) $x53)))
 (let (($x99 (and (and (and (and (and (and $x20 $x91) $x106) $x58) $x83) $x74) $x95)))
 (let (($x100 (and $x99 $x103)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x67 (or false (or false (and (and true (or $x50 $x63)) (or $x32 $x19))))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x108 (and $x57 $x100)))
 (let (($x101 (= $x108 true)))
 (let (($x102 (= $x101 true)))
 (let (($x110 (= $x102 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x54 (concat ?x86 (concat ?x24 ?x69)))))
 (let (($x31 (= ?x60 input.dst.llvm-%n)))
 (let (($x81 (= $x31 true)))
 (let (($x46 (= $x81 true)))
 (let (($x111 (and $x46 $x110)))
 (let (($x132 (and $x111 $x128)))
 (let (($x116 (and $x132 $x126)))
 (let (($x151 (and $x116 $x153)))
 (let (($x136 (and $x151 $x22)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (and $x43 $x136)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x123 (and $x10 $x30)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x109 $x123)))
 (let (($x155 (=> $x150 $x134)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 112 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x21)))
 (let (($x146 (= ?x120 input.spec-%var-n-1)))
 (let (($x142 (= $x146 true)))
 (let (($x11 (forall ((input.ind-%var113X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var113X)))
 (=> $x149 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var113X) (_ bv0 32)))))
 ))
 (let (($x136 (forall ((input.ind-%var112X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var112X)))
 (= $x149 false)))
 ))
 (let (($x140 (and $x136 $x11)))
 (let (($x17 (= $x140 true)))
 (let (($x153 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x151 (= $x153 true)))
 (let (($x157 (= $x151 true)))
 (let (($x158 (= $x157 true)))
 (let (($x117 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x121 (= $x117 true)))
 (let (($x133 (= $x121 true)))
 (let (($x38 (= $x133 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x132)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x114)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (and $x108 $x102)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x100 $x110)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x61 $x74)))
 (let (($x13 (not $x107)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x75 $x83)))
 (let (($x99 (and (not $x105) $x13)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x58 $x96)))
 (let (($x87 (not $x64)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x39 $x49)))
 (let (($x26 (and (not $x98) $x87)))
 (let (($x126 (and (and (and (and (and (and $x26 $x99) $x97) $x103) $x111) $x113) $x128)))
 (let (($x116 (and $x126 $x137)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x90 (or false (or false (and (and true (or $x53 $x20)) (or $x47 $x88))))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x76 (and $x106 $x116)))
 (let (($x115 (= $x76 true)))
 (let (($x147 (= $x115 true)))
 (let (($x135 (= $x147 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x32 (concat ?x62 (concat ?x50 ?x89)))))
 (let (($x68 (= ?x71 input.dst.llvm-%m)))
 (let (($x18 (= $x68 true)))
 (let (($x28 (= $x18 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x60 (concat ?x24 (concat ?x79 ?x44)))))
 (let (($x81 (= ?x15 input.dst.llvm-%n)))
 (let (($x46 (= $x81 true)))
 (let (($x42 (= $x46 true)))
 (let (($x67 (and $x42 $x28)))
 (let (($x124 (and $x67 $x135)))
 (let (($x70 (and $x124 $x38)))
 (let (($x127 (and $x70 $x158)))
 (let (($x80 (and $x127 $x17)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (and $x29 $x80)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x40 $x145)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x36 $x152)))
 (let (($x148 (=> $x154 $x142)))
 (not $x148)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x21)))
 (let (($x146 (= ?x120 input.spec-%var-n-1)))
 (let (($x142 (= $x146 true)))
 (let (($x11 (forall ((input.ind-%var113X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var113X)))
 (=> $x149 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var113X) (_ bv0 32)))))
 ))
 (let (($x136 (forall ((input.ind-%var112X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var112X)))
 (= $x149 false)))
 ))
 (let (($x140 (and $x136 $x11)))
 (let (($x17 (= $x140 true)))
 (let (($x153 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x151 (= $x153 true)))
 (let (($x157 (= $x151 true)))
 (let (($x158 (= $x157 true)))
 (let (($x117 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x121 (= $x117 true)))
 (let (($x133 (= $x121 true)))
 (let (($x38 (= $x133 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x132)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x114)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (and $x108 $x102)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x100 $x110)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x61 $x74)))
 (let (($x13 (not $x107)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x75 $x83)))
 (let (($x99 (and (not $x105) $x13)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x58 $x96)))
 (let (($x87 (not $x64)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x39 $x49)))
 (let (($x26 (and (not $x98) $x87)))
 (let (($x126 (and (and (and (and (and (and $x26 $x99) $x97) $x103) $x111) $x113) $x128)))
 (let (($x116 (and $x126 $x137)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x90 (or false (or false (and (and true (or $x53 $x20)) (or $x47 $x88))))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x76 (and $x106 $x116)))
 (let (($x115 (= $x76 true)))
 (let (($x147 (= $x115 true)))
 (let (($x135 (= $x147 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x32 (concat ?x62 (concat ?x50 ?x89)))))
 (let (($x68 (= ?x71 input.dst.llvm-%m)))
 (let (($x18 (= $x68 true)))
 (let (($x28 (= $x18 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x15 (concat ?x60 (concat ?x24 (concat ?x79 ?x44)))))
 (let (($x81 (= ?x15 input.dst.llvm-%n)))
 (let (($x46 (= $x81 true)))
 (let (($x42 (= $x46 true)))
 (let (($x67 (and $x42 $x28)))
 (let (($x124 (and $x67 $x135)))
 (let (($x70 (and $x124 $x38)))
 (let (($x127 (and $x70 $x158)))
 (let (($x80 (and $x127 $x17)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (and $x29 $x80)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x40 $x145)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x36 $x152)))
 (let (($x148 (=> $x154 $x142)))
 (not $x148)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x156 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x6 (= $x156 true)))
 (let (($x131 (= $x6 true)))
 (let (($x56 (forall ((input.ind-%var119X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var119X)))
 (=> $x125 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var119X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var118X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var118X)))
 (= $x125 false)))
 ))
 (let (($x57 (and $x80 $x56)))
 (let (($x72 (= $x57 true)))
 (let (($x158 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x127 (= $x158 true)))
 (let (($x34 (= $x127 true)))
 (let (($x149 (= $x34 true)))
 (let (($x38 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x70 (= $x38 true)))
 (let (($x153 (= $x70 true)))
 (let (($x151 (= $x153 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x114)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x113)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (and $x108 $x102)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x100 $x110)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x107 $x13)))
 (let (($x138 (not $x99)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x95 $x61)))
 (let (($x119 (and (not $x74) $x138)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x64 $x87)))
 (let (($x75 (not $x26)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x65 $x82)))
 (let (($x105 (and (not $x96) $x75)))
 (let (($x115 (and (and (and (and (and (and $x105 $x119) $x103) $x143) $x111) $x112) $x122)))
 (let (($x147 (and $x115 $x128)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x98 (or false (or false (and (and true (or $x8 $x47)) (or $x91 $x90))))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x135 (and $x58 $x147)))
 (let (($x124 (= $x135 true)))
 (let (($x139 (= $x124 true)))
 (let (($x118 (= $x139 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x19 (concat ?x78 (concat ?x85 ?x63)))))
 (let (($x28 (= ?x68 input.dst.llvm-%m)))
 (let (($x67 (= $x28 true)))
 (let (($x12 (= $x67 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x15 (concat ?x79 (concat ?x86 ?x7)))))
 (let (($x46 (= ?x31 input.dst.llvm-%n)))
 (let (($x42 (= $x46 true)))
 (let (($x84 (= $x42 true)))
 (let (($x41 (and $x84 $x12)))
 (let (($x117 (and $x41 $x118)))
 (let (($x157 (and $x117 $x151)))
 (let (($x22 (and $x157 $x149)))
 (let (($x33 (and $x22 $x72)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x35 $x33)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x37 (and $x55 $x159)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x25 $x37)))
 (let (($x123 (=> $x150 $x131)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x156 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x6 (= $x156 true)))
 (let (($x131 (= $x6 true)))
 (let (($x56 (forall ((input.ind-%var119X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var119X)))
 (=> $x125 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var119X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var118X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var118X)))
 (= $x125 false)))
 ))
 (let (($x57 (and $x80 $x56)))
 (let (($x72 (= $x57 true)))
 (let (($x158 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x127 (= $x158 true)))
 (let (($x34 (= $x127 true)))
 (let (($x149 (= $x34 true)))
 (let (($x38 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x70 (= $x38 true)))
 (let (($x153 (= $x70 true)))
 (let (($x151 (= $x153 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x114)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x113)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (and $x108 $x102)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x100 $x110)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x107 $x13)))
 (let (($x138 (not $x99)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x95 $x61)))
 (let (($x119 (and (not $x74) $x138)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x64 $x87)))
 (let (($x75 (not $x26)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x65 $x82)))
 (let (($x105 (and (not $x96) $x75)))
 (let (($x115 (and (and (and (and (and (and $x105 $x119) $x103) $x143) $x111) $x112) $x122)))
 (let (($x147 (and $x115 $x128)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x98 (or false (or false (and (and true (or $x8 $x47)) (or $x91 $x90))))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x135 (and $x58 $x147)))
 (let (($x124 (= $x135 true)))
 (let (($x139 (= $x124 true)))
 (let (($x118 (= $x139 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x19 (concat ?x78 (concat ?x85 ?x63)))))
 (let (($x28 (= ?x68 input.dst.llvm-%m)))
 (let (($x67 (= $x28 true)))
 (let (($x12 (= $x67 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x15 (concat ?x79 (concat ?x86 ?x7)))))
 (let (($x46 (= ?x31 input.dst.llvm-%n)))
 (let (($x42 (= $x46 true)))
 (let (($x84 (= $x42 true)))
 (let (($x41 (and $x84 $x12)))
 (let (($x117 (and $x41 $x118)))
 (let (($x157 (and $x117 $x151)))
 (let (($x22 (and $x157 $x149)))
 (let (($x33 (and $x22 $x72)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x35 $x33)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x37 (and $x55 $x159)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x25 $x37)))
 (let (($x123 (=> $x150 $x131)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x488370ac)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffff8a8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffff8ab)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x488370af)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x488370ac)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffff8a8)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x488370ac) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00020004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00020007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00020004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000020) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x120 (= $x140 true)))
 (let (($x152 (= $x120 true)))
 (let (($x16 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var133X)))
 (=> $x148 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var133X) (_ bv0 32)))))
 ))
 (let (($x33 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var132X)))
 (= $x148 false)))
 ))
 (let (($x52 (and $x33 $x16)))
 (let (($x5 (= $x52 true)))
 (let (($x149 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x22 (= $x149 true)))
 (let (($x155 (= $x22 true)))
 (let (($x125 (= $x155 true)))
 (let (($x151 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x157 (= $x151 true)))
 (let (($x158 (= $x157 true)))
 (let (($x127 (= $x158 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x113)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x112)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (and $x108 $x102)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x100 $x110)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x99 $x138)))
 (let (($x126 (not $x119)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x97 $x107)))
 (let (($x132 (and (not $x13) $x126)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x26 $x75)))
 (let (($x95 (not $x105)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x20 $x94)))
 (let (($x74 (and (not $x87) $x95)))
 (let (($x124 (and (and (and (and (and (and $x74 $x132) $x143) $x137) $x111) $x144) $x76)))
 (let (($x139 (and $x124 $x122)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x96 (or false (or false (and (and true (or $x92 $x91)) (or $x49 $x98))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x118 (and $x64 $x139)))
 (let (($x117 (= $x118 true)))
 (let (($x121 (= $x117 true)))
 (let (($x133 (= $x121 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x18 (concat ?x50 (concat ?x62 ?x89)))))
 (let (($x12 (= ?x28 input.dst.llvm-%m)))
 (let (($x41 (= $x12 true)))
 (let (($x53 (= $x41 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x31 (concat ?x86 (concat ?x24 ?x69)))))
 (let (($x42 (= ?x81 input.dst.llvm-%n)))
 (let (($x84 (= $x42 true)))
 (let (($x32 (= $x84 true)))
 (let (($x66 (and $x32 $x53)))
 (let (($x38 (and $x66 $x133)))
 (let (($x34 (and $x38 $x127)))
 (let (($x17 (and $x34 $x125)))
 (let (($x11 (and $x17 $x5)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x10 $x11)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x48 $x21)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x136 (and $x43 $x154)))
 (let (($x146 (=> $x136 $x152)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x120 (= $x140 true)))
 (let (($x152 (= $x120 true)))
 (let (($x16 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var133X)))
 (=> $x148 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var133X) (_ bv0 32)))))
 ))
 (let (($x33 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var132X)))
 (= $x148 false)))
 ))
 (let (($x52 (and $x33 $x16)))
 (let (($x5 (= $x52 true)))
 (let (($x149 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x22 (= $x149 true)))
 (let (($x155 (= $x22 true)))
 (let (($x125 (= $x155 true)))
 (let (($x151 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x157 (= $x151 true)))
 (let (($x158 (= $x157 true)))
 (let (($x127 (= $x158 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x113)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x112)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (and $x108 $x102)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x100 $x110)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x99 $x138)))
 (let (($x126 (not $x119)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x97 $x107)))
 (let (($x132 (and (not $x13) $x126)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x26 $x75)))
 (let (($x95 (not $x105)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x20 $x94)))
 (let (($x74 (and (not $x87) $x95)))
 (let (($x124 (and (and (and (and (and (and $x74 $x132) $x143) $x137) $x111) $x144) $x76)))
 (let (($x139 (and $x124 $x122)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x96 (or false (or false (and (and true (or $x92 $x91)) (or $x49 $x98))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x118 (and $x64 $x139)))
 (let (($x117 (= $x118 true)))
 (let (($x121 (= $x117 true)))
 (let (($x133 (= $x121 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x18 (concat ?x50 (concat ?x62 ?x89)))))
 (let (($x12 (= ?x28 input.dst.llvm-%m)))
 (let (($x41 (= $x12 true)))
 (let (($x53 (= $x41 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x31 (concat ?x86 (concat ?x24 ?x69)))))
 (let (($x42 (= ?x81 input.dst.llvm-%n)))
 (let (($x84 (= $x42 true)))
 (let (($x32 (= $x84 true)))
 (let (($x66 (and $x32 $x53)))
 (let (($x38 (and $x66 $x133)))
 (let (($x34 (and $x38 $x127)))
 (let (($x17 (and $x34 $x125)))
 (let (($x11 (and $x17 $x5)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x10 $x11)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x48 $x21)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x136 (and $x43 $x154)))
 (let (($x146 (=> $x136 $x152)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000010)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000013)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x78cc74d0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x78cc74d3)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x78cc74d0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x129 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x57 (= $x129 true)))
 (let (($x6 (= $x57 true)))
 (let (($x59 (forall ((input.ind-%var147X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var147X)))
 (=> $x134 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var147X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var146X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var146X)))
 (= $x134 false)))
 ))
 (let (($x71 (and $x11 $x59)))
 (let (($x77 (= $x71 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x155 (concat ?x34 (concat ?x157 ?x153)))))
 (let (($x17 (= ?x125 input.dst.llvm-%n)))
 (let (($x142 (= $x17 true)))
 (let (($x148 (= $x142 true)))
 (let (($x118 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x117 (= $x118 true)))
 (let (($x121 (= $x117 true)))
 (let (($x133 (= $x121 true)))
 (let (($x112 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x76 (= $x112 true)))
 (let (($x124 (= $x76 true)))
 (let (($x113 (= $x124 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x132)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x119)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x74 $x107)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x95 $x13)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x96 $x64)))
 (let (($x94 (not $x20)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x58 $x65)))
 (let (($x61 (and (not $x82) $x94)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x104 $x90)))
 (let (($x49 (not $x106)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x18 $x63)))
 (let (($x98 (and (not $x91) $x49)))
 (let (($x108 (and (and (and (and (and (and $x98 $x61) $x26) $x105) $x103) $x138) $x126)))
 (let (($x101 (and $x108 $x115)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x88 (or false (or false (and (and true (or $x73 $x28)) (or $x66 $x8))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x88)))
 (let (($x102 (and $x93 $x101)))
 (let (($x110 (= $x102 true)))
 (let (($x111 (= $x110 true)))
 (let (($x147 (= $x111 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x81 (concat ?x24 (concat ?x79 ?x44)))))
 (let (($x84 (= ?x46 input.dst.llvm-%m)))
 (let (($x32 (= $x84 true)))
 (let (($x19 (= $x32 true)))
 (let (($x116 (and $x19 $x147)))
 (let (($x122 (and $x116 $x113)))
 (let (($x38 (and $x122 $x133)))
 (let (($x72 (and $x38 $x148)))
 (let (($x56 (and $x72 $x77)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x40 $x56)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x109 $x156)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x80 (and $x29 $x150)))
 (let (($x37 (=> $x80 $x6)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x129 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x57 (= $x129 true)))
 (let (($x6 (= $x57 true)))
 (let (($x59 (forall ((input.ind-%var147X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var147X)))
 (=> $x134 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var147X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var146X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var146X)))
 (= $x134 false)))
 ))
 (let (($x71 (and $x11 $x59)))
 (let (($x77 (= $x71 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x155 (concat ?x34 (concat ?x157 ?x153)))))
 (let (($x17 (= ?x125 input.dst.llvm-%n)))
 (let (($x142 (= $x17 true)))
 (let (($x148 (= $x142 true)))
 (let (($x118 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x117 (= $x118 true)))
 (let (($x121 (= $x117 true)))
 (let (($x133 (= $x121 true)))
 (let (($x112 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x76 (= $x112 true)))
 (let (($x124 (= $x76 true)))
 (let (($x113 (= $x124 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x132)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x119)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x74 $x107)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x95 $x13)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x96 $x64)))
 (let (($x94 (not $x20)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x58 $x65)))
 (let (($x61 (and (not $x82) $x94)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x104 $x90)))
 (let (($x49 (not $x106)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x18 $x63)))
 (let (($x98 (and (not $x91) $x49)))
 (let (($x108 (and (and (and (and (and (and $x98 $x61) $x26) $x105) $x103) $x138) $x126)))
 (let (($x101 (and $x108 $x115)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x88 (or false (or false (and (and true (or $x73 $x28)) (or $x66 $x8))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x88)))
 (let (($x102 (and $x93 $x101)))
 (let (($x110 (= $x102 true)))
 (let (($x111 (= $x110 true)))
 (let (($x147 (= $x111 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x81 (concat ?x24 (concat ?x79 ?x44)))))
 (let (($x84 (= ?x46 input.dst.llvm-%m)))
 (let (($x32 (= $x84 true)))
 (let (($x19 (= $x32 true)))
 (let (($x116 (and $x19 $x147)))
 (let (($x122 (and $x116 $x113)))
 (let (($x38 (and $x122 $x133)))
 (let (($x72 (and $x38 $x148)))
 (let (($x56 (and $x72 $x77)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x40 $x56)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x109 $x156)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x80 (and $x29 $x150)))
 (let (($x37 (=> $x80 $x6)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x201 (forall ((input.ind-%var165X (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul input.ind-%var165X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x192))))
 (let ((?x169 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var165X)))
 (let (($x152 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var165X)))
 (=> $x152 (= ?x169 ?x198))))))))
 ))
 (let (($x165 (forall ((input.ind-%var164X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var164X)))
 (= $x152 (and (bvule (_ bv0 32) input.ind-%var164X) (bvult input.ind-%var164X (_ bv0 32))))))
 ))
 (let (($x202 (and $x165 $x201)))
 (let (($x52 (= true true)))
 (let (($x203 (and $x52 $x202)))
 (let (($x204 (= $x203 true)))
 (let (($x9 (forall ((input.ind-%var157X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var157X)))
 (=> $x30 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var157X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var156X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var156X)))
 (= $x30 false)))
 ))
 (let (($x70 (and $x56 $x9)))
 (let (($x16 (= $x70 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x148 (concat ?x142 (concat ?x149 (concat ?x157 ?x34)))))
 (let (($x72 (= ?x148 input.dst.llvm-%m)))
 (let (($x123 (= $x72 true)))
 (let (($x134 (= $x123 true)))
 (let (($x121 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x133 (= $x121 true)))
 (let (($x38 (= $x133 true)))
 (let (($x22 (= $x38 true)))
 (let (($x112 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x76 (= $x112 true)))
 (let (($x124 (= $x76 true)))
 (let (($x113 (= $x124 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x100)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x99)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x95 $x97)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x137 $x107)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x64 $x20)))
 (let (($x61 (not $x94)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x82 $x87)))
 (let (($x26 (and (not $x96) $x61)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x90 $x106)))
 (let (($x98 (not $x49)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x92 $x62)))
 (let (($x65 (and (not $x104) $x98)))
 (let (($x102 (and (and (and (and (and (and $x65 $x26) $x75) $x105) $x13) $x128) $x138)))
 (let (($x110 (and $x102 $x119)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x63 (or false (or false (and (and true (or $x12 $x41)) (or $x83 $x47))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x111 (and $x39 $x110)))
 (let (($x147 (= $x111 true)))
 (let (($x116 (= $x147 true)))
 (let (($x144 (= $x116 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x46 (concat ?x79 (concat ?x86 ?x7)))))
 (let (($x32 (= ?x42 input.dst.llvm-%n)))
 (let (($x19 (= $x32 true)))
 (let (($x50 (= $x19 true)))
 (let (($x135 (and $x50 $x144)))
 (let (($x122 (and $x135 $x113)))
 (let (($x155 (and $x122 $x22)))
 (let (($x5 (and $x155 $x134)))
 (let (($x140 (and $x5 $x16)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x55 $x140)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x33 (and $x36 $x136)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x51 (and $x29 $x33)))
 (let (($x205 (=> $x51 $x204)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x201 (forall ((input.ind-%var165X (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul input.ind-%var165X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x192))))
 (let ((?x169 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var165X)))
 (let (($x152 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var165X)))
 (=> $x152 (= ?x169 ?x198))))))))
 ))
 (let (($x165 (forall ((input.ind-%var164X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var164X)))
 (= $x152 (and (bvule (_ bv0 32) input.ind-%var164X) (bvult input.ind-%var164X (_ bv0 32))))))
 ))
 (let (($x202 (and $x165 $x201)))
 (let (($x52 (= true true)))
 (let (($x203 (and $x52 $x202)))
 (let (($x204 (= $x203 true)))
 (let (($x9 (forall ((input.ind-%var157X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var157X)))
 (=> $x30 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var157X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var156X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var156X)))
 (= $x30 false)))
 ))
 (let (($x70 (and $x56 $x9)))
 (let (($x16 (= $x70 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x148 (concat ?x142 (concat ?x149 (concat ?x157 ?x34)))))
 (let (($x72 (= ?x148 input.dst.llvm-%m)))
 (let (($x123 (= $x72 true)))
 (let (($x134 (= $x123 true)))
 (let (($x121 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x133 (= $x121 true)))
 (let (($x38 (= $x133 true)))
 (let (($x22 (= $x38 true)))
 (let (($x112 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x76 (= $x112 true)))
 (let (($x124 (= $x76 true)))
 (let (($x113 (= $x124 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x100)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x99)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x95 $x97)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x137 $x107)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x64 $x20)))
 (let (($x61 (not $x94)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x82 $x87)))
 (let (($x26 (and (not $x96) $x61)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x90 $x106)))
 (let (($x98 (not $x49)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x92 $x62)))
 (let (($x65 (and (not $x104) $x98)))
 (let (($x102 (and (and (and (and (and (and $x65 $x26) $x75) $x105) $x13) $x128) $x138)))
 (let (($x110 (and $x102 $x119)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x63 (or false (or false (and (and true (or $x12 $x41)) (or $x83 $x47))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x111 (and $x39 $x110)))
 (let (($x147 (= $x111 true)))
 (let (($x116 (= $x147 true)))
 (let (($x144 (= $x116 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x46 (concat ?x79 (concat ?x86 ?x7)))))
 (let (($x32 (= ?x42 input.dst.llvm-%n)))
 (let (($x19 (= $x32 true)))
 (let (($x50 (= $x19 true)))
 (let (($x135 (and $x50 $x144)))
 (let (($x122 (and $x135 $x113)))
 (let (($x155 (and $x122 $x22)))
 (let (($x5 (and $x155 $x134)))
 (let (($x140 (and $x5 $x16)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x55 $x140)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x33 (and $x36 $x136)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x51 (and $x29 $x33)))
 (let (($x205 (=> $x51 $x204)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00009b64)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var165X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80001de0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x48000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00009b67)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80001de3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80001de0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00009b64)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80001de3) #x48
    (ite (= x!0 #x48000003) #x02
      #x00)))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var164X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var165X!1 () (_ BitVec 32)
    #x10bfffc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf173fffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf174dffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x018000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf174dfff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf173ffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf173fffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf174dffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf173fffc) #xf8
    (ite (= x!0 #xf173ffff) #x01
    (ite (= x!0 #x447ffffa) #x02
    (ite (= x!0 #xf173fffe) #x80
      #x00)))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (forall ((input.ind-%var197X (_ BitVec 32)) )(let ((?x179 (bvadd (bvmul input.ind-%var197X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x175))))
 (let ((?x78 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var197X)))
 (let (($x191 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var197X)))
 (=> $x191 (= ?x78 ?x154))))))))
 ))
 (let (($x204 (forall ((input.ind-%var196X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var196X)))
 (= $x191 (and (bvule (_ bv0 32) input.ind-%var196X) (bvult input.ind-%var196X input.dst.llvm-%m)))))
 ))
 (let (($x37 (and $x204 $x150)))
 (let (($x193 (= true true)))
 (let (($x185 (and $x193 $x37)))
 (let (($x167 (= $x185 true)))
 (let (($x165 (forall ((input.ind-%var191X (_ BitVec 32)) )(let (($x68 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var191X)))
 (=> $x68 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var191X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var190X (_ BitVec 32)) )(let (($x68 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var190X)))
 (= $x68 false)))
 ))
 (let (($x169 (and $x140 $x165)))
 (let (($x172 (= $x169 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x123 (concat ?x125 (concat ?x157 ?x149)))))
 (let (($x5 (= ?x134 input.dst.llvm-%m)))
 (let (($x146 (= $x5 true)))
 (let (($x30 (= $x146 true)))
 (let (($x38 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x22 (= $x38 true)))
 (let (($x155 (= $x22 true)))
 (let (($x17 (= $x155 true)))
 (let (($x124 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (= $x124 true)))
 (let (($x122 (= $x113 true)))
 (let (($x139 (= $x122 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x101)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x103)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x137 $x74)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x132 $x97)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x20 $x94)))
 (let (($x26 (not $x61)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x96 $x143)))
 (let (($x114 (and (not $x64) $x26)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x106 $x49)))
 (let (($x65 (not $x98)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x91 $x89)))
 (let (($x87 (and (not $x90) $x65)))
 (let (($x111 (and (and (and (and (and (and $x87 $x114) $x108) $x105) $x107) $x115) $x128)))
 (let (($x147 (and $x111 $x99)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x66)))
 (let (($x62 (or false (or false (and (and true (or $x53 $x8)) (or $x93 $x18))))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x62)))
 (let (($x116 (and $x58 $x147)))
 (let (($x144 (= $x116 true)))
 (let (($x135 (= $x144 true)))
 (let (($x112 (= $x135 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x42 (concat ?x86 (concat ?x24 ?x69)))))
 (let (($x19 (= ?x84 input.dst.llvm-%n)))
 (let (($x50 (= $x19 true)))
 (let (($x85 (= $x50 true)))
 (let (($x76 (and $x85 $x112)))
 (let (($x118 (and $x76 $x139)))
 (let (($x142 (and $x118 $x17)))
 (let (($x77 (and $x142 $x30)))
 (let (($x187 (and $x77 $x172)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x188 (and $x48 $x187)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x25 $x188)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x14 $x196)))
 (let (($x186 (=> $x197 $x167)))
 (not $x186)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (forall ((input.ind-%var197X (_ BitVec 32)) )(let ((?x179 (bvadd (bvmul input.ind-%var197X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x175))))
 (let ((?x78 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var197X)))
 (let (($x191 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var197X)))
 (=> $x191 (= ?x78 ?x154))))))))
 ))
 (let (($x204 (forall ((input.ind-%var196X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var196X)))
 (= $x191 (and (bvule (_ bv0 32) input.ind-%var196X) (bvult input.ind-%var196X input.dst.llvm-%m)))))
 ))
 (let (($x37 (and $x204 $x150)))
 (let (($x193 (= true true)))
 (let (($x185 (and $x193 $x37)))
 (let (($x167 (= $x185 true)))
 (let (($x165 (forall ((input.ind-%var191X (_ BitVec 32)) )(let (($x68 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var191X)))
 (=> $x68 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var191X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var190X (_ BitVec 32)) )(let (($x68 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var190X)))
 (= $x68 false)))
 ))
 (let (($x169 (and $x140 $x165)))
 (let (($x172 (= $x169 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x123 (concat ?x125 (concat ?x157 ?x149)))))
 (let (($x5 (= ?x134 input.dst.llvm-%m)))
 (let (($x146 (= $x5 true)))
 (let (($x30 (= $x146 true)))
 (let (($x38 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x22 (= $x38 true)))
 (let (($x155 (= $x22 true)))
 (let (($x17 (= $x155 true)))
 (let (($x124 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (= $x124 true)))
 (let (($x122 (= $x113 true)))
 (let (($x139 (= $x122 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x101)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x103)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x137 $x74)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x132 $x97)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x20 $x94)))
 (let (($x26 (not $x61)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x96 $x143)))
 (let (($x114 (and (not $x64) $x26)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x106 $x49)))
 (let (($x65 (not $x98)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x91 $x89)))
 (let (($x87 (and (not $x90) $x65)))
 (let (($x111 (and (and (and (and (and (and $x87 $x114) $x108) $x105) $x107) $x115) $x128)))
 (let (($x147 (and $x111 $x99)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x66)))
 (let (($x62 (or false (or false (and (and true (or $x53 $x8)) (or $x93 $x18))))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x62)))
 (let (($x116 (and $x58 $x147)))
 (let (($x144 (= $x116 true)))
 (let (($x135 (= $x144 true)))
 (let (($x112 (= $x135 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x42 (concat ?x86 (concat ?x24 ?x69)))))
 (let (($x19 (= ?x84 input.dst.llvm-%n)))
 (let (($x50 (= $x19 true)))
 (let (($x85 (= $x50 true)))
 (let (($x76 (and $x85 $x112)))
 (let (($x118 (and $x76 $x139)))
 (let (($x142 (and $x118 $x17)))
 (let (($x77 (and $x142 $x30)))
 (let (($x187 (and $x77 $x172)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x188 (and $x48 $x187)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x25 $x188)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x14 $x196)))
 (let (($x186 (=> $x197 $x167)))
 (not $x186)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02140404)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x402a0200)
  (define-fun input.ind-%var197X!1 () (_ BitVec 32)
    #x0808088a)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xc04009c0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02140407)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x402a0203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x402a0200)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02140404)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x402a0203) #xc0
    (ite (= x!0 #x402a0202) #x40
    (ite (= x!0 #x402a0200) #xc0
    (ite (= x!0 #x402a0201) #x09
      #x00)))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x04000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var196X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var197X!1 () (_ BitVec 32)
    #x07024080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffec4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9edabff0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xa0c040b8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9edabff3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffffec7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffec4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9edabff0)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffec6) #xc0
    (ite (= x!0 #xfffffec4) #xb8
    (ite (= x!0 #xfffffec7) #xa0
      #x40))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (forall ((input.ind-%var229X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var229X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x80))))
 (let ((?x73 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var229X)))
 (let (($x177 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var229X)))
 (=> $x177 (= ?x73 ?x190))))))))
 ))
 (let (($x167 (forall ((input.ind-%var228X (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var228X)))
 (= $x177 (and (bvule (_ bv0 32) input.ind-%var228X) (bvult input.ind-%var228X input.dst.llvm-%n)))))
 ))
 (let (($x161 (and $x167 $x33)))
 (let (($x178 (= true true)))
 (let (($x174 (and $x178 $x161)))
 (let (($x206 (= $x174 true)))
 (let (($x204 (forall ((input.ind-%var223X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var223X)))
 (=> $x164 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var223X) (_ bv0 32)))))
 ))
 (let (($x187 (forall ((input.ind-%var222X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var222X)))
 (= $x164 false)))
 ))
 (let (($x78 (and $x187 $x204)))
 (let (($x59 (= $x78 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x146 (concat ?x148 (concat ?x157 ?x125)))))
 (let (($x77 (= ?x30 input.dst.llvm-%n)))
 (let (($x131 (= $x77 true)))
 (let (($x68 (= $x131 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x22 (concat ?x121 (concat ?x122 ?x124)))))
 (let (($x17 (= ?x155 input.dst.llvm-%m)))
 (let (($x142 (= $x17 true)))
 (let (($x72 (= $x142 true)))
 (let (($x99 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (= $x99 true)))
 (let (($x116 (= $x147 true)))
 (let (($x144 (= $x116 true)))
 (let (($x115 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x110 (= $x115 true)))
 (let (($x103 (= $x110 true)))
 (let (($x128 (= $x103 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x26)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x94)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x98 $x96)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x49 $x143)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x63 $x39)))
 (let (($x62 (not $x92)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x93 $x88)))
 (let (($x91 (and (not $x18) $x62)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x53 $x41)))
 (let (($x83 (not $x8)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x60 $x15)))
 (let (($x47 (and (not $x66) $x83)))
 (let (($x100 (and (and (and (and (and (and $x47 $x91) $x90) $x106) $x64) $x20) $x61)))
 (let (($x132 (and $x100 $x114)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x12 (or false (or false (and (and true (or $x46 $x24)) (or $x32 $x19))))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x12)))
 (let (($x137 (and $x28 $x132)))
 (let (($x95 (= $x137 true)))
 (let (($x74 (= $x95 true)))
 (let (($x97 (= $x74 true)))
 (let (($x111 (and $x97 $x128)))
 (let (($x135 (and $x111 $x144)))
 (let (($x123 (and $x135 $x72)))
 (let (($x16 (and $x123 $x68)))
 (let (($x183 (and $x16 $x59)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x179 (and $x109 $x183)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x43 $x179)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x6 (and $x35 $x71)))
 (let (($x182 (=> $x6 $x206)))
 (not $x182)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (forall ((input.ind-%var229X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var229X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x80))))
 (let ((?x73 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var229X)))
 (let (($x177 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var229X)))
 (=> $x177 (= ?x73 ?x190))))))))
 ))
 (let (($x167 (forall ((input.ind-%var228X (_ BitVec 32)) )(let (($x177 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var228X)))
 (= $x177 (and (bvule (_ bv0 32) input.ind-%var228X) (bvult input.ind-%var228X input.dst.llvm-%n)))))
 ))
 (let (($x161 (and $x167 $x33)))
 (let (($x178 (= true true)))
 (let (($x174 (and $x178 $x161)))
 (let (($x206 (= $x174 true)))
 (let (($x204 (forall ((input.ind-%var223X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var223X)))
 (=> $x164 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var223X) (_ bv0 32)))))
 ))
 (let (($x187 (forall ((input.ind-%var222X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var222X)))
 (= $x164 false)))
 ))
 (let (($x78 (and $x187 $x204)))
 (let (($x59 (= $x78 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x146 (concat ?x148 (concat ?x157 ?x125)))))
 (let (($x77 (= ?x30 input.dst.llvm-%n)))
 (let (($x131 (= $x77 true)))
 (let (($x68 (= $x131 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x22 (concat ?x121 (concat ?x122 ?x124)))))
 (let (($x17 (= ?x155 input.dst.llvm-%m)))
 (let (($x142 (= $x17 true)))
 (let (($x72 (= $x142 true)))
 (let (($x99 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (= $x99 true)))
 (let (($x116 (= $x147 true)))
 (let (($x144 (= $x116 true)))
 (let (($x115 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x110 (= $x115 true)))
 (let (($x103 (= $x110 true)))
 (let (($x128 (= $x103 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x26)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x94)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x98 $x96)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x49 $x143)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x63 $x39)))
 (let (($x62 (not $x92)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x93 $x88)))
 (let (($x91 (and (not $x18) $x62)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x53 $x41)))
 (let (($x83 (not $x8)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x60 $x15)))
 (let (($x47 (and (not $x66) $x83)))
 (let (($x100 (and (and (and (and (and (and $x47 $x91) $x90) $x106) $x64) $x20) $x61)))
 (let (($x132 (and $x100 $x114)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x12 (or false (or false (and (and true (or $x46 $x24)) (or $x32 $x19))))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x12)))
 (let (($x137 (and $x28 $x132)))
 (let (($x95 (= $x137 true)))
 (let (($x74 (= $x95 true)))
 (let (($x97 (= $x74 true)))
 (let (($x111 (and $x97 $x128)))
 (let (($x135 (and $x111 $x144)))
 (let (($x123 (and $x135 $x72)))
 (let (($x16 (and $x123 $x68)))
 (let (($x183 (and $x16 $x59)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x179 (and $x109 $x183)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x43 $x179)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x6 (and $x35 $x71)))
 (let (($x182 (=> $x6 $x206)))
 (not $x182)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var229X!1 () (_ BitVec 32)
    #x3fffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00004003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #xfc
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var228X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.ind-%var229X!1 () (_ BitVec 32)
    #x3fffffc0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #xf8
    (ite (= x!0 #xfffffff0) #x01
      #x00)))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x195 (forall ((input.ind-%var257X (_ BitVec 32)) )(let ((?x184 (bvadd (bvmul input.ind-%var257X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x189))))
 (=> false (= (_ bv0 32) ?x51))))))
 ))
 (let (($x33 (forall ((input.ind-%var256X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var256X) (bvult input.ind-%var256X (_ bv0 32)))))
 ))
 (let (($x57 (and $x33 $x195)))
 (let (($x130 (= true true)))
 (let (($x169 (and $x130 $x57)))
 (let (($x201 (= $x169 true)))
 (let (($x167 (forall ((input.ind-%var251X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var251X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var251X) (_ bv0 32)))))
 ))
 (let (($x183 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var250X)))
 (= $x203 false)))
 ))
 (let (($x73 (and $x183 $x167)))
 (let (($x9 (= $x73 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x131 (concat ?x134 (concat ?x157 ?x148)))))
 (let (($x16 (= ?x68 input.dst.llvm-%m)))
 (let (($x163 (= $x16 true)))
 (let (($x164 (= $x163 true)))
 (let (($x142 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x72 (= $x142 true)))
 (let (($x123 (= $x72 true)))
 (let (($x5 (= $x123 true)))
 (let (($x121 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (= $x121 true)))
 (let (($x122 (= $x113 true)))
 (let (($x124 (= $x122 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x103)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x115)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x137 $x74)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x132 $x97)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x102 $x126)))
 (let (($x105 (not $x20)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x96 $x143)))
 (let (($x61 (and (not $x64) $x105)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x106 $x108)))
 (let (($x98 (not $x49)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x15 $x66)))
 (let (($x87 (and (not $x82) $x98)))
 (let (($x144 (and (and (and (and (and (and $x87 $x61) $x26) $x114) $x107) $x13) $x110)))
 (let (($x135 (and $x144 $x128)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x83)))
 (let (($x89 (or false (or false (and (and true (or $x47 $x93)) (or $x39 $x92))))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x89)))
 (let (($x112 (and $x75 $x135)))
 (let (($x38 (= $x112 true)))
 (let (($x22 (= $x38 true)))
 (let (($x118 (= $x22 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x19 (concat ?x31 (concat ?x46 ?x79)))))
 (let (($x67 (= ?x50 input.dst.llvm-%n)))
 (let (($x12 (= $x67 true)))
 (let (($x28 (= $x12 true)))
 (let (($x117 (and $x28 $x118)))
 (let (($x139 (and $x117 $x124)))
 (let (($x146 (and $x139 $x5)))
 (let (($x172 (and $x146 $x164)))
 (let (($x27 (and $x172 $x9)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x36 $x27)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x29 $x170)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x162 (and $x14 $x70)))
 (let (($x176 (=> $x162 $x201)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x195 (forall ((input.ind-%var257X (_ BitVec 32)) )(let ((?x184 (bvadd (bvmul input.ind-%var257X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x189))))
 (=> false (= (_ bv0 32) ?x51))))))
 ))
 (let (($x33 (forall ((input.ind-%var256X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var256X) (bvult input.ind-%var256X (_ bv0 32)))))
 ))
 (let (($x57 (and $x33 $x195)))
 (let (($x130 (= true true)))
 (let (($x169 (and $x130 $x57)))
 (let (($x201 (= $x169 true)))
 (let (($x167 (forall ((input.ind-%var251X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var251X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var251X) (_ bv0 32)))))
 ))
 (let (($x183 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var250X)))
 (= $x203 false)))
 ))
 (let (($x73 (and $x183 $x167)))
 (let (($x9 (= $x73 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x131 (concat ?x134 (concat ?x157 ?x148)))))
 (let (($x16 (= ?x68 input.dst.llvm-%m)))
 (let (($x163 (= $x16 true)))
 (let (($x164 (= $x163 true)))
 (let (($x142 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x72 (= $x142 true)))
 (let (($x123 (= $x72 true)))
 (let (($x5 (= $x123 true)))
 (let (($x121 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (= $x121 true)))
 (let (($x122 (= $x113 true)))
 (let (($x124 (= $x122 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x103)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x115)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x137 $x74)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x132 $x97)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x102 $x126)))
 (let (($x105 (not $x20)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x96 $x143)))
 (let (($x61 (and (not $x64) $x105)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x106 $x108)))
 (let (($x98 (not $x49)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x15 $x66)))
 (let (($x87 (and (not $x82) $x98)))
 (let (($x144 (and (and (and (and (and (and $x87 $x61) $x26) $x114) $x107) $x13) $x110)))
 (let (($x135 (and $x144 $x128)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x83)))
 (let (($x89 (or false (or false (and (and true (or $x47 $x93)) (or $x39 $x92))))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x89)))
 (let (($x112 (and $x75 $x135)))
 (let (($x38 (= $x112 true)))
 (let (($x22 (= $x38 true)))
 (let (($x118 (= $x22 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x19 (concat ?x31 (concat ?x46 ?x79)))))
 (let (($x67 (= ?x50 input.dst.llvm-%n)))
 (let (($x12 (= $x67 true)))
 (let (($x28 (= $x12 true)))
 (let (($x117 (and $x28 $x118)))
 (let (($x139 (and $x117 $x124)))
 (let (($x146 (and $x139 $x5)))
 (let (($x172 (and $x146 $x164)))
 (let (($x27 (and $x172 $x9)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x36 $x27)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x29 $x170)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x162 (and $x14 $x70)))
 (let (($x176 (=> $x162 $x201)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x80 (forall ((input.ind-%var269X (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul input.ind-%var269X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x76))))
 (=> false (= (_ bv0 32) ?x150))))))
 ))
 (let (($x169 (forall ((input.ind-%var268X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var268X) (bvult input.ind-%var268X input.dst.llvm-%m))))
 ))
 (let (($x71 (and $x169 $x80)))
 (let (($x52 (= true true)))
 (let (($x160 (and $x52 $x71)))
 (let (($x40 (= $x160 true)))
 (let (($x206 (forall ((input.ind-%var263X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var263X)))
 (=> $x185 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var263X) (_ bv0 32)))))
 ))
 (let (($x27 (forall ((input.ind-%var262X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var262X)))
 (= $x185 false)))
 ))
 (let (($x175 (and $x27 $x206)))
 (let (($x184 (= $x175 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x163 (concat ?x30 (concat ?x157 ?x134)))))
 (let (($x172 (= ?x164 input.dst.llvm-%m)))
 (let (($x202 (= $x172 true)))
 (let (($x203 (= $x202 true)))
 (let (($x123 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x5 (= $x123 true)))
 (let (($x146 (= $x5 true)))
 (let (($x77 (= $x146 true)))
 (let (($x122 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x124 (= $x122 true)))
 (let (($x139 (= $x124 true)))
 (let (($x133 (= $x139 true)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x116)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x119)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x132 $x95)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x99 $x74)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x126 $x20)))
 (let (($x61 (not $x105)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x64 $x94)))
 (let (($x100 (and (not $x102) $x61)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x108 $x49)))
 (let (($x87 (not $x98)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x90 $x41)))
 (let (($x143 (and (not $x106) $x87)))
 (let (($x112 (and (and (and (and (and (and $x143 $x100) $x101) $x114) $x97) $x147) $x13)))
 (let (($x38 (and $x112 $x115)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x66 (or false (or false (and (and true (or $x18 $x58)) (or $x91 $x138))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x22 (and $x65 $x38)))
 (let (($x118 (= $x22 true)))
 (let (($x117 (= $x118 true)))
 (let (($x121 (= $x117 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x50 (concat ?x46 (concat ?x24 ?x84)))))
 (let (($x12 (= ?x85 input.dst.llvm-%n)))
 (let (($x28 (= $x12 true)))
 (let (($x45 (= $x28 true)))
 (let (($x113 (and $x45 $x121)))
 (let (($x155 (and $x113 $x133)))
 (let (($x131 (and $x155 $x77)))
 (let (($x59 (and $x131 $x203)))
 (let (($x192 (and $x59 $x184)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x25 $x192)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x56 (and $x23 $x136)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x129 (and $x35 $x56)))
 (let (($x181 (=> $x129 $x40)))
 (not $x181)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x80 (forall ((input.ind-%var269X (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul input.ind-%var269X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x76))))
 (=> false (= (_ bv0 32) ?x150))))))
 ))
 (let (($x169 (forall ((input.ind-%var268X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var268X) (bvult input.ind-%var268X input.dst.llvm-%m))))
 ))
 (let (($x71 (and $x169 $x80)))
 (let (($x52 (= true true)))
 (let (($x160 (and $x52 $x71)))
 (let (($x40 (= $x160 true)))
 (let (($x206 (forall ((input.ind-%var263X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var263X)))
 (=> $x185 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var263X) (_ bv0 32)))))
 ))
 (let (($x27 (forall ((input.ind-%var262X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var262X)))
 (= $x185 false)))
 ))
 (let (($x175 (and $x27 $x206)))
 (let (($x184 (= $x175 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x163 (concat ?x30 (concat ?x157 ?x134)))))
 (let (($x172 (= ?x164 input.dst.llvm-%m)))
 (let (($x202 (= $x172 true)))
 (let (($x203 (= $x202 true)))
 (let (($x123 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x5 (= $x123 true)))
 (let (($x146 (= $x5 true)))
 (let (($x77 (= $x146 true)))
 (let (($x122 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x124 (= $x122 true)))
 (let (($x139 (= $x124 true)))
 (let (($x133 (= $x139 true)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x116)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x119)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x132 $x95)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x99 $x74)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x126 $x20)))
 (let (($x61 (not $x105)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x64 $x94)))
 (let (($x100 (and (not $x102) $x61)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x108 $x49)))
 (let (($x87 (not $x98)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x90 $x41)))
 (let (($x143 (and (not $x106) $x87)))
 (let (($x112 (and (and (and (and (and (and $x143 $x100) $x101) $x114) $x97) $x147) $x13)))
 (let (($x38 (and $x112 $x115)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x66 (or false (or false (and (and true (or $x18 $x58)) (or $x91 $x138))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x22 (and $x65 $x38)))
 (let (($x118 (= $x22 true)))
 (let (($x117 (= $x118 true)))
 (let (($x121 (= $x117 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x50 (concat ?x46 (concat ?x24 ?x84)))))
 (let (($x12 (= ?x85 input.dst.llvm-%n)))
 (let (($x28 (= $x12 true)))
 (let (($x45 (= $x28 true)))
 (let (($x113 (and $x45 $x121)))
 (let (($x155 (and $x113 $x133)))
 (let (($x131 (and $x155 $x77)))
 (let (($x59 (and $x131 $x203)))
 (let (($x192 (and $x59 $x184)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x25 $x192)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x56 (and $x23 $x136)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x129 (and $x35 $x56)))
 (let (($x181 (=> $x129 $x40)))
 (not $x181)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002184)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var268X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002508)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002187)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000250b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002508)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002184)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00002508) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var268X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfefffff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xeafffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xeaffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfefffffb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfefffff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xeafffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfefffff8) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (forall ((input.ind-%var289X (_ BitVec 32)) )(let ((?x182 (bvadd (bvmul input.ind-%var289X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x204))))
 (=> false (= (_ bv0 32) ?x173))))))
 ))
 (let (($x160 (forall ((input.ind-%var288X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var288X) (bvult input.ind-%var288X input.dst.llvm-%n))))
 ))
 (let (($x70 (and $x160 $x51)))
 (let (($x191 (= true true)))
 (let (($x198 (and $x191 $x70)))
 (let (($x187 (= $x198 true)))
 (let (($x154 (forall ((input.ind-%var283X (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var283X)))
 (=> $x33 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var283X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var282X (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var282X)))
 (= $x33 false)))
 ))
 (let (($x158 (and $x192 $x154)))
 (let (($x188 (= $x158 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x203 (concat ?x202 (concat ?x68 (concat ?x157 ?x30)))))
 (let (($x59 (= ?x203 input.dst.llvm-%n)))
 (let (($x37 (= $x59 true)))
 (let (($x185 (= $x37 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x5 (concat ?x142 (concat ?x139 ?x122)))))
 (let (($x77 (= ?x146 input.dst.llvm-%m)))
 (let (($x131 (= $x77 true)))
 (let (($x16 (= $x131 true)))
 (let (($x115 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x38 (= $x115 true)))
 (let (($x22 (= $x38 true)))
 (let (($x118 (= $x22 true)))
 (let (($x147 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x135 (= $x147 true)))
 (let (($x119 (= $x135 true)))
 (let (($x13 (= $x119 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x61)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x20)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x98 $x64)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x49 $x94)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x89 $x75)))
 (let (($x66 (not $x15)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x91 $x62)))
 (let (($x90 (and (not $x138) $x66)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x18 $x93)))
 (let (($x39 (not $x58)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x32 $x81)))
 (let (($x92 (and (not $x88) $x39)))
 (let (($x103 (and (and (and (and (and (and $x92 $x90) $x106) $x108) $x102) $x126) $x105)))
 (let (($x99 (and $x103 $x100)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x47 (or false (or false (and (and true (or $x19 $x24)) (or $x67 $x12))))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x132 (and $x8 $x99)))
 (let (($x137 (= $x132 true)))
 (let (($x95 (= $x137 true)))
 (let (($x74 (= $x95 true)))
 (let (($x112 (and $x74 $x13)))
 (let (($x117 (and $x112 $x118)))
 (let (($x163 (and $x117 $x16)))
 (let (($x9 (and $x163 $x185)))
 (let (($x197 (and $x9 $x188)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x43 $x197)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x48 (and $x54 $x78)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x153 (and $x14 $x48)))
 (let (($x193 (=> $x153 $x187)))
 (not $x193)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (forall ((input.ind-%var289X (_ BitVec 32)) )(let ((?x182 (bvadd (bvmul input.ind-%var289X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x204))))
 (=> false (= (_ bv0 32) ?x173))))))
 ))
 (let (($x160 (forall ((input.ind-%var288X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var288X) (bvult input.ind-%var288X input.dst.llvm-%n))))
 ))
 (let (($x70 (and $x160 $x51)))
 (let (($x191 (= true true)))
 (let (($x198 (and $x191 $x70)))
 (let (($x187 (= $x198 true)))
 (let (($x154 (forall ((input.ind-%var283X (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var283X)))
 (=> $x33 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var283X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var282X (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var282X)))
 (= $x33 false)))
 ))
 (let (($x158 (and $x192 $x154)))
 (let (($x188 (= $x158 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x203 (concat ?x202 (concat ?x68 (concat ?x157 ?x30)))))
 (let (($x59 (= ?x203 input.dst.llvm-%n)))
 (let (($x37 (= $x59 true)))
 (let (($x185 (= $x37 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x5 (concat ?x142 (concat ?x139 ?x122)))))
 (let (($x77 (= ?x146 input.dst.llvm-%m)))
 (let (($x131 (= $x77 true)))
 (let (($x16 (= $x131 true)))
 (let (($x115 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x38 (= $x115 true)))
 (let (($x22 (= $x38 true)))
 (let (($x118 (= $x22 true)))
 (let (($x147 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x135 (= $x147 true)))
 (let (($x119 (= $x135 true)))
 (let (($x13 (= $x119 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x61)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x20)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x98 $x64)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x49 $x94)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x89 $x75)))
 (let (($x66 (not $x15)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x91 $x62)))
 (let (($x90 (and (not $x138) $x66)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x18 $x93)))
 (let (($x39 (not $x58)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x32 $x81)))
 (let (($x92 (and (not $x88) $x39)))
 (let (($x103 (and (and (and (and (and (and $x92 $x90) $x106) $x108) $x102) $x126) $x105)))
 (let (($x99 (and $x103 $x100)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x47 (or false (or false (and (and true (or $x19 $x24)) (or $x67 $x12))))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x132 (and $x8 $x99)))
 (let (($x137 (= $x132 true)))
 (let (($x95 (= $x137 true)))
 (let (($x74 (= $x95 true)))
 (let (($x112 (and $x74 $x13)))
 (let (($x117 (and $x112 $x118)))
 (let (($x163 (and $x117 $x16)))
 (let (($x9 (and $x163 $x185)))
 (let (($x197 (and $x9 $x188)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x43 $x197)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x48 (and $x54 $x78)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x153 (and $x14 $x48)))
 (let (($x193 (=> $x153 $x187)))
 (not $x193)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.ind-%var288X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var288X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x36bffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffbffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffbffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x36bfffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffbffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x36bffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffbffff8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x6 (= false true)))
 (let (($x42 (= $x6 true)))
 (let (($x186 (forall ((input.ind-%var303X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var303X)))
 (=> $x169 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var303X) (_ bv0 32)))))
 ))
 (let (($x197 (forall ((input.ind-%var302X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var302X)))
 (= $x169 false)))
 ))
 (let (($x159 (and $x197 $x186)))
 (let (($x182 (= $x159 true)))
 (let (($x185 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x9 (= $x185 true)))
 (let (($x199 (= $x9 true)))
 (let (($x33 (= $x199 true)))
 (let (($x157 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x30 (= $x157 true)))
 (let (($x134 (= $x30 true)))
 (let (($x164 (= $x134 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x139)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x142)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x118 $x121)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x22 $x123)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x147 $x135)))
 (let (($x13 (not $x119)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x97 $x128)))
 (let (($x116 (and (not $x107) $x13)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x100 $x99)))
 (let (($x137 (not $x132)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x110 $x41)))
 (let (($x74 (and (not $x61) $x137)))
 (let (($x16 (and (and (and (and (and (and $x74 $x116) $x115) $x38) $x5) $x17) $x124)))
 (let (($x163 (and $x16 $x122)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x20 (or false (or false (and (and true (or $x49 $x98)) (or $x102 $x144))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x172 (and $x103 $x163)))
 (let (($x202 (= $x172 true)))
 (let (($x148 (= $x202 true)))
 (let (($x68 (= $x148 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x62 (concat ?x39 (concat ?x18 ?x88)))))
 (let (($x89 (= ?x138 input.dst.llvm-%m)))
 (let (($x75 (= $x89 true)))
 (let (($x15 (= $x75 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x12 (concat ?x69 (concat ?x19 ?x31)))))
 (let (($x83 (= ?x28 input.dst.llvm-%n)))
 (let (($x47 (= $x83 true)))
 (let (($x8 (= $x47 true)))
 (let (($x66 (and $x8 $x15)))
 (let (($x151 (and $x66 $x68)))
 (let (($x203 (and $x151 $x164)))
 (let (($x184 (and $x203 $x33)))
 (let (($x166 (and $x184 $x182)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x73 (and $x29 $x166)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x34 (and $x174 $x73)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x35 $x34)))
 (let (($x179 (=> $x177 $x42)))
 (not $x179)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x6 (= false true)))
 (let (($x42 (= $x6 true)))
 (let (($x186 (forall ((input.ind-%var303X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var303X)))
 (=> $x169 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var303X) (_ bv0 32)))))
 ))
 (let (($x197 (forall ((input.ind-%var302X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var302X)))
 (= $x169 false)))
 ))
 (let (($x159 (and $x197 $x186)))
 (let (($x182 (= $x159 true)))
 (let (($x185 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x9 (= $x185 true)))
 (let (($x199 (= $x9 true)))
 (let (($x33 (= $x199 true)))
 (let (($x157 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x30 (= $x157 true)))
 (let (($x134 (= $x30 true)))
 (let (($x164 (= $x134 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x139)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x142)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x118 $x121)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x22 $x123)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x147 $x135)))
 (let (($x13 (not $x119)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x97 $x128)))
 (let (($x116 (and (not $x107) $x13)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x100 $x99)))
 (let (($x137 (not $x132)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x110 $x41)))
 (let (($x74 (and (not $x61) $x137)))
 (let (($x16 (and (and (and (and (and (and $x74 $x116) $x115) $x38) $x5) $x17) $x124)))
 (let (($x163 (and $x16 $x122)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x20 (or false (or false (and (and true (or $x49 $x98)) (or $x102 $x144))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x172 (and $x103 $x163)))
 (let (($x202 (= $x172 true)))
 (let (($x148 (= $x202 true)))
 (let (($x68 (= $x148 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x62 (concat ?x39 (concat ?x18 ?x88)))))
 (let (($x89 (= ?x138 input.dst.llvm-%m)))
 (let (($x75 (= $x89 true)))
 (let (($x15 (= $x75 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x12 (concat ?x69 (concat ?x19 ?x31)))))
 (let (($x83 (= ?x28 input.dst.llvm-%n)))
 (let (($x47 (= $x83 true)))
 (let (($x8 (= $x47 true)))
 (let (($x66 (and $x8 $x15)))
 (let (($x151 (and $x66 $x68)))
 (let (($x203 (and $x151 $x164)))
 (let (($x184 (and $x203 $x33)))
 (let (($x166 (and $x184 $x182)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x73 (and $x29 $x166)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x34 (and $x174 $x73)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x35 $x34)))
 (let (($x179 (=> $x177 $x42)))
 (not $x179)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xae7c5810)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbf6a1814)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbf6a1817)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xae7c5813)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xae7c5810)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbf6a1814)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x08000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10000013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x08000007)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x08000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10000010)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x11 (=> $x172 true)))
 (let (($x48 (= $x11 true)))
 (let (($x80 (= $x48 true)))
 (let (($x50 (forall ((input.ind-%var317X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var317X)))
 (=> $x160 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var317X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var316X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var316X)))
 (= $x160 false)))
 ))
 (let (($x154 (and $x166 $x50)))
 (let (($x168 (= $x154 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x199 (concat ?x37 (concat ?x164 ?x30)))))
 (let (($x184 (= ?x33 input.dst.llvm-%m)))
 (let (($x57 (= $x184 true)))
 (let (($x169 (= $x57 true)))
 (let (($x202 (= $x172 true)))
 (let (($x148 (= $x202 true)))
 (let (($x68 (= $x148 true)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (= $x17 true)))
 (let (($x142 (= $x131 true)))
 (let (($x124 (= $x142 true)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x116)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x119)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x74 $x128)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x137 $x107)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x20 $x103)))
 (let (($x41 (not $x110)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x111 $x126)))
 (let (($x95 (and (not $x114) $x41)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x87 $x143)))
 (let (($x102 (not $x64)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x62 $x58)))
 (let (($x144 (and (not $x98) $x102)))
 (let (($x118 (and (and (and (and (and (and $x144 $x95) $x99) $x132) $x112) $x135) $x13)))
 (let (($x117 (and $x118 $x133)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x101 (or false (or false (and (and true (or $x92 $x138)) (or $x66 $x106))))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x121 (and $x108 $x117)))
 (let (($x123 (= $x121 true)))
 (let (($x5 (= $x123 true)))
 (let (($x77 (= $x5 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x28 (concat ?x19 (concat ?x24 ?x85)))))
 (let (($x47 (= ?x45 input.dst.llvm-%n)))
 (let (($x8 (= $x47 true)))
 (let (($x81 (= $x8 true)))
 (let (($x155 (and $x81 $x77)))
 (let (($x16 (and $x155 $x124)))
 (let (($x151 (and $x16 $x68)))
 (let (($x188 (and $x151 $x169)))
 (let (($x153 (and $x188 $x168)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x192 (and $x23 $x153)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x52 (and $x176 $x192)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x158 (and $x14 $x52)))
 (let (($x40 (=> $x158 $x80)))
 (not $x40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x11 (=> $x172 true)))
 (let (($x48 (= $x11 true)))
 (let (($x80 (= $x48 true)))
 (let (($x50 (forall ((input.ind-%var317X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var317X)))
 (=> $x160 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var317X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var316X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var316X)))
 (= $x160 false)))
 ))
 (let (($x154 (and $x166 $x50)))
 (let (($x168 (= $x154 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x199 (concat ?x37 (concat ?x164 ?x30)))))
 (let (($x184 (= ?x33 input.dst.llvm-%m)))
 (let (($x57 (= $x184 true)))
 (let (($x169 (= $x57 true)))
 (let (($x202 (= $x172 true)))
 (let (($x148 (= $x202 true)))
 (let (($x68 (= $x148 true)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (= $x17 true)))
 (let (($x142 (= $x131 true)))
 (let (($x124 (= $x142 true)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x116)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x119)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x74 $x128)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x137 $x107)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x20 $x103)))
 (let (($x41 (not $x110)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x111 $x126)))
 (let (($x95 (and (not $x114) $x41)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x87 $x143)))
 (let (($x102 (not $x64)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x62 $x58)))
 (let (($x144 (and (not $x98) $x102)))
 (let (($x118 (and (and (and (and (and (and $x144 $x95) $x99) $x132) $x112) $x135) $x13)))
 (let (($x117 (and $x118 $x133)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x101 (or false (or false (and (and true (or $x92 $x138)) (or $x66 $x106))))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x121 (and $x108 $x117)))
 (let (($x123 (= $x121 true)))
 (let (($x5 (= $x123 true)))
 (let (($x77 (= $x5 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x28 (concat ?x19 (concat ?x24 ?x85)))))
 (let (($x47 (= ?x45 input.dst.llvm-%n)))
 (let (($x8 (= $x47 true)))
 (let (($x81 (= $x8 true)))
 (let (($x155 (and $x81 $x77)))
 (let (($x16 (and $x155 $x124)))
 (let (($x151 (and $x16 $x68)))
 (let (($x188 (and $x151 $x169)))
 (let (($x153 (and $x188 $x168)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x192 (and $x23 $x153)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x52 (and $x176 $x192)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x158 (and $x14 $x52)))
 (let (($x40 (=> $x158 $x80)))
 (not $x40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x159 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x179 (= $x159 true)))
 (let (($x157 (forall ((input.ind-%var323X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var323X)))
 (=> $x32 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var323X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var322X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var322X)))
 (= $x32 false)))
 ))
 (let (($x82 (and $x153 $x157)))
 (let (($x186 (= $x82 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x57 (concat ?x185 (concat ?x164 ?x37)))))
 (let (($x188 (= ?x169 input.dst.llvm-%n)))
 (let (($x71 (= $x188 true)))
 (let (($x160 (= $x71 true)))
 (let (($x148 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (= $x148 true)))
 (let (($x151 (= $x68 true)))
 (let (($x9 (= $x151 true)))
 (let (($x16 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x139 (= $x16 true)))
 (let (($x122 (= $x139 true)))
 (let (($x163 (= $x122 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x22)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x147)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (and $x137 $x97)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x38 $x128)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x103 $x110)))
 (let (($x95 (not $x41)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x114 $x61)))
 (let (($x100 (and (not $x20) $x95)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x143 $x64)))
 (let (($x144 (not $x102)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x49 $x18)))
 (let (($x126 (and (not $x87) $x144)))
 (let (($x121 (and (and (and (and (and (and $x126 $x100) $x99) $x132) $x107) $x146) $x135)))
 (let (($x123 (and $x121 $x119)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x58 (or false (or false (and (and true (or $x89 $x75)) (or $x105 $x96))))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x58)))
 (let (($x5 (and $x94 $x123)))
 (let (($x77 (= $x5 true)))
 (let (($x155 (= $x77 true)))
 (let (($x17 (= $x155 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x45 (concat ?x24 (concat ?x69 ?x79)))))
 (let (($x8 (= ?x83 input.dst.llvm-%m)))
 (let (($x81 (= $x8 true)))
 (let (($x39 (= $x81 true)))
 (let (($x131 (and $x39 $x17)))
 (let (($x172 (and $x131 $x163)))
 (let (($x199 (and $x172 $x9)))
 (let (($x182 (and $x199 $x160)))
 (let (($x42 (and $x182 $x186)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (and $x54 $x42)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x197 (and $x181 $x177)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x35 $x197)))
 (let (($x34 (=> $x191 $x179)))
 (not $x34)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x159 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x179 (= $x159 true)))
 (let (($x157 (forall ((input.ind-%var323X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var323X)))
 (=> $x32 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var323X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var322X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var322X)))
 (= $x32 false)))
 ))
 (let (($x82 (and $x153 $x157)))
 (let (($x186 (= $x82 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x57 (concat ?x185 (concat ?x164 ?x37)))))
 (let (($x188 (= ?x169 input.dst.llvm-%n)))
 (let (($x71 (= $x188 true)))
 (let (($x160 (= $x71 true)))
 (let (($x148 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (= $x148 true)))
 (let (($x151 (= $x68 true)))
 (let (($x9 (= $x151 true)))
 (let (($x16 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x139 (= $x16 true)))
 (let (($x122 (= $x139 true)))
 (let (($x163 (= $x122 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x22)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x147)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (and $x137 $x97)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x38 $x128)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x103 $x110)))
 (let (($x95 (not $x41)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x114 $x61)))
 (let (($x100 (and (not $x20) $x95)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x143 $x64)))
 (let (($x144 (not $x102)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x49 $x18)))
 (let (($x126 (and (not $x87) $x144)))
 (let (($x121 (and (and (and (and (and (and $x126 $x100) $x99) $x132) $x107) $x146) $x135)))
 (let (($x123 (and $x121 $x119)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x58 (or false (or false (and (and true (or $x89 $x75)) (or $x105 $x96))))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x58)))
 (let (($x5 (and $x94 $x123)))
 (let (($x77 (= $x5 true)))
 (let (($x155 (= $x77 true)))
 (let (($x17 (= $x155 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x45 (concat ?x24 (concat ?x69 ?x79)))))
 (let (($x8 (= ?x83 input.dst.llvm-%m)))
 (let (($x81 (= $x8 true)))
 (let (($x39 (= $x81 true)))
 (let (($x131 (and $x39 $x17)))
 (let (($x172 (and $x131 $x163)))
 (let (($x199 (and $x172 $x9)))
 (let (($x182 (and $x199 $x160)))
 (let (($x42 (and $x182 $x186)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (and $x54 $x42)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x197 (and $x181 $x177)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x35 $x197)))
 (let (($x34 (=> $x191 $x179)))
 (not $x34)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00044d0c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00020d88)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00044d0f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00020d8b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00044d0c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x01010100)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00020d88)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00020d88) #x00
      #x01))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6d14fefc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffef8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffefb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6d14feff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffef8)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6d14fefc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffef9) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x52)))
 (let (($x73 (= ?x40 input.dst.llvm-%n)))
 (let (($x78 (= $x73 true)))
 (let (($x59 (forall ((input.ind-%var337X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var337X)))
 (=> $x91 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var337X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var336X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var336X)))
 (= $x91 false)))
 ))
 (let (($x50 (and $x42 $x59)))
 (let (($x48 (= $x50 true)))
 (let ((?x185 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x160 (concat ?x71 (concat ?x33 (concat ?x164 ?x185)))))
 (let (($x182 (= ?x160 input.dst.llvm-%n)))
 (let (($x90 (= $x182 true)))
 (let (($x32 (= $x90 true)))
 (let (($x151 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (= $x151 true)))
 (let (($x199 (= $x9 true)))
 (let (($x184 (= $x199 true)))
 (let (($x122 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x163 (= $x122 true)))
 (let (($x172 (= $x163 true)))
 (let (($x202 (= $x172 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x117)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x112)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x38 $x74)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x116 $x97)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x110 $x41)))
 (let (($x100 (not $x95)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x20 $x115)))
 (let (($x99 (and (not $x103) $x100)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x64 $x102)))
 (let (($x126 (not $x144)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x98 $x88)))
 (let (($x61 (and (not $x143) $x126)))
 (let (($x5 (and (and (and (and (and (and $x61 $x99) $x118) $x132) $x128) $x133) $x146)))
 (let (($x77 (and $x5 $x147)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x66)))
 (let (($x18 (or false (or false (and (and true (or $x15 $x106)) (or $x108 $x62))))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x155 (and $x111 $x77)))
 (let (($x17 (= $x155 true)))
 (let (($x131 (= $x17 true)))
 (let (($x142 (= $x131 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x83 (concat ?x69 (concat ?x19 ?x31)))))
 (let (($x81 (= ?x47 input.dst.llvm-%m)))
 (let (($x39 (= $x81 true)))
 (let (($x93 (= $x39 true)))
 (let (($x124 (and $x93 $x142)))
 (let (($x148 (and $x124 $x202)))
 (let (($x57 (and $x148 $x184)))
 (let (($x168 (and $x57 $x32)))
 (let (($x158 (and $x168 $x48)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and $x174 $x158)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x171 $x166)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x14 $x6)))
 (let (($x173 (=> $x154 $x78)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x52 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x52)))
 (let (($x73 (= ?x40 input.dst.llvm-%n)))
 (let (($x78 (= $x73 true)))
 (let (($x59 (forall ((input.ind-%var337X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var337X)))
 (=> $x91 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var337X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var336X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var336X)))
 (= $x91 false)))
 ))
 (let (($x50 (and $x42 $x59)))
 (let (($x48 (= $x50 true)))
 (let ((?x185 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x160 (concat ?x71 (concat ?x33 (concat ?x164 ?x185)))))
 (let (($x182 (= ?x160 input.dst.llvm-%n)))
 (let (($x90 (= $x182 true)))
 (let (($x32 (= $x90 true)))
 (let (($x151 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (= $x151 true)))
 (let (($x199 (= $x9 true)))
 (let (($x184 (= $x199 true)))
 (let (($x122 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x163 (= $x122 true)))
 (let (($x172 (= $x163 true)))
 (let (($x202 (= $x172 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x117)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x112)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x38 $x74)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x116 $x97)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x110 $x41)))
 (let (($x100 (not $x95)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x20 $x115)))
 (let (($x99 (and (not $x103) $x100)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x64 $x102)))
 (let (($x126 (not $x144)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x98 $x88)))
 (let (($x61 (and (not $x143) $x126)))
 (let (($x5 (and (and (and (and (and (and $x61 $x99) $x118) $x132) $x128) $x133) $x146)))
 (let (($x77 (and $x5 $x147)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x66)))
 (let (($x18 (or false (or false (and (and true (or $x15 $x106)) (or $x108 $x62))))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x155 (and $x111 $x77)))
 (let (($x17 (= $x155 true)))
 (let (($x131 (= $x17 true)))
 (let (($x142 (= $x131 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x83 (concat ?x69 (concat ?x19 ?x31)))))
 (let (($x81 (= ?x47 input.dst.llvm-%m)))
 (let (($x39 (= $x81 true)))
 (let (($x93 (= $x39 true)))
 (let (($x124 (and $x93 $x142)))
 (let (($x148 (and $x124 $x202)))
 (let (($x57 (and $x148 $x184)))
 (let (($x168 (and $x57 $x32)))
 (let (($x158 (and $x168 $x48)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and $x174 $x158)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x171 $x166)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x14 $x6)))
 (let (($x173 (=> $x154 $x78)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x153 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x82 (bvmul ?x153 (_ bv256 16))))
 (let (($x197 (= ?x82 ?x34)))
 (let (($x204 (= $x197 true)))
 (let (($x189 (forall ((input.ind-%var343X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var343X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var343X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var342X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var342X)))
 (= $x67 false)))
 ))
 (let (($x92 (and $x158 $x189)))
 (let (($x86 (= $x92 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x90 (concat ?x169 (concat ?x164 ?x33)))))
 (let (($x168 (= ?x32 input.dst.llvm-%m)))
 (let (($x120 (= $x168 true)))
 (let (($x91 (= $x120 true)))
 (let (($x199 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x184 (= $x199 true)))
 (let (($x57 (= $x184 true)))
 (let (($x188 (= $x57 true)))
 (let (($x202 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x148 (= $x202 true)))
 (let (($x68 (= $x148 true)))
 (let (($x151 (= $x68 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x123)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x107)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x38)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x116 $x137)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x22 $x74)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x41 $x95)))
 (let (($x99 (not $x100)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x103 $x13)))
 (let (($x118 (and (not $x110) $x99)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x102 $x144)))
 (let (($x61 (not $x126)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x87 $x138)))
 (let (($x115 (and (not $x64) $x61)))
 (let (($x155 (and (and (and (and (and (and $x115 $x118) $x72) $x132) $x97) $x119) $x133)))
 (let (($x17 (and $x155 $x112)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x88 (or false (or false (and (and true (or $x26 $x96)) (or $x94 $x49))))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x88)))
 (let (($x131 (and $x114 $x17)))
 (let (($x142 (= $x131 true)))
 (let (($x124 (= $x142 true)))
 (let (($x16 (= $x124 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x47 (concat ?x19 (concat ?x24 ?x85)))))
 (let (($x39 (= ?x8 input.dst.llvm-%n)))
 (let (($x93 (= $x39 true)))
 (let (($x65 (= $x93 true)))
 (let (($x139 (and $x65 $x16)))
 (let (($x9 (and $x139 $x151)))
 (let (($x71 (and $x9 $x188)))
 (let (($x186 (and $x71 $x91)))
 (let (($x203 (and $x186 $x86)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x157 (and $x176 $x203)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x179 (and $x43 $x157)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x35 $x179)))
 (let (($x192 (=> $x191 $x204)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x153 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x82 (bvmul ?x153 (_ bv256 16))))
 (let (($x197 (= ?x82 ?x34)))
 (let (($x204 (= $x197 true)))
 (let (($x189 (forall ((input.ind-%var343X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var343X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var343X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var342X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var342X)))
 (= $x67 false)))
 ))
 (let (($x92 (and $x158 $x189)))
 (let (($x86 (= $x92 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x90 (concat ?x169 (concat ?x164 ?x33)))))
 (let (($x168 (= ?x32 input.dst.llvm-%m)))
 (let (($x120 (= $x168 true)))
 (let (($x91 (= $x120 true)))
 (let (($x199 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x184 (= $x199 true)))
 (let (($x57 (= $x184 true)))
 (let (($x188 (= $x57 true)))
 (let (($x202 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x148 (= $x202 true)))
 (let (($x68 (= $x148 true)))
 (let (($x151 (= $x68 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x123)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x107)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x38)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x116 $x137)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x22 $x74)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x41 $x95)))
 (let (($x99 (not $x100)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x103 $x13)))
 (let (($x118 (and (not $x110) $x99)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x102 $x144)))
 (let (($x61 (not $x126)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x87 $x138)))
 (let (($x115 (and (not $x64) $x61)))
 (let (($x155 (and (and (and (and (and (and $x115 $x118) $x72) $x132) $x97) $x119) $x133)))
 (let (($x17 (and $x155 $x112)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x88 (or false (or false (and (and true (or $x26 $x96)) (or $x94 $x49))))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x88)))
 (let (($x131 (and $x114 $x17)))
 (let (($x142 (= $x131 true)))
 (let (($x124 (= $x142 true)))
 (let (($x16 (= $x124 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x47 (concat ?x19 (concat ?x24 ?x85)))))
 (let (($x39 (= ?x8 input.dst.llvm-%n)))
 (let (($x93 (= $x39 true)))
 (let (($x65 (= $x93 true)))
 (let (($x139 (and $x65 $x16)))
 (let (($x9 (and $x139 $x151)))
 (let (($x71 (and $x9 $x188)))
 (let (($x186 (and $x71 $x91)))
 (let (($x203 (and $x186 $x86)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x157 (and $x176 $x203)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x179 (and $x43 $x157)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x35 $x179)))
 (let (($x192 (=> $x191 $x204)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x159 (= (_ bv0 2) ?x42)))
 (let (($x50 (= $x159 true)))
 (let (($x192 (forall ((input.ind-%var357X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var357X)))
 (=> $x173 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var357X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var356X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var356X)))
 (= $x173 false)))
 ))
 (let (($x194 (and $x203 $x192)))
 (let (($x89 (= $x194 true)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x120 (concat ?x160 (concat ?x164 ?x169)))))
 (let (($x186 (= ?x91 input.dst.llvm-%m)))
 (let (($x63 (= $x186 true)))
 (let (($x67 (= $x63 true)))
 (let (($x57 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x188 (= $x57 true)))
 (let (($x71 (= $x188 true)))
 (let (($x182 (= $x71 true)))
 (let (($x172 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x202 (= $x172 true)))
 (let (($x148 (= $x202 true)))
 (let (($x68 (= $x148 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x77)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x128)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x116)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (and $x22 $x38)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x117 $x137)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x95 $x100)))
 (let (($x118 (not $x99)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x110 $x135)))
 (let (($x121 (and (not $x41) $x118)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x144 $x126)))
 (let (($x115 (not $x61)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x143 $x75)))
 (let (($x13 (and (not $x102) $x115)))
 (let (($x131 (and (and (and (and (and (and $x13 $x121) $x5) $x132) $x74) $x147) $x119)))
 (let (($x142 (and $x131 $x107)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x138 (or false (or false (and (and true (or $x101 $x62)) (or $x111 $x98))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x124 (and $x20 $x142)))
 (let (($x16 (= $x124 true)))
 (let (($x139 (= $x16 true)))
 (let (($x122 (= $x139 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x8 (concat ?x24 (concat ?x69 ?x79)))))
 (let (($x93 (= ?x81 input.dst.llvm-%n)))
 (let (($x65 (= $x93 true)))
 (let (($x66 (= $x65 true)))
 (let (($x163 (and $x66 $x122)))
 (let (($x151 (and $x163 $x68)))
 (let (($x90 (and $x151 $x182)))
 (let (($x48 (and $x90 $x67)))
 (let (($x30 (and $x48 $x89)))
 (let (($x181 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x84 (and $x181 $x30)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x59 (and $x29 $x84)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x52 (and $x14 $x59)))
 (let (($x40 (=> $x52 $x50)))
 (not $x40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x159 (= (_ bv0 2) ?x42)))
 (let (($x50 (= $x159 true)))
 (let (($x192 (forall ((input.ind-%var357X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var357X)))
 (=> $x173 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var357X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var356X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var356X)))
 (= $x173 false)))
 ))
 (let (($x194 (and $x203 $x192)))
 (let (($x89 (= $x194 true)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x120 (concat ?x160 (concat ?x164 ?x169)))))
 (let (($x186 (= ?x91 input.dst.llvm-%m)))
 (let (($x63 (= $x186 true)))
 (let (($x67 (= $x63 true)))
 (let (($x57 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x188 (= $x57 true)))
 (let (($x71 (= $x188 true)))
 (let (($x182 (= $x71 true)))
 (let (($x172 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x202 (= $x172 true)))
 (let (($x148 (= $x202 true)))
 (let (($x68 (= $x148 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x77)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x128)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x116)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (and $x22 $x38)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x117 $x137)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x95 $x100)))
 (let (($x118 (not $x99)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x110 $x135)))
 (let (($x121 (and (not $x41) $x118)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x144 $x126)))
 (let (($x115 (not $x61)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x143 $x75)))
 (let (($x13 (and (not $x102) $x115)))
 (let (($x131 (and (and (and (and (and (and $x13 $x121) $x5) $x132) $x74) $x147) $x119)))
 (let (($x142 (and $x131 $x107)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x138 (or false (or false (and (and true (or $x101 $x62)) (or $x111 $x98))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x124 (and $x20 $x142)))
 (let (($x16 (= $x124 true)))
 (let (($x139 (= $x16 true)))
 (let (($x122 (= $x139 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x8 (concat ?x24 (concat ?x69 ?x79)))))
 (let (($x93 (= ?x81 input.dst.llvm-%n)))
 (let (($x65 (= $x93 true)))
 (let (($x66 (= $x65 true)))
 (let (($x163 (and $x66 $x122)))
 (let (($x151 (and $x163 $x68)))
 (let (($x90 (and $x151 $x182)))
 (let (($x48 (and $x90 $x67)))
 (let (($x30 (and $x48 $x89)))
 (let (($x181 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x84 (and $x181 $x30)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x59 (and $x29 $x84)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x52 (and $x14 $x59)))
 (let (($x40 (=> $x52 $x50)))
 (not $x40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x82 (= $x92 true)))
 (let (($x179 (= $x82 true)))
 (let (($x15 (forall ((input.ind-%var363X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var363X)))
 (=> $x204 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var363X) (_ bv0 32)))))
 ))
 (let (($x30 (forall ((input.ind-%var362X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var362X)))
 (= $x204 false)))
 ))
 (let (($x37 (and $x30 $x15)))
 (let (($x46 (= $x37 true)))
 (let (($x67 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x48 (= $x67 true)))
 (let (($x78 (= $x48 true)))
 (let (($x173 (= $x78 true)))
 (let (($x33 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x32 (= $x33 true)))
 (let (($x91 (= $x32 true)))
 (let (($x186 (= $x91 true)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x151)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x148)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x124 $x139)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x142 $x122)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x97 $x147)))
 (let (($x128 (not $x17)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x137 $x74)))
 (let (($x131 (and (not $x112) $x128)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x132 $x123)))
 (let (($x22 (not $x117)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x143 $x75)))
 (let (($x38 (and (not $x155) $x22)))
 (let (($x182 (and (and (and (and (and (and $x38 $x131) $x77) $x107) $x163) $x202) $x68)))
 (let (($x90 (and $x182 $x9)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x133 (or false (or false (and (and true (or $x115 $x13)) (or $x95 $x100))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x133)))
 (let (($x168 (and $x5 $x90)))
 (let (($x120 (= $x168 true)))
 (let (($x185 (= $x120 true)))
 (let (($x160 (= $x185 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x111 (concat ?x94 (concat ?x101 ?x106)))))
 (let (($x88 (= ?x18 input.dst.llvm-%m)))
 (let (($x114 (= $x88 true)))
 (let (($x87 (= $x114 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x81 (concat ?x69 (concat ?x19 ?x31)))))
 (let (($x65 (= ?x39 input.dst.llvm-%n)))
 (let (($x66 (= $x65 true)))
 (let (($x105 (= $x66 true)))
 (let (($x138 (and $x105 $x87)))
 (let (($x134 (and $x138 $x160)))
 (let (($x63 (and $x134 $x186)))
 (let (($x86 (and $x63 $x173)))
 (let (($x189 (and $x86 $x46)))
 (let (($x171 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (and $x171 $x189)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x23 $x11)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x158 (and $x35 $x191)))
 (let (($x34 (=> $x158 $x179)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x82 (= $x92 true)))
 (let (($x179 (= $x82 true)))
 (let (($x15 (forall ((input.ind-%var363X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var363X)))
 (=> $x204 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var363X) (_ bv0 32)))))
 ))
 (let (($x30 (forall ((input.ind-%var362X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var362X)))
 (= $x204 false)))
 ))
 (let (($x37 (and $x30 $x15)))
 (let (($x46 (= $x37 true)))
 (let (($x67 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x48 (= $x67 true)))
 (let (($x78 (= $x48 true)))
 (let (($x173 (= $x78 true)))
 (let (($x33 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x32 (= $x33 true)))
 (let (($x91 (= $x32 true)))
 (let (($x186 (= $x91 true)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x151)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x148)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x124 $x139)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x142 $x122)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x97 $x147)))
 (let (($x128 (not $x17)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x137 $x74)))
 (let (($x131 (and (not $x112) $x128)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x132 $x123)))
 (let (($x22 (not $x117)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x143 $x75)))
 (let (($x38 (and (not $x155) $x22)))
 (let (($x182 (and (and (and (and (and (and $x38 $x131) $x77) $x107) $x163) $x202) $x68)))
 (let (($x90 (and $x182 $x9)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x133 (or false (or false (and (and true (or $x115 $x13)) (or $x95 $x100))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x133)))
 (let (($x168 (and $x5 $x90)))
 (let (($x120 (= $x168 true)))
 (let (($x185 (= $x120 true)))
 (let (($x160 (= $x185 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x111 (concat ?x94 (concat ?x101 ?x106)))))
 (let (($x88 (= ?x18 input.dst.llvm-%m)))
 (let (($x114 (= $x88 true)))
 (let (($x87 (= $x114 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x81 (concat ?x69 (concat ?x19 ?x31)))))
 (let (($x65 (= ?x39 input.dst.llvm-%n)))
 (let (($x66 (= $x65 true)))
 (let (($x105 (= $x66 true)))
 (let (($x138 (and $x105 $x87)))
 (let (($x134 (and $x138 $x160)))
 (let (($x63 (and $x134 $x186)))
 (let (($x86 (and $x63 $x173)))
 (let (($x189 (and $x86 $x46)))
 (let (($x171 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (and $x171 $x189)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x23 $x11)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x158 (and $x35 $x191)))
 (let (($x34 (=> $x158 $x179)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00020004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00020007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00020004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000020) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x488370ac)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffff8a8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffff8ab)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x488370af)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x488370ac)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffff8a8)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x488370ac) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x194 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x159 (= $x194 true)))
 (let (($x59 (= $x159 true)))
 (let (($x20 (forall ((input.ind-%var377X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var377X)))
 (=> $x6 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var377X) (_ bv0 32)))))
 ))
 (let (($x189 (forall ((input.ind-%var376X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var376X)))
 (= $x6 false)))
 ))
 (let (($x26 (and $x189 $x20)))
 (let (($x12 (= $x26 true)))
 (let (($x173 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x86 (= $x173 true)))
 (let (($x197 (= $x86 true)))
 (let (($x204 (= $x197 true)))
 (let (($x186 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x63 (= $x186 true)))
 (let (($x67 (= $x63 true)))
 (let (($x48 (= $x67 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x148)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x202)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x124 $x139)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x142 $x122)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x17 $x128)))
 (let (($x199 (not $x131)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x119 $x97)))
 (let (($x184 (and (not $x147) $x199)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x117 $x22)))
 (let (($x137 (not $x38)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x144 $x61)))
 (let (($x112 (and (not $x123) $x137)))
 (let (($x120 (and (and (and (and (and (and $x112 $x184) $x107) $x57) $x163) $x172) $x71)))
 (let (($x185 (and $x120 $x68)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x155 (or false (or false (and (and true (or $x41 $x95)) (or $x121 $x133))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x160 (and $x132 $x185)))
 (let (($x134 (= $x160 true)))
 (let (($x164 (= $x134 true)))
 (let (($x169 (= $x164 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x98 (concat ?x96 (concat ?x108 ?x62)))))
 (let (($x87 (= ?x88 input.dst.llvm-%m)))
 (let (($x138 (= $x87 true)))
 (let (($x102 (= $x138 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x39 (concat ?x19 (concat ?x24 ?x85)))))
 (let (($x66 (= ?x93 input.dst.llvm-%n)))
 (let (($x105 (= $x66 true)))
 (let (($x64 (= $x105 true)))
 (let (($x103 (and $x64 $x102)))
 (let (($x33 (and $x103 $x169)))
 (let (($x78 (and $x33 $x48)))
 (let (($x89 (and $x78 $x204)))
 (let (($x192 (and $x89 $x12)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (and $x43 $x192)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x52 (and $x54 $x42)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x14 $x52)))
 (let (($x50 (=> $x203 $x59)))
 (not $x50))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x194 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x159 (= $x194 true)))
 (let (($x59 (= $x159 true)))
 (let (($x20 (forall ((input.ind-%var377X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var377X)))
 (=> $x6 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var377X) (_ bv0 32)))))
 ))
 (let (($x189 (forall ((input.ind-%var376X (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var376X)))
 (= $x6 false)))
 ))
 (let (($x26 (and $x189 $x20)))
 (let (($x12 (= $x26 true)))
 (let (($x173 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x86 (= $x173 true)))
 (let (($x197 (= $x86 true)))
 (let (($x204 (= $x197 true)))
 (let (($x186 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x63 (= $x186 true)))
 (let (($x67 (= $x63 true)))
 (let (($x48 (= $x67 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x148)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x202)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x124 $x139)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x142 $x122)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x17 $x128)))
 (let (($x199 (not $x131)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x119 $x97)))
 (let (($x184 (and (not $x147) $x199)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x117 $x22)))
 (let (($x137 (not $x38)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x144 $x61)))
 (let (($x112 (and (not $x123) $x137)))
 (let (($x120 (and (and (and (and (and (and $x112 $x184) $x107) $x57) $x163) $x172) $x71)))
 (let (($x185 (and $x120 $x68)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x155 (or false (or false (and (and true (or $x41 $x95)) (or $x121 $x133))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x160 (and $x132 $x185)))
 (let (($x134 (= $x160 true)))
 (let (($x164 (= $x134 true)))
 (let (($x169 (= $x164 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x98 (concat ?x96 (concat ?x108 ?x62)))))
 (let (($x87 (= ?x88 input.dst.llvm-%m)))
 (let (($x138 (= $x87 true)))
 (let (($x102 (= $x138 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x39 (concat ?x19 (concat ?x24 ?x85)))))
 (let (($x66 (= ?x93 input.dst.llvm-%n)))
 (let (($x105 (= $x66 true)))
 (let (($x64 (= $x105 true)))
 (let (($x103 (and $x64 $x102)))
 (let (($x33 (and $x103 $x169)))
 (let (($x78 (and $x33 $x48)))
 (let (($x89 (and $x78 $x204)))
 (let (($x192 (and $x89 $x12)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (and $x43 $x192)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x52 (and $x54 $x42)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x14 $x52)))
 (let (($x50 (=> $x203 $x59)))
 (not $x50))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000010)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000013)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x78cc74d0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x78cc74d3)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x78cc74d0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x37 (= $x154 true)))
 (let (($x82 (= $x37 true)))
 (let (($x72 (forall ((input.ind-%var391X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var391X)))
 (=> $x166 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var391X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var390X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var390X)))
 (= $x166 false)))
 ))
 (let (($x49 (and $x192 $x72)))
 (let (($x28 (= $x49 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x204 (concat ?x197 (concat ?x78 (concat ?x63 ?x91)))))
 (let (($x89 (= ?x204 input.dst.llvm-%n)))
 (let (($x40 (= $x89 true)))
 (let (($x6 (= $x40 true)))
 (let (($x160 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x134 (= $x160 true)))
 (let (($x164 (= $x134 true)))
 (let (($x169 (= $x164 true)))
 (let (($x202 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x71 (= $x202 true)))
 (let (($x120 (= $x71 true)))
 (let (($x148 (= $x120 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x184)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x131)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x119)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (and $x112 $x97)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x137 $x147)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x155 $x132)))
 (let (($x61 (not $x144)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x5 $x143)))
 (let (($x74 (and (not $x75) $x61)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x146 $x100)))
 (let (($x121 (not $x99)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x98 $x106)))
 (let (($x133 (and (not $x95) $x121)))
 (let (($x124 (and (and (and (and (and (and $x133 $x74) $x117) $x38) $x77) $x128) $x199)))
 (let (($x16 (and $x124 $x182)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x135 (or false (or false (and (and true (or $x58 $x88)) (or $x103 $x115))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x139 (and $x110 $x16)))
 (let (($x122 (= $x139 true)))
 (let (($x163 (= $x122 true)))
 (let (($x90 (= $x163 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x93 (concat ?x24 (concat ?x69 ?x79)))))
 (let (($x105 (= ?x65 input.dst.llvm-%m)))
 (let (($x64 (= $x105 true)))
 (let (($x111 (= $x64 true)))
 (let (($x188 (and $x111 $x90)))
 (let (($x68 (and $x188 $x148)))
 (let (($x33 (and $x68 $x169)))
 (let (($x46 (and $x33 $x6)))
 (let (($x15 (and $x46 $x28)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x29 $x15)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x174 $x92)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x30 (and $x35 $x158)))
 (let (($x191 (=> $x30 $x82)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x37 (= $x154 true)))
 (let (($x82 (= $x37 true)))
 (let (($x72 (forall ((input.ind-%var391X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var391X)))
 (=> $x166 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var391X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var390X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var390X)))
 (= $x166 false)))
 ))
 (let (($x49 (and $x192 $x72)))
 (let (($x28 (= $x49 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x204 (concat ?x197 (concat ?x78 (concat ?x63 ?x91)))))
 (let (($x89 (= ?x204 input.dst.llvm-%n)))
 (let (($x40 (= $x89 true)))
 (let (($x6 (= $x40 true)))
 (let (($x160 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x134 (= $x160 true)))
 (let (($x164 (= $x134 true)))
 (let (($x169 (= $x164 true)))
 (let (($x202 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x71 (= $x202 true)))
 (let (($x120 (= $x71 true)))
 (let (($x148 (= $x120 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x184)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x131)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x119)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (and $x112 $x97)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x137 $x147)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x155 $x132)))
 (let (($x61 (not $x144)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x5 $x143)))
 (let (($x74 (and (not $x75) $x61)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x146 $x100)))
 (let (($x121 (not $x99)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x98 $x106)))
 (let (($x133 (and (not $x95) $x121)))
 (let (($x124 (and (and (and (and (and (and $x133 $x74) $x117) $x38) $x77) $x128) $x199)))
 (let (($x16 (and $x124 $x182)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x135 (or false (or false (and (and true (or $x58 $x88)) (or $x103 $x115))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x139 (and $x110 $x16)))
 (let (($x122 (= $x139 true)))
 (let (($x163 (= $x122 true)))
 (let (($x90 (= $x163 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x93 (concat ?x24 (concat ?x69 ?x79)))))
 (let (($x105 (= ?x65 input.dst.llvm-%m)))
 (let (($x64 (= $x105 true)))
 (let (($x111 (= $x64 true)))
 (let (($x188 (and $x111 $x90)))
 (let (($x68 (and $x188 $x148)))
 (let (($x33 (and $x68 $x169)))
 (let (($x46 (and $x33 $x6)))
 (let (($x15 (and $x46 $x28)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x29 $x15)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x174 $x92)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x30 (and $x35 $x158)))
 (let (($x191 (=> $x30 $x82)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x196 (forall ((input.ind-%var403X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var403X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x76))))
 (let ((?x125 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var403X)))
 (let (($x59 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var403X)))
 (=> $x59 (= ?x125 ?x178))))))))
 ))
 (let (($x161 (forall ((input.ind-%var402X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var402X)))
 (= $x59 (and (bvule (_ bv0 32) input.ind-%var402X) (bvult input.ind-%var402X (_ bv0 32))))))
 ))
 (let (($x200 (and $x161 $x196)))
 (let (($x26 (= true true)))
 (let (($x156 (and $x26 $x200)))
 (let (($x21 (= $x156 true)))
 (let (($x45 (forall ((input.ind-%var397X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var397X)))
 (=> $x157 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var397X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var396X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var396X)))
 (= $x157 false)))
 ))
 (let (($x32 (and $x15 $x45)))
 (let (($x20 (= $x32 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x40 (concat ?x173 (concat ?x63 ?x78)))))
 (let (($x46 (= ?x6 input.dst.llvm-%m)))
 (let (($x34 (= $x46 true)))
 (let (($x166 (= $x34 true)))
 (let (($x164 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x169 (= $x164 true)))
 (let (($x33 (= $x169 true)))
 (let (($x86 (= $x33 true)))
 (let (($x202 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x71 (= $x202 true)))
 (let (($x120 (= $x71 true)))
 (let (($x148 (= $x120 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x142)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x17)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x112)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x137 $x119)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x57 $x97)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x132 $x144)))
 (let (($x74 (not $x61)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x75 $x123)))
 (let (($x117 (and (not $x155) $x74)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x100 $x99)))
 (let (($x133 (not $x121)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x41 $x108)))
 (let (($x143 (and (not $x146) $x133)))
 (let (($x139 (and (and (and (and (and (and $x143 $x117) $x22) $x38) $x147) $x9) $x128)))
 (let (($x122 (and $x139 $x131)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x106 (or false (or false (and (and true (or $x87 $x138)) (or $x116 $x13))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x163 (and $x118 $x122)))
 (let (($x90 (= $x163 true)))
 (let (($x188 (= $x90 true)))
 (let (($x172 (= $x188 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x65 (concat ?x69 (concat ?x19 ?x31)))))
 (let (($x64 (= ?x66 input.dst.llvm-%n)))
 (let (($x111 (= $x64 true)))
 (let (($x96 (= $x111 true)))
 (let (($x168 (and $x96 $x172)))
 (let (($x68 (and $x168 $x148)))
 (let (($x197 (and $x68 $x86)))
 (let (($x12 (and $x197 $x166)))
 (let (($x194 (and $x12 $x20)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and $x23 $x194)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x176 $x203)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x80 (and $x14 $x189)))
 (let (($x145 (=> $x80 $x21)))
 (not $x145)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x196 (forall ((input.ind-%var403X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var403X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x76))))
 (let ((?x125 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var403X)))
 (let (($x59 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var403X)))
 (=> $x59 (= ?x125 ?x178))))))))
 ))
 (let (($x161 (forall ((input.ind-%var402X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var402X)))
 (= $x59 (and (bvule (_ bv0 32) input.ind-%var402X) (bvult input.ind-%var402X (_ bv0 32))))))
 ))
 (let (($x200 (and $x161 $x196)))
 (let (($x26 (= true true)))
 (let (($x156 (and $x26 $x200)))
 (let (($x21 (= $x156 true)))
 (let (($x45 (forall ((input.ind-%var397X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var397X)))
 (=> $x157 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var397X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var396X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var396X)))
 (= $x157 false)))
 ))
 (let (($x32 (and $x15 $x45)))
 (let (($x20 (= $x32 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x40 (concat ?x173 (concat ?x63 ?x78)))))
 (let (($x46 (= ?x6 input.dst.llvm-%m)))
 (let (($x34 (= $x46 true)))
 (let (($x166 (= $x34 true)))
 (let (($x164 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x169 (= $x164 true)))
 (let (($x33 (= $x169 true)))
 (let (($x86 (= $x33 true)))
 (let (($x202 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x71 (= $x202 true)))
 (let (($x120 (= $x71 true)))
 (let (($x148 (= $x120 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x142)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x17)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x112)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x137 $x119)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x57 $x97)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x132 $x144)))
 (let (($x74 (not $x61)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x75 $x123)))
 (let (($x117 (and (not $x155) $x74)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x100 $x99)))
 (let (($x133 (not $x121)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x41 $x108)))
 (let (($x143 (and (not $x146) $x133)))
 (let (($x139 (and (and (and (and (and (and $x143 $x117) $x22) $x38) $x147) $x9) $x128)))
 (let (($x122 (and $x139 $x131)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x106 (or false (or false (and (and true (or $x87 $x138)) (or $x116 $x13))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x163 (and $x118 $x122)))
 (let (($x90 (= $x163 true)))
 (let (($x188 (= $x90 true)))
 (let (($x172 (= $x188 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x65 (concat ?x69 (concat ?x19 ?x31)))))
 (let (($x64 (= ?x66 input.dst.llvm-%n)))
 (let (($x111 (= $x64 true)))
 (let (($x96 (= $x111 true)))
 (let (($x168 (and $x96 $x172)))
 (let (($x68 (and $x168 $x148)))
 (let (($x197 (and $x68 $x86)))
 (let (($x12 (and $x197 $x166)))
 (let (($x194 (and $x12 $x20)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and $x23 $x194)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x176 $x203)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x80 (and $x14 $x189)))
 (let (($x145 (=> $x80 $x21)))
 (not $x145)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00009b64)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80001de0)
  (define-fun input.ind-%var403X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x48000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00009b67)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80001de3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80001de0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00009b64)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80001de3) #x48
    (ite (= x!0 #x48000003) #x02
      #x00)))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var402X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var403X!1 () (_ BitVec 32)
    #x10bfffc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf173fffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf174dffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x018000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf174dfff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf173ffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf173fffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf174dffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf173fffc) #xf8
    (ite (= x!0 #xf173ffff) #x01
    (ite (= x!0 #x447ffffa) #x02
    (ite (= x!0 #xf173fffe) #x80
      #x00)))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (forall ((input.ind-%var431X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var431X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x165))))
 (let ((?x94 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var431X)))
 (let (($x127 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var431X)))
 (=> $x127 (= ?x94 ?x52))))))))
 ))
 (let (($x21 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var430X)))
 (= $x127 (and (bvule (_ bv0 32) input.ind-%var430X) (bvult input.ind-%var430X input.dst.llvm-%m)))))
 ))
 (let (($x191 (and $x21 $x158)))
 (let (($x180 (= true true)))
 (let (($x167 (and $x180 $x191)))
 (let (($x36 (= $x167 true)))
 (let (($x161 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var424X)))
 (= $x18 false)))
 ))
 (let (($x59 (forall ((input.ind-%var425X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var425X)))
 (=> $x18 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var425X) (_ bv0 32)))))
 ))
 (let (($x125 (and $x59 $x161)))
 (let (($x136 (= $x125 true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x34 (concat ?x204 (concat ?x63 ?x173)))))
 (let (($x12 (= ?x166 input.dst.llvm-%m)))
 (let (($x50 (= $x12 true)))
 (let (($x157 (= $x50 true)))
 (let (($x33 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x86 (= $x33 true)))
 (let (($x197 (= $x86 true)))
 (let (($x89 (= $x197 true)))
 (let (($x120 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x148 (= $x120 true)))
 (let (($x68 (= $x148 true)))
 (let (($x185 (= $x68 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x16)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x77)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (and $x57 $x112)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x184 $x119)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x144 $x61)))
 (let (($x117 (not $x74)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x155 $x107)))
 (let (($x151 (and (not $x132) $x117)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x99 $x121)))
 (let (($x143 (not $x133)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x95 $x62)))
 (let (($x123 (and (not $x100) $x143)))
 (let (($x163 (and (and (and (and (and (and $x123 $x151) $x124) $x38) $x97) $x182) $x9)))
 (let (($x90 (and $x163 $x17)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x103)))
 (let (($x108 (or false (or false (and (and true (or $x102 $x115)) (or $x110 $x98))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x188 (and $x5 $x90)))
 (let (($x172 (= $x188 true)))
 (let (($x168 (= $x172 true)))
 (let (($x202 (= $x168 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x66 (concat ?x19 (concat ?x24 ?x85)))))
 (let (($x111 (= ?x105 input.dst.llvm-%n)))
 (let (($x96 (= $x111 true)))
 (let (($x101 (= $x96 true)))
 (let (($x71 (and $x101 $x202)))
 (let (($x160 (and $x71 $x185)))
 (let (($x40 (and $x160 $x89)))
 (let (($x28 (and $x40 $x157)))
 (let (($x190 (and $x28 $x136)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and $x54 $x190)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x181 $x152)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x183 (and $x35 $x195)))
 (let (($x149 (=> $x183 $x36)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (forall ((input.ind-%var431X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var431X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x165))))
 (let ((?x94 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var431X)))
 (let (($x127 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var431X)))
 (=> $x127 (= ?x94 ?x52))))))))
 ))
 (let (($x21 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var430X)))
 (= $x127 (and (bvule (_ bv0 32) input.ind-%var430X) (bvult input.ind-%var430X input.dst.llvm-%m)))))
 ))
 (let (($x191 (and $x21 $x158)))
 (let (($x180 (= true true)))
 (let (($x167 (and $x180 $x191)))
 (let (($x36 (= $x167 true)))
 (let (($x161 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var424X)))
 (= $x18 false)))
 ))
 (let (($x59 (forall ((input.ind-%var425X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var425X)))
 (=> $x18 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var425X) (_ bv0 32)))))
 ))
 (let (($x125 (and $x59 $x161)))
 (let (($x136 (= $x125 true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x34 (concat ?x204 (concat ?x63 ?x173)))))
 (let (($x12 (= ?x166 input.dst.llvm-%m)))
 (let (($x50 (= $x12 true)))
 (let (($x157 (= $x50 true)))
 (let (($x33 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x86 (= $x33 true)))
 (let (($x197 (= $x86 true)))
 (let (($x89 (= $x197 true)))
 (let (($x120 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x148 (= $x120 true)))
 (let (($x68 (= $x148 true)))
 (let (($x185 (= $x68 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x16)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x77)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (and $x57 $x112)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x184 $x119)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x144 $x61)))
 (let (($x117 (not $x74)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x155 $x107)))
 (let (($x151 (and (not $x132) $x117)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x99 $x121)))
 (let (($x143 (not $x133)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x95 $x62)))
 (let (($x123 (and (not $x100) $x143)))
 (let (($x163 (and (and (and (and (and (and $x123 $x151) $x124) $x38) $x97) $x182) $x9)))
 (let (($x90 (and $x163 $x17)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x103)))
 (let (($x108 (or false (or false (and (and true (or $x102 $x115)) (or $x110 $x98))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x188 (and $x5 $x90)))
 (let (($x172 (= $x188 true)))
 (let (($x168 (= $x172 true)))
 (let (($x202 (= $x168 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x66 (concat ?x19 (concat ?x24 ?x85)))))
 (let (($x111 (= ?x105 input.dst.llvm-%n)))
 (let (($x96 (= $x111 true)))
 (let (($x101 (= $x96 true)))
 (let (($x71 (and $x101 $x202)))
 (let (($x160 (and $x71 $x185)))
 (let (($x40 (and $x160 $x89)))
 (let (($x28 (and $x40 $x157)))
 (let (($x190 (and $x28 $x136)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and $x54 $x190)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x181 $x152)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x183 (and $x35 $x195)))
 (let (($x149 (=> $x183 $x36)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02140404)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x402a0200)
  (define-fun input.ind-%var431X!1 () (_ BitVec 32)
    #x0808088a)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xc04009c0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02140407)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x402a0203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x402a0200)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02140404)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x402a0203) #xc0
    (ite (= x!0 #x402a0202) #x40
    (ite (= x!0 #x402a0200) #xc0
    (ite (= x!0 #x402a0201) #x09
      #x00)))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x04000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var430X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffec4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9edabff0)
  (define-fun input.ind-%var431X!1 () (_ BitVec 32)
    #x07024080)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xa0c040b8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9edabff3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffffec7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffec4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9edabff0)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffec6) #xc0
    (ite (= x!0 #xfffffec4) #xb8
    (ite (= x!0 #xfffffec7) #xa0
      #x40))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (forall ((input.ind-%var459X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var459X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x206))))
 (let ((?x58 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var459X)))
 (let (($x53 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var459X)))
 (=> $x53 (= ?x58 ?x175))))))))
 ))
 (let (($x36 (forall ((input.ind-%var458X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var458X)))
 (= $x53 (and (bvule (_ bv0 32) input.ind-%var458X) (bvult input.ind-%var458X input.dst.llvm-%n)))))
 ))
 (let (($x189 (and $x36 $x154)))
 (let (($x27 (= true true)))
 (let (($x55 (and $x27 $x189)))
 (let (($x205 (= $x55 true)))
 (let (($x21 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var453X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var453X) (_ bv0 32)))))
 ))
 (let (($x190 (forall ((input.ind-%var452X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var452X)))
 (= $x193 false)))
 ))
 (let (($x94 (and $x190 $x21)))
 (let (($x72 (= $x94 true)))
 (let ((?x204 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x50 (concat ?x6 (concat ?x63 ?x204)))))
 (let (($x28 (= ?x157 input.dst.llvm-%n)))
 (let (($x179 (= $x28 true)))
 (let (($x18 (= $x179 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x86 (concat ?x164 (concat ?x68 ?x120)))))
 (let (($x89 (= ?x197 input.dst.llvm-%m)))
 (let (($x40 (= $x89 true)))
 (let (($x46 (= $x40 true)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x90 (= $x17 true)))
 (let (($x188 (= $x90 true)))
 (let (($x172 (= $x188 true)))
 (let (($x182 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x122 (= $x182 true)))
 (let (($x77 (= $x122 true)))
 (let (($x9 (= $x77 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x117)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x61)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x133 $x155)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x121 $x107)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x106 $x118)))
 (let (($x108 (not $x41)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x110 $x135)))
 (let (($x95 (and (not $x98) $x108)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x102 $x138)))
 (let (($x116 (not $x115)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x8 $x81)))
 (let (($x13 (and (not $x103) $x116)))
 (let (($x142 (and (and (and (and (and (and $x13 $x95) $x100) $x99) $x132) $x144) $x74)))
 (let (($x184 (and $x142 $x151)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x19)))
 (let (($x87 (or false (or false (and (and true (or $x65 $x24)) (or $x64 $x111))))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x57 (and $x88 $x184)))
 (let (($x137 (= $x57 true)))
 (let (($x112 (= $x137 true)))
 (let (($x119 (= $x112 true)))
 (let (($x163 (and $x119 $x9)))
 (let (($x168 (and $x163 $x172)))
 (let (($x34 (and $x168 $x46)))
 (let (($x20 (and $x34 $x18)))
 (let (($x162 (and $x20 $x72)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x174 $x162)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x171 $x130)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x14 $x49)))
 (let (($x170 (=> $x82 $x205)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (forall ((input.ind-%var459X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var459X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x206))))
 (let ((?x58 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var459X)))
 (let (($x53 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var459X)))
 (=> $x53 (= ?x58 ?x175))))))))
 ))
 (let (($x36 (forall ((input.ind-%var458X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var458X)))
 (= $x53 (and (bvule (_ bv0 32) input.ind-%var458X) (bvult input.ind-%var458X input.dst.llvm-%n)))))
 ))
 (let (($x189 (and $x36 $x154)))
 (let (($x27 (= true true)))
 (let (($x55 (and $x27 $x189)))
 (let (($x205 (= $x55 true)))
 (let (($x21 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var453X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var453X) (_ bv0 32)))))
 ))
 (let (($x190 (forall ((input.ind-%var452X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var452X)))
 (= $x193 false)))
 ))
 (let (($x94 (and $x190 $x21)))
 (let (($x72 (= $x94 true)))
 (let ((?x204 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x50 (concat ?x6 (concat ?x63 ?x204)))))
 (let (($x28 (= ?x157 input.dst.llvm-%n)))
 (let (($x179 (= $x28 true)))
 (let (($x18 (= $x179 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x86 (concat ?x164 (concat ?x68 ?x120)))))
 (let (($x89 (= ?x197 input.dst.llvm-%m)))
 (let (($x40 (= $x89 true)))
 (let (($x46 (= $x40 true)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x90 (= $x17 true)))
 (let (($x188 (= $x90 true)))
 (let (($x172 (= $x188 true)))
 (let (($x182 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x122 (= $x182 true)))
 (let (($x77 (= $x122 true)))
 (let (($x9 (= $x77 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x117)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x61)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x133 $x155)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x121 $x107)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x106 $x118)))
 (let (($x108 (not $x41)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x110 $x135)))
 (let (($x95 (and (not $x98) $x108)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x102 $x138)))
 (let (($x116 (not $x115)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x8 $x81)))
 (let (($x13 (and (not $x103) $x116)))
 (let (($x142 (and (and (and (and (and (and $x13 $x95) $x100) $x99) $x132) $x144) $x74)))
 (let (($x184 (and $x142 $x151)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x19)))
 (let (($x87 (or false (or false (and (and true (or $x65 $x24)) (or $x64 $x111))))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x57 (and $x88 $x184)))
 (let (($x137 (= $x57 true)))
 (let (($x112 (= $x137 true)))
 (let (($x119 (= $x112 true)))
 (let (($x163 (and $x119 $x9)))
 (let (($x168 (and $x163 $x172)))
 (let (($x34 (and $x168 $x46)))
 (let (($x20 (and $x34 $x18)))
 (let (($x162 (and $x20 $x72)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x174 $x162)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x171 $x130)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x14 $x49)))
 (let (($x170 (=> $x82 $x205)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var459X!1 () (_ BitVec 32)
    #x3fffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00004003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #xfc
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var458X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.ind-%var459X!1 () (_ BitVec 32)
    #x3fffffc0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #xf8
    (ite (= x!0 #xfffffff0) #x01
      #x00)))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= false true)))
 (let (($x73 (= $x113 true)))
 (let (($x36 (forall ((input.ind-%var481X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var481X)))
 (=> $x156 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var481X) (_ bv0 32)))))
 ))
 (let (($x162 (forall ((input.ind-%var480X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var480X)))
 (= $x156 false)))
 ))
 (let (($x58 (and $x162 $x36)))
 (let (($x45 (= $x58 true)))
 (let (($x18 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x20 (= $x18 true)))
 (let (($x59 (= $x20 true)))
 (let (($x193 (= $x59 true)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x204 (= $x63 true)))
 (let (($x173 (= $x204 true)))
 (let (($x166 (= $x173 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x68)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x164)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x168)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x172 $x202)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x188 $x33)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x182 $x122)))
 (let (($x9 (not $x77)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x97 $x131)))
 (let (($x16 (and (not $x147) $x9)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x151 $x184)))
 (let (($x137 (not $x57)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x128 $x62)))
 (let (($x119 (and (not $x117) $x137)))
 (let (($x46 (and (and (and (and (and (and $x119 $x16) $x17) $x90) $x86) $x134) $x148)))
 (let (($x34 (and $x46 $x120)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x124)))
 (let (($x61 (or false (or false (and (and true (or $x121 $x133)) (or $x132 $x139))))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x61)))
 (let (($x12 (and $x142 $x34)))
 (let (($x50 (= $x12 true)))
 (let (($x78 (= $x50 true)))
 (let (($x6 (= $x78 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x135 (concat ?x116 (concat ?x102 ?x103)))))
 (let (($x106 (= ?x98 input.dst.llvm-%m)))
 (let (($x118 (= $x106 true)))
 (let (($x41 (= $x118 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x111 (concat ?x39 (concat ?x65 ?x69)))))
 (let (($x114 (= ?x96 input.dst.llvm-%n)))
 (let (($x87 (= $x114 true)))
 (let (($x88 (= $x87 true)))
 (let (($x108 (and $x88 $x41)))
 (let (($x186 (and $x108 $x6)))
 (let (($x157 (and $x186 $x166)))
 (let (($x136 (and $x157 $x193)))
 (let (($x153 (and $x136 $x45)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x176 $x153)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x10 $x159)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x35 $x187)))
 (let (($x92 (=> $x203 $x73)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= false true)))
 (let (($x73 (= $x113 true)))
 (let (($x36 (forall ((input.ind-%var481X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var481X)))
 (=> $x156 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var481X) (_ bv0 32)))))
 ))
 (let (($x162 (forall ((input.ind-%var480X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var480X)))
 (= $x156 false)))
 ))
 (let (($x58 (and $x162 $x36)))
 (let (($x45 (= $x58 true)))
 (let (($x18 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x20 (= $x18 true)))
 (let (($x59 (= $x20 true)))
 (let (($x193 (= $x59 true)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x204 (= $x63 true)))
 (let (($x173 (= $x204 true)))
 (let (($x166 (= $x173 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x68)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x164)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x168)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x172 $x202)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x188 $x33)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x182 $x122)))
 (let (($x9 (not $x77)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x97 $x131)))
 (let (($x16 (and (not $x147) $x9)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x151 $x184)))
 (let (($x137 (not $x57)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x128 $x62)))
 (let (($x119 (and (not $x117) $x137)))
 (let (($x46 (and (and (and (and (and (and $x119 $x16) $x17) $x90) $x86) $x134) $x148)))
 (let (($x34 (and $x46 $x120)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x124)))
 (let (($x61 (or false (or false (and (and true (or $x121 $x133)) (or $x132 $x139))))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x61)))
 (let (($x12 (and $x142 $x34)))
 (let (($x50 (= $x12 true)))
 (let (($x78 (= $x50 true)))
 (let (($x6 (= $x78 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x135 (concat ?x116 (concat ?x102 ?x103)))))
 (let (($x106 (= ?x98 input.dst.llvm-%m)))
 (let (($x118 (= $x106 true)))
 (let (($x41 (= $x118 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x111 (concat ?x39 (concat ?x65 ?x69)))))
 (let (($x114 (= ?x96 input.dst.llvm-%n)))
 (let (($x87 (= $x114 true)))
 (let (($x88 (= $x87 true)))
 (let (($x108 (and $x88 $x41)))
 (let (($x186 (and $x108 $x6)))
 (let (($x157 (and $x186 $x166)))
 (let (($x136 (and $x157 $x193)))
 (let (($x153 (and $x136 $x45)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x176 $x153)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x10 $x159)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x35 $x187)))
 (let (($x92 (=> $x203 $x73)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x08000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10000013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x08000007)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x08000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10000010)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xae7c5810)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbf6a1814)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbf6a1817)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xae7c5813)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xae7c5810)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbf6a1814)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (= $x197 false)))
 (let (($x161 (= $x91 true)))
 (let (($x55 (forall ((input.ind-%var495X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var495X)))
 (=> $x180 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var495X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var494X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var494X)))
 (= $x180 false)))
 ))
 (let (($x205 (and $x51 $x55)))
 (let (($x170 (= $x205 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x92)))
 (let (($x95 (= ?x30 input.dst.llvm-%n)))
 (let (($x8 (= $x95 true)))
 (let (($x66 (= $x8 true)))
 (let (($x159 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x159 true)))
 (let (($x203 (= $x187 true)))
 (let (($x167 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x36 (= $x167 true)))
 (let (($x58 (= $x36 true)))
 (let (($x45 (= $x58 true)))
 (let (($x156 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x72 (= $x156 true)))
 (let (($x162 (= $x72 true)))
 (let (($x27 (= $x162 true)))
 (let (($x20 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x59 (= $x20 true)))
 (let (($x193 (= $x59 true)))
 (let (($x136 (= $x193 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x157 (= $x166 true)))
 (let (($x28 (= $x157 true)))
 (let (($x179 (= $x28 true)))
 (let ((?x172 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvadd input.dst.llvm-%m ?x172)))
 (let (($x120 (bvugt ?x168 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd ?x168 (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x164 (bvugt ?x168 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x134)))
 (let (($x78 (or false (or false (and (and true (or $x40 $x164)) (or $x68 $x120))))))
 (let (($x186 (=> (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32))) $x78)))
 (let (($x33 (=> (and $x197 (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32)))) $x78)))
 (let (($x86 (= $x33 true)))
 (let (($x63 (= $x86 true)))
 (let (($x204 (= $x63 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x57)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x184 (= (_ bv0 32) ?x151)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x61)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (and $x144 $x142)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x199 $x128)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x124 $x121)))
 (let (($x133 (not $x99)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x22 $x74)))
 (let (($x123 (and (not $x75) $x133)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x5 $x106)))
 (let (($x41 (not $x118)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x39 $x19)))
 (let (($x100 (and (not $x98) $x41)))
 (let (($x182 (and (and (and (and (and (and $x100 $x123) $x132) $x139) $x62) $x112) $x184)))
 (let (($x122 (and $x182 $x137)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x103 (or false (or false (and (and true (or $x101 $x114)) (or $x135 $x115))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x103)))
 (let (($x77 (and $x13 $x122)))
 (let (($x9 (= $x77 true)))
 (let (($x16 (= $x9 true)))
 (let (($x185 (= $x16 true)))
 (let ((?x146 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x64 (= (_ bv0 2) ?x146)))
 (let (($x105 (= $x64 true)))
 (let (($x111 (= $x105 true)))
 (let (($x17 (and $x111 $x185)))
 (let (($x173 (and $x17 $x204)))
 (let (($x18 (and $x173 $x179)))
 (let (($x200 (and $x18 $x136)))
 (let (($x191 (and $x200 $x27)))
 (let (($x153 (and $x191 $x45)))
 (let (($x113 (and $x153 $x203)))
 (let (($x21 (and $x113 $x66)))
 (let (($x25 (and $x21 $x170)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (and $x10 $x25)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x23 (and $x83 $x54)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x71 (and $x79 $x23)))
 (let (($x127 (=> $x71 $x161)))
 (not $x127)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (= $x197 false)))
 (let (($x161 (= $x91 true)))
 (let (($x55 (forall ((input.ind-%var495X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var495X)))
 (=> $x180 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var495X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var494X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var494X)))
 (= $x180 false)))
 ))
 (let (($x205 (and $x51 $x55)))
 (let (($x170 (= $x205 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x92)))
 (let (($x95 (= ?x30 input.dst.llvm-%n)))
 (let (($x8 (= $x95 true)))
 (let (($x66 (= $x8 true)))
 (let (($x159 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x159 true)))
 (let (($x203 (= $x187 true)))
 (let (($x167 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x36 (= $x167 true)))
 (let (($x58 (= $x36 true)))
 (let (($x45 (= $x58 true)))
 (let (($x156 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x72 (= $x156 true)))
 (let (($x162 (= $x72 true)))
 (let (($x27 (= $x162 true)))
 (let (($x20 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x59 (= $x20 true)))
 (let (($x193 (= $x59 true)))
 (let (($x136 (= $x193 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x157 (= $x166 true)))
 (let (($x28 (= $x157 true)))
 (let (($x179 (= $x28 true)))
 (let ((?x172 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvadd input.dst.llvm-%m ?x172)))
 (let (($x120 (bvugt ?x168 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd ?x168 (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x164 (bvugt ?x168 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x134)))
 (let (($x78 (or false (or false (and (and true (or $x40 $x164)) (or $x68 $x120))))))
 (let (($x186 (=> (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32))) $x78)))
 (let (($x33 (=> (and $x197 (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32)))) $x78)))
 (let (($x86 (= $x33 true)))
 (let (($x63 (= $x86 true)))
 (let (($x204 (= $x63 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x57)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x184 (= (_ bv0 32) ?x151)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x61)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (and $x144 $x142)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x199 $x128)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x124 $x121)))
 (let (($x133 (not $x99)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x22 $x74)))
 (let (($x123 (and (not $x75) $x133)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x5 $x106)))
 (let (($x41 (not $x118)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x39 $x19)))
 (let (($x100 (and (not $x98) $x41)))
 (let (($x182 (and (and (and (and (and (and $x100 $x123) $x132) $x139) $x62) $x112) $x184)))
 (let (($x122 (and $x182 $x137)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x103 (or false (or false (and (and true (or $x101 $x114)) (or $x135 $x115))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x103)))
 (let (($x77 (and $x13 $x122)))
 (let (($x9 (= $x77 true)))
 (let (($x16 (= $x9 true)))
 (let (($x185 (= $x16 true)))
 (let ((?x146 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x64 (= (_ bv0 2) ?x146)))
 (let (($x105 (= $x64 true)))
 (let (($x111 (= $x105 true)))
 (let (($x17 (and $x111 $x185)))
 (let (($x173 (and $x17 $x204)))
 (let (($x18 (and $x173 $x179)))
 (let (($x200 (and $x18 $x136)))
 (let (($x191 (and $x200 $x27)))
 (let (($x153 (and $x191 $x45)))
 (let (($x113 (and $x153 $x203)))
 (let (($x21 (and $x113 $x66)))
 (let (($x25 (and $x21 $x170)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (and $x10 $x25)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x23 (and $x83 $x54)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x71 (and $x79 $x23)))
 (let (($x127 (=> $x71 $x161)))
 (not $x127)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfff7fff0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffff0d9c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfff81000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffff0d9f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffff0d9c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x186 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x55 (=> $x186 true)))
 (let (($x205 (= $x55 true)))
 (let (($x170 (= $x205 true)))
 (let (($x190 (forall ((input.ind-%var508X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var508X)))
 (= $x58 false)))
 ))
 (let (($x30 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var509X)))
 (=> $x58 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var509X) (_ bv0 32)))))
 ))
 (let (($x180 (and $x30 $x190)))
 (let (($x49 (= $x180 true)))
 (let ((?x166 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x200 (concat ?x136 (concat ?x20 (concat ?x28 ?x166)))))
 (let (($x156 (= ?x200 input.dst.llvm-%m)))
 (let (($x72 (= $x156 true)))
 (let (($x162 (= $x72 true)))
 (let (($x33 (= $x186 true)))
 (let (($x86 (= $x33 true)))
 (let (($x63 (= $x86 true)))
 (let (($x148 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (= $x148 true)))
 (let (($x68 (= $x46 true)))
 (let (($x120 (= $x68 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x185)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x9)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x184)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x151 $x182)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x163 $x57)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x144 $x38)))
 (let (($x142 (not $x61)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (and $x139 $x131)))
 (let (($x62 (and (not $x199) $x142)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x123 $x119)))
 (let (($x132 (not $x155)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x116 $x126)))
 (let (($x107 (and (not $x133) $x132)))
 (let (($x168 (and (and (and (and (and (and $x107 $x62) $x117) $x112) $x137) $x77) $x16)))
 (let (($x89 (and $x168 $x17)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x19)))
 (let (($x124 (or false (or false (and (and true (or $x98 $x108)) (or $x100 $x22))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x124)))
 (let (($x160 (and $x99 $x89)))
 (let (($x6 (= $x160 true)))
 (let (($x134 (= $x6 true)))
 (let (($x40 (= $x134 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x114 (concat ?x93 (concat ?x111 ?x64)))))
 (let (($x81 (= ?x87 input.dst.llvm-%n)))
 (let (($x135 (= $x81 true)))
 (let (($x110 (= $x135 true)))
 (let (($x164 (and $x110 $x40)))
 (let (($x34 (and $x164 $x120)))
 (let (($x204 (and $x34 $x63)))
 (let (($x27 (and $x204 $x162)))
 (let (($x51 (and $x27 $x49)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and $x35 $x51)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x79 $x129)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x14 $x154)))
 (let (($x25 (=> $x189 $x170)))
 (not $x25))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x186 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x55 (=> $x186 true)))
 (let (($x205 (= $x55 true)))
 (let (($x170 (= $x205 true)))
 (let (($x190 (forall ((input.ind-%var508X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var508X)))
 (= $x58 false)))
 ))
 (let (($x30 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var509X)))
 (=> $x58 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var509X) (_ bv0 32)))))
 ))
 (let (($x180 (and $x30 $x190)))
 (let (($x49 (= $x180 true)))
 (let ((?x166 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x200 (concat ?x136 (concat ?x20 (concat ?x28 ?x166)))))
 (let (($x156 (= ?x200 input.dst.llvm-%m)))
 (let (($x72 (= $x156 true)))
 (let (($x162 (= $x72 true)))
 (let (($x33 (= $x186 true)))
 (let (($x86 (= $x33 true)))
 (let (($x63 (= $x86 true)))
 (let (($x148 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (= $x148 true)))
 (let (($x68 (= $x46 true)))
 (let (($x120 (= $x68 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x185)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x9)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x184)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x151 $x182)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x163 $x57)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x144 $x38)))
 (let (($x142 (not $x61)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (and $x139 $x131)))
 (let (($x62 (and (not $x199) $x142)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x123 $x119)))
 (let (($x132 (not $x155)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x116 $x126)))
 (let (($x107 (and (not $x133) $x132)))
 (let (($x168 (and (and (and (and (and (and $x107 $x62) $x117) $x112) $x137) $x77) $x16)))
 (let (($x89 (and $x168 $x17)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x19)))
 (let (($x124 (or false (or false (and (and true (or $x98 $x108)) (or $x100 $x22))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x124)))
 (let (($x160 (and $x99 $x89)))
 (let (($x6 (= $x160 true)))
 (let (($x134 (= $x6 true)))
 (let (($x40 (= $x134 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x114 (concat ?x93 (concat ?x111 ?x64)))))
 (let (($x81 (= ?x87 input.dst.llvm-%n)))
 (let (($x135 (= $x81 true)))
 (let (($x110 (= $x135 true)))
 (let (($x164 (and $x110 $x40)))
 (let (($x34 (and $x164 $x120)))
 (let (($x204 (and $x34 $x63)))
 (let (($x27 (and $x204 $x162)))
 (let (($x51 (and $x27 $x49)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and $x35 $x51)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x79 $x129)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x14 $x154)))
 (let (($x25 (=> $x189 $x170)))
 (not $x25))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x203 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x203)))
 (let (($x113 (= ?x167 input.dst.llvm-%n)))
 (let (($x149 (= $x113 true)))
 (let (($x173 (forall ((input.ind-%var514X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var514X)))
 (= $x21 false)))
 ))
 (let (($x205 (forall ((input.ind-%var515X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var515X)))
 (=> $x21 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var515X) (_ bv0 32)))))
 ))
 (let (($x174 (and $x205 $x173)))
 (let (($x45 (= $x174 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x72 (concat ?x59 (concat ?x28 ?x20)))))
 (let (($x27 (= ?x162 input.dst.llvm-%n)))
 (let (($x36 (= $x27 true)))
 (let (($x58 (= $x36 true)))
 (let (($x86 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x63 (= $x86 true)))
 (let (($x204 (= $x63 true)))
 (let (($x193 (= $x204 true)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x12 (= $x34 true)))
 (let (($x50 (= $x12 true)))
 (let (($x78 (= $x50 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x172)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x122)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x163 $x184)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x197 $x182)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x38 $x61)))
 (let (($x62 (not $x142)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x199 $x128)))
 (let (($x147 (and (not $x144) $x62)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x119 $x155)))
 (let (($x107 (not $x132)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x121 $x13)))
 (let (($x131 (and (not $x123) $x107)))
 (let (($x160 (and (and (and (and (and (and $x131 $x147) $x117) $x112) $x57) $x188) $x77)))
 (let (($x6 (and $x160 $x9)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x126 (or false (or false (and (and true (or $x106 $x118)) (or $x75 $x143))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x126)))
 (let (($x134 (and $x97 $x6)))
 (let (($x40 (= $x134 true)))
 (let (($x164 (= $x40 true)))
 (let (($x148 (= $x164 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x111 (concat ?x69 ?x31)))))
 (let (($x135 (= ?x88 input.dst.llvm-%m)))
 (let (($x110 (= $x135 true)))
 (let (($x102 (= $x110 true)))
 (let (($x46 (and $x102 $x148)))
 (let (($x186 (and $x46 $x78)))
 (let (($x136 (and $x186 $x193)))
 (let (($x159 (and $x136 $x58)))
 (let (($x187 (and $x159 $x45)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (and $x7 $x187)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x153 (and $x83 $x191)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x8 (and $x47 $x153)))
 (let (($x23 (=> $x8 $x149)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x203 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x203)))
 (let (($x113 (= ?x167 input.dst.llvm-%n)))
 (let (($x149 (= $x113 true)))
 (let (($x173 (forall ((input.ind-%var514X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var514X)))
 (= $x21 false)))
 ))
 (let (($x205 (forall ((input.ind-%var515X (_ BitVec 32)) )(let (($x21 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var515X)))
 (=> $x21 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var515X) (_ bv0 32)))))
 ))
 (let (($x174 (and $x205 $x173)))
 (let (($x45 (= $x174 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x72 (concat ?x59 (concat ?x28 ?x20)))))
 (let (($x27 (= ?x162 input.dst.llvm-%n)))
 (let (($x36 (= $x27 true)))
 (let (($x58 (= $x36 true)))
 (let (($x86 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x63 (= $x86 true)))
 (let (($x204 (= $x63 true)))
 (let (($x193 (= $x204 true)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x12 (= $x34 true)))
 (let (($x50 (= $x12 true)))
 (let (($x78 (= $x50 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x172)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x122)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x163 $x184)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x197 $x182)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x38 $x61)))
 (let (($x62 (not $x142)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x199 $x128)))
 (let (($x147 (and (not $x144) $x62)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x119 $x155)))
 (let (($x107 (not $x132)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x121 $x13)))
 (let (($x131 (and (not $x123) $x107)))
 (let (($x160 (and (and (and (and (and (and $x131 $x147) $x117) $x112) $x57) $x188) $x77)))
 (let (($x6 (and $x160 $x9)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x126 (or false (or false (and (and true (or $x106 $x118)) (or $x75 $x143))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x126)))
 (let (($x134 (and $x97 $x6)))
 (let (($x40 (= $x134 true)))
 (let (($x164 (= $x40 true)))
 (let (($x148 (= $x164 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x111 (concat ?x69 ?x31)))))
 (let (($x135 (= ?x88 input.dst.llvm-%m)))
 (let (($x110 (= $x135 true)))
 (let (($x102 (= $x110 true)))
 (let (($x46 (and $x102 $x148)))
 (let (($x186 (and $x46 $x78)))
 (let (($x136 (and $x186 $x193)))
 (let (($x159 (and $x136 $x58)))
 (let (($x187 (and $x159 $x45)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (and $x7 $x187)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x153 (and $x83 $x191)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x8 (and $x47 $x153)))
 (let (($x23 (=> $x8 $x149)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x54 (= (_ bv0 2) ?x25)))
 (let (($x129 (= $x54 true)))
 (let (($x71 (forall ((input.ind-%var521X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var521X)))
 (=> $x115 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var521X) (_ bv0 32)))))
 ))
 (let (($x187 (forall ((input.ind-%var520X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var520X)))
 (= $x115 false)))
 ))
 (let (($x103 (and $x187 $x71)))
 (let (($x146 (= $x103 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x36 (concat ?x200 (concat ?x28 ?x59)))))
 (let (($x159 (= ?x58 input.dst.llvm-%m)))
 (let (($x30 (= $x159 true)))
 (let (($x21 (= $x30 true)))
 (let (($x204 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x193 (= $x204 true)))
 (let (($x136 (= $x193 true)))
 (let (($x156 (= $x136 true)))
 (let (($x34 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (= $x34 true)))
 (let (($x50 (= $x12 true)))
 (let (($x78 (= $x50 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x89)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x137)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x163)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (and $x197 $x151)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x185 $x184)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x61 $x142)))
 (let (($x147 (not $x62)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (and $x144 $x169)))
 (let (($x117 (and (not $x38) $x147)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x155 $x132)))
 (let (($x131 (not $x107)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x133 $x39)))
 (let (($x128 (and (not $x119) $x131)))
 (let (($x134 (and (and (and (and (and (and $x128 $x117) $x90) $x112) $x182) $x17) $x188)))
 (let (($x40 (and $x134 $x122)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x13 (or false (or false (and (and true (or $x41 $x22)) (or $x99 $x116))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x13)))
 (let (($x164 (and $x139 $x40)))
 (let (($x148 (= $x164 true)))
 (let (($x46 (= $x148 true)))
 (let (($x68 (= $x46 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x88 (concat ?x69 (concat ?x93 ?x96)))))
 (let (($x110 (= ?x81 input.dst.llvm-%n)))
 (let (($x102 (= $x110 true)))
 (let (($x19 (= $x102 true)))
 (let (($x120 (and $x19 $x68)))
 (let (($x186 (and $x120 $x78)))
 (let (($x72 (and $x186 $x156)))
 (let (($x49 (and $x72 $x21)))
 (let (($x18 (and $x49 $x146)))
 (let (($x181 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x190 (and $x181 $x18)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x51 (and $x24 $x190)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x73 (and $x14 $x51)))
 (let (($x92 (=> $x73 $x129)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x54 (= (_ bv0 2) ?x25)))
 (let (($x129 (= $x54 true)))
 (let (($x71 (forall ((input.ind-%var521X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var521X)))
 (=> $x115 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var521X) (_ bv0 32)))))
 ))
 (let (($x187 (forall ((input.ind-%var520X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var520X)))
 (= $x115 false)))
 ))
 (let (($x103 (and $x187 $x71)))
 (let (($x146 (= $x103 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x36 (concat ?x200 (concat ?x28 ?x59)))))
 (let (($x159 (= ?x58 input.dst.llvm-%m)))
 (let (($x30 (= $x159 true)))
 (let (($x21 (= $x30 true)))
 (let (($x204 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x193 (= $x204 true)))
 (let (($x136 (= $x193 true)))
 (let (($x156 (= $x136 true)))
 (let (($x34 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (= $x34 true)))
 (let (($x50 (= $x12 true)))
 (let (($x78 (= $x50 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x89)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x137)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x163)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (and $x197 $x151)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x185 $x184)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x61 $x142)))
 (let (($x147 (not $x62)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (and $x144 $x169)))
 (let (($x117 (and (not $x38) $x147)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x155 $x132)))
 (let (($x131 (not $x107)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x133 $x39)))
 (let (($x128 (and (not $x119) $x131)))
 (let (($x134 (and (and (and (and (and (and $x128 $x117) $x90) $x112) $x182) $x17) $x188)))
 (let (($x40 (and $x134 $x122)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x13 (or false (or false (and (and true (or $x41 $x22)) (or $x99 $x116))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x13)))
 (let (($x164 (and $x139 $x40)))
 (let (($x148 (= $x164 true)))
 (let (($x46 (= $x148 true)))
 (let (($x68 (= $x46 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x88 (concat ?x69 (concat ?x93 ?x96)))))
 (let (($x110 (= ?x81 input.dst.llvm-%n)))
 (let (($x102 (= $x110 true)))
 (let (($x19 (= $x102 true)))
 (let (($x120 (and $x19 $x68)))
 (let (($x186 (and $x120 $x78)))
 (let (($x72 (and $x186 $x156)))
 (let (($x49 (and $x72 $x21)))
 (let (($x18 (and $x49 $x146)))
 (let (($x181 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x190 (and $x181 $x18)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x51 (and $x24 $x190)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x73 (and $x14 $x51)))
 (let (($x92 (=> $x73 $x129)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x174 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x174)))
 (let (($x153 (= ?x167 input.spec-%var-n-1)))
 (let (($x113 (= $x153 true)))
 (let (($x98 (forall ((input.ind-%var527X (_ BitVec 32)) )(let (($x23 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var527X)))
 (=> $x23 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var527X) (_ bv0 32)))))
 ))
 (let (($x18 (forall ((input.ind-%var526X (_ BitVec 32)) )(let (($x23 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var526X)))
 (= $x23 false)))
 ))
 (let (($x179 (and $x18 $x98)))
 (let (($x101 (= $x179 true)))
 (let (($x21 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x49 (= $x21 true)))
 (let (($x205 (= $x49 true)))
 (let (($x115 (= $x205 true)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x162 (= $x20 true)))
 (let (($x58 (= $x162 true)))
 (let (($x159 (= $x58 true)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x186)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x50)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x148)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x164 $x46)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x40 $x68)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x57 $x17)))
 (let (($x137 (not $x6)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x184 $x182)))
 (let (($x134 (and (not $x9) $x137)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x112 $x172)))
 (let (($x197 (not $x185)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x133 $x39)))
 (let (($x151 (and (not $x160) $x197)))
 (let (($x156 (and (and (and (and (and (and $x151 $x134) $x89) $x122) $x120) $x12) $x78)))
 (let (($x72 (and $x156 $x33)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x77 (or false (or false (and (and true (or $x131 $x128)) (or $x61 $x142))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x27 (and $x90 $x72)))
 (let (($x36 (= $x27 true)))
 (let (($x166 (= $x36 true)))
 (let (($x200 (= $x166 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x99 (concat ?x75 (concat ?x41 ?x108)))))
 (let (($x126 (= ?x124 input.dst.llvm-%m)))
 (let (($x97 (= $x126 true)))
 (let (($x121 (= $x97 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x81 (concat ?x93 (concat ?x111 ?x64)))))
 (let (($x102 (= ?x135 input.dst.llvm-%n)))
 (let (($x19 (= $x102 true)))
 (let (($x5 (= $x19 true)))
 (let (($x13 (and $x5 $x121)))
 (let (($x157 (and $x13 $x200)))
 (let (($x30 (and $x157 $x159)))
 (let (($x45 (and $x30 $x115)))
 (let (($x173 (and $x45 $x101)))
 (let (($x79 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and $x79 $x173)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x8 (and $x171 $x203)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x47 $x8)))
 (let (($x170 (=> $x189 $x113)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x174 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x174)))
 (let (($x153 (= ?x167 input.spec-%var-n-1)))
 (let (($x113 (= $x153 true)))
 (let (($x98 (forall ((input.ind-%var527X (_ BitVec 32)) )(let (($x23 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var527X)))
 (=> $x23 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var527X) (_ bv0 32)))))
 ))
 (let (($x18 (forall ((input.ind-%var526X (_ BitVec 32)) )(let (($x23 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var526X)))
 (= $x23 false)))
 ))
 (let (($x179 (and $x18 $x98)))
 (let (($x101 (= $x179 true)))
 (let (($x21 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x49 (= $x21 true)))
 (let (($x205 (= $x49 true)))
 (let (($x115 (= $x205 true)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x162 (= $x20 true)))
 (let (($x58 (= $x162 true)))
 (let (($x159 (= $x58 true)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x186)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x50)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x148)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x164 $x46)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x40 $x68)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x57 $x17)))
 (let (($x137 (not $x6)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x184 $x182)))
 (let (($x134 (and (not $x9) $x137)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x112 $x172)))
 (let (($x197 (not $x185)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x133 $x39)))
 (let (($x151 (and (not $x160) $x197)))
 (let (($x156 (and (and (and (and (and (and $x151 $x134) $x89) $x122) $x120) $x12) $x78)))
 (let (($x72 (and $x156 $x33)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x77 (or false (or false (and (and true (or $x131 $x128)) (or $x61 $x142))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x27 (and $x90 $x72)))
 (let (($x36 (= $x27 true)))
 (let (($x166 (= $x36 true)))
 (let (($x200 (= $x166 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x99 (concat ?x75 (concat ?x41 ?x108)))))
 (let (($x126 (= ?x124 input.dst.llvm-%m)))
 (let (($x97 (= $x126 true)))
 (let (($x121 (= $x97 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x81 (concat ?x93 (concat ?x111 ?x64)))))
 (let (($x102 (= ?x135 input.dst.llvm-%n)))
 (let (($x19 (= $x102 true)))
 (let (($x5 (= $x19 true)))
 (let (($x13 (and $x5 $x121)))
 (let (($x157 (and $x13 $x200)))
 (let (($x30 (and $x157 $x159)))
 (let (($x45 (and $x30 $x115)))
 (let (($x173 (and $x45 $x101)))
 (let (($x79 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and $x79 $x173)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x8 (and $x171 $x203)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x47 $x8)))
 (let (($x170 (=> $x189 $x113)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x187 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x66 (= $x187 true)))
 (let (($x103 (= $x66 true)))
 (let (($x95 (forall ((input.ind-%var533X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var533X)))
 (=> $x154 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var533X) (_ bv0 32)))))
 ))
 (let (($x173 (forall ((input.ind-%var532X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var532X)))
 (= $x154 false)))
 ))
 (let (($x139 (and $x173 $x95)))
 (let (($x106 (= $x139 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x205 (concat ?x30 (concat ?x162 ?x59)))))
 (let (($x45 (= ?x115 input.dst.llvm-%n)))
 (let (($x149 (= $x45 true)))
 (let (($x23 (= $x149 true)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x36 (= $x27 true)))
 (let (($x166 (= $x36 true)))
 (let (($x200 (= $x166 true)))
 (let (($x50 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x78 (= $x50 true)))
 (let (($x156 (= $x78 true)))
 (let (($x186 (= $x156 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x134)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x6)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x184)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x151 $x182)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (and $x197 $x9)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x77 $x90)))
 (let (($x39 (not $x133)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x62 $x147)))
 (let (($x163 (and (not $x117) $x39)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x144 $x169)))
 (let (($x61 (not $x38)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x99 $x22)))
 (let (($x142 (and (not $x128) $x61)))
 (let (($x164 (and (and (and (and (and (and $x142 $x163) $x112) $x185) $x188) $x17) $x137)))
 (let (($x148 (and $x164 $x86)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x107 (or false (or false (and (and true (or $x74 $x124)) (or $x13 $x119))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x107)))
 (let (($x46 (and $x132 $x148)))
 (let (($x68 (= $x46 true)))
 (let (($x120 (= $x68 true)))
 (let (($x193 (= $x120 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x135 (concat ?x111 (concat ?x69 ?x31)))))
 (let (($x19 (= ?x110 input.dst.llvm-%m)))
 (let (($x5 (= $x19 true)))
 (let (($x123 (= $x5 true)))
 (let (($x34 (and $x123 $x193)))
 (let (($x33 (and $x34 $x186)))
 (let (($x157 (and $x33 $x200)))
 (let (($x146 (and $x157 $x23)))
 (let (($x65 (and $x146 $x106)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (and $x83 $x65)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x10 $x71)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x73 (and $x14 $x25)))
 (let (($x54 (=> $x73 $x103)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x187 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x66 (= $x187 true)))
 (let (($x103 (= $x66 true)))
 (let (($x95 (forall ((input.ind-%var533X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var533X)))
 (=> $x154 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var533X) (_ bv0 32)))))
 ))
 (let (($x173 (forall ((input.ind-%var532X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var532X)))
 (= $x154 false)))
 ))
 (let (($x139 (and $x173 $x95)))
 (let (($x106 (= $x139 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x205 (concat ?x30 (concat ?x162 ?x59)))))
 (let (($x45 (= ?x115 input.dst.llvm-%n)))
 (let (($x149 (= $x45 true)))
 (let (($x23 (= $x149 true)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x36 (= $x27 true)))
 (let (($x166 (= $x36 true)))
 (let (($x200 (= $x166 true)))
 (let (($x50 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x78 (= $x50 true)))
 (let (($x156 (= $x78 true)))
 (let (($x186 (= $x156 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x134)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x6)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x184)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x151 $x182)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (and $x197 $x9)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x77 $x90)))
 (let (($x39 (not $x133)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x62 $x147)))
 (let (($x163 (and (not $x117) $x39)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x144 $x169)))
 (let (($x61 (not $x38)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x99 $x22)))
 (let (($x142 (and (not $x128) $x61)))
 (let (($x164 (and (and (and (and (and (and $x142 $x163) $x112) $x185) $x188) $x17) $x137)))
 (let (($x148 (and $x164 $x86)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x107 (or false (or false (and (and true (or $x74 $x124)) (or $x13 $x119))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x107)))
 (let (($x46 (and $x132 $x148)))
 (let (($x68 (= $x46 true)))
 (let (($x120 (= $x68 true)))
 (let (($x193 (= $x120 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x135 (concat ?x111 (concat ?x69 ?x31)))))
 (let (($x19 (= ?x110 input.dst.llvm-%m)))
 (let (($x5 (= $x19 true)))
 (let (($x123 (= $x5 true)))
 (let (($x34 (and $x123 $x193)))
 (let (($x33 (and $x34 $x186)))
 (let (($x157 (and $x33 $x200)))
 (let (($x146 (and $x157 $x23)))
 (let (($x65 (and $x146 $x106)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (and $x83 $x65)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x10 $x71)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x73 (and $x14 $x25)))
 (let (($x54 (=> $x73 $x103)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (forall ((input.ind-%var545X (_ BitVec 32)) )(let ((?x104 (bvadd (bvmul input.ind-%var545X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x60))))
 (=> false (= (_ bv0 32) ?x32))))))
 ))
 (let (($x140 (forall ((input.ind-%var544X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var544X) (bvult input.ind-%var544X (_ bv0 32)))))
 ))
 (let (($x37 (and $x140 $x56)))
 (let (($x179 (= true true)))
 (let (($x125 (and $x179 $x37)))
 (let (($x196 (= $x125 true)))
 (let (($x138 (forall ((input.ind-%var539X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var539X)))
 (=> $x170 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var539X) (_ bv0 32)))))
 ))
 (let (($x65 (forall ((input.ind-%var538X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var538X)))
 (= $x170 false)))
 ))
 (let (($x28 (and $x65 $x138)))
 (let (($x98 (= $x28 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x149 (concat ?x21 (concat ?x162 ?x30)))))
 (let (($x146 (= ?x23 input.dst.llvm-%m)))
 (let (($x92 (= $x146 true)))
 (let (($x154 (= $x92 true)))
 (let (($x166 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x200 (= $x166 true)))
 (let (($x157 (= $x200 true)))
 (let (($x49 (= $x157 true)))
 (let (($x50 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x78 (= $x50 true)))
 (let (($x156 (= $x78 true)))
 (let (($x186 (= $x156 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x40)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x57)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x197 $x184)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x122 $x182)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x90 $x133)))
 (let (($x163 (not $x39)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x117 $x160)))
 (let (($x112 (and (not $x77) $x163)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x169 $x38)))
 (let (($x142 (not $x61)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x131 $x41)))
 (let (($x147 (and (not $x144) $x142)))
 (let (($x46 (and (and (and (and (and (and $x147 $x112) $x172) $x185) $x9) $x204) $x17)))
 (let (($x68 (and $x46 $x6)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x22 (or false (or false (and (and true (or $x126 $x97)) (or $x168 $x155))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x120 (and $x16 $x68)))
 (let (($x193 (= $x120 true)))
 (let (($x34 (= $x193 true)))
 (let (($x12 (= $x34 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x110 (concat ?x69 (concat ?x93 ?x96)))))
 (let (($x5 (= ?x102 input.dst.llvm-%n)))
 (let (($x123 (= $x5 true)))
 (let (($x75 (= $x123 true)))
 (let (($x136 (and $x75 $x12)))
 (let (($x33 (and $x136 $x186)))
 (let (($x205 (and $x33 $x49)))
 (let (($x101 (and $x205 $x154)))
 (let (($x174 (and $x101 $x98)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (and $x24 $x174)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x18 (and $x35 $x189)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x180 (and $x47 $x18)))
 (let (($x109 (=> $x180 $x196)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (forall ((input.ind-%var545X (_ BitVec 32)) )(let ((?x104 (bvadd (bvmul input.ind-%var545X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv1 32))) (select input.dst.llvm-mem ?x104))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x104 (_ bv2 32))) ?x60))))
 (=> false (= (_ bv0 32) ?x32))))))
 ))
 (let (($x140 (forall ((input.ind-%var544X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var544X) (bvult input.ind-%var544X (_ bv0 32)))))
 ))
 (let (($x37 (and $x140 $x56)))
 (let (($x179 (= true true)))
 (let (($x125 (and $x179 $x37)))
 (let (($x196 (= $x125 true)))
 (let (($x138 (forall ((input.ind-%var539X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var539X)))
 (=> $x170 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var539X) (_ bv0 32)))))
 ))
 (let (($x65 (forall ((input.ind-%var538X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var538X)))
 (= $x170 false)))
 ))
 (let (($x28 (and $x65 $x138)))
 (let (($x98 (= $x28 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x149 (concat ?x21 (concat ?x162 ?x30)))))
 (let (($x146 (= ?x23 input.dst.llvm-%m)))
 (let (($x92 (= $x146 true)))
 (let (($x154 (= $x92 true)))
 (let (($x166 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x200 (= $x166 true)))
 (let (($x157 (= $x200 true)))
 (let (($x49 (= $x157 true)))
 (let (($x50 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x78 (= $x50 true)))
 (let (($x156 (= $x78 true)))
 (let (($x186 (= $x156 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x40)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x57)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x197 $x184)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x122 $x182)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x90 $x133)))
 (let (($x163 (not $x39)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x117 $x160)))
 (let (($x112 (and (not $x77) $x163)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x169 $x38)))
 (let (($x142 (not $x61)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x131 $x41)))
 (let (($x147 (and (not $x144) $x142)))
 (let (($x46 (and (and (and (and (and (and $x147 $x112) $x172) $x185) $x9) $x204) $x17)))
 (let (($x68 (and $x46 $x6)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x22 (or false (or false (and (and true (or $x126 $x97)) (or $x168 $x155))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x120 (and $x16 $x68)))
 (let (($x193 (= $x120 true)))
 (let (($x34 (= $x193 true)))
 (let (($x12 (= $x34 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x110 (concat ?x69 (concat ?x93 ?x96)))))
 (let (($x5 (= ?x102 input.dst.llvm-%n)))
 (let (($x123 (= $x5 true)))
 (let (($x75 (= $x123 true)))
 (let (($x136 (and $x75 $x12)))
 (let (($x33 (and $x136 $x186)))
 (let (($x205 (and $x33 $x49)))
 (let (($x101 (and $x205 $x154)))
 (let (($x174 (and $x101 $x98)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (and $x24 $x174)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x18 (and $x35 $x189)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x180 (and $x47 $x18)))
 (let (($x109 (=> $x180 $x196)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (= $x59 false)))
 (let (($x277 (= $x276 true)))
 (let (($x269 (forall ((input.ind-%var575X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var575X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var575X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var574X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var574X)))
 (= $x167 false)))
 ))
 (let (($x270 (and $x263 $x269)))
 (let (($x271 (= $x270 true)))
 (let (($x256 (forall ((input.ind-%var569X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var569X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x247)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x250)))
 (let ((?x141 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var569X)))
 (let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var569X)))
 (=> $x129 (= ?x141 ?x253)))))))))
 ))
 (let (($x222 (forall ((input.ind-%var568X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var568X) (bvult input.ind-%var568X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var568X)))
 (= $x129 $x220))))
 ))
 (let (($x257 (and $x222 $x256)))
 (let (($x258 (= $x257 true)))
 (let (($x208 (forall ((input.ind-%var563X (_ BitVec 32)) )(let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var563X)))
 (=> $x129 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var563X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var562X (_ BitVec 32)) )(let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var562X)))
 (= $x129 false)))
 ))
 (let (($x209 (and $x44 $x208)))
 (let (($x210 (= $x209 true)))
 (let (($x130 (forall ((input.ind-%var555X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var555X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var555X) (_ bv0 32)))))
 ))
 (let (($x173 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var554X)))
 (= $x167 false)))
 ))
 (let (($x183 (and $x173 $x130)))
 (let (($x139 (= $x183 true)))
 (let ((?x83 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x83)))
 (let (($x100 (= ?x114 input.dst.llvm-%n)))
 (let (($x159 (= $x100 true)))
 (let (($x105 (= $x159 true)))
 (let (($x196 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x196 true)))
 (let (($x52 (= $x109 true)))
 (let (($x48 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (= $x48 true)))
 (let (($x56 (= $x43 true)))
 (let (($x37 (= $x56 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (= $x194 true)))
 (let (($x60 (= $x80 true)))
 (let (($x150 (= $x60 true)))
 (let (($x76 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x15 (= $x76 true)))
 (let (($x198 (= $x15 true)))
 (let (($x70 (= $x198 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x127 true)))
 (let (($x175 (= $x140 true)))
 (let (($x165 (= $x175 true)))
 (let ((?x23 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x146 (bvadd input.dst.llvm-%m ?x23)))
 (let (($x28 (bvugt ?x146 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x146 (_ bv3 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x187 (bvugt ?x146 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x18 (or false (or false (and (and true (or $x65 $x187)) (or $x138 $x28))))))
 (let (($x179 (=> (bvule ?x146 (bvsub (bvadd ?x146 (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x154 (=> (and $x59 (bvule ?x146 (bvsub (bvadd ?x146 (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x101 (= $x154 true)))
 (let (($x91 (= $x101 true)))
 (let (($x191 (= $x91 true)))
 (let (($x149 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x58 (= $x149 true)))
 (let (($x21 (= $x58 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x50)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x12)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x17 $x6)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x57 $x68)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x122 $x197)))
 (let (($x184 (not $x151)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x164 $x185)))
 (let (($x9 (and (not $x134) $x184)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x39 $x163)))
 (let (($x137 (not $x112)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x199 $x155)))
 (let (($x172 (and (not $x133) $x137)))
 (let (($x36 (and (and (and (and (and (and $x172 $x9) $x188) $x148) $x120) $x34) $x136)))
 (let (($x166 (and $x36 $x78)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x77 (or false (or false (and (and true (or $x131 $x41)) (or $x61 $x142))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x200 (and $x90 $x166)))
 (let (($x157 (= $x200 true)))
 (let (($x49 (= $x157 true)))
 (let (($x205 (= $x49 true)))
 (let (($x126 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x124 (= $x126 true)))
 (let (($x97 (= $x124 true)))
 (let (($x13 (= $x97 true)))
 (let (($x118 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x118 true)))
 (let (($x128 (= $x74 true)))
 (let (($x108 (= $x128 true)))
 (let (($x102 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x19 (= $x102 true)))
 (let (($x5 (= $x19 true)))
 (let (($x123 (= $x5 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x135 (= (_ bv0 2) ?x69)))
 (let (($x93 (= $x135 true)))
 (let (($x96 (= $x93 true)))
 (let (($x87 (= ?x114 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x87 true)))
 (let (($x110 (= $x64 true)))
 (let (($x88 (and $x110 $x96)))
 (let (($x75 (and $x88 $x123)))
 (let (($x116 (and $x75 $x108)))
 (let (($x121 (and $x116 $x13)))
 (let (($x45 (and $x121 $x205)))
 (let (($x20 (and $x45 $x21)))
 (let (($x161 (and $x20 $x191)))
 (let (($x104 (and $x161 $x165)))
 (let (($x26 (and $x104 $x70)))
 (let (($x32 (and $x26 $x150)))
 (let (($x125 (and $x32 $x37)))
 (let (($x79 (and $x125 $x52)))
 (let (($x95 (and $x79 $x105)))
 (let (($x103 (and $x95 $x139)))
 (let (($x211 (and $x103 $x210)))
 (let (($x259 (and $x211 $x258)))
 (let (($x272 (and $x259 $x271)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x273 (and $x35 $x272)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x171 $x273)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x14 $x274)))
 (let (($x278 (=> $x275 $x277)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (= $x59 false)))
 (let (($x277 (= $x276 true)))
 (let (($x269 (forall ((input.ind-%var575X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var575X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var575X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var574X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var574X)))
 (= $x167 false)))
 ))
 (let (($x270 (and $x263 $x269)))
 (let (($x271 (= $x270 true)))
 (let (($x256 (forall ((input.ind-%var569X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var569X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x247)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x250)))
 (let ((?x141 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var569X)))
 (let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var569X)))
 (=> $x129 (= ?x141 ?x253)))))))))
 ))
 (let (($x222 (forall ((input.ind-%var568X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var568X) (bvult input.ind-%var568X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var568X)))
 (= $x129 $x220))))
 ))
 (let (($x257 (and $x222 $x256)))
 (let (($x258 (= $x257 true)))
 (let (($x208 (forall ((input.ind-%var563X (_ BitVec 32)) )(let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var563X)))
 (=> $x129 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var563X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var562X (_ BitVec 32)) )(let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var562X)))
 (= $x129 false)))
 ))
 (let (($x209 (and $x44 $x208)))
 (let (($x210 (= $x209 true)))
 (let (($x130 (forall ((input.ind-%var555X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var555X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var555X) (_ bv0 32)))))
 ))
 (let (($x173 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var554X)))
 (= $x167 false)))
 ))
 (let (($x183 (and $x173 $x130)))
 (let (($x139 (= $x183 true)))
 (let ((?x83 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x83)))
 (let (($x100 (= ?x114 input.dst.llvm-%n)))
 (let (($x159 (= $x100 true)))
 (let (($x105 (= $x159 true)))
 (let (($x196 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x196 true)))
 (let (($x52 (= $x109 true)))
 (let (($x48 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (= $x48 true)))
 (let (($x56 (= $x43 true)))
 (let (($x37 (= $x56 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (= $x194 true)))
 (let (($x60 (= $x80 true)))
 (let (($x150 (= $x60 true)))
 (let (($x76 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x15 (= $x76 true)))
 (let (($x198 (= $x15 true)))
 (let (($x70 (= $x198 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x127 true)))
 (let (($x175 (= $x140 true)))
 (let (($x165 (= $x175 true)))
 (let ((?x23 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x146 (bvadd input.dst.llvm-%m ?x23)))
 (let (($x28 (bvugt ?x146 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x146 (_ bv3 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x187 (bvugt ?x146 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x18 (or false (or false (and (and true (or $x65 $x187)) (or $x138 $x28))))))
 (let (($x179 (=> (bvule ?x146 (bvsub (bvadd ?x146 (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x154 (=> (and $x59 (bvule ?x146 (bvsub (bvadd ?x146 (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x101 (= $x154 true)))
 (let (($x91 (= $x101 true)))
 (let (($x191 (= $x91 true)))
 (let (($x149 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x58 (= $x149 true)))
 (let (($x21 (= $x58 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x50)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x12)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x17 $x6)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x57 $x68)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x122 $x197)))
 (let (($x184 (not $x151)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x164 $x185)))
 (let (($x9 (and (not $x134) $x184)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x39 $x163)))
 (let (($x137 (not $x112)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x199 $x155)))
 (let (($x172 (and (not $x133) $x137)))
 (let (($x36 (and (and (and (and (and (and $x172 $x9) $x188) $x148) $x120) $x34) $x136)))
 (let (($x166 (and $x36 $x78)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x77 (or false (or false (and (and true (or $x131 $x41)) (or $x61 $x142))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x200 (and $x90 $x166)))
 (let (($x157 (= $x200 true)))
 (let (($x49 (= $x157 true)))
 (let (($x205 (= $x49 true)))
 (let (($x126 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x124 (= $x126 true)))
 (let (($x97 (= $x124 true)))
 (let (($x13 (= $x97 true)))
 (let (($x118 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x118 true)))
 (let (($x128 (= $x74 true)))
 (let (($x108 (= $x128 true)))
 (let (($x102 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x19 (= $x102 true)))
 (let (($x5 (= $x19 true)))
 (let (($x123 (= $x5 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x135 (= (_ bv0 2) ?x69)))
 (let (($x93 (= $x135 true)))
 (let (($x96 (= $x93 true)))
 (let (($x87 (= ?x114 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x87 true)))
 (let (($x110 (= $x64 true)))
 (let (($x88 (and $x110 $x96)))
 (let (($x75 (and $x88 $x123)))
 (let (($x116 (and $x75 $x108)))
 (let (($x121 (and $x116 $x13)))
 (let (($x45 (and $x121 $x205)))
 (let (($x20 (and $x45 $x21)))
 (let (($x161 (and $x20 $x191)))
 (let (($x104 (and $x161 $x165)))
 (let (($x26 (and $x104 $x70)))
 (let (($x32 (and $x26 $x150)))
 (let (($x125 (and $x32 $x37)))
 (let (($x79 (and $x125 $x52)))
 (let (($x95 (and $x79 $x105)))
 (let (($x103 (and $x95 $x139)))
 (let (($x211 (and $x103 $x210)))
 (let (($x259 (and $x211 $x258)))
 (let (($x272 (and $x259 $x271)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x273 (and $x35 $x272)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x171 $x273)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x14 $x274)))
 (let (($x278 (=> $x275 $x277)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10008008)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x0b002004)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1a008000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1000800b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1a008003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10008008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1a008000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x0b002007 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0b002006 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0b002005 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0b002004 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) a!1 #x00000000)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd51c5c00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3bde5888)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x0e1c6d1c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3bde588b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd51c5c03)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3bde5888)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd51c5c00)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x0e1c6d1f (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0e1c6d1e (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0e1c6d1d (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0e1c6d1c (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) a!1 #x00000000)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x294 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (not $x294)))
 (let (($x35 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x296 (=> $x35 $x295)))
 (let ((?x171 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%m ?x171)))
 (let ((?x59 (bvsub ?x14 ?x171)))
 (let (($x113 (ite (bvsge ?x171 (_ bv0 32)) (bvuge ?x14 ?x59) (bvult ?x14 ?x59))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x162 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x45 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x45)))
 (let ((?x58 ((_ extract 63 32) ?x149)))
 (let (($x30 (= ?x58 ?x162)))
 (let (($x170 (and $x30 $x113)))
 (let (($x49 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x180 (and $x49 $x170)))
 (let (($x106 (= true $x180)))
 (let (($x65 (=> $x35 $x106)))
 (let (($x297 (=> (and $x65 $x35) $x295)))
 (let (($x298 (= $x297 true)))
 (let (($x299 (= $x298 true)))
 (let (($x286 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var695X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var695X) (_ bv0 32)))))
 ))
 (let (($x280 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var694X)))
 (= $x218 false)))
 ))
 (let (($x287 (and $x280 $x286)))
 (let (($x288 (= $x287 true)))
 (let (($x262 (forall ((input.ind-%var689X (_ BitVec 32)) )(let ((?x82 (bvadd (bvmul input.ind-%var689X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x82))))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv2 32))) ?x261)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv3 32))) ?x158)))
 (let ((?x272 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var689X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var689X)))
 (=> $x256 (= ?x272 ?x177)))))))))
 ))
 (let (($x153 (forall ((input.ind-%var688X (_ BitVec 32)) )(let (($x203 (and (bvule (_ bv0 32) input.ind-%var688X) (bvult input.ind-%var688X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var688X)))
 (= $x256 $x203))))
 ))
 (let (($x224 (and $x153 $x262)))
 (let (($x241 (= $x224 true)))
 (let (($x278 (forall ((input.ind-%var683X (_ BitVec 32)) )(let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var683X)))
 (=> $x256 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var683X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var682X (_ BitVec 32)) )(let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var682X)))
 (= $x256 false)))
 ))
 (let (($x279 (and $x263 $x278)))
 (let (($x119 (= $x279 true)))
 (let (($x244 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var677X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var677X) (_ bv0 32)))))
 ))
 (let (($x226 (forall ((input.ind-%var676X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var676X)))
 (= $x218 false)))
 ))
 (let (($x247 (and $x226 $x244)))
 (let (($x250 (= $x247 true)))
 (let ((?x44 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x44)))
 (let (($x145 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let ((?x173 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x173)))
 (let (($x139 (= ?x84 input.dst.llvm-%n)))
 (let (($x103 (= $x139 true)))
 (let (($x129 (= $x103 true)))
 (let (($x53 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x178 (= $x53 true)))
 (let (($x130 (= $x178 true)))
 (let ((?x105 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x95 (= (_ bv0 2) ?x105)))
 (let (($x73 (= $x95 true)))
 (let (($x167 (= $x73 true)))
 (let (($x196 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x196 true)))
 (let (($x52 (= $x109 true)))
 (let (($x79 (= $x52 true)))
 (let (($x48 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (= $x48 true)))
 (let (($x56 (= $x43 true)))
 (let (($x37 (= $x56 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (= $x194 true)))
 (let (($x60 (= $x80 true)))
 (let (($x150 (= $x60 true)))
 (let (($x76 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x15 (= $x76 true)))
 (let (($x198 (= $x15 true)))
 (let (($x70 (= $x198 true)))
 (let (($x127 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x140 (= $x127 true)))
 (let (($x175 (= $x140 true)))
 (let (($x165 (= $x175 true)))
 (let (($x154 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x101 (= $x154 true)))
 (let (($x91 (= $x101 true)))
 (let (($x191 (= $x91 true)))
 (let (($x98 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x174 (= $x98 true)))
 (let (($x189 (= $x174 true)))
 (let (($x18 (= $x189 true)))
 (let (($x187 (= $x65 true)))
 (let (($x51 (= $x187 true)))
 (let (($x143 (= $x51 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x6)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x46)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x186)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (and $x188 $x204)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x86 $x148)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x164 $x185)))
 (let (($x182 (not $x134)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (and $x112 $x137)))
 (let (($x197 (and (not $x172) $x182)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x199 $x155)))
 (let (($x63 (not $x133)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x132 $x89)))
 (let (($x163 (and (not $x90) $x63)))
 (let (($x12 (and (and (and (and (and (and $x163 $x197) $x184) $x156) $x33) $x17) $x40)))
 (let (($x136 (and $x12 $x68)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x117 (or false (or false (and (and true (or $x22 $x41)) (or $x169 $x61))))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x117)))
 (let (($x36 (and $x77 $x136)))
 (let (($x50 (= $x36 true)))
 (let (($x78 (= $x50 true)))
 (let (($x166 (= $x78 true)))
 (let (($x138 (and $x166 $x143)))
 (let (($x179 (and $x138 $x18)))
 (let (($x161 (and $x179 $x191)))
 (let (($x104 (and $x161 $x165)))
 (let (($x26 (and $x104 $x70)))
 (let (($x32 (and $x26 $x150)))
 (let (($x125 (and $x32 $x37)))
 (let (($x100 (and $x125 $x79)))
 (let (($x206 (and $x100 $x167)))
 (let (($x183 (and $x206 $x130)))
 (let (($x29 (and $x183 $x129)))
 (let (($x209 (and $x29 $x208)))
 (let (($x253 (and $x209 $x250)))
 (let (($x168 (and $x253 $x119)))
 (let (($x267 (and $x168 $x241)))
 (let (($x289 (and $x267 $x288)))
 (let (($x121 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x121 $x289)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x124 $x290)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x108 $x291)))
 (let (($x19 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd ?x14 (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x135 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x118 (or false (or false (and (and true (or $x69 $x135)) (or $x102 $x19))))))
 (let (($x128 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x118)))
 (let (($x181 (=> (and $x35 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x118)))
 (let (($x293 (and $x181 $x292)))
 (let (($x300 (=> $x293 $x299)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x294 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (not $x294)))
 (let (($x35 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x296 (=> $x35 $x295)))
 (let ((?x171 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%m ?x171)))
 (let ((?x59 (bvsub ?x14 ?x171)))
 (let (($x113 (ite (bvsge ?x171 (_ bv0 32)) (bvuge ?x14 ?x59) (bvult ?x14 ?x59))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x162 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x45 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x45)))
 (let ((?x58 ((_ extract 63 32) ?x149)))
 (let (($x30 (= ?x58 ?x162)))
 (let (($x170 (and $x30 $x113)))
 (let (($x49 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x180 (and $x49 $x170)))
 (let (($x106 (= true $x180)))
 (let (($x65 (=> $x35 $x106)))
 (let (($x297 (=> (and $x65 $x35) $x295)))
 (let (($x298 (= $x297 true)))
 (let (($x299 (= $x298 true)))
 (let (($x286 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var695X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var695X) (_ bv0 32)))))
 ))
 (let (($x280 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var694X)))
 (= $x218 false)))
 ))
 (let (($x287 (and $x280 $x286)))
 (let (($x288 (= $x287 true)))
 (let (($x262 (forall ((input.ind-%var689X (_ BitVec 32)) )(let ((?x82 (bvadd (bvmul input.ind-%var689X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x82))))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv2 32))) ?x261)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv3 32))) ?x158)))
 (let ((?x272 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var689X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var689X)))
 (=> $x256 (= ?x272 ?x177)))))))))
 ))
 (let (($x153 (forall ((input.ind-%var688X (_ BitVec 32)) )(let (($x203 (and (bvule (_ bv0 32) input.ind-%var688X) (bvult input.ind-%var688X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var688X)))
 (= $x256 $x203))))
 ))
 (let (($x224 (and $x153 $x262)))
 (let (($x241 (= $x224 true)))
 (let (($x278 (forall ((input.ind-%var683X (_ BitVec 32)) )(let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var683X)))
 (=> $x256 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var683X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var682X (_ BitVec 32)) )(let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var682X)))
 (= $x256 false)))
 ))
 (let (($x279 (and $x263 $x278)))
 (let (($x119 (= $x279 true)))
 (let (($x244 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var677X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var677X) (_ bv0 32)))))
 ))
 (let (($x226 (forall ((input.ind-%var676X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var676X)))
 (= $x218 false)))
 ))
 (let (($x247 (and $x226 $x244)))
 (let (($x250 (= $x247 true)))
 (let ((?x44 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x44)))
 (let (($x145 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let ((?x173 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x173)))
 (let (($x139 (= ?x84 input.dst.llvm-%n)))
 (let (($x103 (= $x139 true)))
 (let (($x129 (= $x103 true)))
 (let (($x53 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x178 (= $x53 true)))
 (let (($x130 (= $x178 true)))
 (let ((?x105 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x95 (= (_ bv0 2) ?x105)))
 (let (($x73 (= $x95 true)))
 (let (($x167 (= $x73 true)))
 (let (($x196 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x196 true)))
 (let (($x52 (= $x109 true)))
 (let (($x79 (= $x52 true)))
 (let (($x48 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (= $x48 true)))
 (let (($x56 (= $x43 true)))
 (let (($x37 (= $x56 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (= $x194 true)))
 (let (($x60 (= $x80 true)))
 (let (($x150 (= $x60 true)))
 (let (($x76 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x15 (= $x76 true)))
 (let (($x198 (= $x15 true)))
 (let (($x70 (= $x198 true)))
 (let (($x127 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x140 (= $x127 true)))
 (let (($x175 (= $x140 true)))
 (let (($x165 (= $x175 true)))
 (let (($x154 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x101 (= $x154 true)))
 (let (($x91 (= $x101 true)))
 (let (($x191 (= $x91 true)))
 (let (($x98 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x174 (= $x98 true)))
 (let (($x189 (= $x174 true)))
 (let (($x18 (= $x189 true)))
 (let (($x187 (= $x65 true)))
 (let (($x51 (= $x187 true)))
 (let (($x143 (= $x51 true)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x6)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x46)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x186)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (and $x188 $x204)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x86 $x148)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x164 $x185)))
 (let (($x182 (not $x134)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (and $x112 $x137)))
 (let (($x197 (and (not $x172) $x182)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x199 $x155)))
 (let (($x63 (not $x133)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x132 $x89)))
 (let (($x163 (and (not $x90) $x63)))
 (let (($x12 (and (and (and (and (and (and $x163 $x197) $x184) $x156) $x33) $x17) $x40)))
 (let (($x136 (and $x12 $x68)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x117 (or false (or false (and (and true (or $x22 $x41)) (or $x169 $x61))))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x117)))
 (let (($x36 (and $x77 $x136)))
 (let (($x50 (= $x36 true)))
 (let (($x78 (= $x50 true)))
 (let (($x166 (= $x78 true)))
 (let (($x138 (and $x166 $x143)))
 (let (($x179 (and $x138 $x18)))
 (let (($x161 (and $x179 $x191)))
 (let (($x104 (and $x161 $x165)))
 (let (($x26 (and $x104 $x70)))
 (let (($x32 (and $x26 $x150)))
 (let (($x125 (and $x32 $x37)))
 (let (($x100 (and $x125 $x79)))
 (let (($x206 (and $x100 $x167)))
 (let (($x183 (and $x206 $x130)))
 (let (($x29 (and $x183 $x129)))
 (let (($x209 (and $x29 $x208)))
 (let (($x253 (and $x209 $x250)))
 (let (($x168 (and $x253 $x119)))
 (let (($x267 (and $x168 $x241)))
 (let (($x289 (and $x267 $x288)))
 (let (($x121 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x121 $x289)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x124 $x290)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x108 $x291)))
 (let (($x19 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd ?x14 (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x135 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x118 (or false (or false (and (and true (or $x69 $x135)) (or $x102 $x19))))))
 (let (($x128 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x118)))
 (let (($x181 (=> (and $x35 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x118)))
 (let (($x293 (and $x181 $x292)))
 (let (($x300 (=> $x293 $x299)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x304 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x264 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x302 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x303 (bvneg ?x302)))
 (let (($x305 (= ?x303 ?x304)))
 (let (($x306 (= $x305 true)))
 (let (($x152 (forall ((input.ind-%var719X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var719X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var719X) (_ bv0 32)))))
 ))
 (let (($x265 (forall ((input.ind-%var718X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var718X)))
 (= $x256 false)))
 ))
 (let (($x270 (and $x265 $x152)))
 (let (($x275 (= $x270 true)))
 (let (($x231 (forall ((input.ind-%var713X (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul input.ind-%var713X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x25))))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv2 32))) ?x215)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv3 32))) ?x235)))
 (let ((?x177 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var713X)))
 (let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var713X)))
 (=> $x234 (= ?x177 ?x237)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var712X (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) input.ind-%var712X) (bvult input.ind-%var712X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var712X)))
 (= $x234 $x296))))
 ))
 (let (($x236 (and $x298 $x231)))
 (let (($x283 (= $x236 true)))
 (let (($x267 (forall ((input.ind-%var707X (_ BitVec 32)) )(let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var707X)))
 (=> $x234 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var707X) (_ bv0 32)))))
 ))
 (let (($x260 (forall ((input.ind-%var706X (_ BitVec 32)) )(let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var706X)))
 (= $x234 false)))
 ))
 (let (($x280 (and $x260 $x267)))
 (let (($x286 (= $x280 true)))
 (let (($x153 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var701X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var700X)))
 (= $x256 false)))
 ))
 (let (($x212 (and $x276 $x153)))
 (let (($x202 (= $x212 true)))
 (let ((?x222 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x222)))
 (let (($x252 (= ?x226 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x207 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x129 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x29 (= $x129 true)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (= $x178 true)))
 (let (($x183 (= $x130 true)))
 (let (($x139 (= $x183 true)))
 (let (($x167 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x206 (= $x167 true)))
 (let (($x173 (= $x206 true)))
 (let (($x84 (= $x173 true)))
 (let (($x100 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x159 (= $x100 true)))
 (let (($x105 (= $x159 true)))
 (let (($x95 (= $x105 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x196 (= $x125 true)))
 (let (($x109 (= $x196 true)))
 (let (($x52 (= $x109 true)))
 (let (($x32 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x48 (= $x32 true)))
 (let (($x43 (= $x48 true)))
 (let (($x56 (= $x43 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x140 (bvsub ?x87 ?x47)))
 (let (($x76 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x140) (bvult ?x87 ?x140))))
 (let (($x191 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x161 (ite $x191 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x154 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x154)))
 (let ((?x91 ((_ extract 63 32) ?x101)))
 (let (($x127 (= ?x91 ?x161)))
 (let (($x15 (and $x127 $x76)))
 (let (($x18 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x198 (and $x18 $x15)))
 (let (($x70 (= true $x198)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (=> $x83 $x70)))
 (let (($x194 (= $x26 true)))
 (let (($x80 (= $x194 true)))
 (let (($x60 (= $x80 true)))
 (let (($x143 (= $x83 true)))
 (let (($x138 (= $x143 true)))
 (let (($x28 (= $x138 true)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x20)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x58)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x200)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x166 $x157)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x78 $x49)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x17 $x27)))
 (let (($x40 (not $x46)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x33 $x34)))
 (let (($x6 (and (not $x57) $x40)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x193 $x86)))
 (let (($x186 (not $x188)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x133 $x63)))
 (let (($x148 (and (not $x156) $x186)))
 (let (($x113 (and (and (and (and (and (and $x148 $x6) $x136) $x50) $x205) $x149) $x21)))
 (let (($x170 (and $x113 $x162)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x184 (or false (or false (and (and true (or $x172 $x122)) (or $x134 $x182))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x180 (and $x9 $x170)))
 (let (($x106 (= $x180 true)))
 (let (($x65 (= $x106 true)))
 (let (($x187 (= $x65 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x89 (= (_ bv0 2) ?x132)))
 (let (($x90 (= $x89 true)))
 (let (($x39 (= $x90 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x199 (and $x117 $x39)))
 (let (($x51 (and $x199 $x187)))
 (let (($x98 (and $x51 $x28)))
 (let (($x150 (and $x98 $x60)))
 (let (($x37 (and $x150 $x56)))
 (let (($x79 (and $x37 $x52)))
 (let (($x73 (and $x79 $x95)))
 (let (($x53 (and $x73 $x84)))
 (let (($x103 (and $x53 $x139)))
 (let (($x145 (and $x103 $x141)))
 (let (($x218 (and $x145 $x219)))
 (let (($x244 (and $x218 $x246)))
 (let (($x82 (and $x244 $x202)))
 (let (($x287 (and $x82 $x286)))
 (let (($x221 (and $x287 $x283)))
 (let (($x239 (and $x221 $x275)))
 (let (($x131 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x223 (and (not $x131) $x239)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x16 $x223)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x13 $x266)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x282 (and $x126 $x284)))
 (let (($x75 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd ?x87 (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x88 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x10 (or false (or false (and (and true (or $x96 $x88)) (or $x123 $x75))))))
 (let (($x116 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x10)))
 (let (($x14 (=> (and $x83 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x10)))
 (let (($x285 (and $x14 $x282)))
 (let (($x307 (=> $x285 $x306)))
 (not $x307)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x304 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x264 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x302 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x303 (bvneg ?x302)))
 (let (($x305 (= ?x303 ?x304)))
 (let (($x306 (= $x305 true)))
 (let (($x152 (forall ((input.ind-%var719X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var719X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var719X) (_ bv0 32)))))
 ))
 (let (($x265 (forall ((input.ind-%var718X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var718X)))
 (= $x256 false)))
 ))
 (let (($x270 (and $x265 $x152)))
 (let (($x275 (= $x270 true)))
 (let (($x231 (forall ((input.ind-%var713X (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul input.ind-%var713X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x25))))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv2 32))) ?x215)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv3 32))) ?x235)))
 (let ((?x177 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var713X)))
 (let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var713X)))
 (=> $x234 (= ?x177 ?x237)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var712X (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) input.ind-%var712X) (bvult input.ind-%var712X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var712X)))
 (= $x234 $x296))))
 ))
 (let (($x236 (and $x298 $x231)))
 (let (($x283 (= $x236 true)))
 (let (($x267 (forall ((input.ind-%var707X (_ BitVec 32)) )(let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var707X)))
 (=> $x234 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var707X) (_ bv0 32)))))
 ))
 (let (($x260 (forall ((input.ind-%var706X (_ BitVec 32)) )(let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var706X)))
 (= $x234 false)))
 ))
 (let (($x280 (and $x260 $x267)))
 (let (($x286 (= $x280 true)))
 (let (($x153 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var701X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var700X)))
 (= $x256 false)))
 ))
 (let (($x212 (and $x276 $x153)))
 (let (($x202 (= $x212 true)))
 (let ((?x222 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x222)))
 (let (($x252 (= ?x226 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x207 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x129 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x29 (= $x129 true)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (= $x178 true)))
 (let (($x183 (= $x130 true)))
 (let (($x139 (= $x183 true)))
 (let (($x167 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x206 (= $x167 true)))
 (let (($x173 (= $x206 true)))
 (let (($x84 (= $x173 true)))
 (let (($x100 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x159 (= $x100 true)))
 (let (($x105 (= $x159 true)))
 (let (($x95 (= $x105 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x196 (= $x125 true)))
 (let (($x109 (= $x196 true)))
 (let (($x52 (= $x109 true)))
 (let (($x32 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x48 (= $x32 true)))
 (let (($x43 (= $x48 true)))
 (let (($x56 (= $x43 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x140 (bvsub ?x87 ?x47)))
 (let (($x76 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x140) (bvult ?x87 ?x140))))
 (let (($x191 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x161 (ite $x191 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x154 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x154)))
 (let ((?x91 ((_ extract 63 32) ?x101)))
 (let (($x127 (= ?x91 ?x161)))
 (let (($x15 (and $x127 $x76)))
 (let (($x18 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x198 (and $x18 $x15)))
 (let (($x70 (= true $x198)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (=> $x83 $x70)))
 (let (($x194 (= $x26 true)))
 (let (($x80 (= $x194 true)))
 (let (($x60 (= $x80 true)))
 (let (($x143 (= $x83 true)))
 (let (($x138 (= $x143 true)))
 (let (($x28 (= $x138 true)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x20)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x58)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x200)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x166 $x157)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x78 $x49)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x17 $x27)))
 (let (($x40 (not $x46)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x33 $x34)))
 (let (($x6 (and (not $x57) $x40)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x193 $x86)))
 (let (($x186 (not $x188)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x133 $x63)))
 (let (($x148 (and (not $x156) $x186)))
 (let (($x113 (and (and (and (and (and (and $x148 $x6) $x136) $x50) $x205) $x149) $x21)))
 (let (($x170 (and $x113 $x162)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x184 (or false (or false (and (and true (or $x172 $x122)) (or $x134 $x182))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x180 (and $x9 $x170)))
 (let (($x106 (= $x180 true)))
 (let (($x65 (= $x106 true)))
 (let (($x187 (= $x65 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x89 (= (_ bv0 2) ?x132)))
 (let (($x90 (= $x89 true)))
 (let (($x39 (= $x90 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x199 (and $x117 $x39)))
 (let (($x51 (and $x199 $x187)))
 (let (($x98 (and $x51 $x28)))
 (let (($x150 (and $x98 $x60)))
 (let (($x37 (and $x150 $x56)))
 (let (($x79 (and $x37 $x52)))
 (let (($x73 (and $x79 $x95)))
 (let (($x53 (and $x73 $x84)))
 (let (($x103 (and $x53 $x139)))
 (let (($x145 (and $x103 $x141)))
 (let (($x218 (and $x145 $x219)))
 (let (($x244 (and $x218 $x246)))
 (let (($x82 (and $x244 $x202)))
 (let (($x287 (and $x82 $x286)))
 (let (($x221 (and $x287 $x283)))
 (let (($x239 (and $x221 $x275)))
 (let (($x131 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x223 (and (not $x131) $x239)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x16 $x223)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x13 $x266)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x282 (and $x126 $x284)))
 (let (($x75 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd ?x87 (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x88 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x10 (or false (or false (and (and true (or $x96 $x88)) (or $x123 $x75))))))
 (let (($x116 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x10)))
 (let (($x14 (=> (and $x83 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x10)))
 (let (($x285 (and $x14 $x282)))
 (let (($x307 (=> $x285 $x306)))
 (not $x307)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x55 (bvule ?x255 (_ bv3 32))))
 (let (($x300 (= $x55 true)))
 (let (($x190 (= $x300 true)))
 (let (($x292 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var743X)))
 (=> $x119 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var743X) (_ bv0 32)))))
 ))
 (let (($x271 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var742X)))
 (= $x119 false)))
 ))
 (let (($x248 (and $x271 $x292)))
 (let (($x11 (= $x248 true)))
 (let (($x211 (forall ((input.ind-%var737X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var737X)))
 (=> $x297 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var737X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var736X)))
 (= $x297 false)))
 ))
 (let (($x251 (and $x288 $x211)))
 (let (($x269 (= $x251 true)))
 (let (($x277 (forall ((input.ind-%var731X (_ BitVec 32)) )(let ((?x302 (bvadd (bvmul input.ind-%var731X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x302))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv2 32))) ?x306)))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv3 32))) ?x94)))
 (let ((?x235 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var731X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var731X)))
 (=> $x297 (= ?x235 ?x192)))))))))
 ))
 (let (($x201 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var730X) (bvult input.ind-%var730X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var730X)))
 (= $x297 $x229))))
 ))
 (let (($x279 (and $x201 $x277)))
 (let (($x213 (= $x279 true)))
 (let (($x280 (forall ((input.ind-%var725X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var725X)))
 (=> $x119 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var725X) (_ bv0 32)))))
 ))
 (let (($x212 (forall ((input.ind-%var724X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var724X)))
 (= $x119 false)))
 ))
 (let (($x286 (and $x212 $x280)))
 (let (($x287 (= $x286 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x226)))
 (let (($x245 (= ?x252 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x208 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x29 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x130 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x183 (= $x130 true)))
 (let (($x139 (= $x183 true)))
 (let (($x103 (= $x139 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x109)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x125)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x150)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (and $x60 $x32)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x80 $x48)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x175 $x140)))
 (let (($x104 (not $x165)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x191 $x161)))
 (let (($x15 (and (not $x127) $x104)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x189 $x18)))
 (let (($x154 (not $x179)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x149 $x146)))
 (let (($x91 (and (not $x174) $x154)))
 (let (($x73 (and (and (and (and (and (and $x91 $x15) $x70) $x194) $x43) $x37) $x196)))
 (let (($x167 (and $x73 $x52)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x138 (or false (or false (and (and true (or $x20 $x162)) (or $x106 $x65))))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x206 (and $x98 $x167)))
 (let (($x173 (= $x206 true)))
 (let (($x84 (= $x173 true)))
 (let (($x53 (= $x84 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x200 true)))
 (let (($x49 (= $x157 true)))
 (let (($x205 (= $x49 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x36 true)))
 (let (($x59 (= $x50 true)))
 (let (($x78 (= $x59 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x30 (= (_ bv0 2) ?x6)))
 (let (($x68 (= $x30 true)))
 (let (($x136 (= $x68 true)))
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x188)))
 (let (($x12 (= ?x186 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x12 true)))
 (let (($x27 (= $x17 true)))
 (let (($x148 (= ?x186 input.dst.llvm-%n)))
 (let (($x33 (= $x148 true)))
 (let (($x34 (= $x33 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x156 (= $x63 true)))
 (let (($x204 (= $x156 true)))
 (let (($x193 (= $x204 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let (($x9 (= $x184 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x39 (bvsub ?x87 ?x47)))
 (let (($x72 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x39) (bvult ?x87 ?x39))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x89 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x142)))
 (let ((?x117 ((_ extract 63 32) ?x147)))
 (let (($x90 (= ?x117 ?x89)))
 (let (($x137 (and $x90 $x72)))
 (let (($x61 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x172 (and $x61 $x137)))
 (let (($x122 (= true $x172)))
 (let (($x92 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x92 $x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let (($x182 (= $x134 true)))
 (let (($x22 (= $x92 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x197 (and $x144 $x182)))
 (let (($x133 (and $x197 $x9)))
 (let (($x86 (and $x133 $x193)))
 (let (($x57 (and $x86 $x34)))
 (let (($x46 (and $x57 $x27)))
 (let (($x115 (and $x46 $x136)))
 (let (($x166 (and $x115 $x78)))
 (let (($x23 (and $x166 $x205)))
 (let (($x178 (and $x23 $x53)))
 (let (($x129 (and $x178 $x103)))
 (let (($x207 (and $x129 $x145)))
 (let (($x222 (and $x207 $x218)))
 (let (($x253 (and $x222 $x244)))
 (let (($x295 (and $x253 $x287)))
 (let (($x158 (and $x295 $x213)))
 (let (($x273 (and $x158 $x269)))
 (let (($x67 (and $x273 $x11)))
 (let (($x85 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and (not $x85) $x67)))
 (let (($x160 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and $x160 $x66)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x293 (and $x121 $x240)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x261 (and $x124 $x293)))
 (let (($x128 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd ?x87 (_ bv3 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x31 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x14 (or false (or false (and (and true (or $x102 $x31)) (or $x118 $x128))))))
 (let (($x126 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x81 (=> (and $x92 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x262 (and $x81 $x261)))
 (let (($x249 (=> $x262 $x190)))
 (not $x249)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x55 (bvule ?x255 (_ bv3 32))))
 (let (($x300 (= $x55 true)))
 (let (($x190 (= $x300 true)))
 (let (($x292 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var743X)))
 (=> $x119 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var743X) (_ bv0 32)))))
 ))
 (let (($x271 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var742X)))
 (= $x119 false)))
 ))
 (let (($x248 (and $x271 $x292)))
 (let (($x11 (= $x248 true)))
 (let (($x211 (forall ((input.ind-%var737X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var737X)))
 (=> $x297 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var737X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var736X)))
 (= $x297 false)))
 ))
 (let (($x251 (and $x288 $x211)))
 (let (($x269 (= $x251 true)))
 (let (($x277 (forall ((input.ind-%var731X (_ BitVec 32)) )(let ((?x302 (bvadd (bvmul input.ind-%var731X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x302))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv2 32))) ?x306)))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv3 32))) ?x94)))
 (let ((?x235 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var731X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var731X)))
 (=> $x297 (= ?x235 ?x192)))))))))
 ))
 (let (($x201 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var730X) (bvult input.ind-%var730X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var730X)))
 (= $x297 $x229))))
 ))
 (let (($x279 (and $x201 $x277)))
 (let (($x213 (= $x279 true)))
 (let (($x280 (forall ((input.ind-%var725X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var725X)))
 (=> $x119 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var725X) (_ bv0 32)))))
 ))
 (let (($x212 (forall ((input.ind-%var724X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var724X)))
 (= $x119 false)))
 ))
 (let (($x286 (and $x212 $x280)))
 (let (($x287 (= $x286 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x226)))
 (let (($x245 (= ?x252 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x208 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x29 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x130 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x183 (= $x130 true)))
 (let (($x139 (= $x183 true)))
 (let (($x103 (= $x139 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x109)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x125)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x150)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (and $x60 $x32)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x80 $x48)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x175 $x140)))
 (let (($x104 (not $x165)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x191 $x161)))
 (let (($x15 (and (not $x127) $x104)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x189 $x18)))
 (let (($x154 (not $x179)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x149 $x146)))
 (let (($x91 (and (not $x174) $x154)))
 (let (($x73 (and (and (and (and (and (and $x91 $x15) $x70) $x194) $x43) $x37) $x196)))
 (let (($x167 (and $x73 $x52)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x138 (or false (or false (and (and true (or $x20 $x162)) (or $x106 $x65))))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x206 (and $x98 $x167)))
 (let (($x173 (= $x206 true)))
 (let (($x84 (= $x173 true)))
 (let (($x53 (= $x84 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x200 true)))
 (let (($x49 (= $x157 true)))
 (let (($x205 (= $x49 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x36 true)))
 (let (($x59 (= $x50 true)))
 (let (($x78 (= $x59 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x30 (= (_ bv0 2) ?x6)))
 (let (($x68 (= $x30 true)))
 (let (($x136 (= $x68 true)))
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x188)))
 (let (($x12 (= ?x186 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x12 true)))
 (let (($x27 (= $x17 true)))
 (let (($x148 (= ?x186 input.dst.llvm-%n)))
 (let (($x33 (= $x148 true)))
 (let (($x34 (= $x33 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x156 (= $x63 true)))
 (let (($x204 (= $x156 true)))
 (let (($x193 (= $x204 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let (($x9 (= $x184 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x39 (bvsub ?x87 ?x47)))
 (let (($x72 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x39) (bvult ?x87 ?x39))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x89 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x142)))
 (let ((?x117 ((_ extract 63 32) ?x147)))
 (let (($x90 (= ?x117 ?x89)))
 (let (($x137 (and $x90 $x72)))
 (let (($x61 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x172 (and $x61 $x137)))
 (let (($x122 (= true $x172)))
 (let (($x92 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x92 $x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let (($x182 (= $x134 true)))
 (let (($x22 (= $x92 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x197 (and $x144 $x182)))
 (let (($x133 (and $x197 $x9)))
 (let (($x86 (and $x133 $x193)))
 (let (($x57 (and $x86 $x34)))
 (let (($x46 (and $x57 $x27)))
 (let (($x115 (and $x46 $x136)))
 (let (($x166 (and $x115 $x78)))
 (let (($x23 (and $x166 $x205)))
 (let (($x178 (and $x23 $x53)))
 (let (($x129 (and $x178 $x103)))
 (let (($x207 (and $x129 $x145)))
 (let (($x222 (and $x207 $x218)))
 (let (($x253 (and $x222 $x244)))
 (let (($x295 (and $x253 $x287)))
 (let (($x158 (and $x295 $x213)))
 (let (($x273 (and $x158 $x269)))
 (let (($x67 (and $x273 $x11)))
 (let (($x85 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and (not $x85) $x67)))
 (let (($x160 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and $x160 $x66)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x293 (and $x121 $x240)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x261 (and $x124 $x293)))
 (let (($x128 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd ?x87 (_ bv3 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x31 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x14 (or false (or false (and (and true (or $x102 $x31)) (or $x118 $x128))))))
 (let (($x126 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x81 (=> (and $x92 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x262 (and $x81 $x261)))
 (let (($x249 (=> $x262 $x190)))
 (not $x249)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 213 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x24 (bvsle ?x42 (_ bv3 32))))
 (let (($x71 (= $x24 true)))
 (let (($x243 (= $x71 true)))
 (let (($x257 (forall ((input.ind-%var767X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var767X)))
 (=> $x216 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var767X) (_ bv0 32)))))
 ))
 (let (($x296 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var766X)))
 (= $x216 false)))
 ))
 (let (($x230 (and $x296 $x257)))
 (let (($x82 (= $x230 true)))
 (let (($x265 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var761X)))
 (=> $x307 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var761X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var760X)))
 (= $x307 false)))
 ))
 (let (($x239 (and $x231 $x265)))
 (let (($x284 (= $x239 true)))
 (let (($x214 (forall ((input.ind-%var755X (_ BitVec 32)) )(let ((?x55 (bvadd (bvmul input.ind-%var755X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x55))))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x55 (_ bv2 32))) ?x258)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x55 (_ bv3 32))) ?x298)))
 (let ((?x301 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var755X)))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var755X)))
 (=> $x307 (= ?x301 ?x260)))))))))
 ))
 (let (($x277 (forall ((input.ind-%var754X (_ BitVec 32)) )(let (($x259 (and (bvule (_ bv0 32) input.ind-%var754X) (bvult input.ind-%var754X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var754X)))
 (= $x307 $x259))))
 ))
 (let (($x215 (and $x277 $x214)))
 (let (($x294 (= $x215 true)))
 (let (($x227 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var749X)))
 (=> $x216 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x286 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var748X)))
 (= $x216 false)))
 ))
 (let (($x264 (and $x286 $x227)))
 (let (($x302 (= $x264 true)))
 (let ((?x252 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x252)))
 (let (($x246 (= ?x245 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x183 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x139 (= $x183 true)))
 (let (($x103 (= $x139 true)))
 (let (($x129 (= $x103 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x37)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x105)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x159 $x60)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x194 $x150)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x175 $x140)))
 (let (($x104 (not $x165)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x161 $x127)))
 (let (($x79 (and (not $x76) $x104)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x189 $x18)))
 (let (($x154 (not $x179)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x21 $x28)))
 (let (($x191 (and (not $x101) $x154)))
 (let (($x167 (and (and (and (and (and (and $x191 $x79) $x70) $x26) $x32) $x43) $x56)))
 (let (($x206 (and $x167 $x95)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x149 (or false (or false (and (and true (or $x170 $x180)) (or $x187 $x51))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x149)))
 (let (($x173 (and $x174 $x206)))
 (let (($x84 (= $x173 true)))
 (let (($x53 (= $x84 true)))
 (let (($x178 (= $x53 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x200 true)))
 (let (($x49 (= $x157 true)))
 (let (($x205 (= $x49 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x36 true)))
 (let (($x59 (= $x50 true)))
 (let (($x78 (= $x59 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x30 (= (_ bv0 2) ?x6)))
 (let (($x68 (= $x30 true)))
 (let (($x136 (= $x68 true)))
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x188)))
 (let (($x12 (= ?x186 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x12 true)))
 (let (($x27 (= $x17 true)))
 (let (($x148 (= ?x186 input.dst.llvm-%n)))
 (let (($x33 (= $x148 true)))
 (let (($x34 (= $x33 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x156 (= $x63 true)))
 (let (($x204 (= $x156 true)))
 (let (($x193 (= $x204 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let (($x9 (= $x184 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x199 (bvsub ?x87 ?x47)))
 (let (($x72 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x199) (bvult ?x87 ?x199))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x89 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x142)))
 (let ((?x117 ((_ extract 63 32) ?x147)))
 (let (($x90 (= ?x117 ?x89)))
 (let (($x137 (and $x90 $x72)))
 (let (($x61 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x172 (and $x61 $x137)))
 (let (($x122 (= true $x172)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x114 $x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let (($x182 (= $x134 true)))
 (let (($x22 (= $x114 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x197 (and $x144 $x182)))
 (let (($x133 (and $x197 $x9)))
 (let (($x86 (and $x133 $x193)))
 (let (($x57 (and $x86 $x34)))
 (let (($x46 (and $x57 $x27)))
 (let (($x115 (and $x46 $x136)))
 (let (($x166 (and $x115 $x78)))
 (let (($x23 (and $x166 $x205)))
 (let (($x130 (and $x23 $x178)))
 (let (($x29 (and $x130 $x129)))
 (let (($x208 (and $x29 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x155 (and $x276 $x302)))
 (let (($x176 (and $x155 $x294)))
 (let (($x290 (and $x176 $x284)))
 (let (($x224 (and $x290 $x82)))
 (let (($x278 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (and (not $x278) $x224)))
 (let (($x131 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and $x131 $x250)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x285 (and $x99 $x8)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x291 (and $x97 $x285)))
 (let (($x10 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd ?x87 (_ bv3 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x123 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x81 (or false (or false (and (and true (or $x19 $x123)) (or $x181 $x10))))))
 (let (($x124 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x81)))
 (let (($x69 (=> (and $x114 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x81)))
 (let (($x233 (and $x69 $x291)))
 (let (($x289 (=> $x233 $x243)))
 (not $x289)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x24 (bvsle ?x42 (_ bv3 32))))
 (let (($x71 (= $x24 true)))
 (let (($x243 (= $x71 true)))
 (let (($x257 (forall ((input.ind-%var767X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var767X)))
 (=> $x216 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var767X) (_ bv0 32)))))
 ))
 (let (($x296 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var766X)))
 (= $x216 false)))
 ))
 (let (($x230 (and $x296 $x257)))
 (let (($x82 (= $x230 true)))
 (let (($x265 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var761X)))
 (=> $x307 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var761X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var760X)))
 (= $x307 false)))
 ))
 (let (($x239 (and $x231 $x265)))
 (let (($x284 (= $x239 true)))
 (let (($x214 (forall ((input.ind-%var755X (_ BitVec 32)) )(let ((?x55 (bvadd (bvmul input.ind-%var755X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x55))))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x55 (_ bv2 32))) ?x258)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x55 (_ bv3 32))) ?x298)))
 (let ((?x301 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var755X)))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var755X)))
 (=> $x307 (= ?x301 ?x260)))))))))
 ))
 (let (($x277 (forall ((input.ind-%var754X (_ BitVec 32)) )(let (($x259 (and (bvule (_ bv0 32) input.ind-%var754X) (bvult input.ind-%var754X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var754X)))
 (= $x307 $x259))))
 ))
 (let (($x215 (and $x277 $x214)))
 (let (($x294 (= $x215 true)))
 (let (($x227 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var749X)))
 (=> $x216 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x286 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var748X)))
 (= $x216 false)))
 ))
 (let (($x264 (and $x286 $x227)))
 (let (($x302 (= $x264 true)))
 (let ((?x252 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x252)))
 (let (($x246 (= ?x245 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x183 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x139 (= $x183 true)))
 (let (($x103 (= $x139 true)))
 (let (($x129 (= $x103 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x37)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x105)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x159 $x60)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x194 $x150)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x175 $x140)))
 (let (($x104 (not $x165)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x161 $x127)))
 (let (($x79 (and (not $x76) $x104)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x189 $x18)))
 (let (($x154 (not $x179)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x21 $x28)))
 (let (($x191 (and (not $x101) $x154)))
 (let (($x167 (and (and (and (and (and (and $x191 $x79) $x70) $x26) $x32) $x43) $x56)))
 (let (($x206 (and $x167 $x95)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x149 (or false (or false (and (and true (or $x170 $x180)) (or $x187 $x51))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x149)))
 (let (($x173 (and $x174 $x206)))
 (let (($x84 (= $x173 true)))
 (let (($x53 (= $x84 true)))
 (let (($x178 (= $x53 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x200 true)))
 (let (($x49 (= $x157 true)))
 (let (($x205 (= $x49 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x36 true)))
 (let (($x59 (= $x50 true)))
 (let (($x78 (= $x59 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x30 (= (_ bv0 2) ?x6)))
 (let (($x68 (= $x30 true)))
 (let (($x136 (= $x68 true)))
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x188)))
 (let (($x12 (= ?x186 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x12 true)))
 (let (($x27 (= $x17 true)))
 (let (($x148 (= ?x186 input.dst.llvm-%n)))
 (let (($x33 (= $x148 true)))
 (let (($x34 (= $x33 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x156 (= $x63 true)))
 (let (($x204 (= $x156 true)))
 (let (($x193 (= $x204 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let (($x9 (= $x184 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x199 (bvsub ?x87 ?x47)))
 (let (($x72 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x199) (bvult ?x87 ?x199))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x89 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x142)))
 (let ((?x117 ((_ extract 63 32) ?x147)))
 (let (($x90 (= ?x117 ?x89)))
 (let (($x137 (and $x90 $x72)))
 (let (($x61 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x172 (and $x61 $x137)))
 (let (($x122 (= true $x172)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x114 $x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let (($x182 (= $x134 true)))
 (let (($x22 (= $x114 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x197 (and $x144 $x182)))
 (let (($x133 (and $x197 $x9)))
 (let (($x86 (and $x133 $x193)))
 (let (($x57 (and $x86 $x34)))
 (let (($x46 (and $x57 $x27)))
 (let (($x115 (and $x46 $x136)))
 (let (($x166 (and $x115 $x78)))
 (let (($x23 (and $x166 $x205)))
 (let (($x130 (and $x23 $x178)))
 (let (($x29 (and $x130 $x129)))
 (let (($x208 (and $x29 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x155 (and $x276 $x302)))
 (let (($x176 (and $x155 $x294)))
 (let (($x290 (and $x176 $x284)))
 (let (($x224 (and $x290 $x82)))
 (let (($x278 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (and (not $x278) $x224)))
 (let (($x131 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and $x131 $x250)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x285 (and $x99 $x8)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x291 (and $x97 $x285)))
 (let (($x10 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd ?x87 (_ bv3 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x123 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x81 (or false (or false (and (and true (or $x19 $x123)) (or $x181 $x10))))))
 (let (($x124 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x81)))
 (let (($x69 (=> (and $x114 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x81)))
 (let (($x233 (and $x69 $x291)))
 (let (($x289 (=> $x233 $x243)))
 (not $x289)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 213 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x266 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x283 (bvsge ?x266 (_ bv0 32))))
 (let (($x247 (= $x283 true)))
 (let (($x177 (= $x247 true)))
 (let (($x263 (forall ((input.ind-%var791X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var791X)))
 (=> $x242 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var791X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var790X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var790X)))
 (= $x242 false)))
 ))
 (let (($x306 (and $x152 $x263)))
 (let (($x295 (= $x306 true)))
 (let (($x271 (forall ((input.ind-%var785X (_ BitVec 32)) )(let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var785X)))
 (=> $x35 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var785X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var784X (_ BitVec 32)) )(let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var784X)))
 (= $x35 false)))
 ))
 (let (($x67 (and $x211 $x271)))
 (let (($x293 (= $x67 true)))
 (let (($x279 (forall ((input.ind-%var779X (_ BitVec 32)) )(let ((?x24 (bvadd (bvmul input.ind-%var779X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x24))))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv2 32))) ?x268)))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv3 32))) ?x308)))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var779X)))
 (let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var779X)))
 (=> $x35 (= ?x238 ?x228)))))))))
 ))
 (let (($x214 (forall ((input.ind-%var778X (_ BitVec 32)) )(let (($x202 (and (bvule (_ bv0 32) input.ind-%var778X) (bvult input.ind-%var778X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var778X)))
 (= $x35 $x202))))
 ))
 (let (($x158 (and $x214 $x279)))
 (let (($x54 (= $x158 true)))
 (let (($x107 (forall ((input.ind-%var773X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var773X)))
 (=> $x242 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var773X) (_ bv0 32)))))
 ))
 (let (($x264 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var772X)))
 (= $x242 false)))
 ))
 (let (($x255 (and $x264 $x107)))
 (let (($x55 (= $x255 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x245)))
 (let (($x244 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x141 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x139 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x103 (= $x139 true)))
 (let (($x129 (= $x103 true)))
 (let (($x29 (= $x129 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x43)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x109)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x194)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (and $x73 $x159)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x26 $x80)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x175 $x140)))
 (let (($x104 (not $x165)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x127 $x76)))
 (let (($x125 (and (not $x15) $x104)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x189 $x18)))
 (let (($x154 (not $x179)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x20 $x146)))
 (let (($x161 (and (not $x91) $x154)))
 (let (($x206 (and (and (and (and (and (and $x161 $x125) $x70) $x100) $x60) $x32) $x48)))
 (let (($x173 (and $x206 $x52)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x21 (or false (or false (and (and true (or $x106 $x65)) (or $x143 $x138))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x84 (and $x101 $x173)))
 (let (($x53 (= $x84 true)))
 (let (($x178 (= $x53 true)))
 (let (($x130 (= $x178 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x200 true)))
 (let (($x49 (= $x157 true)))
 (let (($x205 (= $x49 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x36 true)))
 (let (($x59 (= $x50 true)))
 (let (($x78 (= $x59 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x30 (= (_ bv0 2) ?x6)))
 (let (($x68 (= $x30 true)))
 (let (($x136 (= $x68 true)))
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x188)))
 (let (($x12 (= ?x186 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x12 true)))
 (let (($x27 (= $x17 true)))
 (let (($x148 (= ?x186 input.dst.llvm-%n)))
 (let (($x33 (= $x148 true)))
 (let (($x34 (= $x33 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x156 (= $x63 true)))
 (let (($x204 (= $x156 true)))
 (let (($x193 (= $x204 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let (($x9 (= $x184 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x39 (bvsub ?x87 ?x47)))
 (let (($x72 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x39) (bvult ?x87 ?x39))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x89 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x142)))
 (let ((?x117 ((_ extract 63 32) ?x147)))
 (let (($x90 (= ?x117 ?x89)))
 (let (($x137 (and $x90 $x72)))
 (let (($x61 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x172 (and $x61 $x137)))
 (let (($x122 (= true $x172)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x171 $x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let (($x182 (= $x134 true)))
 (let (($x22 (= $x171 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x197 (and $x144 $x182)))
 (let (($x133 (and $x197 $x9)))
 (let (($x86 (and $x133 $x193)))
 (let (($x57 (and $x86 $x34)))
 (let (($x46 (and $x57 $x27)))
 (let (($x115 (and $x46 $x136)))
 (let (($x166 (and $x115 $x78)))
 (let (($x23 (and $x166 $x205)))
 (let (($x183 (and $x23 $x130)))
 (let (($x44 (and $x183 $x29)))
 (let (($x209 (and $x44 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x212 (and $x252 $x276)))
 (let (($x237 (and $x212 $x55)))
 (let (($x304 (and $x237 $x54)))
 (let (($x223 (and $x304 $x293)))
 (let (($x232 (and $x223 $x295)))
 (let (($x282 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (and (not $x282) $x232)))
 (let (($x85 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x213 (and $x85 $x272)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x262 (and $x16 $x213)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x13 $x262)))
 (let (($x14 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd ?x87 (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x118 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x123)))
 (let (($x69 (or false (or false (and (and true (or $x5 $x118)) (or $x116 $x14))))))
 (let (($x97 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x69)))
 (let (($x93 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x69)))
 (let (($x195 (and $x93 $x275)))
 (let (($x220 (=> $x195 $x177)))
 (not $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x266 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x283 (bvsge ?x266 (_ bv0 32))))
 (let (($x247 (= $x283 true)))
 (let (($x177 (= $x247 true)))
 (let (($x263 (forall ((input.ind-%var791X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var791X)))
 (=> $x242 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var791X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var790X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var790X)))
 (= $x242 false)))
 ))
 (let (($x306 (and $x152 $x263)))
 (let (($x295 (= $x306 true)))
 (let (($x271 (forall ((input.ind-%var785X (_ BitVec 32)) )(let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var785X)))
 (=> $x35 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var785X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var784X (_ BitVec 32)) )(let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var784X)))
 (= $x35 false)))
 ))
 (let (($x67 (and $x211 $x271)))
 (let (($x293 (= $x67 true)))
 (let (($x279 (forall ((input.ind-%var779X (_ BitVec 32)) )(let ((?x24 (bvadd (bvmul input.ind-%var779X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x24))))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv2 32))) ?x268)))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x24 (_ bv3 32))) ?x308)))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var779X)))
 (let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var779X)))
 (=> $x35 (= ?x238 ?x228)))))))))
 ))
 (let (($x214 (forall ((input.ind-%var778X (_ BitVec 32)) )(let (($x202 (and (bvule (_ bv0 32) input.ind-%var778X) (bvult input.ind-%var778X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var778X)))
 (= $x35 $x202))))
 ))
 (let (($x158 (and $x214 $x279)))
 (let (($x54 (= $x158 true)))
 (let (($x107 (forall ((input.ind-%var773X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var773X)))
 (=> $x242 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var773X) (_ bv0 32)))))
 ))
 (let (($x264 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var772X)))
 (= $x242 false)))
 ))
 (let (($x255 (and $x264 $x107)))
 (let (($x55 (= $x255 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x245)))
 (let (($x244 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x141 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x139 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x103 (= $x139 true)))
 (let (($x129 (= $x103 true)))
 (let (($x29 (= $x129 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x43)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x109)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x194)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (and $x73 $x159)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x26 $x80)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x175 $x140)))
 (let (($x104 (not $x165)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x127 $x76)))
 (let (($x125 (and (not $x15) $x104)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x189 $x18)))
 (let (($x154 (not $x179)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x20 $x146)))
 (let (($x161 (and (not $x91) $x154)))
 (let (($x206 (and (and (and (and (and (and $x161 $x125) $x70) $x100) $x60) $x32) $x48)))
 (let (($x173 (and $x206 $x52)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x21 (or false (or false (and (and true (or $x106 $x65)) (or $x143 $x138))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x84 (and $x101 $x173)))
 (let (($x53 (= $x84 true)))
 (let (($x178 (= $x53 true)))
 (let (($x130 (= $x178 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x200 true)))
 (let (($x49 (= $x157 true)))
 (let (($x205 (= $x49 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x36 true)))
 (let (($x59 (= $x50 true)))
 (let (($x78 (= $x59 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x30 (= (_ bv0 2) ?x6)))
 (let (($x68 (= $x30 true)))
 (let (($x136 (= $x68 true)))
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x188)))
 (let (($x12 (= ?x186 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x12 true)))
 (let (($x27 (= $x17 true)))
 (let (($x148 (= ?x186 input.dst.llvm-%n)))
 (let (($x33 (= $x148 true)))
 (let (($x34 (= $x33 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x156 (= $x63 true)))
 (let (($x204 (= $x156 true)))
 (let (($x193 (= $x204 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let (($x9 (= $x184 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x39 (bvsub ?x87 ?x47)))
 (let (($x72 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x39) (bvult ?x87 ?x39))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x89 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x142)))
 (let ((?x117 ((_ extract 63 32) ?x147)))
 (let (($x90 (= ?x117 ?x89)))
 (let (($x137 (and $x90 $x72)))
 (let (($x61 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x172 (and $x61 $x137)))
 (let (($x122 (= true $x172)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x171 $x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let (($x182 (= $x134 true)))
 (let (($x22 (= $x171 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x197 (and $x144 $x182)))
 (let (($x133 (and $x197 $x9)))
 (let (($x86 (and $x133 $x193)))
 (let (($x57 (and $x86 $x34)))
 (let (($x46 (and $x57 $x27)))
 (let (($x115 (and $x46 $x136)))
 (let (($x166 (and $x115 $x78)))
 (let (($x23 (and $x166 $x205)))
 (let (($x183 (and $x23 $x130)))
 (let (($x44 (and $x183 $x29)))
 (let (($x209 (and $x44 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x212 (and $x252 $x276)))
 (let (($x237 (and $x212 $x55)))
 (let (($x304 (and $x237 $x54)))
 (let (($x223 (and $x304 $x293)))
 (let (($x232 (and $x223 $x295)))
 (let (($x282 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (and (not $x282) $x232)))
 (let (($x85 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x213 (and $x85 $x272)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x262 (and $x16 $x213)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x13 $x262)))
 (let (($x14 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd ?x87 (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x118 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x123)))
 (let (($x69 (or false (or false (and (and true (or $x5 $x118)) (or $x116 $x14))))))
 (let (($x97 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x69)))
 (let (($x93 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x69)))
 (let (($x195 (and $x93 $x275)))
 (let (($x220 (=> $x195 $x177)))
 (not $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (bvule ?x240 (_ bv3 32))))
 (let (($x256 (= $x269 true)))
 (let (($x229 (= $x256 true)))
 (let (($x299 (forall ((input.ind-%var815X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var815X)))
 (=> $x192 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var815X) (_ bv0 32)))))
 ))
 (let (($x292 (forall ((input.ind-%var814X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var814X)))
 (= $x192 false)))
 ))
 (let (($x258 (and $x292 $x299)))
 (let (($x155 (= $x258 true)))
 (let (($x296 (forall ((input.ind-%var809X (_ BitVec 32)) )(let ((?x190 (bvadd (bvmul input.ind-%var809X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x190))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv2 32))) ?x236)))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv3 32))) ?x8)))
 (let ((?x287 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var809X)))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var809X)))
 (=> $x83 (= ?x287 ?x284)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var808X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var808X) (bvult input.ind-%var808X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var808X)))
 (= $x83 $x232))))
 ))
 (let (($x224 (and $x213 $x296)))
 (let (($x285 (= $x224 true)))
 (let (($x210 (forall ((input.ind-%var803X (_ BitVec 32)) )(let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var803X)))
 (=> $x83 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var803X) (_ bv0 32)))))
 ))
 (let (($x71 (forall ((input.ind-%var802X (_ BitVec 32)) )(let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var802X)))
 (= $x83 false)))
 ))
 (let (($x211 (and $x71 $x210)))
 (let (($x273 (= $x211 true)))
 (let (($x221 (forall ((input.ind-%var797X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var797X)))
 (=> $x192 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var797X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var796X)))
 (= $x192 false)))
 ))
 (let (($x42 (and $x255 $x221)))
 (let (($x24 (= $x42 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x246)))
 (let (($x253 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x103 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x129 (= $x103 true)))
 (let (($x29 (= $x129 true)))
 (let (($x44 (= $x29 true)))
 (let (($x53 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x178 (= $x53 true)))
 (let (($x130 (= $x178 true)))
 (let (($x183 (= $x130 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x80 (bvsub ?x87 ?x47)))
 (let (($x32 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x80) (bvult ?x87 ?x80))))
 (let (($x73 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x194 (ite $x73 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x100 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x167 (bvmul (_ bv4 64) ?x100)))
 (let ((?x26 ((_ extract 63 32) ?x167)))
 (let (($x159 (= ?x26 ?x194)))
 (let (($x95 (and $x159 $x32)))
 (let (($x56 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x109 (and $x56 $x95)))
 (let (($x48 (= true $x109)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (=> $x171 $x48)))
 (let (($x43 (= $x206 true)))
 (let (($x52 (= $x43 true)))
 (let (($x173 (= $x52 true)))
 (let (($x165 (= $x171 true)))
 (let (($x104 (= $x165 true)))
 (let (($x125 (= $x104 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x146)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x101)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x51 $x138)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x187 $x98)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x157 $x49)))
 (let (($x23 (not $x205)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x78 $x166)))
 (let (($x170 (and (not $x200) $x23)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x68 $x136)))
 (let (($x36 (not $x115)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x63 $x156)))
 (let (($x59 (and (not $x30) $x36)))
 (let (($x161 (and (and (and (and (and (and $x59 $x170) $x180) $x65) $x149) $x21) $x20)))
 (let (($x127 (and $x161 $x91)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x46 (or false (or false (and (and true (or $x188 $x186)) (or $x34 $x57))))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x46)))
 (let (($x76 (and $x6 $x127)))
 (let (($x15 (= $x76 true)))
 (let (($x79 (= $x15 true)))
 (let (($x175 (= $x79 true)))
 (let (($x197 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x197 true)))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let ((?x122 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x164 (= (_ bv0 2) ?x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x77)))
 (let (($x163 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x163 true)))
 (let (($x72 (= $x112 true)))
 (let (($x89 (= ?x132 input.dst.llvm-%n)))
 (let (($x90 (= $x89 true)))
 (let (($x199 (= $x90 true)))
 (let (($x169 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x147 (and $x62 $x142)))
 (let (($x39 (and $x147 $x199)))
 (let (($x137 (and $x39 $x72)))
 (let (($x182 (and $x137 $x134)))
 (let (($x9 (and $x182 $x184)))
 (let (($x140 (and $x9 $x175)))
 (let (($x105 (and $x140 $x125)))
 (let (($x84 (and $x105 $x173)))
 (let (($x139 (and $x84 $x183)))
 (let (($x141 (and $x139 $x44)))
 (let (($x219 (and $x141 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x286 (and $x245 $x212)))
 (let (($x288 (and $x286 $x24)))
 (let (($x251 (and $x288 $x273)))
 (let (($x66 (and $x251 $x285)))
 (let (($x168 (and $x66 $x155)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (and (not $x261) $x168)))
 (let (($x278 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x294 (and $x278 $x153)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x160 $x294)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x11 (and $x121 $x233)))
 (let (($x81 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd ?x87 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x181 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x93 (or false (or false (and (and true (or $x75 $x181)) (or $x126 $x81))))))
 (let (($x13 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x93)))
 (let (($x88 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x93)))
 (let (($x267 (and $x88 $x11)))
 (let (($x217 (=> $x267 $x229)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (bvule ?x240 (_ bv3 32))))
 (let (($x256 (= $x269 true)))
 (let (($x229 (= $x256 true)))
 (let (($x299 (forall ((input.ind-%var815X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var815X)))
 (=> $x192 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var815X) (_ bv0 32)))))
 ))
 (let (($x292 (forall ((input.ind-%var814X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var814X)))
 (= $x192 false)))
 ))
 (let (($x258 (and $x292 $x299)))
 (let (($x155 (= $x258 true)))
 (let (($x296 (forall ((input.ind-%var809X (_ BitVec 32)) )(let ((?x190 (bvadd (bvmul input.ind-%var809X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x190))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv2 32))) ?x236)))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv3 32))) ?x8)))
 (let ((?x287 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var809X)))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var809X)))
 (=> $x83 (= ?x287 ?x284)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var808X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var808X) (bvult input.ind-%var808X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var808X)))
 (= $x83 $x232))))
 ))
 (let (($x224 (and $x213 $x296)))
 (let (($x285 (= $x224 true)))
 (let (($x210 (forall ((input.ind-%var803X (_ BitVec 32)) )(let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var803X)))
 (=> $x83 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var803X) (_ bv0 32)))))
 ))
 (let (($x71 (forall ((input.ind-%var802X (_ BitVec 32)) )(let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var802X)))
 (= $x83 false)))
 ))
 (let (($x211 (and $x71 $x210)))
 (let (($x273 (= $x211 true)))
 (let (($x221 (forall ((input.ind-%var797X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var797X)))
 (=> $x192 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var797X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x192 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var796X)))
 (= $x192 false)))
 ))
 (let (($x42 (and $x255 $x221)))
 (let (($x24 (= $x42 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x246)))
 (let (($x253 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x103 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x129 (= $x103 true)))
 (let (($x29 (= $x129 true)))
 (let (($x44 (= $x29 true)))
 (let (($x53 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x178 (= $x53 true)))
 (let (($x130 (= $x178 true)))
 (let (($x183 (= $x130 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x80 (bvsub ?x87 ?x47)))
 (let (($x32 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x80) (bvult ?x87 ?x80))))
 (let (($x73 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x194 (ite $x73 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x100 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x167 (bvmul (_ bv4 64) ?x100)))
 (let ((?x26 ((_ extract 63 32) ?x167)))
 (let (($x159 (= ?x26 ?x194)))
 (let (($x95 (and $x159 $x32)))
 (let (($x56 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x109 (and $x56 $x95)))
 (let (($x48 (= true $x109)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (=> $x171 $x48)))
 (let (($x43 (= $x206 true)))
 (let (($x52 (= $x43 true)))
 (let (($x173 (= $x52 true)))
 (let (($x165 (= $x171 true)))
 (let (($x104 (= $x165 true)))
 (let (($x125 (= $x104 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x146)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x101)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x51 $x138)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x187 $x98)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x157 $x49)))
 (let (($x23 (not $x205)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x78 $x166)))
 (let (($x170 (and (not $x200) $x23)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x68 $x136)))
 (let (($x36 (not $x115)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x63 $x156)))
 (let (($x59 (and (not $x30) $x36)))
 (let (($x161 (and (and (and (and (and (and $x59 $x170) $x180) $x65) $x149) $x21) $x20)))
 (let (($x127 (and $x161 $x91)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x46 (or false (or false (and (and true (or $x188 $x186)) (or $x34 $x57))))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x46)))
 (let (($x76 (and $x6 $x127)))
 (let (($x15 (= $x76 true)))
 (let (($x79 (= $x15 true)))
 (let (($x175 (= $x79 true)))
 (let (($x197 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x197 true)))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let ((?x122 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x164 (= (_ bv0 2) ?x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x77)))
 (let (($x163 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x163 true)))
 (let (($x72 (= $x112 true)))
 (let (($x89 (= ?x132 input.dst.llvm-%n)))
 (let (($x90 (= $x89 true)))
 (let (($x199 (= $x90 true)))
 (let (($x169 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x147 (and $x62 $x142)))
 (let (($x39 (and $x147 $x199)))
 (let (($x137 (and $x39 $x72)))
 (let (($x182 (and $x137 $x134)))
 (let (($x9 (and $x182 $x184)))
 (let (($x140 (and $x9 $x175)))
 (let (($x105 (and $x140 $x125)))
 (let (($x84 (and $x105 $x173)))
 (let (($x139 (and $x84 $x183)))
 (let (($x141 (and $x139 $x44)))
 (let (($x219 (and $x141 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x286 (and $x245 $x212)))
 (let (($x288 (and $x286 $x24)))
 (let (($x251 (and $x288 $x273)))
 (let (($x66 (and $x251 $x285)))
 (let (($x168 (and $x66 $x155)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (and (not $x261) $x168)))
 (let (($x278 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x294 (and $x278 $x153)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x160 $x294)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x11 (and $x121 $x233)))
 (let (($x81 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd ?x87 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x181 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x93 (or false (or false (and (and true (or $x75 $x181)) (or $x126 $x81))))))
 (let (($x13 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x93)))
 (let (($x88 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x93)))
 (let (($x267 (and $x88 $x11)))
 (let (($x217 (=> $x267 $x229)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 213 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x275 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x176 (bvsle ?x275 (_ bv3 32))))
 (let (($x119 (= $x176 true)))
 (let (($x259 (= $x119 true)))
 (let (($x225 (forall ((input.ind-%var839X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var839X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var839X) (_ bv0 32)))))
 ))
 (let (($x305 (forall ((input.ind-%var838X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var838X)))
 (= $x260 false)))
 ))
 (let (($x243 (and $x305 $x225)))
 (let (($x237 (= $x243 true)))
 (let (($x231 (forall ((input.ind-%var833X (_ BitVec 32)) )(let ((?x195 (bvadd (bvmul input.ind-%var833X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x195))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x195 (_ bv2 32))) ?x293)))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x195 (_ bv3 32))) ?x257)))
 (let ((?x265 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var833X)))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var833X)))
 (=> $x272 (= ?x265 ?x94)))))))))
 ))
 (let (($x294 (forall ((input.ind-%var832X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var832X) (bvult input.ind-%var832X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var832X)))
 (= $x272 $x168))))
 ))
 (let (($x220 (and $x294 $x231)))
 (let (($x254 (= $x220 true)))
 (let (($x8 (forall ((input.ind-%var827X (_ BitVec 32)) )(let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var827X)))
 (=> $x272 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var827X) (_ bv0 32)))))
 ))
 (let (($x190 (forall ((input.ind-%var826X (_ BitVec 32)) )(let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var826X)))
 (= $x272 false)))
 ))
 (let (($x284 (and $x190 $x8)))
 (let (($x290 (= $x284 true)))
 (let (($x211 (forall ((input.ind-%var821X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var821X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var821X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var820X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var820X)))
 (= $x260 false)))
 ))
 (let (($x273 (and $x42 $x211)))
 (let (($x251 (= $x273 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x244)))
 (let (($x276 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x29 (= $x129 true)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x130 (= $x178 true)))
 (let (($x183 (= $x130 true)))
 (let (($x139 (= $x183 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x80 (bvsub ?x87 ?x47)))
 (let (($x95 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x80) (bvult ?x87 ?x80))))
 (let (($x194 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x159 (ite $x194 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x167 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x26 (bvmul (_ bv4 64) ?x167)))
 (let ((?x73 ((_ extract 63 32) ?x26)))
 (let (($x60 (= ?x73 ?x159)))
 (let (($x109 (and $x60 $x95)))
 (let (($x196 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x48 (and $x196 $x109)))
 (let (($x206 (= true $x48)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (=> $x171 $x206)))
 (let (($x52 (= $x43 true)))
 (let (($x173 (= $x52 true)))
 (let (($x84 (= $x173 true)))
 (let (($x104 (= $x171 true)))
 (let (($x125 (= $x104 true)))
 (let (($x105 (= $x125 true)))
 (let ((?x21 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x21)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x179)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x187)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x18 $x51)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x65 $x143)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x157 $x49)))
 (let (($x23 (not $x205)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (and $x166 $x200)))
 (let (($x191 (and (not $x162) $x23)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x68 $x136)))
 (let (($x36 (not $x115)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x193 $x40)))
 (let (($x78 (and (not $x50) $x36)))
 (let (($x127 (and (and (and (and (and (and $x78 $x191) $x180) $x106) $x138) $x149) $x174)))
 (let (($x76 (and $x127 $x154)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x63 (or false (or false (and (and true (or $x148 $x33)) (or $x12 $x17))))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x15 (and $x30 $x76)))
 (let (($x79 (= $x15 true)))
 (let (($x175 (= $x79 true)))
 (let (($x140 (= $x175 true)))
 (let (($x197 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x197 true)))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let ((?x122 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x164 (= (_ bv0 2) ?x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x77)))
 (let (($x163 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x163 true)))
 (let (($x72 (= $x112 true)))
 (let (($x89 (= ?x132 input.dst.llvm-%n)))
 (let (($x90 (= $x89 true)))
 (let (($x199 (= $x90 true)))
 (let (($x169 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x147 (and $x62 $x142)))
 (let (($x39 (and $x147 $x199)))
 (let (($x137 (and $x39 $x72)))
 (let (($x182 (and $x137 $x134)))
 (let (($x9 (and $x182 $x184)))
 (let (($x165 (and $x9 $x140)))
 (let (($x198 (and $x165 $x105)))
 (let (($x53 (and $x198 $x84)))
 (let (($x103 (and $x53 $x139)))
 (let (($x145 (and $x103 $x141)))
 (let (($x218 (and $x145 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x264 (and $x246 $x286)))
 (let (($x295 (and $x264 $x251)))
 (let (($x239 (and $x295 $x290)))
 (let (($x177 (and $x239 $x254)))
 (let (($x234 (and $x177 $x237)))
 (let (($x291 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (and (not $x291) $x234)))
 (let (($x282 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x308 (and $x282 $x263)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x131 $x308)))
 (let (($x99 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x215 (and $x99 $x158)))
 (let (($x69 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x181 (bvadd ?x87 (_ bv3 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x116 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x181)))
 (let (($x88 (or false (or false (and (and true (or $x128 $x116)) (or $x124 $x69))))))
 (let (($x121 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x88)))
 (let (($x31 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x88)))
 (let (($x235 (and $x31 $x215)))
 (let (($x270 (=> $x235 $x259)))
 (not $x270)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x275 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x176 (bvsle ?x275 (_ bv3 32))))
 (let (($x119 (= $x176 true)))
 (let (($x259 (= $x119 true)))
 (let (($x225 (forall ((input.ind-%var839X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var839X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var839X) (_ bv0 32)))))
 ))
 (let (($x305 (forall ((input.ind-%var838X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var838X)))
 (= $x260 false)))
 ))
 (let (($x243 (and $x305 $x225)))
 (let (($x237 (= $x243 true)))
 (let (($x231 (forall ((input.ind-%var833X (_ BitVec 32)) )(let ((?x195 (bvadd (bvmul input.ind-%var833X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x195))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x195 (_ bv2 32))) ?x293)))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x195 (_ bv3 32))) ?x257)))
 (let ((?x265 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var833X)))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var833X)))
 (=> $x272 (= ?x265 ?x94)))))))))
 ))
 (let (($x294 (forall ((input.ind-%var832X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var832X) (bvult input.ind-%var832X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var832X)))
 (= $x272 $x168))))
 ))
 (let (($x220 (and $x294 $x231)))
 (let (($x254 (= $x220 true)))
 (let (($x8 (forall ((input.ind-%var827X (_ BitVec 32)) )(let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var827X)))
 (=> $x272 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var827X) (_ bv0 32)))))
 ))
 (let (($x190 (forall ((input.ind-%var826X (_ BitVec 32)) )(let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var826X)))
 (= $x272 false)))
 ))
 (let (($x284 (and $x190 $x8)))
 (let (($x290 (= $x284 true)))
 (let (($x211 (forall ((input.ind-%var821X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var821X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var821X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var820X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var820X)))
 (= $x260 false)))
 ))
 (let (($x273 (and $x42 $x211)))
 (let (($x251 (= $x273 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x244)))
 (let (($x276 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x29 (= $x129 true)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x130 (= $x178 true)))
 (let (($x183 (= $x130 true)))
 (let (($x139 (= $x183 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x80 (bvsub ?x87 ?x47)))
 (let (($x95 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x80) (bvult ?x87 ?x80))))
 (let (($x194 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x159 (ite $x194 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x167 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x26 (bvmul (_ bv4 64) ?x167)))
 (let ((?x73 ((_ extract 63 32) ?x26)))
 (let (($x60 (= ?x73 ?x159)))
 (let (($x109 (and $x60 $x95)))
 (let (($x196 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x48 (and $x196 $x109)))
 (let (($x206 (= true $x48)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (=> $x171 $x206)))
 (let (($x52 (= $x43 true)))
 (let (($x173 (= $x52 true)))
 (let (($x84 (= $x173 true)))
 (let (($x104 (= $x171 true)))
 (let (($x125 (= $x104 true)))
 (let (($x105 (= $x125 true)))
 (let ((?x21 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x21)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x179)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x187)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x18 $x51)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x65 $x143)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x157 $x49)))
 (let (($x23 (not $x205)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (and $x166 $x200)))
 (let (($x191 (and (not $x162) $x23)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x68 $x136)))
 (let (($x36 (not $x115)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x193 $x40)))
 (let (($x78 (and (not $x50) $x36)))
 (let (($x127 (and (and (and (and (and (and $x78 $x191) $x180) $x106) $x138) $x149) $x174)))
 (let (($x76 (and $x127 $x154)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x63 (or false (or false (and (and true (or $x148 $x33)) (or $x12 $x17))))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x15 (and $x30 $x76)))
 (let (($x79 (= $x15 true)))
 (let (($x175 (= $x79 true)))
 (let (($x140 (= $x175 true)))
 (let (($x197 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x197 true)))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let ((?x122 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x164 (= (_ bv0 2) ?x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x77)))
 (let (($x163 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x163 true)))
 (let (($x72 (= $x112 true)))
 (let (($x89 (= ?x132 input.dst.llvm-%n)))
 (let (($x90 (= $x89 true)))
 (let (($x199 (= $x90 true)))
 (let (($x169 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x147 (and $x62 $x142)))
 (let (($x39 (and $x147 $x199)))
 (let (($x137 (and $x39 $x72)))
 (let (($x182 (and $x137 $x134)))
 (let (($x9 (and $x182 $x184)))
 (let (($x165 (and $x9 $x140)))
 (let (($x198 (and $x165 $x105)))
 (let (($x53 (and $x198 $x84)))
 (let (($x103 (and $x53 $x139)))
 (let (($x145 (and $x103 $x141)))
 (let (($x218 (and $x145 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x264 (and $x246 $x286)))
 (let (($x295 (and $x264 $x251)))
 (let (($x239 (and $x295 $x290)))
 (let (($x177 (and $x239 $x254)))
 (let (($x234 (and $x177 $x237)))
 (let (($x291 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (and (not $x291) $x234)))
 (let (($x282 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x308 (and $x282 $x263)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x131 $x308)))
 (let (($x99 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x215 (and $x99 $x158)))
 (let (($x69 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x181 (bvadd ?x87 (_ bv3 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x116 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x181)))
 (let (($x88 (or false (or false (and (and true (or $x128 $x116)) (or $x124 $x69))))))
 (let (($x121 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x88)))
 (let (($x31 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x88)))
 (let (($x235 (and $x31 $x215)))
 (let (($x270 (=> $x235 $x259)))
 (not $x270)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 213 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x228 (bvsge ?x11 (_ bv0 32))))
 (let (($x152 (= $x228 true)))
 (let (($x202 (= $x152 true)))
 (let (($x201 (forall ((input.ind-%var863X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var863X)))
 (=> $x289 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var863X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var862X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var862X)))
 (= $x289 false)))
 ))
 (let (($x266 (and $x67 $x201)))
 (let (($x288 (= $x266 true)))
 (let (($x297 (forall ((input.ind-%var857X (_ BitVec 32)) )(let ((?x267 (bvadd (bvmul input.ind-%var857X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x285)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x232)))
 (let ((?x223 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var857X)))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var857X)))
 (=> $x153 (= ?x223 ?x298)))))))))
 ))
 (let (($x308 (forall ((input.ind-%var856X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var856X) (bvult input.ind-%var856X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var856X)))
 (= $x153 $x234))))
 ))
 (let (($x217 (and $x308 $x297)))
 (let (($x25 (= $x217 true)))
 (let (($x257 (forall ((input.ind-%var851X (_ BitVec 32)) )(let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var851X)))
 (=> $x153 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var851X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var850X (_ BitVec 32)) )(let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var850X)))
 (= $x153 false)))
 ))
 (let (($x94 (and $x195 $x257)))
 (let (($x302 (= $x94 true)))
 (let (($x284 (forall ((input.ind-%var845X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var845X)))
 (=> $x289 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var845X) (_ bv0 32)))))
 ))
 (let (($x273 (forall ((input.ind-%var844X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var844X)))
 (= $x289 false)))
 ))
 (let (($x290 (and $x273 $x284)))
 (let (($x239 (= $x290 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x253)))
 (let (($x212 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x212 true)))
 (let (($x264 (= $x286 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x130 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x183 (= $x130 true)))
 (let (($x139 (= $x183 true)))
 (let (($x103 (= $x139 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x80 (bvsub ?x87 ?x47)))
 (let (($x109 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x80) (bvult ?x87 ?x80))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x60 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x26 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x73 (bvmul (_ bv4 64) ?x26)))
 (let ((?x194 ((_ extract 63 32) ?x73)))
 (let (($x37 (= ?x194 ?x60)))
 (let (($x48 (and $x37 $x109)))
 (let (($x100 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x206 (and $x100 $x48)))
 (let (($x43 (= true $x206)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (=> $x171 $x43)))
 (let (($x173 (= $x52 true)))
 (let (($x84 (= $x173 true)))
 (let (($x53 (= $x84 true)))
 (let (($x125 (= $x171 true)))
 (let (($x105 (= $x125 true)))
 (let (($x198 (= $x105 true)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x149)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x146)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x161 $x18)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x106 $x187)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x157 $x49)))
 (let (($x23 (not $x205)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x200 $x162)))
 (let (($x101 (and (not $x170) $x23)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x68 $x136)))
 (let (($x36 (not $x115)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x188 $x156)))
 (let (($x166 (and (not $x59) $x36)))
 (let (($x76 (and (and (and (and (and (and $x166 $x101) $x180) $x189) $x51) $x138) $x98)))
 (let (($x15 (and $x76 $x91)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x193 (or false (or false (and (and true (or $x34 $x57)) (or $x27 $x46))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x193)))
 (let (($x79 (and $x50 $x15)))
 (let (($x175 (= $x79 true)))
 (let (($x140 (= $x175 true)))
 (let (($x165 (= $x140 true)))
 (let (($x197 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x197 true)))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let ((?x122 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x164 (= (_ bv0 2) ?x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x77)))
 (let (($x163 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x163 true)))
 (let (($x72 (= $x112 true)))
 (let (($x89 (= ?x132 input.dst.llvm-%n)))
 (let (($x90 (= $x89 true)))
 (let (($x199 (= $x90 true)))
 (let (($x169 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x147 (and $x62 $x142)))
 (let (($x39 (and $x147 $x199)))
 (let (($x137 (and $x39 $x72)))
 (let (($x182 (and $x137 $x134)))
 (let (($x9 (and $x182 $x184)))
 (let (($x104 (and $x9 $x165)))
 (let (($x70 (and $x104 $x198)))
 (let (($x178 (and $x70 $x53)))
 (let (($x129 (and $x178 $x103)))
 (let (($x207 (and $x129 $x145)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x255 (and $x244 $x264)))
 (let (($x155 (and $x255 $x239)))
 (let (($x45 (and $x155 $x302)))
 (let (($x229 (and $x45 $x25)))
 (let (($x54 (and $x229 $x288)))
 (let (($x279 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (and (not $x279) $x54)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x261 $x299)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x280 (and $x85 $x82)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x16 $x280)))
 (let (($x93 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd ?x87 (_ bv3 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x126 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x31 (or false (or false (and (and true (or $x10 $x126)) (or $x97 $x93))))))
 (let (($x99 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x31)))
 (let (($x123 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x31)))
 (let (($x307 (and $x123 $x268)))
 (let (($x248 (=> $x307 $x202)))
 (not $x248)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x228 (bvsge ?x11 (_ bv0 32))))
 (let (($x152 (= $x228 true)))
 (let (($x202 (= $x152 true)))
 (let (($x201 (forall ((input.ind-%var863X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var863X)))
 (=> $x289 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var863X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var862X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var862X)))
 (= $x289 false)))
 ))
 (let (($x266 (and $x67 $x201)))
 (let (($x288 (= $x266 true)))
 (let (($x297 (forall ((input.ind-%var857X (_ BitVec 32)) )(let ((?x267 (bvadd (bvmul input.ind-%var857X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x285)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x232)))
 (let ((?x223 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var857X)))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var857X)))
 (=> $x153 (= ?x223 ?x298)))))))))
 ))
 (let (($x308 (forall ((input.ind-%var856X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var856X) (bvult input.ind-%var856X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var856X)))
 (= $x153 $x234))))
 ))
 (let (($x217 (and $x308 $x297)))
 (let (($x25 (= $x217 true)))
 (let (($x257 (forall ((input.ind-%var851X (_ BitVec 32)) )(let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var851X)))
 (=> $x153 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var851X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var850X (_ BitVec 32)) )(let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var850X)))
 (= $x153 false)))
 ))
 (let (($x94 (and $x195 $x257)))
 (let (($x302 (= $x94 true)))
 (let (($x284 (forall ((input.ind-%var845X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var845X)))
 (=> $x289 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var845X) (_ bv0 32)))))
 ))
 (let (($x273 (forall ((input.ind-%var844X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var844X)))
 (= $x289 false)))
 ))
 (let (($x290 (and $x273 $x284)))
 (let (($x239 (= $x290 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x253)))
 (let (($x212 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x212 true)))
 (let (($x264 (= $x286 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x130 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x183 (= $x130 true)))
 (let (($x139 (= $x183 true)))
 (let (($x103 (= $x139 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x80 (bvsub ?x87 ?x47)))
 (let (($x109 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x80) (bvult ?x87 ?x80))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x60 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x26 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x73 (bvmul (_ bv4 64) ?x26)))
 (let ((?x194 ((_ extract 63 32) ?x73)))
 (let (($x37 (= ?x194 ?x60)))
 (let (($x48 (and $x37 $x109)))
 (let (($x100 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x206 (and $x100 $x48)))
 (let (($x43 (= true $x206)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (=> $x171 $x43)))
 (let (($x173 (= $x52 true)))
 (let (($x84 (= $x173 true)))
 (let (($x53 (= $x84 true)))
 (let (($x125 (= $x171 true)))
 (let (($x105 (= $x125 true)))
 (let (($x198 (= $x105 true)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x149)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x146)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x161 $x18)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x106 $x187)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x157 $x49)))
 (let (($x23 (not $x205)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x200 $x162)))
 (let (($x101 (and (not $x170) $x23)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x68 $x136)))
 (let (($x36 (not $x115)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x188 $x156)))
 (let (($x166 (and (not $x59) $x36)))
 (let (($x76 (and (and (and (and (and (and $x166 $x101) $x180) $x189) $x51) $x138) $x98)))
 (let (($x15 (and $x76 $x91)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x193 (or false (or false (and (and true (or $x34 $x57)) (or $x27 $x46))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x193)))
 (let (($x79 (and $x50 $x15)))
 (let (($x175 (= $x79 true)))
 (let (($x140 (= $x175 true)))
 (let (($x165 (= $x140 true)))
 (let (($x197 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x120 (= $x197 true)))
 (let (($x151 (= $x120 true)))
 (let (($x184 (= $x151 true)))
 (let ((?x122 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x164 (= (_ bv0 2) ?x122)))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x77)))
 (let (($x163 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x163 true)))
 (let (($x72 (= $x112 true)))
 (let (($x89 (= ?x132 input.dst.llvm-%n)))
 (let (($x90 (= $x89 true)))
 (let (($x199 (= $x90 true)))
 (let (($x169 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x147 (and $x62 $x142)))
 (let (($x39 (and $x147 $x199)))
 (let (($x137 (and $x39 $x72)))
 (let (($x182 (and $x137 $x134)))
 (let (($x9 (and $x182 $x184)))
 (let (($x104 (and $x9 $x165)))
 (let (($x70 (and $x104 $x198)))
 (let (($x178 (and $x70 $x53)))
 (let (($x129 (and $x178 $x103)))
 (let (($x207 (and $x129 $x145)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x255 (and $x244 $x264)))
 (let (($x155 (and $x255 $x239)))
 (let (($x45 (and $x155 $x302)))
 (let (($x229 (and $x45 $x25)))
 (let (($x54 (and $x229 $x288)))
 (let (($x279 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (and (not $x279) $x54)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x261 $x299)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x280 (and $x85 $x82)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x16 $x280)))
 (let (($x93 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd ?x87 (_ bv3 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x126 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x31 (or false (or false (and (and true (or $x10 $x126)) (or $x97 $x93))))))
 (let (($x99 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x31)))
 (let (($x123 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x31)))
 (let (($x307 (and $x123 $x268)))
 (let (($x248 (=> $x307 $x202)))
 (not $x248)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (bvule ?x215 input.dst.llvm-%n)))
 (let (($x292 (= $x113 true)))
 (let (($x287 (= $x292 true)))
 (let (($x277 (forall ((input.ind-%var887X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var887X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var887X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var886X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var886X)))
 (= $x203 false)))
 ))
 (let (($x240 (and $x224 $x277)))
 (let (($x295 (= $x240 true)))
 (let (($x250 (forall ((input.ind-%var881X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var881X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x235))))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv2 32))) ?x254)))
 (let ((?x71 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv3 32))) ?x168)))
 (let ((?x66 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var881X)))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var881X)))
 (=> $x263 (= ?x66 ?x71)))))))))
 ))
 (let (($x82 (forall ((input.ind-%var880X (_ BitVec 32)) )(let (($x54 (and (bvule (_ bv0 32) input.ind-%var880X) (bvult input.ind-%var880X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var880X)))
 (= $x263 $x54))))
 ))
 (let (($x270 (and $x82 $x250)))
 (let (($x303 (= $x270 true)))
 (let (($x232 (forall ((input.ind-%var875X (_ BitVec 32)) )(let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var875X)))
 (=> $x263 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var875X) (_ bv0 32)))))
 ))
 (let (($x267 (forall ((input.ind-%var874X (_ BitVec 32)) )(let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var874X)))
 (= $x263 false)))
 ))
 (let (($x298 (and $x267 $x232)))
 (let (($x55 (= $x298 true)))
 (let (($x94 (forall ((input.ind-%var869X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var869X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var869X) (_ bv0 32)))))
 ))
 (let (($x290 (forall ((input.ind-%var868X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var868X)))
 (= $x203 false)))
 ))
 (let (($x302 (and $x290 $x94)))
 (let (($x45 (= $x302 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x276)))
 (let (($x286 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x264 (= $x286 true)))
 (let (($x255 (= $x264 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x77)))
 (let (($x245 (= ?x132 input.dst.llvm-%n)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x219 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x139 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x103 (= $x139 true)))
 (let (($x129 (= $x103 true)))
 (let (($x29 (= $x129 true)))
 (let (($x84 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x53 (= $x84 true)))
 (let (($x178 (= $x53 true)))
 (let (($x130 (= $x178 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x159 (bvsub ?x87 ?x47)))
 (let (($x80 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x159) (bvult ?x87 ?x159))))
 (let (($x26 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x73 (ite $x26 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x196 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x100 (bvmul (_ bv4 64) ?x196)))
 (let ((?x167 ((_ extract 63 32) ?x100)))
 (let (($x194 (= ?x167 ?x73)))
 (let (($x32 (and $x194 $x80)))
 (let (($x70 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x95 (and $x70 $x32)))
 (let (($x109 (= true $x95)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (=> $x171 $x109)))
 (let (($x206 (= $x48 true)))
 (let (($x43 (= $x206 true)))
 (let (($x52 (= $x43 true)))
 (let (($x140 (= $x171 true)))
 (let (($x165 (= $x140 true)))
 (let (($x104 (= $x165 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x187)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x65)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x174)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (and $x180 $x20)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x28 $x189)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x200 $x162)))
 (let (($x191 (not $x170)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x115 $x36)))
 (let (($x49 (and (not $x166) $x191)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x188 $x156)))
 (let (($x78 (not $x59)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x151 $x184)))
 (let (($x136 (and (not $x50) $x78)))
 (let (($x98 (and (and (and (and (and (and $x136 $x49) $x23) $x179) $x127) $x161) $x18)))
 (let (($x76 (and $x98 $x51)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x148)))
 (let (($x63 (or false (or false (and (and true (or $x40 $x33)) (or $x12 $x17))))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x149 (and $x193 $x76)))
 (let (($x91 (= $x149 true)))
 (let (($x15 (= $x91 true)))
 (let (($x79 (= $x15 true)))
 (let (($x164 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let (($x182 (= $x134 true)))
 (let ((?x112 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x72 (= (_ bv0 2) ?x112)))
 (let (($x137 (= $x72 true)))
 (let (($x172 (= $x137 true)))
 (let (($x89 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (= $x89 true)))
 (let (($x199 (= $x90 true)))
 (let (($x169 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x147 (and $x62 $x142)))
 (let (($x39 (and $x147 $x199)))
 (let (($x122 (and $x39 $x172)))
 (let (($x197 (and $x122 $x182)))
 (let (($x175 (and $x197 $x79)))
 (let (($x125 (and $x175 $x104)))
 (let (($x173 (and $x125 $x52)))
 (let (($x183 (and $x173 $x130)))
 (let (($x44 (and $x183 $x29)))
 (let (($x209 (and $x44 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x253 (and $x252 $x244)))
 (let (($x42 (and $x253 $x255)))
 (let (($x237 (and $x42 $x45)))
 (let (($x58 (and $x237 $x55)))
 (let (($x259 (and $x58 $x303)))
 (let (($x249 (and $x259 $x295)))
 (let (($x216 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and (not $x216) $x249)))
 (let (($x291 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and $x291 $x225)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x271 (and $x278 $x247)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x230 (and $x160 $x271)))
 (let (($x88 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd ?x87 (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x124 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x123 (or false (or false (and (and true (or $x14 $x124)) (or $x13 $x88))))))
 (let (($x16 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x123)))
 (let (($x118 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x123)))
 (let (($x35 (and $x118 $x230)))
 (let (($x92 (=> $x35 $x287)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (bvule ?x215 input.dst.llvm-%n)))
 (let (($x292 (= $x113 true)))
 (let (($x287 (= $x292 true)))
 (let (($x277 (forall ((input.ind-%var887X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var887X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var887X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var886X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var886X)))
 (= $x203 false)))
 ))
 (let (($x240 (and $x224 $x277)))
 (let (($x295 (= $x240 true)))
 (let (($x250 (forall ((input.ind-%var881X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var881X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x235))))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv2 32))) ?x254)))
 (let ((?x71 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv3 32))) ?x168)))
 (let ((?x66 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var881X)))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var881X)))
 (=> $x263 (= ?x66 ?x71)))))))))
 ))
 (let (($x82 (forall ((input.ind-%var880X (_ BitVec 32)) )(let (($x54 (and (bvule (_ bv0 32) input.ind-%var880X) (bvult input.ind-%var880X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var880X)))
 (= $x263 $x54))))
 ))
 (let (($x270 (and $x82 $x250)))
 (let (($x303 (= $x270 true)))
 (let (($x232 (forall ((input.ind-%var875X (_ BitVec 32)) )(let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var875X)))
 (=> $x263 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var875X) (_ bv0 32)))))
 ))
 (let (($x267 (forall ((input.ind-%var874X (_ BitVec 32)) )(let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var874X)))
 (= $x263 false)))
 ))
 (let (($x298 (and $x267 $x232)))
 (let (($x55 (= $x298 true)))
 (let (($x94 (forall ((input.ind-%var869X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var869X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var869X) (_ bv0 32)))))
 ))
 (let (($x290 (forall ((input.ind-%var868X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var868X)))
 (= $x203 false)))
 ))
 (let (($x302 (and $x290 $x94)))
 (let (($x45 (= $x302 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x276)))
 (let (($x286 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x264 (= $x286 true)))
 (let (($x255 (= $x264 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x77)))
 (let (($x245 (= ?x132 input.dst.llvm-%n)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x219 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x139 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x103 (= $x139 true)))
 (let (($x129 (= $x103 true)))
 (let (($x29 (= $x129 true)))
 (let (($x84 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x53 (= $x84 true)))
 (let (($x178 (= $x53 true)))
 (let (($x130 (= $x178 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x159 (bvsub ?x87 ?x47)))
 (let (($x80 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x159) (bvult ?x87 ?x159))))
 (let (($x26 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x73 (ite $x26 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x196 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x100 (bvmul (_ bv4 64) ?x196)))
 (let ((?x167 ((_ extract 63 32) ?x100)))
 (let (($x194 (= ?x167 ?x73)))
 (let (($x32 (and $x194 $x80)))
 (let (($x70 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x95 (and $x70 $x32)))
 (let (($x109 (= true $x95)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (=> $x171 $x109)))
 (let (($x206 (= $x48 true)))
 (let (($x43 (= $x206 true)))
 (let (($x52 (= $x43 true)))
 (let (($x140 (= $x171 true)))
 (let (($x165 (= $x140 true)))
 (let (($x104 (= $x165 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x187)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x65)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x174)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (and $x180 $x20)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x28 $x189)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x200 $x162)))
 (let (($x191 (not $x170)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x115 $x36)))
 (let (($x49 (and (not $x166) $x191)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x188 $x156)))
 (let (($x78 (not $x59)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x151 $x184)))
 (let (($x136 (and (not $x50) $x78)))
 (let (($x98 (and (and (and (and (and (and $x136 $x49) $x23) $x179) $x127) $x161) $x18)))
 (let (($x76 (and $x98 $x51)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x148)))
 (let (($x63 (or false (or false (and (and true (or $x40 $x33)) (or $x12 $x17))))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x149 (and $x193 $x76)))
 (let (($x91 (= $x149 true)))
 (let (($x15 (= $x91 true)))
 (let (($x79 (= $x15 true)))
 (let (($x164 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x164 true)))
 (let (($x134 (= $x185 true)))
 (let (($x182 (= $x134 true)))
 (let ((?x112 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x72 (= (_ bv0 2) ?x112)))
 (let (($x137 (= $x72 true)))
 (let (($x172 (= $x137 true)))
 (let (($x89 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (= $x89 true)))
 (let (($x199 (= $x90 true)))
 (let (($x169 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x147 (and $x62 $x142)))
 (let (($x39 (and $x147 $x199)))
 (let (($x122 (and $x39 $x172)))
 (let (($x197 (and $x122 $x182)))
 (let (($x175 (and $x197 $x79)))
 (let (($x125 (and $x175 $x104)))
 (let (($x173 (and $x125 $x52)))
 (let (($x183 (and $x173 $x130)))
 (let (($x44 (and $x183 $x29)))
 (let (($x209 (and $x44 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x253 (and $x252 $x244)))
 (let (($x42 (and $x253 $x255)))
 (let (($x237 (and $x42 $x45)))
 (let (($x58 (and $x237 $x55)))
 (let (($x259 (and $x58 $x303)))
 (let (($x249 (and $x259 $x295)))
 (let (($x216 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and (not $x216) $x249)))
 (let (($x291 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and $x291 $x225)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x271 (and $x278 $x247)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x230 (and $x160 $x271)))
 (let (($x88 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd ?x87 (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x124 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x123 (or false (or false (and (and true (or $x14 $x124)) (or $x13 $x88))))))
 (let (($x16 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x123)))
 (let (($x118 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x123)))
 (let (($x35 (and $x118 $x230)))
 (let (($x92 (=> $x35 $x287)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x358 (forall ((input.ind-%var927X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var927X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x124 (bvadd ?x87 (_ bv3 32))))
 (let ((?x325 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x328 (store ?x325 (bvadd ?x87 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x331 (store ?x328 (bvadd ?x87 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x333 (store ?x331 ?x124 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x352 (concat (select ?x333 (bvadd ?x307 (_ bv2 32))) (concat (select ?x333 (bvadd ?x307 (_ bv1 32))) (select ?x333 ?x307)))))
 (let ((?x177 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var927X)))
 (let (($x313 (= input.ind-%var927X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x356 (= (ite $x313 input.spec-%var-i-0.L3%6%bbentry ?x177) (concat (select ?x333 (bvadd ?x307 (_ bv3 32))) ?x352))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var927X)))
 (let (($x314 (or $x299 $x313)))
 (=> $x314 $x356))))))))))))))))
 ))
 (let (($x316 (forall ((input.ind-%var926X (_ BitVec 32)) )(let (($x295 (bvule (_ bv0 32) input.ind-%var926X)))
 (let (($x312 (and $x295 (bvult input.ind-%var926X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x313 (= input.ind-%var926X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var926X)))
 (let (($x314 (or $x299 $x313)))
 (= $x314 $x312)))))))
 ))
 (let (($x359 (and $x316 $x358)))
 (let (($x268 (= true true)))
 (let (($x360 (and $x268 $x359)))
 (let (($x361 (= $x360 true)))
 (let (($x214 (forall ((input.ind-%var915X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var915X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var915X) (_ bv0 32)))))
 ))
 (let (($x220 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var914X)))
 (= $x262 false)))
 ))
 (let (($x275 (and $x220 $x214)))
 (let (($x155 (= $x275 true)))
 (let (($x241 (forall ((input.ind-%var909X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var909X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x307))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv2 32))) ?x25)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv3 32))) ?x234)))
 (let ((?x177 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var909X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var909X)))
 (=> $x299 (= ?x177 ?x190)))))))))
 ))
 (let (($x247 (forall ((input.ind-%var908X (_ BitVec 32)) )(let (($x295 (bvule (_ bv0 32) input.ind-%var908X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var908X)))
 (= $x299 (and $x295 (bvult input.ind-%var908X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x248 (and $x247 $x241)))
 (let (($x300 (= $x248 true)))
 (let (($x168 (forall ((input.ind-%var903X (_ BitVec 32)) )(let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var903X)))
 (=> $x299 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var903X) (_ bv0 32)))))
 ))
 (let (($x235 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var902X)))
 (= $x299 false)))
 ))
 (let (($x71 (and $x235 $x168)))
 (let (($x24 (= $x71 true)))
 (let (($x298 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var897X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var897X) (_ bv0 32)))))
 ))
 (let (($x302 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var896X)))
 (= $x262 false)))
 ))
 (let (($x55 (and $x302 $x298)))
 (let (($x58 (= $x55 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x212)))
 (let (($x264 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x264 true)))
 (let (($x42 (= $x255 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x246 (= (_ bv0 2) ?x245)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x183 true)))
 (let (($x103 (= $x139 true)))
 (let (($x129 (= $x103 true)))
 (let (($x173 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x84 (= $x173 true)))
 (let (($x53 (= $x84 true)))
 (let (($x178 (= $x53 true)))
 (let (($x109 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x48 (= $x109 true)))
 (let (($x206 (= $x48 true)))
 (let (($x43 (= $x206 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x150 (= $x37 true)))
 (let (($x80 (= $x150 true)))
 (let (($x32 (= $x80 true)))
 (let (($x26 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x73 (= $x26 true)))
 (let (($x194 (= $x73 true)))
 (let (($x60 (= $x194 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x79 (bvsub ?x87 ?x47)))
 (let (($x104 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x79) (bvult ?x87 ?x79))))
 (let (($x149 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x91 (ite $x149 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x187 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x51 (bvmul (_ bv4 64) ?x187)))
 (let ((?x76 ((_ extract 63 32) ?x51)))
 (let (($x15 (= ?x76 ?x91)))
 (let (($x125 (and $x15 $x104)))
 (let (($x18 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x105 (and $x18 $x125)))
 (let (($x198 (= true $x105)))
 (let (($x110 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x70 (=> $x110 $x198)))
 (let (($x56 (= $x70 true)))
 (let (($x196 (= $x56 true)))
 (let (($x100 (= $x196 true)))
 (let (($x127 (= $x110 true)))
 (let (($x154 (= $x127 true)))
 (let (($x106 (= $x154 true)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x191)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x162)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x78 $x115)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x59 $x36)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x46 $x6)))
 (let (($x193 (not $x63)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x12 $x17)))
 (let (($x184 (and (not $x27) $x193)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x30 $x148)))
 (let (($x33 (not $x40)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x132 $x89)))
 (let (($x57 (and (not $x186) $x33)))
 (let (($x179 (and (and (and (and (and (and $x57 $x184) $x68) $x156) $x166) $x200) $x170)))
 (let (($x138 (and $x179 $x49)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x182 (or false (or false (and (and true (or $x163 $x112)) (or $x172 $x122))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x28 (and $x9 $x138)))
 (let (($x180 (= $x28 true)))
 (let (($x174 (= $x180 true)))
 (let (($x20 (= $x174 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x189 (and $x117 $x20)))
 (let (($x161 (and $x189 $x106)))
 (let (($x167 (and $x161 $x100)))
 (let (($x159 (and $x167 $x60)))
 (let (($x95 (and $x159 $x32)))
 (let (($x52 (and $x95 $x43)))
 (let (($x130 (and $x52 $x178)))
 (let (($x29 (and $x130 $x129)))
 (let (($x208 (and $x29 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x273 (and $x276 $x42)))
 (let (($x288 (and $x273 $x58)))
 (let (($x213 (and $x288 $x24)))
 (let (($x202 (and $x213 $x300)))
 (let (($x242 (and $x202 $x155)))
 (let (($x227 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and (not $x227) $x242)))
 (let (($x279 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and $x279 $x201)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x296 (and $x282 $x256)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x283 (and $x131 $x296)))
 (let (($x31 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd ?x87 (_ bv3 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x97 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x124)))
 (let (($x118 (or false (or false (and (and true (or $x81 $x97)) (or $x121 $x31))))))
 (let (($x160 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x118)))
 (let (($x181 (=> (and $x110 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x118)))
 (let (($x83 (and $x181 $x283)))
 (let (($x362 (=> $x83 $x361)))
 (not $x362)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x358 (forall ((input.ind-%var927X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var927X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x124 (bvadd ?x87 (_ bv3 32))))
 (let ((?x325 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x328 (store ?x325 (bvadd ?x87 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x331 (store ?x328 (bvadd ?x87 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x333 (store ?x331 ?x124 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x352 (concat (select ?x333 (bvadd ?x307 (_ bv2 32))) (concat (select ?x333 (bvadd ?x307 (_ bv1 32))) (select ?x333 ?x307)))))
 (let ((?x177 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var927X)))
 (let (($x313 (= input.ind-%var927X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x356 (= (ite $x313 input.spec-%var-i-0.L3%6%bbentry ?x177) (concat (select ?x333 (bvadd ?x307 (_ bv3 32))) ?x352))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var927X)))
 (let (($x314 (or $x299 $x313)))
 (=> $x314 $x356))))))))))))))))
 ))
 (let (($x316 (forall ((input.ind-%var926X (_ BitVec 32)) )(let (($x295 (bvule (_ bv0 32) input.ind-%var926X)))
 (let (($x312 (and $x295 (bvult input.ind-%var926X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x313 (= input.ind-%var926X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var926X)))
 (let (($x314 (or $x299 $x313)))
 (= $x314 $x312)))))))
 ))
 (let (($x359 (and $x316 $x358)))
 (let (($x268 (= true true)))
 (let (($x360 (and $x268 $x359)))
 (let (($x361 (= $x360 true)))
 (let (($x214 (forall ((input.ind-%var915X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var915X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var915X) (_ bv0 32)))))
 ))
 (let (($x220 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var914X)))
 (= $x262 false)))
 ))
 (let (($x275 (and $x220 $x214)))
 (let (($x155 (= $x275 true)))
 (let (($x241 (forall ((input.ind-%var909X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var909X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x307))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv2 32))) ?x25)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv3 32))) ?x234)))
 (let ((?x177 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var909X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var909X)))
 (=> $x299 (= ?x177 ?x190)))))))))
 ))
 (let (($x247 (forall ((input.ind-%var908X (_ BitVec 32)) )(let (($x295 (bvule (_ bv0 32) input.ind-%var908X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var908X)))
 (= $x299 (and $x295 (bvult input.ind-%var908X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x248 (and $x247 $x241)))
 (let (($x300 (= $x248 true)))
 (let (($x168 (forall ((input.ind-%var903X (_ BitVec 32)) )(let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var903X)))
 (=> $x299 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var903X) (_ bv0 32)))))
 ))
 (let (($x235 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var902X)))
 (= $x299 false)))
 ))
 (let (($x71 (and $x235 $x168)))
 (let (($x24 (= $x71 true)))
 (let (($x298 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var897X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var897X) (_ bv0 32)))))
 ))
 (let (($x302 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var896X)))
 (= $x262 false)))
 ))
 (let (($x55 (and $x302 $x298)))
 (let (($x58 (= $x55 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x212)))
 (let (($x264 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x264 true)))
 (let (($x42 (= $x255 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x246 (= (_ bv0 2) ?x245)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x183 true)))
 (let (($x103 (= $x139 true)))
 (let (($x129 (= $x103 true)))
 (let (($x173 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x84 (= $x173 true)))
 (let (($x53 (= $x84 true)))
 (let (($x178 (= $x53 true)))
 (let (($x109 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x48 (= $x109 true)))
 (let (($x206 (= $x48 true)))
 (let (($x43 (= $x206 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x150 (= $x37 true)))
 (let (($x80 (= $x150 true)))
 (let (($x32 (= $x80 true)))
 (let (($x26 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x73 (= $x26 true)))
 (let (($x194 (= $x73 true)))
 (let (($x60 (= $x194 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x79 (bvsub ?x87 ?x47)))
 (let (($x104 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x79) (bvult ?x87 ?x79))))
 (let (($x149 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x91 (ite $x149 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x187 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x51 (bvmul (_ bv4 64) ?x187)))
 (let ((?x76 ((_ extract 63 32) ?x51)))
 (let (($x15 (= ?x76 ?x91)))
 (let (($x125 (and $x15 $x104)))
 (let (($x18 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x105 (and $x18 $x125)))
 (let (($x198 (= true $x105)))
 (let (($x110 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x70 (=> $x110 $x198)))
 (let (($x56 (= $x70 true)))
 (let (($x196 (= $x56 true)))
 (let (($x100 (= $x196 true)))
 (let (($x127 (= $x110 true)))
 (let (($x154 (= $x127 true)))
 (let (($x106 (= $x154 true)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x191)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x162)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x78 $x115)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x59 $x36)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x46 $x6)))
 (let (($x193 (not $x63)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x12 $x17)))
 (let (($x184 (and (not $x27) $x193)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x30 $x148)))
 (let (($x33 (not $x40)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x132 $x89)))
 (let (($x57 (and (not $x186) $x33)))
 (let (($x179 (and (and (and (and (and (and $x57 $x184) $x68) $x156) $x166) $x200) $x170)))
 (let (($x138 (and $x179 $x49)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x182 (or false (or false (and (and true (or $x163 $x112)) (or $x172 $x122))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x28 (and $x9 $x138)))
 (let (($x180 (= $x28 true)))
 (let (($x174 (= $x180 true)))
 (let (($x20 (= $x174 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x189 (and $x117 $x20)))
 (let (($x161 (and $x189 $x106)))
 (let (($x167 (and $x161 $x100)))
 (let (($x159 (and $x167 $x60)))
 (let (($x95 (and $x159 $x32)))
 (let (($x52 (and $x95 $x43)))
 (let (($x130 (and $x52 $x178)))
 (let (($x29 (and $x130 $x129)))
 (let (($x208 (and $x29 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x273 (and $x276 $x42)))
 (let (($x288 (and $x273 $x58)))
 (let (($x213 (and $x288 $x24)))
 (let (($x202 (and $x213 $x300)))
 (let (($x242 (and $x202 $x155)))
 (let (($x227 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and (not $x227) $x242)))
 (let (($x279 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and $x279 $x201)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x296 (and $x282 $x256)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x283 (and $x131 $x296)))
 (let (($x31 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd ?x87 (_ bv3 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x97 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x124)))
 (let (($x118 (or false (or false (and (and true (or $x81 $x97)) (or $x121 $x31))))))
 (let (($x160 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x118)))
 (let (($x181 (=> (and $x110 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x118)))
 (let (($x83 (and $x181 $x283)))
 (let (($x362 (=> $x83 $x361)))
 (not $x362)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 236 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x238 (forall ((input.ind-%var959X (_ BitVec 32)) )(let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var959X)))
 (let (($x308 (= input.ind-%var959X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var959X)))
 (let (($x306 (or $x225 $x308)))
 (=> $x306 (= (ite $x308 input.spec-%var-i-0.L3%6%bbentry ?x234) (_ bv0 32))))))))
 ))
 (let (($x301 (forall ((input.ind-%var958X (_ BitVec 32)) )(let (($x308 (= input.ind-%var958X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var958X)))
 (let (($x306 (or $x225 $x308)))
 (= $x306 false)))))
 ))
 (let (($x281 (and $x301 $x238)))
 (let (($x266 (= true true)))
 (let (($x309 (and $x266 $x281)))
 (let (($x334 (= $x309 true)))
 (let (($x263 (forall ((input.ind-%var951X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var951X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var951X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var950X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var950X)))
 (= $x233 false)))
 ))
 (let (($x176 (and $x82 $x263)))
 (let (($x86 (= $x176 true)))
 (let (($x359 (forall ((input.ind-%var945X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var945X)))
 (=> $x225 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var945X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var944X)))
 (= $x225 false)))
 ))
 (let (($x360 (and $x349 $x359)))
 (let (($x361 (= $x360 true)))
 (let (($x328 (forall ((input.ind-%var939X (_ BitVec 32)) )(let ((?x313 (bvadd (bvmul input.ind-%var939X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x313))))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv2 32))) ?x312)))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv3 32))) ?x355)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var939X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var939X)))
 (=> $x225 (= ?x234 ?x325)))))))))
 ))
 (let (($x211 (forall ((input.ind-%var938X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var938X) (bvult input.ind-%var938X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var938X)))
 (= $x225 $x229))))
 ))
 (let (($x330 (and $x211 $x328)))
 (let (($x329 (= $x330 true)))
 (let (($x71 (forall ((input.ind-%var933X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var933X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var933X) (_ bv0 32)))))
 ))
 (let (($x55 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var932X)))
 (= $x233 false)))
 ))
 (let (($x24 (and $x55 $x71)))
 (let (($x213 (= $x24 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x264 (bvneg ?x286)))
 (let (($x255 (= ?x264 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x255 true)))
 (let (($x273 (= $x42 true)))
 (let (($x246 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x218 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x145 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x43)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x48)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x37)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (and $x159 $x150)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x60 $x80)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x105 $x198)))
 (let (($x56 (not $x70)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x165 $x104)))
 (let (($x100 (and (not $x125) $x56)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x149 $x91)))
 (let (($x175 (not $x15)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x49 $x138)))
 (let (($x140 (and (not $x76) $x175)))
 (let (($x183 (and (and (and (and (and (and $x140 $x100) $x26) $x194) $x32) $x109) $x206)))
 (let (($x139 (and $x183 $x52)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x98 (or false (or false (and (and true (or $x20 $x189)) (or $x106 $x161))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x103 (and $x51 $x139)))
 (let (($x129 (= $x103 true)))
 (let (($x29 (= $x129 true)))
 (let (($x44 (= $x29 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x200 true)))
 (let (($x162 (= $x101 true)))
 (let (($x170 (= $x162 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (= $x115 true)))
 (let (($x166 (= $x36 true)))
 (let (($x143 (= $x166 true)))
 (let ((?x156 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x23 (= (_ bv0 2) ?x156)))
 (let (($x59 (= $x23 true)))
 (let (($x78 (= $x59 true)))
 (let ((?x151 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x151)))
 (let (($x21 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (= $x21 true)))
 (let (($x68 (= $x50 true)))
 (let (($x6 (= ?x46 input.dst.llvm-%n)))
 (let (($x63 (= $x6 true)))
 (let (($x193 (= $x63 true)))
 (let (($x33 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x57 (= $x33 true)))
 (let (($x12 (= $x57 true)))
 (let (($x17 (= $x12 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x34 (= $x186 true)))
 (let (($x30 (= $x34 true)))
 (let (($x148 (= $x30 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x163 (bvsub ?x87 ?x47)))
 (let (($x172 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x163) (bvult ?x87 ?x163))))
 (let (($x90 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x197 (ite $x90 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x142)))
 (let ((?x117 ((_ extract 63 32) ?x147)))
 (let (($x39 (= ?x117 ?x197)))
 (let (($x122 (and $x39 $x172)))
 (let (($x61 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x164 (and $x61 $x122)))
 (let (($x185 (= true $x164)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (=> $x171 $x185)))
 (let (($x182 (= $x134 true)))
 (let (($x9 (= $x182 true)))
 (let (($x132 (= $x9 true)))
 (let (($x22 (= $x171 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x89 (and $x144 $x132)))
 (let (($x40 (and $x89 $x148)))
 (let (($x27 (and $x40 $x17)))
 (let (($x184 (and $x27 $x193)))
 (let (($x205 (and $x184 $x68)))
 (let (($x136 (and $x205 $x78)))
 (let (($x157 (and $x136 $x143)))
 (let (($x179 (and $x157 $x170)))
 (let (($x141 (and $x179 $x44)))
 (let (($x219 (and $x141 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x290 (and $x212 $x273)))
 (let (($x295 (and $x290 $x213)))
 (let (($x331 (and $x295 $x329)))
 (let (($x362 (and $x331 $x361)))
 (let (($x271 (and $x362 $x86)))
 (let (($x107 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and (not $x107) $x271)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x284 (and $x216 $x203)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x250 (and $x261 $x284)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x303 (and $x85 $x250)))
 (let (($x123 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd ?x87 (_ bv3 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x13 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x181 (or false (or false (and (and true (or $x69 $x13)) (or $x99 $x123))))))
 (let (($x131 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x181)))
 (let (($x116 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x181)))
 (let (($x259 (and $x116 $x303)))
 (let (($x335 (=> $x259 $x334)))
 (not $x335)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x238 (forall ((input.ind-%var959X (_ BitVec 32)) )(let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var959X)))
 (let (($x308 (= input.ind-%var959X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var959X)))
 (let (($x306 (or $x225 $x308)))
 (=> $x306 (= (ite $x308 input.spec-%var-i-0.L3%6%bbentry ?x234) (_ bv0 32))))))))
 ))
 (let (($x301 (forall ((input.ind-%var958X (_ BitVec 32)) )(let (($x308 (= input.ind-%var958X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var958X)))
 (let (($x306 (or $x225 $x308)))
 (= $x306 false)))))
 ))
 (let (($x281 (and $x301 $x238)))
 (let (($x266 (= true true)))
 (let (($x309 (and $x266 $x281)))
 (let (($x334 (= $x309 true)))
 (let (($x263 (forall ((input.ind-%var951X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var951X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var951X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var950X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var950X)))
 (= $x233 false)))
 ))
 (let (($x176 (and $x82 $x263)))
 (let (($x86 (= $x176 true)))
 (let (($x359 (forall ((input.ind-%var945X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var945X)))
 (=> $x225 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var945X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var944X)))
 (= $x225 false)))
 ))
 (let (($x360 (and $x349 $x359)))
 (let (($x361 (= $x360 true)))
 (let (($x328 (forall ((input.ind-%var939X (_ BitVec 32)) )(let ((?x313 (bvadd (bvmul input.ind-%var939X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x313))))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv2 32))) ?x312)))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv3 32))) ?x355)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var939X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var939X)))
 (=> $x225 (= ?x234 ?x325)))))))))
 ))
 (let (($x211 (forall ((input.ind-%var938X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var938X) (bvult input.ind-%var938X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var938X)))
 (= $x225 $x229))))
 ))
 (let (($x330 (and $x211 $x328)))
 (let (($x329 (= $x330 true)))
 (let (($x71 (forall ((input.ind-%var933X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var933X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var933X) (_ bv0 32)))))
 ))
 (let (($x55 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var932X)))
 (= $x233 false)))
 ))
 (let (($x24 (and $x55 $x71)))
 (let (($x213 (= $x24 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x264 (bvneg ?x286)))
 (let (($x255 (= ?x264 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x255 true)))
 (let (($x273 (= $x42 true)))
 (let (($x246 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x218 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x145 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x43)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x48)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x37)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (and $x159 $x150)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x60 $x80)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x105 $x198)))
 (let (($x56 (not $x70)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x165 $x104)))
 (let (($x100 (and (not $x125) $x56)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x149 $x91)))
 (let (($x175 (not $x15)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x49 $x138)))
 (let (($x140 (and (not $x76) $x175)))
 (let (($x183 (and (and (and (and (and (and $x140 $x100) $x26) $x194) $x32) $x109) $x206)))
 (let (($x139 (and $x183 $x52)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x98 (or false (or false (and (and true (or $x20 $x189)) (or $x106 $x161))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x103 (and $x51 $x139)))
 (let (($x129 (= $x103 true)))
 (let (($x29 (= $x129 true)))
 (let (($x44 (= $x29 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x200 true)))
 (let (($x162 (= $x101 true)))
 (let (($x170 (= $x162 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (= $x115 true)))
 (let (($x166 (= $x36 true)))
 (let (($x143 (= $x166 true)))
 (let ((?x156 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x23 (= (_ bv0 2) ?x156)))
 (let (($x59 (= $x23 true)))
 (let (($x78 (= $x59 true)))
 (let ((?x151 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x151)))
 (let (($x21 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (= $x21 true)))
 (let (($x68 (= $x50 true)))
 (let (($x6 (= ?x46 input.dst.llvm-%n)))
 (let (($x63 (= $x6 true)))
 (let (($x193 (= $x63 true)))
 (let (($x33 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x57 (= $x33 true)))
 (let (($x12 (= $x57 true)))
 (let (($x17 (= $x12 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x34 (= $x186 true)))
 (let (($x30 (= $x34 true)))
 (let (($x148 (= $x30 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x163 (bvsub ?x87 ?x47)))
 (let (($x172 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x163) (bvult ?x87 ?x163))))
 (let (($x90 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x197 (ite $x90 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x142)))
 (let ((?x117 ((_ extract 63 32) ?x147)))
 (let (($x39 (= ?x117 ?x197)))
 (let (($x122 (and $x39 $x172)))
 (let (($x61 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x164 (and $x61 $x122)))
 (let (($x185 (= true $x164)))
 (let (($x171 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (=> $x171 $x185)))
 (let (($x182 (= $x134 true)))
 (let (($x9 (= $x182 true)))
 (let (($x132 (= $x9 true)))
 (let (($x22 (= $x171 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x89 (and $x144 $x132)))
 (let (($x40 (and $x89 $x148)))
 (let (($x27 (and $x40 $x17)))
 (let (($x184 (and $x27 $x193)))
 (let (($x205 (and $x184 $x68)))
 (let (($x136 (and $x205 $x78)))
 (let (($x157 (and $x136 $x143)))
 (let (($x179 (and $x157 $x170)))
 (let (($x141 (and $x179 $x44)))
 (let (($x219 (and $x141 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x290 (and $x212 $x273)))
 (let (($x295 (and $x290 $x213)))
 (let (($x331 (and $x295 $x329)))
 (let (($x362 (and $x331 $x361)))
 (let (($x271 (and $x362 $x86)))
 (let (($x107 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and (not $x107) $x271)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x284 (and $x216 $x203)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x250 (and $x261 $x284)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x303 (and $x85 $x250)))
 (let (($x123 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd ?x87 (_ bv3 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x13 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x181 (or false (or false (and (and true (or $x69 $x13)) (or $x99 $x123))))))
 (let (($x131 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x181)))
 (let (($x116 (=> (and $x171 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x181)))
 (let (($x259 (and $x116 $x303)))
 (let (($x335 (=> $x259 $x334)))
 (not $x335)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02000224)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x02183090)
  (define-fun input.ind-%var958X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0000240)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02000227)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0000243)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02000224)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0000240)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x02183093 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x02183092 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x02183091 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x02183090 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) #x00000000 a!1)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x45879810)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x36c4f9fc)
  (define-fun input.ind-%var958X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb2838e18)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb2838e1b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x36c4f9ff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb2838e18)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x36c4f9fc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x45879813 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x45879812 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x45879811 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x45879810 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) #x00000000 a!1)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x202 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x248 (bvmul (_ bv4294967295 32) ?x202)))
 (let ((?x220 (bvneg ?x248)))
 (let (($x296 (= ?x220 ?x242)))
 (let (($x348 (= $x296 true)))
 (let (($x280 (forall ((input.ind-%var1013X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1013X)))
 (=> $x158 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1013X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var1012X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1012X)))
 (= $x158 false)))
 ))
 (let (($x262 (and $x58 $x280)))
 (let (($x94 (= $x262 true)))
 (let (($x111 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x335 (and (bvule (_ bv0 32) input.ind-%var1006X) (bvult input.ind-%var1006X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x315 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (= $x315 $x335))))
 ))
 (let (($x92 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let ((?x82 (bvadd (bvmul input.ind-%var1007X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x82))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv2 32))) ?x271)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv3 32))) ?x250)))
 (let ((?x311 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1007X)))
 (let (($x315 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1007X)))
 (=> $x315 (= ?x311 ?x266)))))))))
 ))
 (let (($x191 (and $x92 $x111)))
 (let (($x247 (= $x191 true)))
 (let (($x251 (forall ((input.ind-%var1001X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1001X)))
 (=> $x158 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1001X) (_ bv0 32)))))
 ))
 (let (($x24 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1000X)))
 (= $x158 false)))
 ))
 (let (($x268 (and $x24 $x251)))
 (let (($x313 (= $x268 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x255 (bvneg ?x264)))
 (let (($x42 (= ?x255 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x42 true)))
 (let (($x290 (= $x273 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x29 (= $x129 true)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x183 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x43 (= $x183 true)))
 (let (($x52 (= $x43 true)))
 (let (($x139 (= $x52 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x109 (= $x95 true)))
 (let (($x130 (= $x109 true)))
 (let (($x48 (= $x130 true)))
 (let (($x37 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x150 (= $x37 true)))
 (let (($x80 (= $x150 true)))
 (let (($x32 (= $x80 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x198 (bvsub ?x87 ?x47)))
 (let (($x173 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x198) (bvult ?x87 ?x198))))
 (let (($x125 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x196 (ite $x125 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x140 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x165 (bvmul (_ bv4 64) ?x140)))
 (let ((?x104 ((_ extract 63 32) ?x165)))
 (let (($x105 (= ?x104 ?x196)))
 (let (($x167 (and $x105 $x173)))
 (let (($x15 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x26 (and $x15 $x167)))
 (let (($x84 (= true $x26)))
 (let (($x110 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x73 (=> $x110 $x84)))
 (let (($x194 (= $x73 true)))
 (let (($x53 (= $x194 true)))
 (let (($x60 (= $x53 true)))
 (let (($x49 (= $x110 true)))
 (let (($x138 (= $x49 true)))
 (let (($x76 (= $x138 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x180)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x179)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x166 $x157)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x36 $x200)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x50 $x68)))
 (let (($x188 (not $x205)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x193 $x184)))
 (let (($x23 (and (not $x21) $x188)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x17 $x27)))
 (let (($x46 (not $x151)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x137 $x172)))
 (let (($x63 (and (not $x12) $x46)))
 (let (($x106 (and (and (and (and (and (and $x63 $x23) $x78) $x115) $x101) $x170) $x28)))
 (let (($x161 (and $x106 $x187)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x40 (or false (or false (and (and true (or $x134 $x182)) (or $x89 $x186))))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x40)))
 (let (($x146 (and $x57 $x161)))
 (let (($x65 (= $x146 true)))
 (let (($x18 (= $x65 true)))
 (let (($x98 (= $x18 true)))
 (let ((?x199 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x197 (= (_ bv0 2) ?x199)))
 (let (($x39 (= $x197 true)))
 (let (($x112 (= $x39 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x163 (and $x117 $x112)))
 (let (($x51 (and $x163 $x98)))
 (let (($x79 (and $x51 $x76)))
 (let (($x159 (and $x79 $x60)))
 (let (($x178 (and $x159 $x32)))
 (let (($x206 (and $x178 $x48)))
 (let (($x103 (and $x206 $x139)))
 (let (($x145 (and $x103 $x141)))
 (let (($x218 (and $x145 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x302 (and $x286 $x290)))
 (let (($x324 (and $x302 $x313)))
 (let (($x190 (and $x324 $x247)))
 (let (($x294 (and $x190 $x94)))
 (let (($x35 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and (not $x35) $x294)))
 (let (($x227 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and $x227 $x201)))
 (let (($x291 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x291 $x256)))
 (let (($x278 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x155 (and $x278 $x275)))
 (let (($x118 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x87 (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x121 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x116 (or false (or false (and (and true (or $x93 $x121)) (or $x16 $x118))))))
 (let (($x85 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x116)))
 (let (($x126 (=> (and $x110 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x116)))
 (let (($x300 (and $x126 $x155)))
 (let (($x352 (=> $x300 $x348)))
 (not $x352))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x202 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x248 (bvmul (_ bv4294967295 32) ?x202)))
 (let ((?x220 (bvneg ?x248)))
 (let (($x296 (= ?x220 ?x242)))
 (let (($x348 (= $x296 true)))
 (let (($x280 (forall ((input.ind-%var1013X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1013X)))
 (=> $x158 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1013X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var1012X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1012X)))
 (= $x158 false)))
 ))
 (let (($x262 (and $x58 $x280)))
 (let (($x94 (= $x262 true)))
 (let (($x111 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x335 (and (bvule (_ bv0 32) input.ind-%var1006X) (bvult input.ind-%var1006X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x315 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (= $x315 $x335))))
 ))
 (let (($x92 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let ((?x82 (bvadd (bvmul input.ind-%var1007X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x82))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv2 32))) ?x271)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x82 (_ bv3 32))) ?x250)))
 (let ((?x311 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1007X)))
 (let (($x315 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1007X)))
 (=> $x315 (= ?x311 ?x266)))))))))
 ))
 (let (($x191 (and $x92 $x111)))
 (let (($x247 (= $x191 true)))
 (let (($x251 (forall ((input.ind-%var1001X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1001X)))
 (=> $x158 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1001X) (_ bv0 32)))))
 ))
 (let (($x24 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1000X)))
 (= $x158 false)))
 ))
 (let (($x268 (and $x24 $x251)))
 (let (($x313 (= $x268 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x255 (bvneg ?x264)))
 (let (($x42 (= ?x255 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x42 true)))
 (let (($x290 (= $x273 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x29 (= $x129 true)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x183 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x43 (= $x183 true)))
 (let (($x52 (= $x43 true)))
 (let (($x139 (= $x52 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x109 (= $x95 true)))
 (let (($x130 (= $x109 true)))
 (let (($x48 (= $x130 true)))
 (let (($x37 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x150 (= $x37 true)))
 (let (($x80 (= $x150 true)))
 (let (($x32 (= $x80 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x198 (bvsub ?x87 ?x47)))
 (let (($x173 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x198) (bvult ?x87 ?x198))))
 (let (($x125 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x196 (ite $x125 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x140 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x165 (bvmul (_ bv4 64) ?x140)))
 (let ((?x104 ((_ extract 63 32) ?x165)))
 (let (($x105 (= ?x104 ?x196)))
 (let (($x167 (and $x105 $x173)))
 (let (($x15 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x26 (and $x15 $x167)))
 (let (($x84 (= true $x26)))
 (let (($x110 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x73 (=> $x110 $x84)))
 (let (($x194 (= $x73 true)))
 (let (($x53 (= $x194 true)))
 (let (($x60 (= $x53 true)))
 (let (($x49 (= $x110 true)))
 (let (($x138 (= $x49 true)))
 (let (($x76 (= $x138 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x180)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x179)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x166 $x157)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x36 $x200)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x50 $x68)))
 (let (($x188 (not $x205)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x193 $x184)))
 (let (($x23 (and (not $x21) $x188)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x17 $x27)))
 (let (($x46 (not $x151)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x137 $x172)))
 (let (($x63 (and (not $x12) $x46)))
 (let (($x106 (and (and (and (and (and (and $x63 $x23) $x78) $x115) $x101) $x170) $x28)))
 (let (($x161 (and $x106 $x187)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x40 (or false (or false (and (and true (or $x134 $x182)) (or $x89 $x186))))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x40)))
 (let (($x146 (and $x57 $x161)))
 (let (($x65 (= $x146 true)))
 (let (($x18 (= $x65 true)))
 (let (($x98 (= $x18 true)))
 (let ((?x199 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x197 (= (_ bv0 2) ?x199)))
 (let (($x39 (= $x197 true)))
 (let (($x112 (= $x39 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x163 (and $x117 $x112)))
 (let (($x51 (and $x163 $x98)))
 (let (($x79 (and $x51 $x76)))
 (let (($x159 (and $x79 $x60)))
 (let (($x178 (and $x159 $x32)))
 (let (($x206 (and $x178 $x48)))
 (let (($x103 (and $x206 $x139)))
 (let (($x145 (and $x103 $x141)))
 (let (($x218 (and $x145 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x302 (and $x286 $x290)))
 (let (($x324 (and $x302 $x313)))
 (let (($x190 (and $x324 $x247)))
 (let (($x294 (and $x190 $x94)))
 (let (($x35 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and (not $x35) $x294)))
 (let (($x227 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and $x227 $x201)))
 (let (($x291 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x291 $x256)))
 (let (($x278 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x155 (and $x278 $x275)))
 (let (($x118 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x87 (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x121 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x116 (or false (or false (and (and true (or $x93 $x121)) (or $x16 $x118))))))
 (let (($x85 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x116)))
 (let (($x126 (=> (and $x110 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x116)))
 (let (($x300 (and $x126 $x155)))
 (let (($x352 (=> $x300 $x348)))
 (not $x352))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x258 (bvule ?x360 (_ bv3 32))))
 (let (($x214 (= $x258 true)))
 (let (($x361 (= $x214 true)))
 (let (($x25 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1031X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1031X) (_ bv0 32)))))
 ))
 (let (($x326 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1030X)))
 (= $x120 false)))
 ))
 (let (($x168 (and $x326 $x25)))
 (let (($x229 (= $x168 true)))
 (let (($x298 (forall ((input.ind-%var1025X (_ BitVec 32)) )(let ((?x72 (bvadd (bvmul input.ind-%var1025X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x72))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x72 (_ bv2 32))) ?x152)))
 (let ((?x304 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x72 (_ bv3 32))) ?x323)))
 (let ((?x58 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1025X)))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1025X)))
 (=> $x271 (= ?x58 ?x304)))))))))
 ))
 (let (($x111 (forall ((input.ind-%var1024X (_ BitVec 32)) )(let (($x335 (and (bvule (_ bv0 32) input.ind-%var1024X) (bvult input.ind-%var1024X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1024X)))
 (= $x271 $x335))))
 ))
 (let (($x355 (and $x111 $x298)))
 (let (($x325 (= $x355 true)))
 (let (($x329 (forall ((input.ind-%var1019X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1019X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1019X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var1018X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1018X)))
 (= $x120 false)))
 ))
 (let (($x203 (and $x268 $x329)))
 (let (($x284 (= $x203 true)))
 (let ((?x255 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x255)))
 (let (($x273 (= ?x42 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x290 (= $x273 true)))
 (let (($x302 (= $x290 true)))
 (let (($x253 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x130)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x95)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x159)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x60 $x37)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x53 $x150)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x70 $x198)))
 (let (($x100 (not $x56)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x125 $x196)))
 (let (($x167 (and (not $x105) $x100)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x91 $x15)))
 (let (($x140 (not $x175)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x170 $x154)))
 (let (($x104 (and (not $x149) $x140)))
 (let (($x103 (and (and (and (and (and (and $x104 $x167) $x84) $x194) $x80) $x178) $x109)))
 (let (($x129 (and $x103 $x48)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x138 (or false (or false (and (and true (or $x180 $x187)) (or $x65 $x18))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x29 (and $x79 $x129)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x143 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x143 true)))
 (let (($x200 (= $x157 true)))
 (let (($x101 (= $x200 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (= $x136 true)))
 (let (($x189 (= $x115 true)))
 (let (($x36 (= $x189 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x174 (= (_ bv0 2) ?x23)))
 (let (($x59 (= $x174 true)))
 (let (($x78 (= $x59 true)))
 (let ((?x151 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x151)))
 (let (($x156 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (= $x156 true)))
 (let (($x68 (= $x50 true)))
 (let (($x63 (= ?x46 input.dst.llvm-%n)))
 (let (($x193 (= $x63 true)))
 (let (($x184 (= $x193 true)))
 (let (($x172 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x12 (= $x172 true)))
 (let (($x6 (= $x12 true)))
 (let (($x17 (= $x6 true)))
 (let (($x30 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x148 (= $x30 true)))
 (let (($x40 (= $x148 true)))
 (let (($x57 (= $x40 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x112 (bvsub ?x87 ?x47)))
 (let (($x33 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x112) (bvult ?x87 ?x112))))
 (let (($x90 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x197 (ite $x90 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x142)))
 (let ((?x117 ((_ extract 63 32) ?x147)))
 (let (($x39 (= ?x117 ?x197)))
 (let (($x185 (and $x39 $x33)))
 (let (($x61 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x134 (and $x61 $x185)))
 (let (($x182 (= true $x134)))
 (let (($x5 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x5 $x182)))
 (let (($x132 (= $x9 true)))
 (let (($x89 (= $x132 true)))
 (let (($x186 (= $x89 true)))
 (let (($x22 (= $x5 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x34 (and $x144 $x186)))
 (let (($x137 (and $x34 $x57)))
 (let (($x27 (and $x137 $x17)))
 (let (($x21 (and $x27 $x184)))
 (let (($x205 (and $x21 $x68)))
 (let (($x20 (and $x205 $x78)))
 (let (($x166 (and $x20 $x36)))
 (let (($x127 (and $x166 $x101)))
 (let (($x207 (and $x127 $x145)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x264 (and $x244 $x286)))
 (let (($x55 (and $x264 $x302)))
 (let (($x176 (and $x55 $x284)))
 (let (($x357 (and $x176 $x325)))
 (let (($x64 (and $x357 $x229)))
 (let (($x241 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x285 (and (not $x241) $x64)))
 (let (($x107 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x235 (and $x107 $x285)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x281 (and $x279 $x235)))
 (let (($x282 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x295 (and $x282 $x281)))
 (let (($x181 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x121 (bvadd ?x87 (_ bv3 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x99 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x121)))
 (let (($x126 (or false (or false (and (and true (or $x88 $x99)) (or $x160 $x181))))))
 (let (($x278 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x126)))
 (let (($x124 (=> (and $x5 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x126)))
 (let (($x243 (and $x124 $x295)))
 (let (($x240 (=> $x243 $x361)))
 (not $x240))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x258 (bvule ?x360 (_ bv3 32))))
 (let (($x214 (= $x258 true)))
 (let (($x361 (= $x214 true)))
 (let (($x25 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1031X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1031X) (_ bv0 32)))))
 ))
 (let (($x326 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1030X)))
 (= $x120 false)))
 ))
 (let (($x168 (and $x326 $x25)))
 (let (($x229 (= $x168 true)))
 (let (($x298 (forall ((input.ind-%var1025X (_ BitVec 32)) )(let ((?x72 (bvadd (bvmul input.ind-%var1025X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x72))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x72 (_ bv2 32))) ?x152)))
 (let ((?x304 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x72 (_ bv3 32))) ?x323)))
 (let ((?x58 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1025X)))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1025X)))
 (=> $x271 (= ?x58 ?x304)))))))))
 ))
 (let (($x111 (forall ((input.ind-%var1024X (_ BitVec 32)) )(let (($x335 (and (bvule (_ bv0 32) input.ind-%var1024X) (bvult input.ind-%var1024X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1024X)))
 (= $x271 $x335))))
 ))
 (let (($x355 (and $x111 $x298)))
 (let (($x325 (= $x355 true)))
 (let (($x329 (forall ((input.ind-%var1019X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1019X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1019X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var1018X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1018X)))
 (= $x120 false)))
 ))
 (let (($x203 (and $x268 $x329)))
 (let (($x284 (= $x203 true)))
 (let ((?x255 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x255)))
 (let (($x273 (= ?x42 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x290 (= $x273 true)))
 (let (($x302 (= $x290 true)))
 (let (($x253 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x130)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x95)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x159)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x60 $x37)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x53 $x150)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x70 $x198)))
 (let (($x100 (not $x56)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x125 $x196)))
 (let (($x167 (and (not $x105) $x100)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x91 $x15)))
 (let (($x140 (not $x175)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x170 $x154)))
 (let (($x104 (and (not $x149) $x140)))
 (let (($x103 (and (and (and (and (and (and $x104 $x167) $x84) $x194) $x80) $x178) $x109)))
 (let (($x129 (and $x103 $x48)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x138 (or false (or false (and (and true (or $x180 $x187)) (or $x65 $x18))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x29 (and $x79 $x129)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x143 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x143 true)))
 (let (($x200 (= $x157 true)))
 (let (($x101 (= $x200 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (= $x136 true)))
 (let (($x189 (= $x115 true)))
 (let (($x36 (= $x189 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x174 (= (_ bv0 2) ?x23)))
 (let (($x59 (= $x174 true)))
 (let (($x78 (= $x59 true)))
 (let ((?x151 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x151)))
 (let (($x156 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (= $x156 true)))
 (let (($x68 (= $x50 true)))
 (let (($x63 (= ?x46 input.dst.llvm-%n)))
 (let (($x193 (= $x63 true)))
 (let (($x184 (= $x193 true)))
 (let (($x172 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x12 (= $x172 true)))
 (let (($x6 (= $x12 true)))
 (let (($x17 (= $x6 true)))
 (let (($x30 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x148 (= $x30 true)))
 (let (($x40 (= $x148 true)))
 (let (($x57 (= $x40 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x112 (bvsub ?x87 ?x47)))
 (let (($x33 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x112) (bvult ?x87 ?x112))))
 (let (($x90 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x197 (ite $x90 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x142)))
 (let ((?x117 ((_ extract 63 32) ?x147)))
 (let (($x39 (= ?x117 ?x197)))
 (let (($x185 (and $x39 $x33)))
 (let (($x61 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x134 (and $x61 $x185)))
 (let (($x182 (= true $x134)))
 (let (($x5 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x5 $x182)))
 (let (($x132 (= $x9 true)))
 (let (($x89 (= $x132 true)))
 (let (($x186 (= $x89 true)))
 (let (($x22 (= $x5 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x34 (and $x144 $x186)))
 (let (($x137 (and $x34 $x57)))
 (let (($x27 (and $x137 $x17)))
 (let (($x21 (and $x27 $x184)))
 (let (($x205 (and $x21 $x68)))
 (let (($x20 (and $x205 $x78)))
 (let (($x166 (and $x20 $x36)))
 (let (($x127 (and $x166 $x101)))
 (let (($x207 (and $x127 $x145)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x264 (and $x244 $x286)))
 (let (($x55 (and $x264 $x302)))
 (let (($x176 (and $x55 $x284)))
 (let (($x357 (and $x176 $x325)))
 (let (($x64 (and $x357 $x229)))
 (let (($x241 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x285 (and (not $x241) $x64)))
 (let (($x107 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x235 (and $x107 $x285)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x281 (and $x279 $x235)))
 (let (($x282 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x295 (and $x282 $x281)))
 (let (($x181 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x121 (bvadd ?x87 (_ bv3 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x99 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x121)))
 (let (($x126 (or false (or false (and (and true (or $x88 $x99)) (or $x160 $x181))))))
 (let (($x278 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x126)))
 (let (($x124 (=> (and $x5 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x126)))
 (let (($x243 (and $x124 $x295)))
 (let (($x240 (=> $x243 $x361)))
 (not $x240))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000018)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000001b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000018)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff4 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) false
      (not (bvule #x00000003 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5b95e560)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc49ec5d4)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x5f801060)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc49ec5d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5b95e563)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc49ec5d4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5b95e560)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x02000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #x5f801063 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x5f801062 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x5f801061 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x5f801060 (bvmul #x00000004 x!0))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x247 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x267 (bvule ?x247 (_ bv4 32))))
 (let (($x349 (= $x267 true)))
 (let (($x327 (= $x349 true)))
 (let (($x362 (forall ((input.ind-%var1095X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1095X)))
 (=> $x311 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1095X) (_ bv0 32)))))
 ))
 (let (($x201 (forall ((input.ind-%var1094X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1094X)))
 (= $x311 false)))
 ))
 (let (($x263 (and $x201 $x362)))
 (let (($x306 (= $x263 true)))
 (let (($x294 (forall ((input.ind-%var1089X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var1089X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x280))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv2 32))) ?x315)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv3 32))) ?x86)))
 (let ((?x326 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1089X)))
 (let (($x213 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1089X)))
 (=> $x213 (= ?x326 ?x158)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1088X (_ BitVec 32)) )(let (($x133 (and (bvule (_ bv0 32) input.ind-%var1088X) (bvult input.ind-%var1088X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x213 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1088X)))
 (= $x213 $x133))))
 ))
 (let (($x242 (and $x298 $x294)))
 (let (($x296 (= $x242 true)))
 (let (($x262 (forall ((input.ind-%var1083X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1083X)))
 (=> $x311 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1083X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1082X)))
 (= $x311 false)))
 ))
 (let (($x171 (and $x203 $x262)))
 (let (($x72 (= $x171 true)))
 (let ((?x42 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x42)))
 (let (($x290 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x290 true)))
 (let (($x55 (= $x302 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x264 (= $x286 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x209 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x178)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x52)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x53)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x43 $x60)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x194 $x159)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x70 $x198)))
 (let (($x100 (not $x56)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x196 $x105)))
 (let (($x206 (and (not $x173) $x100)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x91 $x15)))
 (let (($x140 (not $x175)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x28 $x76)))
 (let (($x125 (and (not $x165) $x140)))
 (let (($x129 (and (and (and (and (and (and $x125 $x206) $x84) $x73) $x37) $x80) $x32)))
 (let (($x29 (and $x129 $x139)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x187)))
 (let (($x170 (or false (or false (and (and true (or $x161 $x146)) (or $x98 $x51))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x170)))
 (let (($x44 (and $x149 $x29)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x143 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x143 true)))
 (let (($x200 (= $x157 true)))
 (let (($x101 (= $x200 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (= $x136 true)))
 (let (($x189 (= $x115 true)))
 (let (($x36 (= $x189 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x174 (= (_ bv0 2) ?x23)))
 (let (($x59 (= $x174 true)))
 (let (($x78 (= $x59 true)))
 (let (($x21 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x156 (= $x21 true)))
 (let (($x50 (= $x156 true)))
 (let (($x68 (= $x50 true)))
 (let ((?x172 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x172)))
 (let (($x46 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (= $x46 true)))
 (let (($x193 (= $x63 true)))
 (let (($x6 (= ?x12 input.dst.llvm-%n)))
 (let (($x17 (= $x6 true)))
 (let (($x27 (= $x17 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x185 (bvsub ?x87 ?x47)))
 (let (($x132 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x185) (bvult ?x87 ?x185))))
 (let (($x112 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x164 (ite $x112 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x197 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x39 (bvmul (_ bv4 64) ?x197)))
 (let ((?x163 ((_ extract 63 32) ?x39)))
 (let (($x33 (= ?x163 ?x164)))
 (let (($x89 (and $x33 $x132)))
 (let (($x90 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x186 (and $x90 $x89)))
 (let (($x34 (= true $x186)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x30 (=> $x114 $x34)))
 (let (($x148 (= $x30 true)))
 (let (($x40 (= $x148 true)))
 (let (($x57 (= $x40 true)))
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x22 (= $x114 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x142 (and $x144 $x38)))
 (let (($x137 (and $x142 $x57)))
 (let (($x151 (and $x137 $x27)))
 (let (($x184 (and $x151 $x193)))
 (let (($x205 (and $x184 $x68)))
 (let (($x20 (and $x205 $x78)))
 (let (($x166 (and $x20 $x36)))
 (let (($x127 (and $x166 $x101)))
 (let (($x208 (and $x127 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x255 (and $x253 $x264)))
 (let (($x24 (and $x255 $x55)))
 (let (($x274 (and $x24 $x72)))
 (let (($x202 (and $x274 $x296)))
 (let (($x358 (and $x202 $x306)))
 (let (($x238 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and (not $x238) $x358)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x324 (and $x35 $x92)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x216 $x324)))
 (let (($x261 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x352 (and $x261 $x82)))
 (let (($x116 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x87 (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x16 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x124 (or false (or false (and (and true (or $x31 $x16)) (or $x131 $x116))))))
 (let (($x282 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x124)))
 (let (($x97 (=> (and $x114 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x124)))
 (let (($x351 (and $x97 $x352)))
 (let (($x359 (=> $x351 $x327)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x247 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x267 (bvule ?x247 (_ bv4 32))))
 (let (($x349 (= $x267 true)))
 (let (($x327 (= $x349 true)))
 (let (($x362 (forall ((input.ind-%var1095X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1095X)))
 (=> $x311 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1095X) (_ bv0 32)))))
 ))
 (let (($x201 (forall ((input.ind-%var1094X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1094X)))
 (= $x311 false)))
 ))
 (let (($x263 (and $x201 $x362)))
 (let (($x306 (= $x263 true)))
 (let (($x294 (forall ((input.ind-%var1089X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var1089X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x280))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv2 32))) ?x315)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv3 32))) ?x86)))
 (let ((?x326 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1089X)))
 (let (($x213 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1089X)))
 (=> $x213 (= ?x326 ?x158)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1088X (_ BitVec 32)) )(let (($x133 (and (bvule (_ bv0 32) input.ind-%var1088X) (bvult input.ind-%var1088X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x213 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1088X)))
 (= $x213 $x133))))
 ))
 (let (($x242 (and $x298 $x294)))
 (let (($x296 (= $x242 true)))
 (let (($x262 (forall ((input.ind-%var1083X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1083X)))
 (=> $x311 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1083X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1082X)))
 (= $x311 false)))
 ))
 (let (($x171 (and $x203 $x262)))
 (let (($x72 (= $x171 true)))
 (let ((?x42 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x42)))
 (let (($x290 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x290 true)))
 (let (($x55 (= $x302 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x264 (= $x286 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x209 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x178)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x52)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x53)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x43 $x60)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x194 $x159)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x70 $x198)))
 (let (($x100 (not $x56)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x196 $x105)))
 (let (($x206 (and (not $x173) $x100)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x91 $x15)))
 (let (($x140 (not $x175)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x28 $x76)))
 (let (($x125 (and (not $x165) $x140)))
 (let (($x129 (and (and (and (and (and (and $x125 $x206) $x84) $x73) $x37) $x80) $x32)))
 (let (($x29 (and $x129 $x139)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x187)))
 (let (($x170 (or false (or false (and (and true (or $x161 $x146)) (or $x98 $x51))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x170)))
 (let (($x44 (and $x149 $x29)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x143 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x143 true)))
 (let (($x200 (= $x157 true)))
 (let (($x101 (= $x200 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (= $x136 true)))
 (let (($x189 (= $x115 true)))
 (let (($x36 (= $x189 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x174 (= (_ bv0 2) ?x23)))
 (let (($x59 (= $x174 true)))
 (let (($x78 (= $x59 true)))
 (let (($x21 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x156 (= $x21 true)))
 (let (($x50 (= $x156 true)))
 (let (($x68 (= $x50 true)))
 (let ((?x172 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x172)))
 (let (($x46 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (= $x46 true)))
 (let (($x193 (= $x63 true)))
 (let (($x6 (= ?x12 input.dst.llvm-%n)))
 (let (($x17 (= $x6 true)))
 (let (($x27 (= $x17 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x185 (bvsub ?x87 ?x47)))
 (let (($x132 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x185) (bvult ?x87 ?x185))))
 (let (($x112 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x164 (ite $x112 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x197 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x39 (bvmul (_ bv4 64) ?x197)))
 (let ((?x163 ((_ extract 63 32) ?x39)))
 (let (($x33 (= ?x163 ?x164)))
 (let (($x89 (and $x33 $x132)))
 (let (($x90 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x186 (and $x90 $x89)))
 (let (($x34 (= true $x186)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x30 (=> $x114 $x34)))
 (let (($x148 (= $x30 true)))
 (let (($x40 (= $x148 true)))
 (let (($x57 (= $x40 true)))
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x22 (= $x114 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x142 (and $x144 $x38)))
 (let (($x137 (and $x142 $x57)))
 (let (($x151 (and $x137 $x27)))
 (let (($x184 (and $x151 $x193)))
 (let (($x205 (and $x184 $x68)))
 (let (($x20 (and $x205 $x78)))
 (let (($x166 (and $x20 $x36)))
 (let (($x127 (and $x166 $x101)))
 (let (($x208 (and $x127 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x255 (and $x253 $x264)))
 (let (($x24 (and $x255 $x55)))
 (let (($x274 (and $x24 $x72)))
 (let (($x202 (and $x274 $x296)))
 (let (($x358 (and $x202 $x306)))
 (let (($x238 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and (not $x238) $x358)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x324 (and $x35 $x92)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x216 $x324)))
 (let (($x261 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x352 (and $x261 $x82)))
 (let (($x116 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x87 (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x16 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x124 (or false (or false (and (and true (or $x31 $x16)) (or $x131 $x116))))))
 (let (($x282 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x124)))
 (let (($x97 (=> (and $x114 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x124)))
 (let (($x351 (and $x97 $x352)))
 (let (($x359 (=> $x351 $x327)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000024)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000027)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000024)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) false
      (not (bvule #x00000004 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x71990460)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000401)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7b52ec14)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7b52ec17)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x71990463)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7b52ec14)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x71990460)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000401)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000401)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x316 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x335 (bvule ?x316 (_ bv4294967294 32))))
 (let (($x248 (= $x335 true)))
 (let (($x256 (= $x248 true)))
 (let (($x258 (forall ((input.ind-%var1159X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1159X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1159X) (_ bv0 32)))))
 ))
 (let (($x251 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1158X)))
 (= $x273 false)))
 ))
 (let (($x235 (and $x251 $x258)))
 (let (($x281 (= $x235 true)))
 (let (($x271 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let ((?x247 (bvadd (bvmul input.ind-%var1153X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x247))))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv2 32))) ?x359)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv3 32))) ?x179)))
 (let ((?x315 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1153X)))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1153X)))
 (=> $x233 (= ?x315 ?x303)))))))))
 ))
 (let (($x190 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1152X) (bvult input.ind-%var1152X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1152X)))
 (= $x233 $x243))))
 ))
 (let (($x355 (and $x190 $x271)))
 (let (($x357 (= $x355 true)))
 (let (($x72 (forall ((input.ind-%var1146X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1146X)))
 (= $x273 false)))
 ))
 (let (($x309 (forall ((input.ind-%var1147X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1147X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1147X) (_ bv0 32)))))
 ))
 (let (($x274 (and $x309 $x72)))
 (let (($x213 (= $x274 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x246)))
 (let (($x253 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x145 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x159)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x53)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x109)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x84 $x183)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x26 $x73)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x196 $x105)))
 (let (($x167 (not $x173)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x175 $x140)))
 (let (($x198 (and (not $x125) $x167)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x28 $x76)))
 (let (($x104 (not $x165)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x200 $x101)))
 (let (($x15 (and (not $x149) $x104)))
 (let (($x32 (and (and (and (and (and (and $x15 $x198) $x100) $x95) $x103) $x43) $x60)))
 (let (($x129 (and $x32 $x37)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x138 (or false (or false (and (and true (or $x154 $x187)) (or $x65 $x18))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x178 (and $x170 $x129)))
 (let (($x139 (= $x178 true)))
 (let (($x29 (= $x139 true)))
 (let (($x44 (= $x29 true)))
 (let (($x115 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (= $x115 true)))
 (let (($x36 (= $x189 true)))
 (let (($x166 (= $x36 true)))
 (let (($x174 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x174 true)))
 (let (($x78 (= $x59 true)))
 (let (($x20 (= $x78 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x50)))
 (let (($x205 (= $x68 true)))
 (let (($x188 (= $x205 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x12)))
 (let (($x63 (= ?x6 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x193 (= $x63 true)))
 (let (($x184 (= $x193 true)))
 (let (($x17 (= ?x6 input.dst.llvm-%n)))
 (let (($x27 (= $x17 true)))
 (let (($x151 (= $x27 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x185 (bvsub ?x87 ?x47)))
 (let (($x89 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x185) (bvult ?x87 ?x185))))
 (let (($x122 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x33 (ite $x122 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x39 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x39)))
 (let ((?x112 ((_ extract 63 32) ?x163)))
 (let (($x134 (= ?x112 ?x33)))
 (let (($x186 (and $x134 $x89)))
 (let (($x199 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x34 (and $x199 $x186)))
 (let (($x30 (= true $x34)))
 (let (($x110 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (=> $x110 $x30)))
 (let (($x40 (= $x148 true)))
 (let (($x57 (= $x40 true)))
 (let (($x137 (= $x57 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (= $x110 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x147 (and $x144 $x142)))
 (let (($x172 (and $x147 $x137)))
 (let (($x46 (and $x172 $x151)))
 (let (($x21 (and $x46 $x184)))
 (let (($x23 (and $x21 $x188)))
 (let (($x136 (and $x23 $x20)))
 (let (($x143 (and $x136 $x166)))
 (let (($x141 (and $x143 $x44)))
 (let (($x219 (and $x141 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x286 (and $x245 $x212)))
 (let (($x304 (and $x286 $x213)))
 (let (($x301 (and $x304 $x357)))
 (let (($x285 (and $x301 $x281)))
 (let (($x331 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and (not $x331) $x285)))
 (let (($x241 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (and $x241 $x214)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x348 (and $x227 $x297)))
 (let (($x291 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x291 $x348)))
 (let (($x126 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd ?x87 (_ bv3 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x160 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x97 (or false (or false (and (and true (or $x123 $x160)) (or $x85 $x126))))))
 (let (($x261 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x97)))
 (let (($x13 (=> (and $x110 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x97)))
 (let (($x300 (and $x13 $x259)))
 (let (($x152 (=> $x300 $x256)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x316 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x335 (bvule ?x316 (_ bv4294967294 32))))
 (let (($x248 (= $x335 true)))
 (let (($x256 (= $x248 true)))
 (let (($x258 (forall ((input.ind-%var1159X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1159X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1159X) (_ bv0 32)))))
 ))
 (let (($x251 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1158X)))
 (= $x273 false)))
 ))
 (let (($x235 (and $x251 $x258)))
 (let (($x281 (= $x235 true)))
 (let (($x271 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let ((?x247 (bvadd (bvmul input.ind-%var1153X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x247))))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv2 32))) ?x359)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv3 32))) ?x179)))
 (let ((?x315 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1153X)))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1153X)))
 (=> $x233 (= ?x315 ?x303)))))))))
 ))
 (let (($x190 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1152X) (bvult input.ind-%var1152X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1152X)))
 (= $x233 $x243))))
 ))
 (let (($x355 (and $x190 $x271)))
 (let (($x357 (= $x355 true)))
 (let (($x72 (forall ((input.ind-%var1146X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1146X)))
 (= $x273 false)))
 ))
 (let (($x309 (forall ((input.ind-%var1147X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1147X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1147X) (_ bv0 32)))))
 ))
 (let (($x274 (and $x309 $x72)))
 (let (($x213 (= $x274 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x246)))
 (let (($x253 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x145 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x159)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x53)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x109)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x84 $x183)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x26 $x73)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x196 $x105)))
 (let (($x167 (not $x173)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x175 $x140)))
 (let (($x198 (and (not $x125) $x167)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x28 $x76)))
 (let (($x104 (not $x165)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x200 $x101)))
 (let (($x15 (and (not $x149) $x104)))
 (let (($x32 (and (and (and (and (and (and $x15 $x198) $x100) $x95) $x103) $x43) $x60)))
 (let (($x129 (and $x32 $x37)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x138 (or false (or false (and (and true (or $x154 $x187)) (or $x65 $x18))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x178 (and $x170 $x129)))
 (let (($x139 (= $x178 true)))
 (let (($x29 (= $x139 true)))
 (let (($x44 (= $x29 true)))
 (let (($x115 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (= $x115 true)))
 (let (($x36 (= $x189 true)))
 (let (($x166 (= $x36 true)))
 (let (($x174 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x174 true)))
 (let (($x78 (= $x59 true)))
 (let (($x20 (= $x78 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x50)))
 (let (($x205 (= $x68 true)))
 (let (($x188 (= $x205 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x12)))
 (let (($x63 (= ?x6 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x193 (= $x63 true)))
 (let (($x184 (= $x193 true)))
 (let (($x17 (= ?x6 input.dst.llvm-%n)))
 (let (($x27 (= $x17 true)))
 (let (($x151 (= $x27 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x185 (bvsub ?x87 ?x47)))
 (let (($x89 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x185) (bvult ?x87 ?x185))))
 (let (($x122 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x33 (ite $x122 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x39 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x39)))
 (let ((?x112 ((_ extract 63 32) ?x163)))
 (let (($x134 (= ?x112 ?x33)))
 (let (($x186 (and $x134 $x89)))
 (let (($x199 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x34 (and $x199 $x186)))
 (let (($x30 (= true $x34)))
 (let (($x110 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (=> $x110 $x30)))
 (let (($x40 (= $x148 true)))
 (let (($x57 (= $x40 true)))
 (let (($x137 (= $x57 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (= $x110 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x147 (and $x144 $x142)))
 (let (($x172 (and $x147 $x137)))
 (let (($x46 (and $x172 $x151)))
 (let (($x21 (and $x46 $x184)))
 (let (($x23 (and $x21 $x188)))
 (let (($x136 (and $x23 $x20)))
 (let (($x143 (and $x136 $x166)))
 (let (($x141 (and $x143 $x44)))
 (let (($x219 (and $x141 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x286 (and $x245 $x212)))
 (let (($x304 (and $x286 $x213)))
 (let (($x301 (and $x304 $x357)))
 (let (($x285 (and $x301 $x281)))
 (let (($x331 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and (not $x331) $x285)))
 (let (($x241 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (and $x241 $x214)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x348 (and $x227 $x297)))
 (let (($x291 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x291 $x348)))
 (let (($x126 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd ?x87 (_ bv3 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x160 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x97 (or false (or false (and (and true (or $x123 $x160)) (or $x85 $x126))))))
 (let (($x261 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x97)))
 (let (($x13 (=> (and $x110 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x97)))
 (let (($x300 (and $x13 $x259)))
 (let (($x152 (=> $x300 $x256)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x313 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x313 (_ bv0 32))))
 (let (($x240 (= $x352 true)))
 (let (($x64 (= $x240 true)))
 (let (($x268 (forall ((input.ind-%var1177X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1177X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1177X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1176X)))
 (= $x203 false)))
 ))
 (let (($x133 (and $x294 $x268)))
 (let (($x250 (= $x133 true)))
 (let (($x94 (forall ((input.ind-%var1171X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var1171X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x86))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x86 (_ bv2 32))) ?x302)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x86 (_ bv3 32))) ?x323)))
 (let ((?x251 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1171X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1171X)))
 (=> $x299 (= ?x251 ?x111)))))))))
 ))
 (let (($x271 (forall ((input.ind-%var1170X (_ BitVec 32)) )(let (($x334 (and (bvule (_ bv0 32) input.ind-%var1170X) (bvult input.ind-%var1170X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1170X)))
 (= $x299 $x334))))
 ))
 (let (($x358 (and $x271 $x94)))
 (let (($x92 (= $x358 true)))
 (let (($x158 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1165X) (_ bv0 32)))))
 ))
 (let (($x274 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (= $x203 false)))
 ))
 (let (($x351 (and $x274 $x158)))
 (let (($x247 (= $x351 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x244)))
 (let (($x276 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x222 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x43)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x48)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x80 $x84)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x95 $x109)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x196 $x105)))
 (let (($x167 (not $x173)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x140 $x125)))
 (let (($x130 (and (not $x70) $x167)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x28 $x76)))
 (let (($x104 (not $x165)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x106 $x79)))
 (let (($x175 (and (not $x91) $x104)))
 (let (($x129 (and (and (and (and (and (and $x175 $x130) $x100) $x206) $x183) $x103) $x194)))
 (let (($x178 (and $x129 $x52)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x187)))
 (let (($x200 (or false (or false (and (and true (or $x161 $x146)) (or $x98 $x51))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x200)))
 (let (($x139 (and $x149 $x178)))
 (let (($x29 (= $x139 true)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x115 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (= $x115 true)))
 (let (($x36 (= $x189 true)))
 (let (($x166 (= $x36 true)))
 (let (($x174 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x174 true)))
 (let (($x78 (= $x59 true)))
 (let (($x20 (= $x78 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x50)))
 (let (($x205 (= $x68 true)))
 (let (($x188 (= $x205 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x12)))
 (let (($x63 (= ?x6 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x193 (= $x63 true)))
 (let (($x184 (= $x193 true)))
 (let (($x17 (= ?x6 input.dst.llvm-%n)))
 (let (($x27 (= $x17 true)))
 (let (($x151 (= $x27 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x182 (bvsub ?x87 ?x47)))
 (let (($x89 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x182) (bvult ?x87 ?x182))))
 (let (($x122 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x33 (ite $x122 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x39 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x39)))
 (let ((?x112 ((_ extract 63 32) ?x163)))
 (let (($x134 (= ?x112 ?x33)))
 (let (($x186 (and $x134 $x89)))
 (let (($x199 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x34 (and $x199 $x186)))
 (let (($x30 (= true $x34)))
 (let (($x10 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (=> $x10 $x30)))
 (let (($x40 (= $x148 true)))
 (let (($x57 (= $x40 true)))
 (let (($x137 (= $x57 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (= $x10 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x147 (and $x144 $x142)))
 (let (($x172 (and $x147 $x137)))
 (let (($x46 (and $x172 $x151)))
 (let (($x21 (and $x46 $x184)))
 (let (($x23 (and $x21 $x188)))
 (let (($x136 (and $x23 $x20)))
 (let (($x143 (and $x136 $x166)))
 (let (($x145 (and $x143 $x141)))
 (let (($x218 (and $x145 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x42 (and $x246 $x286)))
 (let (($x225 (and $x42 $x247)))
 (let (($x362 (and $x225 $x92)))
 (let (($x314 (and $x362 $x250)))
 (let (($x295 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x280 (and (not $x295) $x314)))
 (let (($x238 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (and $x238 $x280)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x311 (and $x107 $x255)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x279 $x311)))
 (let (($x124 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd ?x87 (_ bv3 32))))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x131 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x160)))
 (let (($x13 (or false (or false (and (and true (or $x118 $x131)) (or $x278 $x124))))))
 (let (($x291 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x121 (=> (and $x10 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x120 (and $x121 $x82)))
 (let (($x360 (=> $x120 $x64)))
 (not $x360))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x313 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x313 (_ bv0 32))))
 (let (($x240 (= $x352 true)))
 (let (($x64 (= $x240 true)))
 (let (($x268 (forall ((input.ind-%var1177X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1177X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1177X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1176X)))
 (= $x203 false)))
 ))
 (let (($x133 (and $x294 $x268)))
 (let (($x250 (= $x133 true)))
 (let (($x94 (forall ((input.ind-%var1171X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var1171X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x86))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x86 (_ bv2 32))) ?x302)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x86 (_ bv3 32))) ?x323)))
 (let ((?x251 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1171X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1171X)))
 (=> $x299 (= ?x251 ?x111)))))))))
 ))
 (let (($x271 (forall ((input.ind-%var1170X (_ BitVec 32)) )(let (($x334 (and (bvule (_ bv0 32) input.ind-%var1170X) (bvult input.ind-%var1170X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1170X)))
 (= $x299 $x334))))
 ))
 (let (($x358 (and $x271 $x94)))
 (let (($x92 (= $x358 true)))
 (let (($x158 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1165X) (_ bv0 32)))))
 ))
 (let (($x274 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (= $x203 false)))
 ))
 (let (($x351 (and $x274 $x158)))
 (let (($x247 (= $x351 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x244)))
 (let (($x276 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x222 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x43)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x48)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x80 $x84)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x95 $x109)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x196 $x105)))
 (let (($x167 (not $x173)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x140 $x125)))
 (let (($x130 (and (not $x70) $x167)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x28 $x76)))
 (let (($x104 (not $x165)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x106 $x79)))
 (let (($x175 (and (not $x91) $x104)))
 (let (($x129 (and (and (and (and (and (and $x175 $x130) $x100) $x206) $x183) $x103) $x194)))
 (let (($x178 (and $x129 $x52)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x187)))
 (let (($x200 (or false (or false (and (and true (or $x161 $x146)) (or $x98 $x51))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x200)))
 (let (($x139 (and $x149 $x178)))
 (let (($x29 (= $x139 true)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x115 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (= $x115 true)))
 (let (($x36 (= $x189 true)))
 (let (($x166 (= $x36 true)))
 (let (($x174 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x174 true)))
 (let (($x78 (= $x59 true)))
 (let (($x20 (= $x78 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x50)))
 (let (($x205 (= $x68 true)))
 (let (($x188 (= $x205 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x12)))
 (let (($x63 (= ?x6 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x193 (= $x63 true)))
 (let (($x184 (= $x193 true)))
 (let (($x17 (= ?x6 input.dst.llvm-%n)))
 (let (($x27 (= $x17 true)))
 (let (($x151 (= $x27 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x182 (bvsub ?x87 ?x47)))
 (let (($x89 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x182) (bvult ?x87 ?x182))))
 (let (($x122 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x33 (ite $x122 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x39 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x39)))
 (let ((?x112 ((_ extract 63 32) ?x163)))
 (let (($x134 (= ?x112 ?x33)))
 (let (($x186 (and $x134 $x89)))
 (let (($x199 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x34 (and $x199 $x186)))
 (let (($x30 (= true $x34)))
 (let (($x10 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (=> $x10 $x30)))
 (let (($x40 (= $x148 true)))
 (let (($x57 (= $x40 true)))
 (let (($x137 (= $x57 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (= $x10 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x147 (and $x144 $x142)))
 (let (($x172 (and $x147 $x137)))
 (let (($x46 (and $x172 $x151)))
 (let (($x21 (and $x46 $x184)))
 (let (($x23 (and $x21 $x188)))
 (let (($x136 (and $x23 $x20)))
 (let (($x143 (and $x136 $x166)))
 (let (($x145 (and $x143 $x141)))
 (let (($x218 (and $x145 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x42 (and $x246 $x286)))
 (let (($x225 (and $x42 $x247)))
 (let (($x362 (and $x225 $x92)))
 (let (($x314 (and $x362 $x250)))
 (let (($x295 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x280 (and (not $x295) $x314)))
 (let (($x238 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (and $x238 $x280)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x311 (and $x107 $x255)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x279 $x311)))
 (let (($x124 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd ?x87 (_ bv3 32))))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x131 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x160)))
 (let (($x13 (or false (or false (and (and true (or $x118 $x131)) (or $x278 $x124))))))
 (let (($x291 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x121 (=> (and $x10 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x120 (and $x121 $x82)))
 (let (($x360 (=> $x120 $x64)))
 (not $x360))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x357 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (bvule ?x357 (_ bv4294967294 32))))
 (let (($x361 (= $x157 true)))
 (let (($x306 (= $x361 true)))
 (let (($x243 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1195X) (_ bv0 32)))))
 ))
 (let (($x214 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x308 false)))
 ))
 (let (($x201 (and $x214 $x243)))
 (let (($x267 (= $x201 true)))
 (let (($x285 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1189X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x233)))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x25)))
 (let ((?x294 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1189X)))
 (let (($x312 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1189X)))
 (=> $x312 (= ?x294 ?x273)))))))))
 ))
 (let (($x94 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x58 (and (bvule (_ bv0 32) input.ind-%var1188X) (bvult input.ind-%var1188X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x312 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1188X)))
 (= $x312 $x58))))
 ))
 (let (($x256 (and $x94 $x285)))
 (let (($x152 (= $x256 true)))
 (let (($x235 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1183X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1183X) (_ bv0 32)))))
 ))
 (let (($x351 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1182X)))
 (= $x308 false)))
 ))
 (let (($x298 (and $x351 $x235)))
 (let (($x86 (= $x298 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x253)))
 (let (($x212 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x37 (bvsub ?x87 ?x47)))
 (let (($x43 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x37) (bvult ?x87 ?x37))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x73 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvmul (_ bv4 64) ?x84)))
 (let ((?x183 ((_ extract 63 32) ?x109)))
 (let (($x103 (= ?x183 ?x73)))
 (let (($x52 (and $x103 $x43)))
 (let (($x80 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x178 (and $x80 $x52)))
 (let (($x139 (= true $x178)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (=> $x114 $x139)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x100 (= $x56 true)))
 (let (($x60 (= $x100 true)))
 (let (($x150 (= $x60 true)))
 (let (($x173 (= $x114 true)))
 (let (($x167 (= $x173 true)))
 (let (($x130 (= $x167 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x79)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x149)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x18 $x51)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x65 $x49)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x189 $x36)))
 (let (($x143 (not $x166)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x20 $x136)))
 (let (($x154 (and (not $x115) $x143)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x205 $x188)))
 (let (($x174 (not $x23)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x148 $x40)))
 (let (($x78 (and (not $x68) $x174)))
 (let (($x175 (and (and (and (and (and (and $x78 $x154) $x187) $x146) $x138) $x200) $x106)))
 (let (($x140 (and $x175 $x91)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x172)))
 (let (($x21 (or false (or false (and (and true (or $x12 $x6)) (or $x151 $x46))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x125 (and $x50 $x140)))
 (let (($x70 (= $x125 true)))
 (let (($x198 (= $x70 true)))
 (let (($x196 (= $x198 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x9 true)))
 (let (($x89 (= $x132 true)))
 (let (($x186 (= $x89 true)))
 (let ((?x164 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x33 (= (_ bv0 2) ?x164)))
 (let (($x134 (= $x33 true)))
 (let (($x185 (= $x134 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x197 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (= $x197 true)))
 (let (($x163 (= $x39 true)))
 (let (($x147 (= ?x142 input.dst.llvm-%n)))
 (let (($x117 (= $x147 true)))
 (let (($x90 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x199 (and $x169 $x90)))
 (let (($x112 (and $x199 $x163)))
 (let (($x182 (and $x112 $x185)))
 (let (($x34 (and $x182 $x186)))
 (let (($x105 (and $x34 $x196)))
 (let (($x53 (and $x105 $x130)))
 (let (($x206 (and $x53 $x150)))
 (let (($x207 (and $x206 $x145)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x329 (and $x244 $x42)))
 (let (($x326 (and $x329 $x86)))
 (let (($x316 (and $x326 $x152)))
 (let (($x263 (and $x316 $x267)))
 (let (($x254 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x359 (and (not $x254) $x263)))
 (let (($x331 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x304 (and $x331 $x359)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x35 $x304)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x75 (and $x216 $x191)))
 (let (($x97 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd ?x87 (_ bv3 32))))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x85 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x121 (or false (or false (and (and true (or $x181 $x85)) (or $x282 $x97))))))
 (let (($x279 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x121)))
 (let (($x99 (=> (and $x114 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x121)))
 (let (($x296 (and $x99 $x75)))
 (let (($x262 (=> $x296 $x306)))
 (not $x262))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x357 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (bvule ?x357 (_ bv4294967294 32))))
 (let (($x361 (= $x157 true)))
 (let (($x306 (= $x361 true)))
 (let (($x243 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1195X) (_ bv0 32)))))
 ))
 (let (($x214 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x308 false)))
 ))
 (let (($x201 (and $x214 $x243)))
 (let (($x267 (= $x201 true)))
 (let (($x285 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1189X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x233)))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x25)))
 (let ((?x294 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1189X)))
 (let (($x312 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1189X)))
 (=> $x312 (= ?x294 ?x273)))))))))
 ))
 (let (($x94 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x58 (and (bvule (_ bv0 32) input.ind-%var1188X) (bvult input.ind-%var1188X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x312 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1188X)))
 (= $x312 $x58))))
 ))
 (let (($x256 (and $x94 $x285)))
 (let (($x152 (= $x256 true)))
 (let (($x235 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1183X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1183X) (_ bv0 32)))))
 ))
 (let (($x351 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1182X)))
 (= $x308 false)))
 ))
 (let (($x298 (and $x351 $x235)))
 (let (($x86 (= $x298 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x253)))
 (let (($x212 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x37 (bvsub ?x87 ?x47)))
 (let (($x43 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x37) (bvult ?x87 ?x37))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x73 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvmul (_ bv4 64) ?x84)))
 (let ((?x183 ((_ extract 63 32) ?x109)))
 (let (($x103 (= ?x183 ?x73)))
 (let (($x52 (and $x103 $x43)))
 (let (($x80 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x178 (and $x80 $x52)))
 (let (($x139 (= true $x178)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (=> $x114 $x139)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x100 (= $x56 true)))
 (let (($x60 (= $x100 true)))
 (let (($x150 (= $x60 true)))
 (let (($x173 (= $x114 true)))
 (let (($x167 (= $x173 true)))
 (let (($x130 (= $x167 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x79)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x149)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x18 $x51)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x65 $x49)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x189 $x36)))
 (let (($x143 (not $x166)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x20 $x136)))
 (let (($x154 (and (not $x115) $x143)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x205 $x188)))
 (let (($x174 (not $x23)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x148 $x40)))
 (let (($x78 (and (not $x68) $x174)))
 (let (($x175 (and (and (and (and (and (and $x78 $x154) $x187) $x146) $x138) $x200) $x106)))
 (let (($x140 (and $x175 $x91)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x172)))
 (let (($x21 (or false (or false (and (and true (or $x12 $x6)) (or $x151 $x46))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x125 (and $x50 $x140)))
 (let (($x70 (= $x125 true)))
 (let (($x198 (= $x70 true)))
 (let (($x196 (= $x198 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x9 true)))
 (let (($x89 (= $x132 true)))
 (let (($x186 (= $x89 true)))
 (let ((?x164 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x33 (= (_ bv0 2) ?x164)))
 (let (($x134 (= $x33 true)))
 (let (($x185 (= $x134 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x197 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (= $x197 true)))
 (let (($x163 (= $x39 true)))
 (let (($x147 (= ?x142 input.dst.llvm-%n)))
 (let (($x117 (= $x147 true)))
 (let (($x90 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x199 (and $x169 $x90)))
 (let (($x112 (and $x199 $x163)))
 (let (($x182 (and $x112 $x185)))
 (let (($x34 (and $x182 $x186)))
 (let (($x105 (and $x34 $x196)))
 (let (($x53 (and $x105 $x130)))
 (let (($x206 (and $x53 $x150)))
 (let (($x207 (and $x206 $x145)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x329 (and $x244 $x42)))
 (let (($x326 (and $x329 $x86)))
 (let (($x316 (and $x326 $x152)))
 (let (($x263 (and $x316 $x267)))
 (let (($x254 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x359 (and (not $x254) $x263)))
 (let (($x331 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x304 (and $x331 $x359)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x35 $x304)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x75 (and $x216 $x191)))
 (let (($x97 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd ?x87 (_ bv3 32))))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x85 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x121 (or false (or false (and (and true (or $x181 $x85)) (or $x282 $x97))))))
 (let (($x279 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x121)))
 (let (($x99 (=> (and $x114 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x121)))
 (let (($x296 (and $x99 $x75)))
 (let (($x262 (=> $x296 $x306)))
 (not $x262))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (bvsge ?x92 (_ bv0 32))))
 (let (($x324 (= $x127 true)))
 (let (($x248 (= $x324 true)))
 (let (($x334 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1213X) (_ bv0 32)))))
 ))
 (let (($x280 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1212X)))
 (= $x303 false)))
 ))
 (let (($x300 (and $x280 $x334)))
 (let (($x290 (= $x300 true)))
 (let (($x314 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let ((?x268 (bvadd (bvmul input.ind-%var1207X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x299 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x268))))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv2 32))) ?x299)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv3 32))) ?x168)))
 (let ((?x214 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1207X)))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1207X)))
 (=> $x355 (= ?x214 ?x203)))))))))
 ))
 (let (($x285 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x55 (and (bvule (_ bv0 32) input.ind-%var1206X) (bvult input.ind-%var1206X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1206X)))
 (= $x355 $x55))))
 ))
 (let (($x64 (and $x285 $x314)))
 (let (($x360 (= $x64 true)))
 (let (($x133 (forall ((input.ind-%var1201X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1201X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1201X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1200X)))
 (= $x303 false)))
 ))
 (let (($x96 (and $x298 $x133)))
 (let (($x258 (= $x96 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x276)))
 (let (($x286 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x252 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x37 (bvsub ?x87 ?x47)))
 (let (($x52 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x37) (bvult ?x87 ?x37))))
 (let (($x73 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x103 (ite $x73 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x109 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x109)))
 (let ((?x159 ((_ extract 63 32) ?x183)))
 (let (($x48 (= ?x159 ?x103)))
 (let (($x178 (and $x48 $x52)))
 (let (($x26 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x139 (and $x26 $x178)))
 (let (($x29 (= true $x139)))
 (let (($x81 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (=> $x81 $x29)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x60 (= $x100 true)))
 (let (($x150 (= $x60 true)))
 (let (($x206 (= $x150 true)))
 (let (($x167 (= $x81 true)))
 (let (($x130 (= $x167 true)))
 (let (($x53 (= $x130 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x200)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x165)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x76 $x18)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x146 $x98)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x189 $x36)))
 (let (($x143 (not $x166)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x136 $x115)))
 (let (($x15 (and (not $x180) $x143)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x205 $x188)))
 (let (($x174 (not $x23)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x137 $x156)))
 (let (($x20 (and (not $x59) $x174)))
 (let (($x140 (and (and (and (and (and (and $x20 $x15) $x187) $x161) $x51) $x138) $x170)))
 (let (($x125 (and $x140 $x104)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x6)))
 (let (($x148 (or false (or false (and (and true (or $x17 $x27)) (or $x63 $x193))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x148)))
 (let (($x70 (and $x68 $x125)))
 (let (($x198 (= $x70 true)))
 (let (($x196 (= $x198 true)))
 (let (($x105 (= $x196 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x9 true)))
 (let (($x89 (= $x132 true)))
 (let (($x186 (= $x89 true)))
 (let ((?x164 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x33 (= (_ bv0 2) ?x164)))
 (let (($x134 (= $x33 true)))
 (let (($x185 (= $x134 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x197 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (= $x197 true)))
 (let (($x163 (= $x39 true)))
 (let (($x147 (= ?x142 input.dst.llvm-%n)))
 (let (($x117 (= $x147 true)))
 (let (($x90 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x199 (and $x169 $x90)))
 (let (($x112 (and $x199 $x163)))
 (let (($x182 (and $x112 $x185)))
 (let (($x34 (and $x182 $x186)))
 (let (($x173 (and $x34 $x105)))
 (let (($x56 (and $x173 $x53)))
 (let (($x32 (and $x56 $x206)))
 (let (($x208 (and $x32 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x274 (and $x253 $x329)))
 (let (($x349 (and $x274 $x258)))
 (let (($x313 (and $x349 $x360)))
 (let (($x335 (and $x313 $x290)))
 (let (($x242 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x302 (and (not $x242) $x335)))
 (let (($x295 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and $x295 $x302)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x241 $x225)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x227 $x284)))
 (let (($x13 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd ?x87 (_ bv3 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x278 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x99 (or false (or false (and (and true (or $x116 $x278)) (or $x261 $x13))))))
 (let (($x216 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x99)))
 (let (($x16 (=> (and $x81 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x99)))
 (let (($x348 (and $x16 $x128)))
 (let (($x171 (=> $x348 $x248)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (bvsge ?x92 (_ bv0 32))))
 (let (($x324 (= $x127 true)))
 (let (($x248 (= $x324 true)))
 (let (($x334 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1213X) (_ bv0 32)))))
 ))
 (let (($x280 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1212X)))
 (= $x303 false)))
 ))
 (let (($x300 (and $x280 $x334)))
 (let (($x290 (= $x300 true)))
 (let (($x314 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let ((?x268 (bvadd (bvmul input.ind-%var1207X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x299 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x268))))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv2 32))) ?x299)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv3 32))) ?x168)))
 (let ((?x214 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1207X)))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1207X)))
 (=> $x355 (= ?x214 ?x203)))))))))
 ))
 (let (($x285 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x55 (and (bvule (_ bv0 32) input.ind-%var1206X) (bvult input.ind-%var1206X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1206X)))
 (= $x355 $x55))))
 ))
 (let (($x64 (and $x285 $x314)))
 (let (($x360 (= $x64 true)))
 (let (($x133 (forall ((input.ind-%var1201X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1201X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1201X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1200X)))
 (= $x303 false)))
 ))
 (let (($x96 (and $x298 $x133)))
 (let (($x258 (= $x96 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x276)))
 (let (($x286 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x252 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x37 (bvsub ?x87 ?x47)))
 (let (($x52 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x37) (bvult ?x87 ?x37))))
 (let (($x73 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x103 (ite $x73 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x109 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x109)))
 (let ((?x159 ((_ extract 63 32) ?x183)))
 (let (($x48 (= ?x159 ?x103)))
 (let (($x178 (and $x48 $x52)))
 (let (($x26 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x139 (and $x26 $x178)))
 (let (($x29 (= true $x139)))
 (let (($x81 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (=> $x81 $x29)))
 (let (($x141 (= $x44 true)))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x60 (= $x100 true)))
 (let (($x150 (= $x60 true)))
 (let (($x206 (= $x150 true)))
 (let (($x167 (= $x81 true)))
 (let (($x130 (= $x167 true)))
 (let (($x53 (= $x130 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x200)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x165)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x76 $x18)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x146 $x98)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x189 $x36)))
 (let (($x143 (not $x166)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x136 $x115)))
 (let (($x15 (and (not $x180) $x143)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x205 $x188)))
 (let (($x174 (not $x23)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x137 $x156)))
 (let (($x20 (and (not $x59) $x174)))
 (let (($x140 (and (and (and (and (and (and $x20 $x15) $x187) $x161) $x51) $x138) $x170)))
 (let (($x125 (and $x140 $x104)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x6)))
 (let (($x148 (or false (or false (and (and true (or $x17 $x27)) (or $x63 $x193))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x148)))
 (let (($x70 (and $x68 $x125)))
 (let (($x198 (= $x70 true)))
 (let (($x196 (= $x198 true)))
 (let (($x105 (= $x196 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x9 true)))
 (let (($x89 (= $x132 true)))
 (let (($x186 (= $x89 true)))
 (let ((?x164 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x33 (= (_ bv0 2) ?x164)))
 (let (($x134 (= $x33 true)))
 (let (($x185 (= $x134 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x197 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (= $x197 true)))
 (let (($x163 (= $x39 true)))
 (let (($x147 (= ?x142 input.dst.llvm-%n)))
 (let (($x117 (= $x147 true)))
 (let (($x90 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x199 (and $x169 $x90)))
 (let (($x112 (and $x199 $x163)))
 (let (($x182 (and $x112 $x185)))
 (let (($x34 (and $x182 $x186)))
 (let (($x173 (and $x34 $x105)))
 (let (($x56 (and $x173 $x53)))
 (let (($x32 (and $x56 $x206)))
 (let (($x208 (and $x32 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x274 (and $x253 $x329)))
 (let (($x349 (and $x274 $x258)))
 (let (($x313 (and $x349 $x360)))
 (let (($x335 (and $x313 $x290)))
 (let (($x242 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x302 (and (not $x242) $x335)))
 (let (($x295 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and $x295 $x302)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x241 $x225)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x227 $x284)))
 (let (($x13 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd ?x87 (_ bv3 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x278 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x99 (or false (or false (and (and true (or $x116 $x278)) (or $x261 $x13))))))
 (let (($x216 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x99)))
 (let (($x16 (=> (and $x81 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x99)))
 (let (($x348 (and $x16 $x128)))
 (let (($x171 (=> $x348 $x248)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x30 (bvule ?x152 input.dst.llvm-%n)))
 (let (($x176 (= $x30 true)))
 (let (($x240 (= $x176 true)))
 (let (($x58 (forall ((input.ind-%var1231X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1231X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1231X) (_ bv0 32)))))
 ))
 (let (($x359 (forall ((input.ind-%var1230X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1230X)))
 (= $x111 false)))
 ))
 (let (($x120 (and $x359 $x58)))
 (let (($x309 (= $x120 true)))
 (let (($x263 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1225X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x312)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x327)))
 (let ((?x280 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1225X)))
 (let (($x358 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x358 (= ?x280 ?x308)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var1224X) (bvult input.ind-%var1224X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x358 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x358 $x72))))
 ))
 (let (($x306 (and $x314 $x263)))
 (let (($x262 (= $x306 true)))
 (let (($x201 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1219X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1219X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1218X)))
 (= $x111 false)))
 ))
 (let (($x211 (and $x96 $x201)))
 (let (($x268 (= $x211 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x212)))
 (let (($x42 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x246 (= ?x142 input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x73 (bvsub ?x87 ?x47)))
 (let (($x37 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x73) (bvult ?x87 ?x73))))
 (let (($x109 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x183 (ite $x109 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x80 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x26 (bvmul (_ bv4 64) ?x80)))
 (let ((?x84 ((_ extract 63 32) ?x26)))
 (let (($x159 (= ?x84 ?x183)))
 (let (($x129 (and $x159 $x37)))
 (let (($x32 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x43 (and $x32 $x129)))
 (let (($x52 (= true $x43)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (=> $x69 $x52)))
 (let (($x139 (= $x178 true)))
 (let (($x29 (= $x139 true)))
 (let (($x44 (= $x29 true)))
 (let (($x130 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x130 true)))
 (let (($x56 (= $x53 true)))
 (let (($x100 (= $x56 true)))
 (let (($x196 (= $x69 true)))
 (let (($x105 (= $x196 true)))
 (let (($x173 (= $x105 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x98)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x65)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (and $x187 $x28)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x101 $x161)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x136 $x115)))
 (let (($x154 (not $x180)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x23 $x174)))
 (let (($x36 (and (not $x20) $x154)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x137 $x156)))
 (let (($x78 (not $x59)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x89 $x186)))
 (let (($x188 (and (not $x68) $x78)))
 (let (($x170 (and (and (and (and (and (and $x188 $x36) $x143) $x149) $x175) $x76) $x18)))
 (let (($x140 (and $x170 $x51)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x21 (or false (or false (and (and true (or $x40 $x6)) (or $x151 $x46))))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x200 (and $x148 $x140)))
 (let (($x104 (= $x200 true)))
 (let (($x125 (= $x104 true)))
 (let (($x70 (= $x125 true)))
 (let (($x33 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x134 (= $x33 true)))
 (let (($x185 (= $x134 true)))
 (let (($x182 (= $x185 true)))
 (let ((?x39 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x163 (= (_ bv0 2) ?x39)))
 (let (($x112 (= $x163 true)))
 (let (($x122 (= $x112 true)))
 (let (($x147 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (= $x147 true)))
 (let (($x90 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x199 (and $x169 $x90)))
 (let (($x164 (and $x199 $x122)))
 (let (($x9 (and $x164 $x182)))
 (let (($x198 (and $x9 $x70)))
 (let (($x167 (and $x198 $x173)))
 (let (($x60 (and $x167 $x100)))
 (let (($x141 (and $x60 $x44)))
 (let (($x219 (and $x141 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x276 (and $x245 $x253)))
 (let (($x351 (and $x276 $x274)))
 (let (($x24 (and $x351 $x268)))
 (let (($x357 (and $x24 $x262)))
 (let (($x352 (and $x357 $x309)))
 (let (($x297 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and (not $x297) $x352)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x326 (and $x254 $x233)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x238 $x326)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x107 $x71)))
 (let (($x121 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd ?x87 (_ bv3 32))))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x282 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x278)))
 (let (($x16 (or false (or false (and (and true (or $x126 $x282)) (or $x291 $x121))))))
 (let (($x227 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x16)))
 (let (($x160 (=> (and $x69 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x16)))
 (let (($x311 (and $x160 $x5)))
 (let (($x315 (=> $x311 $x240)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x30 (bvule ?x152 input.dst.llvm-%n)))
 (let (($x176 (= $x30 true)))
 (let (($x240 (= $x176 true)))
 (let (($x58 (forall ((input.ind-%var1231X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1231X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1231X) (_ bv0 32)))))
 ))
 (let (($x359 (forall ((input.ind-%var1230X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1230X)))
 (= $x111 false)))
 ))
 (let (($x120 (and $x359 $x58)))
 (let (($x309 (= $x120 true)))
 (let (($x263 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1225X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x312)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x327)))
 (let ((?x280 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1225X)))
 (let (($x358 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x358 (= ?x280 ?x308)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var1224X) (bvult input.ind-%var1224X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x358 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x358 $x72))))
 ))
 (let (($x306 (and $x314 $x263)))
 (let (($x262 (= $x306 true)))
 (let (($x201 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1219X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1219X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1218X)))
 (= $x111 false)))
 ))
 (let (($x211 (and $x96 $x201)))
 (let (($x268 (= $x211 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x212)))
 (let (($x42 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x246 (= ?x142 input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x73 (bvsub ?x87 ?x47)))
 (let (($x37 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x73) (bvult ?x87 ?x73))))
 (let (($x109 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x183 (ite $x109 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x80 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x26 (bvmul (_ bv4 64) ?x80)))
 (let ((?x84 ((_ extract 63 32) ?x26)))
 (let (($x159 (= ?x84 ?x183)))
 (let (($x129 (and $x159 $x37)))
 (let (($x32 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x43 (and $x32 $x129)))
 (let (($x52 (= true $x43)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (=> $x69 $x52)))
 (let (($x139 (= $x178 true)))
 (let (($x29 (= $x139 true)))
 (let (($x44 (= $x29 true)))
 (let (($x130 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x130 true)))
 (let (($x56 (= $x53 true)))
 (let (($x100 (= $x56 true)))
 (let (($x196 (= $x69 true)))
 (let (($x105 (= $x196 true)))
 (let (($x173 (= $x105 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x98)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x65)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (and $x187 $x28)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x101 $x161)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x136 $x115)))
 (let (($x154 (not $x180)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x23 $x174)))
 (let (($x36 (and (not $x20) $x154)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x137 $x156)))
 (let (($x78 (not $x59)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x89 $x186)))
 (let (($x188 (and (not $x68) $x78)))
 (let (($x170 (and (and (and (and (and (and $x188 $x36) $x143) $x149) $x175) $x76) $x18)))
 (let (($x140 (and $x170 $x51)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x21 (or false (or false (and (and true (or $x40 $x6)) (or $x151 $x46))))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x200 (and $x148 $x140)))
 (let (($x104 (= $x200 true)))
 (let (($x125 (= $x104 true)))
 (let (($x70 (= $x125 true)))
 (let (($x33 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x134 (= $x33 true)))
 (let (($x185 (= $x134 true)))
 (let (($x182 (= $x185 true)))
 (let ((?x39 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x163 (= (_ bv0 2) ?x39)))
 (let (($x112 (= $x163 true)))
 (let (($x122 (= $x112 true)))
 (let (($x147 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (= $x147 true)))
 (let (($x90 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x199 (and $x169 $x90)))
 (let (($x164 (and $x199 $x122)))
 (let (($x9 (and $x164 $x182)))
 (let (($x198 (and $x9 $x70)))
 (let (($x167 (and $x198 $x173)))
 (let (($x60 (and $x167 $x100)))
 (let (($x141 (and $x60 $x44)))
 (let (($x219 (and $x141 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x276 (and $x245 $x253)))
 (let (($x351 (and $x276 $x274)))
 (let (($x24 (and $x351 $x268)))
 (let (($x357 (and $x24 $x262)))
 (let (($x352 (and $x357 $x309)))
 (let (($x297 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and (not $x297) $x352)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x326 (and $x254 $x233)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x238 $x326)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x107 $x71)))
 (let (($x121 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd ?x87 (_ bv3 32))))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x282 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x278)))
 (let (($x16 (or false (or false (and (and true (or $x126 $x282)) (or $x291 $x121))))))
 (let (($x227 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x16)))
 (let (($x160 (=> (and $x69 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x16)))
 (let (($x311 (and $x160 $x5)))
 (let (($x315 (=> $x311 $x240)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x336 (forall ((input.ind-%var1257X (_ BitVec 32)) )(let ((?x334 (bvadd (bvmul input.ind-%var1257X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x282 (bvadd ?x87 (_ bv3 32))))
 (let ((?x232 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x54 (store ?x232 (bvadd ?x87 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x260 (store ?x54 (bvadd ?x87 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x353 (store ?x260 ?x282 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x317 (concat (select ?x353 (bvadd ?x334 (_ bv2 32))) (concat (select ?x353 (bvadd ?x334 (_ bv1 32))) (select ?x353 ?x334)))))
 (let ((?x359 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1257X)))
 (let (($x220 (= input.ind-%var1257X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x337 (= (ite $x220 input.spec-%var-i-0.L3%6%bbentry ?x359) (concat (select ?x353 (bvadd ?x334 (_ bv3 32))) ?x317))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1257X)))
 (let (($x234 (or $x256 $x220)))
 (=> $x234 $x337))))))))))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1256X (_ BitVec 32)) )(let (($x308 (bvule (_ bv0 32) input.ind-%var1256X)))
 (let (($x330 (and $x308 (bvult input.ind-%var1256X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x220 (= input.ind-%var1256X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1256X)))
 (let (($x234 (or $x256 $x220)))
 (= $x234 $x330)))))))
 ))
 (let (($x339 (and $x215 $x336)))
 (let (($x360 (= true true)))
 (let (($x342 (and $x360 $x339)))
 (let (($x345 (= $x342 true)))
 (let (($x55 (forall ((input.ind-%var1249X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1249X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1249X) (_ bv0 32)))))
 ))
 (let (($x302 (forall ((input.ind-%var1248X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1248X)))
 (= $x273 false)))
 ))
 (let (($x296 (and $x302 $x55)))
 (let (($x190 (= $x296 true)))
 (let (($x335 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let ((?x334 (bvadd (bvmul input.ind-%var1243X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x334))))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv2 32))) ?x355)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv3 32))) ?x264)))
 (let ((?x359 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1243X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1243X)))
 (=> $x256 (= ?x359 ?x303)))))))))
 ))
 (let (($x263 (forall ((input.ind-%var1242X (_ BitVec 32)) )(let (($x308 (bvule (_ bv0 32) input.ind-%var1242X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1242X)))
 (= $x256 (and $x308 (bvult input.ind-%var1242X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x248 (and $x263 $x335)))
 (let (($x171 (= $x248 true)))
 (let (($x300 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1237X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1237X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1236X)))
 (= $x273 false)))
 ))
 (let (($x301 (and $x211 $x300)))
 (let (($x243 (= $x301 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x286)))
 (let (($x329 (= ?x42 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x246 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x244 (= (_ bv0 2) ?x246)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x141 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x52 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x52 true)))
 (let (($x139 (= $x178 true)))
 (let (($x29 (= $x139 true)))
 (let (($x48 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x194 (= $x48 true)))
 (let (($x37 (= $x194 true)))
 (let (($x129 (= $x37 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x60 (bvsub ?x87 ?x47)))
 (let (($x95 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x60) (bvult ?x87 ?x60))))
 (let (($x53 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x56 (ite $x53 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x173 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x167 (bvmul (_ bv4 64) ?x173)))
 (let ((?x130 ((_ extract 63 32) ?x167)))
 (let (($x100 (= ?x130 ?x56)))
 (let (($x80 (and $x100 $x95)))
 (let (($x196 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x26 (and $x196 $x80)))
 (let (($x84 (= true $x26)))
 (let (($x93 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (=> $x93 $x84)))
 (let (($x183 (= $x109 true)))
 (let (($x159 (= $x183 true)))
 (let (($x103 (= $x159 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x140 (= $x51 true)))
 (let (($x200 (= $x140 true)))
 (let (($x104 (= $x200 true)))
 (let (($x165 (= $x93 true)))
 (let (($x65 (= $x165 true)))
 (let (($x18 (= $x65 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x143)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x79)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x189)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (and $x20 $x136)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x174 $x115)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x89 $x186)))
 (let (($x205 (not $x68)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (and $x184 $x21)))
 (let (($x156 (and (not $x148) $x205)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x17 $x27)))
 (let (($x46 (not $x151)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x199 $x197)))
 (let (($x193 (and (not $x6) $x46)))
 (let (($x106 (and (and (and (and (and (and $x193 $x156) $x78) $x23) $x180) $x36) $x166)))
 (let (($x28 (and $x106 $x49)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x50 (or false (or false (and (and true (or $x122 $x164)) (or $x185 $x182))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x50)))
 (let (($x161 (and $x40 $x28)))
 (let (($x175 (= $x161 true)))
 (let (($x91 (= $x175 true)))
 (let (($x146 (= $x91 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x76 (and $x117 $x146)))
 (let (($x170 (and $x76 $x18)))
 (let (($x125 (and $x170 $x104)))
 (let (($x73 (and $x125 $x103)))
 (let (($x43 (and $x73 $x129)))
 (let (($x44 (and $x43 $x29)))
 (let (($x209 (and $x44 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x212 (and $x252 $x276)))
 (let (($x298 (and $x212 $x351)))
 (let (($x266 (and $x298 $x243)))
 (let (($x92 (and $x266 $x171)))
 (let (($x157 (and $x92 $x190)))
 (let (($x255 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (and (not $x255) $x157)))
 (let (($x242 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x349 (and $x242 $x299)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x281 (and $x331 $x349)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x35 $x281)))
 (let (($x99 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x282 (bvadd ?x87 (_ bv3 32))))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x282)))
 (let (($x261 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x282)))
 (let (($x160 (or false (or false (and (and true (or $x124 $x261)) (or $x279 $x99))))))
 (let (($x107 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x160)))
 (let (($x131 (=> (and $x93 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x160)))
 (let (($x191 (and $x131 $x14)))
 (let (($x257 (=> $x191 $x345)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x336 (forall ((input.ind-%var1257X (_ BitVec 32)) )(let ((?x334 (bvadd (bvmul input.ind-%var1257X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x282 (bvadd ?x87 (_ bv3 32))))
 (let ((?x232 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x54 (store ?x232 (bvadd ?x87 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x260 (store ?x54 (bvadd ?x87 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x353 (store ?x260 ?x282 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x317 (concat (select ?x353 (bvadd ?x334 (_ bv2 32))) (concat (select ?x353 (bvadd ?x334 (_ bv1 32))) (select ?x353 ?x334)))))
 (let ((?x359 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1257X)))
 (let (($x220 (= input.ind-%var1257X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x337 (= (ite $x220 input.spec-%var-i-0.L3%6%bbentry ?x359) (concat (select ?x353 (bvadd ?x334 (_ bv3 32))) ?x317))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1257X)))
 (let (($x234 (or $x256 $x220)))
 (=> $x234 $x337))))))))))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1256X (_ BitVec 32)) )(let (($x308 (bvule (_ bv0 32) input.ind-%var1256X)))
 (let (($x330 (and $x308 (bvult input.ind-%var1256X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x220 (= input.ind-%var1256X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1256X)))
 (let (($x234 (or $x256 $x220)))
 (= $x234 $x330)))))))
 ))
 (let (($x339 (and $x215 $x336)))
 (let (($x360 (= true true)))
 (let (($x342 (and $x360 $x339)))
 (let (($x345 (= $x342 true)))
 (let (($x55 (forall ((input.ind-%var1249X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1249X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1249X) (_ bv0 32)))))
 ))
 (let (($x302 (forall ((input.ind-%var1248X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1248X)))
 (= $x273 false)))
 ))
 (let (($x296 (and $x302 $x55)))
 (let (($x190 (= $x296 true)))
 (let (($x335 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let ((?x334 (bvadd (bvmul input.ind-%var1243X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x334))))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv2 32))) ?x355)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv3 32))) ?x264)))
 (let ((?x359 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1243X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1243X)))
 (=> $x256 (= ?x359 ?x303)))))))))
 ))
 (let (($x263 (forall ((input.ind-%var1242X (_ BitVec 32)) )(let (($x308 (bvule (_ bv0 32) input.ind-%var1242X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1242X)))
 (= $x256 (and $x308 (bvult input.ind-%var1242X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x248 (and $x263 $x335)))
 (let (($x171 (= $x248 true)))
 (let (($x300 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1237X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1237X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1236X)))
 (= $x273 false)))
 ))
 (let (($x301 (and $x211 $x300)))
 (let (($x243 (= $x301 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x286)))
 (let (($x329 (= ?x42 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x246 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x244 (= (_ bv0 2) ?x246)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x141 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x141 true)))
 (let (($x207 (= $x145 true)))
 (let (($x208 (= $x207 true)))
 (let (($x52 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x52 true)))
 (let (($x139 (= $x178 true)))
 (let (($x29 (= $x139 true)))
 (let (($x48 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x194 (= $x48 true)))
 (let (($x37 (= $x194 true)))
 (let (($x129 (= $x37 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x60 (bvsub ?x87 ?x47)))
 (let (($x95 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x60) (bvult ?x87 ?x60))))
 (let (($x53 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x56 (ite $x53 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x173 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x167 (bvmul (_ bv4 64) ?x173)))
 (let ((?x130 ((_ extract 63 32) ?x167)))
 (let (($x100 (= ?x130 ?x56)))
 (let (($x80 (and $x100 $x95)))
 (let (($x196 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x26 (and $x196 $x80)))
 (let (($x84 (= true $x26)))
 (let (($x93 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (=> $x93 $x84)))
 (let (($x183 (= $x109 true)))
 (let (($x159 (= $x183 true)))
 (let (($x103 (= $x159 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x140 (= $x51 true)))
 (let (($x200 (= $x140 true)))
 (let (($x104 (= $x200 true)))
 (let (($x165 (= $x93 true)))
 (let (($x65 (= $x165 true)))
 (let (($x18 (= $x65 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x143)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x79)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x189)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (and $x20 $x136)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x174 $x115)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x89 $x186)))
 (let (($x205 (not $x68)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (and $x184 $x21)))
 (let (($x156 (and (not $x148) $x205)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x17 $x27)))
 (let (($x46 (not $x151)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x199 $x197)))
 (let (($x193 (and (not $x6) $x46)))
 (let (($x106 (and (and (and (and (and (and $x193 $x156) $x78) $x23) $x180) $x36) $x166)))
 (let (($x28 (and $x106 $x49)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x50 (or false (or false (and (and true (or $x122 $x164)) (or $x185 $x182))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x50)))
 (let (($x161 (and $x40 $x28)))
 (let (($x175 (= $x161 true)))
 (let (($x91 (= $x175 true)))
 (let (($x146 (= $x91 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x76 (and $x117 $x146)))
 (let (($x170 (and $x76 $x18)))
 (let (($x125 (and $x170 $x104)))
 (let (($x73 (and $x125 $x103)))
 (let (($x43 (and $x73 $x129)))
 (let (($x44 (and $x43 $x29)))
 (let (($x209 (and $x44 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x212 (and $x252 $x276)))
 (let (($x298 (and $x212 $x351)))
 (let (($x266 (and $x298 $x243)))
 (let (($x92 (and $x266 $x171)))
 (let (($x157 (and $x92 $x190)))
 (let (($x255 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (and (not $x255) $x157)))
 (let (($x242 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x349 (and $x242 $x299)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x281 (and $x331 $x349)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x35 $x281)))
 (let (($x99 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x282 (bvadd ?x87 (_ bv3 32))))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x282)))
 (let (($x261 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x282)))
 (let (($x160 (or false (or false (and (and true (or $x124 $x261)) (or $x279 $x99))))))
 (let (($x107 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x160)))
 (let (($x131 (=> (and $x93 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x160)))
 (let (($x191 (and $x131 $x14)))
 (let (($x257 (=> $x191 $x345)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x357 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x213 (bvmul (_ bv4294967295 32) ?x357)))
 (let ((?x323 (bvneg ?x213)))
 (let (($x111 (= ?x323 ?x86)))
 (let (($x133 (= $x111 true)))
 (let (($x10 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1275X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1275X) (_ bv0 32)))))
 ))
 (let (($x336 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1274X)))
 (= $x203 false)))
 ))
 (let (($x90 (and $x336 $x10)))
 (let (($x316 (= $x90 true)))
 (let (($x74 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var1269X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x135))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv2 32))) ?x177)))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv3 32))) ?x292)))
 (let ((?x302 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1269X)))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1269X)))
 (=> $x64 (= ?x302 ?x353)))))))))
 ))
 (let (($x335 (forall ((input.ind-%var1268X (_ BitVec 32)) )(let (($x235 (and (bvule (_ bv0 32) input.ind-%var1268X) (bvult input.ind-%var1268X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1268X)))
 (= $x64 $x235))))
 ))
 (let (($x270 (and $x335 $x74)))
 (let (($x153 (= $x270 true)))
 (let (($x120 (forall ((input.ind-%var1263X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1263X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1263X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var1262X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1262X)))
 (= $x203 false)))
 ))
 (let (($x362 (and $x301 $x120)))
 (let (($x334 (= $x362 true)))
 (let ((?x42 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x42)))
 (let (($x274 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x139 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x29 (= $x139 true)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x84 (bvsub ?x87 ?x47)))
 (let (($x103 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x84) (bvult ?x87 ?x84))))
 (let (($x95 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x80 (ite $x95 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x60 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x206 (bvmul (_ bv4 64) ?x60)))
 (let ((?x32 ((_ extract 63 32) ?x206)))
 (let (($x26 (= ?x32 ?x80)))
 (let (($x73 (and $x26 $x103)))
 (let (($x100 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x48 (and $x100 $x73)))
 (let (($x194 (= true $x48)))
 (let (($x88 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (=> $x88 $x194)))
 (let (($x129 (= $x37 true)))
 (let (($x43 (= $x129 true)))
 (let (($x52 (= $x43 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x105 (= $x196 true)))
 (let (($x173 (= $x105 true)))
 (let (($x167 (= $x173 true)))
 (let (($x200 (= $x88 true)))
 (let (($x104 (= $x200 true)))
 (let (($x125 (= $x104 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x49)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x106)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x180 $x154)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x115 $x36)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x59 $x78)))
 (let (($x188 (not $x149)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x205 $x156)))
 (let (($x138 (and (not $x15) $x188)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x21 $x148)))
 (let (($x89 (not $x137)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x134 $x185)))
 (let (($x68 (and (not $x184) $x89)))
 (let (($x165 (and (and (and (and (and (and $x68 $x138) $x20) $x136) $x187) $x166) $x143)))
 (let (($x65 (and $x165 $x28)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x151 (or false (or false (and (and true (or $x172 $x50)) (or $x197 $x6))))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x151)))
 (let (($x18 (and $x193 $x65)))
 (let (($x170 (= $x18 true)))
 (let (($x98 (= $x170 true)))
 (let (($x51 (= $x98 true)))
 (let ((?x163 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x12 (= (_ bv0 2) ?x163)))
 (let (($x112 (= $x12 true)))
 (let (($x122 (= $x112 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x164 (and $x117 $x122)))
 (let (($x140 (and $x164 $x51)))
 (let (($x70 (and $x140 $x125)))
 (let (($x130 (and $x70 $x167)))
 (let (($x178 (and $x130 $x52)))
 (let (($x145 (and $x178 $x141)))
 (let (($x218 (and $x145 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x96 (and $x286 $x298)))
 (let (($x179 (and $x96 $x334)))
 (let (($x317 (and $x179 $x153)))
 (let (($x58 (and $x317 $x316)))
 (let (($x304 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and (not $x304) $x58)))
 (let (($x297 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (and $x297 $x168)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x295 $x128)))
 (let (($x241 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x358 (and $x241 $x268)))
 (let (($x16 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd ?x87 (_ bv3 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x291 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x131 (or false (or false (and (and true (or $x97 $x291)) (or $x216 $x16))))))
 (let (($x35 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x131)))
 (let (($x85 (=> (and $x88 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x131)))
 (let (($x306 (and $x85 $x358)))
 (let (($x309 (=> $x306 $x133)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x357 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x213 (bvmul (_ bv4294967295 32) ?x357)))
 (let ((?x323 (bvneg ?x213)))
 (let (($x111 (= ?x323 ?x86)))
 (let (($x133 (= $x111 true)))
 (let (($x10 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1275X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1275X) (_ bv0 32)))))
 ))
 (let (($x336 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1274X)))
 (= $x203 false)))
 ))
 (let (($x90 (and $x336 $x10)))
 (let (($x316 (= $x90 true)))
 (let (($x74 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var1269X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x135))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv2 32))) ?x177)))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv3 32))) ?x292)))
 (let ((?x302 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1269X)))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1269X)))
 (=> $x64 (= ?x302 ?x353)))))))))
 ))
 (let (($x335 (forall ((input.ind-%var1268X (_ BitVec 32)) )(let (($x235 (and (bvule (_ bv0 32) input.ind-%var1268X) (bvult input.ind-%var1268X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1268X)))
 (= $x64 $x235))))
 ))
 (let (($x270 (and $x335 $x74)))
 (let (($x153 (= $x270 true)))
 (let (($x120 (forall ((input.ind-%var1263X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1263X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1263X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var1262X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1262X)))
 (= $x203 false)))
 ))
 (let (($x362 (and $x301 $x120)))
 (let (($x334 (= $x362 true)))
 (let ((?x42 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x42)))
 (let (($x274 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x139 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x29 (= $x139 true)))
 (let (($x44 (= $x29 true)))
 (let (($x141 (= $x44 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x84 (bvsub ?x87 ?x47)))
 (let (($x103 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x84) (bvult ?x87 ?x84))))
 (let (($x95 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x80 (ite $x95 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x60 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x206 (bvmul (_ bv4 64) ?x60)))
 (let ((?x32 ((_ extract 63 32) ?x206)))
 (let (($x26 (= ?x32 ?x80)))
 (let (($x73 (and $x26 $x103)))
 (let (($x100 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x48 (and $x100 $x73)))
 (let (($x194 (= true $x48)))
 (let (($x88 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (=> $x88 $x194)))
 (let (($x129 (= $x37 true)))
 (let (($x43 (= $x129 true)))
 (let (($x52 (= $x43 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x105 (= $x196 true)))
 (let (($x173 (= $x105 true)))
 (let (($x167 (= $x173 true)))
 (let (($x200 (= $x88 true)))
 (let (($x104 (= $x200 true)))
 (let (($x125 (= $x104 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x49)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x106)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x180 $x154)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x115 $x36)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x59 $x78)))
 (let (($x188 (not $x149)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x205 $x156)))
 (let (($x138 (and (not $x15) $x188)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x21 $x148)))
 (let (($x89 (not $x137)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x134 $x185)))
 (let (($x68 (and (not $x184) $x89)))
 (let (($x165 (and (and (and (and (and (and $x68 $x138) $x20) $x136) $x187) $x166) $x143)))
 (let (($x65 (and $x165 $x28)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x151 (or false (or false (and (and true (or $x172 $x50)) (or $x197 $x6))))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x151)))
 (let (($x18 (and $x193 $x65)))
 (let (($x170 (= $x18 true)))
 (let (($x98 (= $x170 true)))
 (let (($x51 (= $x98 true)))
 (let ((?x163 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x12 (= (_ bv0 2) ?x163)))
 (let (($x112 (= $x12 true)))
 (let (($x122 (= $x112 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x164 (and $x117 $x122)))
 (let (($x140 (and $x164 $x51)))
 (let (($x70 (and $x140 $x125)))
 (let (($x130 (and $x70 $x167)))
 (let (($x178 (and $x130 $x52)))
 (let (($x145 (and $x178 $x141)))
 (let (($x218 (and $x145 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x96 (and $x286 $x298)))
 (let (($x179 (and $x96 $x334)))
 (let (($x317 (and $x179 $x153)))
 (let (($x58 (and $x317 $x316)))
 (let (($x304 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and (not $x304) $x58)))
 (let (($x297 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (and $x297 $x168)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x295 $x128)))
 (let (($x241 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x358 (and $x241 $x268)))
 (let (($x16 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd ?x87 (_ bv3 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x291 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x131 (or false (or false (and (and true (or $x97 $x291)) (or $x216 $x16))))))
 (let (($x35 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x131)))
 (let (($x85 (=> (and $x88 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x131)))
 (let (($x306 (and $x85 $x358)))
 (let (($x309 (=> $x306 $x133)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x338 (bvule ?x328 (_ bv4294967294 32))))
 (let (($x171 (= $x338 true)))
 (let (($x215 (= $x171 true)))
 (let (($x345 (forall ((input.ind-%var1293X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1293X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1293X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1292X)))
 (= $x308 false)))
 ))
 (let (($x280 (and $x349 $x345)))
 (let (($x158 (= $x280 true)))
 (let (($x201 (forall ((input.ind-%var1287X (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul input.ind-%var1287X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x33))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv2 32))) ?x327)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv3 32))) ?x248)))
 (let ((?x336 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1287X)))
 (let (($x54 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1287X)))
 (=> $x54 (= ?x336 ?x25)))))))))
 ))
 (let (($x74 (forall ((input.ind-%var1286X (_ BitVec 32)) )(let (($x344 (and (bvule (_ bv0 32) input.ind-%var1286X) (bvult input.ind-%var1286X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x54 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1286X)))
 (= $x54 $x344))))
 ))
 (let (($x190 (and $x74 $x201)))
 (let (($x157 (= $x190 true)))
 (let (($x296 (forall ((input.ind-%var1281X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1281X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1281X) (_ bv0 32)))))
 ))
 (let (($x362 (forall ((input.ind-%var1280X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1280X)))
 (= $x308 false)))
 ))
 (let (($x341 (and $x362 $x296)))
 (let (($x135 (= $x341 true)))
 (let ((?x329 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x274 (bvneg ?x329)))
 (let (($x351 (= ?x274 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x351 true)))
 (let (($x96 (= $x298 true)))
 (let (($x253 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x43)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x37)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x183)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (and $x84 $x159)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x109 $x103)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x53 $x56)))
 (let (($x150 (not $x100)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (and $x173 $x167)))
 (let (($x206 (and (not $x130) $x150)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x104 $x125)))
 (let (($x198 (not $x70)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x36 $x187)))
 (let (($x105 (and (not $x200) $x198)))
 (let (($x145 (and (and (and (and (and (and $x105 $x206) $x95) $x26) $x73) $x194) $x129)))
 (let (($x207 (and $x145 $x52)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x98 (or false (or false (and (and true (or $x76 $x106)) (or $x49 $x28))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x208 (and $x140 $x207)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x91 (= $x136 true)))
 (let (($x115 (= $x91 true)))
 (let (($x180 (= $x115 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x161 true)))
 (let (($x20 (= $x174 true)))
 (let (($x175 (= $x20 true)))
 (let ((?x59 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x78 (= (_ bv0 2) ?x59)))
 (let (($x149 (= $x78 true)))
 (let (($x188 (= $x149 true)))
 (let ((?x184 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x184)))
 (let (($x68 (= ?x186 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (= $x68 true)))
 (let (($x156 (= $x205 true)))
 (let (($x21 (= ?x186 input.dst.llvm-%n)))
 (let (($x148 (= $x21 true)))
 (let (($x137 (= $x148 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x172 (bvsub ?x87 ?x47)))
 (let (($x197 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x172) (bvult ?x87 ?x172))))
 (let (($x182 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x46 (ite $x182 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x112)))
 (let ((?x164 ((_ extract 63 32) ?x122)))
 (let (($x34 (= ?x164 ?x46)))
 (let (($x6 (and $x34 $x197)))
 (let (($x163 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x63 (and $x163 $x6)))
 (let (($x17 (= true $x63)))
 (let (($x31 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (=> $x31 $x17)))
 (let (($x151 (= $x27 true)))
 (let (($x193 (= $x151 true)))
 (let (($x134 (= $x193 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (= $x31 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x147 (and $x144 $x142)))
 (let (($x185 (and $x147 $x134)))
 (let (($x89 (and $x185 $x137)))
 (let (($x15 (and $x89 $x156)))
 (let (($x138 (and $x15 $x188)))
 (let (($x189 (and $x138 $x175)))
 (let (($x101 (and $x189 $x180)))
 (let (($x222 (and $x101 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x42 (and $x244 $x286)))
 (let (($x211 (and $x42 $x96)))
 (let (($x260 (and $x211 $x135)))
 (let (($x343 (and $x260 $x157)))
 (let (($x311 (and $x343 $x158)))
 (let (($x285 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x340 (and (not $x285) $x311)))
 (let (($x255 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x337 (and $x255 $x340)))
 (let (($x254 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x355 (and $x254 $x337)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x238 $x355)))
 (let (($x160 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x291 (bvadd ?x87 (_ bv3 32))))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x291)))
 (let (($x279 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x291)))
 (let (($x85 (or false (or false (and (and true (or $x13 $x279)) (or $x227 $x160))))))
 (let (($x241 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x85)))
 (let (($x278 (=> (and $x31 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x85)))
 (let (($x267 (and $x278 $x266)))
 (let (($x257 (=> $x267 $x215)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x338 (bvule ?x328 (_ bv4294967294 32))))
 (let (($x171 (= $x338 true)))
 (let (($x215 (= $x171 true)))
 (let (($x345 (forall ((input.ind-%var1293X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1293X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1293X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1292X)))
 (= $x308 false)))
 ))
 (let (($x280 (and $x349 $x345)))
 (let (($x158 (= $x280 true)))
 (let (($x201 (forall ((input.ind-%var1287X (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul input.ind-%var1287X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x33))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv2 32))) ?x327)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv3 32))) ?x248)))
 (let ((?x336 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1287X)))
 (let (($x54 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1287X)))
 (=> $x54 (= ?x336 ?x25)))))))))
 ))
 (let (($x74 (forall ((input.ind-%var1286X (_ BitVec 32)) )(let (($x344 (and (bvule (_ bv0 32) input.ind-%var1286X) (bvult input.ind-%var1286X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x54 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1286X)))
 (= $x54 $x344))))
 ))
 (let (($x190 (and $x74 $x201)))
 (let (($x157 (= $x190 true)))
 (let (($x296 (forall ((input.ind-%var1281X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1281X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1281X) (_ bv0 32)))))
 ))
 (let (($x362 (forall ((input.ind-%var1280X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1280X)))
 (= $x308 false)))
 ))
 (let (($x341 (and $x362 $x296)))
 (let (($x135 (= $x341 true)))
 (let ((?x329 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x274 (bvneg ?x329)))
 (let (($x351 (= ?x274 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x351 true)))
 (let (($x96 (= $x298 true)))
 (let (($x253 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x43)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x37)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x183)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (and $x84 $x159)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x109 $x103)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x53 $x56)))
 (let (($x150 (not $x100)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (and $x173 $x167)))
 (let (($x206 (and (not $x130) $x150)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x104 $x125)))
 (let (($x198 (not $x70)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x36 $x187)))
 (let (($x105 (and (not $x200) $x198)))
 (let (($x145 (and (and (and (and (and (and $x105 $x206) $x95) $x26) $x73) $x194) $x129)))
 (let (($x207 (and $x145 $x52)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x98 (or false (or false (and (and true (or $x76 $x106)) (or $x49 $x28))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x208 (and $x140 $x207)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x91 (= $x136 true)))
 (let (($x115 (= $x91 true)))
 (let (($x180 (= $x115 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x161 true)))
 (let (($x20 (= $x174 true)))
 (let (($x175 (= $x20 true)))
 (let ((?x59 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x78 (= (_ bv0 2) ?x59)))
 (let (($x149 (= $x78 true)))
 (let (($x188 (= $x149 true)))
 (let ((?x184 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x184)))
 (let (($x68 (= ?x186 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (= $x68 true)))
 (let (($x156 (= $x205 true)))
 (let (($x21 (= ?x186 input.dst.llvm-%n)))
 (let (($x148 (= $x21 true)))
 (let (($x137 (= $x148 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x172 (bvsub ?x87 ?x47)))
 (let (($x197 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x172) (bvult ?x87 ?x172))))
 (let (($x182 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x46 (ite $x182 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x112)))
 (let ((?x164 ((_ extract 63 32) ?x122)))
 (let (($x34 (= ?x164 ?x46)))
 (let (($x6 (and $x34 $x197)))
 (let (($x163 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x63 (and $x163 $x6)))
 (let (($x17 (= true $x63)))
 (let (($x31 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (=> $x31 $x17)))
 (let (($x151 (= $x27 true)))
 (let (($x193 (= $x151 true)))
 (let (($x134 (= $x193 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (= $x31 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x147 (and $x144 $x142)))
 (let (($x185 (and $x147 $x134)))
 (let (($x89 (and $x185 $x137)))
 (let (($x15 (and $x89 $x156)))
 (let (($x138 (and $x15 $x188)))
 (let (($x189 (and $x138 $x175)))
 (let (($x101 (and $x189 $x180)))
 (let (($x222 (and $x101 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x42 (and $x244 $x286)))
 (let (($x211 (and $x42 $x96)))
 (let (($x260 (and $x211 $x135)))
 (let (($x343 (and $x260 $x157)))
 (let (($x311 (and $x343 $x158)))
 (let (($x285 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x340 (and (not $x285) $x311)))
 (let (($x255 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x337 (and $x255 $x340)))
 (let (($x254 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x355 (and $x254 $x337)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x238 $x355)))
 (let (($x160 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x291 (bvadd ?x87 (_ bv3 32))))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x291)))
 (let (($x279 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x291)))
 (let (($x85 (or false (or false (and (and true (or $x13 $x279)) (or $x227 $x160))))))
 (let (($x241 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x85)))
 (let (($x278 (=> (and $x31 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x85)))
 (let (($x267 (and $x278 $x266)))
 (let (($x257 (=> $x267 $x215)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x153 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x153 (_ bv0 32))))
 (let (($x234 (= $x352 true)))
 (let (($x299 (= $x234 true)))
 (let (($x235 (forall ((input.ind-%var1311X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1311X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1311X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var1310X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1310X)))
 (= $x303 false)))
 ))
 (let (($x191 (and $x168 $x235)))
 (let (($x363 (= $x191 true)))
 (let (($x58 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let ((?x10 (bvadd (bvmul input.ind-%var1305X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x10))))
 (let ((?x283 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv2 32))) ?x64)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv3 32))) ?x283)))
 (let ((?x349 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1305X)))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1305X)))
 (=> $x243 (= ?x349 ?x203)))))))))
 ))
 (let (($x201 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x258 (and (bvule (_ bv0 32) input.ind-%var1304X) (bvult input.ind-%var1304X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1304X)))
 (= $x243 $x258))))
 ))
 (let (($x86 (and $x201 $x58)))
 (let (($x111 (= $x86 true)))
 (let (($x90 (forall ((input.ind-%var1299X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1299X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1299X) (_ bv0 32)))))
 ))
 (let (($x341 (forall ((input.ind-%var1298X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1298X)))
 (= $x303 false)))
 ))
 (let (($x114 (and $x341 $x90)))
 (let (($x33 (= $x114 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x298 (= ?x351 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x194)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x44)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x109)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (and $x29 $x84)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x26 $x183)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x53 $x56)))
 (let (($x150 (not $x100)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x167 $x130)))
 (let (($x178 (and (not $x60) $x150)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x104 $x125)))
 (let (($x198 (not $x70)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x79 $x51)))
 (let (($x173 (and (not $x196) $x198)))
 (let (($x207 (and (and (and (and (and (and $x173 $x178) $x95) $x80) $x159) $x73) $x48)))
 (let (($x208 (and $x207 $x141)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x36 (or false (or false (and (and true (or $x143 $x165)) (or $x65 $x18))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x36)))
 (let (($x209 (and $x200 $x208)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x91 (= $x136 true)))
 (let (($x115 (= $x91 true)))
 (let (($x180 (= $x115 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x161 true)))
 (let (($x20 (= $x174 true)))
 (let (($x175 (= $x20 true)))
 (let ((?x59 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x78 (= (_ bv0 2) ?x59)))
 (let (($x149 (= $x78 true)))
 (let (($x188 (= $x149 true)))
 (let ((?x184 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x184)))
 (let (($x68 (= ?x186 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (= $x68 true)))
 (let (($x156 (= $x205 true)))
 (let (($x21 (= ?x186 input.dst.llvm-%n)))
 (let (($x148 (= $x21 true)))
 (let (($x137 (= $x148 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x50 (bvsub ?x87 ?x47)))
 (let (($x197 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x50) (bvult ?x87 ?x50))))
 (let (($x182 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x46 (ite $x182 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x112)))
 (let ((?x164 ((_ extract 63 32) ?x122)))
 (let (($x34 (= ?x164 ?x46)))
 (let (($x6 (and $x34 $x197)))
 (let (($x163 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x63 (and $x163 $x6)))
 (let (($x17 (= true $x63)))
 (let (($x123 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (=> $x123 $x17)))
 (let (($x151 (= $x27 true)))
 (let (($x193 (= $x151 true)))
 (let (($x134 (= $x193 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (= $x123 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x147 (and $x144 $x142)))
 (let (($x185 (and $x147 $x134)))
 (let (($x89 (and $x185 $x137)))
 (let (($x15 (and $x89 $x156)))
 (let (($x138 (and $x15 $x188)))
 (let (($x189 (and $x138 $x175)))
 (let (($x101 (and $x189 $x180)))
 (let (($x226 (and $x101 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x329 (and $x253 $x42)))
 (let (($x301 (and $x329 $x211)))
 (let (($x92 (and $x301 $x33)))
 (let (($x357 (and $x92 $x111)))
 (let (($x162 (and $x357 $x363)))
 (let (($x94 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (and (not $x94) $x162)))
 (let (($x304 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x179 (and $x304 $x177)))
 (let (($x242 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x290 (and $x242 $x179)))
 (let (($x331 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x309 (and $x331 $x290)))
 (let (($x131 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd ?x87 (_ bv3 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x216 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x278 (or false (or false (and (and true (or $x121 $x216)) (or $x107 $x131))))))
 (let (($x238 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x278)))
 (let (($x282 (=> (and $x123 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x278)))
 (let (($x220 (and $x282 $x309)))
 (let (($x330 (=> $x220 $x299)))
 (not $x330))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x153 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x153 (_ bv0 32))))
 (let (($x234 (= $x352 true)))
 (let (($x299 (= $x234 true)))
 (let (($x235 (forall ((input.ind-%var1311X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1311X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1311X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var1310X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1310X)))
 (= $x303 false)))
 ))
 (let (($x191 (and $x168 $x235)))
 (let (($x363 (= $x191 true)))
 (let (($x58 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let ((?x10 (bvadd (bvmul input.ind-%var1305X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x10))))
 (let ((?x283 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv2 32))) ?x64)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv3 32))) ?x283)))
 (let ((?x349 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1305X)))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1305X)))
 (=> $x243 (= ?x349 ?x203)))))))))
 ))
 (let (($x201 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x258 (and (bvule (_ bv0 32) input.ind-%var1304X) (bvult input.ind-%var1304X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1304X)))
 (= $x243 $x258))))
 ))
 (let (($x86 (and $x201 $x58)))
 (let (($x111 (= $x86 true)))
 (let (($x90 (forall ((input.ind-%var1299X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1299X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1299X) (_ bv0 32)))))
 ))
 (let (($x341 (forall ((input.ind-%var1298X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1298X)))
 (= $x303 false)))
 ))
 (let (($x114 (and $x341 $x90)))
 (let (($x33 (= $x114 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x298 (= ?x351 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x194)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x44)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x109)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (and $x29 $x84)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x26 $x183)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x53 $x56)))
 (let (($x150 (not $x100)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x167 $x130)))
 (let (($x178 (and (not $x60) $x150)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x104 $x125)))
 (let (($x198 (not $x70)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x79 $x51)))
 (let (($x173 (and (not $x196) $x198)))
 (let (($x207 (and (and (and (and (and (and $x173 $x178) $x95) $x80) $x159) $x73) $x48)))
 (let (($x208 (and $x207 $x141)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x36 (or false (or false (and (and true (or $x143 $x165)) (or $x65 $x18))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x36)))
 (let (($x209 (and $x200 $x208)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x91 (= $x136 true)))
 (let (($x115 (= $x91 true)))
 (let (($x180 (= $x115 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x161 true)))
 (let (($x20 (= $x174 true)))
 (let (($x175 (= $x20 true)))
 (let ((?x59 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x78 (= (_ bv0 2) ?x59)))
 (let (($x149 (= $x78 true)))
 (let (($x188 (= $x149 true)))
 (let ((?x184 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x184)))
 (let (($x68 (= ?x186 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (= $x68 true)))
 (let (($x156 (= $x205 true)))
 (let (($x21 (= ?x186 input.dst.llvm-%n)))
 (let (($x148 (= $x21 true)))
 (let (($x137 (= $x148 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x50 (bvsub ?x87 ?x47)))
 (let (($x197 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x50) (bvult ?x87 ?x50))))
 (let (($x182 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x46 (ite $x182 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x112)))
 (let ((?x164 ((_ extract 63 32) ?x122)))
 (let (($x34 (= ?x164 ?x46)))
 (let (($x6 (and $x34 $x197)))
 (let (($x163 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x63 (and $x163 $x6)))
 (let (($x17 (= true $x63)))
 (let (($x123 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (=> $x123 $x17)))
 (let (($x151 (= $x27 true)))
 (let (($x193 (= $x151 true)))
 (let (($x134 (= $x193 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x22 (= $x123 true)))
 (let (($x41 (= $x22 true)))
 (let (($x144 (= $x41 true)))
 (let (($x147 (and $x144 $x142)))
 (let (($x185 (and $x147 $x134)))
 (let (($x89 (and $x185 $x137)))
 (let (($x15 (and $x89 $x156)))
 (let (($x138 (and $x15 $x188)))
 (let (($x189 (and $x138 $x175)))
 (let (($x101 (and $x189 $x180)))
 (let (($x226 (and $x101 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x329 (and $x253 $x42)))
 (let (($x301 (and $x329 $x211)))
 (let (($x92 (and $x301 $x33)))
 (let (($x357 (and $x92 $x111)))
 (let (($x162 (and $x357 $x363)))
 (let (($x94 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (and (not $x94) $x162)))
 (let (($x304 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x179 (and $x304 $x177)))
 (let (($x242 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x290 (and $x242 $x179)))
 (let (($x331 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x309 (and $x331 $x290)))
 (let (($x131 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd ?x87 (_ bv3 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x216 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x278 (or false (or false (and (and true (or $x121 $x216)) (or $x107 $x131))))))
 (let (($x238 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x278)))
 (let (($x282 (=> (and $x123 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x278)))
 (let (($x220 (and $x282 $x309)))
 (let (($x330 (=> $x220 $x299)))
 (not $x330))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x154 (bvule ?x157 (_ bv4294967294 32))))
 (let (($x14 (= $x154 true)))
 (let (($x323 (= $x14 true)))
 (let (($x344 (forall ((input.ind-%var1329X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1329X)))
 (=> $x353 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1329X) (_ bv0 32)))))
 ))
 (let (($x340 (forall ((input.ind-%var1328X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1328X)))
 (= $x353 false)))
 ))
 (let (($x306 (and $x340 $x344)))
 (let (($x313 (= $x306 true)))
 (let (($x311 (forall ((input.ind-%var1323X (_ BitVec 32)) )(let ((?x345 (bvadd (bvmul input.ind-%var1323X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x345))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv2 32))) ?x54)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv3 32))) ?x247)))
 (let ((?x168 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1323X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1323X)))
 (=> $x270 (= ?x168 ?x308)))))))))
 ))
 (let (($x58 (forall ((input.ind-%var1322X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var1322X) (bvult input.ind-%var1322X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1322X)))
 (= $x270 $x300))))
 ))
 (let (($x215 (and $x58 $x311)))
 (let (($x257 (= $x215 true)))
 (let (($x280 (forall ((input.ind-%var1317X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1317X)))
 (=> $x353 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1317X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1316X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1316X)))
 (= $x353 false)))
 ))
 (let (($x288 (and $x114 $x280)))
 (let (($x10 (= $x288 true)))
 (let ((?x351 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x351)))
 (let (($x96 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x52 (bvsub ?x87 ?x47)))
 (let (($x194 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x52) (bvult ?x87 ?x52))))
 (let (($x43 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x103 (ite $x43 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x84)))
 (let ((?x159 ((_ extract 63 32) ?x183)))
 (let (($x73 (= ?x159 ?x103)))
 (let (($x141 (and $x73 $x194)))
 (let (($x29 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x208 (and $x29 $x141)))
 (let (($x209 (= true $x208)))
 (let (($x118 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (=> $x118 $x209)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x32 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x95 (= $x32 true)))
 (let (($x129 (= $x95 true)))
 (let (($x139 (= $x129 true)))
 (let (($x100 (= $x118 true)))
 (let (($x150 (= $x100 true)))
 (let (($x178 (= $x150 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x51)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x200)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (and $x28 $x18)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x49 $x170)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x91 $x115)))
 (let (($x101 (not $x180)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x175 $x189)))
 (let (($x76 (and (not $x136) $x101)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x149 $x188)))
 (let (($x161 (not $x138)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x27 $x151)))
 (let (($x20 (and (not $x78) $x161)))
 (let (($x173 (and (and (and (and (and (and $x20 $x76) $x106) $x165) $x98) $x36) $x79)))
 (let (($x167 (and $x173 $x196)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x15 (or false (or false (and (and true (or $x184 $x186)) (or $x137 $x89))))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x130 (and $x59 $x167)))
 (let (($x60 (= $x130 true)))
 (let (($x206 (= $x60 true)))
 (let (($x53 (= $x206 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x199 (= $x40 true)))
 (let (($x197 (= $x199 true)))
 (let (($x6 (= $x197 true)))
 (let ((?x9 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x46 (= (_ bv0 2) ?x9)))
 (let (($x34 (= $x46 true)))
 (let (($x172 (= $x34 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x12 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x12 true)))
 (let (($x122 (= $x112 true)))
 (let (($x147 (= ?x142 input.dst.llvm-%n)))
 (let (($x117 (= $x147 true)))
 (let (($x39 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x163 (and $x169 $x39)))
 (let (($x164 (and $x163 $x122)))
 (let (($x50 (and $x164 $x172)))
 (let (($x63 (and $x50 $x6)))
 (let (($x56 (and $x63 $x53)))
 (let (($x37 (and $x56 $x178)))
 (let (($x80 (and $x37 $x139)))
 (let (($x252 (and $x80 $x226)))
 (let (($x276 (and $x252 $x253)))
 (let (($x274 (and $x276 $x329)))
 (let (($x362 (and $x274 $x301)))
 (let (($x232 (and $x362 $x10)))
 (let (($x328 (and $x232 $x257)))
 (let (($x213 (and $x328 $x313)))
 (let (($x360 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and (not $x360) $x213)))
 (let (($x285 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x260 (and $x285 $x327)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x224 (and $x297 $x260)))
 (let (($x295 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x295 $x224)))
 (let (($x85 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x216 (bvadd ?x87 (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x216)))
 (let (($x227 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x216)))
 (let (($x282 (or false (or false (and (and true (or $x99 $x227)) (or $x35 $x85))))))
 (let (($x331 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x282)))
 (let (($x261 (=> (and $x118 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x282)))
 (let (($x268 (and $x261 $x81)))
 (let (($x359 (=> $x268 $x323)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x154 (bvule ?x157 (_ bv4294967294 32))))
 (let (($x14 (= $x154 true)))
 (let (($x323 (= $x14 true)))
 (let (($x344 (forall ((input.ind-%var1329X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1329X)))
 (=> $x353 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1329X) (_ bv0 32)))))
 ))
 (let (($x340 (forall ((input.ind-%var1328X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1328X)))
 (= $x353 false)))
 ))
 (let (($x306 (and $x340 $x344)))
 (let (($x313 (= $x306 true)))
 (let (($x311 (forall ((input.ind-%var1323X (_ BitVec 32)) )(let ((?x345 (bvadd (bvmul input.ind-%var1323X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x345))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv2 32))) ?x54)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv3 32))) ?x247)))
 (let ((?x168 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1323X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1323X)))
 (=> $x270 (= ?x168 ?x308)))))))))
 ))
 (let (($x58 (forall ((input.ind-%var1322X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var1322X) (bvult input.ind-%var1322X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1322X)))
 (= $x270 $x300))))
 ))
 (let (($x215 (and $x58 $x311)))
 (let (($x257 (= $x215 true)))
 (let (($x280 (forall ((input.ind-%var1317X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1317X)))
 (=> $x353 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1317X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1316X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1316X)))
 (= $x353 false)))
 ))
 (let (($x288 (and $x114 $x280)))
 (let (($x10 (= $x288 true)))
 (let ((?x351 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x351)))
 (let (($x96 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x52 (bvsub ?x87 ?x47)))
 (let (($x194 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x52) (bvult ?x87 ?x52))))
 (let (($x43 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x103 (ite $x43 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x84)))
 (let ((?x159 ((_ extract 63 32) ?x183)))
 (let (($x73 (= ?x159 ?x103)))
 (let (($x141 (and $x73 $x194)))
 (let (($x29 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x208 (and $x29 $x141)))
 (let (($x209 (= true $x208)))
 (let (($x118 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (=> $x118 $x209)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x32 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x95 (= $x32 true)))
 (let (($x129 (= $x95 true)))
 (let (($x139 (= $x129 true)))
 (let (($x100 (= $x118 true)))
 (let (($x150 (= $x100 true)))
 (let (($x178 (= $x150 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x51)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x200)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (and $x28 $x18)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x49 $x170)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x91 $x115)))
 (let (($x101 (not $x180)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x175 $x189)))
 (let (($x76 (and (not $x136) $x101)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x149 $x188)))
 (let (($x161 (not $x138)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x27 $x151)))
 (let (($x20 (and (not $x78) $x161)))
 (let (($x173 (and (and (and (and (and (and $x20 $x76) $x106) $x165) $x98) $x36) $x79)))
 (let (($x167 (and $x173 $x196)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x15 (or false (or false (and (and true (or $x184 $x186)) (or $x137 $x89))))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x130 (and $x59 $x167)))
 (let (($x60 (= $x130 true)))
 (let (($x206 (= $x60 true)))
 (let (($x53 (= $x206 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x199 (= $x40 true)))
 (let (($x197 (= $x199 true)))
 (let (($x6 (= $x197 true)))
 (let ((?x9 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x46 (= (_ bv0 2) ?x9)))
 (let (($x34 (= $x46 true)))
 (let (($x172 (= $x34 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x12 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x12 true)))
 (let (($x122 (= $x112 true)))
 (let (($x147 (= ?x142 input.dst.llvm-%n)))
 (let (($x117 (= $x147 true)))
 (let (($x39 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x163 (and $x169 $x39)))
 (let (($x164 (and $x163 $x122)))
 (let (($x50 (and $x164 $x172)))
 (let (($x63 (and $x50 $x6)))
 (let (($x56 (and $x63 $x53)))
 (let (($x37 (and $x56 $x178)))
 (let (($x80 (and $x37 $x139)))
 (let (($x252 (and $x80 $x226)))
 (let (($x276 (and $x252 $x253)))
 (let (($x274 (and $x276 $x329)))
 (let (($x362 (and $x274 $x301)))
 (let (($x232 (and $x362 $x10)))
 (let (($x328 (and $x232 $x257)))
 (let (($x213 (and $x328 $x313)))
 (let (($x360 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and (not $x360) $x213)))
 (let (($x285 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x260 (and $x285 $x327)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x224 (and $x297 $x260)))
 (let (($x295 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x295 $x224)))
 (let (($x85 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x216 (bvadd ?x87 (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x216)))
 (let (($x227 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x216)))
 (let (($x282 (or false (or false (and (and true (or $x99 $x227)) (or $x35 $x85))))))
 (let (($x331 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x282)))
 (let (($x261 (=> (and $x118 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x282)))
 (let (($x268 (and $x261 $x81)))
 (let (($x359 (=> $x268 $x323)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x146 (bvsge ?x111 (_ bv0 32))))
 (let (($x133 (= $x146 true)))
 (let (($x171 (= $x133 true)))
 (let (($x258 (forall ((input.ind-%var1347X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1347X)))
 (=> $x25 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1347X) (_ bv0 32)))))
 ))
 (let (($x177 (forall ((input.ind-%var1346X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1346X)))
 (= $x25 false)))
 ))
 (let (($x267 (and $x177 $x258)))
 (let (($x263 (= $x267 true)))
 (let (($x162 (forall ((input.ind-%var1341X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var1341X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x235))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv2 32))) ?x243)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv3 32))) ?x228)))
 (let ((?x340 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1341X)))
 (let (($x190 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1341X)))
 (=> $x190 (= ?x340 ?x303)))))))))
 ))
 (let (($x311 (forall ((input.ind-%var1340X (_ BitVec 32)) )(let (($x120 (and (bvule (_ bv0 32) input.ind-%var1340X) (bvult input.ind-%var1340X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x190 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1340X)))
 (= $x190 $x120))))
 ))
 (let (($x299 (and $x311 $x162)))
 (let (($x330 (= $x299 true)))
 (let (($x191 (forall ((input.ind-%var1335X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1335X)))
 (=> $x25 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1335X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1334X)))
 (= $x25 false)))
 ))
 (let (($x256 (and $x288 $x191)))
 (let (($x345 (= $x256 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x298)))
 (let (($x211 (= ?x96 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x211 true)))
 (let (($x362 (= $x301 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x52 (bvsub ?x87 ?x47)))
 (let (($x141 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x52) (bvult ?x87 ?x52))))
 (let (($x103 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x73 (ite $x103 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x183 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x159 (bvmul (_ bv4 64) ?x183)))
 (let ((?x43 ((_ extract 63 32) ?x159)))
 (let (($x44 (= ?x43 ?x73)))
 (let (($x208 (and $x44 $x141)))
 (let (($x109 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x209 (and $x109 $x208)))
 (let (($x219 (= true $x209)))
 (let (($x181 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x181 $x219)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x129 (= $x95 true)))
 (let (($x139 (= $x129 true)))
 (let (($x80 (= $x139 true)))
 (let (($x150 (= $x181 true)))
 (let (($x178 (= $x150 true)))
 (let (($x37 (= $x178 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x36)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x70)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x125 $x28)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x165 $x65)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x91 $x115)))
 (let (($x101 (not $x180)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x189 $x136)))
 (let (($x105 (and (not $x166) $x101)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x149 $x188)))
 (let (($x161 (not $x138)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x134 $x23)))
 (let (($x175 (and (not $x174) $x161)))
 (let (($x167 (and (and (and (and (and (and $x175 $x105) $x106) $x143) $x18) $x98) $x140)))
 (let (($x130 (and $x167 $x198)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x27 (or false (or false (and (and true (or $x21 $x148)) (or $x68 $x205))))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x27)))
 (let (($x60 (and $x78 $x130)))
 (let (($x206 (= $x60 true)))
 (let (($x53 (= $x206 true)))
 (let (($x56 (= $x53 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x199 (= $x40 true)))
 (let (($x197 (= $x199 true)))
 (let (($x6 (= $x197 true)))
 (let ((?x9 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x46 (= (_ bv0 2) ?x9)))
 (let (($x34 (= $x46 true)))
 (let (($x172 (= $x34 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x12 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x12 true)))
 (let (($x122 (= $x112 true)))
 (let (($x147 (= ?x142 input.dst.llvm-%n)))
 (let (($x117 (= $x147 true)))
 (let (($x39 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x163 (and $x169 $x39)))
 (let (($x164 (and $x163 $x122)))
 (let (($x50 (and $x164 $x172)))
 (let (($x63 (and $x50 $x6)))
 (let (($x100 (and $x63 $x56)))
 (let (($x32 (and $x100 $x37)))
 (let (($x145 (and $x32 $x80)))
 (let (($x245 (and $x145 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x341 (and $x351 $x362)))
 (let (($x55 (and $x341 $x345)))
 (let (($x153 (and $x55 $x330)))
 (let (($x338 (and $x153 $x263)))
 (let (($x128 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (and (not $x128) $x338)))
 (let (($x94 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x94 $x64)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x273 (and $x255 $x92)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x69 (and $x254 $x273)))
 (let (($x278 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd ?x87 (_ bv3 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x107 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x227)))
 (let (($x261 (or false (or false (and (and true (or $x16 $x107)) (or $x241 $x278))))))
 (let (($x295 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x261)))
 (let (($x291 (=> (and $x181 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x261)))
 (let (($x355 (and $x291 $x69)))
 (let (($x302 (=> $x355 $x171)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x146 (bvsge ?x111 (_ bv0 32))))
 (let (($x133 (= $x146 true)))
 (let (($x171 (= $x133 true)))
 (let (($x258 (forall ((input.ind-%var1347X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1347X)))
 (=> $x25 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1347X) (_ bv0 32)))))
 ))
 (let (($x177 (forall ((input.ind-%var1346X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1346X)))
 (= $x25 false)))
 ))
 (let (($x267 (and $x177 $x258)))
 (let (($x263 (= $x267 true)))
 (let (($x162 (forall ((input.ind-%var1341X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var1341X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x235))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv2 32))) ?x243)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv3 32))) ?x228)))
 (let ((?x340 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1341X)))
 (let (($x190 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1341X)))
 (=> $x190 (= ?x340 ?x303)))))))))
 ))
 (let (($x311 (forall ((input.ind-%var1340X (_ BitVec 32)) )(let (($x120 (and (bvule (_ bv0 32) input.ind-%var1340X) (bvult input.ind-%var1340X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x190 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1340X)))
 (= $x190 $x120))))
 ))
 (let (($x299 (and $x311 $x162)))
 (let (($x330 (= $x299 true)))
 (let (($x191 (forall ((input.ind-%var1335X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1335X)))
 (=> $x25 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1335X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1334X)))
 (= $x25 false)))
 ))
 (let (($x256 (and $x288 $x191)))
 (let (($x345 (= $x256 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x298)))
 (let (($x211 (= ?x96 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x211 true)))
 (let (($x362 (= $x301 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x52 (bvsub ?x87 ?x47)))
 (let (($x141 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x52) (bvult ?x87 ?x52))))
 (let (($x103 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x73 (ite $x103 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x183 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x159 (bvmul (_ bv4 64) ?x183)))
 (let ((?x43 ((_ extract 63 32) ?x159)))
 (let (($x44 (= ?x43 ?x73)))
 (let (($x208 (and $x44 $x141)))
 (let (($x109 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x209 (and $x109 $x208)))
 (let (($x219 (= true $x209)))
 (let (($x181 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x181 $x219)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x129 (= $x95 true)))
 (let (($x139 (= $x129 true)))
 (let (($x80 (= $x139 true)))
 (let (($x150 (= $x181 true)))
 (let (($x178 (= $x150 true)))
 (let (($x37 (= $x178 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x36)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x70)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x125 $x28)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x165 $x65)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x91 $x115)))
 (let (($x101 (not $x180)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x189 $x136)))
 (let (($x105 (and (not $x166) $x101)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x149 $x188)))
 (let (($x161 (not $x138)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x134 $x23)))
 (let (($x175 (and (not $x174) $x161)))
 (let (($x167 (and (and (and (and (and (and $x175 $x105) $x106) $x143) $x18) $x98) $x140)))
 (let (($x130 (and $x167 $x198)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x27 (or false (or false (and (and true (or $x21 $x148)) (or $x68 $x205))))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x27)))
 (let (($x60 (and $x78 $x130)))
 (let (($x206 (= $x60 true)))
 (let (($x53 (= $x206 true)))
 (let (($x56 (= $x53 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x199 (= $x40 true)))
 (let (($x197 (= $x199 true)))
 (let (($x6 (= $x197 true)))
 (let ((?x9 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x46 (= (_ bv0 2) ?x9)))
 (let (($x34 (= $x46 true)))
 (let (($x172 (= $x34 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x12 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x12 true)))
 (let (($x122 (= $x112 true)))
 (let (($x147 (= ?x142 input.dst.llvm-%n)))
 (let (($x117 (= $x147 true)))
 (let (($x39 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x163 (and $x169 $x39)))
 (let (($x164 (and $x163 $x122)))
 (let (($x50 (and $x164 $x172)))
 (let (($x63 (and $x50 $x6)))
 (let (($x100 (and $x63 $x56)))
 (let (($x32 (and $x100 $x37)))
 (let (($x145 (and $x32 $x80)))
 (let (($x245 (and $x145 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x341 (and $x351 $x362)))
 (let (($x55 (and $x341 $x345)))
 (let (($x153 (and $x55 $x330)))
 (let (($x338 (and $x153 $x263)))
 (let (($x128 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (and (not $x128) $x338)))
 (let (($x94 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x94 $x64)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x273 (and $x255 $x92)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x69 (and $x254 $x273)))
 (let (($x278 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd ?x87 (_ bv3 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x107 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x227)))
 (let (($x261 (or false (or false (and (and true (or $x16 $x107)) (or $x241 $x278))))))
 (let (($x295 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x261)))
 (let (($x291 (=> (and $x181 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x261)))
 (let (($x355 (and $x291 $x69)))
 (let (($x302 (=> $x355 $x171)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x257 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x17 (bvule ?x257 input.dst.llvm-%n)))
 (let (($x342 (= $x17 true)))
 (let (($x234 (= $x342 true)))
 (let (($x300 (forall ((input.ind-%var1365X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1365X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1365X) (_ bv0 32)))))
 ))
 (let (($x327 (forall ((input.ind-%var1364X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1364X)))
 (= $x203 false)))
 ))
 (let (($x220 (and $x327 $x300)))
 (let (($x335 (= $x220 true)))
 (let (($x213 (forall ((input.ind-%var1359X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var1359X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x270)))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x314)))
 (let ((?x177 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1359X)))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1359X)))
 (=> $x86 (= ?x177 ?x353)))))))))
 ))
 (let (($x162 (forall ((input.ind-%var1358X (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) input.ind-%var1358X) (bvult input.ind-%var1358X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1358X)))
 (= $x86 $x296))))
 ))
 (let (($x323 (and $x162 $x213)))
 (let (($x359 (= $x323 true)))
 (let (($x306 (forall ((input.ind-%var1353X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1353X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1353X) (_ bv0 32)))))
 ))
 (let (($x256 (forall ((input.ind-%var1352X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1352X)))
 (= $x203 false)))
 ))
 (let (($x317 (and $x256 $x306)))
 (let (($x235 (= $x317 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x96)))
 (let (($x301 (= ?x211 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x362 (= $x301 true)))
 (let (($x341 (= $x362 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x329 (= ?x142 input.dst.llvm-%n)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let (($x253 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x103 (bvsub ?x87 ?x47)))
 (let (($x52 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x103) (bvult ?x87 ?x103))))
 (let (($x183 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x159 (ite $x183 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x29 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvmul (_ bv4 64) ?x29)))
 (let ((?x84 ((_ extract 63 32) ?x109)))
 (let (($x43 (= ?x84 ?x159)))
 (let (($x207 (and $x43 $x52)))
 (let (($x145 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x194 (and $x145 $x207)))
 (let (($x141 (= true $x194)))
 (let (($x116 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (=> $x116 $x141)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x178 true)))
 (let (($x32 (= $x37 true)))
 (let (($x95 (= $x32 true)))
 (let (($x53 (= $x116 true)))
 (let (($x56 (= $x53 true)))
 (let (($x100 (= $x56 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x65)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x49)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x106 $x104)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x187 $x143)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x189 $x136)))
 (let (($x76 (not $x166)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x138 $x161)))
 (let (($x115 (and (not $x175) $x76)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x134 $x23)))
 (let (($x20 (not $x174)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x197 $x6)))
 (let (($x188 (and (not $x78) $x20)))
 (let (($x140 (and (and (and (and (and (and $x188 $x115) $x101) $x200) $x173) $x125) $x28)))
 (let (($x167 (and $x140 $x18)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x15 (or false (or false (and (and true (or $x151 $x186)) (or $x137 $x89))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x36 (and $x27 $x167)))
 (let (($x198 (= $x36 true)))
 (let (($x130 (= $x198 true)))
 (let (($x60 (= $x130 true)))
 (let (($x46 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x34 (= $x46 true)))
 (let (($x172 (= $x34 true)))
 (let (($x50 (= $x172 true)))
 (let ((?x112 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x122 (= (_ bv0 2) ?x112)))
 (let (($x164 (= $x122 true)))
 (let (($x182 (= $x164 true)))
 (let (($x147 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (= $x147 true)))
 (let (($x39 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x163 (and $x169 $x39)))
 (let (($x9 (and $x163 $x182)))
 (let (($x40 (and $x9 $x50)))
 (let (($x206 (and $x40 $x60)))
 (let (($x150 (and $x206 $x100)))
 (let (($x129 (and $x150 $x95)))
 (let (($x222 (and $x129 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x42 (and $x244 $x286)))
 (let (($x298 (and $x42 $x351)))
 (let (($x114 (and $x298 $x341)))
 (let (($x264 (and $x114 $x235)))
 (let (($x157 (and $x264 $x359)))
 (let (($x352 (and $x157 $x335)))
 (let (($x337 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (and (not $x337) $x352)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x232 (and $x360 $x54)))
 (let (($x304 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x316 (and $x304 $x232)))
 (let (($x242 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x93 (and $x242 $x316)))
 (let (($x282 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd ?x87 (_ bv3 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x35 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x291 (or false (or false (and (and true (or $x160 $x35)) (or $x238 $x282))))))
 (let (($x254 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x291)))
 (let (($x279 (=> (and $x116 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x291)))
 (let (($x290 (and $x279 $x93)))
 (let (($x336 (=> $x290 $x234)))
 (not $x336))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x257 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x17 (bvule ?x257 input.dst.llvm-%n)))
 (let (($x342 (= $x17 true)))
 (let (($x234 (= $x342 true)))
 (let (($x300 (forall ((input.ind-%var1365X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1365X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1365X) (_ bv0 32)))))
 ))
 (let (($x327 (forall ((input.ind-%var1364X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1364X)))
 (= $x203 false)))
 ))
 (let (($x220 (and $x327 $x300)))
 (let (($x335 (= $x220 true)))
 (let (($x213 (forall ((input.ind-%var1359X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var1359X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x270)))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x314)))
 (let ((?x177 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1359X)))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1359X)))
 (=> $x86 (= ?x177 ?x353)))))))))
 ))
 (let (($x162 (forall ((input.ind-%var1358X (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) input.ind-%var1358X) (bvult input.ind-%var1358X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1358X)))
 (= $x86 $x296))))
 ))
 (let (($x323 (and $x162 $x213)))
 (let (($x359 (= $x323 true)))
 (let (($x306 (forall ((input.ind-%var1353X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1353X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1353X) (_ bv0 32)))))
 ))
 (let (($x256 (forall ((input.ind-%var1352X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1352X)))
 (= $x203 false)))
 ))
 (let (($x317 (and $x256 $x306)))
 (let (($x235 (= $x317 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x96)))
 (let (($x301 (= ?x211 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x362 (= $x301 true)))
 (let (($x341 (= $x362 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x38)))
 (let (($x329 (= ?x142 input.dst.llvm-%n)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let (($x253 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x103 (bvsub ?x87 ?x47)))
 (let (($x52 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x103) (bvult ?x87 ?x103))))
 (let (($x183 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x159 (ite $x183 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x29 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvmul (_ bv4 64) ?x29)))
 (let ((?x84 ((_ extract 63 32) ?x109)))
 (let (($x43 (= ?x84 ?x159)))
 (let (($x207 (and $x43 $x52)))
 (let (($x145 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x194 (and $x145 $x207)))
 (let (($x141 (= true $x194)))
 (let (($x116 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (=> $x116 $x141)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x178 true)))
 (let (($x32 (= $x37 true)))
 (let (($x95 (= $x32 true)))
 (let (($x53 (= $x116 true)))
 (let (($x56 (= $x53 true)))
 (let (($x100 (= $x56 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x65)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x49)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x106 $x104)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x187 $x143)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x189 $x136)))
 (let (($x76 (not $x166)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x138 $x161)))
 (let (($x115 (and (not $x175) $x76)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x134 $x23)))
 (let (($x20 (not $x174)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x197 $x6)))
 (let (($x188 (and (not $x78) $x20)))
 (let (($x140 (and (and (and (and (and (and $x188 $x115) $x101) $x200) $x173) $x125) $x28)))
 (let (($x167 (and $x140 $x18)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x15 (or false (or false (and (and true (or $x151 $x186)) (or $x137 $x89))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x36 (and $x27 $x167)))
 (let (($x198 (= $x36 true)))
 (let (($x130 (= $x198 true)))
 (let (($x60 (= $x130 true)))
 (let (($x46 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x34 (= $x46 true)))
 (let (($x172 (= $x34 true)))
 (let (($x50 (= $x172 true)))
 (let ((?x112 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x122 (= (_ bv0 2) ?x112)))
 (let (($x164 (= $x122 true)))
 (let (($x182 (= $x164 true)))
 (let (($x147 (= ?x142 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (= $x147 true)))
 (let (($x39 (= $x117 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x41 true)))
 (let (($x62 (= $x144 true)))
 (let (($x169 (= $x62 true)))
 (let (($x163 (and $x169 $x39)))
 (let (($x9 (and $x163 $x182)))
 (let (($x40 (and $x9 $x50)))
 (let (($x206 (and $x40 $x60)))
 (let (($x150 (and $x206 $x100)))
 (let (($x129 (and $x150 $x95)))
 (let (($x222 (and $x129 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x42 (and $x244 $x286)))
 (let (($x298 (and $x42 $x351)))
 (let (($x114 (and $x298 $x341)))
 (let (($x264 (and $x114 $x235)))
 (let (($x157 (and $x264 $x359)))
 (let (($x352 (and $x157 $x335)))
 (let (($x337 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (and (not $x337) $x352)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x232 (and $x360 $x54)))
 (let (($x304 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x316 (and $x304 $x232)))
 (let (($x242 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x93 (and $x242 $x316)))
 (let (($x282 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd ?x87 (_ bv3 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x35 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x291 (or false (or false (and (and true (or $x160 $x35)) (or $x238 $x282))))))
 (let (($x254 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x291)))
 (let (($x279 (=> (and $x116 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x291)))
 (let (($x290 (and $x279 $x93)))
 (let (($x336 (=> $x290 $x234)))
 (not $x336))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x236 (forall ((input.ind-%var1391X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1391X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x35 (bvadd ?x87 (_ bv3 32))))
 (let ((?x57 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x275 (store ?x57 (bvadd ?x87 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x45 (store ?x275 (bvadd ?x87 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x8 (store ?x45 ?x35 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x155 (concat (select ?x8 (bvadd ?x258 (_ bv2 32))) (concat (select ?x8 (bvadd ?x258 (_ bv1 32))) (select ?x8 ?x258)))))
 (let ((?x327 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1391X)))
 (let (($x326 (= input.ind-%var1391X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x325 (= (ite $x326 input.spec-%var-i-0.L3%6%bbentry ?x327) (concat (select ?x8 (bvadd ?x258 (_ bv3 32))) ?x155))))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1391X)))
 (let (($x71 (or $x215 $x326)))
 (=> $x71 $x325))))))))))))))))
 ))
 (let (($x5 (forall ((input.ind-%var1390X (_ BitVec 32)) )(let (($x353 (bvule (_ bv0 32) input.ind-%var1390X)))
 (let (($x30 (and $x353 (bvult input.ind-%var1390X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x326 (= input.ind-%var1390X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1390X)))
 (let (($x71 (or $x215 $x326)))
 (= $x71 $x30)))))))
 ))
 (let (($x217 (and $x5 $x236)))
 (let (($x330 (= true true)))
 (let (($x249 (and $x330 $x217)))
 (let (($x332 (= $x249 true)))
 (let (($x120 (forall ((input.ind-%var1383X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1383X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1383X) (_ bv0 32)))))
 ))
 (let (($x64 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1382X)))
 (= $x308 false)))
 ))
 (let (($x268 (and $x64 $x120)))
 (let (($x74 (= $x268 true)))
 (let (($x338 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1377X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x334 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x190)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x334)))
 (let ((?x327 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1377X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1377X)))
 (=> $x215 (= ?x327 ?x25)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x353 (bvule (_ bv0 32) input.ind-%var1376X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1376X)))
 (= $x215 (and $x353 (bvult input.ind-%var1376X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x171 (and $x213 $x338)))
 (let (($x302 (= $x171 true)))
 (let (($x267 (forall ((input.ind-%var1371X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1371X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1371X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1370X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1370X)))
 (= $x308 false)))
 ))
 (let (($x343 (and $x317 $x267)))
 (let (($x344 (= $x343 true)))
 (let ((?x211 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x211)))
 (let (($x362 (= ?x301 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x341 (= $x362 true)))
 (let (($x114 (= $x341 true)))
 (let ((?x329 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x274 (= (_ bv0 2) ?x329)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x141 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x44 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x48 (= $x44 true)))
 (let (($x52 (= $x48 true)))
 (let (($x207 (= $x52 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x129 (bvsub ?x87 ?x47)))
 (let (($x26 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x129) (bvult ?x87 ?x129))))
 (let (($x37 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x32 (ite $x37 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x100 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x150 (bvmul (_ bv4 64) ?x100)))
 (let ((?x178 ((_ extract 63 32) ?x150)))
 (let (($x95 (= ?x178 ?x32)))
 (let (($x29 (and $x95 $x26)))
 (let (($x53 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x109 (and $x53 $x29)))
 (let (($x84 (= true $x109)))
 (let (($x126 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (=> $x126 $x84)))
 (let (($x159 (= $x183 true)))
 (let (($x43 (= $x159 true)))
 (let (($x73 (= $x43 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x18 true)))
 (let (($x36 (= $x167 true)))
 (let (($x198 (= $x36 true)))
 (let (($x70 (= $x126 true)))
 (let (($x49 (= $x70 true)))
 (let (($x28 (= $x49 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x101)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x51)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x91)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (and $x175 $x189)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x161 $x136)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x197 $x6)))
 (let (($x149 (not $x78)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x156 $x15)))
 (let (($x23 (and (not $x27) $x149)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x21 $x148)))
 (let (($x89 (not $x137)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x163 $x12)))
 (let (($x205 (and (not $x186) $x89)))
 (let (($x79 (and (and (and (and (and (and $x205 $x23) $x20) $x138) $x166) $x115) $x180)))
 (let (($x104 (and $x79 $x170)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x164)))
 (let (($x59 (or false (or false (and (and true (or $x182 $x9)) (or $x172 $x50))))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x59)))
 (let (($x143 (and $x151 $x104)))
 (let (($x173 (= $x143 true)))
 (let (($x196 (= $x173 true)))
 (let (($x165 (= $x196 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x125 (and $x117 $x165)))
 (let (($x140 (and $x125 $x28)))
 (let (($x130 (and $x140 $x198)))
 (let (($x103 (and $x130 $x73)))
 (let (($x194 (and $x103 $x207)))
 (let (($x218 (and $x194 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x96 (and $x286 $x298)))
 (let (($x288 (and $x96 $x114)))
 (let (($x292 (and $x288 $x344)))
 (let (($x111 (and $x292 $x302)))
 (let (($x154 (and $x111 $x74)))
 (let (($x179 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and (not $x179) $x154)))
 (let (($x128 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x128 $x243)))
 (let (($x285 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x285 $x55)))
 (let (($x297 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x297 $x158)))
 (let (($x261 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x87 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x241 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x279 (or false (or false (and (and true (or $x131 $x241)) (or $x331 $x261))))))
 (let (($x242 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x279)))
 (let (($x216 (=> (and $x126 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x279)))
 (let (($x224 (and $x216 $x88)))
 (let (($x319 (=> $x224 $x332)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x236 (forall ((input.ind-%var1391X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1391X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x35 (bvadd ?x87 (_ bv3 32))))
 (let ((?x57 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x275 (store ?x57 (bvadd ?x87 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x45 (store ?x275 (bvadd ?x87 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x8 (store ?x45 ?x35 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x155 (concat (select ?x8 (bvadd ?x258 (_ bv2 32))) (concat (select ?x8 (bvadd ?x258 (_ bv1 32))) (select ?x8 ?x258)))))
 (let ((?x327 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1391X)))
 (let (($x326 (= input.ind-%var1391X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x325 (= (ite $x326 input.spec-%var-i-0.L3%6%bbentry ?x327) (concat (select ?x8 (bvadd ?x258 (_ bv3 32))) ?x155))))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1391X)))
 (let (($x71 (or $x215 $x326)))
 (=> $x71 $x325))))))))))))))))
 ))
 (let (($x5 (forall ((input.ind-%var1390X (_ BitVec 32)) )(let (($x353 (bvule (_ bv0 32) input.ind-%var1390X)))
 (let (($x30 (and $x353 (bvult input.ind-%var1390X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x326 (= input.ind-%var1390X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1390X)))
 (let (($x71 (or $x215 $x326)))
 (= $x71 $x30)))))))
 ))
 (let (($x217 (and $x5 $x236)))
 (let (($x330 (= true true)))
 (let (($x249 (and $x330 $x217)))
 (let (($x332 (= $x249 true)))
 (let (($x120 (forall ((input.ind-%var1383X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1383X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1383X) (_ bv0 32)))))
 ))
 (let (($x64 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1382X)))
 (= $x308 false)))
 ))
 (let (($x268 (and $x64 $x120)))
 (let (($x74 (= $x268 true)))
 (let (($x338 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1377X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x334 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x190)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x334)))
 (let ((?x327 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1377X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1377X)))
 (=> $x215 (= ?x327 ?x25)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x353 (bvule (_ bv0 32) input.ind-%var1376X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1376X)))
 (= $x215 (and $x353 (bvult input.ind-%var1376X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x171 (and $x213 $x338)))
 (let (($x302 (= $x171 true)))
 (let (($x267 (forall ((input.ind-%var1371X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1371X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1371X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1370X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1370X)))
 (= $x308 false)))
 ))
 (let (($x343 (and $x317 $x267)))
 (let (($x344 (= $x343 true)))
 (let ((?x211 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x211)))
 (let (($x362 (= ?x301 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x341 (= $x362 true)))
 (let (($x114 (= $x341 true)))
 (let ((?x329 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x274 (= (_ bv0 2) ?x329)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x141 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x44 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x48 (= $x44 true)))
 (let (($x52 (= $x48 true)))
 (let (($x207 (= $x52 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x129 (bvsub ?x87 ?x47)))
 (let (($x26 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x129) (bvult ?x87 ?x129))))
 (let (($x37 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x32 (ite $x37 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x100 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x150 (bvmul (_ bv4 64) ?x100)))
 (let ((?x178 ((_ extract 63 32) ?x150)))
 (let (($x95 (= ?x178 ?x32)))
 (let (($x29 (and $x95 $x26)))
 (let (($x53 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x109 (and $x53 $x29)))
 (let (($x84 (= true $x109)))
 (let (($x126 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (=> $x126 $x84)))
 (let (($x159 (= $x183 true)))
 (let (($x43 (= $x159 true)))
 (let (($x73 (= $x43 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x18 true)))
 (let (($x36 (= $x167 true)))
 (let (($x198 (= $x36 true)))
 (let (($x70 (= $x126 true)))
 (let (($x49 (= $x70 true)))
 (let (($x28 (= $x49 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x101)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x51)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x91)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (and $x175 $x189)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x161 $x136)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x197 $x6)))
 (let (($x149 (not $x78)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x156 $x15)))
 (let (($x23 (and (not $x27) $x149)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x21 $x148)))
 (let (($x89 (not $x137)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x163 $x12)))
 (let (($x205 (and (not $x186) $x89)))
 (let (($x79 (and (and (and (and (and (and $x205 $x23) $x20) $x138) $x166) $x115) $x180)))
 (let (($x104 (and $x79 $x170)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x164)))
 (let (($x59 (or false (or false (and (and true (or $x182 $x9)) (or $x172 $x50))))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x59)))
 (let (($x143 (and $x151 $x104)))
 (let (($x173 (= $x143 true)))
 (let (($x196 (= $x173 true)))
 (let (($x165 (= $x196 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x41)))
 (let (($x38 (= ?x144 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x62 (= ?x144 input.dst.llvm-%n)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x117 (and $x61 $x147)))
 (let (($x125 (and $x117 $x165)))
 (let (($x140 (and $x125 $x28)))
 (let (($x130 (and $x140 $x198)))
 (let (($x103 (and $x130 $x73)))
 (let (($x194 (and $x103 $x207)))
 (let (($x218 (and $x194 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x96 (and $x286 $x298)))
 (let (($x288 (and $x96 $x114)))
 (let (($x292 (and $x288 $x344)))
 (let (($x111 (and $x292 $x302)))
 (let (($x154 (and $x111 $x74)))
 (let (($x179 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and (not $x179) $x154)))
 (let (($x128 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x128 $x243)))
 (let (($x285 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x285 $x55)))
 (let (($x297 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x297 $x158)))
 (let (($x261 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x87 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x241 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x279 (or false (or false (and (and true (or $x131 $x241)) (or $x331 $x261))))))
 (let (($x242 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x279)))
 (let (($x216 (=> (and $x126 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x279)))
 (let (($x224 (and $x216 $x88)))
 (let (($x319 (=> $x224 $x332)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x300 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x311 (not $x300)))
 (let (($x124 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (=> $x124 $x311)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x18 (bvsub ?x87 ?x47)))
 (let (($x130 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x18) (bvult ?x87 ?x18))))
 (let (($x49 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x140 (ite $x49 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x165 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x165)))
 (let ((?x70 ((_ extract 63 32) ?x125)))
 (let (($x65 (= ?x70 ?x140)))
 (let (($x60 (and $x65 $x130)))
 (let (($x173 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x206 (and $x173 $x60)))
 (let (($x53 (= true $x206)))
 (let (($x56 (=> $x124 $x53)))
 (let (($x69 (=> (and $x56 $x124) $x311)))
 (let (($x235 (= $x69 true)))
 (let (($x86 (= $x235 true)))
 (let (($x217 (forall ((input.ind-%var1409X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1409X)))
 (=> $x288 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1409X) (_ bv0 32)))))
 ))
 (let (($x132 (forall ((input.ind-%var1408X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1408X)))
 (= $x288 false)))
 ))
 (let (($x249 (and $x132 $x217)))
 (let (($x332 (= $x249 true)))
 (let (($x45 (forall ((input.ind-%var1403X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var1403X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x251 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x152))))
 (let ((?x57 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv2 32))) ?x251)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv3 32))) ?x57)))
 (let ((?x263 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1403X)))
 (let (($x357 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1403X)))
 (=> $x357 (= ?x263 ?x275)))))))))
 ))
 (let (($x190 (forall ((input.ind-%var1402X (_ BitVec 32)) )(let (($x345 (and (bvule (_ bv0 32) input.ind-%var1402X) (bvult input.ind-%var1402X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x357 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1402X)))
 (= $x357 $x345))))
 ))
 (let (($x195 (and $x190 $x45)))
 (let (($x8 (= $x195 true)))
 (let (($x314 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1397X)))
 (=> $x288 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1397X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1396X)))
 (= $x288 false)))
 ))
 (let (($x90 (and $x317 $x314)))
 (let (($x313 (= $x90 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x298 (= ?x351 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let ((?x252 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x252)))
 (let (($x212 (= ?x245 input.dst.llvm-%n)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x246 (= ?x245 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let ((?x209 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x219 (= (_ bv0 2) ?x209)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x52 (= $x48 true)))
 (let (($x207 (= $x52 true)))
 (let (($x194 (= $x207 true)))
 (let (($x159 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (= $x159 true)))
 (let (($x73 (= $x43 true)))
 (let (($x103 (= $x73 true)))
 (let (($x26 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x26 true)))
 (let (($x109 (= $x29 true)))
 (let (($x84 (= $x109 true)))
 (let (($x95 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x95 true)))
 (let (($x129 (= $x139 true)))
 (let (($x80 (= $x129 true)))
 (let (($x100 (= $x56 true)))
 (let (($x150 (= $x100 true)))
 (let (($x178 (= $x150 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x51 true)))
 (let (($x79 (= $x180 true)))
 (let (($x101 (= $x79 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x200)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x174)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x197)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x134 $x6)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x27 $x78)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x12 $x186)))
 (let (($x21 (not $x68)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x59 $x151)))
 (let (($x137 (and (not $x163) $x21)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x34 $x172)))
 (let (($x40 (not $x50)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x260 $x22)))
 (let (($x185 (and (not $x46) $x40)))
 (let (($x189 (and (and (and (and (and (and $x185 $x137) $x205) $x15) $x149) $x105) $x20)))
 (let (($x136 (and $x189 $x188)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x164 (or false (or false (and (and true (or $x169 $x61)) (or $x147 $x117))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x164)))
 (let (($x166 (and $x9 $x136)))
 (let (($x187 (= $x166 true)))
 (let (($x76 (= $x187 true)))
 (let (($x115 (= $x76 true)))
 (let (($x170 (and $x115 $x101)))
 (let (($x37 (and $x170 $x178)))
 (let (($x145 (and $x37 $x80)))
 (let (($x183 (and $x145 $x84)))
 (let (($x44 (and $x183 $x103)))
 (let (($x141 (and $x44 $x194)))
 (let (($x226 (and $x141 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x329 (and $x276 $x42)))
 (let (($x301 (and $x329 $x211)))
 (let (($x213 (and $x301 $x313)))
 (let (($x324 (and $x213 $x8)))
 (let (($x319 (and $x324 $x332)))
 (let (($x337 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (and $x337 $x319)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x123 (and $x94 $x75)))
 (let (($x255 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x255 $x123)))
 (let (($x291 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd ?x87 (_ bv3 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x238 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x241)))
 (let (($x216 (or false (or false (and (and true (or $x85 $x238)) (or $x295 $x291))))))
 (let (($x297 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x216)))
 (let (($x227 (=> (and $x124 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x216)))
 (let (($x328 (and $x227 $x39)))
 (let (($x323 (=> $x328 $x86)))
 (not $x323))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x300 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x311 (not $x300)))
 (let (($x124 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (=> $x124 $x311)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x18 (bvsub ?x87 ?x47)))
 (let (($x130 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x18) (bvult ?x87 ?x18))))
 (let (($x49 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x140 (ite $x49 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x165 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x165)))
 (let ((?x70 ((_ extract 63 32) ?x125)))
 (let (($x65 (= ?x70 ?x140)))
 (let (($x60 (and $x65 $x130)))
 (let (($x173 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x206 (and $x173 $x60)))
 (let (($x53 (= true $x206)))
 (let (($x56 (=> $x124 $x53)))
 (let (($x69 (=> (and $x56 $x124) $x311)))
 (let (($x235 (= $x69 true)))
 (let (($x86 (= $x235 true)))
 (let (($x217 (forall ((input.ind-%var1409X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1409X)))
 (=> $x288 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1409X) (_ bv0 32)))))
 ))
 (let (($x132 (forall ((input.ind-%var1408X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1408X)))
 (= $x288 false)))
 ))
 (let (($x249 (and $x132 $x217)))
 (let (($x332 (= $x249 true)))
 (let (($x45 (forall ((input.ind-%var1403X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var1403X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x251 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x152))))
 (let ((?x57 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv2 32))) ?x251)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv3 32))) ?x57)))
 (let ((?x263 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1403X)))
 (let (($x357 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1403X)))
 (=> $x357 (= ?x263 ?x275)))))))))
 ))
 (let (($x190 (forall ((input.ind-%var1402X (_ BitVec 32)) )(let (($x345 (and (bvule (_ bv0 32) input.ind-%var1402X) (bvult input.ind-%var1402X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x357 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1402X)))
 (= $x357 $x345))))
 ))
 (let (($x195 (and $x190 $x45)))
 (let (($x8 (= $x195 true)))
 (let (($x314 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1397X)))
 (=> $x288 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1397X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1396X)))
 (= $x288 false)))
 ))
 (let (($x90 (and $x317 $x314)))
 (let (($x313 (= $x90 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x298 (= ?x351 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let ((?x252 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x252)))
 (let (($x212 (= ?x245 input.dst.llvm-%n)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x246 (= ?x245 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let ((?x209 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x219 (= (_ bv0 2) ?x209)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x52 (= $x48 true)))
 (let (($x207 (= $x52 true)))
 (let (($x194 (= $x207 true)))
 (let (($x159 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (= $x159 true)))
 (let (($x73 (= $x43 true)))
 (let (($x103 (= $x73 true)))
 (let (($x26 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x26 true)))
 (let (($x109 (= $x29 true)))
 (let (($x84 (= $x109 true)))
 (let (($x95 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x95 true)))
 (let (($x129 (= $x139 true)))
 (let (($x80 (= $x129 true)))
 (let (($x100 (= $x56 true)))
 (let (($x150 (= $x100 true)))
 (let (($x178 (= $x150 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x51 true)))
 (let (($x79 (= $x180 true)))
 (let (($x101 (= $x79 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x200)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x174)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x197)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x134 $x6)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x27 $x78)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x12 $x186)))
 (let (($x21 (not $x68)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x59 $x151)))
 (let (($x137 (and (not $x163) $x21)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x34 $x172)))
 (let (($x40 (not $x50)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x260 $x22)))
 (let (($x185 (and (not $x46) $x40)))
 (let (($x189 (and (and (and (and (and (and $x185 $x137) $x205) $x15) $x149) $x105) $x20)))
 (let (($x136 (and $x189 $x188)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x164 (or false (or false (and (and true (or $x169 $x61)) (or $x147 $x117))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x164)))
 (let (($x166 (and $x9 $x136)))
 (let (($x187 (= $x166 true)))
 (let (($x76 (= $x187 true)))
 (let (($x115 (= $x76 true)))
 (let (($x170 (and $x115 $x101)))
 (let (($x37 (and $x170 $x178)))
 (let (($x145 (and $x37 $x80)))
 (let (($x183 (and $x145 $x84)))
 (let (($x44 (and $x183 $x103)))
 (let (($x141 (and $x44 $x194)))
 (let (($x226 (and $x141 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x329 (and $x276 $x42)))
 (let (($x301 (and $x329 $x211)))
 (let (($x213 (and $x301 $x313)))
 (let (($x324 (and $x213 $x8)))
 (let (($x319 (and $x324 $x332)))
 (let (($x337 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (and $x337 $x319)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x123 (and $x94 $x75)))
 (let (($x255 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x255 $x123)))
 (let (($x291 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd ?x87 (_ bv3 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x238 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x241)))
 (let (($x216 (or false (or false (and (and true (or $x85 $x238)) (or $x295 $x291))))))
 (let (($x297 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x216)))
 (let (($x227 (=> (and $x124 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x216)))
 (let (($x328 (and $x227 $x39)))
 (let (($x323 (=> $x328 $x86)))
 (not $x323))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x135 (bvmul (_ bv4294967295 32) ?x176)))
 (let ((?x283 (bvneg ?x135)))
 (let (($x203 (= ?x283 ?x10)))
 (let (($x191 (= $x203 true)))
 (let (($x299 (forall ((input.ind-%var1427X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1427X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1427X) (_ bv0 32)))))
 ))
 (let (($x308 (forall ((input.ind-%var1426X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1426X)))
 (= $x213 false)))
 ))
 (let (($x162 (and $x308 $x299)))
 (let (($x292 (= $x162 true)))
 (let (($x120 (forall ((input.ind-%var1421X (_ BitVec 32)) )(let ((?x334 (bvadd (bvmul input.ind-%var1421X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x334))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv2 32))) ?x33)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv3 32))) ?x302)))
 (let ((?x123 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1421X)))
 (let (($x57 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1421X)))
 (=> $x57 (= ?x123 ?x224)))))))))
 ))
 (let (($x249 (forall ((input.ind-%var1420X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var1420X) (bvult input.ind-%var1420X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x57 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1420X)))
 (= $x57 $x132))))
 ))
 (let (($x268 (and $x249 $x120)))
 (let (($x64 (= $x268 true)))
 (let (($x225 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1415X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1415X) (_ bv0 32)))))
 ))
 (let (($x345 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1414X)))
 (= $x213 false)))
 ))
 (let (($x127 (and $x345 $x225)))
 (let (($x233 (= $x127 true)))
 (let ((?x288 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x306 (bvneg ?x288)))
 (let (($x317 (= ?x306 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x218 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x159 (bvsub ?x87 ?x47)))
 (let (($x44 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x159) (bvult ?x87 ?x159))))
 (let (($x109 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x84 (ite $x109 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x145 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x26 (bvmul (_ bv4 64) ?x145)))
 (let ((?x29 ((_ extract 63 32) ?x26)))
 (let (($x183 (= ?x29 ?x84)))
 (let (($x48 (and $x183 $x44)))
 (let (($x129 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x52 (and $x129 $x48)))
 (let (($x207 (= true $x52)))
 (let (($x97 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (=> $x97 $x207)))
 (let (($x141 (= $x194 true)))
 (let (($x208 (= $x141 true)))
 (let (($x209 (= $x208 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x150 (= $x100 true)))
 (let (($x178 (= $x150 true)))
 (let (($x37 (= $x178 true)))
 (let (($x130 (= $x97 true)))
 (let (($x60 (= $x130 true)))
 (let (($x206 (= $x60 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x143)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x170)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x76 $x106)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x187 $x51)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x23 $x105)))
 (let (($x174 (not $x91)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x78 $x149)))
 (let (($x189 (and (not $x175) $x174)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x15 $x161)))
 (let (($x134 (not $x27)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x172 $x50)))
 (let (($x6 (and (not $x156) $x134)))
 (let (($x28 (and (and (and (and (and (and $x6 $x189) $x188) $x166) $x180) $x101) $x104)))
 (let (($x140 (and $x28 $x173)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x59)))
 (let (($x89 (or false (or false (and (and true (or $x151 $x163)) (or $x186 $x68))))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x89)))
 (let (($x65 (and $x98 $x140)))
 (let (($x167 (= $x65 true)))
 (let (($x18 (= $x167 true)))
 (let (($x36 (= $x18 true)))
 (let ((?x9 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x260 (= (_ bv0 2) ?x9)))
 (let (($x22 (= $x260 true)))
 (let (($x46 (= $x22 true)))
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x169)))
 (let (($x117 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x117 true)))
 (let (($x122 (= $x112 true)))
 (let (($x38 (= ?x61 input.dst.llvm-%n)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x184 (and $x147 $x122)))
 (let (($x63 (and $x184 $x46)))
 (let (($x198 (and $x63 $x36)))
 (let (($x53 (and $x198 $x206)))
 (let (($x32 (and $x53 $x37)))
 (let (($x219 (and $x32 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x114 (and $x351 $x301)))
 (let (($x353 (and $x114 $x215)))
 (let (($x5 (and $x353 $x233)))
 (let (($x74 (and $x5 $x64)))
 (let (($x326 (and $x74 $x292)))
 (let (($x182 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (and (not $x182) $x326)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (and $x41 $x25)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x333 (and $x360 $x71)))
 (let (($x304 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x294 (and $x304 $x333)))
 (let (($x279 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x238 (bvadd ?x87 (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x238)))
 (let (($x331 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x238)))
 (let (($x227 (or false (or false (and (and true (or $x278 $x331)) (or $x254 $x279))))))
 (let (($x255 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x227)))
 (let (($x107 (=> (and $x97 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x227)))
 (let (($x236 (and $x107 $x294)))
 (let (($x335 (=> $x236 $x191)))
 (not $x335))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x135 (bvmul (_ bv4294967295 32) ?x176)))
 (let ((?x283 (bvneg ?x135)))
 (let (($x203 (= ?x283 ?x10)))
 (let (($x191 (= $x203 true)))
 (let (($x299 (forall ((input.ind-%var1427X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1427X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1427X) (_ bv0 32)))))
 ))
 (let (($x308 (forall ((input.ind-%var1426X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1426X)))
 (= $x213 false)))
 ))
 (let (($x162 (and $x308 $x299)))
 (let (($x292 (= $x162 true)))
 (let (($x120 (forall ((input.ind-%var1421X (_ BitVec 32)) )(let ((?x334 (bvadd (bvmul input.ind-%var1421X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x334))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv2 32))) ?x33)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv3 32))) ?x302)))
 (let ((?x123 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1421X)))
 (let (($x57 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1421X)))
 (=> $x57 (= ?x123 ?x224)))))))))
 ))
 (let (($x249 (forall ((input.ind-%var1420X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var1420X) (bvult input.ind-%var1420X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x57 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1420X)))
 (= $x57 $x132))))
 ))
 (let (($x268 (and $x249 $x120)))
 (let (($x64 (= $x268 true)))
 (let (($x225 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1415X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1415X) (_ bv0 32)))))
 ))
 (let (($x345 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1414X)))
 (= $x213 false)))
 ))
 (let (($x127 (and $x345 $x225)))
 (let (($x233 (= $x127 true)))
 (let ((?x288 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x306 (bvneg ?x288)))
 (let (($x317 (= ?x306 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x218 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x159 (bvsub ?x87 ?x47)))
 (let (($x44 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x159) (bvult ?x87 ?x159))))
 (let (($x109 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x84 (ite $x109 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x145 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x26 (bvmul (_ bv4 64) ?x145)))
 (let ((?x29 ((_ extract 63 32) ?x26)))
 (let (($x183 (= ?x29 ?x84)))
 (let (($x48 (and $x183 $x44)))
 (let (($x129 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x52 (and $x129 $x48)))
 (let (($x207 (= true $x52)))
 (let (($x97 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (=> $x97 $x207)))
 (let (($x141 (= $x194 true)))
 (let (($x208 (= $x141 true)))
 (let (($x209 (= $x208 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x150 (= $x100 true)))
 (let (($x178 (= $x150 true)))
 (let (($x37 (= $x178 true)))
 (let (($x130 (= $x97 true)))
 (let (($x60 (= $x130 true)))
 (let (($x206 (= $x60 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x143)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x170)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x76 $x106)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x187 $x51)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x23 $x105)))
 (let (($x174 (not $x91)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x78 $x149)))
 (let (($x189 (and (not $x175) $x174)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x15 $x161)))
 (let (($x134 (not $x27)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x172 $x50)))
 (let (($x6 (and (not $x156) $x134)))
 (let (($x28 (and (and (and (and (and (and $x6 $x189) $x188) $x166) $x180) $x101) $x104)))
 (let (($x140 (and $x28 $x173)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x59)))
 (let (($x89 (or false (or false (and (and true (or $x151 $x163)) (or $x186 $x68))))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x89)))
 (let (($x65 (and $x98 $x140)))
 (let (($x167 (= $x65 true)))
 (let (($x18 (= $x167 true)))
 (let (($x36 (= $x18 true)))
 (let ((?x9 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x260 (= (_ bv0 2) ?x9)))
 (let (($x22 (= $x260 true)))
 (let (($x46 (= $x22 true)))
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x169)))
 (let (($x117 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x117 true)))
 (let (($x122 (= $x112 true)))
 (let (($x38 (= ?x61 input.dst.llvm-%n)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x184 (and $x147 $x122)))
 (let (($x63 (and $x184 $x46)))
 (let (($x198 (and $x63 $x36)))
 (let (($x53 (and $x198 $x206)))
 (let (($x32 (and $x53 $x37)))
 (let (($x219 (and $x32 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x114 (and $x351 $x301)))
 (let (($x353 (and $x114 $x215)))
 (let (($x5 (and $x353 $x233)))
 (let (($x74 (and $x5 $x64)))
 (let (($x326 (and $x74 $x292)))
 (let (($x182 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (and (not $x182) $x326)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (and $x41 $x25)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x333 (and $x360 $x71)))
 (let (($x304 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x294 (and $x304 $x333)))
 (let (($x279 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x238 (bvadd ?x87 (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x238)))
 (let (($x331 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x238)))
 (let (($x227 (or false (or false (and (and true (or $x278 $x331)) (or $x254 $x279))))))
 (let (($x255 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x227)))
 (let (($x107 (=> (and $x97 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x227)))
 (let (($x236 (and $x107 $x294)))
 (let (($x335 (=> $x236 $x191)))
 (not $x335))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x343 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x325 (bvule ?x343 (_ bv4294967294 32))))
 (let (($x319 (= $x325 true)))
 (let (($x303 (= $x319 true)))
 (let (($x290 (forall ((input.ind-%var1445X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1445X)))
 (=> $x171 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1445X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var1444X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1444X)))
 (= $x171 false)))
 ))
 (let (($x247 (and $x69 $x290)))
 (let (($x152 (= $x247 true)))
 (let (($x90 (forall ((input.ind-%var1439X (_ BitVec 32)) )(let ((?x34 (bvadd (bvmul input.ind-%var1439X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x34))))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv2 32))) ?x66)))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv3 32))) ?x332)))
 (let ((?x308 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1439X)))
 (let (($x362 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1439X)))
 (=> $x362 (= ?x308 ?x83)))))))))
 ))
 (let (($x120 (forall ((input.ind-%var1438X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1438X) (bvult input.ind-%var1438X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x362 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1438X)))
 (= $x362 $x243))))
 ))
 (let (($x300 (and $x120 $x90)))
 (let (($x311 (= $x300 true)))
 (let (($x328 (forall ((input.ind-%var1433X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1433X)))
 (=> $x171 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1433X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var1432X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1432X)))
 (= $x171 false)))
 ))
 (let (($x177 (and $x127 $x328)))
 (let (($x334 (= $x177 true)))
 (let ((?x306 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x306)))
 (let (($x267 (= ?x317 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let (($x96 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x208 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x208)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x194)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x159 $x103)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x43 $x44)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x95 $x139)))
 (let (($x80 (not $x129)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x178 $x37)))
 (let (($x26 (and (not $x32) $x80)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x60 $x206)))
 (let (($x56 (not $x53)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x51 $x180)))
 (let (($x150 (and (not $x130) $x56)))
 (let (($x245 (and (and (and (and (and (and $x150 $x26) $x109) $x183) $x48) $x207) $x141)))
 (let (($x246 (and $x245 $x209)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x18 (or false (or false (and (and true (or $x49 $x170)) (or $x143 $x173))))))
 (let (($x198 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x244 (and $x198 $x246)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x125 (= $x166 true)))
 (let (($x187 (= $x125 true)))
 (let (($x76 (= $x187 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x196 true)))
 (let (($x188 (= $x200 true)))
 (let (($x165 (= $x188 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x105 (= (_ bv0 2) ?x23)))
 (let (($x91 (= $x105 true)))
 (let (($x174 (= $x91 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x156)))
 (let (($x6 (= ?x197 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (= $x6 true)))
 (let (($x149 (= $x78 true)))
 (let (($x15 (= ?x197 input.dst.llvm-%n)))
 (let (($x161 (= $x15 true)))
 (let (($x27 (= $x161 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x151 (bvsub ?x87 ?x47)))
 (let (($x186 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x151) (bvult ?x87 ?x151))))
 (let (($x40 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x205 (ite $x40 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvmul (_ bv4 64) ?x22)))
 (let ((?x63 ((_ extract 63 32) ?x46)))
 (let (($x59 (= ?x63 ?x205)))
 (let (($x68 (and $x59 $x186)))
 (let (($x9 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x21 (and $x9 $x68)))
 (let (($x137 (= true $x21)))
 (let (($x13 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (=> $x13 $x137)))
 (let (($x89 (= $x138 true)))
 (let (($x98 (= $x89 true)))
 (let (($x172 (= $x98 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x147 (= $x142 true)))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x62 (= $x13 true)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x122 (and $x61 $x112)))
 (let (($x50 (and $x122 $x172)))
 (let (($x134 (and $x50 $x27)))
 (let (($x175 (and $x134 $x149)))
 (let (($x189 (and $x175 $x174)))
 (let (($x136 (and $x189 $x165)))
 (let (($x115 (and $x136 $x76)))
 (let (($x286 (and $x115 $x212)))
 (let (($x298 (and $x286 $x351)))
 (let (($x288 (and $x298 $x114)))
 (let (($x313 (and $x288 $x353)))
 (let (($x111 (and $x313 $x334)))
 (let (($x258 (and $x111 $x311)))
 (let (($x251 (and $x258 $x152)))
 (let (($x284 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and (not $x284) $x251)))
 (let (($x144 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x330 (and $x144 $x158)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x128 $x330)))
 (let (($x285 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x190 (and $x285 $x195)))
 (let (($x216 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x331 (bvadd ?x87 (_ bv3 32))))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x331)))
 (let (($x295 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x331)))
 (let (($x107 (or false (or false (and (and true (or $x282 $x295)) (or $x242 $x216))))))
 (let (($x304 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x107)))
 (let (($x35 (=> (and $x13 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x107)))
 (let (($x19 (and $x35 $x190)))
 (let (($x229 (=> $x19 $x303)))
 (not $x229))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x343 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x325 (bvule ?x343 (_ bv4294967294 32))))
 (let (($x319 (= $x325 true)))
 (let (($x303 (= $x319 true)))
 (let (($x290 (forall ((input.ind-%var1445X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1445X)))
 (=> $x171 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1445X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var1444X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1444X)))
 (= $x171 false)))
 ))
 (let (($x247 (and $x69 $x290)))
 (let (($x152 (= $x247 true)))
 (let (($x90 (forall ((input.ind-%var1439X (_ BitVec 32)) )(let ((?x34 (bvadd (bvmul input.ind-%var1439X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x34))))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv2 32))) ?x66)))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv3 32))) ?x332)))
 (let ((?x308 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1439X)))
 (let (($x362 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1439X)))
 (=> $x362 (= ?x308 ?x83)))))))))
 ))
 (let (($x120 (forall ((input.ind-%var1438X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1438X) (bvult input.ind-%var1438X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x362 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1438X)))
 (= $x362 $x243))))
 ))
 (let (($x300 (and $x120 $x90)))
 (let (($x311 (= $x300 true)))
 (let (($x328 (forall ((input.ind-%var1433X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1433X)))
 (=> $x171 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1433X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var1432X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1432X)))
 (= $x171 false)))
 ))
 (let (($x177 (and $x127 $x328)))
 (let (($x334 (= $x177 true)))
 (let ((?x306 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x306)))
 (let (($x267 (= ?x317 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let (($x96 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x208 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x208)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x194)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x159 $x103)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x43 $x44)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x95 $x139)))
 (let (($x80 (not $x129)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x178 $x37)))
 (let (($x26 (and (not $x32) $x80)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x60 $x206)))
 (let (($x56 (not $x53)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x51 $x180)))
 (let (($x150 (and (not $x130) $x56)))
 (let (($x245 (and (and (and (and (and (and $x150 $x26) $x109) $x183) $x48) $x207) $x141)))
 (let (($x246 (and $x245 $x209)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x18 (or false (or false (and (and true (or $x49 $x170)) (or $x143 $x173))))))
 (let (($x198 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x244 (and $x198 $x246)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x125 (= $x166 true)))
 (let (($x187 (= $x125 true)))
 (let (($x76 (= $x187 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x196 true)))
 (let (($x188 (= $x200 true)))
 (let (($x165 (= $x188 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x105 (= (_ bv0 2) ?x23)))
 (let (($x91 (= $x105 true)))
 (let (($x174 (= $x91 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x156)))
 (let (($x6 (= ?x197 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (= $x6 true)))
 (let (($x149 (= $x78 true)))
 (let (($x15 (= ?x197 input.dst.llvm-%n)))
 (let (($x161 (= $x15 true)))
 (let (($x27 (= $x161 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x151 (bvsub ?x87 ?x47)))
 (let (($x186 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x151) (bvult ?x87 ?x151))))
 (let (($x40 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x205 (ite $x40 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvmul (_ bv4 64) ?x22)))
 (let ((?x63 ((_ extract 63 32) ?x46)))
 (let (($x59 (= ?x63 ?x205)))
 (let (($x68 (and $x59 $x186)))
 (let (($x9 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x21 (and $x9 $x68)))
 (let (($x137 (= true $x21)))
 (let (($x13 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (=> $x13 $x137)))
 (let (($x89 (= $x138 true)))
 (let (($x98 (= $x89 true)))
 (let (($x172 (= $x98 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x147 (= $x142 true)))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x62 (= $x13 true)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x122 (and $x61 $x112)))
 (let (($x50 (and $x122 $x172)))
 (let (($x134 (and $x50 $x27)))
 (let (($x175 (and $x134 $x149)))
 (let (($x189 (and $x175 $x174)))
 (let (($x136 (and $x189 $x165)))
 (let (($x115 (and $x136 $x76)))
 (let (($x286 (and $x115 $x212)))
 (let (($x298 (and $x286 $x351)))
 (let (($x288 (and $x298 $x114)))
 (let (($x313 (and $x288 $x353)))
 (let (($x111 (and $x313 $x334)))
 (let (($x258 (and $x111 $x311)))
 (let (($x251 (and $x258 $x152)))
 (let (($x284 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and (not $x284) $x251)))
 (let (($x144 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x330 (and $x144 $x158)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x128 $x330)))
 (let (($x285 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x190 (and $x285 $x195)))
 (let (($x216 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x331 (bvadd ?x87 (_ bv3 32))))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x331)))
 (let (($x295 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x331)))
 (let (($x107 (or false (or false (and (and true (or $x282 $x295)) (or $x242 $x216))))))
 (let (($x304 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x107)))
 (let (($x35 (=> (and $x13 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x107)))
 (let (($x19 (and $x35 $x190)))
 (let (($x229 (=> $x19 $x303)))
 (not $x229))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x64 (_ bv0 32))))
 (let (($x179 (= $x352 true)))
 (let (($x228 (= $x179 true)))
 (let (($x132 (forall ((input.ind-%var1463X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1463X)))
 (=> $x324 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1463X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var1462X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1462X)))
 (= $x324 false)))
 ))
 (let (($x323 (and $x25 $x132)))
 (let (($x280 (= $x323 true)))
 (let (($x326 (forall ((input.ind-%var1457X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1457X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x57 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x299))))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv2 32))) ?x57)))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv3 32))) ?x88)))
 (let ((?x69 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1457X)))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1457X)))
 (=> $x58 (= ?x69 ?x213)))))))))
 ))
 (let (($x90 (forall ((input.ind-%var1456X (_ BitVec 32)) )(let (($x289 (and (bvule (_ bv0 32) input.ind-%var1456X) (bvult input.ind-%var1456X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1456X)))
 (= $x58 $x289))))
 ))
 (let (($x10 (and $x90 $x326)))
 (let (($x203 (= $x10 true)))
 (let (($x162 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1451X)))
 (=> $x324 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1451X) (_ bv0 32)))))
 ))
 (let (($x177 (forall ((input.ind-%var1450X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1450X)))
 (= $x324 false)))
 ))
 (let (($x181 (and $x177 $x162)))
 (let (($x34 (= $x181 true)))
 (let ((?x317 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x267 (bvneg ?x317)))
 (let (($x215 (= ?x267 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x288 (= $x114 true)))
 (let (($x329 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x207)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x226)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x222 $x159)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x183 $x73)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x95 $x139)))
 (let (($x80 (not $x129)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x37 $x32)))
 (let (($x219 (and (not $x145) $x80)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x60 $x206)))
 (let (($x56 (not $x53)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x79 $x36)))
 (let (($x178 (and (not $x100) $x56)))
 (let (($x246 (and (and (and (and (and (and $x178 $x219) $x109) $x84) $x103) $x48) $x52)))
 (let (($x244 (and $x246 $x252)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x51 (or false (or false (and (and true (or $x104 $x28)) (or $x140 $x65))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x253 (and $x130 $x244)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x125 (= $x166 true)))
 (let (($x187 (= $x125 true)))
 (let (($x76 (= $x187 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x196 true)))
 (let (($x188 (= $x200 true)))
 (let (($x165 (= $x188 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x105 (= (_ bv0 2) ?x23)))
 (let (($x91 (= $x105 true)))
 (let (($x174 (= $x91 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x156)))
 (let (($x6 (= ?x197 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (= $x6 true)))
 (let (($x149 (= $x78 true)))
 (let (($x15 (= ?x197 input.dst.llvm-%n)))
 (let (($x161 (= $x15 true)))
 (let (($x27 (= $x161 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x163 (bvsub ?x87 ?x47)))
 (let (($x186 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x163) (bvult ?x87 ?x163))))
 (let (($x40 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x205 (ite $x40 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvmul (_ bv4 64) ?x22)))
 (let ((?x63 ((_ extract 63 32) ?x46)))
 (let (($x59 (= ?x63 ?x205)))
 (let (($x68 (and $x59 $x186)))
 (let (($x9 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x21 (and $x9 $x68)))
 (let (($x137 (= true $x21)))
 (let (($x121 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (=> $x121 $x137)))
 (let (($x89 (= $x138 true)))
 (let (($x98 (= $x89 true)))
 (let (($x172 (= $x98 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x147 (= $x142 true)))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x62 (= $x121 true)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x122 (and $x61 $x112)))
 (let (($x50 (and $x122 $x172)))
 (let (($x134 (and $x50 $x27)))
 (let (($x175 (and $x134 $x149)))
 (let (($x189 (and $x175 $x174)))
 (let (($x136 (and $x189 $x165)))
 (let (($x115 (and $x136 $x76)))
 (let (($x42 (and $x115 $x286)))
 (let (($x96 (and $x42 $x298)))
 (let (($x306 (and $x96 $x288)))
 (let (($x345 (and $x306 $x313)))
 (let (($x75 (and $x345 $x34)))
 (let (($x176 (and $x75 $x203)))
 (let (($x338 (and $x176 $x280)))
 (let (($x45 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and (not $x45) $x338)))
 (let (($x182 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x5 (and $x182 $x33)))
 (let (($x337 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x217 (and $x337 $x5)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x335 (and $x94 $x217)))
 (let (($x227 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd ?x87 (_ bv3 32))))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x254 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x35 (or false (or false (and (and true (or $x261 $x254)) (or $x297 $x227))))))
 (let (($x285 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x241 (=> (and $x121 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x118 (and $x241 $x335)))
 (let (($x256 (=> $x118 $x228)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x64 (_ bv0 32))))
 (let (($x179 (= $x352 true)))
 (let (($x228 (= $x179 true)))
 (let (($x132 (forall ((input.ind-%var1463X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1463X)))
 (=> $x324 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1463X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var1462X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1462X)))
 (= $x324 false)))
 ))
 (let (($x323 (and $x25 $x132)))
 (let (($x280 (= $x323 true)))
 (let (($x326 (forall ((input.ind-%var1457X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1457X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x57 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x299))))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv2 32))) ?x57)))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv3 32))) ?x88)))
 (let ((?x69 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1457X)))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1457X)))
 (=> $x58 (= ?x69 ?x213)))))))))
 ))
 (let (($x90 (forall ((input.ind-%var1456X (_ BitVec 32)) )(let (($x289 (and (bvule (_ bv0 32) input.ind-%var1456X) (bvult input.ind-%var1456X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1456X)))
 (= $x58 $x289))))
 ))
 (let (($x10 (and $x90 $x326)))
 (let (($x203 (= $x10 true)))
 (let (($x162 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1451X)))
 (=> $x324 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1451X) (_ bv0 32)))))
 ))
 (let (($x177 (forall ((input.ind-%var1450X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1450X)))
 (= $x324 false)))
 ))
 (let (($x181 (and $x177 $x162)))
 (let (($x34 (= $x181 true)))
 (let ((?x317 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x267 (bvneg ?x317)))
 (let (($x215 (= ?x267 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x288 (= $x114 true)))
 (let (($x329 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x207)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x226)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x222 $x159)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x183 $x73)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x95 $x139)))
 (let (($x80 (not $x129)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x37 $x32)))
 (let (($x219 (and (not $x145) $x80)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x60 $x206)))
 (let (($x56 (not $x53)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x79 $x36)))
 (let (($x178 (and (not $x100) $x56)))
 (let (($x246 (and (and (and (and (and (and $x178 $x219) $x109) $x84) $x103) $x48) $x52)))
 (let (($x244 (and $x246 $x252)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x51 (or false (or false (and (and true (or $x104 $x28)) (or $x140 $x65))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x253 (and $x130 $x244)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x125 (= $x166 true)))
 (let (($x187 (= $x125 true)))
 (let (($x76 (= $x187 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x196 true)))
 (let (($x188 (= $x200 true)))
 (let (($x165 (= $x188 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x105 (= (_ bv0 2) ?x23)))
 (let (($x91 (= $x105 true)))
 (let (($x174 (= $x91 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x156)))
 (let (($x6 (= ?x197 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (= $x6 true)))
 (let (($x149 (= $x78 true)))
 (let (($x15 (= ?x197 input.dst.llvm-%n)))
 (let (($x161 (= $x15 true)))
 (let (($x27 (= $x161 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x163 (bvsub ?x87 ?x47)))
 (let (($x186 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x163) (bvult ?x87 ?x163))))
 (let (($x40 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x205 (ite $x40 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvmul (_ bv4 64) ?x22)))
 (let ((?x63 ((_ extract 63 32) ?x46)))
 (let (($x59 (= ?x63 ?x205)))
 (let (($x68 (and $x59 $x186)))
 (let (($x9 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x21 (and $x9 $x68)))
 (let (($x137 (= true $x21)))
 (let (($x121 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (=> $x121 $x137)))
 (let (($x89 (= $x138 true)))
 (let (($x98 (= $x89 true)))
 (let (($x172 (= $x98 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x147 (= $x142 true)))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x62 (= $x121 true)))
 (let (($x169 (= $x62 true)))
 (let (($x61 (= $x169 true)))
 (let (($x122 (and $x61 $x112)))
 (let (($x50 (and $x122 $x172)))
 (let (($x134 (and $x50 $x27)))
 (let (($x175 (and $x134 $x149)))
 (let (($x189 (and $x175 $x174)))
 (let (($x136 (and $x189 $x165)))
 (let (($x115 (and $x136 $x76)))
 (let (($x42 (and $x115 $x286)))
 (let (($x96 (and $x42 $x298)))
 (let (($x306 (and $x96 $x288)))
 (let (($x345 (and $x306 $x313)))
 (let (($x75 (and $x345 $x34)))
 (let (($x176 (and $x75 $x203)))
 (let (($x338 (and $x176 $x280)))
 (let (($x45 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and (not $x45) $x338)))
 (let (($x182 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x5 (and $x182 $x33)))
 (let (($x337 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x217 (and $x337 $x5)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x335 (and $x94 $x217)))
 (let (($x227 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd ?x87 (_ bv3 32))))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x254 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x35 (or false (or false (and (and true (or $x261 $x254)) (or $x297 $x227))))))
 (let (($x285 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x241 (=> (and $x121 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x118 (and $x241 $x335)))
 (let (($x256 (=> $x118 $x228)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x311 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (bvule ?x311 (_ bv4294967294 32))))
 (let (($x86 (= $x106 true)))
 (let (($x283 (= $x86 true)))
 (let (($x243 (forall ((input.ind-%var1481X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1481X)))
 (=> $x224 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1481X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var1480X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1480X)))
 (= $x224 false)))
 ))
 (let (($x236 (and $x158 $x243)))
 (let (($x275 (= $x236 true)))
 (let (($x251 (forall ((input.ind-%var1475X (_ BitVec 32)) )(let ((?x290 (bvadd (bvmul input.ind-%var1475X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x290))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv2 32))) ?x362)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv3 32))) ?x30)))
 (let ((?x25 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1475X)))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1475X)))
 (=> $x268 (= ?x25 ?x171)))))))))
 ))
 (let (($x326 (forall ((input.ind-%var1474X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var1474X) (bvult input.ind-%var1474X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1474X)))
 (= $x268 $x153))))
 ))
 (let (($x303 (and $x326 $x251)))
 (let (($x229 (= $x303 true)))
 (let (($x247 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1469X)))
 (=> $x224 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1469X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1468X)))
 (= $x224 false)))
 ))
 (let (($x341 (and $x181 $x247)))
 (let (($x299 (= $x341 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x267)))
 (let (($x353 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x301 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x301 true)))
 (let (($x288 (= $x114 true)))
 (let (($x306 (= $x288 true)))
 (let (($x274 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x96 (= $x298 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x209 (bvsub ?x87 ?x47)))
 (let (($x207 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x209) (bvult ?x87 ?x209))))
 (let (($x208 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x44 (ite $x208 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x73 (bvmul (_ bv4 64) ?x159)))
 (let ((?x103 ((_ extract 63 32) ?x73)))
 (let (($x48 (= ?x103 ?x44)))
 (let (($x252 (and $x48 $x207)))
 (let (($x222 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x244 (and $x222 $x252)))
 (let (($x253 (= true $x244)))
 (let (($x99 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (=> $x99 $x253)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x109 (= $x29 true)))
 (let (($x141 (= $x109 true)))
 (let (($x218 (= $x141 true)))
 (let (($x129 (= $x99 true)))
 (let (($x80 (= $x129 true)))
 (let (($x219 (= $x80 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x36)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x130)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (and $x173 $x65)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x143 $x167)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x125 $x187)))
 (let (($x115 (not $x76)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x165 $x136)))
 (let (($x49 (and (not $x166) $x115)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x91 $x174)))
 (let (($x196 (not $x189)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x138 $x89)))
 (let (($x188 (and (not $x105) $x196)))
 (let (($x178 (and (and (and (and (and (and $x188 $x49) $x170) $x28) $x18) $x51) $x79)))
 (let (($x37 (and $x178 $x100)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x175 (or false (or false (and (and true (or $x156 $x197)) (or $x27 $x134))))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x175)))
 (let (($x32 (and $x23 $x37)))
 (let (($x145 (= $x32 true)))
 (let (($x26 (= $x145 true)))
 (let (($x95 (= $x26 true)))
 (let (($x148 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x148 true)))
 (let (($x186 (= $x12 true)))
 (let (($x68 (= $x186 true)))
 (let ((?x185 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x205 (= (_ bv0 2) ?x185)))
 (let (($x59 (= $x205 true)))
 (let (($x151 (= $x59 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x117)))
 (let (($x260 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x260 true)))
 (let (($x46 (= $x22 true)))
 (let (($x122 (= ?x112 input.dst.llvm-%n)))
 (let (($x184 (= $x122 true)))
 (let (($x164 (= $x184 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x9 (and $x142 $x164)))
 (let (($x63 (and $x9 $x46)))
 (let (($x163 (and $x63 $x151)))
 (let (($x21 (and $x163 $x68)))
 (let (($x139 (and $x21 $x95)))
 (let (($x194 (and $x139 $x219)))
 (let (($x84 (and $x194 $x218)))
 (let (($x329 (and $x84 $x42)))
 (let (($x211 (and $x329 $x96)))
 (let (($x317 (and $x211 $x306)))
 (let (($x127 (and $x317 $x345)))
 (let (($x327 (and $x127 $x299)))
 (let (($x343 (and $x327 $x229)))
 (let (($x135 (and $x343 $x275)))
 (let (($x157 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and (not $x157) $x135)))
 (let (($x284 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x284 $x66)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x55 (and $x41 $x111)))
 (let (($x360 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x116 (and $x360 $x55)))
 (let (($x107 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x87 (_ bv3 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x242 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x241 (or false (or false (and (and true (or $x291 $x242)) (or $x255 $x107))))))
 (let (($x94 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x241)))
 (let (($x238 (=> (and $x99 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x241)))
 (let (($x333 (and $x238 $x116)))
 (let (($x154 (=> $x333 $x283)))
 (not $x154))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x311 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (bvule ?x311 (_ bv4294967294 32))))
 (let (($x86 (= $x106 true)))
 (let (($x283 (= $x86 true)))
 (let (($x243 (forall ((input.ind-%var1481X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1481X)))
 (=> $x224 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1481X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var1480X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1480X)))
 (= $x224 false)))
 ))
 (let (($x236 (and $x158 $x243)))
 (let (($x275 (= $x236 true)))
 (let (($x251 (forall ((input.ind-%var1475X (_ BitVec 32)) )(let ((?x290 (bvadd (bvmul input.ind-%var1475X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x290))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv2 32))) ?x362)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv3 32))) ?x30)))
 (let ((?x25 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1475X)))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1475X)))
 (=> $x268 (= ?x25 ?x171)))))))))
 ))
 (let (($x326 (forall ((input.ind-%var1474X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var1474X) (bvult input.ind-%var1474X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1474X)))
 (= $x268 $x153))))
 ))
 (let (($x303 (and $x326 $x251)))
 (let (($x229 (= $x303 true)))
 (let (($x247 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1469X)))
 (=> $x224 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1469X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1468X)))
 (= $x224 false)))
 ))
 (let (($x341 (and $x181 $x247)))
 (let (($x299 (= $x341 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x267)))
 (let (($x353 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x301 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x301 true)))
 (let (($x288 (= $x114 true)))
 (let (($x306 (= $x288 true)))
 (let (($x274 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x96 (= $x298 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x209 (bvsub ?x87 ?x47)))
 (let (($x207 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x209) (bvult ?x87 ?x209))))
 (let (($x208 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x44 (ite $x208 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x73 (bvmul (_ bv4 64) ?x159)))
 (let ((?x103 ((_ extract 63 32) ?x73)))
 (let (($x48 (= ?x103 ?x44)))
 (let (($x252 (and $x48 $x207)))
 (let (($x222 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x244 (and $x222 $x252)))
 (let (($x253 (= true $x244)))
 (let (($x99 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (=> $x99 $x253)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x109 (= $x29 true)))
 (let (($x141 (= $x109 true)))
 (let (($x218 (= $x141 true)))
 (let (($x129 (= $x99 true)))
 (let (($x80 (= $x129 true)))
 (let (($x219 (= $x80 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x36)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x130)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (and $x173 $x65)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x143 $x167)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x125 $x187)))
 (let (($x115 (not $x76)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x165 $x136)))
 (let (($x49 (and (not $x166) $x115)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x91 $x174)))
 (let (($x196 (not $x189)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x138 $x89)))
 (let (($x188 (and (not $x105) $x196)))
 (let (($x178 (and (and (and (and (and (and $x188 $x49) $x170) $x28) $x18) $x51) $x79)))
 (let (($x37 (and $x178 $x100)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x175 (or false (or false (and (and true (or $x156 $x197)) (or $x27 $x134))))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x175)))
 (let (($x32 (and $x23 $x37)))
 (let (($x145 (= $x32 true)))
 (let (($x26 (= $x145 true)))
 (let (($x95 (= $x26 true)))
 (let (($x148 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x148 true)))
 (let (($x186 (= $x12 true)))
 (let (($x68 (= $x186 true)))
 (let ((?x185 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x205 (= (_ bv0 2) ?x185)))
 (let (($x59 (= $x205 true)))
 (let (($x151 (= $x59 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x117)))
 (let (($x260 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x260 true)))
 (let (($x46 (= $x22 true)))
 (let (($x122 (= ?x112 input.dst.llvm-%n)))
 (let (($x184 (= $x122 true)))
 (let (($x164 (= $x184 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x9 (and $x142 $x164)))
 (let (($x63 (and $x9 $x46)))
 (let (($x163 (and $x63 $x151)))
 (let (($x21 (and $x163 $x68)))
 (let (($x139 (and $x21 $x95)))
 (let (($x194 (and $x139 $x219)))
 (let (($x84 (and $x194 $x218)))
 (let (($x329 (and $x84 $x42)))
 (let (($x211 (and $x329 $x96)))
 (let (($x317 (and $x211 $x306)))
 (let (($x127 (and $x317 $x345)))
 (let (($x327 (and $x127 $x299)))
 (let (($x343 (and $x327 $x229)))
 (let (($x135 (and $x343 $x275)))
 (let (($x157 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and (not $x157) $x135)))
 (let (($x284 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x284 $x66)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x55 (and $x41 $x111)))
 (let (($x360 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x116 (and $x360 $x55)))
 (let (($x107 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x87 (_ bv3 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x242 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x241 (or false (or false (and (and true (or $x291 $x242)) (or $x255 $x107))))))
 (let (($x94 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x241)))
 (let (($x238 (=> (and $x99 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x241)))
 (let (($x333 (and $x238 $x116)))
 (let (($x154 (=> $x333 $x283)))
 (not $x154))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x203 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (bvsge ?x203 (_ bv0 32))))
 (let (($x191 (= $x70 true)))
 (let (($x319 (= $x191 true)))
 (let (($x289 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1499X)))
 (=> $x83 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1499X) (_ bv0 32)))))
 ))
 (let (($x33 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1498X)))
 (= $x83 false)))
 ))
 (let (($x19 (and $x33 $x289)))
 (let (($x82 (= $x19 true)))
 (let (($x338 (forall ((input.ind-%var1493X (_ BitVec 32)) )(let ((?x132 (bvadd (bvmul input.ind-%var1493X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x132))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x132 (_ bv2 32))) ?x58)))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x132 (_ bv3 32))) ?x248)))
 (let ((?x158 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1493X)))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1493X)))
 (=> $x300 (= ?x158 ?x324)))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1492X (_ BitVec 32)) )(let (($x225 (and (bvule (_ bv0 32) input.ind-%var1492X) (bvult input.ind-%var1492X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1492X)))
 (= $x300 $x225))))
 ))
 (let (($x228 (and $x251 $x338)))
 (let (($x256 (= $x228 true)))
 (let (($x323 (forall ((input.ind-%var1487X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1487X)))
 (=> $x83 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1487X) (_ bv0 32)))))
 ))
 (let (($x341 (forall ((input.ind-%var1486X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1486X)))
 (= $x83 false)))
 ))
 (let (($x263 (and $x341 $x323)))
 (let (($x290 (= $x263 true)))
 (let ((?x215 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x353 (bvneg ?x215)))
 (let (($x313 (= ?x353 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x345 (= $x313 true)))
 (let (($x127 (= $x345 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x288 (= $x114 true)))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x351 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (= $x351 true)))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x209 (bvsub ?x87 ?x47)))
 (let (($x252 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x209) (bvult ?x87 ?x209))))
 (let (($x44 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x48 (ite $x44 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x73 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x103 (bvmul (_ bv4 64) ?x73)))
 (let ((?x208 ((_ extract 63 32) ?x103)))
 (let (($x226 (= ?x208 ?x48)))
 (let (($x244 (and $x226 $x252)))
 (let (($x43 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x253 (and $x43 $x244)))
 (let (($x276 (= true $x253)))
 (let (($x16 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x212 (=> $x16 $x276)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x109 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x109 true)))
 (let (($x218 (= $x141 true)))
 (let (($x84 (= $x218 true)))
 (let (($x80 (= $x16 true)))
 (let (($x219 (= $x80 true)))
 (let (($x194 (= $x219 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x51)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x53)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (and $x206 $x173)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x28 $x140)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x125 $x187)))
 (let (($x115 (not $x76)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x136 $x166)))
 (let (($x150 (and (not $x101) $x115)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x91 $x174)))
 (let (($x196 (not $x189)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x172 $x20)))
 (let (($x165 (and (not $x200) $x196)))
 (let (($x37 (and (and (and (and (and (and $x165 $x150) $x170) $x104) $x65) $x18) $x198)))
 (let (($x32 (and $x37 $x56)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x197 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x197)))
 (let (($x138 (or false (or false (and (and true (or $x15 $x161)) (or $x6 $x78))))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x145 (and $x105 $x32)))
 (let (($x26 (= $x145 true)))
 (let (($x95 (= $x26 true)))
 (let (($x139 (= $x95 true)))
 (let (($x148 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x148 true)))
 (let (($x186 (= $x12 true)))
 (let (($x68 (= $x186 true)))
 (let ((?x185 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x205 (= (_ bv0 2) ?x185)))
 (let (($x59 (= $x205 true)))
 (let (($x151 (= $x59 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x117)))
 (let (($x260 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x260 true)))
 (let (($x46 (= $x22 true)))
 (let (($x122 (= ?x112 input.dst.llvm-%n)))
 (let (($x184 (= $x122 true)))
 (let (($x164 (= $x184 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x9 (and $x142 $x164)))
 (let (($x63 (and $x9 $x46)))
 (let (($x163 (and $x63 $x151)))
 (let (($x21 (and $x163 $x68)))
 (let (($x129 (and $x21 $x139)))
 (let (($x29 (and $x129 $x194)))
 (let (($x245 (and $x29 $x84)))
 (let (($x274 (and $x245 $x329)))
 (let (($x301 (and $x274 $x211)))
 (let (($x267 (and $x301 $x317)))
 (let (($x177 (and $x267 $x127)))
 (let (($x39 (and $x177 $x290)))
 (let (($x64 (and $x39 $x256)))
 (let (($x325 (and $x64 $x82)))
 (let (($x71 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (and (not $x71) $x325)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (and $x45 $x57)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x314 (and $x144 $x75)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x128 $x314)))
 (let (($x35 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x242 (bvadd ?x87 (_ bv3 32))))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x242)))
 (let (($x297 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x242)))
 (let (($x238 (or false (or false (and (and true (or $x279 $x297)) (or $x304 $x35))))))
 (let (($x360 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x238)))
 (let (($x331 (=> (and $x16 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x238)))
 (let (($x195 (and $x331 $x126)))
 (let (($x123 (=> $x195 $x319)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x203 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (bvsge ?x203 (_ bv0 32))))
 (let (($x191 (= $x70 true)))
 (let (($x319 (= $x191 true)))
 (let (($x289 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1499X)))
 (=> $x83 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1499X) (_ bv0 32)))))
 ))
 (let (($x33 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1498X)))
 (= $x83 false)))
 ))
 (let (($x19 (and $x33 $x289)))
 (let (($x82 (= $x19 true)))
 (let (($x338 (forall ((input.ind-%var1493X (_ BitVec 32)) )(let ((?x132 (bvadd (bvmul input.ind-%var1493X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x132))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x132 (_ bv2 32))) ?x58)))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x132 (_ bv3 32))) ?x248)))
 (let ((?x158 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1493X)))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1493X)))
 (=> $x300 (= ?x158 ?x324)))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1492X (_ BitVec 32)) )(let (($x225 (and (bvule (_ bv0 32) input.ind-%var1492X) (bvult input.ind-%var1492X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1492X)))
 (= $x300 $x225))))
 ))
 (let (($x228 (and $x251 $x338)))
 (let (($x256 (= $x228 true)))
 (let (($x323 (forall ((input.ind-%var1487X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1487X)))
 (=> $x83 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1487X) (_ bv0 32)))))
 ))
 (let (($x341 (forall ((input.ind-%var1486X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1486X)))
 (= $x83 false)))
 ))
 (let (($x263 (and $x341 $x323)))
 (let (($x290 (= $x263 true)))
 (let ((?x215 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x353 (bvneg ?x215)))
 (let (($x313 (= ?x353 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x345 (= $x313 true)))
 (let (($x127 (= $x345 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x288 (= $x114 true)))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x351 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (= $x351 true)))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x209 (bvsub ?x87 ?x47)))
 (let (($x252 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x209) (bvult ?x87 ?x209))))
 (let (($x44 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x48 (ite $x44 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x73 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x103 (bvmul (_ bv4 64) ?x73)))
 (let ((?x208 ((_ extract 63 32) ?x103)))
 (let (($x226 (= ?x208 ?x48)))
 (let (($x244 (and $x226 $x252)))
 (let (($x43 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x253 (and $x43 $x244)))
 (let (($x276 (= true $x253)))
 (let (($x16 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x212 (=> $x16 $x276)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x109 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x109 true)))
 (let (($x218 (= $x141 true)))
 (let (($x84 (= $x218 true)))
 (let (($x80 (= $x16 true)))
 (let (($x219 (= $x80 true)))
 (let (($x194 (= $x219 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x51)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x53)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (and $x206 $x173)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x28 $x140)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x125 $x187)))
 (let (($x115 (not $x76)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x136 $x166)))
 (let (($x150 (and (not $x101) $x115)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x91 $x174)))
 (let (($x196 (not $x189)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x172 $x20)))
 (let (($x165 (and (not $x200) $x196)))
 (let (($x37 (and (and (and (and (and (and $x165 $x150) $x170) $x104) $x65) $x18) $x198)))
 (let (($x32 (and $x37 $x56)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x197 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x197)))
 (let (($x138 (or false (or false (and (and true (or $x15 $x161)) (or $x6 $x78))))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x145 (and $x105 $x32)))
 (let (($x26 (= $x145 true)))
 (let (($x95 (= $x26 true)))
 (let (($x139 (= $x95 true)))
 (let (($x148 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x148 true)))
 (let (($x186 (= $x12 true)))
 (let (($x68 (= $x186 true)))
 (let ((?x185 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x205 (= (_ bv0 2) ?x185)))
 (let (($x59 (= $x205 true)))
 (let (($x151 (= $x59 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x117)))
 (let (($x260 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x260 true)))
 (let (($x46 (= $x22 true)))
 (let (($x122 (= ?x112 input.dst.llvm-%n)))
 (let (($x184 (= $x122 true)))
 (let (($x164 (= $x184 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x9 (and $x142 $x164)))
 (let (($x63 (and $x9 $x46)))
 (let (($x163 (and $x63 $x151)))
 (let (($x21 (and $x163 $x68)))
 (let (($x129 (and $x21 $x139)))
 (let (($x29 (and $x129 $x194)))
 (let (($x245 (and $x29 $x84)))
 (let (($x274 (and $x245 $x329)))
 (let (($x301 (and $x274 $x211)))
 (let (($x267 (and $x301 $x317)))
 (let (($x177 (and $x267 $x127)))
 (let (($x39 (and $x177 $x290)))
 (let (($x64 (and $x39 $x256)))
 (let (($x325 (and $x64 $x82)))
 (let (($x71 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (and (not $x71) $x325)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (and $x45 $x57)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x314 (and $x144 $x75)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x128 $x314)))
 (let (($x35 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x242 (bvadd ?x87 (_ bv3 32))))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x242)))
 (let (($x297 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x242)))
 (let (($x238 (or false (or false (and (and true (or $x279 $x297)) (or $x304 $x35))))))
 (let (($x360 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x238)))
 (let (($x331 (=> (and $x16 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x238)))
 (let (($x195 (and $x331 $x126)))
 (let (($x123 (=> $x195 $x319)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x137 (bvule ?x229 input.dst.llvm-%n)))
 (let (($x220 (= $x137 true)))
 (let (($x179 (= $x220 true)))
 (let (($x153 (forall ((input.ind-%var1517X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1517X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1517X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1516X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1516X)))
 (= $x213 false)))
 ))
 (let (($x118 (and $x66 $x153)))
 (let (($x249 (= $x118 true)))
 (let (($x135 (forall ((input.ind-%var1511X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1511X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x357 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x268)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x357)))
 (let ((?x33 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1511X)))
 (let (($x10 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1511X)))
 (=> $x10 (= ?x33 ?x224)))))))))
 ))
 (let (($x338 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) input.ind-%var1510X) (bvult input.ind-%var1510X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x10 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1510X)))
 (= $x10 $x328))))
 ))
 (let (($x283 (and $x338 $x135)))
 (let (($x154 (= $x283 true)))
 (let (($x236 (forall ((input.ind-%var1505X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1505X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1505X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1504X)))
 (= $x213 false)))
 ))
 (let (($x74 (and $x263 $x236)))
 (let (($x132 (= $x74 true)))
 (let ((?x353 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x313 (bvneg ?x353)))
 (let (($x345 (= ?x313 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x345 true)))
 (let (($x177 (= $x127 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x117)))
 (let (($x306 (= ?x112 input.dst.llvm-%n)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x96 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x44 (bvsub ?x87 ?x47)))
 (let (($x209 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x44) (bvult ?x87 ?x44))))
 (let (($x73 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x103 (ite $x73 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x222 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x43 (bvmul (_ bv4 64) ?x222)))
 (let ((?x159 ((_ extract 63 32) ?x43)))
 (let (($x208 (= ?x159 ?x103)))
 (let (($x246 (and $x208 $x209)))
 (let (($x245 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x207 (and $x245 $x246)))
 (let (($x252 (= true $x207)))
 (let (($x160 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (=> $x160 $x252)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x194 (= $x219 true)))
 (let (($x29 (= $x194 true)))
 (let (($x109 (= $x29 true)))
 (let (($x95 (= $x160 true)))
 (let (($x139 (= $x95 true)))
 (let (($x129 (= $x139 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x140)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x143)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x170 $x60)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x180 $x104)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x136 $x166)))
 (let (($x49 (not $x101)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x189 $x196)))
 (let (($x187 (and (not $x165) $x49)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x172 $x20)))
 (let (($x188 (not $x200)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x186 $x68)))
 (let (($x174 (and (not $x105) $x188)))
 (let (($x198 (and (and (and (and (and (and $x174 $x187) $x115) $x130) $x178) $x206) $x173)))
 (let (($x37 (and $x198 $x65)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x175 (or false (or false (and (and true (or $x89 $x197)) (or $x27 $x134))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x175)))
 (let (($x51 (and $x138 $x37)))
 (let (($x56 (= $x51 true)))
 (let (($x32 (= $x56 true)))
 (let (($x145 (= $x32 true)))
 (let (($x205 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x205 true)))
 (let (($x151 (= $x59 true)))
 (let (($x163 (= $x151 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x46 (= (_ bv0 2) ?x22)))
 (let (($x63 (= $x46 true)))
 (let (($x40 (= $x63 true)))
 (let (($x122 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (= $x122 true)))
 (let (($x164 (= $x184 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x9 (and $x142 $x164)))
 (let (($x185 (and $x9 $x40)))
 (let (($x148 (and $x185 $x163)))
 (let (($x26 (and $x148 $x145)))
 (let (($x80 (and $x26 $x129)))
 (let (($x141 (and $x80 $x109)))
 (let (($x286 (and $x141 $x212)))
 (let (($x298 (and $x286 $x351)))
 (let (($x288 (and $x298 $x114)))
 (let (($x215 (and $x288 $x267)))
 (let (($x181 (and $x215 $x177)))
 (let (($x8 (and $x181 $x132)))
 (let (($x311 (and $x8 $x154)))
 (let (($x352 (and $x311 $x249)))
 (let (($x330 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x362 (and (not $x330) $x352)))
 (let (($x157 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x157 $x362)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x182 $x327)))
 (let (($x337 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x124 (and $x337 $x292)))
 (let (($x241 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x297 (bvadd ?x87 (_ bv3 32))))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x297)))
 (let (($x255 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x297)))
 (let (($x331 (or false (or false (and (and true (or $x216 $x255)) (or $x285 $x241))))))
 (let (($x128 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x331)))
 (let (($x295 (=> (and $x160 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x331)))
 (let (($x217 (and $x295 $x124)))
 (let (($x308 (=> $x217 $x179)))
 (not $x308))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x137 (bvule ?x229 input.dst.llvm-%n)))
 (let (($x220 (= $x137 true)))
 (let (($x179 (= $x220 true)))
 (let (($x153 (forall ((input.ind-%var1517X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1517X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1517X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1516X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1516X)))
 (= $x213 false)))
 ))
 (let (($x118 (and $x66 $x153)))
 (let (($x249 (= $x118 true)))
 (let (($x135 (forall ((input.ind-%var1511X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1511X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x357 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x268)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x357)))
 (let ((?x33 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1511X)))
 (let (($x10 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1511X)))
 (=> $x10 (= ?x33 ?x224)))))))))
 ))
 (let (($x338 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) input.ind-%var1510X) (bvult input.ind-%var1510X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x10 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1510X)))
 (= $x10 $x328))))
 ))
 (let (($x283 (and $x338 $x135)))
 (let (($x154 (= $x283 true)))
 (let (($x236 (forall ((input.ind-%var1505X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1505X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1505X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1504X)))
 (= $x213 false)))
 ))
 (let (($x74 (and $x263 $x236)))
 (let (($x132 (= $x74 true)))
 (let ((?x353 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x313 (bvneg ?x353)))
 (let (($x345 (= ?x313 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x345 true)))
 (let (($x177 (= $x127 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x117)))
 (let (($x306 (= ?x112 input.dst.llvm-%n)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x96 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x44 (bvsub ?x87 ?x47)))
 (let (($x209 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x44) (bvult ?x87 ?x44))))
 (let (($x73 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x103 (ite $x73 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x222 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x43 (bvmul (_ bv4 64) ?x222)))
 (let ((?x159 ((_ extract 63 32) ?x43)))
 (let (($x208 (= ?x159 ?x103)))
 (let (($x246 (and $x208 $x209)))
 (let (($x245 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x207 (and $x245 $x246)))
 (let (($x252 (= true $x207)))
 (let (($x160 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (=> $x160 $x252)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x194 (= $x219 true)))
 (let (($x29 (= $x194 true)))
 (let (($x109 (= $x29 true)))
 (let (($x95 (= $x160 true)))
 (let (($x139 (= $x95 true)))
 (let (($x129 (= $x139 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x140)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x143)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x170 $x60)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x180 $x104)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x136 $x166)))
 (let (($x49 (not $x101)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x189 $x196)))
 (let (($x187 (and (not $x165) $x49)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x172 $x20)))
 (let (($x188 (not $x200)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x186 $x68)))
 (let (($x174 (and (not $x105) $x188)))
 (let (($x198 (and (and (and (and (and (and $x174 $x187) $x115) $x130) $x178) $x206) $x173)))
 (let (($x37 (and $x198 $x65)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x175 (or false (or false (and (and true (or $x89 $x197)) (or $x27 $x134))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x175)))
 (let (($x51 (and $x138 $x37)))
 (let (($x56 (= $x51 true)))
 (let (($x32 (= $x56 true)))
 (let (($x145 (= $x32 true)))
 (let (($x205 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x205 true)))
 (let (($x151 (= $x59 true)))
 (let (($x163 (= $x151 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x46 (= (_ bv0 2) ?x22)))
 (let (($x63 (= $x46 true)))
 (let (($x40 (= $x63 true)))
 (let (($x122 (= ?x112 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (= $x122 true)))
 (let (($x164 (= $x184 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x169 true)))
 (let (($x38 (= $x61 true)))
 (let (($x142 (= $x38 true)))
 (let (($x9 (and $x142 $x164)))
 (let (($x185 (and $x9 $x40)))
 (let (($x148 (and $x185 $x163)))
 (let (($x26 (and $x148 $x145)))
 (let (($x80 (and $x26 $x129)))
 (let (($x141 (and $x80 $x109)))
 (let (($x286 (and $x141 $x212)))
 (let (($x298 (and $x286 $x351)))
 (let (($x288 (and $x298 $x114)))
 (let (($x215 (and $x288 $x267)))
 (let (($x181 (and $x215 $x177)))
 (let (($x8 (and $x181 $x132)))
 (let (($x311 (and $x8 $x154)))
 (let (($x352 (and $x311 $x249)))
 (let (($x330 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x362 (and (not $x330) $x352)))
 (let (($x157 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x157 $x362)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x182 $x327)))
 (let (($x337 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x124 (and $x337 $x292)))
 (let (($x241 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x297 (bvadd ?x87 (_ bv3 32))))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x297)))
 (let (($x255 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x297)))
 (let (($x331 (or false (or false (and (and true (or $x216 $x255)) (or $x285 $x241))))))
 (let (($x128 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x331)))
 (let (($x295 (=> (and $x160 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x331)))
 (let (($x217 (and $x295 $x124)))
 (let (($x308 (=> $x217 $x179)))
 (not $x308))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x271 (forall ((input.ind-%var1543X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var1543X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x255 (bvadd ?x87 (_ bv3 32))))
 (let ((?x193 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x240 (store ?x193 (bvadd ?x87 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x312 (store ?x240 (bvadd ?x87 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x239 (store ?x312 ?x255 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x339 (concat (select ?x239 (bvadd ?x289 (_ bv2 32))) (concat (select ?x239 (bvadd ?x289 (_ bv1 32))) (select ?x239 ?x289)))))
 (let ((?x66 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1543X)))
 (let (($x232 (= input.ind-%var1543X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x315 (= (ite $x232 input.spec-%var-i-0.L3%6%bbentry ?x66) (concat (select ?x239 (bvadd ?x289 (_ bv3 32))) ?x339))))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1543X)))
 (let (($x316 (or $x303 $x232)))
 (=> $x316 $x315))))))))))))))))
 ))
 (let (($x93 (forall ((input.ind-%var1542X (_ BitVec 32)) )(let (($x224 (bvule (_ bv0 32) input.ind-%var1542X)))
 (let (($x17 (and $x224 (bvult input.ind-%var1542X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x232 (= input.ind-%var1542X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1542X)))
 (let (($x316 (or $x303 $x232)))
 (= $x316 $x17)))))))
 ))
 (let (($x250 (and $x93 $x271)))
 (let (($x256 (= true true)))
 (let (($x259 (and $x256 $x250)))
 (let (($x307 (= $x259 true)))
 (let (($x225 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1535X)))
 (=> $x171 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1535X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var1534X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1534X)))
 (= $x171 false)))
 ))
 (let (($x333 (and $x57 $x225)))
 (let (($x120 (= $x333 true)))
 (let (($x325 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var1529X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x289))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv2 32))) ?x300)))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv3 32))) ?x233)))
 (let ((?x66 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1529X)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1529X)))
 (=> $x303 (= ?x66 ?x83)))))))))
 ))
 (let (($x135 (forall ((input.ind-%var1528X (_ BitVec 32)) )(let (($x224 (bvule (_ bv0 32) input.ind-%var1528X)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1528X)))
 (= $x303 (and $x224 (bvult input.ind-%var1528X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x319 (and $x135 $x325)))
 (let (($x123 (= $x319 true)))
 (let (($x19 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1523X)))
 (=> $x171 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1523X) (_ bv0 32)))))
 ))
 (let (($x74 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1522X)))
 (= $x171 false)))
 ))
 (let (($x258 (and $x74 $x19)))
 (let (($x243 (= $x258 true)))
 (let ((?x313 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x345 (bvneg ?x313)))
 (let (($x127 (= ?x345 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x127 true)))
 (let (($x181 (= $x177 true)))
 (let ((?x306 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x317 (= (_ bv0 2) ?x306)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x252 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x52 (= $x226 true)))
 (let (($x209 (= $x52 true)))
 (let (($x246 (= $x209 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x141 (bvsub ?x87 ?x47)))
 (let (($x183 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x141) (bvult ?x87 ?x141))))
 (let (($x194 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x29 (ite $x194 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x80 (bvmul (_ bv4 64) ?x129)))
 (let ((?x219 ((_ extract 63 32) ?x80)))
 (let (($x109 (= ?x219 ?x29)))
 (let (($x222 (and $x109 $x183)))
 (let (($x95 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x43 (and $x95 $x222)))
 (let (($x159 (= true $x43)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x73 (=> $x131 $x159)))
 (let (($x103 (= $x73 true)))
 (let (($x208 (= $x103 true)))
 (let (($x48 (= $x208 true)))
 (let (($x65 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x65 true)))
 (let (($x51 (= $x37 true)))
 (let (($x56 (= $x51 true)))
 (let (($x53 (= $x131 true)))
 (let (($x143 (= $x53 true)))
 (let (($x173 (= $x143 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x115)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x36)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x125)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (and $x165 $x136)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x196 $x166)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x186 $x68)))
 (let (($x91 (not $x105)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x149 $x175)))
 (let (($x20 (and (not $x138) $x91)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x15 $x161)))
 (let (($x134 (not $x27)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (and $x9 $x260)))
 (let (($x78 (and (not $x197) $x134)))
 (let (($x79 (and (and (and (and (and (and $x78 $x20) $x188) $x189) $x101) $x187) $x76)))
 (let (($x60 (and $x79 $x167)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x23 (or false (or false (and (and true (or $x40 $x185)) (or $x151 $x163))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x104 (and $x89 $x60)))
 (let (($x178 (= $x104 true)))
 (let (($x100 (= $x178 true)))
 (let (($x28 (= $x100 true)))
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x169)))
 (let (($x117 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x117 true)))
 (let (($x122 (= $x112 true)))
 (let (($x38 (= ?x61 input.dst.llvm-%n)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x184 (and $x147 $x122)))
 (let (($x206 (and $x184 $x28)))
 (let (($x198 (and $x206 $x173)))
 (let (($x32 (and $x198 $x56)))
 (let (($x44 (and $x32 $x48)))
 (let (($x207 (and $x44 $x246)))
 (let (($x212 (and $x207 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x114 (and $x351 $x301)))
 (let (($x353 (and $x114 $x215)))
 (let (($x341 (and $x353 $x181)))
 (let (($x302 (and $x341 $x243)))
 (let (($x203 (and $x302 $x123)))
 (let (($x106 (and $x203 $x120)))
 (let (($x5 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and (not $x5) $x106)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and $x71 $x58)))
 (let (($x284 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x284 $x39)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x97 (and $x41 $x152)))
 (let (($x238 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd ?x87 (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x304 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x295 (or false (or false (and (and true (or $x227 $x304)) (or $x94 $x238))))))
 (let (($x337 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x295)))
 (let (($x254 (=> (and $x131 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x295)))
 (let (($x55 (and $x254 $x97)))
 (let (($x110 (=> $x55 $x307)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x271 (forall ((input.ind-%var1543X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var1543X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x255 (bvadd ?x87 (_ bv3 32))))
 (let ((?x193 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x240 (store ?x193 (bvadd ?x87 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x312 (store ?x240 (bvadd ?x87 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x239 (store ?x312 ?x255 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x339 (concat (select ?x239 (bvadd ?x289 (_ bv2 32))) (concat (select ?x239 (bvadd ?x289 (_ bv1 32))) (select ?x239 ?x289)))))
 (let ((?x66 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1543X)))
 (let (($x232 (= input.ind-%var1543X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x315 (= (ite $x232 input.spec-%var-i-0.L3%6%bbentry ?x66) (concat (select ?x239 (bvadd ?x289 (_ bv3 32))) ?x339))))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1543X)))
 (let (($x316 (or $x303 $x232)))
 (=> $x316 $x315))))))))))))))))
 ))
 (let (($x93 (forall ((input.ind-%var1542X (_ BitVec 32)) )(let (($x224 (bvule (_ bv0 32) input.ind-%var1542X)))
 (let (($x17 (and $x224 (bvult input.ind-%var1542X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x232 (= input.ind-%var1542X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1542X)))
 (let (($x316 (or $x303 $x232)))
 (= $x316 $x17)))))))
 ))
 (let (($x250 (and $x93 $x271)))
 (let (($x256 (= true true)))
 (let (($x259 (and $x256 $x250)))
 (let (($x307 (= $x259 true)))
 (let (($x225 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1535X)))
 (=> $x171 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1535X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var1534X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1534X)))
 (= $x171 false)))
 ))
 (let (($x333 (and $x57 $x225)))
 (let (($x120 (= $x333 true)))
 (let (($x325 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var1529X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x289))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv2 32))) ?x300)))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv3 32))) ?x233)))
 (let ((?x66 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1529X)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1529X)))
 (=> $x303 (= ?x66 ?x83)))))))))
 ))
 (let (($x135 (forall ((input.ind-%var1528X (_ BitVec 32)) )(let (($x224 (bvule (_ bv0 32) input.ind-%var1528X)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1528X)))
 (= $x303 (and $x224 (bvult input.ind-%var1528X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x319 (and $x135 $x325)))
 (let (($x123 (= $x319 true)))
 (let (($x19 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1523X)))
 (=> $x171 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1523X) (_ bv0 32)))))
 ))
 (let (($x74 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1522X)))
 (= $x171 false)))
 ))
 (let (($x258 (and $x74 $x19)))
 (let (($x243 (= $x258 true)))
 (let ((?x313 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x345 (bvneg ?x313)))
 (let (($x127 (= ?x345 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x127 true)))
 (let (($x181 (= $x177 true)))
 (let ((?x306 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x317 (= (_ bv0 2) ?x306)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x252 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x52 (= $x226 true)))
 (let (($x209 (= $x52 true)))
 (let (($x246 (= $x209 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x47)))
 (let ((?x141 (bvsub ?x87 ?x47)))
 (let (($x183 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x87 ?x141) (bvult ?x87 ?x141))))
 (let (($x194 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x29 (ite $x194 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x80 (bvmul (_ bv4 64) ?x129)))
 (let ((?x219 ((_ extract 63 32) ?x80)))
 (let (($x109 (= ?x219 ?x29)))
 (let (($x222 (and $x109 $x183)))
 (let (($x95 (= (bvand ?x87 (_ bv4294967292 32)) ?x87)))
 (let (($x43 (and $x95 $x222)))
 (let (($x159 (= true $x43)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x73 (=> $x131 $x159)))
 (let (($x103 (= $x73 true)))
 (let (($x208 (= $x103 true)))
 (let (($x48 (= $x208 true)))
 (let (($x65 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x65 true)))
 (let (($x51 (= $x37 true)))
 (let (($x56 (= $x51 true)))
 (let (($x53 (= $x131 true)))
 (let (($x143 (= $x53 true)))
 (let (($x173 (= $x143 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x115)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x36)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x125)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (and $x165 $x136)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x196 $x166)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x186 $x68)))
 (let (($x91 (not $x105)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x149 $x175)))
 (let (($x20 (and (not $x138) $x91)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x15 $x161)))
 (let (($x134 (not $x27)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (and $x9 $x260)))
 (let (($x78 (and (not $x197) $x134)))
 (let (($x79 (and (and (and (and (and (and $x78 $x20) $x188) $x189) $x101) $x187) $x76)))
 (let (($x60 (and $x79 $x167)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x23 (or false (or false (and (and true (or $x40 $x185)) (or $x151 $x163))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x104 (and $x89 $x60)))
 (let (($x178 (= $x104 true)))
 (let (($x100 (= $x178 true)))
 (let (($x28 (= $x100 true)))
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x169)))
 (let (($x117 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x117 true)))
 (let (($x122 (= $x112 true)))
 (let (($x38 (= ?x61 input.dst.llvm-%n)))
 (let (($x142 (= $x38 true)))
 (let (($x147 (= $x142 true)))
 (let (($x184 (and $x147 $x122)))
 (let (($x206 (and $x184 $x28)))
 (let (($x198 (and $x206 $x173)))
 (let (($x32 (and $x198 $x56)))
 (let (($x44 (and $x32 $x48)))
 (let (($x207 (and $x44 $x246)))
 (let (($x212 (and $x207 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x114 (and $x351 $x301)))
 (let (($x353 (and $x114 $x215)))
 (let (($x341 (and $x353 $x181)))
 (let (($x302 (and $x341 $x243)))
 (let (($x203 (and $x302 $x123)))
 (let (($x106 (and $x203 $x120)))
 (let (($x5 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and (not $x5) $x106)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and $x71 $x58)))
 (let (($x284 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x284 $x39)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x97 (and $x41 $x152)))
 (let (($x238 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd ?x87 (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x304 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x295 (or false (or false (and (and true (or $x227 $x304)) (or $x94 $x238))))))
 (let (($x337 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x295)))
 (let (($x254 (=> (and $x131 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x295)))
 (let (($x55 (and $x254 $x97)))
 (let (($x110 (=> $x55 $x307)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x153 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (not $x153)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x131 $x251)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x37 (bvsub ?x278 ?x87)))
 (let (($x145 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x37) (bvult ?x278 ?x37))))
 (let (($x173 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x140 (ite $x173 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x206 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x206)))
 (let ((?x143 ((_ extract 63 32) ?x53)))
 (let (($x65 (= ?x143 ?x140)))
 (let (($x26 (and $x65 $x145)))
 (let (($x100 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x95 (and $x100 $x26)))
 (let (($x139 (= true $x95)))
 (let (($x129 (=> $x131 $x139)))
 (let (($x126 (=> (and $x129 $x131) $x251)))
 (let (($x132 (= $x126 true)))
 (let (($x10 (= $x132 true)))
 (let (($x259 (forall ((input.ind-%var1561X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1561X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1561X) (_ bv0 32)))))
 ))
 (let (($x339 (forall ((input.ind-%var1560X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1560X)))
 (= $x263 false)))
 ))
 (let (($x307 (and $x339 $x259)))
 (let (($x110 (= $x307 true)))
 (let (($x361 (forall ((input.ind-%var1555X (_ BitVec 32)) )(let ((?x17 (bvadd (bvmul input.ind-%var1555X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x17))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv2 32))) ?x92)))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv3 32))) ?x287)))
 (let ((?x325 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1555X)))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1555X)))
 (=> $x289 (= ?x325 ?x77)))))))))
 ))
 (let (($x233 (forall ((input.ind-%var1554X (_ BitVec 32)) )(let (($x326 (and (bvule (_ bv0 32) input.ind-%var1554X) (bvult input.ind-%var1554X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1554X)))
 (= $x289 $x326))))
 ))
 (let (($x239 (and $x233 $x361)))
 (let (($x133 (= $x239 true)))
 (let (($x162 (forall ((input.ind-%var1549X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1549X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1549X) (_ bv0 32)))))
 ))
 (let (($x324 (forall ((input.ind-%var1548X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1548X)))
 (= $x263 false)))
 ))
 (let (($x275 (and $x324 $x162)))
 (let (($x135 (= $x275 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x267)))
 (let (($x353 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let ((?x274 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x114 (= ?x351 input.dst.llvm-%n)))
 (let (($x288 (= $x114 true)))
 (let (($x306 (= $x288 true)))
 (let (($x298 (= ?x351 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let ((?x276 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x212 (= (_ bv0 2) ?x276)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x246 (= $x209 true)))
 (let (($x207 (= $x246 true)))
 (let (($x252 (= $x207 true)))
 (let (($x208 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x48 (= $x208 true)))
 (let (($x44 (= $x48 true)))
 (let (($x226 (= $x44 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (= $x222 true)))
 (let (($x159 (= $x43 true)))
 (let (($x73 (= $x159 true)))
 (let (($x218 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x218 true)))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x80 (= $x129 true)))
 (let (($x219 (= $x80 true)))
 (let (($x194 (= $x219 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x79 (= $x76 true)))
 (let (($x115 (= $x79 true)))
 (let (($x167 (= $x115 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x174)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x188)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x68)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x186 $x105)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x172 $x91)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x197 $x6)))
 (let (($x161 (not $x15)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x260 (and $x89 $x9)))
 (let (($x134 (and (not $x260) $x161)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x151 $x163)))
 (let (($x21 (not $x148)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x62 $x169)))
 (let (($x23 (and (not $x59) $x21)))
 (let (($x166 (and (and (and (and (and (and $x23 $x134) $x149) $x138) $x20) $x200) $x130)))
 (let (($x101 (and $x166 $x189)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x40 (or false (or false (and (and true (or $x147 $x117)) (or $x184 $x22))))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x40)))
 (let (($x180 (and $x205 $x101)))
 (let (($x49 (= $x180 true)))
 (let (($x187 (= $x49 true)))
 (let (($x170 (= $x187 true)))
 (let (($x60 (and $x170 $x167)))
 (let (($x29 (and $x60 $x194)))
 (let (($x183 (and $x29 $x245)))
 (let (($x103 (and $x183 $x73)))
 (let (($x52 (and $x103 $x226)))
 (let (($x244 (and $x52 $x252)))
 (let (($x329 (and $x244 $x42)))
 (let (($x301 (and $x329 $x211)))
 (let (($x317 (and $x301 $x306)))
 (let (($x127 (and $x317 $x345)))
 (let (($x66 (and $x127 $x135)))
 (let (($x281 (and $x66 $x133)))
 (let (($x81 (and $x281 $x110)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (and $x5 $x81)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x121 (and $x157 $x85)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x164 (and $x182 $x121)))
 (let (($x128 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd ?x278 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x35 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x261 (or false (or false (and (and true (or $x285 $x35)) (or $x331 $x128))))))
 (let (($x144 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x261)))
 (let (($x291 (=> (and $x131 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x261)))
 (let (($x343 (and $x291 $x164)))
 (let (($x283 (=> $x343 $x10)))
 (not $x283))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x153 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (not $x153)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x131 $x251)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x37 (bvsub ?x278 ?x87)))
 (let (($x145 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x37) (bvult ?x278 ?x37))))
 (let (($x173 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x140 (ite $x173 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x206 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x206)))
 (let ((?x143 ((_ extract 63 32) ?x53)))
 (let (($x65 (= ?x143 ?x140)))
 (let (($x26 (and $x65 $x145)))
 (let (($x100 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x95 (and $x100 $x26)))
 (let (($x139 (= true $x95)))
 (let (($x129 (=> $x131 $x139)))
 (let (($x126 (=> (and $x129 $x131) $x251)))
 (let (($x132 (= $x126 true)))
 (let (($x10 (= $x132 true)))
 (let (($x259 (forall ((input.ind-%var1561X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1561X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1561X) (_ bv0 32)))))
 ))
 (let (($x339 (forall ((input.ind-%var1560X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1560X)))
 (= $x263 false)))
 ))
 (let (($x307 (and $x339 $x259)))
 (let (($x110 (= $x307 true)))
 (let (($x361 (forall ((input.ind-%var1555X (_ BitVec 32)) )(let ((?x17 (bvadd (bvmul input.ind-%var1555X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x17))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv2 32))) ?x92)))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv3 32))) ?x287)))
 (let ((?x325 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1555X)))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1555X)))
 (=> $x289 (= ?x325 ?x77)))))))))
 ))
 (let (($x233 (forall ((input.ind-%var1554X (_ BitVec 32)) )(let (($x326 (and (bvule (_ bv0 32) input.ind-%var1554X) (bvult input.ind-%var1554X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1554X)))
 (= $x289 $x326))))
 ))
 (let (($x239 (and $x233 $x361)))
 (let (($x133 (= $x239 true)))
 (let (($x162 (forall ((input.ind-%var1549X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1549X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1549X) (_ bv0 32)))))
 ))
 (let (($x324 (forall ((input.ind-%var1548X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1548X)))
 (= $x263 false)))
 ))
 (let (($x275 (and $x324 $x162)))
 (let (($x135 (= $x275 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x267)))
 (let (($x353 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let ((?x274 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x114 (= ?x351 input.dst.llvm-%n)))
 (let (($x288 (= $x114 true)))
 (let (($x306 (= $x288 true)))
 (let (($x298 (= ?x351 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let ((?x276 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x212 (= (_ bv0 2) ?x276)))
 (let (($x286 (= $x212 true)))
 (let (($x42 (= $x286 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x246 (= $x209 true)))
 (let (($x207 (= $x246 true)))
 (let (($x252 (= $x207 true)))
 (let (($x208 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x48 (= $x208 true)))
 (let (($x44 (= $x48 true)))
 (let (($x226 (= $x44 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (= $x222 true)))
 (let (($x159 (= $x43 true)))
 (let (($x73 (= $x159 true)))
 (let (($x218 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x218 true)))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x80 (= $x129 true)))
 (let (($x219 (= $x80 true)))
 (let (($x194 (= $x219 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x79 (= $x76 true)))
 (let (($x115 (= $x79 true)))
 (let (($x167 (= $x115 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x174)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x188)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x68)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x186 $x105)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x172 $x91)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x197 $x6)))
 (let (($x161 (not $x15)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x260 (and $x89 $x9)))
 (let (($x134 (and (not $x260) $x161)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x151 $x163)))
 (let (($x21 (not $x148)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x62 $x169)))
 (let (($x23 (and (not $x59) $x21)))
 (let (($x166 (and (and (and (and (and (and $x23 $x134) $x149) $x138) $x20) $x200) $x130)))
 (let (($x101 (and $x166 $x189)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x40 (or false (or false (and (and true (or $x147 $x117)) (or $x184 $x22))))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x40)))
 (let (($x180 (and $x205 $x101)))
 (let (($x49 (= $x180 true)))
 (let (($x187 (= $x49 true)))
 (let (($x170 (= $x187 true)))
 (let (($x60 (and $x170 $x167)))
 (let (($x29 (and $x60 $x194)))
 (let (($x183 (and $x29 $x245)))
 (let (($x103 (and $x183 $x73)))
 (let (($x52 (and $x103 $x226)))
 (let (($x244 (and $x52 $x252)))
 (let (($x329 (and $x244 $x42)))
 (let (($x301 (and $x329 $x211)))
 (let (($x317 (and $x301 $x306)))
 (let (($x127 (and $x317 $x345)))
 (let (($x66 (and $x127 $x135)))
 (let (($x281 (and $x66 $x133)))
 (let (($x81 (and $x281 $x110)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (and $x5 $x81)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x121 (and $x157 $x85)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x164 (and $x182 $x121)))
 (let (($x128 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd ?x278 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x35 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x261 (or false (or false (and (and true (or $x285 $x35)) (or $x331 $x128))))))
 (let (($x144 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x261)))
 (let (($x291 (=> (and $x131 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x261)))
 (let (($x343 (and $x291 $x164)))
 (let (($x283 (=> $x343 $x10)))
 (not $x283))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x342 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x334 (bvmul (_ bv4294967295 32) ?x342)))
 (let ((?x88 (bvneg ?x334)))
 (let (($x213 (= ?x88 ?x299)))
 (let (($x323 (= $x213 true)))
 (let (($x64 (forall ((input.ind-%var1579X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1579X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1579X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1578X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1578X)))
 (= $x66 false)))
 ))
 (let (($x33 (and $x236 $x64)))
 (let (($x303 (= $x33 true)))
 (let (($x333 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let ((?x83 (bvadd (bvmul input.ind-%var1573X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x83))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv2 32))) ?x217)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv3 32))) ?x203)))
 (let ((?x121 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1573X)))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1573X)))
 (=> $x287 (= ?x121 ?x256)))))))))
 ))
 (let (($x307 (forall ((input.ind-%var1572X (_ BitVec 32)) )(let (($x339 (and (bvule (_ bv0 32) input.ind-%var1572X) (bvult input.ind-%var1572X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1572X)))
 (= $x287 $x339))))
 ))
 (let (($x120 (and $x307 $x333)))
 (let (($x225 (= $x120 true)))
 (let (($x146 (forall ((input.ind-%var1567X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1567X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1567X) (_ bv0 32)))))
 ))
 (let (($x326 (forall ((input.ind-%var1566X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1566X)))
 (= $x66 false)))
 ))
 (let (($x193 (and $x326 $x146)))
 (let (($x93 (= $x193 true)))
 (let ((?x263 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x263)))
 (let (($x324 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x324 true)))
 (let (($x224 (= $x258 true)))
 (let (($x353 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x127 (= $x345 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x298 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x286 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x208 (bvsub ?x278 ?x87)))
 (let (($x52 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x208) (bvult ?x278 ?x208))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x73 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x183 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvmul (_ bv4 64) ?x183)))
 (let ((?x43 ((_ extract 63 32) ?x222)))
 (let (($x103 (= ?x43 ?x73)))
 (let (($x209 (and $x103 $x52)))
 (let (($x84 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x246 (and $x84 $x209)))
 (let (($x207 (= true $x246)))
 (let (($x242 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (=> $x242 $x207)))
 (let (($x244 (= $x252 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x219 (= $x80 true)))
 (let (($x194 (= $x219 true)))
 (let (($x29 (= $x194 true)))
 (let (($x145 (= $x242 true)))
 (let (($x26 (= $x145 true)))
 (let (($x95 (= $x26 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x178)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x60)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (and $x187 $x36)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x49 $x76)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x150 $x200)))
 (let (($x188 (not $x136)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x91 $x20)))
 (let (($x166 (and (not $x125) $x188)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x138 $x165)))
 (let (($x186 (not $x172)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x163 $x148)))
 (let (($x105 (and (not $x175) $x186)))
 (let (($x198 (and (and (and (and (and (and $x105 $x166) $x189) $x180) $x79) $x167) $x104)))
 (let (($x140 (and $x198 $x100)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x78 (or false (or false (and (and true (or $x9 $x260)) (or $x6 $x15))))))
 (let (($x196 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x65 (and $x196 $x140)))
 (let (($x51 (= $x65 true)))
 (let (($x37 (= $x51 true)))
 (let (($x56 (= $x37 true)))
 (let ((?x205 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x62 (= (_ bv0 2) ?x205)))
 (let (($x169 (= $x62 true)))
 (let (($x59 (= $x169 true)))
 (let ((?x147 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x147)))
 (let (($x22 (= ?x117 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (= $x22 true)))
 (let (($x156 (= $x46 true)))
 (let (($x112 (= ?x117 input.dst.llvm-%n)))
 (let (($x122 (= $x112 true)))
 (let (($x184 (= $x122 true)))
 (let (($x63 (and $x184 $x156)))
 (let (($x50 (and $x63 $x59)))
 (let (($x32 (and $x50 $x56)))
 (let (($x139 (and $x32 $x95)))
 (let (($x109 (and $x139 $x29)))
 (let (($x212 (and $x109 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x114 (and $x351 $x301)))
 (let (($x215 (and $x114 $x267)))
 (let (($x341 (and $x215 $x127)))
 (let (($x357 (and $x341 $x224)))
 (let (($x349 (and $x357 $x93)))
 (let (($x106 (and $x349 $x225)))
 (let (($x316 (and $x106 $x303)))
 (let (($x185 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and (not $x185) $x316)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (and $x61 $x247)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x271 (and $x71 $x262)))
 (let (($x284 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x315 (and $x284 $x271)))
 (let (($x337 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x278 (_ bv3 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x241 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x291 (or false (or false (and (and true (or $x94 $x241)) (or $x295 $x337))))))
 (let (($x182 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x291)))
 (let (($x279 (=> (and $x242 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x291)))
 (let (($x250 (and $x279 $x315)))
 (let (($x249 (=> $x250 $x323)))
 (not $x249))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x342 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x334 (bvmul (_ bv4294967295 32) ?x342)))
 (let ((?x88 (bvneg ?x334)))
 (let (($x213 (= ?x88 ?x299)))
 (let (($x323 (= $x213 true)))
 (let (($x64 (forall ((input.ind-%var1579X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1579X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1579X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1578X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1578X)))
 (= $x66 false)))
 ))
 (let (($x33 (and $x236 $x64)))
 (let (($x303 (= $x33 true)))
 (let (($x333 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let ((?x83 (bvadd (bvmul input.ind-%var1573X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x83))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv2 32))) ?x217)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv3 32))) ?x203)))
 (let ((?x121 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1573X)))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1573X)))
 (=> $x287 (= ?x121 ?x256)))))))))
 ))
 (let (($x307 (forall ((input.ind-%var1572X (_ BitVec 32)) )(let (($x339 (and (bvule (_ bv0 32) input.ind-%var1572X) (bvult input.ind-%var1572X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1572X)))
 (= $x287 $x339))))
 ))
 (let (($x120 (and $x307 $x333)))
 (let (($x225 (= $x120 true)))
 (let (($x146 (forall ((input.ind-%var1567X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1567X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1567X) (_ bv0 32)))))
 ))
 (let (($x326 (forall ((input.ind-%var1566X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1566X)))
 (= $x66 false)))
 ))
 (let (($x193 (and $x326 $x146)))
 (let (($x93 (= $x193 true)))
 (let ((?x263 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x263)))
 (let (($x324 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x324 true)))
 (let (($x224 (= $x258 true)))
 (let (($x353 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x127 (= $x345 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x298 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x298 true)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x286 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x42 (= $x286 true)))
 (let (($x329 (= $x42 true)))
 (let (($x274 (= $x329 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x208 (bvsub ?x278 ?x87)))
 (let (($x52 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x208) (bvult ?x278 ?x208))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x73 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x183 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvmul (_ bv4 64) ?x183)))
 (let ((?x43 ((_ extract 63 32) ?x222)))
 (let (($x103 (= ?x43 ?x73)))
 (let (($x209 (and $x103 $x52)))
 (let (($x84 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x246 (and $x84 $x209)))
 (let (($x207 (= true $x246)))
 (let (($x242 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (=> $x242 $x207)))
 (let (($x244 (= $x252 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x219 (= $x80 true)))
 (let (($x194 (= $x219 true)))
 (let (($x29 (= $x194 true)))
 (let (($x145 (= $x242 true)))
 (let (($x26 (= $x145 true)))
 (let (($x95 (= $x26 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x178)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x60)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (and $x187 $x36)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x49 $x76)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x150 $x200)))
 (let (($x188 (not $x136)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x91 $x20)))
 (let (($x166 (and (not $x125) $x188)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x138 $x165)))
 (let (($x186 (not $x172)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x163 $x148)))
 (let (($x105 (and (not $x175) $x186)))
 (let (($x198 (and (and (and (and (and (and $x105 $x166) $x189) $x180) $x79) $x167) $x104)))
 (let (($x140 (and $x198 $x100)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x78 (or false (or false (and (and true (or $x9 $x260)) (or $x6 $x15))))))
 (let (($x196 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x65 (and $x196 $x140)))
 (let (($x51 (= $x65 true)))
 (let (($x37 (= $x51 true)))
 (let (($x56 (= $x37 true)))
 (let ((?x205 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x62 (= (_ bv0 2) ?x205)))
 (let (($x169 (= $x62 true)))
 (let (($x59 (= $x169 true)))
 (let ((?x147 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x147)))
 (let (($x22 (= ?x117 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (= $x22 true)))
 (let (($x156 (= $x46 true)))
 (let (($x112 (= ?x117 input.dst.llvm-%n)))
 (let (($x122 (= $x112 true)))
 (let (($x184 (= $x122 true)))
 (let (($x63 (and $x184 $x156)))
 (let (($x50 (and $x63 $x59)))
 (let (($x32 (and $x50 $x56)))
 (let (($x139 (and $x32 $x95)))
 (let (($x109 (and $x139 $x29)))
 (let (($x212 (and $x109 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x114 (and $x351 $x301)))
 (let (($x215 (and $x114 $x267)))
 (let (($x341 (and $x215 $x127)))
 (let (($x357 (and $x341 $x224)))
 (let (($x349 (and $x357 $x93)))
 (let (($x106 (and $x349 $x225)))
 (let (($x316 (and $x106 $x303)))
 (let (($x185 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and (not $x185) $x316)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (and $x61 $x247)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x271 (and $x71 $x262)))
 (let (($x284 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x315 (and $x284 $x271)))
 (let (($x337 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x278 (_ bv3 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x241 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x291 (or false (or false (and (and true (or $x94 $x241)) (or $x295 $x337))))))
 (let (($x182 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x291)))
 (let (($x279 (=> (and $x242 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x291)))
 (let (($x250 (and $x279 $x315)))
 (let (($x249 (=> $x250 $x323)))
 (not $x249))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x348 (bvule ?x243 (_ bv4294967294 32))))
 (let (($x81 (= $x348 true)))
 (let (($x338 (= $x81 true)))
 (let (($x228 (forall ((input.ind-%var1597X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1597X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1597X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var1596X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1596X)))
 (= $x123 false)))
 ))
 (let (($x290 (and $x126 $x228)))
 (let (($x17 (= $x290 true)))
 (let (($x275 (forall ((input.ind-%var1591X (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul input.ind-%var1591X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x257)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x110)))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1591X)))
 (let (($x177 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1591X)))
 (=> $x177 (= ?x236 ?x113)))))))))
 ))
 (let (($x333 (forall ((input.ind-%var1590X (_ BitVec 32)) )(let (($x39 (and (bvule (_ bv0 32) input.ind-%var1590X) (bvult input.ind-%var1590X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x177 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1590X)))
 (= $x177 $x39))))
 ))
 (let (($x153 (and $x333 $x275)))
 (let (($x251 (= $x153 true)))
 (let (($x343 (forall ((input.ind-%var1585X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1585X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1585X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1584X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1584X)))
 (= $x123 false)))
 ))
 (let (($x19 (and $x193 $x343)))
 (let (($x83 (= $x19 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x324 (bvneg ?x74)))
 (let (($x258 (= ?x324 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x224 (= $x258 true)))
 (let (($x357 (= $x224 true)))
 (let (($x313 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x345 (= $x313 true)))
 (let (($x127 (= $x345 true)))
 (let (($x341 (= $x127 true)))
 (let (($x306 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x276 (= (_ bv0 32) ?x253)))
 (let ((?x252 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x252)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (and $x208 $x226)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x48 $x52)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x218 $x141)))
 (let (($x245 (not $x84)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x194 $x29)))
 (let (($x222 (and (not $x109) $x245)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x26 $x95)))
 (let (($x129 (not $x139)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x76 $x79)))
 (let (($x219 (and (not $x145) $x129)))
 (let (($x351 (and (and (and (and (and (and $x219 $x222) $x159) $x103) $x209) $x207) $x244)))
 (let (($x298 (and $x351 $x276)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x37 (or false (or false (and (and true (or $x173 $x60)) (or $x178 $x100))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x37)))
 (let (($x96 (and $x32 $x298)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x180 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x53 (= $x180 true)))
 (let (($x49 (= $x53 true)))
 (let (($x187 (= $x49 true)))
 (let (($x28 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x28 true)))
 (let (($x189 (= $x174 true)))
 (let (($x206 (= $x189 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x200 (= (_ bv0 2) ?x150)))
 (let (($x136 (= $x200 true)))
 (let (($x188 (= $x136 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x175)))
 (let (($x105 (= ?x68 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x105 true)))
 (let (($x20 (= $x91 true)))
 (let (($x138 (= ?x68 input.dst.llvm-%n)))
 (let (($x165 (= $x138 true)))
 (let (($x172 (= $x165 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x9 (bvsub ?x278 ?x87)))
 (let (($x6 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x9) (bvult ?x278 ?x9))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x149 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x169 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x59 (bvmul (_ bv4 64) ?x169)))
 (let ((?x50 ((_ extract 63 32) ?x59)))
 (let (($x89 (= ?x50 ?x149)))
 (let (($x15 (and $x89 $x6)))
 (let (($x205 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x161 (and $x205 $x15)))
 (let (($x134 (= true $x161)))
 (let (($x297 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (=> $x297 $x134)))
 (let (($x78 (= $x18 true)))
 (let (($x196 (= $x78 true)))
 (let (($x163 (= $x196 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x122 true)))
 (let (($x22 (= $x184 true)))
 (let (($x46 (= $x22 true)))
 (let (($x142 (= $x297 true)))
 (let (($x147 (= $x142 true)))
 (let (($x117 (= $x147 true)))
 (let (($x156 (and $x117 $x46)))
 (let (($x148 (and $x156 $x163)))
 (let (($x186 (and $x148 $x172)))
 (let (($x125 (and $x186 $x20)))
 (let (($x166 (and $x125 $x188)))
 (let (($x101 (and $x166 $x206)))
 (let (($x170 (and $x101 $x187)))
 (let (($x288 (and $x170 $x114)))
 (let (($x353 (and $x288 $x215)))
 (let (($x263 (and $x353 $x341)))
 (let (($x135 (and $x263 $x357)))
 (let (($x57 (and $x135 $x83)))
 (let (($x332 (and $x57 $x251)))
 (let (($x92 (and $x332 $x17)))
 (let (($x199 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and (not $x199) $x92)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x232 (and $x38 $x97)))
 (let (($x330 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x239 (and $x330 $x232)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x233 (and $x45 $x239)))
 (let (($x261 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd ?x278 (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x331 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x241)))
 (let (($x279 (or false (or false (and (and true (or $x238 $x331)) (or $x254 $x261))))))
 (let (($x284 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x279)))
 (let (($x227 (=> (and $x297 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x279)))
 (let (($x309 (and $x227 $x233)))
 (let (($x359 (=> $x309 $x338)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x348 (bvule ?x243 (_ bv4294967294 32))))
 (let (($x81 (= $x348 true)))
 (let (($x338 (= $x81 true)))
 (let (($x228 (forall ((input.ind-%var1597X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1597X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1597X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var1596X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1596X)))
 (= $x123 false)))
 ))
 (let (($x290 (and $x126 $x228)))
 (let (($x17 (= $x290 true)))
 (let (($x275 (forall ((input.ind-%var1591X (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul input.ind-%var1591X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x257)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x110)))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1591X)))
 (let (($x177 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1591X)))
 (=> $x177 (= ?x236 ?x113)))))))))
 ))
 (let (($x333 (forall ((input.ind-%var1590X (_ BitVec 32)) )(let (($x39 (and (bvule (_ bv0 32) input.ind-%var1590X) (bvult input.ind-%var1590X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x177 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1590X)))
 (= $x177 $x39))))
 ))
 (let (($x153 (and $x333 $x275)))
 (let (($x251 (= $x153 true)))
 (let (($x343 (forall ((input.ind-%var1585X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1585X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1585X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1584X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1584X)))
 (= $x123 false)))
 ))
 (let (($x19 (and $x193 $x343)))
 (let (($x83 (= $x19 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x324 (bvneg ?x74)))
 (let (($x258 (= ?x324 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x224 (= $x258 true)))
 (let (($x357 (= $x224 true)))
 (let (($x313 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x345 (= $x313 true)))
 (let (($x127 (= $x345 true)))
 (let (($x341 (= $x127 true)))
 (let (($x306 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x276 (= (_ bv0 32) ?x253)))
 (let ((?x252 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x252)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (and $x208 $x226)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x48 $x52)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x218 $x141)))
 (let (($x245 (not $x84)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x194 $x29)))
 (let (($x222 (and (not $x109) $x245)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x26 $x95)))
 (let (($x129 (not $x139)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x76 $x79)))
 (let (($x219 (and (not $x145) $x129)))
 (let (($x351 (and (and (and (and (and (and $x219 $x222) $x159) $x103) $x209) $x207) $x244)))
 (let (($x298 (and $x351 $x276)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x37 (or false (or false (and (and true (or $x173 $x60)) (or $x178 $x100))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x37)))
 (let (($x96 (and $x32 $x298)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x180 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x53 (= $x180 true)))
 (let (($x49 (= $x53 true)))
 (let (($x187 (= $x49 true)))
 (let (($x28 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x28 true)))
 (let (($x189 (= $x174 true)))
 (let (($x206 (= $x189 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x200 (= (_ bv0 2) ?x150)))
 (let (($x136 (= $x200 true)))
 (let (($x188 (= $x136 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x175)))
 (let (($x105 (= ?x68 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x105 true)))
 (let (($x20 (= $x91 true)))
 (let (($x138 (= ?x68 input.dst.llvm-%n)))
 (let (($x165 (= $x138 true)))
 (let (($x172 (= $x165 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x9 (bvsub ?x278 ?x87)))
 (let (($x6 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x9) (bvult ?x278 ?x9))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x149 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x169 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x59 (bvmul (_ bv4 64) ?x169)))
 (let ((?x50 ((_ extract 63 32) ?x59)))
 (let (($x89 (= ?x50 ?x149)))
 (let (($x15 (and $x89 $x6)))
 (let (($x205 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x161 (and $x205 $x15)))
 (let (($x134 (= true $x161)))
 (let (($x297 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (=> $x297 $x134)))
 (let (($x78 (= $x18 true)))
 (let (($x196 (= $x78 true)))
 (let (($x163 (= $x196 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x122 true)))
 (let (($x22 (= $x184 true)))
 (let (($x46 (= $x22 true)))
 (let (($x142 (= $x297 true)))
 (let (($x147 (= $x142 true)))
 (let (($x117 (= $x147 true)))
 (let (($x156 (and $x117 $x46)))
 (let (($x148 (and $x156 $x163)))
 (let (($x186 (and $x148 $x172)))
 (let (($x125 (and $x186 $x20)))
 (let (($x166 (and $x125 $x188)))
 (let (($x101 (and $x166 $x206)))
 (let (($x170 (and $x101 $x187)))
 (let (($x288 (and $x170 $x114)))
 (let (($x353 (and $x288 $x215)))
 (let (($x263 (and $x353 $x341)))
 (let (($x135 (and $x263 $x357)))
 (let (($x57 (and $x135 $x83)))
 (let (($x332 (and $x57 $x251)))
 (let (($x92 (and $x332 $x17)))
 (let (($x199 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and (not $x199) $x92)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x232 (and $x38 $x97)))
 (let (($x330 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x239 (and $x330 $x232)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x233 (and $x45 $x239)))
 (let (($x261 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd ?x278 (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x331 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x241)))
 (let (($x279 (or false (or false (and (and true (or $x238 $x331)) (or $x254 $x261))))))
 (let (($x284 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x279)))
 (let (($x227 (=> (and $x297 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x279)))
 (let (($x309 (and $x227 $x233)))
 (let (($x359 (=> $x309 $x338)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x225 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x225 (_ bv0 32))))
 (let (($x111 (= $x352 true)))
 (let (($x248 (= $x111 true)))
 (let (($x339 (forall ((input.ind-%var1615X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1615X)))
 (=> $x281 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1615X) (_ bv0 32)))))
 ))
 (let (($x247 (forall ((input.ind-%var1614X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1614X)))
 (= $x281 false)))
 ))
 (let (($x283 (and $x247 $x339)))
 (let (($x82 (= $x283 true)))
 (let (($x316 (forall ((input.ind-%var1609X (_ BitVec 32)) )(let ((?x64 (bvadd (bvmul input.ind-%var1609X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x64))))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv2 32))) ?x287)))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv3 32))) ?x55)))
 (let ((?x126 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1609X)))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1609X)))
 (=> $x300 (= ?x126 ?x66)))))))))
 ))
 (let (($x275 (forall ((input.ind-%var1608X (_ BitVec 32)) )(let (($x312 (and (bvule (_ bv0 32) input.ind-%var1608X) (bvult input.ind-%var1608X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1608X)))
 (= $x300 $x312))))
 ))
 (let (($x299 (and $x275 $x316)))
 (let (($x213 (= $x299 true)))
 (let (($x33 (forall ((input.ind-%var1603X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1603X)))
 (=> $x281 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1603X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var1602X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1602X)))
 (= $x281 false)))
 ))
 (let (($x16 (and $x19 $x33)))
 (let (($x151 (= $x16 true)))
 (let ((?x324 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x324)))
 (let (($x224 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x357 (= $x224 true)))
 (let (($x135 (= $x357 true)))
 (let (($x345 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x127 (= $x345 true)))
 (let (($x341 (= $x127 true)))
 (let (($x263 (= $x341 true)))
 (let (($x317 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x207)))
 (let ((?x329 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x329)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x42 $x208)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x103 $x44)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x218 $x141)))
 (let (($x245 (not $x84)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (and $x29 $x109)))
 (let (($x212 (and (not $x183) $x245)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x26 $x95)))
 (let (($x129 (not $x139)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x115 $x56)))
 (let (($x194 (and (not $x80) $x129)))
 (let (($x298 (and (and (and (and (and (and $x194 $x212) $x159) $x73) $x226) $x209) $x246)))
 (let (($x96 (and $x298 $x274)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x76 (or false (or false (and (and true (or $x104 $x198)) (or $x140 $x65))))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x76)))
 (let (($x211 (and $x145 $x96)))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x288 (= $x114 true)))
 (let (($x180 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x53 (= $x180 true)))
 (let (($x49 (= $x53 true)))
 (let (($x187 (= $x49 true)))
 (let (($x28 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x28 true)))
 (let (($x189 (= $x174 true)))
 (let (($x206 (= $x189 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x200 (= (_ bv0 2) ?x150)))
 (let (($x136 (= $x200 true)))
 (let (($x188 (= $x136 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x175)))
 (let (($x105 (= ?x68 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x105 true)))
 (let (($x20 (= $x91 true)))
 (let (($x138 (= ?x68 input.dst.llvm-%n)))
 (let (($x165 (= $x138 true)))
 (let (($x172 (= $x165 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x260 (bvsub ?x278 ?x87)))
 (let (($x6 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x260) (bvult ?x278 ?x260))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x149 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x169 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x59 (bvmul (_ bv4 64) ?x169)))
 (let ((?x50 ((_ extract 63 32) ?x59)))
 (let (($x89 (= ?x50 ?x149)))
 (let (($x15 (and $x89 $x6)))
 (let (($x205 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x161 (and $x205 $x15)))
 (let (($x134 (= true $x161)))
 (let (($x41 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (=> $x41 $x134)))
 (let (($x78 (= $x18 true)))
 (let (($x196 (= $x78 true)))
 (let (($x163 (= $x196 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x122 true)))
 (let (($x22 (= $x184 true)))
 (let (($x46 (= $x22 true)))
 (let (($x142 (= $x41 true)))
 (let (($x147 (= $x142 true)))
 (let (($x117 (= $x147 true)))
 (let (($x156 (and $x117 $x46)))
 (let (($x148 (and $x156 $x163)))
 (let (($x186 (and $x148 $x172)))
 (let (($x125 (and $x186 $x20)))
 (let (($x166 (and $x125 $x188)))
 (let (($x101 (and $x166 $x206)))
 (let (($x170 (and $x101 $x187)))
 (let (($x306 (and $x170 $x288)))
 (let (($x313 (and $x306 $x353)))
 (let (($x74 (and $x313 $x263)))
 (let (($x326 (and $x74 $x135)))
 (let (($x85 (and $x326 $x151)))
 (let (($x342 (and $x85 $x213)))
 (let (($x319 (and $x342 $x82)))
 (let (($x361 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x217 (and (not $x361) $x319)))
 (let (($x185 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x349 (and $x185 $x217)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x259 (and $x5 $x349)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x157 $x259)))
 (let (($x291 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x331 (bvadd ?x278 (_ bv3 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x331)))
 (let (($x295 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x331)))
 (let (($x227 (or false (or false (and (and true (or $x360 $x295)) (or $x144 $x291))))))
 (let (($x45 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x227)))
 (let (($x107 (=> (and $x41 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x227)))
 (let (($x47 (and $x107 $x249)))
 (let (($x171 (=> $x47 $x248)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x225 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x225 (_ bv0 32))))
 (let (($x111 (= $x352 true)))
 (let (($x248 (= $x111 true)))
 (let (($x339 (forall ((input.ind-%var1615X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1615X)))
 (=> $x281 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1615X) (_ bv0 32)))))
 ))
 (let (($x247 (forall ((input.ind-%var1614X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1614X)))
 (= $x281 false)))
 ))
 (let (($x283 (and $x247 $x339)))
 (let (($x82 (= $x283 true)))
 (let (($x316 (forall ((input.ind-%var1609X (_ BitVec 32)) )(let ((?x64 (bvadd (bvmul input.ind-%var1609X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x64))))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv2 32))) ?x287)))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv3 32))) ?x55)))
 (let ((?x126 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1609X)))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1609X)))
 (=> $x300 (= ?x126 ?x66)))))))))
 ))
 (let (($x275 (forall ((input.ind-%var1608X (_ BitVec 32)) )(let (($x312 (and (bvule (_ bv0 32) input.ind-%var1608X) (bvult input.ind-%var1608X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1608X)))
 (= $x300 $x312))))
 ))
 (let (($x299 (and $x275 $x316)))
 (let (($x213 (= $x299 true)))
 (let (($x33 (forall ((input.ind-%var1603X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1603X)))
 (=> $x281 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1603X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var1602X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1602X)))
 (= $x281 false)))
 ))
 (let (($x16 (and $x19 $x33)))
 (let (($x151 (= $x16 true)))
 (let ((?x324 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x324)))
 (let (($x224 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x357 (= $x224 true)))
 (let (($x135 (= $x357 true)))
 (let (($x345 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x127 (= $x345 true)))
 (let (($x341 (= $x127 true)))
 (let (($x263 (= $x341 true)))
 (let (($x317 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x207)))
 (let ((?x329 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x329)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x42 $x208)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x103 $x44)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x218 $x141)))
 (let (($x245 (not $x84)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (and $x29 $x109)))
 (let (($x212 (and (not $x183) $x245)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x26 $x95)))
 (let (($x129 (not $x139)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x115 $x56)))
 (let (($x194 (and (not $x80) $x129)))
 (let (($x298 (and (and (and (and (and (and $x194 $x212) $x159) $x73) $x226) $x209) $x246)))
 (let (($x96 (and $x298 $x274)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x76 (or false (or false (and (and true (or $x104 $x198)) (or $x140 $x65))))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x76)))
 (let (($x211 (and $x145 $x96)))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x288 (= $x114 true)))
 (let (($x180 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x53 (= $x180 true)))
 (let (($x49 (= $x53 true)))
 (let (($x187 (= $x49 true)))
 (let (($x28 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x28 true)))
 (let (($x189 (= $x174 true)))
 (let (($x206 (= $x189 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x200 (= (_ bv0 2) ?x150)))
 (let (($x136 (= $x200 true)))
 (let (($x188 (= $x136 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x175)))
 (let (($x105 (= ?x68 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x105 true)))
 (let (($x20 (= $x91 true)))
 (let (($x138 (= ?x68 input.dst.llvm-%n)))
 (let (($x165 (= $x138 true)))
 (let (($x172 (= $x165 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x260 (bvsub ?x278 ?x87)))
 (let (($x6 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x260) (bvult ?x278 ?x260))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x149 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x169 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x59 (bvmul (_ bv4 64) ?x169)))
 (let ((?x50 ((_ extract 63 32) ?x59)))
 (let (($x89 (= ?x50 ?x149)))
 (let (($x15 (and $x89 $x6)))
 (let (($x205 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x161 (and $x205 $x15)))
 (let (($x134 (= true $x161)))
 (let (($x41 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (=> $x41 $x134)))
 (let (($x78 (= $x18 true)))
 (let (($x196 (= $x78 true)))
 (let (($x163 (= $x196 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x122 true)))
 (let (($x22 (= $x184 true)))
 (let (($x46 (= $x22 true)))
 (let (($x142 (= $x41 true)))
 (let (($x147 (= $x142 true)))
 (let (($x117 (= $x147 true)))
 (let (($x156 (and $x117 $x46)))
 (let (($x148 (and $x156 $x163)))
 (let (($x186 (and $x148 $x172)))
 (let (($x125 (and $x186 $x20)))
 (let (($x166 (and $x125 $x188)))
 (let (($x101 (and $x166 $x206)))
 (let (($x170 (and $x101 $x187)))
 (let (($x306 (and $x170 $x288)))
 (let (($x313 (and $x306 $x353)))
 (let (($x74 (and $x313 $x263)))
 (let (($x326 (and $x74 $x135)))
 (let (($x85 (and $x326 $x151)))
 (let (($x342 (and $x85 $x213)))
 (let (($x319 (and $x342 $x82)))
 (let (($x361 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x217 (and (not $x361) $x319)))
 (let (($x185 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x349 (and $x185 $x217)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x259 (and $x5 $x349)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x157 $x259)))
 (let (($x291 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x331 (bvadd ?x278 (_ bv3 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x331)))
 (let (($x295 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x331)))
 (let (($x227 (or false (or false (and (and true (or $x360 $x295)) (or $x144 $x291))))))
 (let (($x45 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x227)))
 (let (($x107 (=> (and $x41 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x227)))
 (let (($x47 (and $x107 $x249)))
 (let (($x171 (=> $x47 $x248)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x36 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x10 (= $x36 true)))
 (let (($x88 (= $x10 true)))
 (let (($x39 (forall ((input.ind-%var1633X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1633X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1633X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var1632X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1632X)))
 (= $x256 false)))
 ))
 (let (($x250 (and $x97 $x39)))
 (let (($x77 (= $x250 true)))
 (let (($x92 (forall ((input.ind-%var1627X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var1627X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x228))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv2 32))) ?x177)))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv3 32))) ?x54)))
 (let ((?x247 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1627X)))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1627X)))
 (=> $x120 (= ?x247 ?x123)))))))))
 ))
 (let (($x316 (forall ((input.ind-%var1626X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var1626X) (bvult input.ind-%var1626X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1626X)))
 (= $x120 $x30))))
 ))
 (let (($x338 (and $x316 $x92)))
 (let (($x359 (= $x338 true)))
 (let (($x290 (forall ((input.ind-%var1621X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1621X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1621X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1620X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1620X)))
 (= $x256 false)))
 ))
 (let (($x181 (and $x16 $x290)))
 (let (($x64 (= $x181 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x258)))
 (let (($x357 (= ?x224 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x135 (= $x357 true)))
 (let (($x326 (= $x135 true)))
 (let (($x127 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x341 (= $x127 true)))
 (let (($x263 (= $x341 true)))
 (let (($x74 (= $x263 true)))
 (let (($x267 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x276 (bvsub ?x278 ?x87)))
 (let (($x207 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x276) (bvult ?x278 ?x276))))
 (let (($x253 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x52 (ite $x253 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x208 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x208)))
 (let ((?x226 ((_ extract 63 32) ?x44)))
 (let (($x209 (= ?x226 ?x52)))
 (let (($x274 (and $x209 $x207)))
 (let (($x42 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x96 (and $x42 $x274)))
 (let (($x211 (= true $x96)))
 (let (($x282 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (=> $x282 $x211)))
 (let (($x114 (= $x301 true)))
 (let (($x288 (= $x114 true)))
 (let (($x306 (= $x288 true)))
 (let (($x43 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x43 true)))
 (let (($x244 (= $x159 true)))
 (let (($x286 (= $x244 true)))
 (let (($x84 (= $x282 true)))
 (let (($x245 (= $x84 true)))
 (let (($x212 (= $x245 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x56)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x145)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x100 $x65)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x178 $x51)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x53 $x49)))
 (let (($x170 (not $x187)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x206 $x101)))
 (let (($x173 (and (not $x180) $x170)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x136 $x188)))
 (let (($x28 (not $x166)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x18 $x78)))
 (let (($x189 (and (not $x200) $x28)))
 (let (($x194 (and (and (and (and (and (and $x189 $x173) $x60) $x198) $x37) $x76) $x115)))
 (let (($x29 (and $x194 $x80)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x148)))
 (let (($x125 (or false (or false (and (and true (or $x175 $x68)) (or $x172 $x186))))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x109 (and $x150 $x29)))
 (let (($x183 (= $x109 true)))
 (let (($x222 (= $x183 true)))
 (let (($x218 (= $x222 true)))
 (let (($x27 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x197 (= $x27 true)))
 (let (($x6 (= $x197 true)))
 (let (($x15 (= $x6 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x149 (= (_ bv0 2) ?x23)))
 (let (($x89 (= $x149 true)))
 (let (($x9 (= $x89 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x22)))
 (let (($x62 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (= $x62 true)))
 (let (($x59 (= $x169 true)))
 (let (($x156 (= ?x46 input.dst.llvm-%n)))
 (let (($x63 (= $x156 true)))
 (let (($x40 (= $x63 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x122 (= $x112 true)))
 (let (($x205 (and $x122 $x40)))
 (let (($x50 (and $x205 $x59)))
 (let (($x260 (and $x50 $x9)))
 (let (($x161 (and $x260 $x15)))
 (let (($x141 (and $x161 $x218)))
 (let (($x252 (and $x141 $x212)))
 (let (($x73 (and $x252 $x286)))
 (let (($x317 (and $x73 $x306)))
 (let (($x345 (and $x317 $x313)))
 (let (($x324 (and $x345 $x74)))
 (let (($x193 (and $x324 $x326)))
 (let (($x118 (and $x193 $x64)))
 (let (($x243 (and $x118 $x359)))
 (let (($x334 (and $x243 $x77)))
 (let (($x311 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x257 (and (not $x311) $x334)))
 (let (($x199 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (and $x199 $x257)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x61 $x57)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x71 $x152)))
 (let (($x279 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd ?x278 (_ bv3 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x254 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x107 (or false (or false (and (and true (or $x128 $x254)) (or $x182 $x279))))))
 (let (($x157 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x107)))
 (let (($x35 (=> (and $x282 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x107)))
 (let (($x271 (and $x35 $x99)))
 (let (($x58 (=> $x271 $x88)))
 (not $x58))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x36 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x10 (= $x36 true)))
 (let (($x88 (= $x10 true)))
 (let (($x39 (forall ((input.ind-%var1633X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1633X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1633X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var1632X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1632X)))
 (= $x256 false)))
 ))
 (let (($x250 (and $x97 $x39)))
 (let (($x77 (= $x250 true)))
 (let (($x92 (forall ((input.ind-%var1627X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var1627X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x228))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv2 32))) ?x177)))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv3 32))) ?x54)))
 (let ((?x247 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1627X)))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1627X)))
 (=> $x120 (= ?x247 ?x123)))))))))
 ))
 (let (($x316 (forall ((input.ind-%var1626X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var1626X) (bvult input.ind-%var1626X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1626X)))
 (= $x120 $x30))))
 ))
 (let (($x338 (and $x316 $x92)))
 (let (($x359 (= $x338 true)))
 (let (($x290 (forall ((input.ind-%var1621X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1621X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1621X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1620X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1620X)))
 (= $x256 false)))
 ))
 (let (($x181 (and $x16 $x290)))
 (let (($x64 (= $x181 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x258)))
 (let (($x357 (= ?x224 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x135 (= $x357 true)))
 (let (($x326 (= $x135 true)))
 (let (($x127 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x341 (= $x127 true)))
 (let (($x263 (= $x341 true)))
 (let (($x74 (= $x263 true)))
 (let (($x267 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x276 (bvsub ?x278 ?x87)))
 (let (($x207 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x276) (bvult ?x278 ?x276))))
 (let (($x253 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x52 (ite $x253 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x208 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x208)))
 (let ((?x226 ((_ extract 63 32) ?x44)))
 (let (($x209 (= ?x226 ?x52)))
 (let (($x274 (and $x209 $x207)))
 (let (($x42 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x96 (and $x42 $x274)))
 (let (($x211 (= true $x96)))
 (let (($x282 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (=> $x282 $x211)))
 (let (($x114 (= $x301 true)))
 (let (($x288 (= $x114 true)))
 (let (($x306 (= $x288 true)))
 (let (($x43 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x43 true)))
 (let (($x244 (= $x159 true)))
 (let (($x286 (= $x244 true)))
 (let (($x84 (= $x282 true)))
 (let (($x245 (= $x84 true)))
 (let (($x212 (= $x245 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x56)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x145)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x100 $x65)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x178 $x51)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x53 $x49)))
 (let (($x170 (not $x187)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x206 $x101)))
 (let (($x173 (and (not $x180) $x170)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x136 $x188)))
 (let (($x28 (not $x166)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x18 $x78)))
 (let (($x189 (and (not $x200) $x28)))
 (let (($x194 (and (and (and (and (and (and $x189 $x173) $x60) $x198) $x37) $x76) $x115)))
 (let (($x29 (and $x194 $x80)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x148)))
 (let (($x125 (or false (or false (and (and true (or $x175 $x68)) (or $x172 $x186))))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x109 (and $x150 $x29)))
 (let (($x183 (= $x109 true)))
 (let (($x222 (= $x183 true)))
 (let (($x218 (= $x222 true)))
 (let (($x27 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x197 (= $x27 true)))
 (let (($x6 (= $x197 true)))
 (let (($x15 (= $x6 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x149 (= (_ bv0 2) ?x23)))
 (let (($x89 (= $x149 true)))
 (let (($x9 (= $x89 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x22)))
 (let (($x62 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (= $x62 true)))
 (let (($x59 (= $x169 true)))
 (let (($x156 (= ?x46 input.dst.llvm-%n)))
 (let (($x63 (= $x156 true)))
 (let (($x40 (= $x63 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x122 (= $x112 true)))
 (let (($x205 (and $x122 $x40)))
 (let (($x50 (and $x205 $x59)))
 (let (($x260 (and $x50 $x9)))
 (let (($x161 (and $x260 $x15)))
 (let (($x141 (and $x161 $x218)))
 (let (($x252 (and $x141 $x212)))
 (let (($x73 (and $x252 $x286)))
 (let (($x317 (and $x73 $x306)))
 (let (($x345 (and $x317 $x313)))
 (let (($x324 (and $x345 $x74)))
 (let (($x193 (and $x324 $x326)))
 (let (($x118 (and $x193 $x64)))
 (let (($x243 (and $x118 $x359)))
 (let (($x334 (and $x243 $x77)))
 (let (($x311 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x257 (and (not $x311) $x334)))
 (let (($x199 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (and $x199 $x257)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x61 $x57)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x71 $x152)))
 (let (($x279 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd ?x278 (_ bv3 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x254 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x107 (or false (or false (and (and true (or $x128 $x254)) (or $x182 $x279))))))
 (let (($x157 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x107)))
 (let (($x35 (=> (and $x282 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x107)))
 (let (($x271 (and $x35 $x99)))
 (let (($x58 (=> $x271 $x88)))
 (not $x58))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (bvsge ?x213 (_ bv0 32))))
 (let (($x323 (= $x143 true)))
 (let (($x81 (= $x323 true)))
 (let (($x312 (forall ((input.ind-%var1651X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1651X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1651X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1650X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1650X)))
 (= $x113 false)))
 ))
 (let (($x309 (and $x217 $x312)))
 (let (($x240 (= $x309 true)))
 (let (($x319 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let ((?x339 (bvadd (bvmul input.ind-%var1645X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x339))))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv2 32))) ?x300)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv3 32))) ?x34)))
 (let ((?x97 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1645X)))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1645X)))
 (=> $x153 (= ?x97 ?x281)))))))))
 ))
 (let (($x92 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x146 (and (bvule (_ bv0 32) input.ind-%var1644X) (bvult input.ind-%var1644X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1644X)))
 (= $x153 $x146))))
 ))
 (let (($x248 (and $x92 $x319)))
 (let (($x171 (= $x248 true)))
 (let (($x283 (forall ((input.ind-%var1639X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1639X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1639X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var1638X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1638X)))
 (= $x113 false)))
 ))
 (let (($x325 (and $x181 $x283)))
 (let (($x228 (= $x325 true)))
 (let ((?x224 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x357 (bvneg ?x224)))
 (let (($x135 (= ?x357 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x326 (= $x135 true)))
 (let (($x193 (= $x326 true)))
 (let (($x341 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x263 (= $x341 true)))
 (let (($x74 (= $x263 true)))
 (let (($x324 (= $x74 true)))
 (let (($x215 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x276 (bvsub ?x278 ?x87)))
 (let (($x274 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x276) (bvult ?x278 ?x276))))
 (let (($x52 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x209 (ite $x52 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x44 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x226 (bvmul (_ bv4 64) ?x44)))
 (let ((?x253 ((_ extract 63 32) ?x226)))
 (let (($x329 (= ?x253 ?x209)))
 (let (($x96 (and $x329 $x274)))
 (let (($x48 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x211 (and $x48 $x96)))
 (let (($x301 (= true $x211)))
 (let (($x255 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x114 (=> $x255 $x301)))
 (let (($x288 (= $x114 true)))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x244 (= $x159 true)))
 (let (($x286 (= $x244 true)))
 (let (($x73 (= $x286 true)))
 (let (($x245 (= $x255 true)))
 (let (($x212 (= $x245 true)))
 (let (($x252 (= $x212 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x76)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x139)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x178)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (and $x95 $x100)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x198 $x140)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x53 $x49)))
 (let (($x170 (not $x187)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x101 $x180)))
 (let (($x219 (and (not $x167) $x170)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x136 $x188)))
 (let (($x28 (not $x166)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x163 $x130)))
 (let (($x206 (and (not $x174) $x28)))
 (let (($x29 (and (and (and (and (and (and $x206 $x219) $x60) $x104) $x65) $x37) $x32)))
 (let (($x109 (and $x29 $x129)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x18 (or false (or false (and (and true (or $x138 $x165)) (or $x105 $x91))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x183 (and $x200 $x109)))
 (let (($x222 (= $x183 true)))
 (let (($x218 (= $x222 true)))
 (let (($x141 (= $x218 true)))
 (let (($x27 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x197 (= $x27 true)))
 (let (($x6 (= $x197 true)))
 (let (($x15 (= $x6 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x149 (= (_ bv0 2) ?x23)))
 (let (($x89 (= $x149 true)))
 (let (($x9 (= $x89 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x22)))
 (let (($x62 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (= $x62 true)))
 (let (($x59 (= $x169 true)))
 (let (($x156 (= ?x46 input.dst.llvm-%n)))
 (let (($x63 (= $x156 true)))
 (let (($x40 (= $x63 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x122 (= $x112 true)))
 (let (($x205 (and $x122 $x40)))
 (let (($x50 (and $x205 $x59)))
 (let (($x260 (and $x50 $x9)))
 (let (($x161 (and $x260 $x15)))
 (let (($x84 (and $x161 $x141)))
 (let (($x43 (and $x84 $x252)))
 (let (($x351 (and $x43 $x73)))
 (let (($x267 (and $x351 $x317)))
 (let (($x127 (and $x267 $x345)))
 (let (($x258 (and $x127 $x324)))
 (let (($x19 (and $x258 $x193)))
 (let (($x164 (and $x19 $x228)))
 (let (($x225 (and $x164 $x171)))
 (let (($x348 (and $x225 $x240)))
 (let (($x262 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x287 (and (not $x262) $x348)))
 (let (($x361 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (and $x361 $x287)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x162 (and $x38 $x85)))
 (let (($x330 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x160 (and $x330 $x162)))
 (let (($x227 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x278 (_ bv3 32))))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x144 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x337 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x35 (or false (or false (and (and true (or $x337 $x144)) (or $x284 $x227))))))
 (let (($x71 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x241 (=> (and $x255 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x239 (and $x241 $x160)))
 (let (($x121 (=> $x239 $x81)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (bvsge ?x213 (_ bv0 32))))
 (let (($x323 (= $x143 true)))
 (let (($x81 (= $x323 true)))
 (let (($x312 (forall ((input.ind-%var1651X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1651X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1651X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1650X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1650X)))
 (= $x113 false)))
 ))
 (let (($x309 (and $x217 $x312)))
 (let (($x240 (= $x309 true)))
 (let (($x319 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let ((?x339 (bvadd (bvmul input.ind-%var1645X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x339))))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv2 32))) ?x300)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv3 32))) ?x34)))
 (let ((?x97 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1645X)))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1645X)))
 (=> $x153 (= ?x97 ?x281)))))))))
 ))
 (let (($x92 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x146 (and (bvule (_ bv0 32) input.ind-%var1644X) (bvult input.ind-%var1644X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1644X)))
 (= $x153 $x146))))
 ))
 (let (($x248 (and $x92 $x319)))
 (let (($x171 (= $x248 true)))
 (let (($x283 (forall ((input.ind-%var1639X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1639X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1639X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var1638X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1638X)))
 (= $x113 false)))
 ))
 (let (($x325 (and $x181 $x283)))
 (let (($x228 (= $x325 true)))
 (let ((?x224 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x357 (bvneg ?x224)))
 (let (($x135 (= ?x357 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x326 (= $x135 true)))
 (let (($x193 (= $x326 true)))
 (let (($x341 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x263 (= $x341 true)))
 (let (($x74 (= $x263 true)))
 (let (($x324 (= $x74 true)))
 (let (($x215 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x276 (bvsub ?x278 ?x87)))
 (let (($x274 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x276) (bvult ?x278 ?x276))))
 (let (($x52 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x209 (ite $x52 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x44 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x226 (bvmul (_ bv4 64) ?x44)))
 (let ((?x253 ((_ extract 63 32) ?x226)))
 (let (($x329 (= ?x253 ?x209)))
 (let (($x96 (and $x329 $x274)))
 (let (($x48 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x211 (and $x48 $x96)))
 (let (($x301 (= true $x211)))
 (let (($x255 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x114 (=> $x255 $x301)))
 (let (($x288 (= $x114 true)))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x244 (= $x159 true)))
 (let (($x286 (= $x244 true)))
 (let (($x73 (= $x286 true)))
 (let (($x245 (= $x255 true)))
 (let (($x212 (= $x245 true)))
 (let (($x252 (= $x212 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x76)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x139)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x178)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (and $x95 $x100)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x198 $x140)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x53 $x49)))
 (let (($x170 (not $x187)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x101 $x180)))
 (let (($x219 (and (not $x167) $x170)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x136 $x188)))
 (let (($x28 (not $x166)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x163 $x130)))
 (let (($x206 (and (not $x174) $x28)))
 (let (($x29 (and (and (and (and (and (and $x206 $x219) $x60) $x104) $x65) $x37) $x32)))
 (let (($x109 (and $x29 $x129)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x18 (or false (or false (and (and true (or $x138 $x165)) (or $x105 $x91))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x183 (and $x200 $x109)))
 (let (($x222 (= $x183 true)))
 (let (($x218 (= $x222 true)))
 (let (($x141 (= $x218 true)))
 (let (($x27 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x197 (= $x27 true)))
 (let (($x6 (= $x197 true)))
 (let (($x15 (= $x6 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x149 (= (_ bv0 2) ?x23)))
 (let (($x89 (= $x149 true)))
 (let (($x9 (= $x89 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x22)))
 (let (($x62 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (= $x62 true)))
 (let (($x59 (= $x169 true)))
 (let (($x156 (= ?x46 input.dst.llvm-%n)))
 (let (($x63 (= $x156 true)))
 (let (($x40 (= $x63 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x122 (= $x112 true)))
 (let (($x205 (and $x122 $x40)))
 (let (($x50 (and $x205 $x59)))
 (let (($x260 (and $x50 $x9)))
 (let (($x161 (and $x260 $x15)))
 (let (($x84 (and $x161 $x141)))
 (let (($x43 (and $x84 $x252)))
 (let (($x351 (and $x43 $x73)))
 (let (($x267 (and $x351 $x317)))
 (let (($x127 (and $x267 $x345)))
 (let (($x258 (and $x127 $x324)))
 (let (($x19 (and $x258 $x193)))
 (let (($x164 (and $x19 $x228)))
 (let (($x225 (and $x164 $x171)))
 (let (($x348 (and $x225 $x240)))
 (let (($x262 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x287 (and (not $x262) $x348)))
 (let (($x361 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (and $x361 $x287)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x162 (and $x38 $x85)))
 (let (($x330 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x160 (and $x330 $x162)))
 (let (($x227 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x278 (_ bv3 32))))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x144 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x337 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x35 (or false (or false (and (and true (or $x337 $x144)) (or $x284 $x227))))))
 (let (($x71 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x241 (=> (and $x255 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x239 (and $x241 $x160)))
 (let (($x121 (=> $x239 $x81)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x359 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x134 (bvule ?x359 input.dst.llvm-%n)))
 (let (($x176 (= $x134 true)))
 (let (($x111 (= $x176 true)))
 (let (($x30 (forall ((input.ind-%var1669X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1669X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1669X) (_ bv0 32)))))
 ))
 (let (($x257 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1668X)))
 (= $x66 false)))
 ))
 (let (($x47 (and $x257 $x30)))
 (let (($x307 (= $x47 true)))
 (let (($x334 (forall ((input.ind-%var1663X (_ BitVec 32)) )(let ((?x39 (bvadd (bvmul input.ind-%var1663X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x39))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv2 32))) ?x120)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv3 32))) ?x289)))
 (let ((?x217 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1663X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1663X)))
 (=> $x299 (= ?x217 ?x256)))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x343 (and (bvule (_ bv0 32) input.ind-%var1662X) (bvult input.ind-%var1662X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1662X)))
 (= $x299 $x343))))
 ))
 (let (($x88 (and $x319 $x334)))
 (let (($x58 (= $x88 true)))
 (let (($x250 (forall ((input.ind-%var1657X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1657X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1657X) (_ bv0 32)))))
 ))
 (let (($x325 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1656X)))
 (= $x66 false)))
 ))
 (let (($x106 (and $x325 $x250)))
 (let (($x339 (= $x106 true)))
 (let ((?x357 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x357)))
 (let (($x326 (= ?x135 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x326 true)))
 (let (($x19 (= $x193 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x22)))
 (let (($x74 (= ?x46 input.dst.llvm-%n)))
 (let (($x324 (= $x74 true)))
 (let (($x258 (= $x324 true)))
 (let (($x313 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x345 (= $x313 true)))
 (let (($x127 (= $x345 true)))
 (let (($x341 (= $x127 true)))
 (let (($x306 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x52 (bvsub ?x278 ?x87)))
 (let (($x276 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x52) (bvult ?x278 ?x52))))
 (let (($x44 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x226 (ite $x44 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x42 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x48 (bvmul (_ bv4 64) ?x42)))
 (let ((?x208 ((_ extract 63 32) ?x48)))
 (let (($x253 (= ?x208 ?x226)))
 (let (($x298 (and $x253 $x276)))
 (let (($x351 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x207 (and $x351 $x298)))
 (let (($x274 (= true $x207)))
 (let (($x304 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (=> $x304 $x274)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x212 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x212 true)))
 (let (($x43 (= $x252 true)))
 (let (($x159 (= $x43 true)))
 (let (($x218 (= $x304 true)))
 (let (($x141 (= $x218 true)))
 (let (($x84 (= $x141 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x140)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x178)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x60 $x26)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x79 $x104)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x101 $x180)))
 (let (($x173 (not $x167)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x166 $x28)))
 (let (($x49 (and (not $x206) $x173)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x163 $x130)))
 (let (($x189 (not $x174)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x6 $x15)))
 (let (($x188 (and (not $x200) $x189)))
 (let (($x32 (and (and (and (and (and (and $x188 $x49) $x170) $x145) $x194) $x95) $x100)))
 (let (($x29 (and $x32 $x65)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x125 (or false (or false (and (and true (or $x78 $x68)) (or $x172 $x186))))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x76 (and $x18 $x29)))
 (let (($x129 (= $x76 true)))
 (let (($x109 (= $x129 true)))
 (let (($x183 (= $x109 true)))
 (let (($x149 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x149 true)))
 (let (($x9 (= $x89 true)))
 (let (($x260 (= $x9 true)))
 (let ((?x169 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x59 (= (_ bv0 2) ?x169)))
 (let (($x50 (= $x59 true)))
 (let (($x21 (= $x50 true)))
 (let (($x156 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (= $x156 true)))
 (let (($x40 (= $x63 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x122 (= $x112 true)))
 (let (($x205 (and $x122 $x40)))
 (let (($x23 (and $x205 $x21)))
 (let (($x27 (and $x23 $x260)))
 (let (($x222 (and $x27 $x183)))
 (let (($x245 (and $x222 $x84)))
 (let (($x244 (and $x245 $x159)))
 (let (($x288 (and $x244 $x114)))
 (let (($x353 (and $x288 $x215)))
 (let (($x263 (and $x353 $x341)))
 (let (($x224 (and $x263 $x258)))
 (let (($x16 (and $x224 $x19)))
 (let (($x133 (and $x16 $x339)))
 (let (($x251 (and $x133 $x58)))
 (let (($x352 (and $x251 $x307)))
 (let (($x232 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (and (not $x232) $x352)))
 (let (($x311 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x311 $x177)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x303 (and $x185 $x118)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x5 $x303)))
 (let (($x107 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd ?x278 (_ bv3 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x182 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x241 (or false (or false (and (and true (or $x261 $x182)) (or $x45 $x107))))))
 (let (($x330 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x241)))
 (let (($x331 (=> (and $x304 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x241)))
 (let (($x259 (and $x331 $x131)))
 (let (($x236 (=> $x259 $x111)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x359 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x134 (bvule ?x359 input.dst.llvm-%n)))
 (let (($x176 (= $x134 true)))
 (let (($x111 (= $x176 true)))
 (let (($x30 (forall ((input.ind-%var1669X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1669X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1669X) (_ bv0 32)))))
 ))
 (let (($x257 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1668X)))
 (= $x66 false)))
 ))
 (let (($x47 (and $x257 $x30)))
 (let (($x307 (= $x47 true)))
 (let (($x334 (forall ((input.ind-%var1663X (_ BitVec 32)) )(let ((?x39 (bvadd (bvmul input.ind-%var1663X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x39))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv2 32))) ?x120)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv3 32))) ?x289)))
 (let ((?x217 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1663X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1663X)))
 (=> $x299 (= ?x217 ?x256)))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x343 (and (bvule (_ bv0 32) input.ind-%var1662X) (bvult input.ind-%var1662X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1662X)))
 (= $x299 $x343))))
 ))
 (let (($x88 (and $x319 $x334)))
 (let (($x58 (= $x88 true)))
 (let (($x250 (forall ((input.ind-%var1657X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1657X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1657X) (_ bv0 32)))))
 ))
 (let (($x325 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1656X)))
 (= $x66 false)))
 ))
 (let (($x106 (and $x325 $x250)))
 (let (($x339 (= $x106 true)))
 (let ((?x357 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x357)))
 (let (($x326 (= ?x135 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x326 true)))
 (let (($x19 (= $x193 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x22)))
 (let (($x74 (= ?x46 input.dst.llvm-%n)))
 (let (($x324 (= $x74 true)))
 (let (($x258 (= $x324 true)))
 (let (($x313 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x345 (= $x313 true)))
 (let (($x127 (= $x345 true)))
 (let (($x341 (= $x127 true)))
 (let (($x306 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x52 (bvsub ?x278 ?x87)))
 (let (($x276 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x52) (bvult ?x278 ?x52))))
 (let (($x44 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x226 (ite $x44 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x42 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x48 (bvmul (_ bv4 64) ?x42)))
 (let ((?x208 ((_ extract 63 32) ?x48)))
 (let (($x253 (= ?x208 ?x226)))
 (let (($x298 (and $x253 $x276)))
 (let (($x351 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x207 (and $x351 $x298)))
 (let (($x274 (= true $x207)))
 (let (($x304 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (=> $x304 $x274)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x114 (= $x301 true)))
 (let (($x212 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x212 true)))
 (let (($x43 (= $x252 true)))
 (let (($x159 (= $x43 true)))
 (let (($x218 (= $x304 true)))
 (let (($x141 (= $x218 true)))
 (let (($x84 (= $x141 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x140)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x178)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x60 $x26)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x79 $x104)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x101 $x180)))
 (let (($x173 (not $x167)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x166 $x28)))
 (let (($x49 (and (not $x206) $x173)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x163 $x130)))
 (let (($x189 (not $x174)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x6 $x15)))
 (let (($x188 (and (not $x200) $x189)))
 (let (($x32 (and (and (and (and (and (and $x188 $x49) $x170) $x145) $x194) $x95) $x100)))
 (let (($x29 (and $x32 $x65)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x125 (or false (or false (and (and true (or $x78 $x68)) (or $x172 $x186))))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x76 (and $x18 $x29)))
 (let (($x129 (= $x76 true)))
 (let (($x109 (= $x129 true)))
 (let (($x183 (= $x109 true)))
 (let (($x149 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x149 true)))
 (let (($x9 (= $x89 true)))
 (let (($x260 (= $x9 true)))
 (let ((?x169 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x59 (= (_ bv0 2) ?x169)))
 (let (($x50 (= $x59 true)))
 (let (($x21 (= $x50 true)))
 (let (($x156 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (= $x156 true)))
 (let (($x40 (= $x63 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x122 (= $x112 true)))
 (let (($x205 (and $x122 $x40)))
 (let (($x23 (and $x205 $x21)))
 (let (($x27 (and $x23 $x260)))
 (let (($x222 (and $x27 $x183)))
 (let (($x245 (and $x222 $x84)))
 (let (($x244 (and $x245 $x159)))
 (let (($x288 (and $x244 $x114)))
 (let (($x353 (and $x288 $x215)))
 (let (($x263 (and $x353 $x341)))
 (let (($x224 (and $x263 $x258)))
 (let (($x16 (and $x224 $x19)))
 (let (($x133 (and $x16 $x339)))
 (let (($x251 (and $x133 $x58)))
 (let (($x352 (and $x251 $x307)))
 (let (($x232 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x177 (and (not $x232) $x352)))
 (let (($x311 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x311 $x177)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x303 (and $x185 $x118)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x5 $x303)))
 (let (($x107 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd ?x278 (_ bv3 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x182 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x241 (or false (or false (and (and true (or $x261 $x182)) (or $x45 $x107))))))
 (let (($x330 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x241)))
 (let (($x331 (=> (and $x304 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x241)))
 (let (($x259 (and $x331 $x131)))
 (let (($x236 (=> $x259 $x111)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x201 (forall ((input.ind-%var1695X (_ BitVec 32)) )(let ((?x312 (bvadd (bvmul input.ind-%var1695X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x182 (bvadd ?x278 (_ bv3 32))))
 (let ((?x98 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x234 (store ?x98 (bvadd ?x278 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x270 (store ?x234 (bvadd ?x278 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x24 (store ?x270 ?x182 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x344 (concat (select ?x24 (bvadd ?x312 (_ bv2 32))) (concat (select ?x24 (bvadd ?x312 (_ bv1 32))) (select ?x24 ?x312)))))
 (let ((?x257 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1695X)))
 (let (($x327 (= input.ind-%var1695X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x336 (= (ite $x327 input.spec-%var-i-0.L3%6%bbentry ?x257) (concat (select ?x24 (bvadd ?x312 (_ bv3 32))) ?x344))))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1695X)))
 (let (($x292 (or $x338 $x327)))
 (=> $x292 $x336))))))))))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1694X (_ BitVec 32)) )(let (($x256 (bvule (_ bv0 32) input.ind-%var1694X)))
 (let (($x137 (and $x256 (bvult input.ind-%var1694X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x327 (= input.ind-%var1694X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1694X)))
 (let (($x292 (or $x338 $x327)))
 (= $x292 $x137)))))))
 ))
 (let (($x363 (and $x124 $x201)))
 (let (($x171 (= true true)))
 (let (($x266 (and $x171 $x363)))
 (let (($x202 (= $x266 true)))
 (let (($x146 (forall ((input.ind-%var1687X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1687X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1687X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1686X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1686X)))
 (= $x123 false)))
 ))
 (let (($x271 (and $x287 $x146)))
 (let (($x333 (= $x271 true)))
 (let (($x348 (forall ((input.ind-%var1681X (_ BitVec 32)) )(let ((?x312 (bvadd (bvmul input.ind-%var1681X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x312))))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv2 32))) ?x153)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv3 32))) ?x93)))
 (let ((?x257 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1681X)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1681X)))
 (=> $x338 (= ?x257 ?x113)))))))))
 ))
 (let (($x334 (forall ((input.ind-%var1680X (_ BitVec 32)) )(let (($x256 (bvule (_ bv0 32) input.ind-%var1680X)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1680X)))
 (= $x338 (and $x256 (bvult input.ind-%var1680X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x81 (and $x334 $x348)))
 (let (($x121 (= $x81 true)))
 (let (($x309 (forall ((input.ind-%var1675X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1675X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1675X) (_ bv0 32)))))
 ))
 (let (($x106 (forall ((input.ind-%var1674X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1674X)))
 (= $x123 false)))
 ))
 (let (($x332 (and $x106 $x309)))
 (let (($x39 (= $x332 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x326 (bvneg ?x135)))
 (let (($x193 (= ?x326 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x193 true)))
 (let (($x16 (= $x19 true)))
 (let ((?x74 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x324 (= (_ bv0 2) ?x74)))
 (let (($x258 (= $x324 true)))
 (let (($x224 (= $x258 true)))
 (let (($x353 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x127 (= $x345 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x274 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x274 true)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x329 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x246 (= $x329 true)))
 (let (($x276 (= $x246 true)))
 (let (($x298 (= $x276 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x244 (bvsub ?x278 ?x87)))
 (let (($x103 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x244) (bvult ?x278 ?x244))))
 (let (($x252 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x43 (ite $x252 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x84)))
 (let ((?x212 ((_ extract 63 32) ?x245)))
 (let (($x159 (= ?x212 ?x43)))
 (let (($x42 (and $x159 $x103)))
 (let (($x218 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x48 (and $x218 $x42)))
 (let (($x208 (= true $x48)))
 (let (($x216 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (=> $x216 $x208)))
 (let (($x226 (= $x44 true)))
 (let (($x253 (= $x226 true)))
 (let (($x209 (= $x253 true)))
 (let (($x65 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x29 (= $x65 true)))
 (let (($x76 (= $x29 true)))
 (let (($x129 (= $x76 true)))
 (let (($x139 (= $x216 true)))
 (let (($x178 (= $x139 true)))
 (let (($x100 (= $x178 true)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x170)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x56)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x173)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x53)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x206 $x101)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x28 $x180)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x6 $x15)))
 (let (($x136 (not $x200)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x20 $x125)))
 (let (($x130 (and (not $x18) $x136)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x138 $x165)))
 (let (($x186 (not $x172)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x205 $x62)))
 (let (($x91 (and (not $x68) $x186)))
 (let (($x115 (and (and (and (and (and (and $x91 $x130) $x189) $x166) $x167) $x49) $x187)))
 (let (($x26 (and $x115 $x51)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x150 (or false (or false (and (and true (or $x21 $x23)) (or $x9 $x260))))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x104 (and $x78 $x26)))
 (let (($x194 (= $x104 true)))
 (let (($x80 (= $x194 true)))
 (let (($x198 (= $x80 true)))
 (let ((?x147 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x147)))
 (let (($x22 (= ?x117 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (= $x22 true)))
 (let (($x156 (= $x46 true)))
 (let (($x112 (= ?x117 input.dst.llvm-%n)))
 (let (($x122 (= $x112 true)))
 (let (($x184 (= $x122 true)))
 (let (($x63 (and $x184 $x156)))
 (let (($x95 (and $x63 $x198)))
 (let (($x32 (and $x95 $x100)))
 (let (($x109 (and $x32 $x129)))
 (let (($x52 (and $x109 $x209)))
 (let (($x207 (and $x52 $x298)))
 (let (($x114 (and $x207 $x301)))
 (let (($x215 (and $x114 $x267)))
 (let (($x341 (and $x215 $x127)))
 (let (($x357 (and $x341 $x224)))
 (let (($x181 (and $x357 $x16)))
 (let (($x203 (and $x181 $x39)))
 (let (($x213 (and $x203 $x121)))
 (let (($x36 (and $x213 $x333)))
 (let (($x349 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (and (not $x349) $x36)))
 (let (($x262 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x262 $x300)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x17 (and $x199 $x164)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x242 (and $x61 $x17)))
 (let (($x35 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd ?x278 (_ bv3 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x284 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x182)))
 (let (($x331 (or false (or false (and (and true (or $x291 $x284)) (or $x157 $x35))))))
 (let (($x5 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x331)))
 (let (($x295 (=> (and $x216 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x331)))
 (let (($x152 (and $x295 $x242)))
 (let (($x31 (=> $x152 $x202)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x201 (forall ((input.ind-%var1695X (_ BitVec 32)) )(let ((?x312 (bvadd (bvmul input.ind-%var1695X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x182 (bvadd ?x278 (_ bv3 32))))
 (let ((?x98 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x234 (store ?x98 (bvadd ?x278 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x270 (store ?x234 (bvadd ?x278 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x24 (store ?x270 ?x182 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x344 (concat (select ?x24 (bvadd ?x312 (_ bv2 32))) (concat (select ?x24 (bvadd ?x312 (_ bv1 32))) (select ?x24 ?x312)))))
 (let ((?x257 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1695X)))
 (let (($x327 (= input.ind-%var1695X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x336 (= (ite $x327 input.spec-%var-i-0.L3%6%bbentry ?x257) (concat (select ?x24 (bvadd ?x312 (_ bv3 32))) ?x344))))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1695X)))
 (let (($x292 (or $x338 $x327)))
 (=> $x292 $x336))))))))))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1694X (_ BitVec 32)) )(let (($x256 (bvule (_ bv0 32) input.ind-%var1694X)))
 (let (($x137 (and $x256 (bvult input.ind-%var1694X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x327 (= input.ind-%var1694X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1694X)))
 (let (($x292 (or $x338 $x327)))
 (= $x292 $x137)))))))
 ))
 (let (($x363 (and $x124 $x201)))
 (let (($x171 (= true true)))
 (let (($x266 (and $x171 $x363)))
 (let (($x202 (= $x266 true)))
 (let (($x146 (forall ((input.ind-%var1687X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1687X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1687X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1686X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1686X)))
 (= $x123 false)))
 ))
 (let (($x271 (and $x287 $x146)))
 (let (($x333 (= $x271 true)))
 (let (($x348 (forall ((input.ind-%var1681X (_ BitVec 32)) )(let ((?x312 (bvadd (bvmul input.ind-%var1681X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x312))))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv2 32))) ?x153)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv3 32))) ?x93)))
 (let ((?x257 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1681X)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1681X)))
 (=> $x338 (= ?x257 ?x113)))))))))
 ))
 (let (($x334 (forall ((input.ind-%var1680X (_ BitVec 32)) )(let (($x256 (bvule (_ bv0 32) input.ind-%var1680X)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1680X)))
 (= $x338 (and $x256 (bvult input.ind-%var1680X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x81 (and $x334 $x348)))
 (let (($x121 (= $x81 true)))
 (let (($x309 (forall ((input.ind-%var1675X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1675X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1675X) (_ bv0 32)))))
 ))
 (let (($x106 (forall ((input.ind-%var1674X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1674X)))
 (= $x123 false)))
 ))
 (let (($x332 (and $x106 $x309)))
 (let (($x39 (= $x332 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x326 (bvneg ?x135)))
 (let (($x193 (= ?x326 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x193 true)))
 (let (($x16 (= $x19 true)))
 (let ((?x74 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x324 (= (_ bv0 2) ?x74)))
 (let (($x258 (= $x324 true)))
 (let (($x224 (= $x258 true)))
 (let (($x353 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x127 (= $x345 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x274 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x274 true)))
 (let (($x211 (= $x96 true)))
 (let (($x301 (= $x211 true)))
 (let (($x329 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x246 (= $x329 true)))
 (let (($x276 (= $x246 true)))
 (let (($x298 (= $x276 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let ((?x244 (bvsub ?x278 ?x87)))
 (let (($x103 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x278 ?x244) (bvult ?x278 ?x244))))
 (let (($x252 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x43 (ite $x252 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x84)))
 (let ((?x212 ((_ extract 63 32) ?x245)))
 (let (($x159 (= ?x212 ?x43)))
 (let (($x42 (and $x159 $x103)))
 (let (($x218 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x48 (and $x218 $x42)))
 (let (($x208 (= true $x48)))
 (let (($x216 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (=> $x216 $x208)))
 (let (($x226 (= $x44 true)))
 (let (($x253 (= $x226 true)))
 (let (($x209 (= $x253 true)))
 (let (($x65 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x29 (= $x65 true)))
 (let (($x76 (= $x29 true)))
 (let (($x129 (= $x76 true)))
 (let (($x139 (= $x216 true)))
 (let (($x178 (= $x139 true)))
 (let (($x100 (= $x178 true)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x170)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x56)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x173)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x53)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x206 $x101)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x28 $x180)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x6 $x15)))
 (let (($x136 (not $x200)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x20 $x125)))
 (let (($x130 (and (not $x18) $x136)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x138 $x165)))
 (let (($x186 (not $x172)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x205 $x62)))
 (let (($x91 (and (not $x68) $x186)))
 (let (($x115 (and (and (and (and (and (and $x91 $x130) $x189) $x166) $x167) $x49) $x187)))
 (let (($x26 (and $x115 $x51)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x150 (or false (or false (and (and true (or $x21 $x23)) (or $x9 $x260))))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x104 (and $x78 $x26)))
 (let (($x194 (= $x104 true)))
 (let (($x80 (= $x194 true)))
 (let (($x198 (= $x80 true)))
 (let ((?x147 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x147)))
 (let (($x22 (= ?x117 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (= $x22 true)))
 (let (($x156 (= $x46 true)))
 (let (($x112 (= ?x117 input.dst.llvm-%n)))
 (let (($x122 (= $x112 true)))
 (let (($x184 (= $x122 true)))
 (let (($x63 (and $x184 $x156)))
 (let (($x95 (and $x63 $x198)))
 (let (($x32 (and $x95 $x100)))
 (let (($x109 (and $x32 $x129)))
 (let (($x52 (and $x109 $x209)))
 (let (($x207 (and $x52 $x298)))
 (let (($x114 (and $x207 $x301)))
 (let (($x215 (and $x114 $x267)))
 (let (($x341 (and $x215 $x127)))
 (let (($x357 (and $x341 $x224)))
 (let (($x181 (and $x357 $x16)))
 (let (($x203 (and $x181 $x39)))
 (let (($x213 (and $x203 $x121)))
 (let (($x36 (and $x213 $x333)))
 (let (($x349 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (and (not $x349) $x36)))
 (let (($x262 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x262 $x300)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x17 (and $x199 $x164)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x242 (and $x61 $x17)))
 (let (($x35 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd ?x278 (_ bv3 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x284 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x182)))
 (let (($x331 (or false (or false (and (and true (or $x291 $x284)) (or $x157 $x35))))))
 (let (($x5 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x331)))
 (let (($x295 (=> (and $x216 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x331)))
 (let (($x152 (and $x295 $x242)))
 (let (($x31 (=> $x152 $x202)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x354 (not $x102)))
 (let (($x214 (= $x354 false)))
 (let (($x270 (= $x214 true)))
 (let (($x124 (forall ((input.ind-%var1713X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1713X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1713X) (_ bv0 32)))))
 ))
 (let (($x327 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1712X)))
 (= $x301 false)))
 ))
 (let (($x69 (and $x327 $x124)))
 (let (($x75 (= $x69 true)))
 (let (($x36 (forall ((input.ind-%var1707X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var1707X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x153))))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x153 (_ bv2 32))) ?x240)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x153 (_ bv3 32))) ?x121)))
 (let ((?x203 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1707X)))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1707X)))
 (=> $x193 (= ?x203 ?x146)))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1706X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var1706X) (bvult input.ind-%var1706X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1706X)))
 (= $x193 $x281))))
 ))
 (let (($x300 (and $x217 $x36)))
 (let (($x164 (= $x300 true)))
 (let (($x324 (forall ((input.ind-%var1701X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1701X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1701X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1700X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1700X)))
 (= $x301 false)))
 ))
 (let (($x258 (and $x317 $x324)))
 (let (($x224 (= $x258 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x52)))
 (let (($x246 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x246 true)))
 (let (($x298 (= $x276 true)))
 (let ((?x184 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x184)))
 (let (($x44 (= ?x22 input.dst.llvm-%n)))
 (let (($x226 (= $x44 true)))
 (let (($x253 (= $x226 true)))
 (let (($x351 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x351 true)))
 (let (($x42 (= $x103 true)))
 (let (($x48 (= $x42 true)))
 (let (($x43 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x43 true)))
 (let (($x286 (= $x159 true)))
 (let (($x244 (= $x286 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x212 (= $x245 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x95)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x80)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x187 $x170)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x56 $x51)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x28 $x206)))
 (let (($x101 (not $x53)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x188 $x166)))
 (let (($x167 (and (not $x37) $x101)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x136 $x130)))
 (let (($x174 (not $x219)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x150 $x78)))
 (let (($x145 (and (not $x200) $x174)))
 (let (($x29 (and (and (and (and (and (and $x145 $x167) $x173) $x60) $x26) $x194) $x198)))
 (let (($x76 (and $x29 $x139)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x163 (or false (or false (and (and true (or $x105 $x138)) (or $x186 $x91))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x129 (and $x15 $x76)))
 (let (($x109 (= $x129 true)))
 (let (($x183 (= $x109 true)))
 (let (($x222 (= $x183 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x9 (= $x89 true)))
 (let (($x260 (= $x9 true)))
 (let (($x27 (= $x260 true)))
 (let ((?x175 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x50 (= (_ bv0 2) ?x175)))
 (let (($x21 (= $x50 true)))
 (let (($x23 (= $x21 true)))
 (let (($x46 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (= $x46 true)))
 (let (($x63 (= $x156 true)))
 (let (($x142 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x147 (= $x142 true)))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x169 (and $x112 $x63)))
 (let (($x149 (and $x169 $x23)))
 (let (($x161 (and $x149 $x27)))
 (let (($x218 (and $x161 $x222)))
 (let (($x252 (and $x218 $x212)))
 (let (($x73 (and $x252 $x244)))
 (let (($x208 (and $x73 $x48)))
 (let (($x209 (and $x208 $x253)))
 (let (($x207 (and $x209 $x298)))
 (let (($x357 (and $x207 $x224)))
 (let (($x17 (and $x357 $x164)))
 (let (($x70 (and $x17 $x75)))
 (let (($x232 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x98 (and $x232 $x70)))
 (let (($x361 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x155 (and $x361 $x98)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x335 (and $x38 $x155)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let (($x241 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x284 (bvadd ?x278 (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x284)))
 (let (($x45 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x284)))
 (let (($x295 (or false (or false (and (and true (or $x279 $x45)) (or $x71 $x241))))))
 (let (($x61 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x295)))
 (let (($x254 (=> (and $x102 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x295)))
 (let (($x234 (and $x254 $x335)))
 (let (($x14 (=> $x234 $x270)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x354 (not $x102)))
 (let (($x214 (= $x354 false)))
 (let (($x270 (= $x214 true)))
 (let (($x124 (forall ((input.ind-%var1713X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1713X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1713X) (_ bv0 32)))))
 ))
 (let (($x327 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1712X)))
 (= $x301 false)))
 ))
 (let (($x69 (and $x327 $x124)))
 (let (($x75 (= $x69 true)))
 (let (($x36 (forall ((input.ind-%var1707X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var1707X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x153))))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x153 (_ bv2 32))) ?x240)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x153 (_ bv3 32))) ?x121)))
 (let ((?x203 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1707X)))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1707X)))
 (=> $x193 (= ?x203 ?x146)))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1706X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var1706X) (bvult input.ind-%var1706X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1706X)))
 (= $x193 $x281))))
 ))
 (let (($x300 (and $x217 $x36)))
 (let (($x164 (= $x300 true)))
 (let (($x324 (forall ((input.ind-%var1701X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1701X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1701X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1700X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1700X)))
 (= $x301 false)))
 ))
 (let (($x258 (and $x317 $x324)))
 (let (($x224 (= $x258 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x52)))
 (let (($x246 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x246 true)))
 (let (($x298 (= $x276 true)))
 (let ((?x184 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x184)))
 (let (($x44 (= ?x22 input.dst.llvm-%n)))
 (let (($x226 (= $x44 true)))
 (let (($x253 (= $x226 true)))
 (let (($x351 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x351 true)))
 (let (($x42 (= $x103 true)))
 (let (($x48 (= $x42 true)))
 (let (($x43 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x43 true)))
 (let (($x286 (= $x159 true)))
 (let (($x244 (= $x286 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x212 (= $x245 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x95)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x80)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x187 $x170)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x56 $x51)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x28 $x206)))
 (let (($x101 (not $x53)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x188 $x166)))
 (let (($x167 (and (not $x37) $x101)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x136 $x130)))
 (let (($x174 (not $x219)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x150 $x78)))
 (let (($x145 (and (not $x200) $x174)))
 (let (($x29 (and (and (and (and (and (and $x145 $x167) $x173) $x60) $x26) $x194) $x198)))
 (let (($x76 (and $x29 $x139)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x163 (or false (or false (and (and true (or $x105 $x138)) (or $x186 $x91))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x129 (and $x15 $x76)))
 (let (($x109 (= $x129 true)))
 (let (($x183 (= $x109 true)))
 (let (($x222 (= $x183 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x9 (= $x89 true)))
 (let (($x260 (= $x9 true)))
 (let (($x27 (= $x260 true)))
 (let ((?x175 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x50 (= (_ bv0 2) ?x175)))
 (let (($x21 (= $x50 true)))
 (let (($x23 (= $x21 true)))
 (let (($x46 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (= $x46 true)))
 (let (($x63 (= $x156 true)))
 (let (($x142 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x147 (= $x142 true)))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x169 (and $x112 $x63)))
 (let (($x149 (and $x169 $x23)))
 (let (($x161 (and $x149 $x27)))
 (let (($x218 (and $x161 $x222)))
 (let (($x252 (and $x218 $x212)))
 (let (($x73 (and $x252 $x244)))
 (let (($x208 (and $x73 $x48)))
 (let (($x209 (and $x208 $x253)))
 (let (($x207 (and $x209 $x298)))
 (let (($x357 (and $x207 $x224)))
 (let (($x17 (and $x357 $x164)))
 (let (($x70 (and $x17 $x75)))
 (let (($x232 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x98 (and $x232 $x70)))
 (let (($x361 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x155 (and $x361 $x98)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x335 (and $x38 $x155)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let (($x241 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x284 (bvadd ?x278 (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x284)))
 (let (($x45 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x284)))
 (let (($x295 (or false (or false (and (and true (or $x279 $x45)) (or $x71 $x241))))))
 (let (($x61 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x295)))
 (let (($x254 (=> (and $x102 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x295)))
 (let (($x234 (and $x254 $x335)))
 (let (($x14 (=> $x234 $x270)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x456f6880)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x456f6880)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x456f6880)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x456f6880)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x456f6880)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!1 (bvmul #x00000004 x!0))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x456f6880 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x0c68937c)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0c68937c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5821f9d4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xcc84a770)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0c68937c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0c68937c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xcc84a773)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5821f9d7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xcc84a770)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5821f9d4)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x0c68937c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!9 (bvmul #x00000004 x!0)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0c68937c x!0)
         (ite (bvule #x0c68937d x!0) #x0c68937d #x0c68937c)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x304 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (not $x304)))
 (let (($x273 (=> $x228 $x137)))
 (let (($x362 (= $x273 true)))
 (let (($x220 (= $x362 true)))
 (let (($x242 (forall ((input.ind-%var1763X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1763X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1763X) (_ bv0 32)))))
 ))
 (let (($x225 (forall ((input.ind-%var1762X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1762X)))
 (= $x263 false)))
 ))
 (let (($x152 (and $x225 $x242)))
 (let (($x123 (= $x152 true)))
 (let (($x312 (forall ((input.ind-%var1757X (_ BitVec 32)) )(let ((?x267 (bvadd (bvmul input.ind-%var1757X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x135)))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x274)))
 (let ((?x124 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1757X)))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1757X)))
 (=> $x81 (= ?x124 ?x33)))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1756X (_ BitVec 32)) )(let (($x333 (and (bvule (_ bv0 32) input.ind-%var1756X) (bvult input.ind-%var1756X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1756X)))
 (= $x81 $x333))))
 ))
 (let (($x110 (and $x300 $x312)))
 (let (($x334 (= $x110 true)))
 (let (($x316 (forall ((input.ind-%var1751X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1751X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1751X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var1750X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1750X)))
 (= $x263 false)))
 ))
 (let (($x153 (and $x224 $x316)))
 (let (($x213 (= $x153 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x246)))
 (let (($x298 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x298 true)))
 (let (($x211 (= $x207 true)))
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x103)))
 (let (($x253 (= ?x42 input.dst.llvm-%n)))
 (let (($x209 (= $x253 true)))
 (let (($x52 (= $x209 true)))
 (let (($x48 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (= $x48 true)))
 (let (($x44 (= $x208 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x159 (= $x43 true)))
 (let (($x286 (= $x159 true)))
 (let (($x244 (= $x286 true)))
 (let (($x141 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x212 (= $x245 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (= $x129 true)))
 (let (($x183 (= $x109 true)))
 (let (($x222 (= $x183 true)))
 (let (($x198 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x29 (= $x198 true)))
 (let (($x95 (= $x29 true)))
 (let (($x139 (= $x95 true)))
 (let (($x26 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x140 (= $x26 true)))
 (let (($x104 (= $x140 true)))
 (let (($x194 (= $x104 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x53)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x28)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x174)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x219 $x145)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x130 $x188)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x20 $x125)))
 (let (($x163 (not $x18)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x172 $x186)))
 (let (($x150 (and (not $x91) $x163)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x62 $x6)))
 (let (($x105 (not $x68)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (and $x184 $x22)))
 (let (($x165 (and (not $x205) $x105)))
 (let (($x49 (and (and (and (and (and (and $x165 $x150) $x200) $x136) $x166) $x180) $x206)))
 (let (($x60 (and $x49 $x101)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x260 (or false (or false (and (and true (or $x169 $x59)) (or $x21 $x23))))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x260)))
 (let (($x32 (and $x161 $x60)))
 (let (($x56 (= $x32 true)))
 (let (($x187 (= $x56 true)))
 (let (($x115 (= $x187 true)))
 (let ((?x142 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x147 (= (_ bv0 2) ?x142)))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x170 (and $x112 $x115)))
 (let (($x65 (and $x170 $x194)))
 (let (($x76 (and $x65 $x139)))
 (let (($x218 (and $x76 $x222)))
 (let (($x252 (and $x218 $x212)))
 (let (($x73 (and $x252 $x244)))
 (let (($x226 (and $x73 $x44)))
 (let (($x329 (and $x226 $x52)))
 (let (($x301 (and $x329 $x211)))
 (let (($x287 (and $x301 $x213)))
 (let (($x257 (and $x287 $x334)))
 (let (($x215 (and $x257 $x123)))
 (let (($x349 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x341 (and $x349 $x215)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x54 (and $x311 $x341)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x171 (and $x185 $x54)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let (($x331 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd ?x278 (_ bv3 32))))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x157 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x45)))
 (let (($x254 (or false (or false (and (and true (or $x227 $x157)) (or $x330 $x331))))))
 (let (($x38 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x254)))
 (let (($x144 (=> (and $x304 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x254)))
 (let (($x332 (and $x144 $x171)))
 (let (($x191 (=> $x332 $x220)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x304 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (not $x304)))
 (let (($x273 (=> $x228 $x137)))
 (let (($x362 (= $x273 true)))
 (let (($x220 (= $x362 true)))
 (let (($x242 (forall ((input.ind-%var1763X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1763X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1763X) (_ bv0 32)))))
 ))
 (let (($x225 (forall ((input.ind-%var1762X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1762X)))
 (= $x263 false)))
 ))
 (let (($x152 (and $x225 $x242)))
 (let (($x123 (= $x152 true)))
 (let (($x312 (forall ((input.ind-%var1757X (_ BitVec 32)) )(let ((?x267 (bvadd (bvmul input.ind-%var1757X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x135)))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x274)))
 (let ((?x124 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1757X)))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1757X)))
 (=> $x81 (= ?x124 ?x33)))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1756X (_ BitVec 32)) )(let (($x333 (and (bvule (_ bv0 32) input.ind-%var1756X) (bvult input.ind-%var1756X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1756X)))
 (= $x81 $x333))))
 ))
 (let (($x110 (and $x300 $x312)))
 (let (($x334 (= $x110 true)))
 (let (($x316 (forall ((input.ind-%var1751X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1751X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1751X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var1750X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1750X)))
 (= $x263 false)))
 ))
 (let (($x153 (and $x224 $x316)))
 (let (($x213 (= $x153 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x246)))
 (let (($x298 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x298 true)))
 (let (($x211 (= $x207 true)))
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x103)))
 (let (($x253 (= ?x42 input.dst.llvm-%n)))
 (let (($x209 (= $x253 true)))
 (let (($x52 (= $x209 true)))
 (let (($x48 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (= $x48 true)))
 (let (($x44 (= $x208 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x159 (= $x43 true)))
 (let (($x286 (= $x159 true)))
 (let (($x244 (= $x286 true)))
 (let (($x141 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x212 (= $x245 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (= $x129 true)))
 (let (($x183 (= $x109 true)))
 (let (($x222 (= $x183 true)))
 (let (($x198 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x29 (= $x198 true)))
 (let (($x95 (= $x29 true)))
 (let (($x139 (= $x95 true)))
 (let (($x26 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x140 (= $x26 true)))
 (let (($x104 (= $x140 true)))
 (let (($x194 (= $x104 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x53)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x28)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x174)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x219 $x145)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x130 $x188)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x20 $x125)))
 (let (($x163 (not $x18)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x172 $x186)))
 (let (($x150 (and (not $x91) $x163)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x62 $x6)))
 (let (($x105 (not $x68)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (and $x184 $x22)))
 (let (($x165 (and (not $x205) $x105)))
 (let (($x49 (and (and (and (and (and (and $x165 $x150) $x200) $x136) $x166) $x180) $x206)))
 (let (($x60 (and $x49 $x101)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x260 (or false (or false (and (and true (or $x169 $x59)) (or $x21 $x23))))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x260)))
 (let (($x32 (and $x161 $x60)))
 (let (($x56 (= $x32 true)))
 (let (($x187 (= $x56 true)))
 (let (($x115 (= $x187 true)))
 (let ((?x142 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x147 (= (_ bv0 2) ?x142)))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x170 (and $x112 $x115)))
 (let (($x65 (and $x170 $x194)))
 (let (($x76 (and $x65 $x139)))
 (let (($x218 (and $x76 $x222)))
 (let (($x252 (and $x218 $x212)))
 (let (($x73 (and $x252 $x244)))
 (let (($x226 (and $x73 $x44)))
 (let (($x329 (and $x226 $x52)))
 (let (($x301 (and $x329 $x211)))
 (let (($x287 (and $x301 $x213)))
 (let (($x257 (and $x287 $x334)))
 (let (($x215 (and $x257 $x123)))
 (let (($x349 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x341 (and $x349 $x215)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x54 (and $x311 $x341)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x171 (and $x185 $x54)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x87)))
 (let (($x331 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd ?x278 (_ bv3 32))))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x157 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x45)))
 (let (($x254 (or false (or false (and (and true (or $x227 $x157)) (or $x330 $x331))))))
 (let (($x38 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x254)))
 (let (($x144 (=> (and $x304 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x254)))
 (let (($x332 (and $x144 $x171)))
 (let (($x191 (=> $x332 $x220)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 83
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x266 (forall ((input.ind-%var1787X (_ BitVec 32)) )(let ((?x332 (bvadd (bvmul input.ind-%var1787X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x332))))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv2 32))) ?x362)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv3 32))) ?x235)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1787X)))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1787X)))
 (=> $x81 (= ?x181 ?x113)))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1786X (_ BitVec 32)) )(let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1786X)))
 (= $x81 (and (bvule (_ bv0 32) input.ind-%var1786X) (bvult input.ind-%var1786X input.dst.llvm-%n)))))
 ))
 (let (($x202 (and $x217 $x266)))
 (let (($x19 (= true true)))
 (let (($x31 (and $x19 $x202)))
 (let (($x116 (= $x31 true)))
 (let (($x148 (forall ((input.ind-%var1781X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1781X)))
 (=> $x209 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1781X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var1780X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1780X)))
 (= $x209 false)))
 ))
 (let (($x270 (and $x93 $x148)))
 (let (($x14 (= $x270 true)))
 (let (($x281 (forall ((input.ind-%var1775X (_ BitVec 32)) )(let ((?x332 (bvadd (bvmul input.ind-%var1775X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x332))))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv2 32))) ?x362)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv3 32))) ?x235)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1775X)))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1775X)))
 (=> $x81 (= ?x181 ?x113)))))))))
 ))
 (let (($x96 (forall ((input.ind-%var1774X (_ BitVec 32)) )(let (($x75 (bvule (_ bv0 32) input.ind-%var1774X)))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1774X)))
 (= $x81 (and $x75 (bvult input.ind-%var1774X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x357 (and $x96 $x281)))
 (let (($x106 (= $x357 true)))
 (let (($x203 (forall ((input.ind-%var1769X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1769X)))
 (=> $x209 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1769X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var1768X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1768X)))
 (= $x209 false)))
 ))
 (let (($x256 (and $x276 $x203)))
 (let (($x316 (= $x256 true)))
 (let ((?x144 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x337 (bvneg ?x144)))
 (let (($x103 (= ?x337 input.dst.llvm-%n)))
 (let (($x42 (= $x103 true)))
 (let (($x48 (= $x42 true)))
 (let ((?x159 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x286 (= (_ bv0 2) ?x159)))
 (let (($x244 (= $x286 true)))
 (let (($x73 (= $x244 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (= $x218 true)))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (not $x139)))
 (let (($x129 (= $x76 true)))
 (let (($x109 (= $x129 true)))
 (let (($x183 (= $x109 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x32)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x101)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (and $x173 $x100)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x166 $x28)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x200 $x178)))
 (let (($x136 (not $x189)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x150 $x167)))
 (let (($x130 (and (not $x78) $x136)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x91 $x15)))
 (let (($x125 (not $x20)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x169 $x59)))
 (let (($x163 (and (not $x186) $x125)))
 (let (($x140 (and (and (and (and (and (and $x163 $x130) $x174) $x188) $x206) $x53) $x60)))
 (let (($x104 (and $x140 $x56)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x149)))
 (let (($x105 (or false (or false (and (and true (or $x89 $x9)) (or $x205 $x138))))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x105)))
 (let (($x194 (and $x172 $x104)))
 (let (($x65 (= $x194 true)))
 (let (($x80 (= $x65 true)))
 (let (($x198 (= $x80 true)))
 (let (($x147 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x46 (= $x112 true)))
 (let (($x262 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (= $x262 true)))
 (let (($x349 (= $x232 true)))
 (let (($x57 (= $x349 true)))
 (let (($x185 (= ?x337 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (= $x185 true)))
 (let (($x361 (= $x199 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x295 (= $x5 true)))
 (let (($x61 (= $x295 true)))
 (let (($x254 (= $x61 true)))
 (let ((?x107 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x107)))
 (let (($x35 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x330 (= $x35 true)))
 (let (($x241 (= $x330 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x45 (= $x291 true)))
 (let (($x227 (= $x45 true)))
 (let (($x279 (= $x227 true)))
 (let (($x331 (and $x279 $x241)))
 (let (($x38 (and $x331 $x254)))
 (let (($x311 (and $x38 $x361)))
 (let (($x142 (and $x311 $x57)))
 (let (($x156 (and $x142 $x46)))
 (let (($x29 (and $x156 $x198)))
 (let (($x222 (and $x29 $x183)))
 (let (($x212 (and $x222 $x245)))
 (let (($x351 (and $x212 $x73)))
 (let (($x208 (and $x351 $x48)))
 (let (($x153 (and $x208 $x316)))
 (let (($x164 (and $x153 $x106)))
 (let (($x335 (and $x164 $x14)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x261 $x335)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (and $x360 $x234)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x354 (and $x255 $x155)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x216 $x354)))
 (let (($x41 (=> $x24 $x116)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x266 (forall ((input.ind-%var1787X (_ BitVec 32)) )(let ((?x332 (bvadd (bvmul input.ind-%var1787X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x332))))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv2 32))) ?x362)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv3 32))) ?x235)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1787X)))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1787X)))
 (=> $x81 (= ?x181 ?x113)))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1786X (_ BitVec 32)) )(let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1786X)))
 (= $x81 (and (bvule (_ bv0 32) input.ind-%var1786X) (bvult input.ind-%var1786X input.dst.llvm-%n)))))
 ))
 (let (($x202 (and $x217 $x266)))
 (let (($x19 (= true true)))
 (let (($x31 (and $x19 $x202)))
 (let (($x116 (= $x31 true)))
 (let (($x148 (forall ((input.ind-%var1781X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1781X)))
 (=> $x209 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1781X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var1780X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1780X)))
 (= $x209 false)))
 ))
 (let (($x270 (and $x93 $x148)))
 (let (($x14 (= $x270 true)))
 (let (($x281 (forall ((input.ind-%var1775X (_ BitVec 32)) )(let ((?x332 (bvadd (bvmul input.ind-%var1775X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x332))))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv2 32))) ?x362)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv3 32))) ?x235)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1775X)))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1775X)))
 (=> $x81 (= ?x181 ?x113)))))))))
 ))
 (let (($x96 (forall ((input.ind-%var1774X (_ BitVec 32)) )(let (($x75 (bvule (_ bv0 32) input.ind-%var1774X)))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1774X)))
 (= $x81 (and $x75 (bvult input.ind-%var1774X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x357 (and $x96 $x281)))
 (let (($x106 (= $x357 true)))
 (let (($x203 (forall ((input.ind-%var1769X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1769X)))
 (=> $x209 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1769X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var1768X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1768X)))
 (= $x209 false)))
 ))
 (let (($x256 (and $x276 $x203)))
 (let (($x316 (= $x256 true)))
 (let ((?x144 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x337 (bvneg ?x144)))
 (let (($x103 (= ?x337 input.dst.llvm-%n)))
 (let (($x42 (= $x103 true)))
 (let (($x48 (= $x42 true)))
 (let ((?x159 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x286 (= (_ bv0 2) ?x159)))
 (let (($x244 (= $x286 true)))
 (let (($x73 (= $x244 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (= $x218 true)))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (not $x139)))
 (let (($x129 (= $x76 true)))
 (let (($x109 (= $x129 true)))
 (let (($x183 (= $x109 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x32)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x101)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (and $x173 $x100)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x166 $x28)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x200 $x178)))
 (let (($x136 (not $x189)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x150 $x167)))
 (let (($x130 (and (not $x78) $x136)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x91 $x15)))
 (let (($x125 (not $x20)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x169 $x59)))
 (let (($x163 (and (not $x186) $x125)))
 (let (($x140 (and (and (and (and (and (and $x163 $x130) $x174) $x188) $x206) $x53) $x60)))
 (let (($x104 (and $x140 $x56)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x149)))
 (let (($x105 (or false (or false (and (and true (or $x89 $x9)) (or $x205 $x138))))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x105)))
 (let (($x194 (and $x172 $x104)))
 (let (($x65 (= $x194 true)))
 (let (($x80 (= $x65 true)))
 (let (($x198 (= $x80 true)))
 (let (($x147 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x46 (= $x112 true)))
 (let (($x262 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (= $x262 true)))
 (let (($x349 (= $x232 true)))
 (let (($x57 (= $x349 true)))
 (let (($x185 (= ?x337 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (= $x185 true)))
 (let (($x361 (= $x199 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x295 (= $x5 true)))
 (let (($x61 (= $x295 true)))
 (let (($x254 (= $x61 true)))
 (let ((?x107 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x107)))
 (let (($x35 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x330 (= $x35 true)))
 (let (($x241 (= $x330 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x45 (= $x291 true)))
 (let (($x227 (= $x45 true)))
 (let (($x279 (= $x227 true)))
 (let (($x331 (and $x279 $x241)))
 (let (($x38 (and $x331 $x254)))
 (let (($x311 (and $x38 $x361)))
 (let (($x142 (and $x311 $x57)))
 (let (($x156 (and $x142 $x46)))
 (let (($x29 (and $x156 $x198)))
 (let (($x222 (and $x29 $x183)))
 (let (($x212 (and $x222 $x245)))
 (let (($x351 (and $x212 $x73)))
 (let (($x208 (and $x351 $x48)))
 (let (($x153 (and $x208 $x316)))
 (let (($x164 (and $x153 $x106)))
 (let (($x335 (and $x164 $x14)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x261 $x335)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (and $x360 $x234)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x354 (and $x255 $x155)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x216 $x354)))
 (let (($x41 (=> $x24 $x116)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 84
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x353 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x154 (not $x353)))
 (let (($x344 (or $x353 $x154)))
 (let (($x355 (= $x344 true)))
 (let (($x329 (= $x355 true)))
 (let (($x326 (forall ((input.ind-%var1805X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1805X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1805X) (_ bv0 32)))))
 ))
 (let (($x348 (forall ((input.ind-%var1804X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1804X)))
 (= $x39 false)))
 ))
 (let (($x25 (and $x348 $x326)))
 (let (($x336 (= $x25 true)))
 (let (($x110 (forall ((input.ind-%var1799X (_ BitVec 32)) )(let ((?x146 (bvadd (bvmul input.ind-%var1799X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x146))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv2 32))) ?x274)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv3 32))) ?x123)))
 (let ((?x217 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1799X)))
 (let (($x164 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1799X)))
 (=> $x164 (= ?x217 ?x248)))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1798X (_ BitVec 32)) )(let (($x354 (and (bvule (_ bv0 32) input.ind-%var1798X) (bvult input.ind-%var1798X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x164 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1798X)))
 (= $x164 $x354))))
 ))
 (let (($x242 (and $x19 $x110)))
 (let (($x215 (= $x242 true)))
 (let (($x113 (forall ((input.ind-%var1793X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1793X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1793X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var1792X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1792X)))
 (= $x39 false)))
 ))
 (let (($x69 (and $x285 $x113)))
 (let (($x74 (= $x69 true)))
 (let ((?x316 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x316)))
 (let (($x81 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x81 true)))
 (let (($x124 (= $x75 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x175)))
 (let (($x224 (= ?x50 input.dst.llvm-%n)))
 (let (($x250 (= $x224 true)))
 (let (($x203 (= $x250 true)))
 (let (($x253 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x209 (= $x253 true)))
 (let (($x246 (= $x209 true)))
 (let (($x276 (= $x246 true)))
 (let (($x351 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x351 true)))
 (let (($x42 (= $x103 true)))
 (let (($x48 (= $x42 true)))
 (let (($x43 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x43 true)))
 (let (($x286 (= $x159 true)))
 (let (($x244 (= $x286 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x29)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x80)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (and $x60 $x32)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x101 $x56)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x173 $x37)))
 (let (($x100 (not $x180)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x188 $x170)))
 (let (($x206 (and (not $x166) $x100)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x130 $x187)))
 (let (($x174 (not $x219)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x172 $x169)))
 (let (($x145 (and (not $x136) $x174)))
 (let (($x222 (and (and (and (and (and (and $x145 $x206) $x49) $x26) $x104) $x65) $x198)))
 (let (($x218 (and $x222 $x95)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x200 (or false (or false (and (and true (or $x91 $x15)) (or $x163 $x150))))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x200)))
 (let (($x141 (and $x189 $x218)))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x212 (= $x245 true)))
 (let (($x22 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x138 (= $x22 true)))
 (let (($x62 (= $x138 true)))
 (let (($x6 (= $x62 true)))
 (let ((?x9 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x260 (= (_ bv0 2) ?x9)))
 (let (($x161 (= $x260 true)))
 (let (($x184 (= $x161 true)))
 (let (($x165 (= ?x50 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (= $x165 true)))
 (let (($x149 (= $x21 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x46 (= $x112 true)))
 (let (($x89 (and $x46 $x149)))
 (let (($x205 (and $x89 $x184)))
 (let (($x68 (and $x205 $x6)))
 (let (($x252 (and $x68 $x212)))
 (let (($x73 (and $x252 $x244)))
 (let (($x208 (and $x73 $x48)))
 (let (($x301 (and $x208 $x276)))
 (let (($x256 (and $x301 $x203)))
 (let (($x345 (and $x256 $x124)))
 (let (($x281 (and $x345 $x74)))
 (let (($x70 (and $x281 $x215)))
 (let (($x314 (and $x70 $x336)))
 (let (($x349 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (and $x349 $x314)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x325 (and $x311 $x12)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x185 $x325)))
 (let ((?x255 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x255)))
 (let (($x5 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd ?x87 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x107 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x38 (or false (or false (and (and true (or $x157 $x107)) (or $x331 $x5))))))
 (let (($x337 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x38)))
 (let (($x360 (=> (and $x353 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x38)))
 (let (($x288 (and $x360 $x292)))
 (let (($x263 (=> $x288 $x329)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x353 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x154 (not $x353)))
 (let (($x344 (or $x353 $x154)))
 (let (($x355 (= $x344 true)))
 (let (($x329 (= $x355 true)))
 (let (($x326 (forall ((input.ind-%var1805X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1805X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1805X) (_ bv0 32)))))
 ))
 (let (($x348 (forall ((input.ind-%var1804X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1804X)))
 (= $x39 false)))
 ))
 (let (($x25 (and $x348 $x326)))
 (let (($x336 (= $x25 true)))
 (let (($x110 (forall ((input.ind-%var1799X (_ BitVec 32)) )(let ((?x146 (bvadd (bvmul input.ind-%var1799X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x146))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv2 32))) ?x274)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv3 32))) ?x123)))
 (let ((?x217 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1799X)))
 (let (($x164 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1799X)))
 (=> $x164 (= ?x217 ?x248)))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1798X (_ BitVec 32)) )(let (($x354 (and (bvule (_ bv0 32) input.ind-%var1798X) (bvult input.ind-%var1798X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x164 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1798X)))
 (= $x164 $x354))))
 ))
 (let (($x242 (and $x19 $x110)))
 (let (($x215 (= $x242 true)))
 (let (($x113 (forall ((input.ind-%var1793X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1793X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1793X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var1792X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1792X)))
 (= $x39 false)))
 ))
 (let (($x69 (and $x285 $x113)))
 (let (($x74 (= $x69 true)))
 (let ((?x316 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x316)))
 (let (($x81 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x81 true)))
 (let (($x124 (= $x75 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x175)))
 (let (($x224 (= ?x50 input.dst.llvm-%n)))
 (let (($x250 (= $x224 true)))
 (let (($x203 (= $x250 true)))
 (let (($x253 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x209 (= $x253 true)))
 (let (($x246 (= $x209 true)))
 (let (($x276 (= $x246 true)))
 (let (($x351 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x351 true)))
 (let (($x42 (= $x103 true)))
 (let (($x48 (= $x42 true)))
 (let (($x43 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x43 true)))
 (let (($x286 (= $x159 true)))
 (let (($x244 (= $x286 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x29)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x80)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (and $x60 $x32)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x101 $x56)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x173 $x37)))
 (let (($x100 (not $x180)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x188 $x170)))
 (let (($x206 (and (not $x166) $x100)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x130 $x187)))
 (let (($x174 (not $x219)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x172 $x169)))
 (let (($x145 (and (not $x136) $x174)))
 (let (($x222 (and (and (and (and (and (and $x145 $x206) $x49) $x26) $x104) $x65) $x198)))
 (let (($x218 (and $x222 $x95)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x200 (or false (or false (and (and true (or $x91 $x15)) (or $x163 $x150))))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x200)))
 (let (($x141 (and $x189 $x218)))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x212 (= $x245 true)))
 (let (($x22 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x138 (= $x22 true)))
 (let (($x62 (= $x138 true)))
 (let (($x6 (= $x62 true)))
 (let ((?x9 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x260 (= (_ bv0 2) ?x9)))
 (let (($x161 (= $x260 true)))
 (let (($x184 (= $x161 true)))
 (let (($x165 (= ?x50 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (= $x165 true)))
 (let (($x149 (= $x21 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x147 true)))
 (let (($x112 (= $x117 true)))
 (let (($x46 (= $x112 true)))
 (let (($x89 (and $x46 $x149)))
 (let (($x205 (and $x89 $x184)))
 (let (($x68 (and $x205 $x6)))
 (let (($x252 (and $x68 $x212)))
 (let (($x73 (and $x252 $x244)))
 (let (($x208 (and $x73 $x48)))
 (let (($x301 (and $x208 $x276)))
 (let (($x256 (and $x301 $x203)))
 (let (($x345 (and $x256 $x124)))
 (let (($x281 (and $x345 $x74)))
 (let (($x70 (and $x281 $x215)))
 (let (($x314 (and $x70 $x336)))
 (let (($x349 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (and $x349 $x314)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x325 (and $x311 $x12)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x185 $x325)))
 (let ((?x255 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvadd input.dst.llvm-%m ?x255)))
 (let (($x5 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd ?x87 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x107 (bvugt ?x87 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x38 (or false (or false (and (and true (or $x157 $x107)) (or $x331 $x5))))))
 (let (($x337 (=> (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32))) $x38)))
 (let (($x360 (=> (and $x353 (bvule ?x87 (bvsub (bvadd ?x87 (_ bv4 32)) (_ bv1 32)))) $x38)))
 (let (($x288 (and $x360 $x292)))
 (let (($x263 (=> $x288 $x329)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 85
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x345 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x181 (= (_ bv0 2) ?x345)))
 (let (($x39 (= $x181 true)))
 (let (($x250 (forall ((input.ind-%var1811X (_ BitVec 32)) )(let (($x286 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1811X)))
 (=> $x286 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1811X) (_ bv0 32)))))
 ))
 (let (($x103 (forall ((input.ind-%var1810X (_ BitVec 32)) )(let (($x286 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1810X)))
 (= $x286 false)))
 ))
 (let (($x203 (and $x103 $x250)))
 (let (($x256 (= $x203 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x218 (concat ?x95 (concat ?x198 (concat ?x65 ?x109)))))
 (let (($x141 (= ?x218 input.dst.llvm-%m)))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x101 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x60 (= $x101 true)))
 (let (($x140 (= $x60 true)))
 (let (($x32 (= $x140 true)))
 (let (($x206 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x139 (= $x206 true)))
 (let (($x51 (= $x139 true)))
 (let (($x49 (= $x51 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x115)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x169)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x167)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x150 $x78)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x163 $x79)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x68 $x59)))
 (let (($x178 (not $x186)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x138 $x62)))
 (let (($x91 (and (not $x6) $x178)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x9 $x260)))
 (let (($x184 (not $x161)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x182 $x185)))
 (let (($x22 (and (not $x23) $x184)))
 (let (($x170 (and (and (and (and (and (and $x22 $x91) $x20) $x125) $x200) $x172) $x136)))
 (let (($x166 (and $x170 $x130)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x349 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x21 (or false (or false (and (and true (or $x349 $x57)) (or $x46 $x156))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x28 (and $x89 $x166)))
 (let (($x173 (= $x28 true)))
 (let (($x37 (= $x173 true)))
 (let (($x180 (= $x37 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x295 (concat ?x5 (concat ?x35 (concat ?x157 ?x227)))))
 (let (($x254 (= ?x295 input.dst.llvm-%n)))
 (let (($x38 (= $x254 true)))
 (let (($x337 (= $x38 true)))
 (let (($x100 (and $x337 $x180)))
 (let (($x76 (and $x100 $x49)))
 (let (($x56 (and $x76 $x32)))
 (let (($x212 (and $x56 $x245)))
 (let (($x316 (and $x212 $x256)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (and $x261 $x316)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x81 (and $x102 $x153)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x75 (and $x94 $x81)))
 (let (($x332 (=> $x75 $x39)))
 (not $x332))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x345 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x181 (= (_ bv0 2) ?x345)))
 (let (($x39 (= $x181 true)))
 (let (($x250 (forall ((input.ind-%var1811X (_ BitVec 32)) )(let (($x286 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1811X)))
 (=> $x286 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1811X) (_ bv0 32)))))
 ))
 (let (($x103 (forall ((input.ind-%var1810X (_ BitVec 32)) )(let (($x286 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1810X)))
 (= $x286 false)))
 ))
 (let (($x203 (and $x103 $x250)))
 (let (($x256 (= $x203 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x218 (concat ?x95 (concat ?x198 (concat ?x65 ?x109)))))
 (let (($x141 (= ?x218 input.dst.llvm-%m)))
 (let (($x84 (= $x141 true)))
 (let (($x245 (= $x84 true)))
 (let (($x101 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x60 (= $x101 true)))
 (let (($x140 (= $x60 true)))
 (let (($x32 (= $x140 true)))
 (let (($x206 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x139 (= $x206 true)))
 (let (($x51 (= $x139 true)))
 (let (($x49 (= $x51 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x115)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x169)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x167)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x150 $x78)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x163 $x79)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x68 $x59)))
 (let (($x178 (not $x186)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x138 $x62)))
 (let (($x91 (and (not $x6) $x178)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x9 $x260)))
 (let (($x184 (not $x161)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x182 $x185)))
 (let (($x22 (and (not $x23) $x184)))
 (let (($x170 (and (and (and (and (and (and $x22 $x91) $x20) $x125) $x200) $x172) $x136)))
 (let (($x166 (and $x170 $x130)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x349 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x21 (or false (or false (and (and true (or $x349 $x57)) (or $x46 $x156))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x28 (and $x89 $x166)))
 (let (($x173 (= $x28 true)))
 (let (($x37 (= $x173 true)))
 (let (($x180 (= $x37 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x295 (concat ?x5 (concat ?x35 (concat ?x157 ?x227)))))
 (let (($x254 (= ?x295 input.dst.llvm-%n)))
 (let (($x38 (= $x254 true)))
 (let (($x337 (= $x38 true)))
 (let (($x100 (and $x337 $x180)))
 (let (($x76 (and $x100 $x49)))
 (let (($x56 (and $x76 $x32)))
 (let (($x212 (and $x56 $x245)))
 (let (($x316 (and $x212 $x256)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (and $x261 $x316)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x81 (and $x102 $x153)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x75 (and $x94 $x81)))
 (let (($x332 (=> $x75 $x39)))
 (not $x332))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 86
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x73)))
 (let (($x48 (= ?x246 input.dst.llvm-%n)))
 (let (($x276 (= $x48 true)))
 (let (($x360 (forall ((input.ind-%var1817X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1817X)))
 (=> $x224 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1817X) (_ bv0 32)))))
 ))
 (let (($x316 (forall ((input.ind-%var1816X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1816X)))
 (= $x224 false)))
 ))
 (let (($x104 (and $x316 $x360)))
 (let (($x144 (= $x104 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x245 (concat ?x84 (concat ?x222 (concat ?x65 ?x198)))))
 (let (($x212 (= ?x245 input.dst.llvm-%n)))
 (let (($x159 (= $x212 true)))
 (let (($x286 (= $x159 true)))
 (let (($x140 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x32 (= $x140 true)))
 (let (($x56 (= $x32 true)))
 (let (($x29 (= $x56 true)))
 (let (($x76 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x53 (= $x76 true)))
 (let (($x26 (= $x53 true)))
 (let (($x129 (= $x26 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x188)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x189)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x150)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x163 $x167)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x174 $x78)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x59 $x186)))
 (let (($x91 (not $x178)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x6 $x18)))
 (let (($x15 (and (not $x68) $x91)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x260 $x161)))
 (let (($x22 (not $x184)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x149 $x311)))
 (let (($x62 (and (not $x9) $x22)))
 (let (($x28 (and (and (and (and (and (and $x62 $x15) $x20) $x125) $x79) $x145) $x172)))
 (let (($x173 (and $x28 $x169)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x185 (or false (or false (and (and true (or $x147 $x117)) (or $x50 $x165))))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x185)))
 (let (($x37 (and $x205 $x173)))
 (let (($x180 (= $x37 true)))
 (let (($x100 (= $x180 true)))
 (let (($x206 (= $x100 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x295 (concat ?x157 (concat ?x107 ?x241)))))
 (let (($x38 (= ?x61 input.dst.llvm-%m)))
 (let (($x337 (= $x38 true)))
 (let (($x199 (= $x337 true)))
 (let (($x139 (and $x199 $x206)))
 (let (($x101 (and $x139 $x129)))
 (let (($x95 (and $x101 $x29)))
 (let (($x351 (and $x95 $x286)))
 (let (($x244 (and $x351 $x144)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x209 (and $x87 $x244)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x216 $x209)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x252 (and $x353 $x208)))
 (let (($x287 (=> $x252 $x276)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x73)))
 (let (($x48 (= ?x246 input.dst.llvm-%n)))
 (let (($x276 (= $x48 true)))
 (let (($x360 (forall ((input.ind-%var1817X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1817X)))
 (=> $x224 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1817X) (_ bv0 32)))))
 ))
 (let (($x316 (forall ((input.ind-%var1816X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1816X)))
 (= $x224 false)))
 ))
 (let (($x104 (and $x316 $x360)))
 (let (($x144 (= $x104 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x245 (concat ?x84 (concat ?x222 (concat ?x65 ?x198)))))
 (let (($x212 (= ?x245 input.dst.llvm-%n)))
 (let (($x159 (= $x212 true)))
 (let (($x286 (= $x159 true)))
 (let (($x140 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x32 (= $x140 true)))
 (let (($x56 (= $x32 true)))
 (let (($x29 (= $x56 true)))
 (let (($x76 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x53 (= $x76 true)))
 (let (($x26 (= $x53 true)))
 (let (($x129 (= $x26 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x188)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x189)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x150)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x163 $x167)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x174 $x78)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x59 $x186)))
 (let (($x91 (not $x178)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x6 $x18)))
 (let (($x15 (and (not $x68) $x91)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x260 $x161)))
 (let (($x22 (not $x184)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x149 $x311)))
 (let (($x62 (and (not $x9) $x22)))
 (let (($x28 (and (and (and (and (and (and $x62 $x15) $x20) $x125) $x79) $x145) $x172)))
 (let (($x173 (and $x28 $x169)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x185 (or false (or false (and (and true (or $x147 $x117)) (or $x50 $x165))))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x185)))
 (let (($x37 (and $x205 $x173)))
 (let (($x180 (= $x37 true)))
 (let (($x100 (= $x180 true)))
 (let (($x206 (= $x100 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x295 (concat ?x157 (concat ?x107 ?x241)))))
 (let (($x38 (= ?x61 input.dst.llvm-%m)))
 (let (($x337 (= $x38 true)))
 (let (($x199 (= $x337 true)))
 (let (($x139 (and $x199 $x206)))
 (let (($x101 (and $x139 $x129)))
 (let (($x95 (and $x101 $x29)))
 (let (($x351 (and $x95 $x286)))
 (let (($x244 (and $x351 $x144)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x209 (and $x87 $x244)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x216 $x209)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x252 (and $x353 $x208)))
 (let (($x287 (=> $x252 $x276)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 87
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x253 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x253)))
 (let (($x181 (= ?x203 input.spec-%var-n-1)))
 (let (($x81 (= $x181 true)))
 (let (($x191 (forall ((input.ind-%var1823X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1823X)))
 (=> $x285 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1823X) (_ bv0 32)))))
 ))
 (let (($x244 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1822X)))
 (= $x285 false)))
 ))
 (let (($x361 (and $x244 $x191)))
 (let (($x291 (= $x361 true)))
 (let (($x286 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x351 (= $x286 true)))
 (let (($x301 (= $x351 true)))
 (let (($x224 (= $x301 true)))
 (let (($x109 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x218 (= $x109 true)))
 (let (($x245 (= $x218 true)))
 (let (($x212 (= $x245 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x26)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x76)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (and $x37 $x100)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x173 $x206)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x200 $x145)))
 (let (($x189 (not $x166)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (and $x78 $x79)))
 (let (($x28 (and (not $x130) $x189)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x125 $x115)))
 (let (($x163 (not $x174)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x149 $x311)))
 (let (($x167 (and (not $x219) $x163)))
 (let (($x29 (and (and (and (and (and (and $x167 $x28) $x188) $x169) $x139) $x49) $x53)))
 (let (($x95 (and $x29 $x129)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x136 (or false (or false (and (and true (or $x22 $x62)) (or $x59 $x186))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x141 (and $x170 $x95)))
 (let (($x84 (= $x141 true)))
 (let (($x183 (= $x84 true)))
 (let (($x222 (= $x183 true)))
 (let ((?x262 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x50 (concat ?x46 (concat ?x147 ?x262)))))
 (let (($x21 (= ?x175 input.dst.llvm-%m)))
 (let (($x89 (= $x21 true)))
 (let (($x182 (= $x89 true)))
 (let ((?x330 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x254 (concat ?x61 (concat ?x107 (concat ?x35 ?x330)))))
 (let (($x337 (= ?x254 input.dst.llvm-%n)))
 (let (($x199 (= $x337 true)))
 (let (($x232 (= $x199 true)))
 (let (($x185 (and $x232 $x182)))
 (let (($x194 (and $x185 $x222)))
 (let (($x159 (and $x194 $x212)))
 (let (($x256 (and $x159 $x224)))
 (let (($x80 (and $x256 $x291)))
 (let (($x255 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (and $x255 $x80)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x345 (and $x278 $x250)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x75 (and $x94 $x345)))
 (let (($x39 (=> $x75 $x81)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x253 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x253)))
 (let (($x181 (= ?x203 input.spec-%var-n-1)))
 (let (($x81 (= $x181 true)))
 (let (($x191 (forall ((input.ind-%var1823X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1823X)))
 (=> $x285 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1823X) (_ bv0 32)))))
 ))
 (let (($x244 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1822X)))
 (= $x285 false)))
 ))
 (let (($x361 (and $x244 $x191)))
 (let (($x291 (= $x361 true)))
 (let (($x286 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x351 (= $x286 true)))
 (let (($x301 (= $x351 true)))
 (let (($x224 (= $x301 true)))
 (let (($x109 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x218 (= $x109 true)))
 (let (($x245 (= $x218 true)))
 (let (($x212 (= $x245 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x26)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x76)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (and $x37 $x100)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x173 $x206)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x200 $x145)))
 (let (($x189 (not $x166)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (and $x78 $x79)))
 (let (($x28 (and (not $x130) $x189)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x125 $x115)))
 (let (($x163 (not $x174)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x149 $x311)))
 (let (($x167 (and (not $x219) $x163)))
 (let (($x29 (and (and (and (and (and (and $x167 $x28) $x188) $x169) $x139) $x49) $x53)))
 (let (($x95 (and $x29 $x129)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x136 (or false (or false (and (and true (or $x22 $x62)) (or $x59 $x186))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x141 (and $x170 $x95)))
 (let (($x84 (= $x141 true)))
 (let (($x183 (= $x84 true)))
 (let (($x222 (= $x183 true)))
 (let ((?x262 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x50 (concat ?x46 (concat ?x147 ?x262)))))
 (let (($x21 (= ?x175 input.dst.llvm-%m)))
 (let (($x89 (= $x21 true)))
 (let (($x182 (= $x89 true)))
 (let ((?x330 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x254 (concat ?x61 (concat ?x107 (concat ?x35 ?x330)))))
 (let (($x337 (= ?x254 input.dst.llvm-%n)))
 (let (($x199 (= $x337 true)))
 (let (($x232 (= $x199 true)))
 (let (($x185 (and $x232 $x182)))
 (let (($x194 (and $x185 $x222)))
 (let (($x159 (and $x194 $x212)))
 (let (($x256 (and $x159 $x224)))
 (let (($x80 (and $x256 $x291)))
 (let (($x255 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (and $x255 $x80)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x345 (and $x278 $x250)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x75 (and $x94 $x345)))
 (let (($x39 (=> $x75 $x81)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 88
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (forall ((input.ind-%var1835X (_ BitVec 32)) )(let ((?x333 (bvadd (bvmul input.ind-%var1835X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem ?x333))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv2 32))) ?x248))))
 (=> false (= (_ bv0 32) ?x70))))))
 ))
 (let (($x69 (forall ((input.ind-%var1834X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1834X) (bvult input.ind-%var1834X (_ bv0 32)))))
 ))
 (let (($x336 (and $x69 $x25)))
 (let (($x316 (= true true)))
 (let (($x314 (and $x316 $x336)))
 (let (($x12 (= $x314 true)))
 (let (($x42 (forall ((input.ind-%var1829X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1829X)))
 (=> $x287 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1829X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var1828X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1828X)))
 (= $x287 false)))
 ))
 (let (($x205 (and $x80 $x42)))
 (let (($x349 (= $x205 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x224 (concat ?x301 (concat ?x159 (concat ?x218 ?x198)))))
 (let (($x256 (= ?x224 input.dst.llvm-%m)))
 (let (($x332 (= $x256 true)))
 (let (($x285 (= $x332 true)))
 (let (($x141 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x84 (= $x141 true)))
 (let (($x183 (= $x84 true)))
 (let (($x222 (= $x183 true)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (= $x49 true)))
 (let (($x76 (= $x56 true)))
 (let (($x53 (= $x76 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x28)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x166)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (and $x167 $x79)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (and $x163 $x130)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x136 $x170)))
 (let (($x311 (not $x149)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x178 $x91)))
 (let (($x150 (and (not $x15) $x311)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x6 $x18)))
 (let (($x59 (not $x68)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x50 $x117)))
 (let (($x186 (and (not $x62) $x59)))
 (let (($x37 (and (and (and (and (and (and $x186 $x150) $x115) $x174) $x172) $x145) $x189)))
 (let (($x180 (and $x37 $x101)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x184 (or false (or false (and (and true (or $x112 $x175)) (or $x185 $x9))))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x100 (and $x161 $x180)))
 (let (($x206 (= $x100 true)))
 (let (($x139 (= $x206 true)))
 (let (($x32 (= $x139 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x254 (concat ?x35 (concat ?x157 ?x227)))))
 (let (($x199 (= ?x38 input.dst.llvm-%n)))
 (let (($x232 (= $x199 true)))
 (let (($x23 (= $x232 true)))
 (let (($x51 (and $x23 $x32)))
 (let (($x29 (and $x51 $x53)))
 (let (($x194 (and $x29 $x222)))
 (let (($x144 (and $x194 $x285)))
 (let (($x331 (and $x144 $x349)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x360 (and $x102 $x331)))
 (let (($x284 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x73 (and $x284 $x360)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x252 (and $x353 $x73)))
 (let (($x325 (=> $x252 $x12)))
 (not $x325)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (forall ((input.ind-%var1835X (_ BitVec 32)) )(let ((?x333 (bvadd (bvmul input.ind-%var1835X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem ?x333))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv2 32))) ?x248))))
 (=> false (= (_ bv0 32) ?x70))))))
 ))
 (let (($x69 (forall ((input.ind-%var1834X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1834X) (bvult input.ind-%var1834X (_ bv0 32)))))
 ))
 (let (($x336 (and $x69 $x25)))
 (let (($x316 (= true true)))
 (let (($x314 (and $x316 $x336)))
 (let (($x12 (= $x314 true)))
 (let (($x42 (forall ((input.ind-%var1829X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1829X)))
 (=> $x287 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1829X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var1828X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1828X)))
 (= $x287 false)))
 ))
 (let (($x205 (and $x80 $x42)))
 (let (($x349 (= $x205 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x224 (concat ?x301 (concat ?x159 (concat ?x218 ?x198)))))
 (let (($x256 (= ?x224 input.dst.llvm-%m)))
 (let (($x332 (= $x256 true)))
 (let (($x285 (= $x332 true)))
 (let (($x141 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x84 (= $x141 true)))
 (let (($x183 (= $x84 true)))
 (let (($x222 (= $x183 true)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (= $x49 true)))
 (let (($x76 (= $x56 true)))
 (let (($x53 (= $x76 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x28)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x166)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (and $x167 $x79)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (and $x163 $x130)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x136 $x170)))
 (let (($x311 (not $x149)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x178 $x91)))
 (let (($x150 (and (not $x15) $x311)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x6 $x18)))
 (let (($x59 (not $x68)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x50 $x117)))
 (let (($x186 (and (not $x62) $x59)))
 (let (($x37 (and (and (and (and (and (and $x186 $x150) $x115) $x174) $x172) $x145) $x189)))
 (let (($x180 (and $x37 $x101)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x184 (or false (or false (and (and true (or $x112 $x175)) (or $x185 $x9))))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x100 (and $x161 $x180)))
 (let (($x206 (= $x100 true)))
 (let (($x139 (= $x206 true)))
 (let (($x32 (= $x139 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x254 (concat ?x35 (concat ?x157 ?x227)))))
 (let (($x199 (= ?x38 input.dst.llvm-%n)))
 (let (($x232 (= $x199 true)))
 (let (($x23 (= $x232 true)))
 (let (($x51 (and $x23 $x32)))
 (let (($x29 (and $x51 $x53)))
 (let (($x194 (and $x29 $x222)))
 (let (($x144 (and $x194 $x285)))
 (let (($x331 (and $x144 $x349)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x360 (and $x102 $x331)))
 (let (($x284 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x73 (and $x284 $x360)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x252 (and $x353 $x73)))
 (let (($x325 (=> $x252 $x12)))
 (not $x325)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 89
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x274 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x123 (= $x274 true)))
 (let (($x44 (= $x123 true)))
 (let (($x164 (forall ((input.ind-%var1841X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1841X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1841X) (_ bv0 32)))))
 ))
 (let (($x331 (forall ((input.ind-%var1840X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1840X)))
 (= $x39 false)))
 ))
 (let (($x226 (and $x331 $x164)))
 (let (($x333 (= $x226 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x285 (concat ?x332 (concat ?x286 (concat ?x218 ?x159)))))
 (let (($x144 (= ?x285 input.dst.llvm-%n)))
 (let (($x276 (= $x144 true)))
 (let (($x287 (= $x276 true)))
 (let (($x183 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x222 (= $x183 true)))
 (let (($x194 (= $x222 true)))
 (let (($x351 (= $x194 true)))
 (let (($x29 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x26 (= $x29 true)))
 (let (($x129 (= $x26 true)))
 (let (($x95 (= $x129 true)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x173)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x200)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x167)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x163 $x78)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x169 $x79)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x311 (and $x170 $x149)))
 (let (($x150 (not $x311)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x15 $x219)))
 (let (($x125 (and (not $x136) $x150)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x18 $x68)))
 (let (($x186 (not $x59)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x22 $x147)))
 (let (($x91 (and (not $x6) $x186)))
 (let (($x100 (and (and (and (and (and (and $x91 $x125) $x115) $x174) $x130) $x140) $x145)))
 (let (($x206 (and $x100 $x166)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x117 (or false (or false (and (and true (or $x21 $x89)) (or $x20 $x260))))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x117)))
 (let (($x139 (and $x187 $x206)))
 (let (($x32 (= $x139 true)))
 (let (($x51 (= $x32 true)))
 (let (($x49 (= $x51 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x337 (concat ?x38 (concat ?x157 (concat ?x107 ?x241)))))
 (let (($x232 (= ?x337 input.dst.llvm-%m)))
 (let (($x23 (= $x232 true)))
 (let (($x46 (= $x23 true)))
 (let (($x56 (and $x46 $x49)))
 (let (($x141 (and $x56 $x95)))
 (let (($x301 (and $x141 $x351)))
 (let (($x291 (and $x301 $x287)))
 (let (($x242 (and $x291 $x333)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and $x216 $x242)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x128 $x215)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x94 $x312)))
 (let (($x248 (=> $x259 $x44)))
 (not $x248))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x274 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x123 (= $x274 true)))
 (let (($x44 (= $x123 true)))
 (let (($x164 (forall ((input.ind-%var1841X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1841X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1841X) (_ bv0 32)))))
 ))
 (let (($x331 (forall ((input.ind-%var1840X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1840X)))
 (= $x39 false)))
 ))
 (let (($x226 (and $x331 $x164)))
 (let (($x333 (= $x226 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x285 (concat ?x332 (concat ?x286 (concat ?x218 ?x159)))))
 (let (($x144 (= ?x285 input.dst.llvm-%n)))
 (let (($x276 (= $x144 true)))
 (let (($x287 (= $x276 true)))
 (let (($x183 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x222 (= $x183 true)))
 (let (($x194 (= $x222 true)))
 (let (($x351 (= $x194 true)))
 (let (($x29 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x26 (= $x29 true)))
 (let (($x129 (= $x26 true)))
 (let (($x95 (= $x129 true)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x173)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x200)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x167)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x163 $x78)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x169 $x79)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x311 (and $x170 $x149)))
 (let (($x150 (not $x311)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x15 $x219)))
 (let (($x125 (and (not $x136) $x150)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x18 $x68)))
 (let (($x186 (not $x59)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x22 $x147)))
 (let (($x91 (and (not $x6) $x186)))
 (let (($x100 (and (and (and (and (and (and $x91 $x125) $x115) $x174) $x130) $x140) $x145)))
 (let (($x206 (and $x100 $x166)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x117 (or false (or false (and (and true (or $x21 $x89)) (or $x20 $x260))))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x117)))
 (let (($x139 (and $x187 $x206)))
 (let (($x32 (= $x139 true)))
 (let (($x51 (= $x32 true)))
 (let (($x49 (= $x51 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x337 (concat ?x38 (concat ?x157 (concat ?x107 ?x241)))))
 (let (($x232 (= ?x337 input.dst.llvm-%m)))
 (let (($x23 (= $x232 true)))
 (let (($x46 (= $x23 true)))
 (let (($x56 (and $x46 $x49)))
 (let (($x141 (and $x56 $x95)))
 (let (($x301 (and $x141 $x351)))
 (let (($x291 (and $x301 $x287)))
 (let (($x242 (and $x291 $x333)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and $x216 $x242)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x128 $x215)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x94 $x312)))
 (let (($x248 (=> $x259 $x44)))
 (not $x248))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 90
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x194 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x205 (=> $x194 true)))
 (let (($x153 (= $x205 true)))
 (let (($x73 (= $x153 true)))
 (let (($x71 (forall ((input.ind-%var1847X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1847X)))
 (=> $x69 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1847X) (_ bv0 32)))))
 ))
 (let (($x242 (forall ((input.ind-%var1846X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1846X)))
 (= $x69 false)))
 ))
 (let (($x212 (and $x242 $x71)))
 (let (($x42 (= $x212 true)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x287 (concat ?x276 (concat ?x224 (concat ?x218 ?x286)))))
 (let (($x291 (= ?x287 input.dst.llvm-%m)))
 (let (($x81 (= $x291 true)))
 (let (($x39 (= $x81 true)))
 (let (($x351 (= $x194 true)))
 (let (($x301 (= $x351 true)))
 (let (($x256 (= $x301 true)))
 (let (($x29 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x26 (= $x29 true)))
 (let (($x129 (= $x26 true)))
 (let (($x95 (= $x129 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x180)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x172)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x163)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x169 $x167)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x28 $x78)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x149 $x311)))
 (let (($x125 (not $x150)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x136 $x188)))
 (let (($x115 (and (not $x170) $x125)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x68 $x59)))
 (let (($x91 (not $x186)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x62 $x262)))
 (let (($x219 (and (not $x18) $x91)))
 (let (($x139 (and (and (and (and (and (and $x219 $x115) $x60) $x174) $x79) $x101) $x140)))
 (let (($x32 (and $x139 $x200)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x147 (or false (or false (and (and true (or $x182 $x9)) (or $x161 $x50))))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x51 (and $x178 $x32)))
 (let (($x49 (= $x51 true)))
 (let (($x56 (= $x49 true)))
 (let (($x76 (= $x56 true)))
 (let ((?x330 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x199 (concat ?x337 (concat ?x107 (concat ?x35 ?x330)))))
 (let (($x23 (= ?x199 input.dst.llvm-%n)))
 (let (($x46 (= $x23 true)))
 (let (($x57 (= $x46 true)))
 (let (($x53 (and $x57 $x76)))
 (let (($x141 (and $x53 $x95)))
 (let (($x332 (and $x141 $x256)))
 (let (($x349 (and $x332 $x39)))
 (let (($x362 (and $x349 $x42)))
 (let (($x278 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x252 (and $x278 $x362)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x80 (and $x261 $x252)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x353 $x80)))
 (let (($x235 (=> $x103 $x73)))
 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x194 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x205 (=> $x194 true)))
 (let (($x153 (= $x205 true)))
 (let (($x73 (= $x153 true)))
 (let (($x71 (forall ((input.ind-%var1847X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1847X)))
 (=> $x69 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1847X) (_ bv0 32)))))
 ))
 (let (($x242 (forall ((input.ind-%var1846X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1846X)))
 (= $x69 false)))
 ))
 (let (($x212 (and $x242 $x71)))
 (let (($x42 (= $x212 true)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x287 (concat ?x276 (concat ?x224 (concat ?x218 ?x286)))))
 (let (($x291 (= ?x287 input.dst.llvm-%m)))
 (let (($x81 (= $x291 true)))
 (let (($x39 (= $x81 true)))
 (let (($x351 (= $x194 true)))
 (let (($x301 (= $x351 true)))
 (let (($x256 (= $x301 true)))
 (let (($x29 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x26 (= $x29 true)))
 (let (($x129 (= $x26 true)))
 (let (($x95 (= $x129 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x180)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x172)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x163)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x169 $x167)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x28 $x78)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x149 $x311)))
 (let (($x125 (not $x150)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x136 $x188)))
 (let (($x115 (and (not $x170) $x125)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x68 $x59)))
 (let (($x91 (not $x186)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x62 $x262)))
 (let (($x219 (and (not $x18) $x91)))
 (let (($x139 (and (and (and (and (and (and $x219 $x115) $x60) $x174) $x79) $x101) $x140)))
 (let (($x32 (and $x139 $x200)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x147 (or false (or false (and (and true (or $x182 $x9)) (or $x161 $x50))))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x51 (and $x178 $x32)))
 (let (($x49 (= $x51 true)))
 (let (($x56 (= $x49 true)))
 (let (($x76 (= $x56 true)))
 (let ((?x330 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x199 (concat ?x337 (concat ?x107 (concat ?x35 ?x330)))))
 (let (($x23 (= ?x199 input.dst.llvm-%n)))
 (let (($x46 (= $x23 true)))
 (let (($x57 (= $x46 true)))
 (let (($x53 (and $x57 $x76)))
 (let (($x141 (and $x53 $x95)))
 (let (($x332 (and $x141 $x256)))
 (let (($x349 (and $x332 $x39)))
 (let (($x362 (and $x349 $x42)))
 (let (($x278 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x252 (and $x278 $x362)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x80 (and $x261 $x252)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x353 $x80)))
 (let (($x235 (=> $x103 $x73)))
 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 91
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x83 (bvmul (_ bv4294967295 32) ?x251)))
 (let ((?x55 (bvneg ?x83)))
 (let (($x66 (= ?x55 ?x64)))
 (let (($x283 (= $x66 true)))
 (let (($x363 (forall ((input.ind-%var1865X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1865X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1865X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1864X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1864X)))
 (= $x217 false)))
 ))
 (let (($x229 (and $x98 $x363)))
 (let (($x243 (= $x229 true)))
 (let (($x240 (forall ((input.ind-%var1859X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var1859X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x127))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv2 32))) ?x289)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv3 32))) ?x16)))
 (let ((?x96 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1859X)))
 (let (($x304 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1859X)))
 (=> $x304 (= ?x96 ?x114)))))))))
 ))
 (let (($x357 (forall ((input.ind-%var1858X (_ BitVec 32)) )(let (($x47 (and (bvule (_ bv0 32) input.ind-%var1858X) (bvult input.ind-%var1858X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x304 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1858X)))
 (= $x304 $x47))))
 ))
 (let (($x207 (and $x357 $x240)))
 (let (($x258 (= $x207 true)))
 (let (($x154 (forall ((input.ind-%var1853X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1853X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1853X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var1852X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1852X)))
 (= $x217 false)))
 ))
 (let (($x344 (and $x203 $x154)))
 (let (($x355 (= $x344 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x244)))
 (let (($x257 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x257 true)))
 (let (($x202 (= $x225 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x124 (= $x75 true)))
 (let (($x104 (= $x124 true)))
 (let (($x155 (= $x104 true)))
 (let (($x65 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x45 (= $x65 true)))
 (let (($x191 (= $x45 true)))
 (let (($x253 (= $x191 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x325 (= $x12 true)))
 (let (($x292 (= $x325 true)))
 (let (($x87 (= $x292 true)))
 (let (($x348 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x326 (= $x348 true)))
 (let (($x25 (= $x326 true)))
 (let (($x336 (= $x25 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x245 (bvsub ?x128 ?x261)))
 (let (($x259 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x245) (bvult ?x128 ?x245))))
 (let (($x235 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x74 (ite $x235 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x205 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x153 (bvmul (_ bv4 64) ?x205)))
 (let ((?x73 ((_ extract 63 32) ?x153)))
 (let (($x112 (= ?x73 ?x74)))
 (let (($x331 (and $x112 $x259)))
 (let (($x80 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x316 (and $x80 $x331)))
 (let (($x226 (= true $x316)))
 (let (($x102 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (=> $x102 $x226)))
 (let (($x312 (= $x44 true)))
 (let (($x248 (= $x312 true)))
 (let (($x360 (= $x248 true)))
 (let (($x110 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x110 true)))
 (let (($x71 (= $x142 true)))
 (let (($x212 (= $x71 true)))
 (let (($x113 (= $x102 true)))
 (let (($x69 (= $x113 true)))
 (let (($x333 (= $x69 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x276 (= (_ bv0 32) ?x144)))
 (let ((?x256 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x332 (= (_ bv0 32) ?x256)))
 (let ((?x351 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x351)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x222 (and $x141 $x183)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x95 $x222)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (and $x200 $x32)))
 (let (($x49 (not $x51)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x140 $x139)))
 (let (($x76 (and (not $x180) $x49)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x79 $x166)))
 (let (($x101 (not $x130)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x170 $x189)))
 (let (($x172 (and (not $x78) $x101)))
 (let (($x159 (and (and (and (and (and (and $x172 $x76) $x29) $x129) $x194) $x301) $x332)))
 (let (($x285 (and $x159 $x276)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x169 (or false (or false (and (and true (or $x125 $x115)) (or $x60 $x100))))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x169)))
 (let (($x287 (and $x167 $x285)))
 (let (($x291 (= $x287 true)))
 (let (($x81 (= $x291 true)))
 (let (($x39 (= $x81 true)))
 (let ((?x59 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x186 (= (_ bv0 2) ?x59)))
 (let (($x91 (= $x186 true)))
 (let (($x219 (= $x91 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x117)))
 (let (($x62 (= ?x187 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (= $x62 true)))
 (let (($x18 (= $x262 true)))
 (let (($x22 (= ?x187 input.dst.llvm-%n)))
 (let (($x147 (= $x22 true)))
 (let (($x178 (= $x147 true)))
 (let (($x15 (and $x178 $x18)))
 (let (($x136 (and $x15 $x219)))
 (let (($x349 (and $x136 $x39)))
 (let (($x242 (and $x349 $x333)))
 (let (($x42 (and $x242 $x212)))
 (let (($x70 (and $x42 $x360)))
 (let (($x314 (and $x70 $x336)))
 (let (($x156 (and $x314 $x87)))
 (let (($x250 (and $x156 $x253)))
 (let (($x234 (and $x250 $x155)))
 (let (($x213 (and $x234 $x202)))
 (let (($x329 (and $x213 $x355)))
 (let (($x341 (and $x329 $x258)))
 (let (($x30 (and $x341 $x243)))
 (let (($x184 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (and (not $x184) $x30)))
 (let (($x260 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x160 (and $x260 $x34)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x339 (and $x9 $x160)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x299 (and $x185 $x339)))
 (let (($x23 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd ?x128 (_ bv3 32))))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x35 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x21 (or false (or false (and (and true (or $x38 $x35)) (or $x232 $x23))))))
 (let (($x175 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x21)))
 (let (($x278 (=> (and $x102 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x21)))
 (let (($x88 (and $x278 $x299)))
 (let (($x307 (=> $x88 $x283)))
 (not $x307))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x83 (bvmul (_ bv4294967295 32) ?x251)))
 (let ((?x55 (bvneg ?x83)))
 (let (($x66 (= ?x55 ?x64)))
 (let (($x283 (= $x66 true)))
 (let (($x363 (forall ((input.ind-%var1865X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1865X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1865X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1864X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1864X)))
 (= $x217 false)))
 ))
 (let (($x229 (and $x98 $x363)))
 (let (($x243 (= $x229 true)))
 (let (($x240 (forall ((input.ind-%var1859X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var1859X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x127))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv2 32))) ?x289)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv3 32))) ?x16)))
 (let ((?x96 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1859X)))
 (let (($x304 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1859X)))
 (=> $x304 (= ?x96 ?x114)))))))))
 ))
 (let (($x357 (forall ((input.ind-%var1858X (_ BitVec 32)) )(let (($x47 (and (bvule (_ bv0 32) input.ind-%var1858X) (bvult input.ind-%var1858X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x304 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1858X)))
 (= $x304 $x47))))
 ))
 (let (($x207 (and $x357 $x240)))
 (let (($x258 (= $x207 true)))
 (let (($x154 (forall ((input.ind-%var1853X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1853X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1853X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var1852X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1852X)))
 (= $x217 false)))
 ))
 (let (($x344 (and $x203 $x154)))
 (let (($x355 (= $x344 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x244)))
 (let (($x257 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x257 true)))
 (let (($x202 (= $x225 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x124 (= $x75 true)))
 (let (($x104 (= $x124 true)))
 (let (($x155 (= $x104 true)))
 (let (($x65 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x45 (= $x65 true)))
 (let (($x191 (= $x45 true)))
 (let (($x253 (= $x191 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x325 (= $x12 true)))
 (let (($x292 (= $x325 true)))
 (let (($x87 (= $x292 true)))
 (let (($x348 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x326 (= $x348 true)))
 (let (($x25 (= $x326 true)))
 (let (($x336 (= $x25 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x245 (bvsub ?x128 ?x261)))
 (let (($x259 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x245) (bvult ?x128 ?x245))))
 (let (($x235 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x74 (ite $x235 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x205 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x153 (bvmul (_ bv4 64) ?x205)))
 (let ((?x73 ((_ extract 63 32) ?x153)))
 (let (($x112 (= ?x73 ?x74)))
 (let (($x331 (and $x112 $x259)))
 (let (($x80 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x316 (and $x80 $x331)))
 (let (($x226 (= true $x316)))
 (let (($x102 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (=> $x102 $x226)))
 (let (($x312 (= $x44 true)))
 (let (($x248 (= $x312 true)))
 (let (($x360 (= $x248 true)))
 (let (($x110 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x110 true)))
 (let (($x71 (= $x142 true)))
 (let (($x212 (= $x71 true)))
 (let (($x113 (= $x102 true)))
 (let (($x69 (= $x113 true)))
 (let (($x333 (= $x69 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x276 (= (_ bv0 32) ?x144)))
 (let ((?x256 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x332 (= (_ bv0 32) ?x256)))
 (let ((?x351 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x351)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x222 (and $x141 $x183)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x95 $x222)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (and $x200 $x32)))
 (let (($x49 (not $x51)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x140 $x139)))
 (let (($x76 (and (not $x180) $x49)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x79 $x166)))
 (let (($x101 (not $x130)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x170 $x189)))
 (let (($x172 (and (not $x78) $x101)))
 (let (($x159 (and (and (and (and (and (and $x172 $x76) $x29) $x129) $x194) $x301) $x332)))
 (let (($x285 (and $x159 $x276)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x169 (or false (or false (and (and true (or $x125 $x115)) (or $x60 $x100))))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x169)))
 (let (($x287 (and $x167 $x285)))
 (let (($x291 (= $x287 true)))
 (let (($x81 (= $x291 true)))
 (let (($x39 (= $x81 true)))
 (let ((?x59 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x186 (= (_ bv0 2) ?x59)))
 (let (($x91 (= $x186 true)))
 (let (($x219 (= $x91 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x117)))
 (let (($x62 (= ?x187 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (= $x62 true)))
 (let (($x18 (= $x262 true)))
 (let (($x22 (= ?x187 input.dst.llvm-%n)))
 (let (($x147 (= $x22 true)))
 (let (($x178 (= $x147 true)))
 (let (($x15 (and $x178 $x18)))
 (let (($x136 (and $x15 $x219)))
 (let (($x349 (and $x136 $x39)))
 (let (($x242 (and $x349 $x333)))
 (let (($x42 (and $x242 $x212)))
 (let (($x70 (and $x42 $x360)))
 (let (($x314 (and $x70 $x336)))
 (let (($x156 (and $x314 $x87)))
 (let (($x250 (and $x156 $x253)))
 (let (($x234 (and $x250 $x155)))
 (let (($x213 (and $x234 $x202)))
 (let (($x329 (and $x213 $x355)))
 (let (($x341 (and $x329 $x258)))
 (let (($x30 (and $x341 $x243)))
 (let (($x184 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (and (not $x184) $x30)))
 (let (($x260 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x160 (and $x260 $x34)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x339 (and $x9 $x160)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x299 (and $x185 $x339)))
 (let (($x23 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd ?x128 (_ bv3 32))))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x35 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x21 (or false (or false (and (and true (or $x38 $x35)) (or $x232 $x23))))))
 (let (($x175 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x21)))
 (let (($x278 (=> (and $x102 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x21)))
 (let (($x88 (and $x278 $x299)))
 (let (($x307 (=> $x88 $x283)))
 (not $x307))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 92
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x54 (bvule ?x106 (_ bv4294967294 32))))
 (let (($x270 (= $x54 true)))
 (let (($x14 (= $x270 true)))
 (let (($x282 (forall ((input.ind-%var1883X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1883X)))
 (=> $x345 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1883X) (_ bv0 32)))))
 ))
 (let (($x52 (forall ((input.ind-%var1882X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1882X)))
 (= $x345 false)))
 ))
 (let (($x271 (and $x52 $x282)))
 (let (($x33 (= $x271 true)))
 (let (($x19 (forall ((input.ind-%var1877X (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul input.ind-%var1877X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x188))))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv2 32))) ?x181)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv3 32))) ?x148)))
 (let ((?x98 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1877X)))
 (let (($x319 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1877X)))
 (=> $x319 (= ?x98 ?x93)))))))))
 ))
 (let (($x240 (forall ((input.ind-%var1876X (_ BitVec 32)) )(let (($x338 (and (bvule (_ bv0 32) input.ind-%var1876X) (bvult input.ind-%var1876X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x319 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1876X)))
 (= $x319 $x338))))
 ))
 (let (($x298 (and $x240 $x19)))
 (let (($x211 (= $x298 true)))
 (let (($x116 (forall ((input.ind-%var1871X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1871X)))
 (=> $x345 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1871X) (_ bv0 32)))))
 ))
 (let (($x344 (forall ((input.ind-%var1870X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1870X)))
 (= $x345 false)))
 ))
 (let (($x17 (and $x344 $x116)))
 (let (($x127 (= $x17 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x257 (bvneg ?x43)))
 (let (($x225 (= ?x257 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x225 true)))
 (let (($x213 (= $x202 true)))
 (let (($x124 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x104 (= $x124 true)))
 (let (($x155 (= $x104 true)))
 (let (($x234 (= $x155 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x191 (= $x45 true)))
 (let (($x253 (= $x191 true)))
 (let (($x250 (= $x253 true)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x360 (= (_ bv0 32) ?x248)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x312 (= (_ bv0 32) ?x44)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let ((?x164 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x164)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (and $x245 $x123)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x331 (and $x279 $x259)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x362 $x252)))
 (let (($x103 (not $x80)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x71 $x212)))
 (let (($x153 (and (not $x42) $x103)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x69 $x333)))
 (let (($x274 (not $x242)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x222 $x194)))
 (let (($x142 (and (not $x113) $x274)))
 (let (($x314 (and (and (and (and (and (and $x142 $x153) $x235) $x112) $x331) $x226) $x312)))
 (let (($x12 (and $x314 $x360)))
 (let (($x276 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x301 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x301)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x301)))
 (let (($x81 (or false (or false (and (and true (or $x286 $x256)) (or $x144 $x276))))))
 (let (($x349 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x325 (and $x349 $x12)))
 (let (($x292 (= $x325 true)))
 (let (($x87 (= $x292 true)))
 (let (($x156 (= $x87 true)))
 (let (($x129 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x109 (= $x129 true)))
 (let (($x95 (= $x109 true)))
 (let (($x141 (= $x95 true)))
 (let (($x198 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (= $x198 true)))
 (let (($x29 (= $x53 true)))
 (let (($x224 (= $x29 true)))
 (let ((?x200 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x32 (= (_ bv0 2) ?x200)))
 (let (($x51 (= $x32 true)))
 (let (($x49 (= $x51 true)))
 (let ((?x78 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x78)))
 (let (($x172 (= ?x206 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (= $x172 true)))
 (let (($x139 (= $x140 true)))
 (let (($x79 (= ?x206 input.dst.llvm-%n)))
 (let (($x166 (= $x79 true)))
 (let (($x130 (= $x166 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x125 (bvsub ?x128 ?x261)))
 (let (($x60 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x125) (bvult ?x128 ?x125))))
 (let (($x149 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x163 (ite $x149 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x91 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x219 (bvmul (_ bv4 64) ?x91)))
 (let ((?x136 ((_ extract 63 32) ?x219)))
 (let (($x150 (= ?x136 ?x163)))
 (let (($x100 (and $x150 $x60)))
 (let (($x59 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x174 (and $x59 $x100)))
 (let (($x173 (= true $x174)))
 (let (($x284 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x28 (=> $x284 $x173)))
 (let (($x169 (= $x28 true)))
 (let (($x167 (= $x169 true)))
 (let (($x170 (= $x167 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x147 true)))
 (let (($x62 (= $x178 true)))
 (let (($x262 (= $x62 true)))
 (let (($x50 (= $x284 true)))
 (let (($x117 (= $x50 true)))
 (let (($x187 (= $x117 true)))
 (let (($x18 (and $x187 $x262)))
 (let (($x189 (and $x18 $x170)))
 (let (($x101 (and $x189 $x130)))
 (let (($x180 (and $x101 $x139)))
 (let (($x76 (and $x180 $x49)))
 (let (($x26 (and $x76 $x224)))
 (let (($x84 (and $x26 $x141)))
 (let (($x65 (and $x84 $x156)))
 (let (($x75 (and $x65 $x250)))
 (let (($x244 (and $x75 $x234)))
 (let (($x354 (and $x244 $x213)))
 (let (($x342 (and $x354 $x127)))
 (let (($x327 (and $x342 $x211)))
 (let (($x300 (and $x327 $x33)))
 (let (($x92 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and (not $x92) $x300)))
 (let (($x161 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and $x161 $x290)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x20 $x214)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x208 (and $x182 $x137)))
 (let (($x57 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x128 (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x61 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x278 (or false (or false (and (and true (or $x330 $x61)) (or $x46 $x57))))))
 (let (($x185 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x278)))
 (let (($x295 (=> (and $x284 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x278)))
 (let (($x152 (and $x295 $x208)))
 (let (($x201 (=> $x152 $x14)))
 (not $x201))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x54 (bvule ?x106 (_ bv4294967294 32))))
 (let (($x270 (= $x54 true)))
 (let (($x14 (= $x270 true)))
 (let (($x282 (forall ((input.ind-%var1883X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1883X)))
 (=> $x345 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1883X) (_ bv0 32)))))
 ))
 (let (($x52 (forall ((input.ind-%var1882X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1882X)))
 (= $x345 false)))
 ))
 (let (($x271 (and $x52 $x282)))
 (let (($x33 (= $x271 true)))
 (let (($x19 (forall ((input.ind-%var1877X (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul input.ind-%var1877X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x188))))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv2 32))) ?x181)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv3 32))) ?x148)))
 (let ((?x98 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1877X)))
 (let (($x319 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1877X)))
 (=> $x319 (= ?x98 ?x93)))))))))
 ))
 (let (($x240 (forall ((input.ind-%var1876X (_ BitVec 32)) )(let (($x338 (and (bvule (_ bv0 32) input.ind-%var1876X) (bvult input.ind-%var1876X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x319 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1876X)))
 (= $x319 $x338))))
 ))
 (let (($x298 (and $x240 $x19)))
 (let (($x211 (= $x298 true)))
 (let (($x116 (forall ((input.ind-%var1871X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1871X)))
 (=> $x345 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1871X) (_ bv0 32)))))
 ))
 (let (($x344 (forall ((input.ind-%var1870X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1870X)))
 (= $x345 false)))
 ))
 (let (($x17 (and $x344 $x116)))
 (let (($x127 (= $x17 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x257 (bvneg ?x43)))
 (let (($x225 (= ?x257 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x225 true)))
 (let (($x213 (= $x202 true)))
 (let (($x124 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x104 (= $x124 true)))
 (let (($x155 (= $x104 true)))
 (let (($x234 (= $x155 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x191 (= $x45 true)))
 (let (($x253 (= $x191 true)))
 (let (($x250 (= $x253 true)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x360 (= (_ bv0 32) ?x248)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x312 (= (_ bv0 32) ?x44)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let ((?x164 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x164)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (and $x245 $x123)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x331 (and $x279 $x259)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x362 $x252)))
 (let (($x103 (not $x80)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x71 $x212)))
 (let (($x153 (and (not $x42) $x103)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x69 $x333)))
 (let (($x274 (not $x242)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x222 $x194)))
 (let (($x142 (and (not $x113) $x274)))
 (let (($x314 (and (and (and (and (and (and $x142 $x153) $x235) $x112) $x331) $x226) $x312)))
 (let (($x12 (and $x314 $x360)))
 (let (($x276 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x301 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x301)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x301)))
 (let (($x81 (or false (or false (and (and true (or $x286 $x256)) (or $x144 $x276))))))
 (let (($x349 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x325 (and $x349 $x12)))
 (let (($x292 (= $x325 true)))
 (let (($x87 (= $x292 true)))
 (let (($x156 (= $x87 true)))
 (let (($x129 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x109 (= $x129 true)))
 (let (($x95 (= $x109 true)))
 (let (($x141 (= $x95 true)))
 (let (($x198 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (= $x198 true)))
 (let (($x29 (= $x53 true)))
 (let (($x224 (= $x29 true)))
 (let ((?x200 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x32 (= (_ bv0 2) ?x200)))
 (let (($x51 (= $x32 true)))
 (let (($x49 (= $x51 true)))
 (let ((?x78 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x78)))
 (let (($x172 (= ?x206 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (= $x172 true)))
 (let (($x139 (= $x140 true)))
 (let (($x79 (= ?x206 input.dst.llvm-%n)))
 (let (($x166 (= $x79 true)))
 (let (($x130 (= $x166 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x125 (bvsub ?x128 ?x261)))
 (let (($x60 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x125) (bvult ?x128 ?x125))))
 (let (($x149 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x163 (ite $x149 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x91 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x219 (bvmul (_ bv4 64) ?x91)))
 (let ((?x136 ((_ extract 63 32) ?x219)))
 (let (($x150 (= ?x136 ?x163)))
 (let (($x100 (and $x150 $x60)))
 (let (($x59 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x174 (and $x59 $x100)))
 (let (($x173 (= true $x174)))
 (let (($x284 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x28 (=> $x284 $x173)))
 (let (($x169 (= $x28 true)))
 (let (($x167 (= $x169 true)))
 (let (($x170 (= $x167 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x147 true)))
 (let (($x62 (= $x178 true)))
 (let (($x262 (= $x62 true)))
 (let (($x50 (= $x284 true)))
 (let (($x117 (= $x50 true)))
 (let (($x187 (= $x117 true)))
 (let (($x18 (and $x187 $x262)))
 (let (($x189 (and $x18 $x170)))
 (let (($x101 (and $x189 $x130)))
 (let (($x180 (and $x101 $x139)))
 (let (($x76 (and $x180 $x49)))
 (let (($x26 (and $x76 $x224)))
 (let (($x84 (and $x26 $x141)))
 (let (($x65 (and $x84 $x156)))
 (let (($x75 (and $x65 $x250)))
 (let (($x244 (and $x75 $x234)))
 (let (($x354 (and $x244 $x213)))
 (let (($x342 (and $x354 $x127)))
 (let (($x327 (and $x342 $x211)))
 (let (($x300 (and $x327 $x33)))
 (let (($x92 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and (not $x92) $x300)))
 (let (($x161 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and $x161 $x290)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x20 $x214)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x208 (and $x182 $x137)))
 (let (($x57 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x128 (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x61 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x278 (or false (or false (and (and true (or $x330 $x61)) (or $x46 $x57))))))
 (let (($x185 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x278)))
 (let (($x295 (=> (and $x284 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x278)))
 (let (($x152 (and $x295 $x208)))
 (let (($x201 (=> $x152 $x14)))
 (not $x201))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 93
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x258 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x352 (bvule ?x258 (_ bv4294967294 32))))
 (let (($x306 (= $x352 true)))
 (let (($x309 (= $x306 true)))
 (let (($x47 (forall ((input.ind-%var1901X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1901X)))
 (=> $x220 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1901X) (_ bv0 32)))))
 ))
 (let (($x34 (forall ((input.ind-%var1900X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1900X)))
 (= $x220 false)))
 ))
 (let (($x41 (and $x34 $x47)))
 (let (($x335 (= $x41 true)))
 (let (($x30 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let ((?x363 (bvadd (bvmul input.ind-%var1895X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x304 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x363))))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv2 32))) ?x304)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv3 32))) ?x36)))
 (let ((?x52 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1895X)))
 (let (($x246 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1895X)))
 (=> $x246 (= ?x52 ?x217)))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1894X (_ BitVec 32)) )(let (($x266 (and (bvule (_ bv0 32) input.ind-%var1894X) (bvult input.ind-%var1894X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x246 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1894X)))
 (= $x246 $x266))))
 ))
 (let (($x64 (and $x19 $x30)))
 (let (($x66 (= $x64 true)))
 (let (($x229 (forall ((input.ind-%var1889X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1889X)))
 (=> $x220 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1889X) (_ bv0 32)))))
 ))
 (let (($x17 (forall ((input.ind-%var1888X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1888X)))
 (= $x220 false)))
 ))
 (let (($x281 (and $x17 $x229)))
 (let (($x188 (= $x281 true)))
 (let ((?x257 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x257)))
 (let (($x202 (= ?x225 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x202 true)))
 (let (($x354 (= $x213 true)))
 (let (($x104 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x155 (= $x104 true)))
 (let (($x234 (= $x155 true)))
 (let (($x244 (= $x234 true)))
 (let (($x191 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x253 (= $x191 true)))
 (let (($x250 (= $x253 true)))
 (let (($x75 (= $x250 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x336 (bvsub ?x128 ?x261)))
 (let (($x248 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x336) (bvult ?x128 ?x336))))
 (let (($x25 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x316 (ite $x25 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x123 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x259 (bvmul (_ bv4 64) ?x123)))
 (let ((?x331 ((_ extract 63 32) ?x259)))
 (let (($x226 (= ?x331 ?x316)))
 (let (($x360 (and $x226 $x248)))
 (let (($x245 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x12 (and $x245 $x360)))
 (let (($x325 (= true $x12)))
 (let (($x5 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x292 (=> $x5 $x325)))
 (let (($x87 (= $x292 true)))
 (let (($x156 (= $x87 true)))
 (let (($x65 (= $x156 true)))
 (let (($x73 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x235 (= $x73 true)))
 (let (($x348 (= $x235 true)))
 (let (($x74 (= $x348 true)))
 (let (($x80 (= $x5 true)))
 (let (($x103 (= $x80 true)))
 (let (($x153 (= $x103 true)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x194)))
 (let ((?x349 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x349)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x276 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x144)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x285 (and $x159 $x276)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x332 $x285)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x109 $x95)))
 (let (($x84 (not $x141)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x224 $x26)))
 (let (($x351 (and (not $x129) $x84)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x51 $x49)))
 (let (($x198 (not $x76)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x28 $x169)))
 (let (($x29 (and (not $x32) $x198)))
 (let (($x142 (and (and (and (and (and (and $x29 $x351) $x301) $x256) $x287) $x81) $x222)))
 (let (($x71 (and $x142 $x113)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x206 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x180 (or false (or false (and (and true (or $x78 $x206)) (or $x130 $x101))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x180)))
 (let (($x212 (and $x200 $x71)))
 (let (($x42 (= $x212 true)))
 (let (($x205 (= $x42 true)))
 (let (($x362 (= $x205 true)))
 (let (($x145 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x145 true)))
 (let (($x60 (= $x37 true)))
 (let (($x100 (= $x60 true)))
 (let ((?x311 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x163 (= (_ bv0 2) ?x311)))
 (let (($x150 (= $x163 true)))
 (let (($x115 (= $x150 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x262 (bvneg ?x62)))
 (let (($x186 (= ?x262 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x186 true)))
 (let (($x219 (= $x91 true)))
 (let (($x18 (= ?x262 input.dst.llvm-%n)))
 (let (($x15 (= $x18 true)))
 (let (($x68 (= $x15 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x117 true)))
 (let (($x22 (= $x187 true)))
 (let (($x147 (= $x22 true)))
 (let (($x59 (and $x147 $x68)))
 (let (($x136 (and $x59 $x219)))
 (let (($x125 (and $x136 $x115)))
 (let (($x174 (and $x125 $x100)))
 (let (($x252 (and $x174 $x362)))
 (let (($x70 (and $x252 $x153)))
 (let (($x112 (and $x70 $x74)))
 (let (($x45 (and $x112 $x65)))
 (let (($x124 (and $x45 $x75)))
 (let (($x43 (and $x124 $x244)))
 (let (($x203 (and $x43 $x354)))
 (let (($x267 (and $x203 $x188)))
 (let (($x251 (and $x267 $x66)))
 (let (($x171 (and $x251 $x335)))
 (let (($x135 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x289 (and (not $x135) $x171)))
 (let (($x184 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x329 (and $x184 $x289)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x193 (and $x138 $x329)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x307 (and $x89 $x193)))
 (let (($x21 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd ?x128 (_ bv3 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x232 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x295 (or false (or false (and (and true (or $x241 $x232)) (or $x165 $x21))))))
 (let (($x182 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x295)))
 (let (($x337 (=> (and $x5 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x295)))
 (let (($x313 (and $x337 $x307)))
 (let (($x273 (=> $x313 $x309)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x258 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x352 (bvule ?x258 (_ bv4294967294 32))))
 (let (($x306 (= $x352 true)))
 (let (($x309 (= $x306 true)))
 (let (($x47 (forall ((input.ind-%var1901X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1901X)))
 (=> $x220 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1901X) (_ bv0 32)))))
 ))
 (let (($x34 (forall ((input.ind-%var1900X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1900X)))
 (= $x220 false)))
 ))
 (let (($x41 (and $x34 $x47)))
 (let (($x335 (= $x41 true)))
 (let (($x30 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let ((?x363 (bvadd (bvmul input.ind-%var1895X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x304 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x363))))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv2 32))) ?x304)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv3 32))) ?x36)))
 (let ((?x52 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1895X)))
 (let (($x246 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1895X)))
 (=> $x246 (= ?x52 ?x217)))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1894X (_ BitVec 32)) )(let (($x266 (and (bvule (_ bv0 32) input.ind-%var1894X) (bvult input.ind-%var1894X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x246 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1894X)))
 (= $x246 $x266))))
 ))
 (let (($x64 (and $x19 $x30)))
 (let (($x66 (= $x64 true)))
 (let (($x229 (forall ((input.ind-%var1889X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1889X)))
 (=> $x220 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1889X) (_ bv0 32)))))
 ))
 (let (($x17 (forall ((input.ind-%var1888X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1888X)))
 (= $x220 false)))
 ))
 (let (($x281 (and $x17 $x229)))
 (let (($x188 (= $x281 true)))
 (let ((?x257 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x257)))
 (let (($x202 (= ?x225 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x202 true)))
 (let (($x354 (= $x213 true)))
 (let (($x104 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x155 (= $x104 true)))
 (let (($x234 (= $x155 true)))
 (let (($x244 (= $x234 true)))
 (let (($x191 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x253 (= $x191 true)))
 (let (($x250 (= $x253 true)))
 (let (($x75 (= $x250 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x336 (bvsub ?x128 ?x261)))
 (let (($x248 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x336) (bvult ?x128 ?x336))))
 (let (($x25 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x316 (ite $x25 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x123 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x259 (bvmul (_ bv4 64) ?x123)))
 (let ((?x331 ((_ extract 63 32) ?x259)))
 (let (($x226 (= ?x331 ?x316)))
 (let (($x360 (and $x226 $x248)))
 (let (($x245 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x12 (and $x245 $x360)))
 (let (($x325 (= true $x12)))
 (let (($x5 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x292 (=> $x5 $x325)))
 (let (($x87 (= $x292 true)))
 (let (($x156 (= $x87 true)))
 (let (($x65 (= $x156 true)))
 (let (($x73 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x235 (= $x73 true)))
 (let (($x348 (= $x235 true)))
 (let (($x74 (= $x348 true)))
 (let (($x80 (= $x5 true)))
 (let (($x103 (= $x80 true)))
 (let (($x153 (= $x103 true)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x194)))
 (let ((?x349 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x349)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x276 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x144)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x285 (and $x159 $x276)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x332 $x285)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x109 $x95)))
 (let (($x84 (not $x141)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x224 $x26)))
 (let (($x351 (and (not $x129) $x84)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x51 $x49)))
 (let (($x198 (not $x76)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x28 $x169)))
 (let (($x29 (and (not $x32) $x198)))
 (let (($x142 (and (and (and (and (and (and $x29 $x351) $x301) $x256) $x287) $x81) $x222)))
 (let (($x71 (and $x142 $x113)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x206 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x180 (or false (or false (and (and true (or $x78 $x206)) (or $x130 $x101))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x180)))
 (let (($x212 (and $x200 $x71)))
 (let (($x42 (= $x212 true)))
 (let (($x205 (= $x42 true)))
 (let (($x362 (= $x205 true)))
 (let (($x145 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x145 true)))
 (let (($x60 (= $x37 true)))
 (let (($x100 (= $x60 true)))
 (let ((?x311 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x163 (= (_ bv0 2) ?x311)))
 (let (($x150 (= $x163 true)))
 (let (($x115 (= $x150 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x262 (bvneg ?x62)))
 (let (($x186 (= ?x262 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x186 true)))
 (let (($x219 (= $x91 true)))
 (let (($x18 (= ?x262 input.dst.llvm-%n)))
 (let (($x15 (= $x18 true)))
 (let (($x68 (= $x15 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x117 true)))
 (let (($x22 (= $x187 true)))
 (let (($x147 (= $x22 true)))
 (let (($x59 (and $x147 $x68)))
 (let (($x136 (and $x59 $x219)))
 (let (($x125 (and $x136 $x115)))
 (let (($x174 (and $x125 $x100)))
 (let (($x252 (and $x174 $x362)))
 (let (($x70 (and $x252 $x153)))
 (let (($x112 (and $x70 $x74)))
 (let (($x45 (and $x112 $x65)))
 (let (($x124 (and $x45 $x75)))
 (let (($x43 (and $x124 $x244)))
 (let (($x203 (and $x43 $x354)))
 (let (($x267 (and $x203 $x188)))
 (let (($x251 (and $x267 $x66)))
 (let (($x171 (and $x251 $x335)))
 (let (($x135 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x289 (and (not $x135) $x171)))
 (let (($x184 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x329 (and $x184 $x289)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x193 (and $x138 $x329)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x307 (and $x89 $x193)))
 (let (($x21 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd ?x128 (_ bv3 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x232 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x295 (or false (or false (and (and true (or $x241 $x232)) (or $x165 $x21))))))
 (let (($x182 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x295)))
 (let (($x337 (=> (and $x5 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x295)))
 (let (($x313 (and $x337 $x307)))
 (let (($x273 (=> $x313 $x309)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 94
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x90 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x282 (bvadd (bvmul input.ind-%var1927X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x232 (bvadd ?x128 (_ bv3 32))))
 (let ((?x196 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x179 (store ?x196 (bvadd ?x128 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x268 (store ?x179 (bvadd ?x128 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x264 (store ?x268 ?x232 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x302 (concat (select ?x264 (bvadd ?x282 (_ bv2 32))) (concat (select ?x264 (bvadd ?x282 (_ bv1 32))) (select ?x264 ?x282)))))
 (let ((?x34 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1927X)))
 (let (($x118 (= input.ind-%var1927X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x308 (= (ite $x118 input.spec-%var-i-0.L3%6%bbentry ?x34) (concat (select ?x264 (bvadd ?x282 (_ bv3 32))) ?x302))))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1927X)))
 (let (($x303 (or $x207 $x118)))
 (=> $x303 $x308))))))))))))))))
 ))
 (let (($x131 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x217 (bvule (_ bv0 32) input.ind-%var1926X)))
 (let (($x134 (and $x217 (bvult input.ind-%var1926X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x118 (= input.ind-%var1926X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1926X)))
 (let (($x303 (or $x207 $x118)))
 (= $x303 $x134)))))))
 ))
 (let (($x280 (and $x131 $x90)))
 (let (($x211 (= true true)))
 (let (($x190 (and $x211 $x280)))
 (let (($x358 (= $x190 true)))
 (let (($x338 (forall ((input.ind-%var1919X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1919X)))
 (=> $x114 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1919X) (_ bv0 32)))))
 ))
 (let (($x290 (forall ((input.ind-%var1918X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1918X)))
 (= $x114 false)))
 ))
 (let (($x88 (and $x290 $x338)))
 (let (($x105 (= $x88 true)))
 (let (($x300 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let ((?x282 (bvadd (bvmul input.ind-%var1913X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x319 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x319)))
 (let ((?x345 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x263)))
 (let ((?x34 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1913X)))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1913X)))
 (=> $x207 (= ?x34 ?x345)))))))))
 ))
 (let (($x30 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x217 (bvule (_ bv0 32) input.ind-%var1912X)))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1912X)))
 (= $x207 (and $x217 (bvult input.ind-%var1912X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x14 (and $x30 $x300)))
 (let (($x201 (= $x14 true)))
 (let (($x271 (forall ((input.ind-%var1907X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1907X)))
 (=> $x114 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1907X) (_ bv0 32)))))
 ))
 (let (($x281 (forall ((input.ind-%var1906X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1906X)))
 (= $x114 false)))
 ))
 (let (($x121 (and $x281 $x271)))
 (let (($x363 (= $x121 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x225)))
 (let (($x213 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x354 (= $x213 true)))
 (let (($x203 (= $x354 true)))
 (let ((?x155 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x234 (= (_ bv0 2) ?x155)))
 (let (($x244 (= $x234 true)))
 (let (($x43 (= $x244 true)))
 (let (($x191 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x191 true)))
 (let (($x250 (= $x253 true)))
 (let (($x75 (= $x250 true)))
 (let (($x292 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x87 (= $x292 true)))
 (let (($x156 (= $x87 true)))
 (let (($x65 (= $x156 true)))
 (let (($x314 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (= $x314 true)))
 (let (($x360 (= $x248 true)))
 (let (($x12 (= $x360 true)))
 (let (($x316 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x316 true)))
 (let (($x44 (= $x226 true)))
 (let (($x336 (= $x44 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x73 (bvsub ?x128 ?x261)))
 (let (($x112 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x73) (bvult ?x128 ?x73))))
 (let (($x103 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x153 (ite $x103 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x362 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x252 (bvmul (_ bv4 64) ?x362)))
 (let ((?x80 ((_ extract 63 32) ?x252)))
 (let (($x70 (= ?x80 ?x153)))
 (let (($x326 (and $x70 $x112)))
 (let (($x42 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x279 (and $x42 $x326)))
 (let (($x245 (= true $x279)))
 (let (($x6 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x6 $x245)))
 (let (($x123 (= $x164 true)))
 (let (($x259 (= $x123 true)))
 (let (($x331 (= $x259 true)))
 (let (($x349 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x222 (= $x349 true)))
 (let (($x142 (= $x222 true)))
 (let (($x194 (= $x142 true)))
 (let (($x287 (= $x6 true)))
 (let (($x242 (= $x287 true)))
 (let (($x291 (= $x242 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x351 (= (_ bv0 32) ?x84)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x95)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x198 $x224)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x76 $x26)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x140 $x139)))
 (let (($x200 (not $x180)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (and $x130 $x101)))
 (let (($x169 (and (not $x172) $x200)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x56 $x189)))
 (let (($x206 (not $x78)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x59 $x186)))
 (let (($x166 (and (not $x170) $x206)))
 (let (($x256 (and (and (and (and (and (and $x166 $x169) $x53) $x49) $x129) $x109) $x141)))
 (let (($x333 (and $x256 $x351)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x311 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x100 (or false (or false (and (and true (or $x149 $x311)) (or $x115 $x125))))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x332 (and $x167 $x333)))
 (let (($x159 (= $x332 true)))
 (let (($x144 (= $x159 true)))
 (let (($x276 (= $x144 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x117)))
 (let (($x62 (= ?x187 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (= $x62 true)))
 (let (($x18 (= $x262 true)))
 (let (($x22 (= ?x187 input.dst.llvm-%n)))
 (let (($x147 (= $x22 true)))
 (let (($x178 (= $x147 true)))
 (let (($x15 (and $x178 $x18)))
 (let (($x285 (and $x15 $x276)))
 (let (($x81 (and $x285 $x291)))
 (let (($x113 (and $x81 $x194)))
 (let (($x25 (and $x113 $x331)))
 (let (($x312 (and $x25 $x336)))
 (let (($x325 (and $x312 $x12)))
 (let (($x45 (and $x325 $x65)))
 (let (($x124 (and $x45 $x75)))
 (let (($x257 (and $x124 $x43)))
 (let (($x344 (and $x257 $x203)))
 (let (($x334 (and $x344 $x363)))
 (let (($x106 (and $x334 $x201)))
 (let (($x83 (and $x106 $x105)))
 (let (($x63 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and (not $x63) $x83)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x342 (and $x92 $x181)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x324 (and $x260 $x342)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x94 (and $x9 $x324)))
 (let (($x278 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd ?x128 (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x46 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x337 (or false (or false (and (and true (or $x199 $x46)) (or $x175 $x278))))))
 (let (($x89 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x337)))
 (let (($x107 (=> (and $x6 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x337)))
 (let (($x339 (and $x107 $x94)))
 (let (($x13 (=> $x339 $x358)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x90 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x282 (bvadd (bvmul input.ind-%var1927X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x232 (bvadd ?x128 (_ bv3 32))))
 (let ((?x196 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x179 (store ?x196 (bvadd ?x128 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x268 (store ?x179 (bvadd ?x128 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x264 (store ?x268 ?x232 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x302 (concat (select ?x264 (bvadd ?x282 (_ bv2 32))) (concat (select ?x264 (bvadd ?x282 (_ bv1 32))) (select ?x264 ?x282)))))
 (let ((?x34 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1927X)))
 (let (($x118 (= input.ind-%var1927X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x308 (= (ite $x118 input.spec-%var-i-0.L3%6%bbentry ?x34) (concat (select ?x264 (bvadd ?x282 (_ bv3 32))) ?x302))))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1927X)))
 (let (($x303 (or $x207 $x118)))
 (=> $x303 $x308))))))))))))))))
 ))
 (let (($x131 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x217 (bvule (_ bv0 32) input.ind-%var1926X)))
 (let (($x134 (and $x217 (bvult input.ind-%var1926X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x118 (= input.ind-%var1926X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1926X)))
 (let (($x303 (or $x207 $x118)))
 (= $x303 $x134)))))))
 ))
 (let (($x280 (and $x131 $x90)))
 (let (($x211 (= true true)))
 (let (($x190 (and $x211 $x280)))
 (let (($x358 (= $x190 true)))
 (let (($x338 (forall ((input.ind-%var1919X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1919X)))
 (=> $x114 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1919X) (_ bv0 32)))))
 ))
 (let (($x290 (forall ((input.ind-%var1918X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1918X)))
 (= $x114 false)))
 ))
 (let (($x88 (and $x290 $x338)))
 (let (($x105 (= $x88 true)))
 (let (($x300 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let ((?x282 (bvadd (bvmul input.ind-%var1913X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x319 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x319)))
 (let ((?x345 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x263)))
 (let ((?x34 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1913X)))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1913X)))
 (=> $x207 (= ?x34 ?x345)))))))))
 ))
 (let (($x30 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x217 (bvule (_ bv0 32) input.ind-%var1912X)))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1912X)))
 (= $x207 (and $x217 (bvult input.ind-%var1912X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x14 (and $x30 $x300)))
 (let (($x201 (= $x14 true)))
 (let (($x271 (forall ((input.ind-%var1907X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1907X)))
 (=> $x114 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1907X) (_ bv0 32)))))
 ))
 (let (($x281 (forall ((input.ind-%var1906X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1906X)))
 (= $x114 false)))
 ))
 (let (($x121 (and $x281 $x271)))
 (let (($x363 (= $x121 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x225)))
 (let (($x213 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x354 (= $x213 true)))
 (let (($x203 (= $x354 true)))
 (let ((?x155 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x234 (= (_ bv0 2) ?x155)))
 (let (($x244 (= $x234 true)))
 (let (($x43 (= $x244 true)))
 (let (($x191 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x191 true)))
 (let (($x250 (= $x253 true)))
 (let (($x75 (= $x250 true)))
 (let (($x292 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x87 (= $x292 true)))
 (let (($x156 (= $x87 true)))
 (let (($x65 (= $x156 true)))
 (let (($x314 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (= $x314 true)))
 (let (($x360 (= $x248 true)))
 (let (($x12 (= $x360 true)))
 (let (($x316 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x316 true)))
 (let (($x44 (= $x226 true)))
 (let (($x336 (= $x44 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x73 (bvsub ?x128 ?x261)))
 (let (($x112 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x73) (bvult ?x128 ?x73))))
 (let (($x103 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x153 (ite $x103 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x362 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x252 (bvmul (_ bv4 64) ?x362)))
 (let ((?x80 ((_ extract 63 32) ?x252)))
 (let (($x70 (= ?x80 ?x153)))
 (let (($x326 (and $x70 $x112)))
 (let (($x42 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x279 (and $x42 $x326)))
 (let (($x245 (= true $x279)))
 (let (($x6 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x6 $x245)))
 (let (($x123 (= $x164 true)))
 (let (($x259 (= $x123 true)))
 (let (($x331 (= $x259 true)))
 (let (($x349 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x222 (= $x349 true)))
 (let (($x142 (= $x222 true)))
 (let (($x194 (= $x142 true)))
 (let (($x287 (= $x6 true)))
 (let (($x242 (= $x287 true)))
 (let (($x291 (= $x242 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x351 (= (_ bv0 32) ?x84)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x95)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x198 $x224)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x76 $x26)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x140 $x139)))
 (let (($x200 (not $x180)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (and $x130 $x101)))
 (let (($x169 (and (not $x172) $x200)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x56 $x189)))
 (let (($x206 (not $x78)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x59 $x186)))
 (let (($x166 (and (not $x170) $x206)))
 (let (($x256 (and (and (and (and (and (and $x166 $x169) $x53) $x49) $x129) $x109) $x141)))
 (let (($x333 (and $x256 $x351)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x311 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x100 (or false (or false (and (and true (or $x149 $x311)) (or $x115 $x125))))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x332 (and $x167 $x333)))
 (let (($x159 (= $x332 true)))
 (let (($x144 (= $x159 true)))
 (let (($x276 (= $x144 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x117)))
 (let (($x62 (= ?x187 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (= $x62 true)))
 (let (($x18 (= $x262 true)))
 (let (($x22 (= ?x187 input.dst.llvm-%n)))
 (let (($x147 (= $x22 true)))
 (let (($x178 (= $x147 true)))
 (let (($x15 (and $x178 $x18)))
 (let (($x285 (and $x15 $x276)))
 (let (($x81 (and $x285 $x291)))
 (let (($x113 (and $x81 $x194)))
 (let (($x25 (and $x113 $x331)))
 (let (($x312 (and $x25 $x336)))
 (let (($x325 (and $x312 $x12)))
 (let (($x45 (and $x325 $x65)))
 (let (($x124 (and $x45 $x75)))
 (let (($x257 (and $x124 $x43)))
 (let (($x344 (and $x257 $x203)))
 (let (($x334 (and $x344 $x363)))
 (let (($x106 (and $x334 $x201)))
 (let (($x83 (and $x106 $x105)))
 (let (($x63 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and (not $x63) $x83)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x342 (and $x92 $x181)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x324 (and $x260 $x342)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x94 (and $x9 $x324)))
 (let (($x278 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd ?x128 (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x46 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x337 (or false (or false (and (and true (or $x199 $x46)) (or $x175 $x278))))))
 (let (($x89 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x337)))
 (let (($x107 (=> (and $x6 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x337)))
 (let (($x339 (and $x107 $x94)))
 (let (($x13 (=> $x339 $x358)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 95
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x228 (bvsge ?x251 (_ bv0 32))))
 (let (($x122 (= $x228 true)))
 (let (($x355 (= $x122 true)))
 (let (($x353 (forall ((input.ind-%var1945X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1945X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1945X) (_ bv0 32)))))
 ))
 (let (($x90 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1944X)))
 (= $x93 false)))
 ))
 (let (($x68 (and $x90 $x353)))
 (let (($x341 (= $x68 true)))
 (let (($x58 (forall ((input.ind-%var1939X (_ BitVec 32)) )(let ((?x85 (bvadd (bvmul input.ind-%var1939X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x85))))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv2 32))) ?x249)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv3 32))) ?x340)))
 (let ((?x290 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1939X)))
 (let (($x298 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1939X)))
 (=> $x298 (= ?x290 ?x264)))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let (($x154 (and (bvule (_ bv0 32) input.ind-%var1938X) (bvult input.ind-%var1938X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x298 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1938X)))
 (= $x298 $x154))))
 ))
 (let (($x162 (and $x300 $x58)))
 (let (($x197 (= $x162 true)))
 (let (($x41 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1933X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1933X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1932X)))
 (= $x93 false)))
 ))
 (let (($x48 (and $x121 $x41)))
 (let (($x282 (= $x48 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x202)))
 (let (($x354 (= ?x213 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x203 (= $x354 true)))
 (let (($x344 (= $x203 true)))
 (let (($x234 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x244 (= $x234 true)))
 (let (($x43 (= $x244 true)))
 (let (($x257 (= $x43 true)))
 (let (($x250 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x75 (= $x250 true)))
 (let (($x124 (= $x75 true)))
 (let (($x104 (= $x124 true)))
 (let ((?x336 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x312 (= (_ bv0 32) ?x336)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x226)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let ((?x164 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x164)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (and $x245 $x123)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x331 (and $x279 $x259)))
 (let (($x326 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x80 $x103)))
 (let (($x70 (not $x153)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (and $x205 $x362)))
 (let (($x73 (and (not $x252) $x70)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x142 $x194)))
 (let (($x71 (not $x113)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x95 $x141)))
 (let (($x42 (and (not $x222) $x71)))
 (let (($x292 (and (and (and (and (and (and $x42 $x73) $x74) $x326) $x331) $x316) $x44)))
 (let (($x87 (and $x292 $x312)))
 (let (($x285 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x351 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x351)))
 (let (($x332 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x333 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x351)))
 (let (($x81 (or false (or false (and (and true (or $x333 $x332)) (or $x276 $x285))))))
 (let (($x349 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x156 (and $x349 $x87)))
 (let (($x65 (= $x156 true)))
 (let (($x45 (= $x65 true)))
 (let (($x191 (= $x45 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x26 true)))
 (let (($x69 (= $x129 true)))
 (let (($x218 (= $x69 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x301 true)))
 (let (($x198 (= $x76 true)))
 (let (($x29 (= $x198 true)))
 (let ((?x32 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x53 (= (_ bv0 2) ?x32)))
 (let (($x39 (= $x53 true)))
 (let (($x51 (= $x39 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x166)))
 (let (($x139 (= ?x130 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (= $x139 true)))
 (let (($x200 (= $x180 true)))
 (let (($x101 (= ?x130 input.dst.llvm-%n)))
 (let (($x172 (= $x101 true)))
 (let (($x28 (= $x172 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x145 (bvsub ?x128 ?x261)))
 (let (($x167 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x145) (bvult ?x128 ?x145))))
 (let (($x163 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x115 (ite $x163 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x136 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x136)))
 (let ((?x311 ((_ extract 63 32) ?x149)))
 (let (($x125 (= ?x311 ?x115)))
 (let (($x59 (and $x125 $x167)))
 (let (($x219 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x186 (and $x219 $x59)))
 (let (($x170 (= true $x186)))
 (let (($x216 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x79 (=> $x216 $x170)))
 (let (($x56 (= $x79 true)))
 (let (($x189 (= $x56 true)))
 (let (($x78 (= $x189 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x147 true)))
 (let (($x62 (= $x178 true)))
 (let (($x262 (= $x62 true)))
 (let (($x50 (= $x216 true)))
 (let (($x117 (= $x50 true)))
 (let (($x187 (= $x117 true)))
 (let (($x18 (and $x187 $x262)))
 (let (($x206 (and $x18 $x78)))
 (let (($x140 (and $x206 $x28)))
 (let (($x169 (and $x140 $x200)))
 (let (($x49 (and $x169 $x51)))
 (let (($x224 (and $x49 $x29)))
 (let (($x109 (and $x224 $x218)))
 (let (($x253 (and $x109 $x191)))
 (let (($x155 (and $x253 $x104)))
 (let (($x225 (and $x155 $x257)))
 (let (($x17 (and $x225 $x344)))
 (let (($x31 (and $x17 $x282)))
 (let (($x302 (and $x31 $x197)))
 (let (($x47 (and $x302 $x341)))
 (let (($x160 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x148 (and (not $x160) $x47)))
 (let (($x135 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (and $x135 $x148)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x188 (and $x161 $x208)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x246 (and $x20 $x188)))
 (let (($x295 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd ?x128 (_ bv3 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x165 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x107 (or false (or false (and (and true (or $x23 $x165)) (or $x185 $x295))))))
 (let (($x9 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x107)))
 (let (($x35 (=> (and $x216 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x107)))
 (let (($x64 (and $x35 $x246)))
 (let (($x220 (=> $x64 $x355)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x228 (bvsge ?x251 (_ bv0 32))))
 (let (($x122 (= $x228 true)))
 (let (($x355 (= $x122 true)))
 (let (($x353 (forall ((input.ind-%var1945X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1945X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1945X) (_ bv0 32)))))
 ))
 (let (($x90 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1944X)))
 (= $x93 false)))
 ))
 (let (($x68 (and $x90 $x353)))
 (let (($x341 (= $x68 true)))
 (let (($x58 (forall ((input.ind-%var1939X (_ BitVec 32)) )(let ((?x85 (bvadd (bvmul input.ind-%var1939X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x85))))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv2 32))) ?x249)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv3 32))) ?x340)))
 (let ((?x290 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1939X)))
 (let (($x298 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1939X)))
 (=> $x298 (= ?x290 ?x264)))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let (($x154 (and (bvule (_ bv0 32) input.ind-%var1938X) (bvult input.ind-%var1938X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x298 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1938X)))
 (= $x298 $x154))))
 ))
 (let (($x162 (and $x300 $x58)))
 (let (($x197 (= $x162 true)))
 (let (($x41 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1933X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1933X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1932X)))
 (= $x93 false)))
 ))
 (let (($x48 (and $x121 $x41)))
 (let (($x282 (= $x48 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x202)))
 (let (($x354 (= ?x213 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x203 (= $x354 true)))
 (let (($x344 (= $x203 true)))
 (let (($x234 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x244 (= $x234 true)))
 (let (($x43 (= $x244 true)))
 (let (($x257 (= $x43 true)))
 (let (($x250 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x75 (= $x250 true)))
 (let (($x124 (= $x75 true)))
 (let (($x104 (= $x124 true)))
 (let ((?x336 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x312 (= (_ bv0 32) ?x336)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x226)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let ((?x164 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x164)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (and $x245 $x123)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x331 (and $x279 $x259)))
 (let (($x326 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x80 $x103)))
 (let (($x70 (not $x153)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (and $x205 $x362)))
 (let (($x73 (and (not $x252) $x70)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x142 $x194)))
 (let (($x71 (not $x113)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x95 $x141)))
 (let (($x42 (and (not $x222) $x71)))
 (let (($x292 (and (and (and (and (and (and $x42 $x73) $x74) $x326) $x331) $x316) $x44)))
 (let (($x87 (and $x292 $x312)))
 (let (($x285 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x351 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x351)))
 (let (($x332 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x333 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x351)))
 (let (($x81 (or false (or false (and (and true (or $x333 $x332)) (or $x276 $x285))))))
 (let (($x349 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x156 (and $x349 $x87)))
 (let (($x65 (= $x156 true)))
 (let (($x45 (= $x65 true)))
 (let (($x191 (= $x45 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x26 true)))
 (let (($x69 (= $x129 true)))
 (let (($x218 (= $x69 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x301 true)))
 (let (($x198 (= $x76 true)))
 (let (($x29 (= $x198 true)))
 (let ((?x32 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x53 (= (_ bv0 2) ?x32)))
 (let (($x39 (= $x53 true)))
 (let (($x51 (= $x39 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x166)))
 (let (($x139 (= ?x130 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (= $x139 true)))
 (let (($x200 (= $x180 true)))
 (let (($x101 (= ?x130 input.dst.llvm-%n)))
 (let (($x172 (= $x101 true)))
 (let (($x28 (= $x172 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x145 (bvsub ?x128 ?x261)))
 (let (($x167 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x145) (bvult ?x128 ?x145))))
 (let (($x163 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x115 (ite $x163 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x136 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x136)))
 (let ((?x311 ((_ extract 63 32) ?x149)))
 (let (($x125 (= ?x311 ?x115)))
 (let (($x59 (and $x125 $x167)))
 (let (($x219 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x186 (and $x219 $x59)))
 (let (($x170 (= true $x186)))
 (let (($x216 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x79 (=> $x216 $x170)))
 (let (($x56 (= $x79 true)))
 (let (($x189 (= $x56 true)))
 (let (($x78 (= $x189 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x147 true)))
 (let (($x62 (= $x178 true)))
 (let (($x262 (= $x62 true)))
 (let (($x50 (= $x216 true)))
 (let (($x117 (= $x50 true)))
 (let (($x187 (= $x117 true)))
 (let (($x18 (and $x187 $x262)))
 (let (($x206 (and $x18 $x78)))
 (let (($x140 (and $x206 $x28)))
 (let (($x169 (and $x140 $x200)))
 (let (($x49 (and $x169 $x51)))
 (let (($x224 (and $x49 $x29)))
 (let (($x109 (and $x224 $x218)))
 (let (($x253 (and $x109 $x191)))
 (let (($x155 (and $x253 $x104)))
 (let (($x225 (and $x155 $x257)))
 (let (($x17 (and $x225 $x344)))
 (let (($x31 (and $x17 $x282)))
 (let (($x302 (and $x31 $x197)))
 (let (($x47 (and $x302 $x341)))
 (let (($x160 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x148 (and (not $x160) $x47)))
 (let (($x135 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (and $x135 $x148)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x188 (and $x161 $x208)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x246 (and $x20 $x188)))
 (let (($x295 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd ?x128 (_ bv3 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x165 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x107 (or false (or false (and (and true (or $x23 $x165)) (or $x185 $x295))))))
 (let (($x9 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x107)))
 (let (($x35 (=> (and $x216 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x107)))
 (let (($x64 (and $x35 $x246)))
 (let (($x220 (=> $x64 $x355)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 96
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x201 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x131 (bvule ?x201 input.dst.llvm-%n)))
 (let (($x13 (= $x131 true)))
 (let (($x190 (= $x13 true)))
 (let (($x361 (forall ((input.ind-%var1963X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1963X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1963X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var1962X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1962X)))
 (= $x217 false)))
 ))
 (let (($x313 (and $x181 $x361)))
 (let (($x357 (= $x313 true)))
 (let (($x83 (forall ((input.ind-%var1957X (_ BitVec 32)) )(let ((?x338 (bvadd (bvmul input.ind-%var1957X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x338))))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x338 (_ bv2 32))) ?x207)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x338 (_ bv3 32))) ?x146)))
 (let ((?x90 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1957X)))
 (let (($x179 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1957X)))
 (=> $x179 (= ?x90 ?x114)))))))))
 ))
 (let (($x58 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let (($x323 (and (bvule (_ bv0 32) input.ind-%var1956X) (bvult input.ind-%var1956X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x179 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1956X)))
 (= $x179 $x323))))
 ))
 (let (($x151 (and $x58 $x83)))
 (let (($x359 (= $x151 true)))
 (let (($x88 (forall ((input.ind-%var1951X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1951X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1951X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var1950X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1950X)))
 (= $x217 false)))
 ))
 (let (($x126 (and $x48 $x88)))
 (let (($x85 (= $x126 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x354 (bvneg ?x213)))
 (let (($x203 (= ?x354 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x344 (= $x203 true)))
 (let (($x17 (= $x344 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x262 (bvneg ?x62)))
 (let (($x43 (= ?x262 input.dst.llvm-%n)))
 (let (($x257 (= $x43 true)))
 (let (($x225 (= $x257 true)))
 (let (($x124 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (= $x124 true)))
 (let (($x155 (= $x104 true)))
 (let (($x234 (= $x155 true)))
 (let (($x45 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x191 (= $x45 true)))
 (let (($x253 (= $x191 true)))
 (let (($x250 (= $x253 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x331 (bvsub ?x128 ?x261)))
 (let (($x325 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x331) (bvult ?x128 ?x331))))
 (let (($x164 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x123 (ite $x164 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x360 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x279 (bvmul (_ bv4 64) ?x360)))
 (let ((?x245 ((_ extract 63 32) ?x279)))
 (let (($x259 (= ?x245 ?x123)))
 (let (($x226 (and $x259 $x325)))
 (let (($x112 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x44 (and $x112 $x226)))
 (let (($x292 (= true $x44)))
 (let (($x227 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x336 (=> $x227 $x292)))
 (let (($x312 (= $x336 true)))
 (let (($x87 (= $x312 true)))
 (let (($x156 (= $x87 true)))
 (let (($x153 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x70 (= $x153 true)))
 (let (($x73 (= $x70 true)))
 (let (($x314 (= $x73 true)))
 (let (($x252 (= $x227 true)))
 (let (($x235 (= $x252 true)))
 (let (($x80 (= $x235 true)))
 (let ((?x291 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x291)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x287)))
 (let ((?x276 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x276)))
 (let ((?x333 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x332 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x333)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x351 $x332)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x274 $x159)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (and $x198 $x29)))
 (let (($x26 (not $x224)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x49 $x301)))
 (let (($x69 (and (not $x76) $x26)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x169 $x110)))
 (let (($x53 (not $x32)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x167 $x59)))
 (let (($x51 (and (not $x200) $x53)))
 (let (($x142 (and (and (and (and (and (and $x51 $x69) $x109) $x84) $x144) $x285) $x242)))
 (let (($x194 (and $x142 $x81)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x140 (or false (or false (and (and true (or $x56 $x189)) (or $x166 $x130))))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x140)))
 (let (($x113 (and $x180 $x194)))
 (let (($x71 (= $x113 true)))
 (let (($x42 (= $x71 true)))
 (let (($x205 (= $x42 true)))
 (let (($x115 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x125 (= $x115 true)))
 (let (($x37 (= $x125 true)))
 (let (($x145 (= $x37 true)))
 (let ((?x136 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x149 (= (_ bv0 2) ?x136)))
 (let (($x311 (= $x149 true)))
 (let (($x163 (= $x311 true)))
 (let (($x18 (= ?x262 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (= $x18 true)))
 (let (($x91 (= $x15 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x117 true)))
 (let (($x22 (= $x187 true)))
 (let (($x147 (= $x22 true)))
 (let (($x219 (and $x147 $x91)))
 (let (($x150 (and $x219 $x163)))
 (let (($x60 (and $x150 $x145)))
 (let (($x362 (and $x60 $x205)))
 (let (($x103 (and $x362 $x80)))
 (let (($x348 (and $x103 $x314)))
 (let (($x65 (and $x348 $x156)))
 (let (($x75 (and $x65 $x250)))
 (let (($x244 (and $x75 $x234)))
 (let (($x202 (and $x244 $x225)))
 (let (($x281 (and $x202 $x17)))
 (let (($x268 (and $x281 $x85)))
 (let (($x211 (and $x268 $x359)))
 (let (($x247 (and $x211 $x357)))
 (let (($x240 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x319 (and (not $x240) $x247)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x334 (and $x63 $x319)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x243 (and $x184 $x334)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x138 $x243)))
 (let (($x337 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd ?x128 (_ bv3 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x175 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x35 (or false (or false (and (and true (or $x57 $x175)) (or $x182 $x337))))))
 (let (($x20 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x61 (=> (and $x227 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x195 (and $x61 $x177)))
 (let (($x99 (=> $x195 $x190)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x201 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x131 (bvule ?x201 input.dst.llvm-%n)))
 (let (($x13 (= $x131 true)))
 (let (($x190 (= $x13 true)))
 (let (($x361 (forall ((input.ind-%var1963X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1963X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1963X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var1962X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1962X)))
 (= $x217 false)))
 ))
 (let (($x313 (and $x181 $x361)))
 (let (($x357 (= $x313 true)))
 (let (($x83 (forall ((input.ind-%var1957X (_ BitVec 32)) )(let ((?x338 (bvadd (bvmul input.ind-%var1957X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x338))))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x338 (_ bv2 32))) ?x207)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x338 (_ bv3 32))) ?x146)))
 (let ((?x90 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1957X)))
 (let (($x179 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1957X)))
 (=> $x179 (= ?x90 ?x114)))))))))
 ))
 (let (($x58 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let (($x323 (and (bvule (_ bv0 32) input.ind-%var1956X) (bvult input.ind-%var1956X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x179 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1956X)))
 (= $x179 $x323))))
 ))
 (let (($x151 (and $x58 $x83)))
 (let (($x359 (= $x151 true)))
 (let (($x88 (forall ((input.ind-%var1951X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1951X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1951X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var1950X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1950X)))
 (= $x217 false)))
 ))
 (let (($x126 (and $x48 $x88)))
 (let (($x85 (= $x126 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x354 (bvneg ?x213)))
 (let (($x203 (= ?x354 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x344 (= $x203 true)))
 (let (($x17 (= $x344 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x262 (bvneg ?x62)))
 (let (($x43 (= ?x262 input.dst.llvm-%n)))
 (let (($x257 (= $x43 true)))
 (let (($x225 (= $x257 true)))
 (let (($x124 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (= $x124 true)))
 (let (($x155 (= $x104 true)))
 (let (($x234 (= $x155 true)))
 (let (($x45 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x191 (= $x45 true)))
 (let (($x253 (= $x191 true)))
 (let (($x250 (= $x253 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x331 (bvsub ?x128 ?x261)))
 (let (($x325 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x331) (bvult ?x128 ?x331))))
 (let (($x164 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x123 (ite $x164 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x360 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x279 (bvmul (_ bv4 64) ?x360)))
 (let ((?x245 ((_ extract 63 32) ?x279)))
 (let (($x259 (= ?x245 ?x123)))
 (let (($x226 (and $x259 $x325)))
 (let (($x112 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x44 (and $x112 $x226)))
 (let (($x292 (= true $x44)))
 (let (($x227 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x336 (=> $x227 $x292)))
 (let (($x312 (= $x336 true)))
 (let (($x87 (= $x312 true)))
 (let (($x156 (= $x87 true)))
 (let (($x153 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x70 (= $x153 true)))
 (let (($x73 (= $x70 true)))
 (let (($x314 (= $x73 true)))
 (let (($x252 (= $x227 true)))
 (let (($x235 (= $x252 true)))
 (let (($x80 (= $x235 true)))
 (let ((?x291 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x291)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x287)))
 (let ((?x276 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x276)))
 (let ((?x333 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x332 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x333)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x351 $x332)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x274 $x159)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (and $x198 $x29)))
 (let (($x26 (not $x224)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x49 $x301)))
 (let (($x69 (and (not $x76) $x26)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x169 $x110)))
 (let (($x53 (not $x32)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x167 $x59)))
 (let (($x51 (and (not $x200) $x53)))
 (let (($x142 (and (and (and (and (and (and $x51 $x69) $x109) $x84) $x144) $x285) $x242)))
 (let (($x194 (and $x142 $x81)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x140 (or false (or false (and (and true (or $x56 $x189)) (or $x166 $x130))))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x140)))
 (let (($x113 (and $x180 $x194)))
 (let (($x71 (= $x113 true)))
 (let (($x42 (= $x71 true)))
 (let (($x205 (= $x42 true)))
 (let (($x115 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x125 (= $x115 true)))
 (let (($x37 (= $x125 true)))
 (let (($x145 (= $x37 true)))
 (let ((?x136 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x149 (= (_ bv0 2) ?x136)))
 (let (($x311 (= $x149 true)))
 (let (($x163 (= $x311 true)))
 (let (($x18 (= ?x262 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (= $x18 true)))
 (let (($x91 (= $x15 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x117 true)))
 (let (($x22 (= $x187 true)))
 (let (($x147 (= $x22 true)))
 (let (($x219 (and $x147 $x91)))
 (let (($x150 (and $x219 $x163)))
 (let (($x60 (and $x150 $x145)))
 (let (($x362 (and $x60 $x205)))
 (let (($x103 (and $x362 $x80)))
 (let (($x348 (and $x103 $x314)))
 (let (($x65 (and $x348 $x156)))
 (let (($x75 (and $x65 $x250)))
 (let (($x244 (and $x75 $x234)))
 (let (($x202 (and $x244 $x225)))
 (let (($x281 (and $x202 $x17)))
 (let (($x268 (and $x281 $x85)))
 (let (($x211 (and $x268 $x359)))
 (let (($x247 (and $x211 $x357)))
 (let (($x240 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x319 (and (not $x240) $x247)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x334 (and $x63 $x319)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x243 (and $x184 $x334)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x138 $x243)))
 (let (($x337 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd ?x128 (_ bv3 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x175 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x35 (or false (or false (and (and true (or $x57 $x175)) (or $x182 $x337))))))
 (let (($x20 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x61 (=> (and $x227 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x195 (and $x61 $x177)))
 (let (($x99 (=> $x195 $x190)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 97
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (bvsge ?x197 (_ bv0 32))))
 (let (($x358 (= $x286 true)))
 (let (($x303 (= $x358 true)))
 (let (($x154 (forall ((input.ind-%var1981X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1981X)))
 (=> $x345 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1981X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var1980X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1980X)))
 (= $x345 false)))
 ))
 (let (($x339 (and $x148 $x154)))
 (let (($x143 (= $x339 true)))
 (let (($x47 (forall ((input.ind-%var1975X (_ BitVec 32)) )(let ((?x353 (bvadd (bvmul input.ind-%var1975X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x353 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x353))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x353 (_ bv2 32))) ?x298)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x353 (_ bv3 32))) ?x86)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1975X)))
 (let (($x14 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1975X)))
 (=> $x14 (= ?x181 ?x93)))))))))
 ))
 (let (($x83 (forall ((input.ind-%var1974X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var1974X) (bvult input.ind-%var1974X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x14 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1974X)))
 (= $x14 $x229))))
 ))
 (let (($x355 (and $x83 $x47)))
 (let (($x220 (= $x355 true)))
 (let (($x68 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1969X)))
 (=> $x345 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1969X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1968X)))
 (= $x345 false)))
 ))
 (let (($x327 (and $x126 $x68)))
 (let (($x338 (= $x327 true)))
 (let ((?x354 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x354)))
 (let (($x344 (= ?x203 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x344 true)))
 (let (($x281 (= $x17 true)))
 (let (($x43 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x257 (= $x43 true)))
 (let (($x225 (= $x257 true)))
 (let (($x202 (= $x225 true)))
 (let (($x124 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (= $x124 true)))
 (let (($x155 (= $x104 true)))
 (let (($x234 (= $x155 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x226 (bvsub ?x128 ?x261)))
 (let (($x312 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x226) (bvult ?x128 ?x226))))
 (let (($x25 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x316 (ite $x25 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x259 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvmul (_ bv4 64) ?x259)))
 (let ((?x331 ((_ extract 63 32) ?x12)))
 (let (($x325 (= ?x331 ?x316)))
 (let (($x87 (and $x325 $x312)))
 (let (($x164 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x156 (and $x164 $x87)))
 (let (($x65 (= true $x156)))
 (let (($x254 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x45 (=> $x254 $x65)))
 (let (($x191 (= $x45 true)))
 (let (($x253 (= $x191 true)))
 (let (($x250 (= $x253 true)))
 (let (($x74 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x248 (= $x74 true)))
 (let (($x112 (= $x248 true)))
 (let (($x326 (= $x112 true)))
 (let (($x70 (= $x254 true)))
 (let (($x73 (= $x70 true)))
 (let (($x314 (= $x73 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x291 (= (_ bv0 32) ?x142)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x287)))
 (let ((?x285 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x285)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x159)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x222 (and $x332 $x144)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (and $x333 $x222)))
 (let (($x351 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (and $x69 $x349)))
 (let (($x109 (not $x218)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x29 $x224)))
 (let (($x256 (and (not $x26) $x109)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x51 $x49)))
 (let (($x76 (not $x301)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x189 $x78)))
 (let (($x198 (and (not $x53) $x76)))
 (let (($x205 (and (and (and (and (and (and $x198 $x256) $x141) $x351) $x276) $x212) $x242)))
 (let (($x362 (and $x205 $x291)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x169 (or false (or false (and (and true (or $x101 $x172)) (or $x180 $x167))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x169)))
 (let (($x252 (and $x32 $x362)))
 (let (($x235 (= $x252 true)))
 (let (($x80 (= $x235 true)))
 (let (($x103 (= $x80 true)))
 (let (($x60 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x186 (= $x60 true)))
 (let (($x170 (= $x186 true)))
 (let (($x139 (= $x170 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x115 (= (_ bv0 2) ?x150)))
 (let (($x125 (= $x115 true)))
 (let (($x37 (= $x125 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x262 (bvneg ?x62)))
 (let (($x174 (= ?x262 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (= $x174 true)))
 (let (($x149 (= $x136 true)))
 (let (($x18 (= ?x262 input.dst.llvm-%n)))
 (let (($x15 (= $x18 true)))
 (let (($x91 (= $x15 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x117 true)))
 (let (($x22 (= $x187 true)))
 (let (($x147 (= $x22 true)))
 (let (($x219 (and $x147 $x91)))
 (let (($x311 (and $x219 $x149)))
 (let (($x145 (and $x311 $x37)))
 (let (($x79 (and $x145 $x139)))
 (let (($x153 (and $x79 $x103)))
 (let (($x348 (and $x153 $x314)))
 (let (($x360 (and $x348 $x326)))
 (let (($x75 (and $x360 $x250)))
 (let (($x244 (and $x75 $x234)))
 (let (($x213 (and $x244 $x202)))
 (let (($x121 (and $x213 $x281)))
 (let (($x16 (and $x121 $x338)))
 (let (($x251 (and $x16 $x220)))
 (let (($x118 (and $x251 $x143)))
 (let (($x308 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and (not $x308) $x118)))
 (let (($x160 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x31 (and $x160 $x249)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x33 (and $x92 $x31)))
 (let (($x260 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x102 (and $x260 $x33)))
 (let (($x107 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd ?x128 (_ bv3 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x185 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x61 (or false (or false (and (and true (or $x21 $x185)) (or $x89 $x107))))))
 (let (($x138 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x61)))
 (let (($x232 (=> (and $x254 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x61)))
 (let (($x324 (and $x232 $x102)))
 (let (($x52 (=> $x324 $x303)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (bvsge ?x197 (_ bv0 32))))
 (let (($x358 (= $x286 true)))
 (let (($x303 (= $x358 true)))
 (let (($x154 (forall ((input.ind-%var1981X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1981X)))
 (=> $x345 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1981X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var1980X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1980X)))
 (= $x345 false)))
 ))
 (let (($x339 (and $x148 $x154)))
 (let (($x143 (= $x339 true)))
 (let (($x47 (forall ((input.ind-%var1975X (_ BitVec 32)) )(let ((?x353 (bvadd (bvmul input.ind-%var1975X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x353 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x353))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x353 (_ bv2 32))) ?x298)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x353 (_ bv3 32))) ?x86)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1975X)))
 (let (($x14 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1975X)))
 (=> $x14 (= ?x181 ?x93)))))))))
 ))
 (let (($x83 (forall ((input.ind-%var1974X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var1974X) (bvult input.ind-%var1974X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x14 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1974X)))
 (= $x14 $x229))))
 ))
 (let (($x355 (and $x83 $x47)))
 (let (($x220 (= $x355 true)))
 (let (($x68 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1969X)))
 (=> $x345 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1969X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x345 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1968X)))
 (= $x345 false)))
 ))
 (let (($x327 (and $x126 $x68)))
 (let (($x338 (= $x327 true)))
 (let ((?x354 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x354)))
 (let (($x344 (= ?x203 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x344 true)))
 (let (($x281 (= $x17 true)))
 (let (($x43 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x257 (= $x43 true)))
 (let (($x225 (= $x257 true)))
 (let (($x202 (= $x225 true)))
 (let (($x124 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (= $x124 true)))
 (let (($x155 (= $x104 true)))
 (let (($x234 (= $x155 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x226 (bvsub ?x128 ?x261)))
 (let (($x312 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x226) (bvult ?x128 ?x226))))
 (let (($x25 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x316 (ite $x25 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x259 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvmul (_ bv4 64) ?x259)))
 (let ((?x331 ((_ extract 63 32) ?x12)))
 (let (($x325 (= ?x331 ?x316)))
 (let (($x87 (and $x325 $x312)))
 (let (($x164 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x156 (and $x164 $x87)))
 (let (($x65 (= true $x156)))
 (let (($x254 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x45 (=> $x254 $x65)))
 (let (($x191 (= $x45 true)))
 (let (($x253 (= $x191 true)))
 (let (($x250 (= $x253 true)))
 (let (($x74 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x248 (= $x74 true)))
 (let (($x112 (= $x248 true)))
 (let (($x326 (= $x112 true)))
 (let (($x70 (= $x254 true)))
 (let (($x73 (= $x70 true)))
 (let (($x314 (= $x73 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x291 (= (_ bv0 32) ?x142)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x287)))
 (let ((?x285 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x285)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x159)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x222 (and $x332 $x144)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (and $x333 $x222)))
 (let (($x351 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (and $x69 $x349)))
 (let (($x109 (not $x218)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x29 $x224)))
 (let (($x256 (and (not $x26) $x109)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x51 $x49)))
 (let (($x76 (not $x301)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x189 $x78)))
 (let (($x198 (and (not $x53) $x76)))
 (let (($x205 (and (and (and (and (and (and $x198 $x256) $x141) $x351) $x276) $x212) $x242)))
 (let (($x362 (and $x205 $x291)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x169 (or false (or false (and (and true (or $x101 $x172)) (or $x180 $x167))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x169)))
 (let (($x252 (and $x32 $x362)))
 (let (($x235 (= $x252 true)))
 (let (($x80 (= $x235 true)))
 (let (($x103 (= $x80 true)))
 (let (($x60 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x186 (= $x60 true)))
 (let (($x170 (= $x186 true)))
 (let (($x139 (= $x170 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x115 (= (_ bv0 2) ?x150)))
 (let (($x125 (= $x115 true)))
 (let (($x37 (= $x125 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x262 (bvneg ?x62)))
 (let (($x174 (= ?x262 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (= $x174 true)))
 (let (($x149 (= $x136 true)))
 (let (($x18 (= ?x262 input.dst.llvm-%n)))
 (let (($x15 (= $x18 true)))
 (let (($x91 (= $x15 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x117 true)))
 (let (($x22 (= $x187 true)))
 (let (($x147 (= $x22 true)))
 (let (($x219 (and $x147 $x91)))
 (let (($x311 (and $x219 $x149)))
 (let (($x145 (and $x311 $x37)))
 (let (($x79 (and $x145 $x139)))
 (let (($x153 (and $x79 $x103)))
 (let (($x348 (and $x153 $x314)))
 (let (($x360 (and $x348 $x326)))
 (let (($x75 (and $x360 $x250)))
 (let (($x244 (and $x75 $x234)))
 (let (($x213 (and $x244 $x202)))
 (let (($x121 (and $x213 $x281)))
 (let (($x16 (and $x121 $x338)))
 (let (($x251 (and $x16 $x220)))
 (let (($x118 (and $x251 $x143)))
 (let (($x308 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and (not $x308) $x118)))
 (let (($x160 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x31 (and $x160 $x249)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x33 (and $x92 $x31)))
 (let (($x260 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x102 (and $x260 $x33)))
 (let (($x107 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd ?x128 (_ bv3 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x185 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x61 (or false (or false (and (and true (or $x21 $x185)) (or $x89 $x107))))))
 (let (($x138 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x61)))
 (let (($x232 (=> (and $x254 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x61)))
 (let (($x324 (and $x232 $x102)))
 (let (($x52 (=> $x324 $x303)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 98
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x228 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (not $x228)))
 (let (($x157 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (=> $x157 $x208)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x42 (bvsub ?x128 ?x261)))
 (let (($x142 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x42) (bvult ?x128 ?x42))))
 (let (($x276 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x285 (ite $x276 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x144 (bvmul (_ bv4 64) ?x159)))
 (let ((?x222 ((_ extract 63 32) ?x144)))
 (let (($x212 (= ?x222 ?x285)))
 (let (($x291 (and $x212 $x142)))
 (let (($x333 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x362 (and $x333 $x291)))
 (let (($x252 (= true $x362)))
 (let (($x235 (=> $x157 $x252)))
 (let (($x268 (=> (and $x235 $x157) $x208)))
 (let (($x132 (= $x268 true)))
 (let (($x284 (= $x132 true)))
 (let (($x177 (forall ((input.ind-%var1999X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1999X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1999X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1998X)))
 (= $x121 false)))
 ))
 (let (($x13 (and $x99 $x177)))
 (let (($x176 (= $x13 true)))
 (let (($x36 (forall ((input.ind-%var1993X (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul input.ind-%var1993X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x52))))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv2 32))) ?x106)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv3 32))) ?x340)))
 (let ((?x341 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1993X)))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1993X)))
 (=> $x350 (= ?x341 ?x151)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1992X (_ BitVec 32)) )(let (($x282 (and (bvule (_ bv0 32) input.ind-%var1992X) (bvult input.ind-%var1992X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1992X)))
 (= $x350 $x282))))
 ))
 (let (($x363 (and $x298 $x36)))
 (let (($x217 (= $x363 true)))
 (let (($x146 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1987X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1987X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1986X)))
 (= $x121 false)))
 ))
 (let (($x229 (and $x126 $x146)))
 (let (($x105 (= $x229 true)))
 (let ((?x257 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x257)))
 (let (($x202 (= ?x225 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x202 true)))
 (let (($x354 (= $x213 true)))
 (let ((?x191 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x191)))
 (let (($x155 (= ?x253 input.dst.llvm-%n)))
 (let (($x234 (= $x155 true)))
 (let (($x244 (= $x234 true)))
 (let (($x250 (= ?x253 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (= $x250 true)))
 (let (($x124 (= $x75 true)))
 (let ((?x312 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x87 (= (_ bv0 2) ?x312)))
 (let (($x156 (= $x87 true)))
 (let (($x65 (= $x156 true)))
 (let (($x316 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x325 (= $x316 true)))
 (let (($x44 (= $x325 true)))
 (let (($x226 (= $x44 true)))
 (let (($x123 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x259 (= $x123 true)))
 (let (($x12 (= $x259 true)))
 (let (($x331 (= $x12 true)))
 (let (($x326 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x360 (= $x326 true)))
 (let (($x279 (= $x360 true)))
 (let (($x245 (= $x279 true)))
 (let (($x314 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x348 (= $x314 true)))
 (let (($x74 (= $x348 true)))
 (let (($x248 (= $x74 true)))
 (let (($x80 (= $x235 true)))
 (let (($x103 (= $x80 true)))
 (let (($x153 (= $x103 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x81 true)))
 (let (($x141 (= $x84 true)))
 (let (($x194 (= $x141 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x51)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x53)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x200)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (and $x59 $x39)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x167 $x169)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x79 $x206)))
 (let (($x110 (not $x166)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (and $x186 $x170)))
 (let (($x101 (and (not $x139) $x110)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x150 $x115)))
 (let (($x37 (not $x125)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x342 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x342 $x50)))
 (let (($x60 (and (not $x163) $x37)))
 (let (($x26 (and (and (and (and (and (and $x60 $x101) $x28) $x180) $x32) $x78) $x129)))
 (let (($x95 (and $x26 $x49)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x136 (or false (or false (and (and true (or $x147 $x178)) (or $x18 $x15))))))
 (let (($x311 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x69 (and $x311 $x95)))
 (let (($x349 (= $x69 true)))
 (let (($x218 (= $x349 true)))
 (let (($x109 (= $x218 true)))
 (let (($x274 (and $x109 $x194)))
 (let (($x70 (and $x274 $x153)))
 (let (($x112 (and $x70 $x248)))
 (let (($x164 (and $x112 $x245)))
 (let (($x25 (and $x164 $x331)))
 (let (($x292 (and $x25 $x226)))
 (let (($x45 (and $x292 $x65)))
 (let (($x104 (and $x45 $x124)))
 (let (($x43 (and $x104 $x244)))
 (let (($x203 (and $x43 $x354)))
 (let (($x83 (and $x203 $x105)))
 (let (($x41 (and $x83 $x217)))
 (let (($x116 (and $x41 $x176)))
 (let (($x240 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x240 $x116)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x323 (and $x135 $x290)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x64 (and $x161 $x323)))
 (let (($x35 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd ?x128 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x182 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x232 (or false (or false (and (and true (or $x278 $x182)) (or $x9 $x35))))))
 (let (($x260 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x232)))
 (let (($x46 (=> (and $x157 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x232)))
 (let (($x19 (and $x46 $x64)))
 (let (($x188 (=> $x19 $x284)))
 (not $x188))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x228 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (not $x228)))
 (let (($x157 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (=> $x157 $x208)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x42 (bvsub ?x128 ?x261)))
 (let (($x142 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x128 ?x42) (bvult ?x128 ?x42))))
 (let (($x276 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x285 (ite $x276 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x144 (bvmul (_ bv4 64) ?x159)))
 (let ((?x222 ((_ extract 63 32) ?x144)))
 (let (($x212 (= ?x222 ?x285)))
 (let (($x291 (and $x212 $x142)))
 (let (($x333 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x362 (and $x333 $x291)))
 (let (($x252 (= true $x362)))
 (let (($x235 (=> $x157 $x252)))
 (let (($x268 (=> (and $x235 $x157) $x208)))
 (let (($x132 (= $x268 true)))
 (let (($x284 (= $x132 true)))
 (let (($x177 (forall ((input.ind-%var1999X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1999X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1999X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1998X)))
 (= $x121 false)))
 ))
 (let (($x13 (and $x99 $x177)))
 (let (($x176 (= $x13 true)))
 (let (($x36 (forall ((input.ind-%var1993X (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul input.ind-%var1993X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x52))))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv2 32))) ?x106)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv3 32))) ?x340)))
 (let ((?x341 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1993X)))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1993X)))
 (=> $x350 (= ?x341 ?x151)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1992X (_ BitVec 32)) )(let (($x282 (and (bvule (_ bv0 32) input.ind-%var1992X) (bvult input.ind-%var1992X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1992X)))
 (= $x350 $x282))))
 ))
 (let (($x363 (and $x298 $x36)))
 (let (($x217 (= $x363 true)))
 (let (($x146 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1987X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1987X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1986X)))
 (= $x121 false)))
 ))
 (let (($x229 (and $x126 $x146)))
 (let (($x105 (= $x229 true)))
 (let ((?x257 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x257)))
 (let (($x202 (= ?x225 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x202 true)))
 (let (($x354 (= $x213 true)))
 (let ((?x191 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x191)))
 (let (($x155 (= ?x253 input.dst.llvm-%n)))
 (let (($x234 (= $x155 true)))
 (let (($x244 (= $x234 true)))
 (let (($x250 (= ?x253 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (= $x250 true)))
 (let (($x124 (= $x75 true)))
 (let ((?x312 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x87 (= (_ bv0 2) ?x312)))
 (let (($x156 (= $x87 true)))
 (let (($x65 (= $x156 true)))
 (let (($x316 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x325 (= $x316 true)))
 (let (($x44 (= $x325 true)))
 (let (($x226 (= $x44 true)))
 (let (($x123 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x259 (= $x123 true)))
 (let (($x12 (= $x259 true)))
 (let (($x331 (= $x12 true)))
 (let (($x326 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x360 (= $x326 true)))
 (let (($x279 (= $x360 true)))
 (let (($x245 (= $x279 true)))
 (let (($x314 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x348 (= $x314 true)))
 (let (($x74 (= $x348 true)))
 (let (($x248 (= $x74 true)))
 (let (($x80 (= $x235 true)))
 (let (($x103 (= $x80 true)))
 (let (($x153 (= $x103 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x81 true)))
 (let (($x141 (= $x84 true)))
 (let (($x194 (= $x141 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x51)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x53)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x200)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (and $x59 $x39)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x167 $x169)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x79 $x206)))
 (let (($x110 (not $x166)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (and $x186 $x170)))
 (let (($x101 (and (not $x139) $x110)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x150 $x115)))
 (let (($x37 (not $x125)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x342 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x342 $x50)))
 (let (($x60 (and (not $x163) $x37)))
 (let (($x26 (and (and (and (and (and (and $x60 $x101) $x28) $x180) $x32) $x78) $x129)))
 (let (($x95 (and $x26 $x49)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x136 (or false (or false (and (and true (or $x147 $x178)) (or $x18 $x15))))))
 (let (($x311 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x69 (and $x311 $x95)))
 (let (($x349 (= $x69 true)))
 (let (($x218 (= $x349 true)))
 (let (($x109 (= $x218 true)))
 (let (($x274 (and $x109 $x194)))
 (let (($x70 (and $x274 $x153)))
 (let (($x112 (and $x70 $x248)))
 (let (($x164 (and $x112 $x245)))
 (let (($x25 (and $x164 $x331)))
 (let (($x292 (and $x25 $x226)))
 (let (($x45 (and $x292 $x65)))
 (let (($x104 (and $x45 $x124)))
 (let (($x43 (and $x104 $x244)))
 (let (($x203 (and $x43 $x354)))
 (let (($x83 (and $x203 $x105)))
 (let (($x41 (and $x83 $x217)))
 (let (($x116 (and $x41 $x176)))
 (let (($x240 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x240 $x116)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x323 (and $x135 $x290)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x64 (and $x161 $x323)))
 (let (($x35 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd ?x128 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x182 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x232 (or false (or false (and (and true (or $x278 $x182)) (or $x9 $x35))))))
 (let (($x260 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x232)))
 (let (($x46 (=> (and $x157 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x232)))
 (let (($x19 (and $x46 $x64)))
 (let (($x188 (=> $x19 $x284)))
 (not $x188))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 99
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x220 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (not $x38)))
 (let (($x251 (=> $x17 $x220)))
 (let (($x102 (= $x251 true)))
 (let (($x324 (= $x102 true)))
 (let (($x264 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2017X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2017X) (_ bv0 32)))))
 ))
 (let (($x6 (forall ((input.ind-%var2016X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2016X)))
 (= $x65 false)))
 ))
 (let (($x90 (and $x6 $x264)))
 (let (($x86 (= $x90 true)))
 (let (($x208 (forall ((input.ind-%var2011X (_ BitVec 32)) )(let ((?x363 (bvadd (bvmul input.ind-%var2011X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x363))))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv2 32))) ?x177)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv3 32))) ?x116)))
 (let ((?x298 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2011X)))
 (let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2011X)))
 (=> $x88 (= ?x298 ?x64)))))))))
 ))
 (let (($x263 (forall ((input.ind-%var2010X (_ BitVec 32)) )(let (($x83 (and (bvule (_ bv0 32) input.ind-%var2010X) (bvult input.ind-%var2010X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2010X)))
 (= $x88 $x83))))
 ))
 (let (($x207 (and $x263 $x208)))
 (let (($x268 (= $x207 true)))
 (let (($x202 (forall ((input.ind-%var2005X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2005X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2005X) (_ bv0 32)))))
 ))
 (let (($x250 (forall ((input.ind-%var2004X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2004X)))
 (= $x65 false)))
 ))
 (let (($x213 (and $x250 $x202)))
 (let (($x354 (= $x213 true)))
 (let ((?x316 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x325 (bvneg ?x316)))
 (let (($x44 (= ?x325 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x226 (= $x44 true)))
 (let (($x292 (= $x226 true)))
 (let ((?x326 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x360 (bvneg ?x326)))
 (let (($x259 (= ?x360 input.dst.llvm-%n)))
 (let (($x12 (= $x259 true)))
 (let (($x331 (= $x12 true)))
 (let (($x279 (= ?x360 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x245 (= $x279 true)))
 (let (($x164 (= $x245 true)))
 (let (($x73 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x314 (= $x73 true)))
 (let (($x348 (= $x314 true)))
 (let (($x74 (= $x348 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (= $x235 true)))
 (let (($x103 (= $x80 true)))
 (let (($x153 (= $x103 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x205 true)))
 (let (($x291 (= $x142 true)))
 (let (($x362 (= $x291 true)))
 (let (($x285 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x212 (= $x285 true)))
 (let (($x287 (= $x212 true)))
 (let (($x42 (= $x287 true)))
 (let (($x332 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x332 true)))
 (let (($x144 (= $x159 true)))
 (let (($x222 (= $x144 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x49)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x26)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x32 $x189)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x169 $x78)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x172 $x28)))
 (let (($x140 (not $x76)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x301 (and $x110 $x101)))
 (let (($x198 (and (not $x301) $x140)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x170 $x139)))
 (let (($x79 (not $x130)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x262 $x18)))
 (let (($x166 (and (not $x186) $x79)))
 (let (($x81 (and (and (and (and (and (and $x166 $x198) $x59) $x39) $x224) $x129) $x51)))
 (let (($x84 (and $x81 $x95)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x219 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x219)))
 (let (($x125 (or false (or false (and (and true (or $x174 $x136)) (or $x50 $x163))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x141 (and $x60 $x84)))
 (let (($x194 (= $x141 true)))
 (let (($x274 (= $x194 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x149 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x22 (= (_ bv0 2) ?x149)))
 (let (($x147 (= $x22 true)))
 (let (($x178 (= $x147 true)))
 (let (($x113 (and $x178 $x351)))
 (let (($x276 (and $x113 $x222)))
 (let (($x242 (and $x276 $x42)))
 (let (($x252 (and $x242 $x362)))
 (let (($x70 (and $x252 $x153)))
 (let (($x248 (and $x70 $x74)))
 (let (($x123 (and $x248 $x164)))
 (let (($x25 (and $x123 $x331)))
 (let (($x336 (and $x25 $x292)))
 (let (($x203 (and $x336 $x354)))
 (let (($x132 (and $x203 $x268)))
 (let (($x271 (and $x132 $x86)))
 (let (($x117 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x117 $x271)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x63 $x181)))
 (let (($x184 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x168 (and $x184 $x196)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let (($x61 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd ?x128 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x89 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x182)))
 (let (($x46 (or false (or false (and (and true (or $x295 $x89)) (or $x20 $x61))))))
 (let (($x161 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x46)))
 (let (($x165 (=> (and $x38 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x46)))
 (let (($x344 (and $x165 $x168)))
 (let (($x249 (=> $x344 $x324)))
 (not $x249))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x220 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (not $x38)))
 (let (($x251 (=> $x17 $x220)))
 (let (($x102 (= $x251 true)))
 (let (($x324 (= $x102 true)))
 (let (($x264 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2017X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2017X) (_ bv0 32)))))
 ))
 (let (($x6 (forall ((input.ind-%var2016X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2016X)))
 (= $x65 false)))
 ))
 (let (($x90 (and $x6 $x264)))
 (let (($x86 (= $x90 true)))
 (let (($x208 (forall ((input.ind-%var2011X (_ BitVec 32)) )(let ((?x363 (bvadd (bvmul input.ind-%var2011X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x363))))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv2 32))) ?x177)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv3 32))) ?x116)))
 (let ((?x298 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2011X)))
 (let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2011X)))
 (=> $x88 (= ?x298 ?x64)))))))))
 ))
 (let (($x263 (forall ((input.ind-%var2010X (_ BitVec 32)) )(let (($x83 (and (bvule (_ bv0 32) input.ind-%var2010X) (bvult input.ind-%var2010X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2010X)))
 (= $x88 $x83))))
 ))
 (let (($x207 (and $x263 $x208)))
 (let (($x268 (= $x207 true)))
 (let (($x202 (forall ((input.ind-%var2005X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2005X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2005X) (_ bv0 32)))))
 ))
 (let (($x250 (forall ((input.ind-%var2004X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2004X)))
 (= $x65 false)))
 ))
 (let (($x213 (and $x250 $x202)))
 (let (($x354 (= $x213 true)))
 (let ((?x316 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x325 (bvneg ?x316)))
 (let (($x44 (= ?x325 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x226 (= $x44 true)))
 (let (($x292 (= $x226 true)))
 (let ((?x326 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x360 (bvneg ?x326)))
 (let (($x259 (= ?x360 input.dst.llvm-%n)))
 (let (($x12 (= $x259 true)))
 (let (($x331 (= $x12 true)))
 (let (($x279 (= ?x360 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x245 (= $x279 true)))
 (let (($x164 (= $x245 true)))
 (let (($x73 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x314 (= $x73 true)))
 (let (($x348 (= $x314 true)))
 (let (($x74 (= $x348 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (= $x235 true)))
 (let (($x103 (= $x80 true)))
 (let (($x153 (= $x103 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x205 true)))
 (let (($x291 (= $x142 true)))
 (let (($x362 (= $x291 true)))
 (let (($x285 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x212 (= $x285 true)))
 (let (($x287 (= $x212 true)))
 (let (($x42 (= $x287 true)))
 (let (($x332 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x332 true)))
 (let (($x144 (= $x159 true)))
 (let (($x222 (= $x144 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x49)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x26)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x32 $x189)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x169 $x78)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x172 $x28)))
 (let (($x140 (not $x76)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x301 (and $x110 $x101)))
 (let (($x198 (and (not $x301) $x140)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x170 $x139)))
 (let (($x79 (not $x130)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x262 $x18)))
 (let (($x166 (and (not $x186) $x79)))
 (let (($x81 (and (and (and (and (and (and $x166 $x198) $x59) $x39) $x224) $x129) $x51)))
 (let (($x84 (and $x81 $x95)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x219 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x219)))
 (let (($x125 (or false (or false (and (and true (or $x174 $x136)) (or $x50 $x163))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x141 (and $x60 $x84)))
 (let (($x194 (= $x141 true)))
 (let (($x274 (= $x194 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x149 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x22 (= (_ bv0 2) ?x149)))
 (let (($x147 (= $x22 true)))
 (let (($x178 (= $x147 true)))
 (let (($x113 (and $x178 $x351)))
 (let (($x276 (and $x113 $x222)))
 (let (($x242 (and $x276 $x42)))
 (let (($x252 (and $x242 $x362)))
 (let (($x70 (and $x252 $x153)))
 (let (($x248 (and $x70 $x74)))
 (let (($x123 (and $x248 $x164)))
 (let (($x25 (and $x123 $x331)))
 (let (($x336 (and $x25 $x292)))
 (let (($x203 (and $x336 $x354)))
 (let (($x132 (and $x203 $x268)))
 (let (($x271 (and $x132 $x86)))
 (let (($x117 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x117 $x271)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x63 $x181)))
 (let (($x184 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x168 (and $x184 $x196)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvadd input.dst.llvm-%m ?x261)))
 (let (($x61 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd ?x128 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x89 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x182)))
 (let (($x46 (or false (or false (and (and true (or $x295 $x89)) (or $x20 $x61))))))
 (let (($x161 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) $x46)))
 (let (($x165 (=> (and $x38 (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32)))) $x46)))
 (let (($x344 (and $x165 $x168)))
 (let (($x249 (=> $x344 $x324)))
 (not $x249))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
==query_number: 100
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x313 (forall ((input.ind-%var2041X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var2041X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x102)))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x31)))
 (let ((?x176 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2041X)))
 (let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2041X)))
 (=> $x88 (= ?x176 ?x126)))))))))
 ))
 (let (($x43 (forall ((input.ind-%var2040X (_ BitVec 32)) )(let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2040X)))
 (= $x88 (and (bvule (_ bv0 32) input.ind-%var2040X) (bvult input.ind-%var2040X input.dst.llvm-%n)))))
 ))
 (let (($x195 (and $x43 $x313)))
 (let (($x151 (= true true)))
 (let (($x357 (and $x151 $x195)))
 (let (($x247 (= $x357 true)))
 (let (($x340 (forall ((input.ind-%var2035X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2035X)))
 (=> $x12 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2035X) (_ bv0 32)))))
 ))
 (let (($x14 (forall ((input.ind-%var2034X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2034X)))
 (= $x12 false)))
 ))
 (let (($x5 (and $x14 $x340)))
 (let (($x56 (= $x5 true)))
 (let (($x234 (forall ((input.ind-%var2029X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var2029X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x102)))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x31)))
 (let ((?x176 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2029X)))
 (let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2029X)))
 (=> $x88 (= ?x176 ?x126)))))))))
 ))
 (let (($x290 (forall ((input.ind-%var2028X (_ BitVec 32)) )(let (($x355 (bvule (_ bv0 32) input.ind-%var2028X)))
 (let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2028X)))
 (= $x88 (and $x355 (bvult input.ind-%var2028X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x75 (and $x290 $x234)))
 (let (($x104 (= $x75 true)))
 (let (($x257 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2023X)))
 (=> $x12 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2023X) (_ bv0 32)))))
 ))
 (let (($x325 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2022X)))
 (= $x12 false)))
 ))
 (let (($x225 (and $x325 $x257)))
 (let (($x202 (= $x225 true)))
 (let ((?x165 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x165)))
 (let (($x326 (= ?x23 input.dst.llvm-%n)))
 (let (($x360 (= $x326 true)))
 (let (($x279 (= $x360 true)))
 (let ((?x314 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x348 (= (_ bv0 2) ?x314)))
 (let (($x74 (= $x348 true)))
 (let (($x248 (= $x74 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x235 (= $x252 true)))
 (let (($x80 (= $x235 true)))
 (let (($x103 (= $x80 true)))
 (let (($x42 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x242 (not $x42)))
 (let (($x205 (= $x242 true)))
 (let (($x142 (= $x205 true)))
 (let (($x291 (= $x142 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x141)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x95)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x109 $x256)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x224 $x26)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x59 $x349)))
 (let (($x39 (not $x200)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x198 $x69)))
 (let (($x169 (and (not $x167) $x39)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x301 $x180)))
 (let (($x28 (not $x172)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x174 $x136)))
 (let (($x140 (and (not $x101) $x28)))
 (let (($x159 (and (and (and (and (and (and $x140 $x169) $x29) $x78) $x51) $x49) $x84)))
 (let (($x144 (and $x159 $x194)))
 (let (($x206 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x145)))
 (let (($x79 (or false (or false (and (and true (or $x150 $x115)) (or $x186 $x206))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x222 (and $x110 $x144)))
 (let (($x276 (= $x222 true)))
 (let (($x71 (= $x276 true)))
 (let (($x285 (= $x71 true)))
 (let (($x22 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x147 (= $x22 true)))
 (let (($x178 (= $x147 true)))
 (let (($x15 (= $x178 true)))
 (let (($x160 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x240 (= $x160 true)))
 (let (($x117 (= $x240 true)))
 (let (($x187 (= $x117 true)))
 (let (($x184 (= ?x23 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (= $x184 true)))
 (let (($x135 (= $x92 true)))
 (let (($x138 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x138 true)))
 (let (($x260 (= $x232 true)))
 (let (($x46 (= $x260 true)))
 (let ((?x337 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x337)))
 (let (($x107 (= ?x9 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x20 (= $x107 true)))
 (let (($x35 (= $x20 true)))
 (let (($x21 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x182 (= $x21 true)))
 (let (($x295 (= $x182 true)))
 (let (($x278 (= $x295 true)))
 (let (($x61 (and $x278 $x35)))
 (let (($x161 (and $x61 $x46)))
 (let (($x63 (and $x161 $x135)))
 (let (($x149 (and $x63 $x187)))
 (let (($x91 (and $x149 $x15)))
 (let (($x212 (and $x91 $x285)))
 (let (($x362 (and $x212 $x291)))
 (let (($x153 (and $x362 $x103)))
 (let (($x112 (and $x153 $x248)))
 (let (($x245 (and $x112 $x279)))
 (let (($x213 (and $x245 $x202)))
 (let (($x302 (and $x213 $x104)))
 (let (($x179 (and $x302 $x56)))
 (let (($x57 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x57 $x179)))
 (let (($x241 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (and $x241 $x118)))
 (let (($x254 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x361 (and $x254 $x85)))
 (let (($x330 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x280 (and $x330 $x361)))
 (let (($x162 (=> $x280 $x247)))
 (not $x162)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x313 (forall ((input.ind-%var2041X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var2041X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x102)))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x31)))
 (let ((?x176 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2041X)))
 (let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2041X)))
 (=> $x88 (= ?x176 ?x126)))))))))
 ))
 (let (($x43 (forall ((input.ind-%var2040X (_ BitVec 32)) )(let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2040X)))
 (= $x88 (and (bvule (_ bv0 32) input.ind-%var2040X) (bvult input.ind-%var2040X input.dst.llvm-%n)))))
 ))
 (let (($x195 (and $x43 $x313)))
 (let (($x151 (= true true)))
 (let (($x357 (and $x151 $x195)))
 (let (($x247 (= $x357 true)))
 (let (($x340 (forall ((input.ind-%var2035X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2035X)))
 (=> $x12 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2035X) (_ bv0 32)))))
 ))
 (let (($x14 (forall ((input.ind-%var2034X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2034X)))
 (= $x12 false)))
 ))
 (let (($x5 (and $x14 $x340)))
 (let (($x56 (= $x5 true)))
 (let (($x234 (forall ((input.ind-%var2029X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var2029X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x102)))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x31)))
 (let ((?x176 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2029X)))
 (let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2029X)))
 (=> $x88 (= ?x176 ?x126)))))))))
 ))
 (let (($x290 (forall ((input.ind-%var2028X (_ BitVec 32)) )(let (($x355 (bvule (_ bv0 32) input.ind-%var2028X)))
 (let (($x88 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2028X)))
 (= $x88 (and $x355 (bvult input.ind-%var2028X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x75 (and $x290 $x234)))
 (let (($x104 (= $x75 true)))
 (let (($x257 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2023X)))
 (=> $x12 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2023X) (_ bv0 32)))))
 ))
 (let (($x325 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2022X)))
 (= $x12 false)))
 ))
 (let (($x225 (and $x325 $x257)))
 (let (($x202 (= $x225 true)))
 (let ((?x165 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x165)))
 (let (($x326 (= ?x23 input.dst.llvm-%n)))
 (let (($x360 (= $x326 true)))
 (let (($x279 (= $x360 true)))
 (let ((?x314 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x348 (= (_ bv0 2) ?x314)))
 (let (($x74 (= $x348 true)))
 (let (($x248 (= $x74 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x235 (= $x252 true)))
 (let (($x80 (= $x235 true)))
 (let (($x103 (= $x80 true)))
 (let (($x42 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x242 (not $x42)))
 (let (($x205 (= $x242 true)))
 (let (($x142 (= $x205 true)))
 (let (($x291 (= $x142 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x141)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x95)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x109 $x256)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x224 $x26)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x59 $x349)))
 (let (($x39 (not $x200)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x198 $x69)))
 (let (($x169 (and (not $x167) $x39)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x301 $x180)))
 (let (($x28 (not $x172)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x174 $x136)))
 (let (($x140 (and (not $x101) $x28)))
 (let (($x159 (and (and (and (and (and (and $x140 $x169) $x29) $x78) $x51) $x49) $x84)))
 (let (($x144 (and $x159 $x194)))
 (let (($x206 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x145)))
 (let (($x79 (or false (or false (and (and true (or $x150 $x115)) (or $x186 $x206))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x222 (and $x110 $x144)))
 (let (($x276 (= $x222 true)))
 (let (($x71 (= $x276 true)))
 (let (($x285 (= $x71 true)))
 (let (($x22 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x147 (= $x22 true)))
 (let (($x178 (= $x147 true)))
 (let (($x15 (= $x178 true)))
 (let (($x160 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x240 (= $x160 true)))
 (let (($x117 (= $x240 true)))
 (let (($x187 (= $x117 true)))
 (let (($x184 (= ?x23 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (= $x184 true)))
 (let (($x135 (= $x92 true)))
 (let (($x138 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x138 true)))
 (let (($x260 (= $x232 true)))
 (let (($x46 (= $x260 true)))
 (let ((?x337 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x337)))
 (let (($x107 (= ?x9 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x20 (= $x107 true)))
 (let (($x35 (= $x20 true)))
 (let (($x21 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x182 (= $x21 true)))
 (let (($x295 (= $x182 true)))
 (let (($x278 (= $x295 true)))
 (let (($x61 (and $x278 $x35)))
 (let (($x161 (and $x61 $x46)))
 (let (($x63 (and $x161 $x135)))
 (let (($x149 (and $x63 $x187)))
 (let (($x91 (and $x149 $x15)))
 (let (($x212 (and $x91 $x285)))
 (let (($x362 (and $x212 $x291)))
 (let (($x153 (and $x362 $x103)))
 (let (($x112 (and $x153 $x248)))
 (let (($x245 (and $x112 $x279)))
 (let (($x213 (and $x245 $x202)))
 (let (($x302 (and $x213 $x104)))
 (let (($x179 (and $x302 $x56)))
 (let (($x57 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x57 $x179)))
 (let (($x241 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (and $x241 $x118)))
 (let (($x254 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x361 (and $x254 $x85)))
 (let (($x330 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x280 (and $x330 $x361)))
 (let (($x162 (=> $x280 $x247)))
 (not $x162)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1498962/query
