==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171562/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x12 (not $x42)))
 (let (($x110 (or $x42 $x12)))
 (let (($x111 (= $x110 false)))
 (let (($x112 (= $x111 true)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x94)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x97)))
 (let (($x100 (= input.spec-%var-x-0.2 ?x99)))
 (let (($x88 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x101 (=> $x88 $x100)))
 (let ((?x84 (ite $x42 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x84 (_ bv1 32))))
 (let (($x90 (= $x88 $x89)))
 (let (($x5 (= false false)))
 (let (($x83 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x87 (=> $x83 $x5)))
 (let (($x85 (= ?x84 (_ bv0 32))))
 (let (($x86 (= $x83 $x85)))
 (let (($x104 (and (and (and $x86 $x87) $x90) $x101)))
 (let (($x105 (= $x104 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x76 (concat ?x73 (concat ?x69 ?x67)))))
 (let (($x78 (= ?x77 input.dst.llvm-%x)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x55 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x61 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x10 (=> (and $x12 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x7)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x38 $x22)))
 (let (($x33 (and $x11 $x37)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x41 $x33)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x13)))))))
 (let (($x32 (and $x14 $x9)))
 (let (($x40 (= $x32 true)))
 (let (($x43 (= $x40 true)))
 (let (($x16 (= $x43 true)))
 (let (($x64 (and $x16 $x63)))
 (let (($x81 (and $x64 $x80)))
 (let (($x106 (and $x81 $x105)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x107 (and $x24 $x106)))
 (let (($x108 (and $x5 $x107)))
 (let (($x21 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x109 (and $x21 $x108)))
 (let (($x113 (=> $x109 $x112)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x12 (not $x42)))
 (let (($x110 (or $x42 $x12)))
 (let (($x111 (= $x110 false)))
 (let (($x112 (= $x111 true)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x94)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x97)))
 (let (($x100 (= input.spec-%var-x-0.2 ?x99)))
 (let (($x88 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x101 (=> $x88 $x100)))
 (let ((?x84 (ite $x42 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x84 (_ bv1 32))))
 (let (($x90 (= $x88 $x89)))
 (let (($x5 (= false false)))
 (let (($x83 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x87 (=> $x83 $x5)))
 (let (($x85 (= ?x84 (_ bv0 32))))
 (let (($x86 (= $x83 $x85)))
 (let (($x104 (and (and (and $x86 $x87) $x90) $x101)))
 (let (($x105 (= $x104 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x76 (concat ?x73 (concat ?x69 ?x67)))))
 (let (($x78 (= ?x77 input.dst.llvm-%x)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x55 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x61 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x10 (=> (and $x12 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x7)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x38 $x22)))
 (let (($x33 (and $x11 $x37)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x41 $x33)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x13)))))))
 (let (($x32 (and $x14 $x9)))
 (let (($x40 (= $x32 true)))
 (let (($x43 (= $x40 true)))
 (let (($x16 (= $x43 true)))
 (let (($x64 (and $x16 $x63)))
 (let (($x81 (and $x64 $x80)))
 (let (($x106 (and $x81 $x105)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x107 (and $x24 $x106)))
 (let (($x108 (and $x5 $x107)))
 (let (($x21 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x109 (and $x21 $x108)))
 (let (($x113 (=> $x109 $x112)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%var-x-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-x-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%7%bbentry #b00000000000000000000000000000101)
(= input.spec-%var-x_val-0.L2%7%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-x-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-x-0.2 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv536870908 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv536870911 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv536870908 32))
(define-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171562/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x45 (not $x29)))
 (let (($x122 (or $x29 $x45)))
 (let (($x123 (not $x122)))
 (let (($x92 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x99 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x121 (or $x99 $x92)))
 (let (($x124 (or $x121 $x123)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x107)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x110)))
 (let (($x113 (= input.spec-%var-x-0.2 ?x112)))
 (let (($x114 (=> $x99 $x113)))
 (let ((?x93 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x93 (_ bv1 32))))
 (let (($x101 (= $x99 $x100)))
 (let (($x39 (and (and (= $x92 (= ?x93 (_ bv0 32))) (=> $x92 (= false false))) $x101)))
 (let (($x66 (and $x39 $x114)))
 (let (($x115 (= $x66 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x88 (concat ?x5 (concat ?x83 ?x81)))))
 (let (($x90 (= ?x89 input.dst.llvm-%x)))
 (let (($x103 (= $x90 true)))
 (let (($x98 (= $x103 true)))
 (let (($x75 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x76 (= $x75 true)))
 (let (($x71 (= $x76 true)))
 (let (($x72 (= $x71 true)))
 (let (($x68 (= true $x75)))
 (let (($x69 (=> $x45 $x68)))
 (let (($x67 (= $x69 true)))
 (let (($x70 (= $x67 true)))
 (let (($x74 (= $x70 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x53 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x9 $x59)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x27)))))))
 (let (($x10 (and $x60 $x61)))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let (($x73 (and $x63 $x72)))
 (let (($x77 (and $x73 $x74)))
 (let (($x78 (and $x77 $x72)))
 (let (($x95 (and $x78 $x98)))
 (let (($x116 (and $x95 $x115)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x117 (and $x7 $x116)))
 (let (($x28 (= false false)))
 (let (($x118 (and $x28 $x117)))
 (let (($x17 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x119 (and $x17 $x118)))
 (let (($x25 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x41 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x8 (=> (and $x45 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x120 (and $x8 $x119)))
 (let (($x127 (=> $x120 $x126)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x45 (not $x29)))
 (let (($x122 (or $x29 $x45)))
 (let (($x123 (not $x122)))
 (let (($x92 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x99 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x121 (or $x99 $x92)))
 (let (($x124 (or $x121 $x123)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x107)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x110)))
 (let (($x113 (= input.spec-%var-x-0.2 ?x112)))
 (let (($x114 (=> $x99 $x113)))
 (let ((?x93 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x93 (_ bv1 32))))
 (let (($x101 (= $x99 $x100)))
 (let (($x39 (and (and (= $x92 (= ?x93 (_ bv0 32))) (=> $x92 (= false false))) $x101)))
 (let (($x66 (and $x39 $x114)))
 (let (($x115 (= $x66 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x88 (concat ?x5 (concat ?x83 ?x81)))))
 (let (($x90 (= ?x89 input.dst.llvm-%x)))
 (let (($x103 (= $x90 true)))
 (let (($x98 (= $x103 true)))
 (let (($x75 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x76 (= $x75 true)))
 (let (($x71 (= $x76 true)))
 (let (($x72 (= $x71 true)))
 (let (($x68 (= true $x75)))
 (let (($x69 (=> $x45 $x68)))
 (let (($x67 (= $x69 true)))
 (let (($x70 (= $x67 true)))
 (let (($x74 (= $x70 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x53 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x9 $x59)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x27)))))))
 (let (($x10 (and $x60 $x61)))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let (($x73 (and $x63 $x72)))
 (let (($x77 (and $x73 $x74)))
 (let (($x78 (and $x77 $x72)))
 (let (($x95 (and $x78 $x98)))
 (let (($x116 (and $x95 $x115)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x117 (and $x7 $x116)))
 (let (($x28 (= false false)))
 (let (($x118 (and $x28 $x117)))
 (let (($x17 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x119 (and $x17 $x118)))
 (let (($x25 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x41 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x8 (=> (and $x45 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x120 (and $x8 $x119)))
 (let (($x127 (=> $x120 $x126)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171562/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x121)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x124)))
 (let (($x127 (= input.spec-%var-x-0.2 ?x126)))
 (let (($x137 (= $x127 true)))
 (let (($x138 (= $x137 true)))
 (let (($x10 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x128 (=> $x10 $x127)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x113 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x113 (_ bv1 32))))
 (let (($x117 (= $x10 $x116)))
 (let (($x47 (= false false)))
 (let (($x112 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x115 (=> $x112 $x47)))
 (let (($x114 (= ?x113 (_ bv0 32))))
 (let (($x66 (= $x112 $x114)))
 (let (($x80 (and (and (and $x66 $x115) $x117) $x128)))
 (let (($x129 (= $x80 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x94 (concat ?x92 (concat ?x103 ?x89)))))
 (let (($x106 (= ?x28 input.dst.llvm-%x)))
 (let (($x104 (= $x106 true)))
 (let (($x107 (= $x104 true)))
 (let (($x97 (= input.dst.llvm-%x ?x28)))
 (let (($x68 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x26 (and $x68 $x97)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x54)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x31 $x61)))
 (let (($x35 (and $x9 $x25)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x14 $x35)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x53)))))))
 (let (($x101 (and (and (and $x51 true) $x16) $x26)))
 (let (($x77 (= true $x68)))
 (let (($x29 (not $x45)))
 (let (($x78 (=> $x29 $x77)))
 (let (($x39 (and $x78 $x101)))
 (let (($x111 (= $x39 true)))
 (let (($x108 (= $x111 true)))
 (let (($x109 (= $x108 true)))
 (let (($x5 (= $x29 true)))
 (let (($x82 (= $x5 true)))
 (let (($x83 (= $x82 true)))
 (let (($x69 (= $x68 true)))
 (let (($x67 (= $x69 true)))
 (let (($x70 (= $x67 true)))
 (let (($x79 (= $x78 true)))
 (let (($x102 (= $x79 true)))
 (let (($x88 (= $x102 true)))
 (let (($x65 (and $x51 $x16)))
 (let (($x75 (= $x65 true)))
 (let (($x76 (= $x75 true)))
 (let (($x71 (= $x76 true)))
 (let (($x74 (and $x71 $x70)))
 (let (($x85 (and $x74 $x88)))
 (let (($x86 (and $x85 $x70)))
 (let (($x81 (and $x86 $x83)))
 (let (($x105 (and $x81 $x109)))
 (let (($x110 (and $x105 $x107)))
 (let (($x130 (and $x110 $x129)))
 (let (($x131 (and $x130 $x129)))
 (let (($x132 (and $x10 $x131)))
 (let (($x50 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x133 (and $x50 $x132)))
 (let (($x134 (and $x47 $x133)))
 (let (($x62 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x135 (and $x62 $x134)))
 (let (($x49 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x33 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x49)))))))
 (let (($x46 (=> (and $x29 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x49)))))))
 (let (($x136 (and $x46 $x135)))
 (let (($x139 (=> $x136 $x138)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x121)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x124)))
 (let (($x127 (= input.spec-%var-x-0.2 ?x126)))
 (let (($x137 (= $x127 true)))
 (let (($x138 (= $x137 true)))
 (let (($x10 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x128 (=> $x10 $x127)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x113 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x113 (_ bv1 32))))
 (let (($x117 (= $x10 $x116)))
 (let (($x47 (= false false)))
 (let (($x112 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x115 (=> $x112 $x47)))
 (let (($x114 (= ?x113 (_ bv0 32))))
 (let (($x66 (= $x112 $x114)))
 (let (($x80 (and (and (and $x66 $x115) $x117) $x128)))
 (let (($x129 (= $x80 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x94 (concat ?x92 (concat ?x103 ?x89)))))
 (let (($x106 (= ?x28 input.dst.llvm-%x)))
 (let (($x104 (= $x106 true)))
 (let (($x107 (= $x104 true)))
 (let (($x97 (= input.dst.llvm-%x ?x28)))
 (let (($x68 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x26 (and $x68 $x97)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x54)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x31 $x61)))
 (let (($x35 (and $x9 $x25)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x14 $x35)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x53)))))))
 (let (($x101 (and (and (and $x51 true) $x16) $x26)))
 (let (($x77 (= true $x68)))
 (let (($x29 (not $x45)))
 (let (($x78 (=> $x29 $x77)))
 (let (($x39 (and $x78 $x101)))
 (let (($x111 (= $x39 true)))
 (let (($x108 (= $x111 true)))
 (let (($x109 (= $x108 true)))
 (let (($x5 (= $x29 true)))
 (let (($x82 (= $x5 true)))
 (let (($x83 (= $x82 true)))
 (let (($x69 (= $x68 true)))
 (let (($x67 (= $x69 true)))
 (let (($x70 (= $x67 true)))
 (let (($x79 (= $x78 true)))
 (let (($x102 (= $x79 true)))
 (let (($x88 (= $x102 true)))
 (let (($x65 (and $x51 $x16)))
 (let (($x75 (= $x65 true)))
 (let (($x76 (= $x75 true)))
 (let (($x71 (= $x76 true)))
 (let (($x74 (and $x71 $x70)))
 (let (($x85 (and $x74 $x88)))
 (let (($x86 (and $x85 $x70)))
 (let (($x81 (and $x86 $x83)))
 (let (($x105 (and $x81 $x109)))
 (let (($x110 (and $x105 $x107)))
 (let (($x130 (and $x110 $x129)))
 (let (($x131 (and $x130 $x129)))
 (let (($x132 (and $x10 $x131)))
 (let (($x50 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x133 (and $x50 $x132)))
 (let (($x134 (and $x47 $x133)))
 (let (($x62 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x135 (and $x62 $x134)))
 (let (($x49 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x33 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x49)))))))
 (let (($x46 (=> (and $x29 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x49)))))))
 (let (($x136 (and $x46 $x135)))
 (let (($x139 (=> $x136 $x138)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171562/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x18 (= $x140 true)))
 (let (($x34 (= $x18 true)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x120)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x124)))
 (let (($x128 (= input.spec-%var-x-0.2 ?x127)))
 (let (($x58 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x80 (=> $x58 $x128)))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x23 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x23 (_ bv1 32))))
 (let (($x125 (= $x58 $x37)))
 (let (($x8 (= false false)))
 (let (($x115 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x117 (=> $x115 $x8)))
 (let (($x10 (= ?x23 (_ bv0 32))))
 (let (($x116 (= $x115 $x10)))
 (let (($x131 (and (and (and $x116 $x117) $x125) $x80)))
 (let (($x132 (= $x131 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x84 (concat ?x81 (concat ?x86 ?x88)))))
 (let (($x113 (= ?x91 input.dst.llvm-%x)))
 (let (($x114 (= $x113 true)))
 (let (($x66 (= $x114 true)))
 (let (($x27 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x97 (= $x27 true)))
 (let (($x26 (= $x97 true)))
 (let (($x101 (= $x26 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x70)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x73 $x69)))
 (let (($x77 (and $x67 $x74)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x22 $x77)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x35)))))))
 (let (($x106 (and $x72 $x78)))
 (let (($x104 (= $x106 true)))
 (let (($x107 (= $x104 true)))
 (let (($x110 (= $x107 true)))
 (let (($x51 (= true $x27)))
 (let (($x29 (not $x21)))
 (let (($x12 (=> $x29 $x51)))
 (let (($x111 (= $x12 true)))
 (let (($x108 (= $x111 true)))
 (let (($x109 (= $x108 true)))
 (let (($x94 (= input.dst.llvm-%x ?x91)))
 (let (($x95 (and $x27 $x94)))
 (let (($x90 (and (and (and $x72 true) $x78) $x95)))
 (let (($x103 (and $x12 $x90)))
 (let (($x89 (= $x103 true)))
 (let (($x98 (= $x89 true)))
 (let (($x93 (= $x98 true)))
 (let (($x11 (= $x21 true)))
 (let (($x53 (= $x11 true)))
 (let (($x44 (= $x53 true)))
 (let (($x28 (and $x44 $x93)))
 (let (($x39 (and $x28 $x101)))
 (let (($x105 (and $x39 $x109)))
 (let (($x15 (and $x105 $x110)))
 (let (($x112 (and $x15 $x101)))
 (let (($x47 (and $x112 $x66)))
 (let (($x133 (and $x47 $x132)))
 (let (($x134 (and $x133 $x132)))
 (let (($x135 (and $x58 $x134)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x136 (and $x7 $x135)))
 (let (($x137 (and $x8 $x136)))
 (let (($x32 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x138 (and $x32 $x137)))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x17 (=> (and $x29 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x139 (and $x17 $x138)))
 (let (($x87 (=> $x139 $x34)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x18 (= $x140 true)))
 (let (($x34 (= $x18 true)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x120)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x124)))
 (let (($x128 (= input.spec-%var-x-0.2 ?x127)))
 (let (($x58 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x80 (=> $x58 $x128)))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x23 (ite $x21 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x23 (_ bv1 32))))
 (let (($x125 (= $x58 $x37)))
 (let (($x8 (= false false)))
 (let (($x115 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x117 (=> $x115 $x8)))
 (let (($x10 (= ?x23 (_ bv0 32))))
 (let (($x116 (= $x115 $x10)))
 (let (($x131 (and (and (and $x116 $x117) $x125) $x80)))
 (let (($x132 (= $x131 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x84 (concat ?x81 (concat ?x86 ?x88)))))
 (let (($x113 (= ?x91 input.dst.llvm-%x)))
 (let (($x114 (= $x113 true)))
 (let (($x66 (= $x114 true)))
 (let (($x27 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x97 (= $x27 true)))
 (let (($x26 (= $x97 true)))
 (let (($x101 (= $x26 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x70)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x73 $x69)))
 (let (($x77 (and $x67 $x74)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x22 $x77)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x35)))))))
 (let (($x106 (and $x72 $x78)))
 (let (($x104 (= $x106 true)))
 (let (($x107 (= $x104 true)))
 (let (($x110 (= $x107 true)))
 (let (($x51 (= true $x27)))
 (let (($x29 (not $x21)))
 (let (($x12 (=> $x29 $x51)))
 (let (($x111 (= $x12 true)))
 (let (($x108 (= $x111 true)))
 (let (($x109 (= $x108 true)))
 (let (($x94 (= input.dst.llvm-%x ?x91)))
 (let (($x95 (and $x27 $x94)))
 (let (($x90 (and (and (and $x72 true) $x78) $x95)))
 (let (($x103 (and $x12 $x90)))
 (let (($x89 (= $x103 true)))
 (let (($x98 (= $x89 true)))
 (let (($x93 (= $x98 true)))
 (let (($x11 (= $x21 true)))
 (let (($x53 (= $x11 true)))
 (let (($x44 (= $x53 true)))
 (let (($x28 (and $x44 $x93)))
 (let (($x39 (and $x28 $x101)))
 (let (($x105 (and $x39 $x109)))
 (let (($x15 (and $x105 $x110)))
 (let (($x112 (and $x15 $x101)))
 (let (($x47 (and $x112 $x66)))
 (let (($x133 (and $x47 $x132)))
 (let (($x134 (and $x133 $x132)))
 (let (($x135 (and $x58 $x134)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x136 (and $x7 $x135)))
 (let (($x137 (and $x8 $x136)))
 (let (($x32 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x138 (and $x32 $x137)))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x17 (=> (and $x29 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x139 (and $x17 $x138)))
 (let (($x87 (=> $x139 $x34)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171562/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x122)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x127)))
 (let (($x141 (= (_ bv5 32) ?x80)))
 (let (($x59 (= $x141 true)))
 (let (($x43 (= $x59 true)))
 (let (($x131 (= input.spec-%var-x-0.2 ?x80)))
 (let (($x130 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x132 (=> $x130 $x131)))
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x129 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x126 (bvuge ?x129 (_ bv1 32))))
 (let (($x118 (= $x130 $x126)))
 (let (($x7 (= false false)))
 (let (($x56 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x125 (=> $x56 $x7)))
 (let (($x58 (= ?x129 (_ bv0 32))))
 (let (($x37 (= $x56 $x58)))
 (let (($x135 (and (and (and $x37 $x125) $x118) $x132)))
 (let (($x136 (= $x135 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x104 (concat ?x109 (concat ?x101 ?x97)))))
 (let (($x10 (= ?x107 input.dst.llvm-%x)))
 (let (($x116 (= $x10 true)))
 (let (($x8 (= $x116 true)))
 (let (($x110 (= input.dst.llvm-%x ?x107)))
 (let (($x84 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x15 (and $x84 $x110)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x68)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x96 $x22)))
 (let (($x67 (and $x73 $x69)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x12 $x67)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x25)))))))
 (let (($x114 (and (and (and $x72 true) $x70) $x15)))
 (let (($x86 (= true $x84)))
 (let (($x21 (not $x50)))
 (let (($x88 (=> $x21 $x86)))
 (let (($x66 (and $x88 $x114)))
 (let (($x47 (= $x66 true)))
 (let (($x19 (= $x47 true)))
 (let (($x115 (= $x19 true)))
 (let (($x90 (= $x21 true)))
 (let (($x103 (= $x90 true)))
 (let (($x89 (= $x103 true)))
 (let (($x82 (= $x84 true)))
 (let (($x83 (= $x82 true)))
 (let (($x81 (= $x83 true)))
 (let (($x5 (= $x88 true)))
 (let (($x99 (= $x5 true)))
 (let (($x91 (= $x99 true)))
 (let (($x74 (and $x72 $x70)))
 (let (($x77 (= $x74 true)))
 (let (($x78 (= $x77 true)))
 (let (($x92 (= $x78 true)))
 (let (($x85 (and $x92 $x81)))
 (let (($x94 (and $x85 $x91)))
 (let (($x95 (and $x94 $x81)))
 (let (($x98 (and $x95 $x89)))
 (let (($x23 (and $x98 $x115)))
 (let (($x117 (and $x23 $x8)))
 (let (($x137 (and $x117 $x136)))
 (let (($x138 (and $x137 $x136)))
 (let (($x139 (and $x56 $x138)))
 (let (($x44 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x140 (and $x44 $x139)))
 (let (($x18 (and $x7 $x140)))
 (let (($x42 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x34 (and $x42 $x18)))
 (let (($x57 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x62 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x57)))))))
 (let (($x13 (=> (and $x21 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x48 $x57)))))))
 (let (($x87 (and $x13 $x34)))
 (let (($x14 (=> $x87 $x43)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x122)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x127)))
 (let (($x141 (= (_ bv5 32) ?x80)))
 (let (($x59 (= $x141 true)))
 (let (($x43 (= $x59 true)))
 (let (($x131 (= input.spec-%var-x-0.2 ?x80)))
 (let (($x130 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x132 (=> $x130 $x131)))
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x129 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x126 (bvuge ?x129 (_ bv1 32))))
 (let (($x118 (= $x130 $x126)))
 (let (($x7 (= false false)))
 (let (($x56 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x125 (=> $x56 $x7)))
 (let (($x58 (= ?x129 (_ bv0 32))))
 (let (($x37 (= $x56 $x58)))
 (let (($x135 (and (and (and $x37 $x125) $x118) $x132)))
 (let (($x136 (= $x135 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x104 (concat ?x109 (concat ?x101 ?x97)))))
 (let (($x10 (= ?x107 input.dst.llvm-%x)))
 (let (($x116 (= $x10 true)))
 (let (($x8 (= $x116 true)))
 (let (($x110 (= input.dst.llvm-%x ?x107)))
 (let (($x84 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x15 (and $x84 $x110)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x68)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x96 $x22)))
 (let (($x67 (and $x73 $x69)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x12 $x67)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x25)))))))
 (let (($x114 (and (and (and $x72 true) $x70) $x15)))
 (let (($x86 (= true $x84)))
 (let (($x21 (not $x50)))
 (let (($x88 (=> $x21 $x86)))
 (let (($x66 (and $x88 $x114)))
 (let (($x47 (= $x66 true)))
 (let (($x19 (= $x47 true)))
 (let (($x115 (= $x19 true)))
 (let (($x90 (= $x21 true)))
 (let (($x103 (= $x90 true)))
 (let (($x89 (= $x103 true)))
 (let (($x82 (= $x84 true)))
 (let (($x83 (= $x82 true)))
 (let (($x81 (= $x83 true)))
 (let (($x5 (= $x88 true)))
 (let (($x99 (= $x5 true)))
 (let (($x91 (= $x99 true)))
 (let (($x74 (and $x72 $x70)))
 (let (($x77 (= $x74 true)))
 (let (($x78 (= $x77 true)))
 (let (($x92 (= $x78 true)))
 (let (($x85 (and $x92 $x81)))
 (let (($x94 (and $x85 $x91)))
 (let (($x95 (and $x94 $x81)))
 (let (($x98 (and $x95 $x89)))
 (let (($x23 (and $x98 $x115)))
 (let (($x117 (and $x23 $x8)))
 (let (($x137 (and $x117 $x136)))
 (let (($x138 (and $x137 $x136)))
 (let (($x139 (and $x56 $x138)))
 (let (($x44 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x140 (and $x44 $x139)))
 (let (($x18 (and $x7 $x140)))
 (let (($x42 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x34 (and $x42 $x18)))
 (let (($x57 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x62 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x57)))))))
 (let (($x13 (=> (and $x21 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x48 $x57)))))))
 (let (($x87 (and $x13 $x34)))
 (let (($x14 (=> $x87 $x43)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171562/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x21 (not $x50)))
 (let (($x125 (or $x50 $x21)))
 (let (($x133 (= $x125 true)))
 (let (($x130 (= $x133 true)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x15)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x47)))
 (let (($x23 (= input.spec-%var-x-0.2 ?x115)))
 (let (($x101 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x10 (=> $x101 $x23)))
 (let ((?x111 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x111 (_ bv1 32))))
 (let (($x39 (= $x101 $x97)))
 (let (($x44 (= false false)))
 (let (($x104 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x26 (=> $x104 $x44)))
 (let (($x108 (= ?x111 (_ bv0 32))))
 (let (($x109 (= $x104 $x108)))
 (let (($x117 (and (and (and $x109 $x26) $x39) $x10)))
 (let (($x30 (= $x117 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x103 (concat ?x94 (concat ?x88 ?x85)))))
 (let (($x98 (= ?x89 input.dst.llvm-%x)))
 (let (($x112 (= $x98 true)))
 (let (($x113 (= $x112 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x74)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x68 $x67)))
 (let (($x78 (and $x70 $x77)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x25 $x78)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x72)))))))
 (let (($x79 (and $x73 $x92)))
 (let (($x100 (= $x79 true)))
 (let (($x84 (= $x100 true)))
 (let (($x82 (= $x84 true)))
 (let (($x93 (and $x82 $x113)))
 (let (($x56 (and $x93 $x30)))
 (let (($x76 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x129 (and $x76 $x56)))
 (let (($x58 (and $x44 $x129)))
 (let (($x53 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x37 (and $x53 $x58)))
 (let (($x36 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x42 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x36)))))))
 (let (($x55 (=> (and $x21 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x46 $x36)))))))
 (let (($x7 (and $x55 $x37)))
 (let (($x126 (=> $x7 $x130)))
 (not $x126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x21 (not $x50)))
 (let (($x125 (or $x50 $x21)))
 (let (($x133 (= $x125 true)))
 (let (($x130 (= $x133 true)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x15)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x47)))
 (let (($x23 (= input.spec-%var-x-0.2 ?x115)))
 (let (($x101 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x10 (=> $x101 $x23)))
 (let ((?x111 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x111 (_ bv1 32))))
 (let (($x39 (= $x101 $x97)))
 (let (($x44 (= false false)))
 (let (($x104 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x26 (=> $x104 $x44)))
 (let (($x108 (= ?x111 (_ bv0 32))))
 (let (($x109 (= $x104 $x108)))
 (let (($x117 (and (and (and $x109 $x26) $x39) $x10)))
 (let (($x30 (= $x117 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x103 (concat ?x94 (concat ?x88 ?x85)))))
 (let (($x98 (= ?x89 input.dst.llvm-%x)))
 (let (($x112 (= $x98 true)))
 (let (($x113 (= $x112 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x74)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x68 $x67)))
 (let (($x78 (and $x70 $x77)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x25 $x78)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x72)))))))
 (let (($x79 (and $x73 $x92)))
 (let (($x100 (= $x79 true)))
 (let (($x84 (= $x100 true)))
 (let (($x82 (= $x84 true)))
 (let (($x93 (and $x82 $x113)))
 (let (($x56 (and $x93 $x30)))
 (let (($x76 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x129 (and $x76 $x56)))
 (let (($x58 (and $x44 $x129)))
 (let (($x53 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x37 (and $x53 $x58)))
 (let (($x36 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x42 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x36)))))))
 (let (($x55 (=> (and $x21 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x46 $x36)))))))
 (let (($x7 (and $x55 $x37)))
 (let (($x126 (=> $x7 $x130)))
 (not $x126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171562/query
