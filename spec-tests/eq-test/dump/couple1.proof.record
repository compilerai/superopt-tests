==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1499631/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x12 (not $x42)))
 (let (($x110 (or $x42 $x12)))
 (let (($x111 (= $x110 false)))
 (let (($x112 (= $x111 true)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x94)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x97)))
 (let (($x100 (= input.spec-%var-x-0.2 ?x99)))
 (let (($x88 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x101 (=> $x88 $x100)))
 (let ((?x84 (ite $x42 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x84 (_ bv1 32))))
 (let (($x90 (= $x88 $x89)))
 (let (($x5 (= false false)))
 (let (($x83 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x87 (=> $x83 $x5)))
 (let (($x85 (= ?x84 (_ bv0 32))))
 (let (($x86 (= $x83 $x85)))
 (let (($x104 (and (and (and $x86 $x87) $x90) $x101)))
 (let (($x105 (= $x104 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x76 (concat ?x73 (concat ?x69 ?x67)))))
 (let (($x78 (= ?x77 input.dst.llvm-%x)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x55 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x61 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x10 (=> (and $x12 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x7)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x38 $x22)))
 (let (($x33 (and $x11 $x37)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x41 $x33)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x13)))))))
 (let (($x32 (and $x14 $x9)))
 (let (($x40 (= $x32 true)))
 (let (($x43 (= $x40 true)))
 (let (($x16 (= $x43 true)))
 (let (($x64 (and $x16 $x63)))
 (let (($x81 (and $x64 $x80)))
 (let (($x106 (and $x81 $x105)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x107 (and $x24 $x106)))
 (let (($x108 (and $x5 $x107)))
 (let (($x21 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x109 (and $x21 $x108)))
 (let (($x113 (=> $x109 $x112)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x12 (not $x42)))
 (let (($x110 (or $x42 $x12)))
 (let (($x111 (= $x110 false)))
 (let (($x112 (= $x111 true)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x94)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x97)))
 (let (($x100 (= input.spec-%var-x-0.2 ?x99)))
 (let (($x88 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x101 (=> $x88 $x100)))
 (let ((?x84 (ite $x42 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x84 (_ bv1 32))))
 (let (($x90 (= $x88 $x89)))
 (let (($x5 (= false false)))
 (let (($x83 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x87 (=> $x83 $x5)))
 (let (($x85 (= ?x84 (_ bv0 32))))
 (let (($x86 (= $x83 $x85)))
 (let (($x104 (and (and (and $x86 $x87) $x90) $x101)))
 (let (($x105 (= $x104 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x76 (concat ?x73 (concat ?x69 ?x67)))))
 (let (($x78 (= ?x77 input.dst.llvm-%x)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x55 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x61 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x10 (=> (and $x12 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x7)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x38 $x22)))
 (let (($x33 (and $x11 $x37)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x41 $x33)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x13)))))))
 (let (($x32 (and $x14 $x9)))
 (let (($x40 (= $x32 true)))
 (let (($x43 (= $x40 true)))
 (let (($x16 (= $x43 true)))
 (let (($x64 (and $x16 $x63)))
 (let (($x81 (and $x64 $x80)))
 (let (($x106 (and $x81 $x105)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x107 (and $x24 $x106)))
 (let (($x108 (and $x5 $x107)))
 (let (($x21 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x109 (and $x21 $x108)))
 (let (($x113 (=> $x109 $x112)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%var-x-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-x-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%7%bbentry #b00000000000000000000000000000101)
(= input.spec-%var-x_val-0.L2%7%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-x-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-x-0.2 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv536870908 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv536870911 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv536870908 32))
(define-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1499631/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x99 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x123 (or $x99 $x92)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x45 (not $x29)))
 (let (($x122 (or $x29 $x45)))
 (let (($x124 (=> $x122 $x123)))
 (let (($x75 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x68 (= true $x75)))
 (let (($x69 (=> $x45 $x68)))
 (let (($x121 (and $x75 $x69)))
 (let (($x125 (=> (and $x121 $x122) $x123)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x107)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x110)))
 (let (($x113 (= input.spec-%var-x-0.2 ?x112)))
 (let (($x114 (=> $x99 $x113)))
 (let ((?x93 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x93 (_ bv1 32))))
 (let (($x101 (= $x99 $x100)))
 (let (($x39 (and (and (= $x92 (= ?x93 (_ bv0 32))) (=> $x92 (= false false))) $x101)))
 (let (($x66 (and $x39 $x114)))
 (let (($x115 (= $x66 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x88 (concat ?x5 (concat ?x83 ?x81)))))
 (let (($x90 (= ?x89 input.dst.llvm-%x)))
 (let (($x103 (= $x90 true)))
 (let (($x98 (= $x103 true)))
 (let (($x76 (= $x75 true)))
 (let (($x71 (= $x76 true)))
 (let (($x72 (= $x71 true)))
 (let (($x67 (= $x69 true)))
 (let (($x70 (= $x67 true)))
 (let (($x74 (= $x70 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x53 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x9 $x59)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x27)))))))
 (let (($x10 (and $x60 $x61)))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let (($x73 (and $x63 $x72)))
 (let (($x77 (and $x73 $x74)))
 (let (($x78 (and $x77 $x72)))
 (let (($x95 (and $x78 $x98)))
 (let (($x116 (and $x95 $x115)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x117 (and $x7 $x116)))
 (let (($x28 (= false false)))
 (let (($x118 (and $x28 $x117)))
 (let (($x17 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x119 (and $x17 $x118)))
 (let (($x25 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x41 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x8 (=> (and $x45 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x120 (and $x8 $x119)))
 (let (($x128 (=> $x120 $x127)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x99 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x123 (or $x99 $x92)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x45 (not $x29)))
 (let (($x122 (or $x29 $x45)))
 (let (($x124 (=> $x122 $x123)))
 (let (($x75 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x68 (= true $x75)))
 (let (($x69 (=> $x45 $x68)))
 (let (($x121 (and $x75 $x69)))
 (let (($x125 (=> (and $x121 $x122) $x123)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x107)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x110)))
 (let (($x113 (= input.spec-%var-x-0.2 ?x112)))
 (let (($x114 (=> $x99 $x113)))
 (let ((?x93 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x93 (_ bv1 32))))
 (let (($x101 (= $x99 $x100)))
 (let (($x39 (and (and (= $x92 (= ?x93 (_ bv0 32))) (=> $x92 (= false false))) $x101)))
 (let (($x66 (and $x39 $x114)))
 (let (($x115 (= $x66 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x88 (concat ?x5 (concat ?x83 ?x81)))))
 (let (($x90 (= ?x89 input.dst.llvm-%x)))
 (let (($x103 (= $x90 true)))
 (let (($x98 (= $x103 true)))
 (let (($x76 (= $x75 true)))
 (let (($x71 (= $x76 true)))
 (let (($x72 (= $x71 true)))
 (let (($x67 (= $x69 true)))
 (let (($x70 (= $x67 true)))
 (let (($x74 (= $x70 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x53 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x9 $x59)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x27)))))))
 (let (($x10 (and $x60 $x61)))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let (($x73 (and $x63 $x72)))
 (let (($x77 (and $x73 $x74)))
 (let (($x78 (and $x77 $x72)))
 (let (($x95 (and $x78 $x98)))
 (let (($x116 (and $x95 $x115)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x117 (and $x7 $x116)))
 (let (($x28 (= false false)))
 (let (($x118 (and $x28 $x117)))
 (let (($x17 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x119 (and $x17 $x118)))
 (let (($x25 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x41 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x8 (=> (and $x45 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x120 (and $x8 $x119)))
 (let (($x128 (=> $x120 $x127)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1499631/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x116)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x119)))
 (let (($x122 (= input.spec-%var-x-0.2 ?x121)))
 (let (($x131 (= $x122 true)))
 (let (($x132 (= $x131 true)))
 (let (($x43 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x123 (=> $x43 $x122)))
 (let (($x24 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x106 (ite $x24 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x106 (_ bv1 32))))
 (let (($x113 (= $x43 $x112)))
 (let (($x11 (= false false)))
 (let (($x105 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x110 (=> $x105 $x11)))
 (let (($x104 (= ?x106 (_ bv0 32))))
 (let (($x107 (= $x105 $x104)))
 (let (($x126 (and (and (and $x107 $x110) $x113) $x123)))
 (let (($x127 (= $x126 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x100 (concat ?x97 (concat ?x93 ?x96)))))
 (let (($x39 (= ?x101 input.dst.llvm-%x)))
 (let (($x111 (= $x39 true)))
 (let (($x108 (= $x111 true)))
 (let (($x68 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x77 (= true $x68)))
 (let (($x29 (not $x24)))
 (let (($x78 (=> $x29 $x77)))
 (let (($x84 (and $x68 $x78)))
 (let (($x87 (= $x84 true)))
 (let (($x89 (= $x87 true)))
 (let (($x90 (= $x89 true)))
 (let (($x5 (= $x29 true)))
 (let (($x82 (= $x5 true)))
 (let (($x83 (= $x82 true)))
 (let (($x69 (= $x68 true)))
 (let (($x67 (= $x69 true)))
 (let (($x70 (= $x67 true)))
 (let (($x79 (= $x78 true)))
 (let (($x102 (= $x79 true)))
 (let (($x88 (= $x102 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x50)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x58 $x61)))
 (let (($x63 (and $x10 $x62)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x42 $x63)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x33)))))))
 (let (($x65 (and $x57 $x64)))
 (let (($x75 (= $x65 true)))
 (let (($x76 (= $x75 true)))
 (let (($x71 (= $x76 true)))
 (let (($x74 (and $x71 $x70)))
 (let (($x85 (and $x74 $x88)))
 (let (($x86 (and $x85 $x70)))
 (let (($x81 (and $x86 $x83)))
 (let (($x103 (and $x81 $x90)))
 (let (($x109 (and $x103 $x108)))
 (let (($x128 (and $x109 $x127)))
 (let (($x129 (and $x43 $x128)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x23 (and $x40 $x129)))
 (let (($x37 (and $x11 $x23)))
 (let (($x22 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x80 (and $x22 $x37)))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x38 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x6)))))))
 (let (($x21 (=> (and $x29 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x35 $x6)))))))
 (let (($x130 (and $x21 $x80)))
 (let (($x133 (=> $x130 $x132)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x116)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x119)))
 (let (($x122 (= input.spec-%var-x-0.2 ?x121)))
 (let (($x131 (= $x122 true)))
 (let (($x132 (= $x131 true)))
 (let (($x43 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x123 (=> $x43 $x122)))
 (let (($x24 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x106 (ite $x24 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x106 (_ bv1 32))))
 (let (($x113 (= $x43 $x112)))
 (let (($x11 (= false false)))
 (let (($x105 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x110 (=> $x105 $x11)))
 (let (($x104 (= ?x106 (_ bv0 32))))
 (let (($x107 (= $x105 $x104)))
 (let (($x126 (and (and (and $x107 $x110) $x113) $x123)))
 (let (($x127 (= $x126 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x100 (concat ?x97 (concat ?x93 ?x96)))))
 (let (($x39 (= ?x101 input.dst.llvm-%x)))
 (let (($x111 (= $x39 true)))
 (let (($x108 (= $x111 true)))
 (let (($x68 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x77 (= true $x68)))
 (let (($x29 (not $x24)))
 (let (($x78 (=> $x29 $x77)))
 (let (($x84 (and $x68 $x78)))
 (let (($x87 (= $x84 true)))
 (let (($x89 (= $x87 true)))
 (let (($x90 (= $x89 true)))
 (let (($x5 (= $x29 true)))
 (let (($x82 (= $x5 true)))
 (let (($x83 (= $x82 true)))
 (let (($x69 (= $x68 true)))
 (let (($x67 (= $x69 true)))
 (let (($x70 (= $x67 true)))
 (let (($x79 (= $x78 true)))
 (let (($x102 (= $x79 true)))
 (let (($x88 (= $x102 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x50)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x58 $x61)))
 (let (($x63 (and $x10 $x62)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x42 $x63)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x33)))))))
 (let (($x65 (and $x57 $x64)))
 (let (($x75 (= $x65 true)))
 (let (($x76 (= $x75 true)))
 (let (($x71 (= $x76 true)))
 (let (($x74 (and $x71 $x70)))
 (let (($x85 (and $x74 $x88)))
 (let (($x86 (and $x85 $x70)))
 (let (($x81 (and $x86 $x83)))
 (let (($x103 (and $x81 $x90)))
 (let (($x109 (and $x103 $x108)))
 (let (($x128 (and $x109 $x127)))
 (let (($x129 (and $x43 $x128)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x23 (and $x40 $x129)))
 (let (($x37 (and $x11 $x23)))
 (let (($x22 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x80 (and $x22 $x37)))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x38 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x6)))))))
 (let (($x21 (=> (and $x29 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x35 $x6)))))))
 (let (($x130 (and $x21 $x80)))
 (let (($x133 (=> $x130 $x132)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1499631/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x20 (= $x134 true)))
 (let (($x16 (= $x20 true)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x115)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x119)))
 (let (($x123 (= input.spec-%var-x-0.2 ?x122)))
 (let (($x51 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x126 (=> $x51 $x123)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x124 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x124 (_ bv1 32))))
 (let (($x120 (= $x51 $x125)))
 (let (($x32 (= false false)))
 (let (($x110 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x113 (=> $x110 $x32)))
 (let (($x43 (= ?x124 (_ bv0 32))))
 (let (($x112 (= $x110 $x43)))
 (let (($x129 (and (and (and $x112 $x113) $x120) $x126)))
 (let (($x23 (= $x129 true)))
 (let (($x97 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x92 (= $x97 true)))
 (let (($x93 (= $x92 true)))
 (let (($x96 (= $x93 true)))
 (let (($x26 (= true $x97)))
 (let (($x29 (not $x46)))
 (let (($x101 (=> $x29 $x26)))
 (let (($x105 (= $x101 true)))
 (let (($x106 (= $x105 true)))
 (let (($x104 (= $x106 true)))
 (let (($x39 (and $x97 $x101)))
 (let (($x111 (= $x39 true)))
 (let (($x108 (= $x111 true)))
 (let (($x109 (= $x108 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x81)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x68 $x82)))
 (let (($x87 (and $x83 $x84)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x73 $x87)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x77)))))))
 (let (($x90 (and $x86 $x89)))
 (let (($x103 (= $x90 true)))
 (let (($x98 (= $x103 true)))
 (let (($x99 (= $x98 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x63 (concat ?x10 (concat ?x42 ?x57)))))
 (let (($x65 (= ?x64 input.dst.llvm-%x)))
 (let (($x75 (= $x65 true)))
 (let (($x76 (= $x75 true)))
 (let (($x60 (= $x46 true)))
 (let (($x33 (= $x60 true)))
 (let (($x9 (= $x33 true)))
 (let (($x71 (and $x9 $x76)))
 (let (($x100 (and $x71 $x99)))
 (let (($x91 (and $x100 $x96)))
 (let (($x52 (and $x91 $x109)))
 (let (($x107 (and $x52 $x104)))
 (let (($x11 (and $x107 $x96)))
 (let (($x37 (and $x11 $x23)))
 (let (($x80 (and $x51 $x37)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x130 (and $x30 $x80)))
 (let (($x131 (and $x32 $x130)))
 (let (($x7 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x132 (and $x7 $x131)))
 (let (($x14 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x17 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x14)))))))
 (let (($x47 (=> (and $x29 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x15 $x14)))))))
 (let (($x133 (and $x47 $x132)))
 (let (($x95 (=> $x133 $x16)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x20 (= $x134 true)))
 (let (($x16 (= $x20 true)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x115)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x119)))
 (let (($x123 (= input.spec-%var-x-0.2 ?x122)))
 (let (($x51 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x126 (=> $x51 $x123)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x124 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x124 (_ bv1 32))))
 (let (($x120 (= $x51 $x125)))
 (let (($x32 (= false false)))
 (let (($x110 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x113 (=> $x110 $x32)))
 (let (($x43 (= ?x124 (_ bv0 32))))
 (let (($x112 (= $x110 $x43)))
 (let (($x129 (and (and (and $x112 $x113) $x120) $x126)))
 (let (($x23 (= $x129 true)))
 (let (($x97 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x92 (= $x97 true)))
 (let (($x93 (= $x92 true)))
 (let (($x96 (= $x93 true)))
 (let (($x26 (= true $x97)))
 (let (($x29 (not $x46)))
 (let (($x101 (=> $x29 $x26)))
 (let (($x105 (= $x101 true)))
 (let (($x106 (= $x105 true)))
 (let (($x104 (= $x106 true)))
 (let (($x39 (and $x97 $x101)))
 (let (($x111 (= $x39 true)))
 (let (($x108 (= $x111 true)))
 (let (($x109 (= $x108 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x81)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x68 $x82)))
 (let (($x87 (and $x83 $x84)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x73 $x87)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x77)))))))
 (let (($x90 (and $x86 $x89)))
 (let (($x103 (= $x90 true)))
 (let (($x98 (= $x103 true)))
 (let (($x99 (= $x98 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x63 (concat ?x10 (concat ?x42 ?x57)))))
 (let (($x65 (= ?x64 input.dst.llvm-%x)))
 (let (($x75 (= $x65 true)))
 (let (($x76 (= $x75 true)))
 (let (($x60 (= $x46 true)))
 (let (($x33 (= $x60 true)))
 (let (($x9 (= $x33 true)))
 (let (($x71 (and $x9 $x76)))
 (let (($x100 (and $x71 $x99)))
 (let (($x91 (and $x100 $x96)))
 (let (($x52 (and $x91 $x109)))
 (let (($x107 (and $x52 $x104)))
 (let (($x11 (and $x107 $x96)))
 (let (($x37 (and $x11 $x23)))
 (let (($x80 (and $x51 $x37)))
 (let (($x30 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x130 (and $x30 $x80)))
 (let (($x131 (and $x32 $x130)))
 (let (($x7 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x132 (and $x7 $x131)))
 (let (($x14 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x17 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x14)))))))
 (let (($x47 (=> (and $x29 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x15 $x14)))))))
 (let (($x133 (and $x47 $x132)))
 (let (($x95 (=> $x133 $x16)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1499631/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x117)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x122)))
 (let (($x135 (= (_ bv5 32) ?x126)))
 (let (($x19 (= $x135 true)))
 (let (($x45 (= $x19 true)))
 (let (($x129 (= input.spec-%var-x-0.2 ?x126)))
 (let (($x128 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x23 (=> $x128 $x129)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x127 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x127 (_ bv1 32))))
 (let (($x114 (= $x128 $x121)))
 (let (($x30 (= false false)))
 (let (($x55 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x120 (=> $x55 $x30)))
 (let (($x51 (= ?x127 (_ bv0 32))))
 (let (($x125 (= $x55 $x51)))
 (let (($x130 (and (and (and $x125 $x120) $x114) $x23)))
 (let (($x131 (= $x130 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x110 (concat ?x107 (concat ?x52 ?x108)))))
 (let (($x43 (= ?x124 input.dst.llvm-%x)))
 (let (($x112 (= $x43 true)))
 (let (($x32 (= $x112 true)))
 (let (($x5 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x87 (= true $x5)))
 (let (($x46 (not $x40)))
 (let (($x89 (=> $x46 $x87)))
 (let (($x93 (and $x5 $x89)))
 (let (($x96 (= $x93 true)))
 (let (($x91 (= $x96 true)))
 (let (($x26 (= $x91 true)))
 (let (($x94 (= $x46 true)))
 (let (($x28 (= $x94 true)))
 (let (($x97 (= $x28 true)))
 (let (($x82 (= $x5 true)))
 (let (($x83 (= $x82 true)))
 (let (($x81 (= $x83 true)))
 (let (($x90 (= $x89 true)))
 (let (($x103 (= $x90 true)))
 (let (($x98 (= $x103 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x70)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x71 $x67)))
 (let (($x77 (and $x85 $x74)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x59 $x77)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x57)))))))
 (let (($x79 (and $x76 $x78)))
 (let (($x102 (= $x79 true)))
 (let (($x88 (= $x102 true)))
 (let (($x86 (= $x88 true)))
 (let (($x84 (and $x86 $x81)))
 (let (($x99 (and $x84 $x98)))
 (let (($x100 (and $x99 $x81)))
 (let (($x92 (and $x100 $x97)))
 (let (($x101 (and $x92 $x26)))
 (let (($x113 (and $x101 $x32)))
 (let (($x132 (and $x113 $x131)))
 (let (($x133 (and $x55 $x132)))
 (let (($x9 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x134 (and $x9 $x133)))
 (let (($x20 (and $x30 $x134)))
 (let (($x12 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x16 (and $x12 $x20)))
 (let (($x8 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x22 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x8)))))))
 (let (($x31 (=> (and $x46 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x41 $x8)))))))
 (let (($x95 (and $x31 $x16)))
 (let (($x72 (=> $x95 $x45)))
 (not $x72)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x117)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x122)))
 (let (($x135 (= (_ bv5 32) ?x126)))
 (let (($x19 (= $x135 true)))
 (let (($x45 (= $x19 true)))
 (let (($x129 (= input.spec-%var-x-0.2 ?x126)))
 (let (($x128 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x23 (=> $x128 $x129)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x127 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x127 (_ bv1 32))))
 (let (($x114 (= $x128 $x121)))
 (let (($x30 (= false false)))
 (let (($x55 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x120 (=> $x55 $x30)))
 (let (($x51 (= ?x127 (_ bv0 32))))
 (let (($x125 (= $x55 $x51)))
 (let (($x130 (and (and (and $x125 $x120) $x114) $x23)))
 (let (($x131 (= $x130 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x110 (concat ?x107 (concat ?x52 ?x108)))))
 (let (($x43 (= ?x124 input.dst.llvm-%x)))
 (let (($x112 (= $x43 true)))
 (let (($x32 (= $x112 true)))
 (let (($x5 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x87 (= true $x5)))
 (let (($x46 (not $x40)))
 (let (($x89 (=> $x46 $x87)))
 (let (($x93 (and $x5 $x89)))
 (let (($x96 (= $x93 true)))
 (let (($x91 (= $x96 true)))
 (let (($x26 (= $x91 true)))
 (let (($x94 (= $x46 true)))
 (let (($x28 (= $x94 true)))
 (let (($x97 (= $x28 true)))
 (let (($x82 (= $x5 true)))
 (let (($x83 (= $x82 true)))
 (let (($x81 (= $x83 true)))
 (let (($x90 (= $x89 true)))
 (let (($x103 (= $x90 true)))
 (let (($x98 (= $x103 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x70)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x71 $x67)))
 (let (($x77 (and $x85 $x74)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x59 $x77)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x57)))))))
 (let (($x79 (and $x76 $x78)))
 (let (($x102 (= $x79 true)))
 (let (($x88 (= $x102 true)))
 (let (($x86 (= $x88 true)))
 (let (($x84 (and $x86 $x81)))
 (let (($x99 (and $x84 $x98)))
 (let (($x100 (and $x99 $x81)))
 (let (($x92 (and $x100 $x97)))
 (let (($x101 (and $x92 $x26)))
 (let (($x113 (and $x101 $x32)))
 (let (($x132 (and $x113 $x131)))
 (let (($x133 (and $x55 $x132)))
 (let (($x9 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x134 (and $x9 $x133)))
 (let (($x20 (and $x30 $x134)))
 (let (($x12 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x16 (and $x12 $x20)))
 (let (($x8 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x22 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x8)))))))
 (let (($x31 (=> (and $x46 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x41 $x8)))))))
 (let (($x95 (and $x31 $x16)))
 (let (($x72 (=> $x95 $x45)))
 (not $x72)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1499631/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x46 (not $x40)))
 (let (($x80 (or $x40 $x46)))
 (let (($x123 (= $x80 true)))
 (let (($x115 (= $x123 true)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x11)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x112)))
 (let (($x53 (= input.spec-%var-x-0.2 ?x113)))
 (let (($x104 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x55 (=> $x104 $x53)))
 (let ((?x39 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x39 (_ bv1 32))))
 (let (($x109 (= $x104 $x107)))
 (let (($x9 (= false false)))
 (let (($x101 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x106 (=> $x101 $x9)))
 (let (($x56 (= ?x39 (_ bv0 32))))
 (let (($x110 (= $x101 $x56)))
 (let (($x125 (and (and (and $x110 $x106) $x109) $x55)))
 (let (($x30 (= $x125 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x28 (concat ?x99 (concat ?x89 ?x84)))))
 (let (($x92 (= ?x97 input.dst.llvm-%x)))
 (let (($x93 (= $x92 true)))
 (let (($x96 (= $x93 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x79)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x70 $x77)))
 (let (($x88 (and $x78 $x102)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x57 $x88)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x76)))))))
 (let (($x73 (and $x85 $x86)))
 (let (($x68 (= $x73 true)))
 (let (($x5 (= $x68 true)))
 (let (($x82 (= $x5 true)))
 (let (($x91 (and $x82 $x96)))
 (let (($x120 (and $x91 $x30)))
 (let (($x75 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x37 (and $x75 $x120)))
 (let (($x128 (and $x9 $x37)))
 (let (($x33 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x121 (and $x33 $x128)))
 (let (($x17 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x12 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x17)))))))
 (let (($x13 (=> (and $x46 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x21 $x17)))))))
 (let (($x114 (and $x13 $x121)))
 (let (($x119 (=> $x114 $x115)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x46 (not $x40)))
 (let (($x80 (or $x40 $x46)))
 (let (($x123 (= $x80 true)))
 (let (($x115 (= $x123 true)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x11)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x112)))
 (let (($x53 (= input.spec-%var-x-0.2 ?x113)))
 (let (($x104 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x55 (=> $x104 $x53)))
 (let ((?x39 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x39 (_ bv1 32))))
 (let (($x109 (= $x104 $x107)))
 (let (($x9 (= false false)))
 (let (($x101 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x106 (=> $x101 $x9)))
 (let (($x56 (= ?x39 (_ bv0 32))))
 (let (($x110 (= $x101 $x56)))
 (let (($x125 (and (and (and $x110 $x106) $x109) $x55)))
 (let (($x30 (= $x125 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x28 (concat ?x99 (concat ?x89 ?x84)))))
 (let (($x92 (= ?x97 input.dst.llvm-%x)))
 (let (($x93 (= $x92 true)))
 (let (($x96 (= $x93 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x79)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x70 $x77)))
 (let (($x88 (and $x78 $x102)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x57 $x88)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x76)))))))
 (let (($x73 (and $x85 $x86)))
 (let (($x68 (= $x73 true)))
 (let (($x5 (= $x68 true)))
 (let (($x82 (= $x5 true)))
 (let (($x91 (and $x82 $x96)))
 (let (($x120 (and $x91 $x30)))
 (let (($x75 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x37 (and $x75 $x120)))
 (let (($x128 (and $x9 $x37)))
 (let (($x33 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x121 (and $x33 $x128)))
 (let (($x17 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x12 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x17)))))))
 (let (($x13 (=> (and $x46 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x21 $x17)))))))
 (let (($x114 (and $x13 $x121)))
 (let (($x119 (=> $x114 $x115)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1499631/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x44 (= $x54 true)))
 (let (($x29 (= $x44 true)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x116)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x126)))
 (let (($x130 (= input.spec-%var-x-0.2 ?x23)))
 (let (($x65 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x131 (=> $x65 $x130)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x123 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x123 (_ bv1 32))))
 (let (($x18 (= $x65 $x25)))
 (let (($x75 (= false false)))
 (let (($x80 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x118 (=> $x80 $x75)))
 (let (($x115 (= ?x123 (_ bv0 32))))
 (let (($x119 (= $x80 $x115)))
 (let (($x134 (and (and (and $x119 $x118) $x18) $x131)))
 (let (($x20 (= $x134 true)))
 (let (($x124 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x53 (= $x124 true)))
 (let (($x55 (= $x53 true)))
 (let (($x125 (= $x55 true)))
 (let (($x43 (= true $x124)))
 (let (($x46 (not $x40)))
 (let (($x108 (=> $x46 $x43)))
 (let (($x120 (= $x108 true)))
 (let (($x37 (= $x120 true)))
 (let (($x128 (= $x37 true)))
 (let (($x105 (and $x124 $x108)))
 (let (($x52 (= $x105 true)))
 (let (($x11 (= $x52 true)))
 (let (($x112 (= $x11 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x39)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x103 $x26)))
 (let (($x110 (and $x101 $x56)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x28 $x110)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x84)))))))
 (let (($x106 (and $x96 $x9)))
 (let (($x127 (= $x106 true)))
 (let (($x104 (= $x127 true)))
 (let (($x107 (= $x104 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x86 (concat ?x79 (concat ?x70 ?x42)))))
 (let (($x68 (= ?x73 input.dst.llvm-%x)))
 (let (($x5 (= $x68 true)))
 (let (($x82 (= $x5 true)))
 (let (($x76 (= $x40 true)))
 (let (($x63 (= $x76 true)))
 (let (($x59 (= $x63 true)))
 (let (($x83 (and $x59 $x82)))
 (let (($x109 (and $x83 $x107)))
 (let (($x113 (and $x109 $x112)))
 (let (($x30 (and $x113 $x125)))
 (let (($x121 (and $x30 $x128)))
 (let (($x114 (and $x121 $x125)))
 (let (($x16 (and $x114 $x20)))
 (let (($x95 (and $x65 $x16)))
 (let (($x67 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x135 (and $x67 $x95)))
 (let (($x19 (and $x75 $x135)))
 (let (($x10 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x45 (and $x10 $x19)))
 (let (($x31 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x33 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x31)))))))
 (let (($x14 (=> (and $x46 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x31)))))))
 (let (($x72 (and $x14 $x45)))
 (let (($x62 (=> $x72 $x29)))
 (not $x62)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x44 (= $x54 true)))
 (let (($x29 (= $x44 true)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x116)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x126)))
 (let (($x130 (= input.spec-%var-x-0.2 ?x23)))
 (let (($x65 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x131 (=> $x65 $x130)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x123 (ite $x40 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x123 (_ bv1 32))))
 (let (($x18 (= $x65 $x25)))
 (let (($x75 (= false false)))
 (let (($x80 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x118 (=> $x80 $x75)))
 (let (($x115 (= ?x123 (_ bv0 32))))
 (let (($x119 (= $x80 $x115)))
 (let (($x134 (and (and (and $x119 $x118) $x18) $x131)))
 (let (($x20 (= $x134 true)))
 (let (($x124 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x53 (= $x124 true)))
 (let (($x55 (= $x53 true)))
 (let (($x125 (= $x55 true)))
 (let (($x43 (= true $x124)))
 (let (($x46 (not $x40)))
 (let (($x108 (=> $x46 $x43)))
 (let (($x120 (= $x108 true)))
 (let (($x37 (= $x120 true)))
 (let (($x128 (= $x37 true)))
 (let (($x105 (and $x124 $x108)))
 (let (($x52 (= $x105 true)))
 (let (($x11 (= $x52 true)))
 (let (($x112 (= $x11 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x39)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x103 $x26)))
 (let (($x110 (and $x101 $x56)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x28 $x110)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x84)))))))
 (let (($x106 (and $x96 $x9)))
 (let (($x127 (= $x106 true)))
 (let (($x104 (= $x127 true)))
 (let (($x107 (= $x104 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x86 (concat ?x79 (concat ?x70 ?x42)))))
 (let (($x68 (= ?x73 input.dst.llvm-%x)))
 (let (($x5 (= $x68 true)))
 (let (($x82 (= $x5 true)))
 (let (($x76 (= $x40 true)))
 (let (($x63 (= $x76 true)))
 (let (($x59 (= $x63 true)))
 (let (($x83 (and $x59 $x82)))
 (let (($x109 (and $x83 $x107)))
 (let (($x113 (and $x109 $x112)))
 (let (($x30 (and $x113 $x125)))
 (let (($x121 (and $x30 $x128)))
 (let (($x114 (and $x121 $x125)))
 (let (($x16 (and $x114 $x20)))
 (let (($x95 (and $x65 $x16)))
 (let (($x67 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x135 (and $x67 $x95)))
 (let (($x19 (and $x75 $x135)))
 (let (($x10 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x45 (and $x10 $x19)))
 (let (($x31 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x33 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x31)))))))
 (let (($x14 (=> (and $x46 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x31)))))))
 (let (($x72 (and $x14 $x45)))
 (let (($x62 (=> $x72 $x29)))
 (not $x62)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1499631/query
