==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x6 $x14)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x6 $x14)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= true false)))
 (let (($x114 (= $x113 true)))
 (let (($x99 (forall ((input.ind-%var173X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var173X)))
 (=> $x85 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var173X) (_ bv0 32)))))
 ))
 (let (($x89 (forall ((input.ind-%var172X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var172X)))
 (= $x85 false)))
 ))
 (let (($x100 (and $x89 $x99)))
 (let (($x101 (= $x100 true)))
 (let (($x76 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x67)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x50 $x65)))
 (let (($x69 (and $x66 $x68)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x6 $x69)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x71 (and $x63 $x70)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x43 (concat ?x33 (concat ?x22 ?x17)))))
 (let (($x42 (= ?x16 input.dst.llvm-%n)))
 (let (($x14 (= $x42 true)))
 (let (($x30 (= $x14 true)))
 (let (($x75 (and $x30 $x74)))
 (let (($x80 (and $x75 $x79)))
 (let (($x102 (and $x80 $x101)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x5 $x102)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x104 (and $x13 $x103)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x105 (and $x41 $x104)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x106 (and $x44 $x105)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x107 (and $x49 $x106)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x108 (and $x45 $x107)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x109 (and $x47 $x108)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x110 (and $x34 $x109)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x111 (and $x23 $x110)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x112 (and $x24 $x111)))
 (let (($x115 (=> $x112 $x114)))
 (not $x115))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= true false)))
 (let (($x114 (= $x113 true)))
 (let (($x99 (forall ((input.ind-%var173X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var173X)))
 (=> $x85 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var173X) (_ bv0 32)))))
 ))
 (let (($x89 (forall ((input.ind-%var172X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var172X)))
 (= $x85 false)))
 ))
 (let (($x100 (and $x89 $x99)))
 (let (($x101 (= $x100 true)))
 (let (($x76 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x67)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x50 $x65)))
 (let (($x69 (and $x66 $x68)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x6 $x69)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x71 (and $x63 $x70)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x43 (concat ?x33 (concat ?x22 ?x17)))))
 (let (($x42 (= ?x16 input.dst.llvm-%n)))
 (let (($x14 (= $x42 true)))
 (let (($x30 (= $x14 true)))
 (let (($x75 (and $x30 $x74)))
 (let (($x80 (and $x75 $x79)))
 (let (($x102 (and $x80 $x101)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x5 $x102)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x104 (and $x13 $x103)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x105 (and $x41 $x104)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x106 (and $x44 $x105)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x107 (and $x49 $x106)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x108 (and $x45 $x107)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x109 (and $x47 $x108)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x110 (and $x34 $x109)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x111 (and $x23 $x110)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x112 (and $x24 $x111)))
 (let (($x115 (=> $x112 $x114)))
 (not $x115))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00028010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00028013)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00028010)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfcbd2113)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x91 (= $x95 true)))
 (let (($x111 (forall ((input.ind-%var187X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var187X)))
 (=> $x97 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var187X) (_ bv0 32)))))
 ))
 (let (($x101 (forall ((input.ind-%var186X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var186X)))
 (= $x97 false)))
 ))
 (let (($x112 (and $x101 $x111)))
 (let (($x113 (= $x112 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x77 (concat ?x74 (concat ?x70 ?x68)))))
 (let (($x79 (= ?x78 input.dst.llvm-%n)))
 (let (($x80 (= $x79 true)))
 (let (($x84 (= $x80 true)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x6 (= $x63 true)))
 (let (($x50 (= $x6 true)))
 (let (($x64 (= $x50 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x53)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x14 $x52)))
 (let (($x56 (and $x62 $x55)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x32 $x56)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x22)))))))
 (let (($x57 (and $x42 $x54)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x65 (and $x60 $x64)))
 (let (($x85 (and $x65 $x84)))
 (let (($x114 (and $x85 $x113)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x35 $x114)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x116 (and $x48 $x115)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x29 (and $x39 $x116)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x11 (and $x26 $x29)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x86 (and $x31 $x11)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x94 (and $x19 $x86)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x92 (and $x46 $x94)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x81 (and $x20 $x92)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x83 (and $x21 $x81)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x87 (and $x24 $x83)))
 (let (($x96 (=> $x87 $x91)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x91 (= $x95 true)))
 (let (($x111 (forall ((input.ind-%var187X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var187X)))
 (=> $x97 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var187X) (_ bv0 32)))))
 ))
 (let (($x101 (forall ((input.ind-%var186X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var186X)))
 (= $x97 false)))
 ))
 (let (($x112 (and $x101 $x111)))
 (let (($x113 (= $x112 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x77 (concat ?x74 (concat ?x70 ?x68)))))
 (let (($x79 (= ?x78 input.dst.llvm-%n)))
 (let (($x80 (= $x79 true)))
 (let (($x84 (= $x80 true)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x6 (= $x63 true)))
 (let (($x50 (= $x6 true)))
 (let (($x64 (= $x50 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x53)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x14 $x52)))
 (let (($x56 (and $x62 $x55)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x32 $x56)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x22)))))))
 (let (($x57 (and $x42 $x54)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x65 (and $x60 $x64)))
 (let (($x85 (and $x65 $x84)))
 (let (($x114 (and $x85 $x113)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x35 $x114)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x116 (and $x48 $x115)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x29 (and $x39 $x116)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x11 (and $x26 $x29)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x86 (and $x31 $x11)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x94 (and $x19 $x86)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x92 (and $x46 $x94)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x81 (and $x20 $x92)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x83 (and $x21 $x81)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x87 (and $x24 $x83)))
 (let (($x96 (=> $x87 $x91)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x103)))
 (let (($x90 (= ?x108 input.dst.llvm-%n)))
 (let (($x117 (= $x90 true)))
 (let (($x87 (forall ((input.ind-%var201X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var201X)))
 (=> $x110 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var201X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var200X)))
 (= $x110 false)))
 ))
 (let (($x95 (and $x114 $x87)))
 (let (($x91 (= $x95 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x80 (concat ?x75 (concat ?x69 ?x73)))))
 (let (($x85 (= ?x84 input.dst.llvm-%n)))
 (let (($x93 (= $x85 true)))
 (let (($x97 (= $x93 true)))
 (let (($x50 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (= $x50 true)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x56)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x51 $x53)))
 (let (($x57 (and $x55 $x54)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x9 $x57)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x8)))))))
 (let (($x59 (and $x30 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x63 (= $x61 true)))
 (let (($x76 (and $x63 $x66)))
 (let (($x100 (and $x76 $x97)))
 (let (($x96 (and $x100 $x91)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x35 $x96)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x5 (and $x41 $x82)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x15 (and $x44 $x5)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x67 (and $x49 $x15)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x98 (and $x45 $x67)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x106 (and $x47 $x98)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x104 (and $x18 $x106)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x88 (and $x23 $x104)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x89 (and $x24 $x88)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x99 (and $x12 $x89)))
 (let (($x118 (=> $x99 $x117)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x103)))
 (let (($x90 (= ?x108 input.dst.llvm-%n)))
 (let (($x117 (= $x90 true)))
 (let (($x87 (forall ((input.ind-%var201X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var201X)))
 (=> $x110 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var201X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var200X)))
 (= $x110 false)))
 ))
 (let (($x95 (and $x114 $x87)))
 (let (($x91 (= $x95 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x80 (concat ?x75 (concat ?x69 ?x73)))))
 (let (($x85 (= ?x84 input.dst.llvm-%n)))
 (let (($x93 (= $x85 true)))
 (let (($x97 (= $x93 true)))
 (let (($x50 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (= $x50 true)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x56)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x51 $x53)))
 (let (($x57 (and $x55 $x54)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x9 $x57)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x8)))))))
 (let (($x59 (and $x30 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x63 (= $x61 true)))
 (let (($x76 (and $x63 $x66)))
 (let (($x100 (and $x76 $x97)))
 (let (($x96 (and $x100 $x91)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x35 $x96)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x5 (and $x41 $x82)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x15 (and $x44 $x5)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x67 (and $x49 $x15)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x98 (and $x45 $x67)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x106 (and $x47 $x98)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x104 (and $x18 $x106)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x88 (and $x23 $x104)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x89 (and $x24 $x88)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x99 (and $x12 $x89)))
 (let (($x118 (=> $x99 $x117)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x105)))
 (let (($x94 (= ?x112 input.spec-%var-n-1)))
 (let (($x116 (= $x94 true)))
 (let (($x89 (forall ((input.ind-%var207X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var207X)))
 (=> $x81 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var207X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var206X)))
 (= $x81 false)))
 ))
 (let (($x99 (and $x91 $x89)))
 (let (($x107 (= $x99 true)))
 (let (($x93 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x97 (= $x93 true)))
 (let (($x100 (= $x97 true)))
 (let (($x109 (= $x100 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x71)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x54 $x80)))
 (let (($x74 (and $x68 $x75)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x56 $x74)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x6)))))))
 (let (($x73 (and $x77 $x69)))
 (let (($x70 (= $x73 true)))
 (let (($x78 (= $x70 true)))
 (let (($x84 (= $x78 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x27 (concat ?x42 (concat ?x10 ?x37)))))
 (let (($x52 (= ?x9 input.dst.llvm-%n)))
 (let (($x62 (= $x52 true)))
 (let (($x53 (= $x62 true)))
 (let (($x85 (and $x53 $x84)))
 (let (($x110 (and $x85 $x109)))
 (let (($x103 (and $x110 $x107)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x25 $x103)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x90 (and $x39 $x108)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x117 (and $x26 $x90)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x118 (and $x31 $x117)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x119 (and $x19 $x118)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x43 (and $x46 $x119)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x72 (and $x34 $x43)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x111 (and $x7 $x72)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x86 (and $x21 $x111)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x29 (and $x36 $x86)))
 (let (($x92 (=> $x29 $x116)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x105)))
 (let (($x94 (= ?x112 input.spec-%var-n-1)))
 (let (($x116 (= $x94 true)))
 (let (($x89 (forall ((input.ind-%var207X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var207X)))
 (=> $x81 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var207X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var206X)))
 (= $x81 false)))
 ))
 (let (($x99 (and $x91 $x89)))
 (let (($x107 (= $x99 true)))
 (let (($x93 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x97 (= $x93 true)))
 (let (($x100 (= $x97 true)))
 (let (($x109 (= $x100 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x71)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x54 $x80)))
 (let (($x74 (and $x68 $x75)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x56 $x74)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x6)))))))
 (let (($x73 (and $x77 $x69)))
 (let (($x70 (= $x73 true)))
 (let (($x78 (= $x70 true)))
 (let (($x84 (= $x78 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x27 (concat ?x42 (concat ?x10 ?x37)))))
 (let (($x52 (= ?x9 input.dst.llvm-%n)))
 (let (($x62 (= $x52 true)))
 (let (($x53 (= $x62 true)))
 (let (($x85 (and $x53 $x84)))
 (let (($x110 (and $x85 $x109)))
 (let (($x103 (and $x110 $x107)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x25 $x103)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x90 (and $x39 $x108)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x117 (and $x26 $x90)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x118 (and $x31 $x117)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x119 (and $x19 $x118)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x43 (and $x46 $x119)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x72 (and $x34 $x43)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x111 (and $x7 $x72)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x86 (and $x21 $x111)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x29 (and $x36 $x86)))
 (let (($x92 (=> $x29 $x116)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x114 (= $x113 true)))
 (let (($x87 (= $x114 true)))
 (let (($x86 (forall ((input.ind-%var213X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var213X)))
 (=> $x104 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var213X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var212X)))
 (= $x104 false)))
 ))
 (let (($x29 (and $x107 $x86)))
 (let (($x101 (= $x29 true)))
 (let (($x100 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let (($x11 (= $x110 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x74)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x59 $x71)))
 (let (($x73 (and $x75 $x69)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x76 $x73)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x78 (and $x80 $x70)))
 (let (($x84 (= $x78 true)))
 (let (($x85 (= $x84 true)))
 (let (($x93 (= $x85 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x9 (concat ?x10 (concat ?x8 ?x30)))))
 (let (($x62 (= ?x51 input.dst.llvm-%n)))
 (let (($x53 (= $x62 true)))
 (let (($x57 (= $x53 true)))
 (let (($x97 (and $x57 $x93)))
 (let (($x81 (and $x97 $x11)))
 (let (($x105 (and $x81 $x101)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (and $x48 $x105)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x94 (and $x44 $x112)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x116 (and $x49 $x94)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x92 (and $x45 $x116)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x102 (and $x47 $x92)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x55 (and $x18 $x102)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x28 (and $x20 $x55)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x83 (and $x24 $x28)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x67 (and $x40 $x83)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x5 (and $x33 $x67)))
 (let (($x98 (=> $x5 $x87)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x114 (= $x113 true)))
 (let (($x87 (= $x114 true)))
 (let (($x86 (forall ((input.ind-%var213X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var213X)))
 (=> $x104 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var213X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var212X)))
 (= $x104 false)))
 ))
 (let (($x29 (and $x107 $x86)))
 (let (($x101 (= $x29 true)))
 (let (($x100 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let (($x11 (= $x110 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x74)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x59 $x71)))
 (let (($x73 (and $x75 $x69)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x76 $x73)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x78 (and $x80 $x70)))
 (let (($x84 (= $x78 true)))
 (let (($x85 (= $x84 true)))
 (let (($x93 (= $x85 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x9 (concat ?x10 (concat ?x8 ?x30)))))
 (let (($x62 (= ?x51 input.dst.llvm-%n)))
 (let (($x53 (= $x62 true)))
 (let (($x57 (= $x53 true)))
 (let (($x97 (and $x57 $x93)))
 (let (($x81 (and $x97 $x11)))
 (let (($x105 (and $x81 $x101)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (and $x48 $x105)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x94 (and $x44 $x112)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x116 (and $x49 $x94)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x92 (and $x45 $x116)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x102 (and $x47 $x92)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x55 (and $x18 $x102)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x28 (and $x20 $x55)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x83 (and $x24 $x28)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x67 (and $x40 $x83)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x5 (and $x33 $x67)))
 (let (($x98 (=> $x5 $x87)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x177 false)))
 (let (($x179 (= $x178 true)))
 (let (($x163 (forall ((input.ind-%var227X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var227X)))
 (=> $x149 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var227X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var226X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var226X)))
 (= $x149 false)))
 ))
 (let (($x164 (and $x153 $x163)))
 (let (($x165 (= $x164 true)))
 (let ((?x25 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x25)))
 (let (($x142 (= ?x32 input.dst.llvm-%n)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x137 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x132 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x127 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x128 (= $x127 true)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let (($x122 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x96 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x106 (= $x96 true)))
 (let (($x115 (= $x106 true)))
 (let (($x120 (= $x115 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x14)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x114 $x82)))
 (let (($x118 (and $x58 $x88)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x29 $x118)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x102)))))))
 (let (($x95 (and $x113 $x90)))
 (let (($x91 (= $x95 true)))
 (let (($x89 (= $x91 true)))
 (let (($x119 (= $x89 true)))
 (let (($x104 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x104 true)))
 (let (($x107 (= $x99 true)))
 (let (($x109 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x110 (= $x109 true)))
 (let (($x11 (= $x110 true)))
 (let (($x85 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x93 (= $x85 true)))
 (let (($x97 (= $x93 true)))
 (let (($x69 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x73 (= $x69 true)))
 (let (($x70 (= $x73 true)))
 (let (($x78 (= $x70 true)))
 (let (($x59 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x68 (= $x59 true)))
 (let (($x71 (= $x68 true)))
 (let (($x75 (= $x71 true)))
 (let (($x77 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x56 (= $x77 true)))
 (let (($x54 (= $x56 true)))
 (let (($x80 (= $x54 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x64 (= $x50 true)))
 (let (($x6 (= $x64 true)))
 (let (($x65 (= $x6 true)))
 (let (($x53 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x57 (= $x53 true)))
 (let (($x61 (= $x57 true)))
 (let (($x63 (= $x61 true)))
 (let (($x16 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x16 true)))
 (let (($x51 (= $x37 true)))
 (let (($x52 (= $x51 true)))
 (let (($x17 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x10 (= $x17 true)))
 (let (($x27 (= $x10 true)))
 (let (($x8 (= $x27 true)))
 (let (($x22 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (= $x22 true)))
 (let (($x9 (= $x38 true)))
 (let (($x30 (and $x9 $x8)))
 (let (($x62 (and $x30 $x52)))
 (let (($x79 (and $x62 $x63)))
 (let (($x66 (and $x79 $x65)))
 (let (($x76 (and $x66 $x80)))
 (let (($x74 (and $x76 $x75)))
 (let (($x84 (and $x74 $x78)))
 (let (($x100 (and $x84 $x97)))
 (let (($x81 (and $x100 $x11)))
 (let (($x117 (and $x81 $x107)))
 (let (($x108 (and $x117 $x119)))
 (let (($x121 (and $x108 $x120)))
 (let (($x126 (and $x121 $x125)))
 (let (($x131 (and $x126 $x130)))
 (let (($x136 (and $x131 $x135)))
 (let (($x140 (and $x136 $x139)))
 (let (($x145 (and $x140 $x144)))
 (let (($x166 (and $x145 $x165)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x41 $x166)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x168 (and $x26 $x167)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x169 (and $x31 $x168)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x170 (and $x19 $x169)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x171 (and $x46 $x170)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x172 (and $x34 $x171)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x173 (and $x40 $x172)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x174 (and $x23 $x173)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x175 (and $x13 $x174)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x176 (and $x7 $x175)))
 (let (($x180 (=> $x176 $x179)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x177 false)))
 (let (($x179 (= $x178 true)))
 (let (($x163 (forall ((input.ind-%var227X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var227X)))
 (=> $x149 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var227X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var226X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var226X)))
 (= $x149 false)))
 ))
 (let (($x164 (and $x153 $x163)))
 (let (($x165 (= $x164 true)))
 (let ((?x25 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x25)))
 (let (($x142 (= ?x32 input.dst.llvm-%n)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x137 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x132 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x127 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x128 (= $x127 true)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let (($x122 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x96 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x106 (= $x96 true)))
 (let (($x115 (= $x106 true)))
 (let (($x120 (= $x115 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x14)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x114 $x82)))
 (let (($x118 (and $x58 $x88)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x29 $x118)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x102)))))))
 (let (($x95 (and $x113 $x90)))
 (let (($x91 (= $x95 true)))
 (let (($x89 (= $x91 true)))
 (let (($x119 (= $x89 true)))
 (let (($x104 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x104 true)))
 (let (($x107 (= $x99 true)))
 (let (($x109 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x110 (= $x109 true)))
 (let (($x11 (= $x110 true)))
 (let (($x85 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x93 (= $x85 true)))
 (let (($x97 (= $x93 true)))
 (let (($x69 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x73 (= $x69 true)))
 (let (($x70 (= $x73 true)))
 (let (($x78 (= $x70 true)))
 (let (($x59 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x68 (= $x59 true)))
 (let (($x71 (= $x68 true)))
 (let (($x75 (= $x71 true)))
 (let (($x77 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x56 (= $x77 true)))
 (let (($x54 (= $x56 true)))
 (let (($x80 (= $x54 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x64 (= $x50 true)))
 (let (($x6 (= $x64 true)))
 (let (($x65 (= $x6 true)))
 (let (($x53 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x57 (= $x53 true)))
 (let (($x61 (= $x57 true)))
 (let (($x63 (= $x61 true)))
 (let (($x16 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x16 true)))
 (let (($x51 (= $x37 true)))
 (let (($x52 (= $x51 true)))
 (let (($x17 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x10 (= $x17 true)))
 (let (($x27 (= $x10 true)))
 (let (($x8 (= $x27 true)))
 (let (($x22 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (= $x22 true)))
 (let (($x9 (= $x38 true)))
 (let (($x30 (and $x9 $x8)))
 (let (($x62 (and $x30 $x52)))
 (let (($x79 (and $x62 $x63)))
 (let (($x66 (and $x79 $x65)))
 (let (($x76 (and $x66 $x80)))
 (let (($x74 (and $x76 $x75)))
 (let (($x84 (and $x74 $x78)))
 (let (($x100 (and $x84 $x97)))
 (let (($x81 (and $x100 $x11)))
 (let (($x117 (and $x81 $x107)))
 (let (($x108 (and $x117 $x119)))
 (let (($x121 (and $x108 $x120)))
 (let (($x126 (and $x121 $x125)))
 (let (($x131 (and $x126 $x130)))
 (let (($x136 (and $x131 $x135)))
 (let (($x140 (and $x136 $x139)))
 (let (($x145 (and $x140 $x144)))
 (let (($x166 (and $x145 $x165)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x41 $x166)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x168 (and $x26 $x167)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x169 (and $x31 $x168)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x170 (and $x19 $x169)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x171 (and $x46 $x170)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x172 (and $x34 $x171)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x173 (and $x40 $x172)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x174 (and $x23 $x173)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x175 (and $x13 $x174)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x176 (and $x7 $x175)))
 (let (($x180 (=> $x176 $x179)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x148 (not $x145)))
 (let (($x144 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x144 $x148)))
 (let (($x152 (= $x149 true)))
 (let (($x153 (= $x152 true)))
 (let (($x130 (forall ((input.ind-%var653X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var653X)))
 (=> $x43 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var653X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var652X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var652X)))
 (= $x43 false)))
 ))
 (let (($x131 (and $x120 $x130)))
 (let (($x132 (= $x131 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x14)))
 (let (($x118 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x118 true)))
 (let (($x95 (= $x90 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x28)))
 (let (($x87 (= ?x83 input.dst.llvm-%n)))
 (let (($x98 (= $x87 true)))
 (let (($x82 (= $x98 true)))
 (let (($x67 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (= $x67 true)))
 (let (($x86 (= $x113 true)))
 (let (($x116 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x92 (= $x116 true)))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x117 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x11 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x81 (= $x11 true)))
 (let (($x15 (= $x81 true)))
 (let (($x104 (= $x15 true)))
 (let (($x93 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x97 (= $x93 true)))
 (let (($x100 (= $x97 true)))
 (let (($x109 (= $x100 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x68)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x56 $x76)))
 (let (($x75 (and $x59 $x71)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x52 $x75)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x60)))))))
 (let (($x69 (and $x77 $x74)))
 (let (($x73 (= $x69 true)))
 (let (($x70 (= $x73 true)))
 (let (($x78 (= $x70 true)))
 (let (($x17 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x10 (= $x17 true)))
 (let (($x27 (= $x10 true)))
 (let (($x8 (= $x27 true)))
 (let ((?x25 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x25)))
 (let (($x38 (= ?x32 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x38 true)))
 (let (($x42 (= $x9 true)))
 (let (($x30 (and $x42 $x8)))
 (let (($x84 (and $x30 $x78)))
 (let (($x110 (and $x84 $x109)))
 (let (($x99 (and $x110 $x104)))
 (let (($x112 (and $x99 $x5)))
 (let (($x55 (and $x112 $x102)))
 (let (($x29 (and $x55 $x86)))
 (let (($x58 (and $x29 $x82)))
 (let (($x91 (and $x58 $x95)))
 (let (($x133 (and $x91 $x132)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x39 $x133)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x135 (and $x21 $x134)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x136 (and $x12 $x135)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x137 (and $x47 $x136)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x138 (and $x40 $x137)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x139 (and $x7 $x138)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x140 (and $x20 $x139)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x141 (and $x35 $x140)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x142 (and $x18 $x141)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x143 (and $x33 $x142)))
 (let (($x157 (=> $x143 $x153)))
 (not $x157)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x148 (not $x145)))
 (let (($x144 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x144 $x148)))
 (let (($x152 (= $x149 true)))
 (let (($x153 (= $x152 true)))
 (let (($x130 (forall ((input.ind-%var653X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var653X)))
 (=> $x43 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var653X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var652X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var652X)))
 (= $x43 false)))
 ))
 (let (($x131 (and $x120 $x130)))
 (let (($x132 (= $x131 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x14)))
 (let (($x118 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x118 true)))
 (let (($x95 (= $x90 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x28)))
 (let (($x87 (= ?x83 input.dst.llvm-%n)))
 (let (($x98 (= $x87 true)))
 (let (($x82 (= $x98 true)))
 (let (($x67 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (= $x67 true)))
 (let (($x86 (= $x113 true)))
 (let (($x116 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x92 (= $x116 true)))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x117 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x11 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x81 (= $x11 true)))
 (let (($x15 (= $x81 true)))
 (let (($x104 (= $x15 true)))
 (let (($x93 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x97 (= $x93 true)))
 (let (($x100 (= $x97 true)))
 (let (($x109 (= $x100 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x68)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x56 $x76)))
 (let (($x75 (and $x59 $x71)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x52 $x75)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x60)))))))
 (let (($x69 (and $x77 $x74)))
 (let (($x73 (= $x69 true)))
 (let (($x70 (= $x73 true)))
 (let (($x78 (= $x70 true)))
 (let (($x17 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x10 (= $x17 true)))
 (let (($x27 (= $x10 true)))
 (let (($x8 (= $x27 true)))
 (let ((?x25 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x25)))
 (let (($x38 (= ?x32 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x38 true)))
 (let (($x42 (= $x9 true)))
 (let (($x30 (and $x42 $x8)))
 (let (($x84 (and $x30 $x78)))
 (let (($x110 (and $x84 $x109)))
 (let (($x99 (and $x110 $x104)))
 (let (($x112 (and $x99 $x5)))
 (let (($x55 (and $x112 $x102)))
 (let (($x29 (and $x55 $x86)))
 (let (($x58 (and $x29 $x82)))
 (let (($x91 (and $x58 $x95)))
 (let (($x133 (and $x91 $x132)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x39 $x133)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x135 (and $x21 $x134)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x136 (and $x12 $x135)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x137 (and $x47 $x136)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x138 (and $x40 $x137)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x139 (and $x7 $x138)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x140 (and $x20 $x139)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x141 (and $x35 $x140)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x142 (and $x18 $x141)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x143 (and $x33 $x142)))
 (let (($x157 (=> $x143 $x153)))
 (not $x157)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 127 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x170 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x165 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x164 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x166 (ite $x164 ?x165 (_ bv0 32))))
 (let ((?x163 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x162 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x167 (ite $x162 ?x163 ?x166)))
 (let ((?x168 (bvmul (_ bv4294967295 32) ?x167)))
 (let ((?x169 (bvneg ?x168)))
 (let (($x171 (= ?x169 ?x170)))
 (let (($x172 (= $x171 true)))
 (let (($x149 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var694X)))
 (=> $x133 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var694X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var693X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var693X)))
 (= $x133 false)))
 ))
 (let (($x152 (and $x137 $x149)))
 (let (($x153 (= $x152 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x108)))
 (let (($x120 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x14)))
 (let (($x118 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x118 true)))
 (let (($x95 (= $x90 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x87 (= $x114 true)))
 (let (($x98 (= $x87 true)))
 (let (($x82 (= $x98 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x83 true)))
 (let (($x113 (= $x67 true)))
 (let (($x86 (= $x113 true)))
 (let (($x92 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x55 (= $x102 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x81 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x15 (= $x81 true)))
 (let (($x104 (= $x15 true)))
 (let (($x99 (= $x104 true)))
 (let (($x97 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x97 true)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x71)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x54 $x59)))
 (let (($x74 (and $x68 $x75)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x66 $x74)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x64)))))))
 (let (($x73 (and $x56 $x69)))
 (let (($x70 (= $x73 true)))
 (let (($x78 (= $x70 true)))
 (let (($x84 (= $x78 true)))
 (let ((?x25 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x25)))
 (let (($x17 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x17 true)))
 (let (($x27 (= $x10 true)))
 (let (($x38 (= ?x32 input.dst.llvm-%n)))
 (let (($x9 (= $x38 true)))
 (let (($x42 (= $x9 true)))
 (let (($x8 (and $x42 $x27)))
 (let (($x85 (and $x8 $x84)))
 (let (($x11 (and $x85 $x110)))
 (let (($x107 (and $x11 $x99)))
 (let (($x112 (and $x107 $x5)))
 (let (($x28 (and $x112 $x55)))
 (let (($x29 (and $x28 $x86)))
 (let (($x58 (and $x29 $x82)))
 (let (($x91 (and $x58 $x95)))
 (let (($x129 (and $x91 $x128)))
 (let (($x157 (and $x129 $x153)))
 (let (($x41 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (and (not $x41) $x157)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x44 $x37)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x125 (and $x24 $x96)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x123 (and $x19 $x125)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x89 (and $x13 $x123)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x119 (and $x45 $x89)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x106 (and $x31 $x119)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x126 (and $x46 $x106)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x122 (and $x72 $x126)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x127 (and $x49 $x122)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x154 (and $x16 $x127)))
 (let (($x173 (=> $x154 $x172)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x170 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x165 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x164 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x166 (ite $x164 ?x165 (_ bv0 32))))
 (let ((?x163 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x162 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x167 (ite $x162 ?x163 ?x166)))
 (let ((?x168 (bvmul (_ bv4294967295 32) ?x167)))
 (let ((?x169 (bvneg ?x168)))
 (let (($x171 (= ?x169 ?x170)))
 (let (($x172 (= $x171 true)))
 (let (($x149 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var694X)))
 (=> $x133 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var694X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var693X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var693X)))
 (= $x133 false)))
 ))
 (let (($x152 (and $x137 $x149)))
 (let (($x153 (= $x152 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x108)))
 (let (($x120 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x14)))
 (let (($x118 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x118 true)))
 (let (($x95 (= $x90 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x87 (= $x114 true)))
 (let (($x98 (= $x87 true)))
 (let (($x82 (= $x98 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x83 true)))
 (let (($x113 (= $x67 true)))
 (let (($x86 (= $x113 true)))
 (let (($x92 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x55 (= $x102 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x81 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x15 (= $x81 true)))
 (let (($x104 (= $x15 true)))
 (let (($x99 (= $x104 true)))
 (let (($x97 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x97 true)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x71)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x54 $x59)))
 (let (($x74 (and $x68 $x75)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x66 $x74)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x64)))))))
 (let (($x73 (and $x56 $x69)))
 (let (($x70 (= $x73 true)))
 (let (($x78 (= $x70 true)))
 (let (($x84 (= $x78 true)))
 (let ((?x25 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x25)))
 (let (($x17 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x17 true)))
 (let (($x27 (= $x10 true)))
 (let (($x38 (= ?x32 input.dst.llvm-%n)))
 (let (($x9 (= $x38 true)))
 (let (($x42 (= $x9 true)))
 (let (($x8 (and $x42 $x27)))
 (let (($x85 (and $x8 $x84)))
 (let (($x11 (and $x85 $x110)))
 (let (($x107 (and $x11 $x99)))
 (let (($x112 (and $x107 $x5)))
 (let (($x28 (and $x112 $x55)))
 (let (($x29 (and $x28 $x86)))
 (let (($x58 (and $x29 $x82)))
 (let (($x91 (and $x58 $x95)))
 (let (($x129 (and $x91 $x128)))
 (let (($x157 (and $x129 $x153)))
 (let (($x41 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (and (not $x41) $x157)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x44 $x37)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x125 (and $x24 $x96)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x123 (and $x19 $x125)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x89 (and $x13 $x123)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x119 (and $x45 $x89)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x106 (and $x31 $x119)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x126 (and $x46 $x106)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x122 (and $x72 $x126)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x127 (and $x49 $x122)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x154 (and $x16 $x127)))
 (let (($x173 (=> $x154 $x172)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 139 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x62 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite $x62 ?x134 (_ bv0 32))))
 (let ((?x174 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x173 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x140 (ite $x173 ?x174 ?x142)))
 (let ((?x130 (bvmul (_ bv4294967295 32) ?x140)))
 (let ((?x131 (bvneg ?x130)))
 (let (($x143 (= ?x131 ?x135)))
 (let (($x139 (= $x143 true)))
 (let (($x106 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var776X)))
 (=> $x137 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var776X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var775X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var775X)))
 (= $x137 false)))
 ))
 (let (($x126 (and $x149 $x106)))
 (let (($x122 (= $x126 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x108)))
 (let (($x120 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x14)))
 (let (($x118 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x118 true)))
 (let (($x95 (= $x90 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x87 (= $x114 true)))
 (let (($x98 (= $x87 true)))
 (let (($x82 (= $x98 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x83 true)))
 (let (($x113 (= $x67 true)))
 (let (($x86 (= $x113 true)))
 (let (($x92 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x55 (= $x102 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x81 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x15 (= $x81 true)))
 (let (($x104 (= $x15 true)))
 (let (($x99 (= $x104 true)))
 (let (($x97 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x97 true)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x71)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x54 $x59)))
 (let (($x74 (and $x68 $x75)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x63 $x74)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x73 (and $x66 $x69)))
 (let (($x70 (= $x73 true)))
 (let (($x78 (= $x70 true)))
 (let (($x84 (= $x78 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x161)))
 (let (($x9 (= ?x48 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x9 true)))
 (let (($x17 (= $x42 true)))
 (let (($x32 (= ?x48 input.dst.llvm-%n)))
 (let (($x22 (= $x32 true)))
 (let (($x38 (= $x22 true)))
 (let (($x10 (and $x38 $x17)))
 (let (($x85 (and $x10 $x84)))
 (let (($x11 (and $x85 $x110)))
 (let (($x107 (and $x11 $x99)))
 (let (($x112 (and $x107 $x5)))
 (let (($x28 (and $x112 $x55)))
 (let (($x29 (and $x28 $x86)))
 (let (($x58 (and $x29 $x82)))
 (let (($x91 (and $x58 $x95)))
 (let (($x129 (and $x91 $x128)))
 (let (($x127 (and $x129 $x122)))
 (let (($x39 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x162 (and (not $x39) $x127)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x26 $x162)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x164 (and $x12 $x163)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x165 (and $x47 $x164)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x166 (and $x40 $x165)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x167 (and $x7 $x166)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x168 (and $x20 $x167)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x169 (and $x34 $x168)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x170 (and $x18 $x169)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x171 (and $x16 $x170)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x172 (and $x30 $x171)))
 (let (($x144 (=> $x172 $x139)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x62 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite $x62 ?x134 (_ bv0 32))))
 (let ((?x174 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x173 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x140 (ite $x173 ?x174 ?x142)))
 (let ((?x130 (bvmul (_ bv4294967295 32) ?x140)))
 (let ((?x131 (bvneg ?x130)))
 (let (($x143 (= ?x131 ?x135)))
 (let (($x139 (= $x143 true)))
 (let (($x106 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var776X)))
 (=> $x137 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var776X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var775X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var775X)))
 (= $x137 false)))
 ))
 (let (($x126 (and $x149 $x106)))
 (let (($x122 (= $x126 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x108)))
 (let (($x120 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x14)))
 (let (($x118 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x118 true)))
 (let (($x95 (= $x90 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x87 (= $x114 true)))
 (let (($x98 (= $x87 true)))
 (let (($x82 (= $x98 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x83 true)))
 (let (($x113 (= $x67 true)))
 (let (($x86 (= $x113 true)))
 (let (($x92 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x55 (= $x102 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x81 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x15 (= $x81 true)))
 (let (($x104 (= $x15 true)))
 (let (($x99 (= $x104 true)))
 (let (($x97 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x97 true)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x71)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x54 $x59)))
 (let (($x74 (and $x68 $x75)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x63 $x74)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x73 (and $x66 $x69)))
 (let (($x70 (= $x73 true)))
 (let (($x78 (= $x70 true)))
 (let (($x84 (= $x78 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x161)))
 (let (($x9 (= ?x48 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x9 true)))
 (let (($x17 (= $x42 true)))
 (let (($x32 (= ?x48 input.dst.llvm-%n)))
 (let (($x22 (= $x32 true)))
 (let (($x38 (= $x22 true)))
 (let (($x10 (and $x38 $x17)))
 (let (($x85 (and $x10 $x84)))
 (let (($x11 (and $x85 $x110)))
 (let (($x107 (and $x11 $x99)))
 (let (($x112 (and $x107 $x5)))
 (let (($x28 (and $x112 $x55)))
 (let (($x29 (and $x28 $x86)))
 (let (($x58 (and $x29 $x82)))
 (let (($x91 (and $x58 $x95)))
 (let (($x129 (and $x91 $x128)))
 (let (($x127 (and $x129 $x122)))
 (let (($x39 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x162 (and (not $x39) $x127)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x26 $x162)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x164 (and $x12 $x163)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x165 (and $x47 $x164)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x166 (and $x40 $x165)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x167 (and $x7 $x166)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x168 (and $x20 $x167)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x169 (and $x34 $x168)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x170 (and $x18 $x169)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x171 (and $x16 $x170)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x172 (and $x30 $x171)))
 (let (($x144 (=> $x172 $x139)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 139 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x8 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x96 (ite $x8 ?x141 (_ bv0 32))))
 (let ((?x121 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x144 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x157 (ite $x144 ?x121 ?x96)))
 (let (($x132 (bvuge ?x157 (_ bv1 32))))
 (let (($x133 (= $x132 true)))
 (let (($x145 (= $x133 true)))
 (let (($x168 (forall ((input.ind-%var823X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var823X)))
 (=> $x149 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var823X) (_ bv0 32)))))
 ))
 (let (($x106 (forall ((input.ind-%var822X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var822X)))
 (= $x149 false)))
 ))
 (let (($x169 (and $x106 $x168)))
 (let (($x170 (= $x169 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x108)))
 (let (($x120 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x14)))
 (let (($x118 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x118 true)))
 (let (($x95 (= $x90 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x87 (= $x114 true)))
 (let (($x98 (= $x87 true)))
 (let (($x82 (= $x98 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x83 true)))
 (let (($x113 (= $x67 true)))
 (let (($x86 (= $x113 true)))
 (let (($x92 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x55 (= $x102 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x15)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x100 $x11)))
 (let (($x99 (and $x81 $x104)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x76 $x99)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x73)))))))
 (let (($x117 (and $x97 $x107)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x77 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x51 (= $x77 true)))
 (let (($x56 (= $x51 true)))
 (let (($x66 (= $x56 true)))
 (let (($x61 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x64 (= $x61 true)))
 (let (($x50 (= $x64 true)))
 (let (($x6 (= $x50 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x22)))
 (let (($x52 (= ?x38 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x52 true)))
 (let (($x53 (= $x79 true)))
 (let (($x9 (= ?x38 input.dst.llvm-%n)))
 (let (($x42 (= $x9 true)))
 (let (($x17 (= $x42 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (= $x41 true)))
 (let (($x48 (= $x161 true)))
 (let (($x25 (= $x48 true)))
 (let (($x10 (and $x25 $x17)))
 (let (($x60 (and $x10 $x53)))
 (let (($x65 (and $x60 $x6)))
 (let (($x57 (and $x65 $x66)))
 (let (($x112 (and $x57 $x5)))
 (let (($x28 (and $x112 $x55)))
 (let (($x29 (and $x28 $x86)))
 (let (($x58 (and $x29 $x82)))
 (let (($x91 (and $x58 $x95)))
 (let (($x129 (and $x91 $x128)))
 (let (($x171 (and $x129 $x170)))
 (let (($x44 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and (not $x44) $x171)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and $x21 $x173)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x62 (and $x19 $x174)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x134 (and $x13 $x62)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x142 (and $x45 $x134)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x140 (and $x31 $x142)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x130 (and $x46 $x140)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x131 (and $x35 $x130)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x135 (and $x16 $x131)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x143 (and $x23 $x135)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x139 (and $x36 $x143)))
 (let (($x125 (=> $x139 $x145)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x8 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x96 (ite $x8 ?x141 (_ bv0 32))))
 (let ((?x121 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x144 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x157 (ite $x144 ?x121 ?x96)))
 (let (($x132 (bvuge ?x157 (_ bv1 32))))
 (let (($x133 (= $x132 true)))
 (let (($x145 (= $x133 true)))
 (let (($x168 (forall ((input.ind-%var823X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var823X)))
 (=> $x149 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var823X) (_ bv0 32)))))
 ))
 (let (($x106 (forall ((input.ind-%var822X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var822X)))
 (= $x149 false)))
 ))
 (let (($x169 (and $x106 $x168)))
 (let (($x170 (= $x169 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x108)))
 (let (($x120 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x14)))
 (let (($x118 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x118 true)))
 (let (($x95 (= $x90 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x87 (= $x114 true)))
 (let (($x98 (= $x87 true)))
 (let (($x82 (= $x98 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x83 true)))
 (let (($x113 (= $x67 true)))
 (let (($x86 (= $x113 true)))
 (let (($x92 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x55 (= $x102 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x15)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x100 $x11)))
 (let (($x99 (and $x81 $x104)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x76 $x99)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x73)))))))
 (let (($x117 (and $x97 $x107)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x77 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x51 (= $x77 true)))
 (let (($x56 (= $x51 true)))
 (let (($x66 (= $x56 true)))
 (let (($x61 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x64 (= $x61 true)))
 (let (($x50 (= $x64 true)))
 (let (($x6 (= $x50 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x22)))
 (let (($x52 (= ?x38 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x52 true)))
 (let (($x53 (= $x79 true)))
 (let (($x9 (= ?x38 input.dst.llvm-%n)))
 (let (($x42 (= $x9 true)))
 (let (($x17 (= $x42 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (= $x41 true)))
 (let (($x48 (= $x161 true)))
 (let (($x25 (= $x48 true)))
 (let (($x10 (and $x25 $x17)))
 (let (($x60 (and $x10 $x53)))
 (let (($x65 (and $x60 $x6)))
 (let (($x57 (and $x65 $x66)))
 (let (($x112 (and $x57 $x5)))
 (let (($x28 (and $x112 $x55)))
 (let (($x29 (and $x28 $x86)))
 (let (($x58 (and $x29 $x82)))
 (let (($x91 (and $x58 $x95)))
 (let (($x129 (and $x91 $x128)))
 (let (($x171 (and $x129 $x170)))
 (let (($x44 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and (not $x44) $x171)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and $x21 $x173)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x62 (and $x19 $x174)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x134 (and $x13 $x62)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x142 (and $x45 $x134)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x140 (and $x31 $x142)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x130 (and $x46 $x140)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x131 (and $x35 $x130)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x135 (and $x16 $x131)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x143 (and $x23 $x135)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x139 (and $x36 $x143)))
 (let (($x125 (=> $x139 $x145)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 137 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x163 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x136 (ite $x163 ?x127 (_ bv0 32))))
 (let ((?x37 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x54 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x137 (ite $x54 ?x37 ?x136)))
 (let (($x89 (bvsge ?x137 (_ bv1 32))))
 (let (($x164 (= $x89 true)))
 (let (($x122 (= $x164 true)))
 (let (($x130 (forall ((input.ind-%var870X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var870X)))
 (=> $x106 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var870X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var869X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var869X)))
 (= $x106 false)))
 ))
 (let (($x131 (and $x168 $x130)))
 (let (($x135 (= $x131 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x108)))
 (let (($x120 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x14)))
 (let (($x118 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x118 true)))
 (let (($x95 (= $x90 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x87 (= $x114 true)))
 (let (($x98 (= $x87 true)))
 (let (($x82 (= $x98 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x83 true)))
 (let (($x113 (= $x67 true)))
 (let (($x86 (= $x113 true)))
 (let (($x92 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x55 (= $x102 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x15)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x100 $x11)))
 (let (($x99 (and $x81 $x104)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x68 $x99)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x70)))))))
 (let (($x117 (and $x76 $x107)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x6 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x65 (= $x6 true)))
 (let (($x77 (= $x65 true)))
 (let (($x51 (= $x77 true)))
 (let (($x53 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x60 (= $x53 true)))
 (let (($x61 (= $x60 true)))
 (let (($x64 (= $x61 true)))
 (let ((?x25 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x25)))
 (let (($x17 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x17 true)))
 (let (($x52 (= $x10 true)))
 (let (($x22 (= ?x32 input.dst.llvm-%n)))
 (let (($x38 (= $x22 true)))
 (let (($x9 (= $x38 true)))
 (let (($x39 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x154 (= $x39 true)))
 (let (($x41 (= $x154 true)))
 (let (($x161 (= $x41 true)))
 (let (($x42 (and $x161 $x9)))
 (let (($x79 (and $x42 $x52)))
 (let (($x50 (and $x79 $x64)))
 (let (($x56 (and $x50 $x51)))
 (let (($x112 (and $x56 $x5)))
 (let (($x28 (and $x112 $x55)))
 (let (($x29 (and $x28 $x86)))
 (let (($x58 (and $x29 $x82)))
 (let (($x91 (and $x58 $x95)))
 (let (($x129 (and $x91 $x128)))
 (let (($x143 (and $x129 $x135)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and (not $x26) $x143)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and $x24 $x144)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x8 (and $x47 $x121)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x141 (and $x40 $x8)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x96 (and $x7 $x141)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x157 (and $x20 $x96)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x132 (and $x34 $x157)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x133 (and $x72 $x132)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x145 (and $x49 $x133)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x125 (and $x33 $x145)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x153 (and $x63 $x125)))
 (let (($x165 (=> $x153 $x122)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x163 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x136 (ite $x163 ?x127 (_ bv0 32))))
 (let ((?x37 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x54 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x137 (ite $x54 ?x37 ?x136)))
 (let (($x89 (bvsge ?x137 (_ bv1 32))))
 (let (($x164 (= $x89 true)))
 (let (($x122 (= $x164 true)))
 (let (($x130 (forall ((input.ind-%var870X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var870X)))
 (=> $x106 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var870X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var869X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var869X)))
 (= $x106 false)))
 ))
 (let (($x131 (and $x168 $x130)))
 (let (($x135 (= $x131 true)))
 (let ((?x108 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x108)))
 (let (($x120 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x14)))
 (let (($x118 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x118 true)))
 (let (($x95 (= $x90 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x87 (= $x114 true)))
 (let (($x98 (= $x87 true)))
 (let (($x82 (= $x98 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x67 (= $x83 true)))
 (let (($x113 (= $x67 true)))
 (let (($x86 (= $x113 true)))
 (let (($x92 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x55 (= $x102 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x15)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x100 $x11)))
 (let (($x99 (and $x81 $x104)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x68 $x99)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x70)))))))
 (let (($x117 (and $x76 $x107)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x6 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x65 (= $x6 true)))
 (let (($x77 (= $x65 true)))
 (let (($x51 (= $x77 true)))
 (let (($x53 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x60 (= $x53 true)))
 (let (($x61 (= $x60 true)))
 (let (($x64 (= $x61 true)))
 (let ((?x25 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x25)))
 (let (($x17 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x17 true)))
 (let (($x52 (= $x10 true)))
 (let (($x22 (= ?x32 input.dst.llvm-%n)))
 (let (($x38 (= $x22 true)))
 (let (($x9 (= $x38 true)))
 (let (($x39 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x154 (= $x39 true)))
 (let (($x41 (= $x154 true)))
 (let (($x161 (= $x41 true)))
 (let (($x42 (and $x161 $x9)))
 (let (($x79 (and $x42 $x52)))
 (let (($x50 (and $x79 $x64)))
 (let (($x56 (and $x50 $x51)))
 (let (($x112 (and $x56 $x5)))
 (let (($x28 (and $x112 $x55)))
 (let (($x29 (and $x28 $x86)))
 (let (($x58 (and $x29 $x82)))
 (let (($x91 (and $x58 $x95)))
 (let (($x129 (and $x91 $x128)))
 (let (($x143 (and $x129 $x135)))
 (let (($x26 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and (not $x26) $x143)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and $x24 $x144)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x8 (and $x47 $x121)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x141 (and $x40 $x8)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x96 (and $x7 $x141)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x157 (and $x20 $x96)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x132 (and $x34 $x157)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x133 (and $x72 $x132)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x145 (and $x49 $x133)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x125 (and $x33 $x145)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x153 (and $x63 $x125)))
 (let (($x165 (=> $x153 $x122)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x05480003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0139fde3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x136 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x127 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x137 (ite $x127 ?x136 (_ bv0 32))))
 (let ((?x163 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x37 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x89 (ite $x37 ?x163 ?x137)))
 (let (($x164 (bvsge ?x89 (_ bv0 32))))
 (let (($x122 (= $x164 true)))
 (let (($x165 (= $x122 true)))
 (let (($x130 (forall ((input.ind-%var1065X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1065X)))
 (=> $x108 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1065X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1064X)))
 (= $x108 false)))
 ))
 (let (($x131 (and $x124 $x130)))
 (let (($x135 (= $x131 true)))
 (let ((?x87 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x87)))
 (let (($x58 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x58 true)))
 (let (($x88 (= $x14 true)))
 (let ((?x83 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x67 (bvneg ?x83)))
 (let (($x113 (= ?x67 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x113 true)))
 (let (($x29 (= $x86 true)))
 (let (($x92 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x55 (= $x102 true)))
 (let (($x101 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x112 (= $x5 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x100)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x85 $x59)))
 (let (($x110 (and $x68 $x109)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x65 $x110)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x74)))))))
 (let (($x81 (and $x84 $x11)))
 (let (($x15 (= $x81 true)))
 (let (($x104 (= $x15 true)))
 (let (($x99 (= $x104 true)))
 (let (($x52 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x79 (= $x52 true)))
 (let (($x53 (= $x79 true)))
 (let (($x60 (= $x53 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x161)))
 (let (($x9 (= ?x48 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x9 true)))
 (let (($x17 (= $x42 true)))
 (let (($x25 (= ?x48 input.dst.llvm-%n)))
 (let (($x32 (= $x25 true)))
 (let (($x22 (= $x32 true)))
 (let (($x44 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (= $x44 true)))
 (let (($x39 (= $x172 true)))
 (let (($x154 (= $x39 true)))
 (let (($x38 (and $x154 $x22)))
 (let (($x10 (and $x38 $x17)))
 (let (($x61 (and $x10 $x60)))
 (let (($x107 (and $x61 $x99)))
 (let (($x116 (and $x107 $x112)))
 (let (($x28 (and $x116 $x55)))
 (let (($x114 (and $x28 $x29)))
 (let (($x118 (and $x114 $x88)))
 (let (($x143 (and $x118 $x135)))
 (let (($x21 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and (not $x21) $x143)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and $x12 $x121)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x141 (and $x13 $x8)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x96 (and $x45 $x141)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x157 (and $x31 $x96)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x132 (and $x46 $x157)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x133 (and $x35 $x132)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x145 (and $x18 $x133)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x23 $x145)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x153 (and $x27 $x125)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x54 (and $x66 $x153)))
 (let (($x152 (=> $x54 $x165)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x136 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x127 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x137 (ite $x127 ?x136 (_ bv0 32))))
 (let ((?x163 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x37 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x89 (ite $x37 ?x163 ?x137)))
 (let (($x164 (bvsge ?x89 (_ bv0 32))))
 (let (($x122 (= $x164 true)))
 (let (($x165 (= $x122 true)))
 (let (($x130 (forall ((input.ind-%var1065X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1065X)))
 (=> $x108 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1065X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1064X)))
 (= $x108 false)))
 ))
 (let (($x131 (and $x124 $x130)))
 (let (($x135 (= $x131 true)))
 (let ((?x87 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x87)))
 (let (($x58 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x58 true)))
 (let (($x88 (= $x14 true)))
 (let ((?x83 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x67 (bvneg ?x83)))
 (let (($x113 (= ?x67 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x113 true)))
 (let (($x29 (= $x86 true)))
 (let (($x92 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x94 (= $x92 true)))
 (let (($x102 (= $x94 true)))
 (let (($x55 (= $x102 true)))
 (let (($x101 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x105 (= $x101 true)))
 (let (($x5 (= $x105 true)))
 (let (($x112 (= $x5 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x100)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x85 $x59)))
 (let (($x110 (and $x68 $x109)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x65 $x110)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x74)))))))
 (let (($x81 (and $x84 $x11)))
 (let (($x15 (= $x81 true)))
 (let (($x104 (= $x15 true)))
 (let (($x99 (= $x104 true)))
 (let (($x52 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x79 (= $x52 true)))
 (let (($x53 (= $x79 true)))
 (let (($x60 (= $x53 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x161)))
 (let (($x9 (= ?x48 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x9 true)))
 (let (($x17 (= $x42 true)))
 (let (($x25 (= ?x48 input.dst.llvm-%n)))
 (let (($x32 (= $x25 true)))
 (let (($x22 (= $x32 true)))
 (let (($x44 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (= $x44 true)))
 (let (($x39 (= $x172 true)))
 (let (($x154 (= $x39 true)))
 (let (($x38 (and $x154 $x22)))
 (let (($x10 (and $x38 $x17)))
 (let (($x61 (and $x10 $x60)))
 (let (($x107 (and $x61 $x99)))
 (let (($x116 (and $x107 $x112)))
 (let (($x28 (and $x116 $x55)))
 (let (($x114 (and $x28 $x29)))
 (let (($x118 (and $x114 $x88)))
 (let (($x143 (and $x118 $x135)))
 (let (($x21 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and (not $x21) $x143)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and $x12 $x121)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x141 (and $x13 $x8)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x96 (and $x45 $x141)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x157 (and $x31 $x96)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x132 (and $x46 $x157)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x133 (and $x35 $x132)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x145 (and $x18 $x133)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x23 $x145)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x153 (and $x27 $x125)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x54 (and $x66 $x153)))
 (let (($x152 (=> $x54 $x165)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000038)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000003b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000038)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (bvuge ?x164 (_ bv1 32))))
 (let (($x165 (= $x122 true)))
 (let (($x152 (= $x165 true)))
 (let (($x8 (forall ((input.ind-%var1270X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1270X)))
 (=> $x88 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1270X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1269X)))
 (= $x88 false)))
 ))
 (let (($x141 (and $x120 $x8)))
 (let (($x96 (= $x141 true)))
 (let ((?x113 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x113)))
 (let (($x29 (= ?x86 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x29 true)))
 (let (($x87 (= $x114 true)))
 (let (($x102 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x55 (= $x102 true)))
 (let (($x28 (= $x55 true)))
 (let (($x83 (= $x28 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x5 true)))
 (let (($x116 (= $x112 true)))
 (let (($x92 (= $x116 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x110)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x76 $x100)))
 (let (($x81 (and $x109 $x11)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x56 $x81)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x69)))))))
 (let (($x104 (and $x97 $x15)))
 (let (($x99 (= $x104 true)))
 (let (($x107 (= $x99 true)))
 (let (($x117 (= $x107 true)))
 (let (($x52 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x79 (= $x52 true)))
 (let (($x53 (= $x79 true)))
 (let (($x60 (= $x53 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x41)))
 (let (($x9 (= ?x161 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x9 true)))
 (let (($x17 (= $x42 true)))
 (let (($x25 (= ?x161 input.dst.llvm-%n)))
 (let (($x32 (= $x25 true)))
 (let (($x22 (= $x32 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x26)))
 (let (($x172 (= ?x139 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x172 true)))
 (let (($x154 (= $x39 true)))
 (let (($x38 (and $x154 $x22)))
 (let (($x10 (and $x38 $x17)))
 (let (($x61 (and $x10 $x60)))
 (let (($x101 (and $x61 $x117)))
 (let (($x94 (and $x101 $x92)))
 (let (($x67 (and $x94 $x83)))
 (let (($x98 (and $x67 $x87)))
 (let (($x157 (and $x98 $x96)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and (not $x24) $x157)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (and $x19 $x133)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x125 (and $x40 $x145)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x153 (and $x7 $x125)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x54 (and $x20 $x153)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x37 (and $x34 $x54)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x72 $x37)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x127 (and $x16 $x163)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x136 (and $x33 $x127)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x137 (and $x36 $x136)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x89 (and $x64 $x137)))
 (let (($x57 (=> $x89 $x152)))
 (not $x57)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (bvuge ?x164 (_ bv1 32))))
 (let (($x165 (= $x122 true)))
 (let (($x152 (= $x165 true)))
 (let (($x8 (forall ((input.ind-%var1270X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1270X)))
 (=> $x88 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1270X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1269X)))
 (= $x88 false)))
 ))
 (let (($x141 (and $x120 $x8)))
 (let (($x96 (= $x141 true)))
 (let ((?x113 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x113)))
 (let (($x29 (= ?x86 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x29 true)))
 (let (($x87 (= $x114 true)))
 (let (($x102 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x55 (= $x102 true)))
 (let (($x28 (= $x55 true)))
 (let (($x83 (= $x28 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x5 true)))
 (let (($x116 (= $x112 true)))
 (let (($x92 (= $x116 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x110)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x76 $x100)))
 (let (($x81 (and $x109 $x11)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x56 $x81)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x69)))))))
 (let (($x104 (and $x97 $x15)))
 (let (($x99 (= $x104 true)))
 (let (($x107 (= $x99 true)))
 (let (($x117 (= $x107 true)))
 (let (($x52 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x79 (= $x52 true)))
 (let (($x53 (= $x79 true)))
 (let (($x60 (= $x53 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x41)))
 (let (($x9 (= ?x161 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x9 true)))
 (let (($x17 (= $x42 true)))
 (let (($x25 (= ?x161 input.dst.llvm-%n)))
 (let (($x32 (= $x25 true)))
 (let (($x22 (= $x32 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x26)))
 (let (($x172 (= ?x139 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x172 true)))
 (let (($x154 (= $x39 true)))
 (let (($x38 (and $x154 $x22)))
 (let (($x10 (and $x38 $x17)))
 (let (($x61 (and $x10 $x60)))
 (let (($x101 (and $x61 $x117)))
 (let (($x94 (and $x101 $x92)))
 (let (($x67 (and $x94 $x83)))
 (let (($x98 (and $x67 $x87)))
 (let (($x157 (and $x98 $x96)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and (not $x24) $x157)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (and $x19 $x133)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x125 (and $x40 $x145)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x153 (and $x7 $x125)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x54 (and $x20 $x153)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x37 (and $x34 $x54)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x72 $x37)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x127 (and $x16 $x163)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x136 (and $x33 $x127)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x137 (and $x36 $x136)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x89 (and $x64 $x137)))
 (let (($x57 (=> $x89 $x152)))
 (not $x57)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000001c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000001c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x57 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x152 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x50 (ite $x152 ?x57 (_ bv0 32))))
 (let ((?x165 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x122 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x51 (ite $x122 ?x165 ?x50)))
 (let ((?x118 (bvmul (_ bv4294967295 32) ?x51)))
 (let ((?x130 (bvneg ?x118)))
 (let (($x82 (= ?x130 ?x142)))
 (let (($x58 (= $x82 true)))
 (let (($x8 (forall ((input.ind-%var1430X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1430X)))
 (=> $x67 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1430X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1429X)))
 (= $x67 false)))
 ))
 (let (($x141 (and $x114 $x8)))
 (let (($x96 (= $x141 true)))
 (let ((?x105 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x105)))
 (let (($x116 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x116 true)))
 (let (($x94 (= $x92 true)))
 (let ((?x81 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x81)))
 (let (($x104 (= ?x15 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x104 true)))
 (let (($x107 (= $x99 true)))
 (let (($x68 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x68 true)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x69)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x85 $x73)))
 (let (($x84 (and $x74 $x70)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x32 $x84)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x52)))))))
 (let (($x65 (and $x80 $x6)))
 (let (($x97 (= $x65 true)))
 (let (($x78 (= $x97 true)))
 (let (($x56 (= $x78 true)))
 (let ((?x132 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x132)))
 (let (($x172 (= ?x21 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (= $x172 true)))
 (let (($x154 (= $x39 true)))
 (let (($x26 (= ?x21 input.dst.llvm-%n)))
 (let (($x139 (= $x26 true)))
 (let (($x44 (= $x139 true)))
 (let (($x41 (and $x44 $x154)))
 (let (($x76 (and $x41 $x56)))
 (let (($x11 (and $x76 $x110)))
 (let (($x117 (and $x11 $x107)))
 (let (($x102 (and $x117 $x94)))
 (let (($x157 (and $x102 $x96)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (and (not $x12) $x157)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x47 $x145)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x153 (and $x45 $x125)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x54 (and $x31 $x153)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x37 (and $x46 $x54)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x163 (and $x35 $x37)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x127 (and $x18 $x163)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x136 (and $x49 $x127)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x137 (and $x27 $x136)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x89 (and $x63 $x137)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x164 (and $x66 $x89)))
 (let (($x91 (=> $x164 $x58)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x57 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x152 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x50 (ite $x152 ?x57 (_ bv0 32))))
 (let ((?x165 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x122 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x51 (ite $x122 ?x165 ?x50)))
 (let ((?x118 (bvmul (_ bv4294967295 32) ?x51)))
 (let ((?x130 (bvneg ?x118)))
 (let (($x82 (= ?x130 ?x142)))
 (let (($x58 (= $x82 true)))
 (let (($x8 (forall ((input.ind-%var1430X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1430X)))
 (=> $x67 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1430X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1429X)))
 (= $x67 false)))
 ))
 (let (($x141 (and $x114 $x8)))
 (let (($x96 (= $x141 true)))
 (let ((?x105 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x105)))
 (let (($x116 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x116 true)))
 (let (($x94 (= $x92 true)))
 (let ((?x81 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x81)))
 (let (($x104 (= ?x15 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x104 true)))
 (let (($x107 (= $x99 true)))
 (let (($x68 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x68 true)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x69)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x85 $x73)))
 (let (($x84 (and $x74 $x70)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x32 $x84)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x52)))))))
 (let (($x65 (and $x80 $x6)))
 (let (($x97 (= $x65 true)))
 (let (($x78 (= $x97 true)))
 (let (($x56 (= $x78 true)))
 (let ((?x132 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x132)))
 (let (($x172 (= ?x21 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (= $x172 true)))
 (let (($x154 (= $x39 true)))
 (let (($x26 (= ?x21 input.dst.llvm-%n)))
 (let (($x139 (= $x26 true)))
 (let (($x44 (= $x139 true)))
 (let (($x41 (and $x44 $x154)))
 (let (($x76 (and $x41 $x56)))
 (let (($x11 (and $x76 $x110)))
 (let (($x117 (and $x11 $x107)))
 (let (($x102 (and $x117 $x94)))
 (let (($x157 (and $x102 $x96)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (and (not $x12) $x157)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x47 $x145)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x153 (and $x45 $x125)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x54 (and $x31 $x153)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x37 (and $x46 $x54)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x163 (and $x35 $x37)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x127 (and $x18 $x163)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x136 (and $x49 $x127)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x137 (and $x27 $x136)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x89 (and $x63 $x137)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x164 (and $x66 $x89)))
 (let (($x91 (=> $x164 $x58)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x48 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x108 (ite $x48 ?x113 (_ bv0 32))))
 (let ((?x131 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x91 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x14 (ite $x91 ?x131 ?x108)))
 (let ((?x55 (bvmul (_ bv4294967295 32) ?x14)))
 (let ((?x28 (bvneg ?x55)))
 (let (($x120 (= ?x28 ?x86)))
 (let (($x98 (= $x120 true)))
 (let (($x127 (forall ((input.ind-%var1476X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1476X)))
 (= $x114 false)))
 ))
 (let (($x125 (forall ((input.ind-%var1477X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1477X)))
 (=> $x114 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1477X) (_ bv0 32)))))
 ))
 (let (($x136 (and $x125 $x127)))
 (let (($x137 (= $x136 true)))
 (let ((?x105 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x105)))
 (let (($x116 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x116 true)))
 (let (($x94 (= $x92 true)))
 (let ((?x81 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x81)))
 (let (($x104 (= ?x15 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x104 true)))
 (let (($x107 (= $x99 true)))
 (let (($x68 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x68 true)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x69)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x85 $x73)))
 (let (($x84 (and $x74 $x70)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x38 $x84)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x79)))))))
 (let (($x65 (and $x32 $x6)))
 (let (($x97 (= $x65 true)))
 (let (($x78 (= $x97 true)))
 (let (($x56 (= $x78 true)))
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x133)))
 (let (($x139 (= ?x24 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x139 true)))
 (let (($x172 (= $x44 true)))
 (let (($x21 (= ?x24 input.dst.llvm-%n)))
 (let (($x144 (= $x21 true)))
 (let (($x26 (= $x144 true)))
 (let (($x39 (and $x26 $x172)))
 (let (($x76 (and $x39 $x56)))
 (let (($x11 (and $x76 $x110)))
 (let (($x117 (and $x11 $x107)))
 (let (($x102 (and $x117 $x94)))
 (let (($x89 (and $x102 $x137)))
 (let (($x19 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (and (not $x19) $x89)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and $x13 $x122)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x152 (and $x7 $x165)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x57 (and $x20 $x152)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x50 (and $x34 $x57)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x51 (and $x72 $x50)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x118 (and $x16 $x51)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x130 (and $x23 $x118)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x142 (and $x36 $x130)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x82 (and $x77 $x142)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x58 (and $x64 $x82)))
 (let (($x140 (=> $x58 $x98)))
 (not $x140))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x48 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x108 (ite $x48 ?x113 (_ bv0 32))))
 (let ((?x131 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x91 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x14 (ite $x91 ?x131 ?x108)))
 (let ((?x55 (bvmul (_ bv4294967295 32) ?x14)))
 (let ((?x28 (bvneg ?x55)))
 (let (($x120 (= ?x28 ?x86)))
 (let (($x98 (= $x120 true)))
 (let (($x127 (forall ((input.ind-%var1476X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1476X)))
 (= $x114 false)))
 ))
 (let (($x125 (forall ((input.ind-%var1477X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1477X)))
 (=> $x114 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1477X) (_ bv0 32)))))
 ))
 (let (($x136 (and $x125 $x127)))
 (let (($x137 (= $x136 true)))
 (let ((?x105 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x105)))
 (let (($x116 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x116 true)))
 (let (($x94 (= $x92 true)))
 (let ((?x81 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x81)))
 (let (($x104 (= ?x15 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x104 true)))
 (let (($x107 (= $x99 true)))
 (let (($x68 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x68 true)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x69)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x85 $x73)))
 (let (($x84 (and $x74 $x70)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x38 $x84)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x79)))))))
 (let (($x65 (and $x32 $x6)))
 (let (($x97 (= $x65 true)))
 (let (($x78 (= $x97 true)))
 (let (($x56 (= $x78 true)))
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x133)))
 (let (($x139 (= ?x24 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x139 true)))
 (let (($x172 (= $x44 true)))
 (let (($x21 (= ?x24 input.dst.llvm-%n)))
 (let (($x144 (= $x21 true)))
 (let (($x26 (= $x144 true)))
 (let (($x39 (and $x26 $x172)))
 (let (($x76 (and $x39 $x56)))
 (let (($x11 (and $x76 $x110)))
 (let (($x117 (and $x11 $x107)))
 (let (($x102 (and $x117 $x94)))
 (let (($x89 (and $x102 $x137)))
 (let (($x19 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (and (not $x19) $x89)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and $x13 $x122)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x152 (and $x7 $x165)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x57 (and $x20 $x152)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x50 (and $x34 $x57)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x51 (and $x72 $x50)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x118 (and $x16 $x51)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x130 (and $x23 $x118)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x142 (and $x36 $x130)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x82 (and $x77 $x142)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x58 (and $x64 $x82)))
 (let (($x140 (=> $x58 $x98)))
 (not $x140))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (not $x108)))
 (let (($x113 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (=> $x113 $x14)))
 (let (($x28 (= $x55 true)))
 (let (($x86 (= $x28 true)))
 (let (($x122 (forall ((input.ind-%var1524X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1524X)))
 (=> $x92 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1524X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1523X)))
 (= $x92 false)))
 ))
 (let (($x165 (and $x114 $x122)))
 (let (($x152 (= $x165 true)))
 (let ((?x15 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x15)))
 (let (($x107 (= ?x104 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x107 true)))
 (let (($x101 (= $x117 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x65)))
 (let (($x100 (= ?x97 input.dst.llvm-%n)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let (($x78 (= ?x97 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (= $x78 true)))
 (let (($x76 (= $x56 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x85)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x61 $x22)))
 (let (($x75 (and $x38 $x93)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x139 $x75)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x17)))))))
 (let (($x74 (and $x60 $x73)))
 (let (($x69 (= $x74 true)))
 (let (($x70 (= $x69 true)))
 (let (($x84 (= $x70 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x19)))
 (let (($x133 (= ?x164 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x24 (= $x133 true)))
 (let (($x132 (= $x24 true)))
 (let (($x6 (and $x132 $x84)))
 (let (($x59 (and $x6 $x76)))
 (let (($x11 (and $x59 $x110)))
 (let (($x105 (and $x11 $x101)))
 (let (($x57 (and $x105 $x152)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (and $x40 $x57)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x51 (and $x31 $x50)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x118 (and $x46 $x51)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x130 (and $x35 $x118)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x142 (and $x18 $x130)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x82 (and $x49 $x142)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x58 (and $x33 $x82)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x91 (and $x63 $x58)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x131 (and $x161 $x91)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x48 (and $x66 $x131)))
 (let (($x120 (=> $x48 $x86)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (not $x108)))
 (let (($x113 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (=> $x113 $x14)))
 (let (($x28 (= $x55 true)))
 (let (($x86 (= $x28 true)))
 (let (($x122 (forall ((input.ind-%var1524X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1524X)))
 (=> $x92 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1524X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1523X)))
 (= $x92 false)))
 ))
 (let (($x165 (and $x114 $x122)))
 (let (($x152 (= $x165 true)))
 (let ((?x15 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x15)))
 (let (($x107 (= ?x104 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x107 true)))
 (let (($x101 (= $x117 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x65)))
 (let (($x100 (= ?x97 input.dst.llvm-%n)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let (($x78 (= ?x97 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (= $x78 true)))
 (let (($x76 (= $x56 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x85)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x61 $x22)))
 (let (($x75 (and $x38 $x93)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x139 $x75)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x17)))))))
 (let (($x74 (and $x60 $x73)))
 (let (($x69 (= $x74 true)))
 (let (($x70 (= $x69 true)))
 (let (($x84 (= $x70 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x19)))
 (let (($x133 (= ?x164 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x24 (= $x133 true)))
 (let (($x132 (= $x24 true)))
 (let (($x6 (and $x132 $x84)))
 (let (($x59 (and $x6 $x76)))
 (let (($x11 (and $x59 $x110)))
 (let (($x105 (and $x11 $x101)))
 (let (($x57 (and $x105 $x152)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (and $x40 $x57)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x51 (and $x31 $x50)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x118 (and $x46 $x51)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x130 (and $x35 $x118)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x142 (and $x18 $x130)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x82 (and $x49 $x142)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x58 (and $x33 $x82)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x91 (and $x63 $x58)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x131 (and $x161 $x91)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x48 (and $x66 $x131)))
 (let (($x120 (=> $x48 $x86)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x88 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x41 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x41 ?x88 (_ bv0 32))))
 (let ((?x124 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x140 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x83 (ite $x140 ?x124 ?x8)))
 (let ((?x143 (bvmul (_ bv4294967295 32) ?x83)))
 (let ((?x54 (bvneg ?x143)))
 (let (($x141 (= ?x54 ?x37)))
 (let (($x67 (= $x141 true)))
 (let (($x55 (forall ((input.ind-%var1530X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1530X)))
 (=> $x57 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1530X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1529X)))
 (= $x57 false)))
 ))
 (let (($x28 (and $x130 $x55)))
 (let (($x86 (= $x28 true)))
 (let ((?x116 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x116)))
 (let (($x114 (= ?x92 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x114 true)))
 (let (($x137 (= $x125 true)))
 (let ((?x15 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x15)))
 (let (($x99 (= ?x104 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x99 true)))
 (let (($x117 (= $x107 true)))
 (let (($x100 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let (($x11 (= $x110 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x70)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x93 $x74)))
 (let (($x6 (and $x69 $x84)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x17 $x6)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x139)))))))
 (let (($x97 (and $x85 $x65)))
 (let (($x78 (= $x97 true)))
 (let (($x56 (= $x78 true)))
 (let (($x76 (= $x56 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x19)))
 (let (($x44 (= ?x164 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (= $x44 true)))
 (let (($x53 (= $x172 true)))
 (let (($x133 (= ?x164 input.dst.llvm-%n)))
 (let (($x24 (= $x133 true)))
 (let (($x132 (= $x24 true)))
 (let (($x39 (and $x132 $x53)))
 (let (($x59 (and $x39 $x76)))
 (let (($x81 (and $x59 $x11)))
 (let (($x101 (and $x81 $x117)))
 (let (($x89 (and $x101 $x137)))
 (let (($x120 (and $x89 $x86)))
 (let (($x13 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and (not $x13) $x120)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (and $x45 $x144)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x163 (and $x20 $x94)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x145 (and $x34 $x163)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x5 (and $x72 $x145)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x112 (and $x16 $x5)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x102 (and $x23 $x112)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x127 (and $x27 $x102)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x157 (and $x77 $x127)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x136 (and $x154 $x157)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x153 (and $x64 $x136)))
 (let (($x96 (=> $x153 $x67)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x88 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x41 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x8 (ite $x41 ?x88 (_ bv0 32))))
 (let ((?x124 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x140 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x83 (ite $x140 ?x124 ?x8)))
 (let ((?x143 (bvmul (_ bv4294967295 32) ?x83)))
 (let ((?x54 (bvneg ?x143)))
 (let (($x141 (= ?x54 ?x37)))
 (let (($x67 (= $x141 true)))
 (let (($x55 (forall ((input.ind-%var1530X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1530X)))
 (=> $x57 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1530X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1529X)))
 (= $x57 false)))
 ))
 (let (($x28 (and $x130 $x55)))
 (let (($x86 (= $x28 true)))
 (let ((?x116 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x116)))
 (let (($x114 (= ?x92 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x114 true)))
 (let (($x137 (= $x125 true)))
 (let ((?x15 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x15)))
 (let (($x99 (= ?x104 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x99 true)))
 (let (($x117 (= $x107 true)))
 (let (($x100 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let (($x11 (= $x110 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x70)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x93 $x74)))
 (let (($x6 (and $x69 $x84)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x17 $x6)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x139)))))))
 (let (($x97 (and $x85 $x65)))
 (let (($x78 (= $x97 true)))
 (let (($x56 (= $x78 true)))
 (let (($x76 (= $x56 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x19)))
 (let (($x44 (= ?x164 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (= $x44 true)))
 (let (($x53 (= $x172 true)))
 (let (($x133 (= ?x164 input.dst.llvm-%n)))
 (let (($x24 (= $x133 true)))
 (let (($x132 (= $x24 true)))
 (let (($x39 (and $x132 $x53)))
 (let (($x59 (and $x39 $x76)))
 (let (($x81 (and $x59 $x11)))
 (let (($x101 (and $x81 $x117)))
 (let (($x89 (and $x101 $x137)))
 (let (($x120 (and $x89 $x86)))
 (let (($x13 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and (not $x13) $x120)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (and $x45 $x144)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x163 (and $x20 $x94)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x145 (and $x34 $x163)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x5 (and $x72 $x145)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x112 (and $x16 $x5)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x102 (and $x23 $x112)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x127 (and $x27 $x102)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x157 (and $x77 $x127)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x136 (and $x154 $x157)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x153 (and $x64 $x136)))
 (let (($x96 (=> $x153 $x67)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x50 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x25 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x131 (ite $x25 ?x50 (_ bv0 32))))
 (let ((?x87 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x96 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x58 (ite $x96 ?x87 ?x131)))
 (let ((?x122 (bvmul (_ bv4294967295 32) ?x58)))
 (let ((?x165 (bvneg ?x122)))
 (let (($x48 (= ?x165 ?x51)))
 (let (($x82 (= $x48 true)))
 (let (($x102 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1576X)))
 (= $x130 false)))
 ))
 (let (($x94 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1577X)))
 (=> $x130 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1577X) (_ bv0 32)))))
 ))
 (let (($x127 (and $x94 $x102)))
 (let (($x157 (= $x127 true)))
 (let ((?x116 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x116)))
 (let (($x114 (= ?x92 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x114 true)))
 (let (($x137 (= $x125 true)))
 (let ((?x15 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x15)))
 (let (($x99 (= ?x104 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x99 true)))
 (let (($x117 (= $x107 true)))
 (let (($x100 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let (($x11 (= $x110 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x70)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x93 $x74)))
 (let (($x6 (and $x69 $x84)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x52 $x6)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x139 $x61)))))))
 (let (($x97 (and $x17 $x65)))
 (let (($x78 (= $x97 true)))
 (let (($x56 (= $x78 true)))
 (let (($x76 (= $x56 true)))
 (let ((?x98 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x98)))
 (let (($x24 (= ?x47 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (= $x24 true)))
 (let (($x44 (= $x132 true)))
 (let (($x164 (= ?x47 input.dst.llvm-%n)))
 (let (($x12 (= $x164 true)))
 (let (($x133 (= $x12 true)))
 (let (($x172 (and $x133 $x44)))
 (let (($x59 (and $x172 $x76)))
 (let (($x81 (and $x59 $x11)))
 (let (($x101 (and $x81 $x117)))
 (let (($x89 (and $x101 $x137)))
 (let (($x136 (and $x89 $x157)))
 (let (($x40 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and (not $x40) $x136)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x7 $x140)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x41 (and $x46 $x124)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x88 (and $x35 $x41)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x8 (and $x18 $x88)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x83 (and $x49 $x8)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x143 (and $x33 $x83)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x54 (and $x36 $x143)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x37 (and $x161 $x54)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x141 (and $x21 $x37)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x67 (and $x66 $x141)))
 (let (($x113 (=> $x67 $x82)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x50 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x25 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x131 (ite $x25 ?x50 (_ bv0 32))))
 (let ((?x87 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x96 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x58 (ite $x96 ?x87 ?x131)))
 (let ((?x122 (bvmul (_ bv4294967295 32) ?x58)))
 (let ((?x165 (bvneg ?x122)))
 (let (($x48 (= ?x165 ?x51)))
 (let (($x82 (= $x48 true)))
 (let (($x102 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1576X)))
 (= $x130 false)))
 ))
 (let (($x94 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1577X)))
 (=> $x130 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1577X) (_ bv0 32)))))
 ))
 (let (($x127 (and $x94 $x102)))
 (let (($x157 (= $x127 true)))
 (let ((?x116 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x116)))
 (let (($x114 (= ?x92 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x125 (= $x114 true)))
 (let (($x137 (= $x125 true)))
 (let ((?x15 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x15)))
 (let (($x99 (= ?x104 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x99 true)))
 (let (($x117 (= $x107 true)))
 (let (($x100 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (= $x100 true)))
 (let (($x110 (= $x109 true)))
 (let (($x11 (= $x110 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x70)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x93 $x74)))
 (let (($x6 (and $x69 $x84)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x52 $x6)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x139 $x61)))))))
 (let (($x97 (and $x17 $x65)))
 (let (($x78 (= $x97 true)))
 (let (($x56 (= $x78 true)))
 (let (($x76 (= $x56 true)))
 (let ((?x98 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x98)))
 (let (($x24 (= ?x47 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (= $x24 true)))
 (let (($x44 (= $x132 true)))
 (let (($x164 (= ?x47 input.dst.llvm-%n)))
 (let (($x12 (= $x164 true)))
 (let (($x133 (= $x12 true)))
 (let (($x172 (and $x133 $x44)))
 (let (($x59 (and $x172 $x76)))
 (let (($x81 (and $x59 $x11)))
 (let (($x101 (and $x81 $x117)))
 (let (($x89 (and $x101 $x137)))
 (let (($x136 (and $x89 $x157)))
 (let (($x40 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and (not $x40) $x136)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x7 $x140)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x41 (and $x46 $x124)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x88 (and $x35 $x41)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x8 (and $x18 $x88)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x83 (and $x49 $x8)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x143 (and $x33 $x83)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x54 (and $x36 $x143)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x37 (and $x161 $x54)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x141 (and $x21 $x37)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x67 (and $x66 $x141)))
 (let (($x113 (=> $x67 $x82)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x50)))
 (let (($x58 (= $x131 false)))
 (let (($x122 (= $x58 true)))
 (let (($x140 (forall ((input.ind-%var1624X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1624X)))
 (=> $x125 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1624X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var1623X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1623X)))
 (= $x125 false)))
 ))
 (let (($x124 (and $x130 $x140)))
 (let (($x41 (= $x124 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x104)))
 (let (($x117 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let ((?x164 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x164)))
 (let (($x109 (= ?x12 input.dst.llvm-%n)))
 (let (($x110 (= $x109 true)))
 (let (($x11 (= $x110 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x84)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x75 $x69)))
 (let (($x65 (and $x70 $x6)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x71 $x65)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x32)))))))
 (let (($x78 (and $x93 $x97)))
 (let (($x56 (= $x78 true)))
 (let (($x76 (= $x56 true)))
 (let (($x59 (= $x76 true)))
 (let (($x133 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (= $x133 true)))
 (let (($x132 (= $x24 true)))
 (let ((?x40 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x40)))
 (let (($x98 (= ?x153 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x98 true)))
 (let (($x19 (= $x47 true)))
 (let (($x44 (and $x19 $x132)))
 (let (($x68 (and $x44 $x59)))
 (let (($x81 (and $x68 $x11)))
 (let (($x116 (and $x81 $x105)))
 (let (($x88 (and $x116 $x41)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and $x31 $x88)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x83 (and $x34 $x8)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x143 (and $x72 $x83)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x54 (and $x16 $x143)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x37 (and $x23 $x54)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x141 (and $x27 $x37)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x67 (and $x63 $x141)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x96 (and $x154 $x67)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x87 (and $x9 $x96)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x25 (and $x53 $x87)))
 (let (($x165 (=> $x25 $x122)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x50)))
 (let (($x58 (= $x131 false)))
 (let (($x122 (= $x58 true)))
 (let (($x140 (forall ((input.ind-%var1624X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1624X)))
 (=> $x125 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1624X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var1623X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1623X)))
 (= $x125 false)))
 ))
 (let (($x124 (and $x130 $x140)))
 (let (($x41 (= $x124 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x104)))
 (let (($x117 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let ((?x164 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x164)))
 (let (($x109 (= ?x12 input.dst.llvm-%n)))
 (let (($x110 (= $x109 true)))
 (let (($x11 (= $x110 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x84)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x75 $x69)))
 (let (($x65 (and $x70 $x6)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x71 $x65)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x32)))))))
 (let (($x78 (and $x93 $x97)))
 (let (($x56 (= $x78 true)))
 (let (($x76 (= $x56 true)))
 (let (($x59 (= $x76 true)))
 (let (($x133 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (= $x133 true)))
 (let (($x132 (= $x24 true)))
 (let ((?x40 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x40)))
 (let (($x98 (= ?x153 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x98 true)))
 (let (($x19 (= $x47 true)))
 (let (($x44 (and $x19 $x132)))
 (let (($x68 (and $x44 $x59)))
 (let (($x81 (and $x68 $x11)))
 (let (($x116 (and $x81 $x105)))
 (let (($x88 (and $x116 $x41)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and $x31 $x88)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x83 (and $x34 $x8)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x143 (and $x72 $x83)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x54 (and $x16 $x143)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x37 (and $x23 $x54)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x141 (and $x27 $x37)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x67 (and $x63 $x141)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x96 (and $x154 $x67)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x87 (and $x9 $x96)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x25 (and $x53 $x87)))
 (let (($x165 (=> $x25 $x122)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00064003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03ffa003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x89 (not $x29)))
 (let (($x120 (=> $x89 $x102)))
 (let (($x127 (= $x120 true)))
 (let (($x163 (= $x127 true)))
 (let (($x96 (forall ((input.ind-%var1638X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1638X)))
 (=> $x94 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1638X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1637X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1637X)))
 (= $x94 false)))
 ))
 (let (($x87 (and $x124 $x96)))
 (let (($x25 (= $x87 true)))
 (let ((?x99 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x99)))
 (let (($x101 (= ?x107 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let ((?x78 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x78)))
 (let (($x110 (= ?x56 input.dst.llvm-%n)))
 (let (($x11 (= $x110 true)))
 (let (($x81 (= $x11 true)))
 (let (($x76 (= ?x56 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (= $x76 true)))
 (let (($x68 (= $x59 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x75)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x17 $x10)))
 (let (($x74 (and $x71 $x73)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x133 $x74)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x139)))))))
 (let (($x70 (and $x85 $x69)))
 (let (($x84 (= $x70 true)))
 (let (($x6 (= $x84 true)))
 (let (($x65 (= $x6 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x45)))
 (let (($x13 (= ?x40 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x13 true)))
 (let (($x47 (= $x98 true)))
 (let (($x97 (and $x47 $x65)))
 (let (($x100 (and $x97 $x68)))
 (let (($x15 (and $x100 $x81)))
 (let (($x114 (and $x15 $x116)))
 (let (($x50 (and $x114 $x25)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x131 (and $x20 $x50)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x58 (and $x35 $x131)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x122 (and $x18 $x58)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x165 (and $x49 $x122)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x51 (and $x33 $x165)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x38 (and $x36 $x51)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x137 (and $x77 $x38)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x112 (and $x21 $x137)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x144 (and $x30 $x112)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x92 (and $x172 $x144)))
 (let (($x48 (=> $x92 $x163)))
 (not $x48))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x89 (not $x29)))
 (let (($x120 (=> $x89 $x102)))
 (let (($x127 (= $x120 true)))
 (let (($x163 (= $x127 true)))
 (let (($x96 (forall ((input.ind-%var1638X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1638X)))
 (=> $x94 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1638X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1637X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1637X)))
 (= $x94 false)))
 ))
 (let (($x87 (and $x124 $x96)))
 (let (($x25 (= $x87 true)))
 (let ((?x99 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x99)))
 (let (($x101 (= ?x107 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let ((?x78 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x78)))
 (let (($x110 (= ?x56 input.dst.llvm-%n)))
 (let (($x11 (= $x110 true)))
 (let (($x81 (= $x11 true)))
 (let (($x76 (= ?x56 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (= $x76 true)))
 (let (($x68 (= $x59 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x75)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x17 $x10)))
 (let (($x74 (and $x71 $x73)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x133 $x74)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x139)))))))
 (let (($x70 (and $x85 $x69)))
 (let (($x84 (= $x70 true)))
 (let (($x6 (= $x84 true)))
 (let (($x65 (= $x6 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x45)))
 (let (($x13 (= ?x40 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x13 true)))
 (let (($x47 (= $x98 true)))
 (let (($x97 (and $x47 $x65)))
 (let (($x100 (and $x97 $x68)))
 (let (($x15 (and $x100 $x81)))
 (let (($x114 (and $x15 $x116)))
 (let (($x50 (and $x114 $x25)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x131 (and $x20 $x50)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x58 (and $x35 $x131)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x122 (and $x18 $x58)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x165 (and $x49 $x122)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x51 (and $x33 $x165)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x38 (and $x36 $x51)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x137 (and $x77 $x38)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x112 (and $x21 $x137)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x144 (and $x30 $x112)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x92 (and $x172 $x144)))
 (let (($x48 (=> $x92 $x163)))
 (not $x48))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 102 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x113 true)))
 (let (($x39 (= $x121 true)))
 (let (($x163 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1644X)))
 (=> $x58 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1644X) (_ bv0 32)))))
 ))
 (let (($x38 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1643X)))
 (= $x58 false)))
 ))
 (let (($x48 (and $x38 $x163)))
 (let (($x82 (= $x48 true)))
 (let ((?x140 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x140)))
 (let (($x141 (= ?x124 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x141 true)))
 (let (($x96 (= $x67 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x104)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x109 $x81)))
 (let (($x107 (and $x15 $x99)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x73 $x107)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x97)))))))
 (let (($x101 (and $x100 $x117)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let (($x114 (= $x116 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x61)))
 (let (($x133 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x133 true)))
 (let (($x42 (= $x17 true)))
 (let (($x26 (= ?x80 input.dst.llvm-%n)))
 (let (($x32 (= $x26 true)))
 (let (($x85 (= $x32 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x22)))
 (let (($x79 (= ?x44 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x79 true)))
 (let (($x60 (= $x52 true)))
 (let (($x153 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (not $x153)))
 (let (($x98 (= $x13 true)))
 (let (($x47 (= $x98 true)))
 (let (($x24 (= $x47 true)))
 (let (($x139 (and $x24 $x60)))
 (let (($x12 (and $x139 $x85)))
 (let (($x93 (and $x12 $x42)))
 (let (($x130 (and $x93 $x114)))
 (let (($x87 (and $x130 $x96)))
 (let (($x19 (and $x87 $x82)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x7 $x19)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x157 (and $x46 $x164)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x143 (and $x72 $x157)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x8 (and $x16 $x143)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x125 (and $x23 $x8)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x118 (and $x27 $x125)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x136 (and $x63 $x118)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x54 (and $x161 $x136)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x88 (and $x9 $x54)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x37 (and $x66 $x88)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x14 (and $x53 $x37)))
 (let (($x91 (=> $x14 $x39)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x113 true)))
 (let (($x39 (= $x121 true)))
 (let (($x163 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1644X)))
 (=> $x58 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1644X) (_ bv0 32)))))
 ))
 (let (($x38 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1643X)))
 (= $x58 false)))
 ))
 (let (($x48 (and $x38 $x163)))
 (let (($x82 (= $x48 true)))
 (let ((?x140 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x140)))
 (let (($x141 (= ?x124 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x141 true)))
 (let (($x96 (= $x67 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x104)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x109 $x81)))
 (let (($x107 (and $x15 $x99)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x73 $x107)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x97)))))))
 (let (($x101 (and $x100 $x117)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let (($x114 (= $x116 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x61)))
 (let (($x133 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x133 true)))
 (let (($x42 (= $x17 true)))
 (let (($x26 (= ?x80 input.dst.llvm-%n)))
 (let (($x32 (= $x26 true)))
 (let (($x85 (= $x32 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x22)))
 (let (($x79 (= ?x44 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x79 true)))
 (let (($x60 (= $x52 true)))
 (let (($x153 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (not $x153)))
 (let (($x98 (= $x13 true)))
 (let (($x47 (= $x98 true)))
 (let (($x24 (= $x47 true)))
 (let (($x139 (and $x24 $x60)))
 (let (($x12 (and $x139 $x85)))
 (let (($x93 (and $x12 $x42)))
 (let (($x130 (and $x93 $x114)))
 (let (($x87 (and $x130 $x96)))
 (let (($x19 (and $x87 $x82)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x7 $x19)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x157 (and $x46 $x164)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x143 (and $x72 $x157)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x8 (and $x16 $x143)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x125 (and $x23 $x8)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x118 (and $x27 $x125)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x136 (and $x63 $x118)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x54 (and $x161 $x136)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x88 (and $x9 $x54)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x37 (and $x66 $x88)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x14 (and $x53 $x37)))
 (let (($x91 (=> $x14 $x39)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 107 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (not $x91)))
 (let (($x71 (or $x91 $x55)))
 (let (($x122 (= $x71 true)))
 (let (($x29 (= $x122 true)))
 (let (($x164 (forall ((input.ind-%var1650X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1650X)))
 (=> $x67 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1650X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var1649X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1649X)))
 (= $x67 false)))
 ))
 (let (($x157 (and $x58 $x164)))
 (let (($x143 (= $x157 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x101)))
 (let (($x114 (= ?x105 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x130 (= $x114 true)))
 (let (($x94 (= $x130 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x47)))
 (let (($x15 (= ?x24 input.dst.llvm-%n)))
 (let (($x104 (= $x15 true)))
 (let (($x99 (= $x104 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x56)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x6 $x97)))
 (let (($x59 (and $x78 $x76)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x61 $x59)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x133 $x17)))))))
 (let (($x75 (and $x70 $x100)))
 (let (($x73 (= $x75 true)))
 (let (($x109 (= $x73 true)))
 (let (($x110 (= $x109 true)))
 (let (($x132 (= ?x24 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x132 true)))
 (let (($x44 (= $x22 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x7)))
 (let (($x153 (= ?x45 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x153 true)))
 (let (($x98 (= $x13 true)))
 (let (($x79 (and $x98 $x44)))
 (let (($x11 (and $x79 $x110)))
 (let (($x107 (and $x11 $x99)))
 (let (($x140 (and $x107 $x94)))
 (let (($x8 (and $x140 $x143)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x34 $x8)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x118 (and $x18 $x125)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x136 (and $x49 $x118)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x54 (and $x33 $x136)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x88 (and $x36 $x54)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x37 (and $x77 $x88)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x14 (and $x154 $x37)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x113 (and $x30 $x14)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x121 (and $x31 $x113)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x39 (and $x64 $x121)))
 (let (($x144 (=> $x39 $x29)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (not $x91)))
 (let (($x71 (or $x91 $x55)))
 (let (($x122 (= $x71 true)))
 (let (($x29 (= $x122 true)))
 (let (($x164 (forall ((input.ind-%var1650X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1650X)))
 (=> $x67 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1650X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var1649X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1649X)))
 (= $x67 false)))
 ))
 (let (($x157 (and $x58 $x164)))
 (let (($x143 (= $x157 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x101)))
 (let (($x114 (= ?x105 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x130 (= $x114 true)))
 (let (($x94 (= $x130 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x47)))
 (let (($x15 (= ?x24 input.dst.llvm-%n)))
 (let (($x104 (= $x15 true)))
 (let (($x99 (= $x104 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x56)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x6 $x97)))
 (let (($x59 (and $x78 $x76)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x61 $x59)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x133 $x17)))))))
 (let (($x75 (and $x70 $x100)))
 (let (($x73 (= $x75 true)))
 (let (($x109 (= $x73 true)))
 (let (($x110 (= $x109 true)))
 (let (($x132 (= ?x24 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x132 true)))
 (let (($x44 (= $x22 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x7)))
 (let (($x153 (= ?x45 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x153 true)))
 (let (($x98 (= $x13 true)))
 (let (($x79 (and $x98 $x44)))
 (let (($x11 (and $x79 $x110)))
 (let (($x107 (and $x11 $x99)))
 (let (($x140 (and $x107 $x94)))
 (let (($x8 (and $x140 $x143)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x34 $x8)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x118 (and $x18 $x125)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x136 (and $x49 $x118)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x54 (and $x33 $x136)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x88 (and $x36 $x54)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x37 (and $x77 $x88)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x14 (and $x154 $x37)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x113 (and $x30 $x14)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x121 (and $x31 $x113)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x39 (and $x64 $x121)))
 (let (($x144 (=> $x39 $x29)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 101 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x60 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x60)))
 (let (($x127 (= ?x96 input.dst.llvm-%n)))
 (let (($x92 (= $x127 true)))
 (let (($x136 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1656X)))
 (=> $x140 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1656X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var1655X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1655X)))
 (= $x140 false)))
 ))
 (let (($x54 (and $x58 $x136)))
 (let (($x88 (= $x54 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x99 (concat ?x81 (concat ?x73 ?x100)))))
 (let (($x117 (= ?x107 input.dst.llvm-%n)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x65 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x84 (= $x65 true)))
 (let (($x97 (= $x84 true)))
 (let (($x78 (= $x97 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x68 $x133)))
 (let (($x93 (and $x85 $x42)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x7 $x93)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x24)))))))
 (let (($x69 (and $x26 $x74)))
 (let (($x70 (= $x69 true)))
 (let (($x139 (= $x70 true)))
 (let (($x61 (= $x139 true)))
 (let (($x56 (and $x61 $x78)))
 (let (($x116 (and $x56 $x105)))
 (let (($x37 (and $x116 $x88)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (and $x35 $x37)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x113 (and $x16 $x14)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x121 (and $x23 $x113)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x39 (and $x27 $x121)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x91 (and $x63 $x39)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x55 (and $x161 $x91)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x71 (and $x21 $x55)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x122 (and $x66 $x71)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x29 (and $x10 $x122)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x144 (and $x53 $x29)))
 (let (($x124 (=> $x144 $x92)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x60 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x60)))
 (let (($x127 (= ?x96 input.dst.llvm-%n)))
 (let (($x92 (= $x127 true)))
 (let (($x136 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1656X)))
 (=> $x140 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1656X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var1655X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1655X)))
 (= $x140 false)))
 ))
 (let (($x54 (and $x58 $x136)))
 (let (($x88 (= $x54 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x99 (concat ?x81 (concat ?x73 ?x100)))))
 (let (($x117 (= ?x107 input.dst.llvm-%n)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x65 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x84 (= $x65 true)))
 (let (($x97 (= $x84 true)))
 (let (($x78 (= $x97 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x68 $x133)))
 (let (($x93 (and $x85 $x42)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x7 $x93)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x24)))))))
 (let (($x69 (and $x26 $x74)))
 (let (($x70 (= $x69 true)))
 (let (($x139 (= $x70 true)))
 (let (($x61 (= $x139 true)))
 (let (($x56 (and $x61 $x78)))
 (let (($x116 (and $x56 $x105)))
 (let (($x37 (and $x116 $x88)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (and $x35 $x37)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x113 (and $x16 $x14)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x121 (and $x23 $x113)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x39 (and $x27 $x121)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x91 (and $x63 $x39)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x55 (and $x161 $x91)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x71 (and $x21 $x55)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x122 (and $x66 $x71)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x29 (and $x10 $x122)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x144 (and $x53 $x29)))
 (let (($x124 (=> $x144 $x92)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x67 (bvneg ?x130)))
 (let (($x143 (= ?x67 input.spec-%var-n-1)))
 (let (($x82 (= $x143 true)))
 (let (($x29 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1662X)))
 (=> $x125 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1662X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var1661X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1661X)))
 (= $x125 false)))
 ))
 (let (($x144 (and $x88 $x29)))
 (let (($x25 (= $x144 true)))
 (let (($x101 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let (($x94 (= $x116 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x11)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x42 $x99)))
 (let (($x75 (and $x110 $x81)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x17 $x75)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x6)))))))
 (let (($x100 (and $x76 $x73)))
 (let (($x109 (= $x100 true)))
 (let (($x15 (= $x109 true)))
 (let (($x107 (= $x15 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x20 (concat ?x22 (concat ?x47 ?x153)))))
 (let (($x32 (= ?x7 input.dst.llvm-%n)))
 (let (($x12 (= $x32 true)))
 (let (($x133 (= $x12 true)))
 (let (($x117 (and $x133 $x107)))
 (let (($x140 (and $x117 $x94)))
 (let (($x60 (and $x140 $x25)))
 (let (($x72 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x72 $x60)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x127 (and $x49 $x96)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x92 (and $x33 $x127)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x124 (and $x36 $x92)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x83 (and $x77 $x124)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x46 (and $x154 $x83)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x59 (and $x9 $x46)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x141 (and $x31 $x59)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x157 (and $x52 $x141)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x19 (and $x64 $x157)))
 (let (($x8 (=> $x19 $x82)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x67 (bvneg ?x130)))
 (let (($x143 (= ?x67 input.spec-%var-n-1)))
 (let (($x82 (= $x143 true)))
 (let (($x29 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1662X)))
 (=> $x125 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1662X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var1661X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1661X)))
 (= $x125 false)))
 ))
 (let (($x144 (and $x88 $x29)))
 (let (($x25 (= $x144 true)))
 (let (($x101 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let (($x94 (= $x116 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x11)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x42 $x99)))
 (let (($x75 (and $x110 $x81)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x17 $x75)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x6)))))))
 (let (($x100 (and $x76 $x73)))
 (let (($x109 (= $x100 true)))
 (let (($x15 (= $x109 true)))
 (let (($x107 (= $x15 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x20 (concat ?x22 (concat ?x47 ?x153)))))
 (let (($x32 (= ?x7 input.dst.llvm-%n)))
 (let (($x12 (= $x32 true)))
 (let (($x133 (= $x12 true)))
 (let (($x117 (and $x133 $x107)))
 (let (($x140 (and $x117 $x94)))
 (let (($x60 (and $x140 $x25)))
 (let (($x72 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x72 $x60)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x127 (and $x49 $x96)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x92 (and $x33 $x127)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x124 (and $x36 $x92)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x83 (and $x77 $x124)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x46 (and $x154 $x83)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x59 (and $x9 $x46)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x141 (and $x31 $x59)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x157 (and $x52 $x141)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x19 (and $x64 $x157)))
 (let (($x8 (=> $x19 $x82)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x112 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x41 (ite $x112 ?x102 (_ bv0 32))))
 (let ((?x89 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x165 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x152 (ite $x165 ?x89 ?x41)))
 (let ((?x108 (bvmul (_ bv4294967295 32) ?x152)))
 (let ((?x145 (bvneg ?x108)))
 (let (($x28 (= ?x145 ?x5)))
 (let (($x57 (= $x28 true)))
 (let (($x118 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1668X)))
 (=> $x46 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1668X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var1667X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1667X)))
 (= $x46 false)))
 ))
 (let (($x39 (and $x19 $x118)))
 (let (($x113 (= $x39 true)))
 (let ((?x122 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x122)))
 (let (($x25 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x25 true)))
 (let (($x96 (= $x60 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x140)))
 (let (($x125 (= ?x164 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x125 true)))
 (let (($x88 (= $x54 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x99)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x78 $x42)))
 (let (($x11 (and $x104 $x110)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x32 $x11)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x139)))))))
 (let (($x75 (and $x97 $x81)))
 (let (($x73 (= $x75 true)))
 (let (($x100 (= $x73 true)))
 (let (($x109 (= $x100 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x79)))
 (let (($x98 (= ?x26 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x47 (= $x98 true)))
 (let (($x153 (= $x47 true)))
 (let (($x24 (= ?x26 input.dst.llvm-%n)))
 (let (($x132 (= $x24 true)))
 (let (($x22 (= $x132 true)))
 (let (($x13 (and $x22 $x153)))
 (let (($x15 (and $x13 $x109)))
 (let (($x94 (and $x15 $x116)))
 (let (($x121 (and $x94 $x88)))
 (let (($x127 (and $x121 $x96)))
 (let (($x131 (and $x127 $x113)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and (not $x35) $x131)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (and $x18 $x136)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x14 (and $x23 $x91)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x55 (and $x27 $x14)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x120 (and $x63 $x55)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x87 (and $x161 $x120)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x21 $x87)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x38 (and $x30 $x163)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x48 (and $x10 $x38)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x137 (and $x34 $x48)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x50 (and $x53 $x137)))
 (let (($x86 (=> $x50 $x57)))
 (not $x86))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x112 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x41 (ite $x112 ?x102 (_ bv0 32))))
 (let ((?x89 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x165 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x152 (ite $x165 ?x89 ?x41)))
 (let ((?x108 (bvmul (_ bv4294967295 32) ?x152)))
 (let ((?x145 (bvneg ?x108)))
 (let (($x28 (= ?x145 ?x5)))
 (let (($x57 (= $x28 true)))
 (let (($x118 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1668X)))
 (=> $x46 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1668X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var1667X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1667X)))
 (= $x46 false)))
 ))
 (let (($x39 (and $x19 $x118)))
 (let (($x113 (= $x39 true)))
 (let ((?x122 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x122)))
 (let (($x25 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x25 true)))
 (let (($x96 (= $x60 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x140)))
 (let (($x125 (= ?x164 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x125 true)))
 (let (($x88 (= $x54 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x99)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x78 $x42)))
 (let (($x11 (and $x104 $x110)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x32 $x11)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x139)))))))
 (let (($x75 (and $x97 $x81)))
 (let (($x73 (= $x75 true)))
 (let (($x100 (= $x73 true)))
 (let (($x109 (= $x100 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x79)))
 (let (($x98 (= ?x26 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x47 (= $x98 true)))
 (let (($x153 (= $x47 true)))
 (let (($x24 (= ?x26 input.dst.llvm-%n)))
 (let (($x132 (= $x24 true)))
 (let (($x22 (= $x132 true)))
 (let (($x13 (and $x22 $x153)))
 (let (($x15 (and $x13 $x109)))
 (let (($x94 (and $x15 $x116)))
 (let (($x121 (and $x94 $x88)))
 (let (($x127 (and $x121 $x96)))
 (let (($x131 (and $x127 $x113)))
 (let (($x35 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and (not $x35) $x131)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (and $x18 $x136)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x14 (and $x23 $x91)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x55 (and $x27 $x14)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x120 (and $x63 $x55)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x87 (and $x161 $x120)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x21 $x87)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x38 (and $x30 $x163)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x48 (and $x10 $x38)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x137 (and $x34 $x48)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x50 (and $x53 $x137)))
 (let (($x86 (=> $x50 $x57)))
 (not $x86))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x59 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x7 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x82 (ite $x7 ?x59 (_ bv0 32))))
 (let ((?x142 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x86 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x67 (ite $x86 ?x142 ?x82)))
 (let ((?x92 (bvmul (_ bv4294967295 32) ?x67)))
 (let ((?x124 (bvneg ?x92)))
 (let (($x8 (= ?x124 ?x141)))
 (let (($x130 (= $x8 true)))
 (let (($x163 (forall ((input.ind-%var1714X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1714X)))
 (= $x19 false)))
 ))
 (let (($x91 (forall ((input.ind-%var1715X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1715X)))
 (=> $x19 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1715X) (_ bv0 32)))))
 ))
 (let (($x38 (and $x91 $x163)))
 (let (($x48 (= $x38 true)))
 (let ((?x122 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x122)))
 (let (($x25 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x25 true)))
 (let (($x96 (= $x60 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x140)))
 (let (($x125 (= ?x164 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x125 true)))
 (let (($x88 (= $x54 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x99)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x78 $x42)))
 (let (($x11 (and $x104 $x110)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x133 $x11)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x139 $x61)))))))
 (let (($x75 (and $x32 $x81)))
 (let (($x73 (= $x75 true)))
 (let (($x100 (= $x73 true)))
 (let (($x109 (= $x100 true)))
 (let ((?x58 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x58)))
 (let (($x132 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x132 true)))
 (let (($x98 (= $x22 true)))
 (let (($x26 (= ?x80 input.dst.llvm-%n)))
 (let (($x20 (= $x26 true)))
 (let (($x24 (= $x20 true)))
 (let (($x47 (and $x24 $x98)))
 (let (($x15 (and $x47 $x109)))
 (let (($x94 (and $x15 $x116)))
 (let (($x121 (and $x94 $x88)))
 (let (($x127 (and $x121 $x96)))
 (let (($x137 (and $x127 $x48)))
 (let (($x72 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x72) $x137)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (and $x16 $x165)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x112 (and $x33 $x89)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x102 (and $x36 $x112)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x41 (and $x77 $x102)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x152 (and $x154 $x41)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x108 (and $x9 $x152)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x145 (and $x66 $x108)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x5 (and $x52 $x145)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x28 (and $x45 $x5)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x57 (and $x64 $x28)))
 (let (($x51 (=> $x57 $x130)))
 (not $x51))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x59 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x7 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x82 (ite $x7 ?x59 (_ bv0 32))))
 (let ((?x142 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x86 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x67 (ite $x86 ?x142 ?x82)))
 (let ((?x92 (bvmul (_ bv4294967295 32) ?x67)))
 (let ((?x124 (bvneg ?x92)))
 (let (($x8 (= ?x124 ?x141)))
 (let (($x130 (= $x8 true)))
 (let (($x163 (forall ((input.ind-%var1714X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1714X)))
 (= $x19 false)))
 ))
 (let (($x91 (forall ((input.ind-%var1715X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1715X)))
 (=> $x19 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1715X) (_ bv0 32)))))
 ))
 (let (($x38 (and $x91 $x163)))
 (let (($x48 (= $x38 true)))
 (let ((?x122 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x122)))
 (let (($x25 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x25 true)))
 (let (($x96 (= $x60 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x140)))
 (let (($x125 (= ?x164 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x125 true)))
 (let (($x88 (= $x54 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (= $x117 true)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x99)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x78 $x42)))
 (let (($x11 (and $x104 $x110)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x133 $x11)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x139 $x61)))))))
 (let (($x75 (and $x32 $x81)))
 (let (($x73 (= $x75 true)))
 (let (($x100 (= $x73 true)))
 (let (($x109 (= $x100 true)))
 (let ((?x58 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x58)))
 (let (($x132 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x132 true)))
 (let (($x98 (= $x22 true)))
 (let (($x26 (= ?x80 input.dst.llvm-%n)))
 (let (($x20 (= $x26 true)))
 (let (($x24 (= $x20 true)))
 (let (($x47 (and $x24 $x98)))
 (let (($x15 (and $x47 $x109)))
 (let (($x94 (and $x15 $x116)))
 (let (($x121 (and $x94 $x88)))
 (let (($x127 (and $x121 $x96)))
 (let (($x137 (and $x127 $x48)))
 (let (($x72 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x72) $x137)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (and $x16 $x165)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x112 (and $x33 $x89)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x102 (and $x36 $x112)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x41 (and $x77 $x102)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x152 (and $x154 $x41)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x108 (and $x9 $x152)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x145 (and $x66 $x108)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x5 (and $x52 $x145)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x28 (and $x45 $x5)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x57 (and $x64 $x28)))
 (let (($x51 (=> $x57 $x130)))
 (not $x51))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (not $x82)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (=> $x59 $x67)))
 (let (($x124 (= $x92 true)))
 (let (($x141 (= $x124 true)))
 (let (($x165 (forall ((input.ind-%var1762X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1762X)))
 (=> $x60 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1762X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var1761X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1761X)))
 (= $x60 false)))
 ))
 (let (($x89 (and $x19 $x165)))
 (let (($x112 (= $x89 true)))
 (let ((?x164 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x164)))
 (let (($x88 (= ?x125 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x88 true)))
 (let (($x71 (= $x121 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x75)))
 (let (($x101 (= ?x73 input.dst.llvm-%n)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let (($x100 (= ?x73 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x109 (= $x100 true)))
 (let (($x15 (= $x109 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x78)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x65 $x12)))
 (let (($x17 (and $x133 $x76)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x132 $x17)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x56)))))))
 (let (($x104 (and $x6 $x42)))
 (let (($x99 (= $x104 true)))
 (let (($x110 (= $x99 true)))
 (let (($x11 (= $x110 true)))
 (let ((?x72 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x72)))
 (let (($x58 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x58 true)))
 (let (($x79 (= $x80 true)))
 (let (($x81 (and $x79 $x11)))
 (let (($x107 (and $x81 $x15)))
 (let (($x94 (and $x107 $x116)))
 (let (($x122 (and $x94 $x71)))
 (let (($x102 (and $x122 $x112)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x49 $x102)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x152 (and $x27 $x41)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x108 (and $x63 $x152)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x145 (and $x161 $x108)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x5 (and $x21 $x145)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x28 (and $x30 $x5)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x57 (and $x31 $x28)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x86 (and $x34 $x57)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x142 (and $x44 $x86)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x7 (and $x53 $x142)))
 (let (($x8 (=> $x7 $x141)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (not $x82)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (=> $x59 $x67)))
 (let (($x124 (= $x92 true)))
 (let (($x141 (= $x124 true)))
 (let (($x165 (forall ((input.ind-%var1762X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1762X)))
 (=> $x60 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1762X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var1761X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1761X)))
 (= $x60 false)))
 ))
 (let (($x89 (and $x19 $x165)))
 (let (($x112 (= $x89 true)))
 (let ((?x164 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x164)))
 (let (($x88 (= ?x125 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x88 true)))
 (let (($x71 (= $x121 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x75)))
 (let (($x101 (= ?x73 input.dst.llvm-%n)))
 (let (($x105 (= $x101 true)))
 (let (($x116 (= $x105 true)))
 (let (($x100 (= ?x73 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x109 (= $x100 true)))
 (let (($x15 (= $x109 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x78)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x65 $x12)))
 (let (($x17 (and $x133 $x76)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x132 $x17)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x56)))))))
 (let (($x104 (and $x6 $x42)))
 (let (($x99 (= $x104 true)))
 (let (($x110 (= $x99 true)))
 (let (($x11 (= $x110 true)))
 (let ((?x72 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x72)))
 (let (($x58 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x58 true)))
 (let (($x79 (= $x80 true)))
 (let (($x81 (and $x79 $x11)))
 (let (($x107 (and $x81 $x15)))
 (let (($x94 (and $x107 $x116)))
 (let (($x122 (and $x94 $x71)))
 (let (($x102 (and $x122 $x112)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x49 $x102)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x152 (and $x27 $x41)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x108 (and $x63 $x152)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x145 (and $x161 $x108)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x5 (and $x21 $x145)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x28 (and $x30 $x5)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x57 (and $x31 $x28)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x86 (and $x34 $x57)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x142 (and $x44 $x86)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x7 (and $x53 $x142)))
 (let (($x8 (=> $x7 $x141)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 102 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (not $x136)))
 (let (($x127 (=> $x29 $x144)))
 (let (($x163 (= $x127 true)))
 (let (($x131 (= $x163 true)))
 (let (($x86 (forall ((input.ind-%var1768X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1768X)))
 (=> $x91 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1768X) (_ bv0 32)))))
 ))
 (let (($x89 (forall ((input.ind-%var1767X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1767X)))
 (= $x91 false)))
 ))
 (let (($x142 (and $x89 $x86)))
 (let (($x7 (= $x142 true)))
 (let ((?x125 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x125)))
 (let (($x121 (= ?x54 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x71 (= $x121 true)))
 (let (($x122 (= $x71 true)))
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x73)))
 (let (($x105 (= ?x100 input.dst.llvm-%n)))
 (let (($x116 (= $x105 true)))
 (let (($x94 (= $x116 true)))
 (let (($x109 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (= $x109 true)))
 (let (($x107 (= $x15 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x76)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x97 $x133)))
 (let (($x42 (and $x78 $x17)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x70 $x42)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x139)))))))
 (let (($x99 (and $x65 $x104)))
 (let (($x110 (= $x99 true)))
 (let (($x11 (= $x110 true)))
 (let (($x81 (= $x11 true)))
 (let ((?x18 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x18)))
 (let (($x35 (= ?x72 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x35 true)))
 (let (($x80 (= $x58 true)))
 (let (($x75 (and $x80 $x81)))
 (let (($x117 (and $x75 $x107)))
 (let (($x140 (and $x117 $x94)))
 (let (($x25 (and $x140 $x122)))
 (let (($x59 (and $x25 $x7)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x23 $x59)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x67 (and $x36 $x82)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x92 (and $x77 $x67)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x124 (and $x154 $x92)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x141 (and $x9 $x124)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x8 (and $x66 $x141)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x130 (and $x10 $x8)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x20 (and $x45 $x130)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x96 (and $x153 $x20)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x87 (and $x64 $x96)))
 (let (($x38 (=> $x87 $x131)))
 (not $x38))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (not $x136)))
 (let (($x127 (=> $x29 $x144)))
 (let (($x163 (= $x127 true)))
 (let (($x131 (= $x163 true)))
 (let (($x86 (forall ((input.ind-%var1768X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1768X)))
 (=> $x91 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1768X) (_ bv0 32)))))
 ))
 (let (($x89 (forall ((input.ind-%var1767X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1767X)))
 (= $x91 false)))
 ))
 (let (($x142 (and $x89 $x86)))
 (let (($x7 (= $x142 true)))
 (let ((?x125 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x125)))
 (let (($x121 (= ?x54 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x71 (= $x121 true)))
 (let (($x122 (= $x71 true)))
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x73)))
 (let (($x105 (= ?x100 input.dst.llvm-%n)))
 (let (($x116 (= $x105 true)))
 (let (($x94 (= $x116 true)))
 (let (($x109 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (= $x109 true)))
 (let (($x107 (= $x15 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x76)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x97 $x133)))
 (let (($x42 (and $x78 $x17)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x70 $x42)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x139)))))))
 (let (($x99 (and $x65 $x104)))
 (let (($x110 (= $x99 true)))
 (let (($x11 (= $x110 true)))
 (let (($x81 (= $x11 true)))
 (let ((?x18 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x18)))
 (let (($x35 (= ?x72 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x35 true)))
 (let (($x80 (= $x58 true)))
 (let (($x75 (and $x80 $x81)))
 (let (($x117 (and $x75 $x107)))
 (let (($x140 (and $x117 $x94)))
 (let (($x25 (and $x140 $x122)))
 (let (($x59 (and $x25 $x7)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x23 $x59)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x67 (and $x36 $x82)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x92 (and $x77 $x67)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x124 (and $x154 $x92)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x141 (and $x9 $x124)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x8 (and $x66 $x141)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x130 (and $x10 $x8)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x20 (and $x45 $x130)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x96 (and $x153 $x20)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x87 (and $x64 $x96)))
 (let (($x38 (=> $x87 $x131)))
 (not $x38))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 102 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x51 true)))
 (let (($x13 (= $x37 true)))
 (let (($x163 (forall ((input.ind-%var1774X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1774X)))
 (=> $x82 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1774X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1773X)))
 (= $x82 false)))
 ))
 (let (($x131 (and $x141 $x163)))
 (let (($x38 (= $x131 true)))
 (let ((?x91 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x91)))
 (let (($x152 (= ?x165 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x152 true)))
 (let (($x57 (= $x28 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x140)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x117 $x116)))
 (let (($x125 (and $x94 $x164)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x76 $x125)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x81)))))))
 (let (($x88 (and $x107 $x54)))
 (let (($x121 (= $x88 true)))
 (let (($x71 (= $x121 true)))
 (let (($x122 (= $x71 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x139)))
 (let (($x98 (= ?x69 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (= $x98 true)))
 (let (($x97 (= $x70 true)))
 (let (($x61 (= ?x69 input.dst.llvm-%n)))
 (let (($x6 (= $x61 true)))
 (let (($x24 (= $x6 true)))
 (let ((?x93 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x93)))
 (let (($x68 (= ?x132 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x68 true)))
 (let (($x74 (= $x56 true)))
 (let (($x72 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (not $x72)))
 (let (($x35 (= $x50 true)))
 (let (($x58 (= $x35 true)))
 (let (($x80 (= $x58 true)))
 (let (($x84 (and $x80 $x74)))
 (let (($x65 (and $x84 $x24)))
 (let (($x32 (and $x65 $x97)))
 (let (($x25 (and $x32 $x122)))
 (let (($x86 (and $x25 $x57)))
 (let (($x14 (and $x86 $x38)))
 (let (($x49 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (and $x49 $x14)))
 (let (($x33 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (and $x33 $x22)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x108 (and $x63 $x48)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x41 (and $x161 $x108)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x60 (and $x21 $x41)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x157 (and $x30 $x60)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x137 (and $x31 $x157)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x145 (and $x52 $x137)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x102 (and $x44 $x145)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x5 (and $x26 $x102)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x40 (and $x53 $x5)))
 (let (($x143 (=> $x40 $x13)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x51 true)))
 (let (($x13 (= $x37 true)))
 (let (($x163 (forall ((input.ind-%var1774X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1774X)))
 (=> $x82 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1774X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1773X)))
 (= $x82 false)))
 ))
 (let (($x131 (and $x141 $x163)))
 (let (($x38 (= $x131 true)))
 (let ((?x91 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x91)))
 (let (($x152 (= ?x165 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x152 true)))
 (let (($x57 (= $x28 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x140)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x117 $x116)))
 (let (($x125 (and $x94 $x164)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x76 $x125)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x81)))))))
 (let (($x88 (and $x107 $x54)))
 (let (($x121 (= $x88 true)))
 (let (($x71 (= $x121 true)))
 (let (($x122 (= $x71 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x139)))
 (let (($x98 (= ?x69 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (= $x98 true)))
 (let (($x97 (= $x70 true)))
 (let (($x61 (= ?x69 input.dst.llvm-%n)))
 (let (($x6 (= $x61 true)))
 (let (($x24 (= $x6 true)))
 (let ((?x93 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x93)))
 (let (($x68 (= ?x132 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x68 true)))
 (let (($x74 (= $x56 true)))
 (let (($x72 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (not $x72)))
 (let (($x35 (= $x50 true)))
 (let (($x58 (= $x35 true)))
 (let (($x80 (= $x58 true)))
 (let (($x84 (and $x80 $x74)))
 (let (($x65 (and $x84 $x24)))
 (let (($x32 (and $x65 $x97)))
 (let (($x25 (and $x32 $x122)))
 (let (($x86 (and $x25 $x57)))
 (let (($x14 (and $x86 $x38)))
 (let (($x49 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (and $x49 $x14)))
 (let (($x33 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (and $x33 $x22)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x108 (and $x63 $x48)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x41 (and $x161 $x108)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x60 (and $x21 $x41)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x157 (and $x30 $x60)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x137 (and $x31 $x157)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x145 (and $x52 $x137)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x102 (and $x44 $x145)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x5 (and $x26 $x102)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x40 (and $x53 $x5)))
 (let (($x143 (=> $x40 $x13)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494356/query
