==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x10 $x8)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x10 $x8)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491039/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x392 (= true false)))
 (let (($x393 (= $x392 true)))
 (let (($x383 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1005X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var1005X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x25 (_ bv0 32))))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x373 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> (and $x366 $x358) (= ?x373 ?x337)))))))))))
 ))
 (let (($x368 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1004X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1004X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1004X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> $x366 (= $x358 $x321))))))))
 ))
 (let (($x353 (forall ((input.ind-%var1002X (_ BitVec 32)) )(let (($x306 (= input.ind-%var1002X input.spec-%var-x-0)))
 (let (($x348 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1002X)))
 (= $x348 $x306))))
 ))
 (let (($x385 (and (and $x353 $x368) $x383)))
 (let (($x386 (= $x385 true)))
 (let (($x341 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var985X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var985X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x25 (_ bv0 32))))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x330 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> (and $x323 $x313) (= ?x330 ?x337)))))))))))
 ))
 (let (($x325 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var984X (_ BitVec 32)) )(let (($x149 (= input.ind-%var984X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var984X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> $x323 (= $x313 $x321))))))))
 ))
 (let (($x308 (forall ((input.ind-%var982X (_ BitVec 32)) )(let (($x306 (= input.ind-%var982X input.spec-%var-x-0)))
 (let (($x302 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var982X)))
 (= $x302 $x306))))
 ))
 (let (($x343 (and (and $x308 $x325) $x341)))
 (let (($x344 (= $x343 true)))
 (let (($x296 (forall ((input.ind-%var965X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var965X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x25 (_ bv0 32))))
 (let ((?x288 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var965X)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var965X)))
 (=> $x279 (= ?x288 ?x165))))))))
 ))
 (let (($x284 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x149 (= input.ind-%var964X input.spec-%var-y-0)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var964X)))
 (= $x279 $x149))))
 ))
 (let (($x297 (and $x284 $x296)))
 (let (($x298 (= $x297 true)))
 (let (($x273 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var955X)))
 (=> $x259 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var955X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var954X)))
 (= $x259 false)))
 ))
 (let (($x274 (and $x263 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x252 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var943X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var943X)))
 (let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> (and $x238 $x233) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var941X input.ind-%var943X) (_ bv0 32))))))
 ))
 (let (($x240 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var942X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> $x238 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var942X) false))))
 ))
 (let (($x226 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var940X)))
 (= $x222 false)))
 ))
 (let (($x254 (and (and $x226 $x240) $x252)))
 (let (($x255 (= $x254 true)))
 (let (($x216 (forall ((input.ind-%var915X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var915X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x25 (_ bv0 32))))
 (let (($x10 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x10 ?x165 (_ bv0 32))))
 (let ((?x207 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var915X)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var915X)))
 (=> $x197 (= ?x207 ?x166))))))))))
 ))
 (let (($x203 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x149 (= input.ind-%var914X input.spec-%var-y-0)))
 (let (($x10 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x10 $x149 false)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var914X)))
 (= $x197 $x150))))))
 ))
 (let (($x217 (and $x203 $x216)))
 (let (($x218 (= $x217 true)))
 (let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x30 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x30 ?x25 (_ bv0 32))))
 (let (($x10 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x48 (ite $x10 ?x55 (_ bv0 32))))
 (let (($x188 (= input.spec-%tmpvar-6.L2%13%d.2 ?x48)))
 (let (($x184 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x189 (=> $x184 $x188)))
 (let (($x179 (ite $x10 $x30 false)))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x180 (_ bv1 32))))
 (let (($x186 (= $x184 $x185)))
 (let (($x36 (= false false)))
 (let (($x178 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x183 (=> $x178 $x36)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x178 $x181)))
 (let (($x192 (and (and (and $x182 $x183) $x186) $x189)))
 (let (($x193 (= $x192 true)))
 (let (($x170 (forall ((input.ind-%var895X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var895X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x25 (_ bv0 32))))
 (let (($x10 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x10 ?x165 (_ bv0 32))))
 (let ((?x158 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var895X)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var895X)))
 (let (($x136 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x136 $x143) (= ?x158 ?x166)))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var894X (_ BitVec 32)) )(let (($x149 (= input.ind-%var894X input.spec-%var-y-0)))
 (let (($x10 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x10 $x149 false)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var894X)))
 (let (($x136 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x136 (= $x143 $x150))))))))
 ))
 (let ((?x133 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x133 (_ bv1 32))))
 (let (($x136 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x138 (= $x136 $x137)))
 (let (($x134 (= ?x133 (_ bv0 32))))
 (let (($x131 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x135 (= $x131 $x134)))
 (let (($x132 (=> $x131 $x36)))
 (let (($x174 (and (and (and (and $x132 $x135) $x138) $x153) $x170)))
 (let (($x175 (= $x174 true)))
 (let (($x125 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x120 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x106)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x97 $x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x96 $x100)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x58 $x57)))
 (let (($x91 (not $x59)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x87 $x88)))
 (let (($x93 (and (not $x90) $x91)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x75 $x83)))
 (let (($x13 (not $x61)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x50 $x78)))
 (let (($x74 (and (not $x9) $x13)))
 (let (($x113 (and (and (and (and (and (and $x74 $x93) $x94) $x95) $x101) $x103) $x105)))
 (let (($x114 (and $x113 $x107)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x20 (or false (or false (and (and true (or $x73 $x84)) (or $x82 $x89))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x115 (and $x26 $x114)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x46 (concat ?x68 (concat ?x76 ?x60)))))
 (let (($x41 (= ?x49 input.dst.llvm-%y)))
 (let (($x45 (= $x41 true)))
 (let (($x11 (= $x45 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x23 (concat ?x86 (concat ?x24 ?x33)))))
 (let (($x19 (= ?x27 input.dst.llvm-%x)))
 (let (($x38 (= $x19 true)))
 (let (($x52 (= $x38 true)))
 (let (($x42 (and $x52 $x11)))
 (let (($x119 (and $x42 $x118)))
 (let (($x124 (and $x119 $x123)))
 (let (($x129 (and $x124 $x128)))
 (let (($x176 (and $x129 $x175)))
 (let (($x194 (and $x176 $x193)))
 (let (($x219 (and $x194 $x218)))
 (let (($x256 (and $x219 $x255)))
 (let (($x276 (and $x256 $x275)))
 (let (($x299 (and $x276 $x298)))
 (let (($x345 (and $x299 $x344)))
 (let (($x387 (and $x345 $x386)))
 (let (($x29 (= ?x25 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x388 (and $x29 $x387)))
 (let (($x389 (and $x36 $x388)))
 (let (($x77 (= input.spec-%var-m2-0.L2%18%bbentry ?x48)))
 (let (($x390 (and $x77 $x389)))
 (let (($x391 (and $x36 $x390)))
 (let (($x394 (=> $x391 $x393)))
 (not $x394))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x392 (= true false)))
 (let (($x393 (= $x392 true)))
 (let (($x383 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1005X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var1005X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x25 (_ bv0 32))))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x373 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> (and $x366 $x358) (= ?x373 ?x337)))))))))))
 ))
 (let (($x368 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1004X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1004X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1004X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> $x366 (= $x358 $x321))))))))
 ))
 (let (($x353 (forall ((input.ind-%var1002X (_ BitVec 32)) )(let (($x306 (= input.ind-%var1002X input.spec-%var-x-0)))
 (let (($x348 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1002X)))
 (= $x348 $x306))))
 ))
 (let (($x385 (and (and $x353 $x368) $x383)))
 (let (($x386 (= $x385 true)))
 (let (($x341 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var985X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var985X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x25 (_ bv0 32))))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x330 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> (and $x323 $x313) (= ?x330 ?x337)))))))))))
 ))
 (let (($x325 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var984X (_ BitVec 32)) )(let (($x149 (= input.ind-%var984X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var984X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> $x323 (= $x313 $x321))))))))
 ))
 (let (($x308 (forall ((input.ind-%var982X (_ BitVec 32)) )(let (($x306 (= input.ind-%var982X input.spec-%var-x-0)))
 (let (($x302 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var982X)))
 (= $x302 $x306))))
 ))
 (let (($x343 (and (and $x308 $x325) $x341)))
 (let (($x344 (= $x343 true)))
 (let (($x296 (forall ((input.ind-%var965X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var965X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x25 (_ bv0 32))))
 (let ((?x288 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var965X)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var965X)))
 (=> $x279 (= ?x288 ?x165))))))))
 ))
 (let (($x284 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x149 (= input.ind-%var964X input.spec-%var-y-0)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var964X)))
 (= $x279 $x149))))
 ))
 (let (($x297 (and $x284 $x296)))
 (let (($x298 (= $x297 true)))
 (let (($x273 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var955X)))
 (=> $x259 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var955X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var954X)))
 (= $x259 false)))
 ))
 (let (($x274 (and $x263 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x252 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var943X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var943X)))
 (let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> (and $x238 $x233) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var941X input.ind-%var943X) (_ bv0 32))))))
 ))
 (let (($x240 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var942X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> $x238 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var942X) false))))
 ))
 (let (($x226 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var940X)))
 (= $x222 false)))
 ))
 (let (($x254 (and (and $x226 $x240) $x252)))
 (let (($x255 (= $x254 true)))
 (let (($x216 (forall ((input.ind-%var915X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var915X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x25 (_ bv0 32))))
 (let (($x10 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x10 ?x165 (_ bv0 32))))
 (let ((?x207 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var915X)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var915X)))
 (=> $x197 (= ?x207 ?x166))))))))))
 ))
 (let (($x203 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x149 (= input.ind-%var914X input.spec-%var-y-0)))
 (let (($x10 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x10 $x149 false)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var914X)))
 (= $x197 $x150))))))
 ))
 (let (($x217 (and $x203 $x216)))
 (let (($x218 (= $x217 true)))
 (let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x30 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x30 ?x25 (_ bv0 32))))
 (let (($x10 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x48 (ite $x10 ?x55 (_ bv0 32))))
 (let (($x188 (= input.spec-%tmpvar-6.L2%13%d.2 ?x48)))
 (let (($x184 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x189 (=> $x184 $x188)))
 (let (($x179 (ite $x10 $x30 false)))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x180 (_ bv1 32))))
 (let (($x186 (= $x184 $x185)))
 (let (($x36 (= false false)))
 (let (($x178 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x183 (=> $x178 $x36)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x178 $x181)))
 (let (($x192 (and (and (and $x182 $x183) $x186) $x189)))
 (let (($x193 (= $x192 true)))
 (let (($x170 (forall ((input.ind-%var895X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var895X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x25 (_ bv0 32))))
 (let (($x10 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x10 ?x165 (_ bv0 32))))
 (let ((?x158 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var895X)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var895X)))
 (let (($x136 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x136 $x143) (= ?x158 ?x166)))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var894X (_ BitVec 32)) )(let (($x149 (= input.ind-%var894X input.spec-%var-y-0)))
 (let (($x10 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x10 $x149 false)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var894X)))
 (let (($x136 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x136 (= $x143 $x150))))))))
 ))
 (let ((?x133 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x133 (_ bv1 32))))
 (let (($x136 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x138 (= $x136 $x137)))
 (let (($x134 (= ?x133 (_ bv0 32))))
 (let (($x131 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x135 (= $x131 $x134)))
 (let (($x132 (=> $x131 $x36)))
 (let (($x174 (and (and (and (and $x132 $x135) $x138) $x153) $x170)))
 (let (($x175 (= $x174 true)))
 (let (($x125 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x120 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x106)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x97 $x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x96 $x100)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x58 $x57)))
 (let (($x91 (not $x59)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x87 $x88)))
 (let (($x93 (and (not $x90) $x91)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x75 $x83)))
 (let (($x13 (not $x61)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x50 $x78)))
 (let (($x74 (and (not $x9) $x13)))
 (let (($x113 (and (and (and (and (and (and $x74 $x93) $x94) $x95) $x101) $x103) $x105)))
 (let (($x114 (and $x113 $x107)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x20 (or false (or false (and (and true (or $x73 $x84)) (or $x82 $x89))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x115 (and $x26 $x114)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x46 (concat ?x68 (concat ?x76 ?x60)))))
 (let (($x41 (= ?x49 input.dst.llvm-%y)))
 (let (($x45 (= $x41 true)))
 (let (($x11 (= $x45 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x23 (concat ?x86 (concat ?x24 ?x33)))))
 (let (($x19 (= ?x27 input.dst.llvm-%x)))
 (let (($x38 (= $x19 true)))
 (let (($x52 (= $x38 true)))
 (let (($x42 (and $x52 $x11)))
 (let (($x119 (and $x42 $x118)))
 (let (($x124 (and $x119 $x123)))
 (let (($x129 (and $x124 $x128)))
 (let (($x176 (and $x129 $x175)))
 (let (($x194 (and $x176 $x193)))
 (let (($x219 (and $x194 $x218)))
 (let (($x256 (and $x219 $x255)))
 (let (($x276 (and $x256 $x275)))
 (let (($x299 (and $x276 $x298)))
 (let (($x345 (and $x299 $x344)))
 (let (($x387 (and $x345 $x386)))
 (let (($x29 (= ?x25 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x388 (and $x29 $x387)))
 (let (($x389 (and $x36 $x388)))
 (let (($x77 (= input.spec-%var-m2-0.L2%18%bbentry ?x48)))
 (let (($x390 (and $x77 $x389)))
 (let (($x391 (and $x36 $x390)))
 (let (($x394 (=> $x391 $x393)))
 (not $x394))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0f41e1fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd7020838)
  (define-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32)
    #x20020684)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd702083b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0f41e1ff)
  (define-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32)
    #x20020684)
  (define-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32)
    #x20020684)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x00000470)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x00000470)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0f41e1fc)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x20020214)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x20020214)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd7020838)
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1!136 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x20020214) true
      false))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1!135 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000470) #x20020684
      #x00000005))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L2%13%d.1.1!135 (k!124 x!0)))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1!134 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000470) true
      false))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L2%13%d.0.1!134 (k!124 x!0)))
  (define-fun k!128 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd702083a) #x02
    (ite (= x!0 #x0f41e1fc) #x70
    (ite (= x!0 #x0f41e1ff) #x00
    (ite (= x!0 #x0f41e1fe) #x00
    (ite (= x!0 #xd7020839) #x02
    (ite (= x!0 #xd702083b) #x20
    (ite (= x!0 #xd7020838) #x14
      #x04))))))))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1!141 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000470) #x20020684
      #x00000006))
  (define-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000470) true
      false))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x20020214) #x20020214
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1!140 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) true
      false))
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.1.1.0.1!140 (k!132 x!0) (k!131 x!1)))
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L2%8%d.2.1.1!141 (k!123 x!0)))
  (define-fun k!129 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1!144 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000470) true
      false))
  (define-fun k!130 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x20020214) #x20020214
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1!133 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) #x20020684
      #x00000004))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%8%d.1.1.1.1!133 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L2%8%d.2.0.1!144 (k!123 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1!137 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) true
      false))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.1.1.0.1!137 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1!142 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) #x20020684
      #x00000007))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.0.1!136 (k!130 x!0)))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1!139 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x20020214) true
      false))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.0.1!139 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L2%8%d.0.1!138 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1!143 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000470) #x20020684
      #x00000008))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L2%8%d.1.1.1.1!142 (k!132 x!0) (k!131 x!1)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L2%8%d.1.1!143 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x36022de0)
  (define-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32)
    #x00008000)
  (define-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00008600)
  (define-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32)
    #x53160500)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x36022de3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00008603)
  (define-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32)
    #x53160500)
  (define-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32)
    #x53160500)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x50440000)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x50440000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00008600)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x02d20500)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x02d20500)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x36022de0)
  (define-fun k!128 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1!133 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x02d20500) (= x!1 #x50440000)))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1!143 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x02d20500) (= x!1 #x50440000)) #x53160500
      #x00000008))
  (define-fun k!130 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x02d20500) #x02d20500
      #x00000000))
  (define-fun k!129 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.1.1.0.1!133 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x50440000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1!134 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x02d20500) (= x!1 #x50440000)) #x53160500
      #x00000004))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1!139 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x02d20500))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x02d20500) #x02d20500
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.0.1!139 (k!132 x!0)))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1!140 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x50440000) #x53160500
      #x00000007))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L2%13%d.1.1!140 (k!124 x!0)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L2%8%d.0.1!138 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1!141 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x02d20500) (= x!1 #x50440000)))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.1.1.0.1!141 (k!132 x!0) (k!131 x!1)))
  (define-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1!142 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x50440000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1!144 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x02d20500))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L2%8%d.1.1.1.1!143 (k!132 x!0) (k!131 x!1)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.0.1!144 (k!130 x!0)))
  (define-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1!137 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x50440000) #x53160500
      #x00000006))
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x36022de3) #x02
    (ite (= x!0 #x00008603) #x50
    (ite (= x!0 #x36022de2) #xd2
    (ite (= x!0 #x00008602) #x44
    (ite (= x!0 #x36022de1) #x05
      #x00))))))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1!136 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x50440000) #x53160500
      #x00000005))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1!135 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x50440000))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L2%13%d.0.1!135 (k!124 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%8%d.1.1.1.1!134 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L2%8%d.1.1!136 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L2%8%d.2.1.1!137 (k!123 x!0)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L2%8%d.2.0.1!142 (k!123 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491039/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x207 (ite $x37 $x35 false)))
 (let ((?x214 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x214 (_ bv1 32))))
 (let (($x215 (= ?x214 (_ bv0 32))))
 (let (($x371 (or $x215 $x219)))
 (let ((?x171 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x171 (_ bv1 32))))
 (let (($x379 (and $x172 $x371)))
 (let (($x136 (= ?x171 (_ bv0 32))))
 (let (($x140 (or $x136 $x379)))
 (let (($x230 (= $x140 true)))
 (let (($x396 (= $x230 true)))
 (let (($x351 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2001X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var2001X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x34 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x265 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> (and $x236 $x211) (= ?x265 ?x346)))))))))))
 ))
 (let (($x242 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2000X (_ BitVec 32)) )(let (($x158 (= input.ind-%var2000X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2000X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> $x236 (= $x211 $x300))))))))
 ))
 (let (($x155 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1998X input.spec-%var-x-0)))
 (let (($x146 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1998X)))
 (= $x146 $x257))))
 ))
 (let (($x328 (and (and $x155 $x242) $x351)))
 (let (($x336 (= $x328 true)))
 (let (($x361 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1985X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1985X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x34 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x349 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> (and $x326 $x290) (= ?x349 ?x346)))))))))))
 ))
 (let (($x315 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1984X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1984X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1984X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> $x326 (= $x290 $x300))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1982X input.spec-%var-x-0)))
 (let (($x221 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1982X)))
 (= $x221 $x257))))
 ))
 (let (($x375 (and (and $x289 $x315) $x361)))
 (let (($x376 (= $x375 true)))
 (let (($x241 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1969X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x34 (_ bv0 32))))
 (let ((?x209 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var1969X)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1969X)))
 (=> $x160 (= ?x209 ?x190))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1968X input.spec-%var-y-0)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1968X)))
 (= $x160 $x158))))
 ))
 (let (($x244 (and $x204 $x241)))
 (let (($x260 (= $x244 true)))
 (let (($x144 (forall ((input.ind-%var1960X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1960X)))
 (= $x385 false)))
 ))
 (let (($x394 (forall ((input.ind-%var1961X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1961X)))
 (=> $x385 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var1961X) (_ bv0 32)))))
 ))
 (let (($x159 (and $x394 $x144)))
 (let (($x154 (= $x159 true)))
 (let (($x368 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1954X (_ BitVec 32)) )(let (($x343 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> $x343 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1954X) false))))
 ))
 (let (($x348 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1955X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1955X)))
 (let (($x343 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> (and $x343 $x324) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var1953X input.ind-%var1955X) (_ bv0 32))))))
 ))
 (let (($x307 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x298 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1952X)))
 (= $x298 false)))
 ))
 (let (($x381 (and (and $x307 $x348) $x368)))
 (let (($x373 (= $x381 true)))
 (let (($x284 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1942X input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x37 $x158 false)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1942X)))
 (= $x245 $x165))))))
 ))
 (let (($x272 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1943X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x34 (_ bv0 32))))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x37 ?x190 (_ bv0 32))))
 (let ((?x252 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var1943X)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1943X)))
 (=> $x245 (= ?x252 ?x184))))))))))
 ))
 (let (($x288 (and $x272 $x284)))
 (let (($x294 (= $x288 true)))
 (let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x35 ?x34 (_ bv0 32))))
 (let ((?x14 (ite $x37 ?x55 (_ bv0 32))))
 (let (($x226 (= input.spec-%tmpvar-6.L2%13%d.2 ?x14)))
 (let (($x218 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x232 (=> $x218 $x226)))
 (let (($x222 (= $x218 $x219)))
 (let (($x30 (= false false)))
 (let (($x203 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x217 (=> $x203 $x30)))
 (let (($x216 (= $x203 $x215)))
 (let (($x237 (and (and (and $x216 $x217) $x222) $x232)))
 (let (($x239 (= $x237 true)))
 (let (($x187 (forall ((input.ind-%var1925X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1925X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x34 (_ bv0 32))))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x37 ?x190 (_ bv0 32))))
 (let ((?x177 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var1925X)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1925X)))
 (let (($x138 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x138 $x150) (= ?x177 ?x184)))))))))))
 ))
 (let (($x169 (forall ((input.ind-%var1924X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1924X input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x37 $x158 false)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1924X)))
 (let (($x138 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x138 (= $x150 $x165))))))))
 ))
 (let (($x138 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x142 (= $x138 $x172)))
 (let (($x134 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x137 (= $x134 $x136)))
 (let (($x135 (=> $x134 $x30)))
 (let (($x193 (and (and (and (and $x135 $x137) $x142) $x169) $x187)))
 (let (($x194 (= $x193 true)))
 (let (($x129 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x36 (= $x131 true)))
 (let (($x124 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x105)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x112)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x99)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (and $x98 $x100)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x97 $x101)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x108 (and $x91 $x93)))
 (let (($x94 (not $x108)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x58 $x57)))
 (let (($x95 (and (not $x59) $x94)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x13 $x74)))
 (let (($x88 (not $x87)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x39 $x73)))
 (let (($x92 (and (not $x61) $x88)))
 (let (($x117 (and (and (and (and (and (and $x92 $x95) $x110) $x96) $x111) $x103) $x104)))
 (let (($x118 (and $x117 $x113)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x64 (or false (or false (and (and true (or $x82 $x66)) (or $x20 $x26))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x64)))
 (let (($x119 (and $x83 $x118)))
 (let (($x120 (= $x119 true)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x41 (concat ?x81 (concat ?x76 ?x68)))))
 (let (($x42 (= ?x45 input.dst.llvm-%y)))
 (let (($x62 (= $x42 true)))
 (let (($x80 (= $x62 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x54 (concat ?x33 (concat ?x86 ?x23)))))
 (let (($x52 (= ?x19 input.dst.llvm-%x)))
 (let (($x63 (= $x52 true)))
 (let (($x67 (= $x63 true)))
 (let (($x16 (and $x67 $x80)))
 (let (($x123 (and $x16 $x122)))
 (let (($x128 (and $x123 $x127)))
 (let (($x132 (and $x128 $x36)))
 (let (($x197 (and $x132 $x194)))
 (let (($x240 (and $x197 $x239)))
 (let (($x295 (and $x240 $x294)))
 (let (($x380 (and $x295 $x373)))
 (let (($x157 (and $x380 $x154)))
 (let (($x268 (and $x157 $x260)))
 (let (($x377 (and $x268 $x376)))
 (let (($x363 (and $x377 $x336)))
 (let (($x10 (= ?x34 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x378 (and $x10 $x363)))
 (let (($x356 (and $x30 $x378)))
 (let (($x7 (= input.spec-%var-m2-0.L2%18%bbentry ?x14)))
 (let (($x364 (and $x7 $x356)))
 (let (($x370 (and $x30 $x364)))
 (let (($x397 (=> $x370 $x396)))
 (not $x397)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x207 (ite $x37 $x35 false)))
 (let ((?x214 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x214 (_ bv1 32))))
 (let (($x215 (= ?x214 (_ bv0 32))))
 (let (($x371 (or $x215 $x219)))
 (let ((?x171 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x171 (_ bv1 32))))
 (let (($x379 (and $x172 $x371)))
 (let (($x136 (= ?x171 (_ bv0 32))))
 (let (($x140 (or $x136 $x379)))
 (let (($x230 (= $x140 true)))
 (let (($x396 (= $x230 true)))
 (let (($x351 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2001X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var2001X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x34 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x265 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> (and $x236 $x211) (= ?x265 ?x346)))))))))))
 ))
 (let (($x242 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2000X (_ BitVec 32)) )(let (($x158 (= input.ind-%var2000X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2000X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> $x236 (= $x211 $x300))))))))
 ))
 (let (($x155 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1998X input.spec-%var-x-0)))
 (let (($x146 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1998X)))
 (= $x146 $x257))))
 ))
 (let (($x328 (and (and $x155 $x242) $x351)))
 (let (($x336 (= $x328 true)))
 (let (($x361 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1985X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1985X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x34 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x349 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> (and $x326 $x290) (= ?x349 ?x346)))))))))))
 ))
 (let (($x315 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1984X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1984X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1984X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> $x326 (= $x290 $x300))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1982X input.spec-%var-x-0)))
 (let (($x221 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1982X)))
 (= $x221 $x257))))
 ))
 (let (($x375 (and (and $x289 $x315) $x361)))
 (let (($x376 (= $x375 true)))
 (let (($x241 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1969X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x34 (_ bv0 32))))
 (let ((?x209 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var1969X)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1969X)))
 (=> $x160 (= ?x209 ?x190))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1968X input.spec-%var-y-0)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1968X)))
 (= $x160 $x158))))
 ))
 (let (($x244 (and $x204 $x241)))
 (let (($x260 (= $x244 true)))
 (let (($x144 (forall ((input.ind-%var1960X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1960X)))
 (= $x385 false)))
 ))
 (let (($x394 (forall ((input.ind-%var1961X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1961X)))
 (=> $x385 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var1961X) (_ bv0 32)))))
 ))
 (let (($x159 (and $x394 $x144)))
 (let (($x154 (= $x159 true)))
 (let (($x368 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1954X (_ BitVec 32)) )(let (($x343 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> $x343 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1954X) false))))
 ))
 (let (($x348 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1955X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1955X)))
 (let (($x343 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> (and $x343 $x324) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var1953X input.ind-%var1955X) (_ bv0 32))))))
 ))
 (let (($x307 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x298 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1952X)))
 (= $x298 false)))
 ))
 (let (($x381 (and (and $x307 $x348) $x368)))
 (let (($x373 (= $x381 true)))
 (let (($x284 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1942X input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x37 $x158 false)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1942X)))
 (= $x245 $x165))))))
 ))
 (let (($x272 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1943X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x34 (_ bv0 32))))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x37 ?x190 (_ bv0 32))))
 (let ((?x252 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var1943X)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1943X)))
 (=> $x245 (= ?x252 ?x184))))))))))
 ))
 (let (($x288 (and $x272 $x284)))
 (let (($x294 (= $x288 true)))
 (let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x35 ?x34 (_ bv0 32))))
 (let ((?x14 (ite $x37 ?x55 (_ bv0 32))))
 (let (($x226 (= input.spec-%tmpvar-6.L2%13%d.2 ?x14)))
 (let (($x218 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x232 (=> $x218 $x226)))
 (let (($x222 (= $x218 $x219)))
 (let (($x30 (= false false)))
 (let (($x203 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x217 (=> $x203 $x30)))
 (let (($x216 (= $x203 $x215)))
 (let (($x237 (and (and (and $x216 $x217) $x222) $x232)))
 (let (($x239 (= $x237 true)))
 (let (($x187 (forall ((input.ind-%var1925X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1925X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x34 (_ bv0 32))))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x37 ?x190 (_ bv0 32))))
 (let ((?x177 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var1925X)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1925X)))
 (let (($x138 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x138 $x150) (= ?x177 ?x184)))))))))))
 ))
 (let (($x169 (forall ((input.ind-%var1924X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1924X input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x37 $x158 false)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1924X)))
 (let (($x138 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x138 (= $x150 $x165))))))))
 ))
 (let (($x138 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x142 (= $x138 $x172)))
 (let (($x134 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x137 (= $x134 $x136)))
 (let (($x135 (=> $x134 $x30)))
 (let (($x193 (and (and (and (and $x135 $x137) $x142) $x169) $x187)))
 (let (($x194 (= $x193 true)))
 (let (($x129 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x36 (= $x131 true)))
 (let (($x124 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x125 (= $x124 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x105)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x112)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x99)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (and $x98 $x100)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x97 $x101)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x108 (and $x91 $x93)))
 (let (($x94 (not $x108)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x58 $x57)))
 (let (($x95 (and (not $x59) $x94)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x13 $x74)))
 (let (($x88 (not $x87)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x39 $x73)))
 (let (($x92 (and (not $x61) $x88)))
 (let (($x117 (and (and (and (and (and (and $x92 $x95) $x110) $x96) $x111) $x103) $x104)))
 (let (($x118 (and $x117 $x113)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x64 (or false (or false (and (and true (or $x82 $x66)) (or $x20 $x26))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x64)))
 (let (($x119 (and $x83 $x118)))
 (let (($x120 (= $x119 true)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x41 (concat ?x81 (concat ?x76 ?x68)))))
 (let (($x42 (= ?x45 input.dst.llvm-%y)))
 (let (($x62 (= $x42 true)))
 (let (($x80 (= $x62 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x54 (concat ?x33 (concat ?x86 ?x23)))))
 (let (($x52 (= ?x19 input.dst.llvm-%x)))
 (let (($x63 (= $x52 true)))
 (let (($x67 (= $x63 true)))
 (let (($x16 (and $x67 $x80)))
 (let (($x123 (and $x16 $x122)))
 (let (($x128 (and $x123 $x127)))
 (let (($x132 (and $x128 $x36)))
 (let (($x197 (and $x132 $x194)))
 (let (($x240 (and $x197 $x239)))
 (let (($x295 (and $x240 $x294)))
 (let (($x380 (and $x295 $x373)))
 (let (($x157 (and $x380 $x154)))
 (let (($x268 (and $x157 $x260)))
 (let (($x377 (and $x268 $x376)))
 (let (($x363 (and $x377 $x336)))
 (let (($x10 (= ?x34 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x378 (and $x10 $x363)))
 (let (($x356 (and $x30 $x378)))
 (let (($x7 (= input.spec-%var-m2-0.L2%18%bbentry ?x14)))
 (let (($x364 (and $x7 $x356)))
 (let (($x370 (and $x30 $x364)))
 (let (($x397 (=> $x370 $x396)))
 (not $x397)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491039/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x40 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x40 ?x37 (_ bv0 32))))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x44 (ite $x25 ?x55 (_ bv0 32))))
 (let ((?x248 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x269 (= ?x248 ?x44)))
 (let (($x318 (= $x269 true)))
 (let (($x369 (= $x318 true)))
 (let (($x277 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2183X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x187 (= input.ind-%var2183X input.spec-%var-y-0)))
 (let ((?x225 (ite $x187 ?x37 (_ bv0 32))))
 (let (($x353 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let ((?x347 (ite $x353 ?x225 (_ bv0 32))))
 (let ((?x390 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x175 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x338 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> (and $x338 $x175) (= ?x390 ?x347)))))))))))
 ))
 (let (($x358 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2182X (_ BitVec 32)) )(let (($x187 (= input.ind-%var2182X input.spec-%var-y-0)))
 (let (($x353 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let (($x72 (ite $x353 $x187 false)))
 (let (($x175 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2182X)))
 (let (($x338 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> $x338 (= $x175 $x72))))))))
 ))
 (let (($x357 (forall ((input.ind-%var2180X (_ BitVec 32)) )(let (($x352 (= input.ind-%var2180X input.spec-%var-x-0)))
 (let (($x173 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2180X)))
 (= $x173 $x352))))
 ))
 (let (($x162 (and (and $x357 $x358) $x277)))
 (let (($x317 (= $x162 true)))
 (let (($x205 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2167X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x187 (= input.ind-%var2167X input.spec-%var-y-0)))
 (let ((?x225 (ite $x187 ?x37 (_ bv0 32))))
 (let (($x353 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let ((?x347 (ite $x353 ?x225 (_ bv0 32))))
 (let ((?x303 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x199 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x285 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> (and $x285 $x199) (= ?x303 ?x347)))))))))))
 ))
 (let (($x264 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2166X (_ BitVec 32)) )(let (($x187 (= input.ind-%var2166X input.spec-%var-y-0)))
 (let (($x353 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let (($x72 (ite $x353 $x187 false)))
 (let (($x199 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2166X)))
 (let (($x285 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> $x285 (= $x199 $x72))))))))
 ))
 (let (($x323 (forall ((input.ind-%var2164X (_ BitVec 32)) )(let (($x352 (= input.ind-%var2164X input.spec-%var-x-0)))
 (let (($x275 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2164X)))
 (= $x275 $x352))))
 ))
 (let (($x281 (and (and $x323 $x264) $x205)))
 (let (($x213 (= $x281 true)))
 (let (($x179 (forall ((input.ind-%var2151X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x187 (= input.ind-%var2151X input.spec-%var-y-0)))
 (let ((?x225 (ite $x187 ?x37 (_ bv0 32))))
 (let ((?x334 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2151X)))
 (let (($x299 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2151X)))
 (=> $x299 (= ?x334 ?x225))))))))
 ))
 (let (($x161 (forall ((input.ind-%var2150X (_ BitVec 32)) )(let (($x187 (= input.ind-%var2150X input.spec-%var-y-0)))
 (let (($x299 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2150X)))
 (= $x299 $x187))))
 ))
 (let (($x180 (and $x161 $x179)))
 (let (($x354 (= $x180 true)))
 (let (($x46 (forall ((input.ind-%var2143X (_ BitVec 32)) )(let (($x363 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2143X)))
 (=> $x363 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2143X) (_ bv0 32)))))
 ))
 (let (($x370 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let (($x363 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2142X)))
 (= $x363 false)))
 ))
 (let (($x29 (and $x370 $x46)))
 (let (($x151 (= $x29 true)))
 (let (($x311 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2137X (_ BitVec 32)) )(let (($x362 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2137X)))
 (let (($x360 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> (and $x360 $x362) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2135X input.ind-%var2137X) (_ bv0 32))))))
 ))
 (let (($x375 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2136X (_ BitVec 32)) )(let (($x360 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> $x360 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2136X) false))))
 ))
 (let (($x326 (forall ((input.ind-%var2134X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2134X)))
 (= $x221 false)))
 ))
 (let (($x335 (and (and $x326 $x375) $x311)))
 (let (($x319 (= $x335 true)))
 (let (($x227 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x187 (= input.ind-%var2125X input.spec-%var-y-0)))
 (let ((?x225 (ite $x187 ?x37 (_ bv0 32))))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x226 (ite $x25 ?x225 (_ bv0 32))))
 (let ((?x51 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2125X)))
 (let (($x367 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2125X)))
 (=> $x367 (= ?x51 ?x226))))))))))
 ))
 (let (($x388 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x187 (= input.ind-%var2124X input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x193 (ite $x25 $x187 false)))
 (let (($x367 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2124X)))
 (= $x367 $x193))))))
 ))
 (let (($x228 (and $x388 $x227)))
 (let (($x241 (= $x228 true)))
 (let (($x343 (= input.spec-%tmpvar-6.L2%13%d.2 ?x44)))
 (let (($x306 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x324 (=> $x306 $x343)))
 (let (($x27 (ite $x25 $x40 false)))
 (let ((?x54 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x54 (_ bv1 32))))
 (let (($x307 (= $x306 $x5)))
 (let (($x43 (= false false)))
 (let (($x288 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x298 (=> $x288 $x43)))
 (let (($x294 (= ?x54 (_ bv0 32))))
 (let (($x295 (= $x288 $x294)))
 (let (($x341 (and (and (and $x295 $x298) $x307) $x324)))
 (let (($x345 (= $x341 true)))
 (let (($x240 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x187 (= input.ind-%var2107X input.spec-%var-y-0)))
 (let ((?x225 (ite $x187 ?x37 (_ bv0 32))))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x226 (ite $x25 ?x225 (_ bv0 32))))
 (let ((?x216 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2107X)))
 (let (($x186 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2107X)))
 (let (($x166 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x166 $x186) (= ?x216 ?x226)))))))))))
 ))
 (let (($x202 (forall ((input.ind-%var2106X (_ BitVec 32)) )(let (($x187 (= input.ind-%var2106X input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x193 (ite $x25 $x187 false)))
 (let (($x186 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2106X)))
 (let (($x166 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x166 (= $x186 $x193))))))))
 ))
 (let ((?x48 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x48 (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x167 (= $x166 $x10)))
 (let (($x158 (= ?x48 (_ bv0 32))))
 (let (($x149 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x165 (= $x149 $x158)))
 (let (($x150 (=> $x149 $x43)))
 (let (($x271 (and (and (and (and $x150 $x165) $x167) $x202) $x240)))
 (let (($x272 (= $x271 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x136 (concat ?x30 (concat ?x132 ?x131)))))
 (let (($x188 (= ?x137 input.dst.llvm-%x)))
 (let (($x138 (= $x188 true)))
 (let (($x172 (= $x138 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x124 (concat ?x121 (concat ?x113 ?x117)))))
 (let (($x126 (= ?x125 input.dst.llvm-%y)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x111 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x115 (= $x111 true)))
 (let (($x102 (= $x115 true)))
 (let (($x103 (= $x102 true)))
 (let (($x114 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x97 (= $x114 true)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x92)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x87)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x64 $x73)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x9 $x61)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x28 $x66)))
 (let (($x53 (not $x89)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x6 $x65)))
 (let (($x20 (and (not $x82) $x53)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x62 $x80)))
 (let (($x32 (not $x16)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x79 $x86)))
 (let (($x75 (and (not $x42) $x32)))
 (let (($x108 (and (and (and (and (and (and $x75 $x20) $x26) $x78) $x90) $x74) $x88)))
 (let (($x94 (and $x108 $x58)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x60 (or false (or false (and (and true (or $x52 $x63)) (or $x85 $x81))))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x60)))
 (let (($x95 (and $x45 $x94)))
 (let (($x106 (= $x95 true)))
 (let (($x110 (= $x106 true)))
 (let (($x107 (= $x110 true)))
 (let (($x100 (and $x107 $x99)))
 (let (($x116 (and $x100 $x103)))
 (let (($x129 (and $x116 $x128)))
 (let (($x142 (and $x129 $x172)))
 (let (($x283 (and $x142 $x272)))
 (let (($x348 (and $x283 $x345)))
 (let (($x244 (and $x348 $x241)))
 (let (($x351 (and $x244 $x319)))
 (let (($x178 (and $x351 $x151)))
 (let (($x253 (and $x178 $x354)))
 (let (($x292 (and $x253 $x213)))
 (let (($x332 (and $x292 $x317)))
 (let (($x24 (and $x10 $x5)))
 (let (($x355 (and $x24 $x332)))
 (let (($x34 (= ?x37 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x235 (and $x34 $x355)))
 (let (($x293 (and $x43 $x235)))
 (let (($x35 (= input.spec-%var-m2-0.L2%18%bbentry ?x44)))
 (let (($x200 (and $x35 $x293)))
 (let (($x247 (and $x43 $x200)))
 (let (($x320 (=> $x247 $x369)))
 (not $x320))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x40 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x40 ?x37 (_ bv0 32))))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x44 (ite $x25 ?x55 (_ bv0 32))))
 (let ((?x248 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x269 (= ?x248 ?x44)))
 (let (($x318 (= $x269 true)))
 (let (($x369 (= $x318 true)))
 (let (($x277 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2183X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x187 (= input.ind-%var2183X input.spec-%var-y-0)))
 (let ((?x225 (ite $x187 ?x37 (_ bv0 32))))
 (let (($x353 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let ((?x347 (ite $x353 ?x225 (_ bv0 32))))
 (let ((?x390 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x175 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x338 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> (and $x338 $x175) (= ?x390 ?x347)))))))))))
 ))
 (let (($x358 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2182X (_ BitVec 32)) )(let (($x187 (= input.ind-%var2182X input.spec-%var-y-0)))
 (let (($x353 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let (($x72 (ite $x353 $x187 false)))
 (let (($x175 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2182X)))
 (let (($x338 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> $x338 (= $x175 $x72))))))))
 ))
 (let (($x357 (forall ((input.ind-%var2180X (_ BitVec 32)) )(let (($x352 (= input.ind-%var2180X input.spec-%var-x-0)))
 (let (($x173 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2180X)))
 (= $x173 $x352))))
 ))
 (let (($x162 (and (and $x357 $x358) $x277)))
 (let (($x317 (= $x162 true)))
 (let (($x205 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2167X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x187 (= input.ind-%var2167X input.spec-%var-y-0)))
 (let ((?x225 (ite $x187 ?x37 (_ bv0 32))))
 (let (($x353 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let ((?x347 (ite $x353 ?x225 (_ bv0 32))))
 (let ((?x303 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x199 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x285 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> (and $x285 $x199) (= ?x303 ?x347)))))))))))
 ))
 (let (($x264 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2166X (_ BitVec 32)) )(let (($x187 (= input.ind-%var2166X input.spec-%var-y-0)))
 (let (($x353 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let (($x72 (ite $x353 $x187 false)))
 (let (($x199 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2166X)))
 (let (($x285 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> $x285 (= $x199 $x72))))))))
 ))
 (let (($x323 (forall ((input.ind-%var2164X (_ BitVec 32)) )(let (($x352 (= input.ind-%var2164X input.spec-%var-x-0)))
 (let (($x275 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2164X)))
 (= $x275 $x352))))
 ))
 (let (($x281 (and (and $x323 $x264) $x205)))
 (let (($x213 (= $x281 true)))
 (let (($x179 (forall ((input.ind-%var2151X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x187 (= input.ind-%var2151X input.spec-%var-y-0)))
 (let ((?x225 (ite $x187 ?x37 (_ bv0 32))))
 (let ((?x334 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2151X)))
 (let (($x299 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2151X)))
 (=> $x299 (= ?x334 ?x225))))))))
 ))
 (let (($x161 (forall ((input.ind-%var2150X (_ BitVec 32)) )(let (($x187 (= input.ind-%var2150X input.spec-%var-y-0)))
 (let (($x299 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2150X)))
 (= $x299 $x187))))
 ))
 (let (($x180 (and $x161 $x179)))
 (let (($x354 (= $x180 true)))
 (let (($x46 (forall ((input.ind-%var2143X (_ BitVec 32)) )(let (($x363 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2143X)))
 (=> $x363 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2143X) (_ bv0 32)))))
 ))
 (let (($x370 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let (($x363 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2142X)))
 (= $x363 false)))
 ))
 (let (($x29 (and $x370 $x46)))
 (let (($x151 (= $x29 true)))
 (let (($x311 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2137X (_ BitVec 32)) )(let (($x362 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2137X)))
 (let (($x360 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> (and $x360 $x362) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2135X input.ind-%var2137X) (_ bv0 32))))))
 ))
 (let (($x375 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2136X (_ BitVec 32)) )(let (($x360 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> $x360 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2136X) false))))
 ))
 (let (($x326 (forall ((input.ind-%var2134X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2134X)))
 (= $x221 false)))
 ))
 (let (($x335 (and (and $x326 $x375) $x311)))
 (let (($x319 (= $x335 true)))
 (let (($x227 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x187 (= input.ind-%var2125X input.spec-%var-y-0)))
 (let ((?x225 (ite $x187 ?x37 (_ bv0 32))))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x226 (ite $x25 ?x225 (_ bv0 32))))
 (let ((?x51 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2125X)))
 (let (($x367 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2125X)))
 (=> $x367 (= ?x51 ?x226))))))))))
 ))
 (let (($x388 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x187 (= input.ind-%var2124X input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x193 (ite $x25 $x187 false)))
 (let (($x367 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2124X)))
 (= $x367 $x193))))))
 ))
 (let (($x228 (and $x388 $x227)))
 (let (($x241 (= $x228 true)))
 (let (($x343 (= input.spec-%tmpvar-6.L2%13%d.2 ?x44)))
 (let (($x306 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x324 (=> $x306 $x343)))
 (let (($x27 (ite $x25 $x40 false)))
 (let ((?x54 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x54 (_ bv1 32))))
 (let (($x307 (= $x306 $x5)))
 (let (($x43 (= false false)))
 (let (($x288 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x298 (=> $x288 $x43)))
 (let (($x294 (= ?x54 (_ bv0 32))))
 (let (($x295 (= $x288 $x294)))
 (let (($x341 (and (and (and $x295 $x298) $x307) $x324)))
 (let (($x345 (= $x341 true)))
 (let (($x240 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x187 (= input.ind-%var2107X input.spec-%var-y-0)))
 (let ((?x225 (ite $x187 ?x37 (_ bv0 32))))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x226 (ite $x25 ?x225 (_ bv0 32))))
 (let ((?x216 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2107X)))
 (let (($x186 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2107X)))
 (let (($x166 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x166 $x186) (= ?x216 ?x226)))))))))))
 ))
 (let (($x202 (forall ((input.ind-%var2106X (_ BitVec 32)) )(let (($x187 (= input.ind-%var2106X input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x193 (ite $x25 $x187 false)))
 (let (($x186 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2106X)))
 (let (($x166 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x166 (= $x186 $x193))))))))
 ))
 (let ((?x48 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x48 (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x167 (= $x166 $x10)))
 (let (($x158 (= ?x48 (_ bv0 32))))
 (let (($x149 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x165 (= $x149 $x158)))
 (let (($x150 (=> $x149 $x43)))
 (let (($x271 (and (and (and (and $x150 $x165) $x167) $x202) $x240)))
 (let (($x272 (= $x271 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x136 (concat ?x30 (concat ?x132 ?x131)))))
 (let (($x188 (= ?x137 input.dst.llvm-%x)))
 (let (($x138 (= $x188 true)))
 (let (($x172 (= $x138 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x124 (concat ?x121 (concat ?x113 ?x117)))))
 (let (($x126 (= ?x125 input.dst.llvm-%y)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x111 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x115 (= $x111 true)))
 (let (($x102 (= $x115 true)))
 (let (($x103 (= $x102 true)))
 (let (($x114 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x97 (= $x114 true)))
 (let (($x98 (= $x97 true)))
 (let (($x99 (= $x98 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x92)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x87)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x64 $x73)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x9 $x61)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x28 $x66)))
 (let (($x53 (not $x89)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x6 $x65)))
 (let (($x20 (and (not $x82) $x53)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x62 $x80)))
 (let (($x32 (not $x16)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x79 $x86)))
 (let (($x75 (and (not $x42) $x32)))
 (let (($x108 (and (and (and (and (and (and $x75 $x20) $x26) $x78) $x90) $x74) $x88)))
 (let (($x94 (and $x108 $x58)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x60 (or false (or false (and (and true (or $x52 $x63)) (or $x85 $x81))))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x60)))
 (let (($x95 (and $x45 $x94)))
 (let (($x106 (= $x95 true)))
 (let (($x110 (= $x106 true)))
 (let (($x107 (= $x110 true)))
 (let (($x100 (and $x107 $x99)))
 (let (($x116 (and $x100 $x103)))
 (let (($x129 (and $x116 $x128)))
 (let (($x142 (and $x129 $x172)))
 (let (($x283 (and $x142 $x272)))
 (let (($x348 (and $x283 $x345)))
 (let (($x244 (and $x348 $x241)))
 (let (($x351 (and $x244 $x319)))
 (let (($x178 (and $x351 $x151)))
 (let (($x253 (and $x178 $x354)))
 (let (($x292 (and $x253 $x213)))
 (let (($x332 (and $x292 $x317)))
 (let (($x24 (and $x10 $x5)))
 (let (($x355 (and $x24 $x332)))
 (let (($x34 (= ?x37 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x235 (and $x34 $x355)))
 (let (($x293 (and $x43 $x235)))
 (let (($x35 (= input.spec-%var-m2-0.L2%18%bbentry ?x44)))
 (let (($x200 (and $x35 $x293)))
 (let (($x247 (and $x43 $x200)))
 (let (($x320 (=> $x247 $x369)))
 (not $x320))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491039/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x321 (= input.spec-%var-y-0 ?x263)))
 (let (($x342 (= $x321 true)))
 (let (($x195 (= $x342 true)))
 (let (($x164 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2359X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2359X input.spec-%var-y-0)))
 (let ((?x272 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x268 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let ((?x301 (ite $x268 ?x272 (_ bv0 32))))
 (let ((?x229 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x207 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x349 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> (and $x349 $x207) (= ?x229 ?x301)))))))))))
 ))
 (let (($x300 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2358X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2358X input.spec-%var-y-0)))
 (let (($x268 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let (($x329 (ite $x268 $x271 false)))
 (let (($x207 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2358X)))
 (let (($x349 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> $x349 (= $x207 $x329))))))))
 ))
 (let (($x222 (forall ((input.ind-%var2356X (_ BitVec 32)) )(let (($x290 (= input.ind-%var2356X input.spec-%var-x-0)))
 (let (($x391 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2356X)))
 (= $x391 $x290))))
 ))
 (let (($x297 (and (and $x222 $x300) $x164)))
 (let (($x181 (= $x297 true)))
 (let (($x259 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2343X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2343X input.spec-%var-y-0)))
 (let ((?x272 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x268 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let ((?x301 (ite $x268 ?x272 (_ bv0 32))))
 (let ((?x333 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x210 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x270 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> (and $x270 $x210) (= ?x333 ?x301)))))))))))
 ))
 (let (($x339 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2342X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2342X input.spec-%var-y-0)))
 (let (($x268 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let (($x329 (ite $x268 $x271 false)))
 (let (($x210 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2342X)))
 (let (($x270 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> $x270 (= $x210 $x329))))))))
 ))
 (let (($x371 (forall ((input.ind-%var2340X (_ BitVec 32)) )(let (($x290 (= input.ind-%var2340X input.spec-%var-x-0)))
 (let (($x384 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2340X)))
 (= $x384 $x290))))
 ))
 (let (($x273 (and (and $x371 $x339) $x259)))
 (let (($x206 (= $x273 true)))
 (let (($x190 (forall ((input.ind-%var2327X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2327X input.spec-%var-y-0)))
 (let ((?x272 (ite $x271 ?x25 (_ bv0 32))))
 (let ((?x139 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2327X)))
 (let (($x144 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2327X)))
 (=> $x144 (= ?x139 ?x272))))))))
 ))
 (let (($x396 (forall ((input.ind-%var2326X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2326X input.spec-%var-y-0)))
 (let (($x144 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2326X)))
 (= $x144 $x271))))
 ))
 (let (($x238 (and $x396 $x190)))
 (let (($x218 (= $x238 true)))
 (let (($x17 (forall ((input.ind-%var2319X (_ BitVec 32)) )(let (($x317 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2319X)))
 (=> $x317 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2319X) (_ bv0 32)))))
 ))
 (let (($x293 (forall ((input.ind-%var2318X (_ BitVec 32)) )(let (($x317 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2318X)))
 (= $x317 false)))
 ))
 (let (($x104 (and $x293 $x17)))
 (let (($x130 (= $x104 true)))
 (let (($x309 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2313X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2313X)))
 (let (($x148 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> (and $x148 $x264) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2311X input.ind-%var2313X) (_ bv0 32))))))
 ))
 (let (($x205 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2312X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> $x148 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2312X) false))))
 ))
 (let (($x323 (forall ((input.ind-%var2310X (_ BitVec 32)) )(let (($x253 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2310X)))
 (= $x253 false)))
 ))
 (let (($x390 (and (and $x323 $x205) $x309)))
 (let (($x246 (= $x390 true)))
 (let (($x334 (forall ((input.ind-%var2301X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2301X input.spec-%var-y-0)))
 (let ((?x272 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x40 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x283 (ite $x40 ?x272 (_ bv0 32))))
 (let ((?x8 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2301X)))
 (let (($x261 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2301X)))
 (=> $x261 (= ?x8 ?x283))))))))))
 ))
 (let (($x363 (forall ((input.ind-%var2300X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2300X input.spec-%var-y-0)))
 (let (($x40 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x343 (ite $x40 $x271 false)))
 (let (($x261 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2300X)))
 (= $x261 $x343))))))
 ))
 (let (($x143 (and $x363 $x334)))
 (let (($x152 (= $x143 true)))
 (let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x11 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x44 (ite $x11 ?x25 (_ bv0 32))))
 (let (($x40 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x27 (ite $x40 ?x44 (_ bv0 32))))
 (let (($x315 (= input.spec-%tmpvar-6.L2%13%d.2 ?x27)))
 (let (($x244 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x360 (=> $x244 $x315)))
 (let (($x54 (ite $x40 $x11 false)))
 (let ((?x5 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x5 (_ bv1 32))))
 (let (($x289 (= $x244 $x221)))
 (let (($x77 (= false false)))
 (let (($x227 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x241 (=> $x227 $x77)))
 (let (($x24 (= ?x5 (_ bv0 32))))
 (let (($x228 (= $x227 $x24)))
 (let (($x361 (and (and (and $x228 $x241) $x289) $x360)))
 (let (($x375 (= $x361 true)))
 (let (($x345 (forall ((input.ind-%var2282X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2282X input.spec-%var-y-0)))
 (let (($x40 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x343 (ite $x40 $x271 false)))
 (let (($x194 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2282X)))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x192 (= $x194 $x343))))))))
 ))
 (let (($x295 (forall ((input.ind-%var2283X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2283X input.spec-%var-y-0)))
 (let ((?x272 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x40 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x283 (ite $x40 ?x272 (_ bv0 32))))
 (let ((?x237 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2283X)))
 (let (($x194 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2283X)))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x192 $x194) (= ?x237 ?x283)))))))))))
 ))
 (let ((?x34 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x34 (_ bv1 32))))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x186 (= $x192 $x7)))
 (let (($x167 (= ?x34 (_ bv0 32))))
 (let (($x245 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x252 (= $x245 $x167)))
 (let (($x166 (=> $x245 $x77)))
 (let (($x388 (and (and (and (and $x166 $x252) $x186) $x295) $x345)))
 (let (($x51 (= $x388 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x189 (concat ?x142 (concat ?x188 (concat ?x133 ?x132)))))
 (let (($x149 (= ?x189 input.dst.llvm-%x)))
 (let (($x43 (= $x149 true)))
 (let (($x150 (= $x43 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x128 (concat ?x125 (concat ?x113 ?x121)))))
 (let (($x171 (= ?x129 input.dst.llvm-%y)))
 (let (($x136 (= $x171 true)))
 (let (($x134 (= $x136 true)))
 (let (($x103 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x116 (= $x103 true)))
 (let (($x112 (= $x116 true)))
 (let (($x123 (= $x112 true)))
 (let (($x99 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x111 (= $x101 true)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x87)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x74)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x64 $x73)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x9 $x61)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x89 $x53)))
 (let (($x57 (not $x20)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x18 $x28)))
 (let (($x26 (and (not $x66) $x57)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x16 $x32)))
 (let (($x6 (not $x75)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x70 $x38)))
 (let (($x82 (and (not $x80) $x6)))
 (let (($x106 (and (and (and (and (and (and $x82 $x26) $x50) $x109) $x90) $x13) $x93)))
 (let (($x110 (and $x106 $x88)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x42 (or false (or false (and (and true (or $x56 $x85)) (or $x68 $x60))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x107 (and $x62 $x110)))
 (let (($x96 (= $x107 true)))
 (let (($x114 (= $x96 true)))
 (let (($x97 (= $x114 true)))
 (let (($x115 (and $x97 $x111)))
 (let (($x124 (and $x115 $x123)))
 (let (($x30 (and $x124 $x134)))
 (let (($x158 (and $x30 $x150)))
 (let (($x204 (and $x158 $x51)))
 (let (($x265 (and $x204 $x375)))
 (let (($x179 (and $x265 $x152)))
 (let (($x374 (and $x179 $x246)))
 (let (($x177 (and $x374 $x130)))
 (let (($x156 (and $x177 $x218)))
 (let (($x302 (and $x156 $x206)))
 (let (($x316 (and $x302 $x181)))
 (let (($x23 (and $x7 $x24)))
 (let (($x145 (and $x23 $x316)))
 (let (($x69 (= ?x25 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x312 (and $x69 $x145)))
 (let (($x250 (and $x77 $x312)))
 (let (($x37 (= input.spec-%var-m2-0.L2%18%bbentry ?x27)))
 (let (($x280 (and $x37 $x250)))
 (let (($x279 (and $x77 $x280)))
 (let (($x243 (=> $x279 $x195)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x321 (= input.spec-%var-y-0 ?x263)))
 (let (($x342 (= $x321 true)))
 (let (($x195 (= $x342 true)))
 (let (($x164 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2359X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2359X input.spec-%var-y-0)))
 (let ((?x272 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x268 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let ((?x301 (ite $x268 ?x272 (_ bv0 32))))
 (let ((?x229 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x207 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x349 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> (and $x349 $x207) (= ?x229 ?x301)))))))))))
 ))
 (let (($x300 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2358X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2358X input.spec-%var-y-0)))
 (let (($x268 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let (($x329 (ite $x268 $x271 false)))
 (let (($x207 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2358X)))
 (let (($x349 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> $x349 (= $x207 $x329))))))))
 ))
 (let (($x222 (forall ((input.ind-%var2356X (_ BitVec 32)) )(let (($x290 (= input.ind-%var2356X input.spec-%var-x-0)))
 (let (($x391 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2356X)))
 (= $x391 $x290))))
 ))
 (let (($x297 (and (and $x222 $x300) $x164)))
 (let (($x181 (= $x297 true)))
 (let (($x259 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2343X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2343X input.spec-%var-y-0)))
 (let ((?x272 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x268 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let ((?x301 (ite $x268 ?x272 (_ bv0 32))))
 (let ((?x333 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x210 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x270 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> (and $x270 $x210) (= ?x333 ?x301)))))))))))
 ))
 (let (($x339 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2342X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2342X input.spec-%var-y-0)))
 (let (($x268 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let (($x329 (ite $x268 $x271 false)))
 (let (($x210 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2342X)))
 (let (($x270 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> $x270 (= $x210 $x329))))))))
 ))
 (let (($x371 (forall ((input.ind-%var2340X (_ BitVec 32)) )(let (($x290 (= input.ind-%var2340X input.spec-%var-x-0)))
 (let (($x384 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2340X)))
 (= $x384 $x290))))
 ))
 (let (($x273 (and (and $x371 $x339) $x259)))
 (let (($x206 (= $x273 true)))
 (let (($x190 (forall ((input.ind-%var2327X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2327X input.spec-%var-y-0)))
 (let ((?x272 (ite $x271 ?x25 (_ bv0 32))))
 (let ((?x139 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2327X)))
 (let (($x144 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2327X)))
 (=> $x144 (= ?x139 ?x272))))))))
 ))
 (let (($x396 (forall ((input.ind-%var2326X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2326X input.spec-%var-y-0)))
 (let (($x144 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2326X)))
 (= $x144 $x271))))
 ))
 (let (($x238 (and $x396 $x190)))
 (let (($x218 (= $x238 true)))
 (let (($x17 (forall ((input.ind-%var2319X (_ BitVec 32)) )(let (($x317 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2319X)))
 (=> $x317 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2319X) (_ bv0 32)))))
 ))
 (let (($x293 (forall ((input.ind-%var2318X (_ BitVec 32)) )(let (($x317 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2318X)))
 (= $x317 false)))
 ))
 (let (($x104 (and $x293 $x17)))
 (let (($x130 (= $x104 true)))
 (let (($x309 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2313X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2313X)))
 (let (($x148 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> (and $x148 $x264) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2311X input.ind-%var2313X) (_ bv0 32))))))
 ))
 (let (($x205 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2312X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> $x148 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2312X) false))))
 ))
 (let (($x323 (forall ((input.ind-%var2310X (_ BitVec 32)) )(let (($x253 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2310X)))
 (= $x253 false)))
 ))
 (let (($x390 (and (and $x323 $x205) $x309)))
 (let (($x246 (= $x390 true)))
 (let (($x334 (forall ((input.ind-%var2301X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2301X input.spec-%var-y-0)))
 (let ((?x272 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x40 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x283 (ite $x40 ?x272 (_ bv0 32))))
 (let ((?x8 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2301X)))
 (let (($x261 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2301X)))
 (=> $x261 (= ?x8 ?x283))))))))))
 ))
 (let (($x363 (forall ((input.ind-%var2300X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2300X input.spec-%var-y-0)))
 (let (($x40 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x343 (ite $x40 $x271 false)))
 (let (($x261 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2300X)))
 (= $x261 $x343))))))
 ))
 (let (($x143 (and $x363 $x334)))
 (let (($x152 (= $x143 true)))
 (let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x11 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x44 (ite $x11 ?x25 (_ bv0 32))))
 (let (($x40 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x27 (ite $x40 ?x44 (_ bv0 32))))
 (let (($x315 (= input.spec-%tmpvar-6.L2%13%d.2 ?x27)))
 (let (($x244 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x360 (=> $x244 $x315)))
 (let (($x54 (ite $x40 $x11 false)))
 (let ((?x5 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x5 (_ bv1 32))))
 (let (($x289 (= $x244 $x221)))
 (let (($x77 (= false false)))
 (let (($x227 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x241 (=> $x227 $x77)))
 (let (($x24 (= ?x5 (_ bv0 32))))
 (let (($x228 (= $x227 $x24)))
 (let (($x361 (and (and (and $x228 $x241) $x289) $x360)))
 (let (($x375 (= $x361 true)))
 (let (($x345 (forall ((input.ind-%var2282X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2282X input.spec-%var-y-0)))
 (let (($x40 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x343 (ite $x40 $x271 false)))
 (let (($x194 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2282X)))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x192 (= $x194 $x343))))))))
 ))
 (let (($x295 (forall ((input.ind-%var2283X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2283X input.spec-%var-y-0)))
 (let ((?x272 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x40 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x283 (ite $x40 ?x272 (_ bv0 32))))
 (let ((?x237 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2283X)))
 (let (($x194 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2283X)))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x192 $x194) (= ?x237 ?x283)))))))))))
 ))
 (let ((?x34 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x34 (_ bv1 32))))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x186 (= $x192 $x7)))
 (let (($x167 (= ?x34 (_ bv0 32))))
 (let (($x245 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x252 (= $x245 $x167)))
 (let (($x166 (=> $x245 $x77)))
 (let (($x388 (and (and (and (and $x166 $x252) $x186) $x295) $x345)))
 (let (($x51 (= $x388 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x189 (concat ?x142 (concat ?x188 (concat ?x133 ?x132)))))
 (let (($x149 (= ?x189 input.dst.llvm-%x)))
 (let (($x43 (= $x149 true)))
 (let (($x150 (= $x43 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x128 (concat ?x125 (concat ?x113 ?x121)))))
 (let (($x171 (= ?x129 input.dst.llvm-%y)))
 (let (($x136 (= $x171 true)))
 (let (($x134 (= $x136 true)))
 (let (($x103 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x116 (= $x103 true)))
 (let (($x112 (= $x116 true)))
 (let (($x123 (= $x112 true)))
 (let (($x99 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x111 (= $x101 true)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x87)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x74)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x64 $x73)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x9 $x61)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x89 $x53)))
 (let (($x57 (not $x20)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x18 $x28)))
 (let (($x26 (and (not $x66) $x57)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x16 $x32)))
 (let (($x6 (not $x75)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x70 $x38)))
 (let (($x82 (and (not $x80) $x6)))
 (let (($x106 (and (and (and (and (and (and $x82 $x26) $x50) $x109) $x90) $x13) $x93)))
 (let (($x110 (and $x106 $x88)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x42 (or false (or false (and (and true (or $x56 $x85)) (or $x68 $x60))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x107 (and $x62 $x110)))
 (let (($x96 (= $x107 true)))
 (let (($x114 (= $x96 true)))
 (let (($x97 (= $x114 true)))
 (let (($x115 (and $x97 $x111)))
 (let (($x124 (and $x115 $x123)))
 (let (($x30 (and $x124 $x134)))
 (let (($x158 (and $x30 $x150)))
 (let (($x204 (and $x158 $x51)))
 (let (($x265 (and $x204 $x375)))
 (let (($x179 (and $x265 $x152)))
 (let (($x374 (and $x179 $x246)))
 (let (($x177 (and $x374 $x130)))
 (let (($x156 (and $x177 $x218)))
 (let (($x302 (and $x156 $x206)))
 (let (($x316 (and $x302 $x181)))
 (let (($x23 (and $x7 $x24)))
 (let (($x145 (and $x23 $x316)))
 (let (($x69 (= ?x25 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x312 (and $x69 $x145)))
 (let (($x250 (and $x77 $x312)))
 (let (($x37 (= input.spec-%var-m2-0.L2%18%bbentry ?x27)))
 (let (($x280 (and $x37 $x250)))
 (let (($x279 (and $x77 $x280)))
 (let (($x243 (=> $x279 $x195)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491039/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x373 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x393 (= input.spec-%var-x-0 ?x373)))
 (let (($x356 (= $x393 true)))
 (let (($x377 (= $x356 true)))
 (let (($x328 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2535X (_ BitVec 32)) )(let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x283 (= input.ind-%var2535X input.spec-%var-y-0)))
 (let ((?x362 (ite $x283 ?x10 (_ bv0 32))))
 (let (($x180 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let ((?x174 (ite $x180 ?x362 (_ bv0 32))))
 (let ((?x292 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x319 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x299 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> (and $x299 $x319) (= ?x292 ?x174)))))))))))
 ))
 (let (($x338 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2534X (_ BitVec 32)) )(let (($x283 (= input.ind-%var2534X input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let (($x354 (ite $x180 $x283 false)))
 (let (($x319 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2534X)))
 (let (($x299 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> $x299 (= $x319 $x354))))))))
 ))
 (let (($x232 (forall ((input.ind-%var2532X (_ BitVec 32)) )(let (($x29 (= input.ind-%var2532X input.spec-%var-x-0)))
 (let (($x307 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2532X)))
 (= $x307 $x29))))
 ))
 (let (($x163 (and (and $x232 $x338) $x328)))
 (let (($x260 (= $x163 true)))
 (let (($x146 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2519X (_ BitVec 32)) )(let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x283 (= input.ind-%var2519X input.spec-%var-y-0)))
 (let ((?x362 (ite $x283 ?x10 (_ bv0 32))))
 (let (($x180 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let ((?x174 (ite $x180 ?x362 (_ bv0 32))))
 (let ((?x368 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x248 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x162 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> (and $x162 $x248) (= ?x368 ?x174)))))))))))
 ))
 (let (($x376 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2518X (_ BitVec 32)) )(let (($x283 (= input.ind-%var2518X input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let (($x354 (ite $x180 $x283 false)))
 (let (($x248 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2518X)))
 (let (($x162 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> $x162 (= $x248 $x354))))))))
 ))
 (let (($x199 (forall ((input.ind-%var2516X (_ BitVec 32)) )(let (($x29 (= input.ind-%var2516X input.spec-%var-x-0)))
 (let (($x230 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2516X)))
 (= $x230 $x29))))
 ))
 (let (($x157 (and (and $x199 $x376) $x146)))
 (let (($x394 (= $x157 true)))
 (let (($x298 (forall ((input.ind-%var2503X (_ BitVec 32)) )(let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x283 (= input.ind-%var2503X input.spec-%var-y-0)))
 (let ((?x362 (ite $x283 ?x10 (_ bv0 32))))
 (let ((?x381 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2503X)))
 (let (($x327 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2503X)))
 (=> $x327 (= ?x381 ?x362))))))))
 ))
 (let (($x332 (forall ((input.ind-%var2502X (_ BitVec 32)) )(let (($x283 (= input.ind-%var2502X input.spec-%var-y-0)))
 (let (($x327 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2502X)))
 (= $x327 $x283))))
 ))
 (let (($x306 (and $x332 $x298)))
 (let (($x225 (= $x306 true)))
 (let (($x21 (forall ((input.ind-%var2495X (_ BitVec 32)) )(let (($x297 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2495X)))
 (=> $x297 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2495X) (_ bv0 32)))))
 ))
 (let (($x312 (forall ((input.ind-%var2494X (_ BitVec 32)) )(let (($x297 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2494X)))
 (= $x297 false)))
 ))
 (let (($x49 (and $x312 $x21)))
 (let (($x120 (= $x49 true)))
 (let (($x300 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2489X (_ BitVec 32)) )(let (($x274 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2489X)))
 (let (($x301 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> (and $x301 $x274) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2487X input.ind-%var2489X) (_ bv0 32))))))
 ))
 (let (($x340 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2488X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> $x301 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2488X) false))))
 ))
 (let (($x310 (forall ((input.ind-%var2486X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2486X)))
 (= $x218 false)))
 ))
 (let (($x176 (and (and $x310 $x340) $x300)))
 (let (($x229 (= $x176 true)))
 (let (($x396 (forall ((input.ind-%var2476X (_ BitVec 32)) )(let (($x283 (= input.ind-%var2476X input.spec-%var-y-0)))
 (let (($x11 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x284 (ite $x11 $x283 false)))
 (let (($x182 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2476X)))
 (= $x182 $x284))))))
 ))
 (let (($x33 (forall ((input.ind-%var2477X (_ BitVec 32)) )(let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x283 (= input.ind-%var2477X input.spec-%var-y-0)))
 (let ((?x362 (ite $x283 ?x10 (_ bv0 32))))
 (let (($x11 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x244 (ite $x11 ?x362 (_ bv0 32))))
 (let ((?x309 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2477X)))
 (let (($x182 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2477X)))
 (=> $x182 (= ?x309 ?x244))))))))))
 ))
 (let (($x139 (and $x33 $x396)))
 (let (($x215 (= $x139 true)))
 (let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x27 (ite $x25 ?x10 (_ bv0 32))))
 (let (($x11 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x54 (ite $x11 ?x27 (_ bv0 32))))
 (let (($x323 (= input.spec-%tmpvar-6.L2%13%d.2 ?x54)))
 (let (($x152 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x287 (=> $x152 $x323)))
 (let (($x8 (ite $x11 $x25 false)))
 (let ((?x389 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x389 (_ bv1 32))))
 (let (($x253 (= $x152 $x179)))
 (let (($x40 (= false false)))
 (let (($x363 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x143 (=> $x363 $x40)))
 (let (($x161 (= ?x389 (_ bv0 32))))
 (let (($x334 (= $x363 $x161)))
 (let (($x347 (and (and (and $x334 $x143) $x253) $x287)))
 (let (($x224 (= $x347 true)))
 (let (($x326 (forall ((input.ind-%var2459X (_ BitVec 32)) )(let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x283 (= input.ind-%var2459X input.spec-%var-y-0)))
 (let ((?x362 (ite $x283 ?x10 (_ bv0 32))))
 (let (($x11 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x244 (ite $x11 ?x362 (_ bv0 32))))
 (let ((?x388 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2459X)))
 (let (($x193 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2459X)))
 (let (($x252 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x252 $x193) (= ?x388 ?x244)))))))))))
 ))
 (let (($x385 (forall ((input.ind-%var2458X (_ BitVec 32)) )(let (($x283 (= input.ind-%var2458X input.spec-%var-y-0)))
 (let (($x11 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x284 (ite $x11 $x283 false)))
 (let (($x193 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2458X)))
 (let (($x252 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x252 (= $x193 $x284))))))))
 ))
 (let ((?x69 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x69 (_ bv1 32))))
 (let (($x252 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x192 (= $x252 $x348)))
 (let (($x14 (= ?x69 (_ bv0 32))))
 (let (($x77 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x167 (= $x77 $x14)))
 (let (($x166 (=> $x77 $x40)))
 (let (($x375 (and (and (and (and $x166 $x167) $x192) $x385) $x326)))
 (let (($x265 (= $x375 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x189 (concat ?x132 (concat ?x188 ?x142)))))
 (let (($x43 (= ?x149 input.dst.llvm-%x)))
 (let (($x150 (= $x43 true)))
 (let (($x158 (= $x150 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x126 (concat ?x113 (concat ?x118 ?x127)))))
 (let (($x171 (= ?x129 input.dst.llvm-%y)))
 (let (($x136 (= $x171 true)))
 (let (($x134 (= $x136 true)))
 (let (($x102 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x103 (= $x102 true)))
 (let (($x116 (= $x103 true)))
 (let (($x112 (= $x116 true)))
 (let (($x98 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x94)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x61)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (and $x78 $x9)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x92 $x64)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x66 $x47)))
 (let (($x53 (not $x89)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x82 $x18)))
 (let (($x57 (and (not $x28) $x53)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x80 $x65)))
 (let (($x32 (not $x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x23 $x52)))
 (let (($x6 (and (not $x38) $x32)))
 (let (($x87 (and (and (and (and (and (and $x6 $x57) $x108) $x50) $x83) $x73) $x90)))
 (let (($x88 (and $x87 $x91)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x42 (or false (or false (and (and true (or $x67 $x85)) (or $x76 $x60))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x110 (and $x70 $x88)))
 (let (($x107 (= $x110 true)))
 (let (($x96 (= $x107 true)))
 (let (($x114 (= $x96 true)))
 (let (($x111 (and $x114 $x101)))
 (let (($x123 (and $x111 $x112)))
 (let (($x30 (and $x123 $x134)))
 (let (($x165 (and $x30 $x158)))
 (let (($x261 (and $x165 $x265)))
 (let (($x205 (and $x261 $x224)))
 (let (($x169 (and $x205 $x215)))
 (let (($x231 (and $x169 $x229)))
 (let (($x36 (and $x231 $x120)))
 (let (($x226 (and $x36 $x225)))
 (let (($x140 (and $x226 $x394)))
 (let (($x191 (and $x140 $x260)))
 (let (($x256 (and $x14 $x191)))
 (let (($x55 (= ?x10 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x266 (and $x55 $x256)))
 (let (($x276 (and $x40 $x266)))
 (let (($x12 (= input.spec-%var-m2-0.L2%18%bbentry ?x54)))
 (let (($x258 (and $x12 $x276)))
 (let (($x170 (and $x40 $x258)))
 (let (($x308 (=> $x170 $x377)))
 (not $x308)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x373 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x393 (= input.spec-%var-x-0 ?x373)))
 (let (($x356 (= $x393 true)))
 (let (($x377 (= $x356 true)))
 (let (($x328 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2535X (_ BitVec 32)) )(let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x283 (= input.ind-%var2535X input.spec-%var-y-0)))
 (let ((?x362 (ite $x283 ?x10 (_ bv0 32))))
 (let (($x180 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let ((?x174 (ite $x180 ?x362 (_ bv0 32))))
 (let ((?x292 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x319 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x299 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> (and $x299 $x319) (= ?x292 ?x174)))))))))))
 ))
 (let (($x338 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2534X (_ BitVec 32)) )(let (($x283 (= input.ind-%var2534X input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let (($x354 (ite $x180 $x283 false)))
 (let (($x319 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2534X)))
 (let (($x299 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> $x299 (= $x319 $x354))))))))
 ))
 (let (($x232 (forall ((input.ind-%var2532X (_ BitVec 32)) )(let (($x29 (= input.ind-%var2532X input.spec-%var-x-0)))
 (let (($x307 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2532X)))
 (= $x307 $x29))))
 ))
 (let (($x163 (and (and $x232 $x338) $x328)))
 (let (($x260 (= $x163 true)))
 (let (($x146 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2519X (_ BitVec 32)) )(let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x283 (= input.ind-%var2519X input.spec-%var-y-0)))
 (let ((?x362 (ite $x283 ?x10 (_ bv0 32))))
 (let (($x180 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let ((?x174 (ite $x180 ?x362 (_ bv0 32))))
 (let ((?x368 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x248 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x162 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> (and $x162 $x248) (= ?x368 ?x174)))))))))))
 ))
 (let (($x376 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2518X (_ BitVec 32)) )(let (($x283 (= input.ind-%var2518X input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let (($x354 (ite $x180 $x283 false)))
 (let (($x248 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2518X)))
 (let (($x162 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> $x162 (= $x248 $x354))))))))
 ))
 (let (($x199 (forall ((input.ind-%var2516X (_ BitVec 32)) )(let (($x29 (= input.ind-%var2516X input.spec-%var-x-0)))
 (let (($x230 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2516X)))
 (= $x230 $x29))))
 ))
 (let (($x157 (and (and $x199 $x376) $x146)))
 (let (($x394 (= $x157 true)))
 (let (($x298 (forall ((input.ind-%var2503X (_ BitVec 32)) )(let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x283 (= input.ind-%var2503X input.spec-%var-y-0)))
 (let ((?x362 (ite $x283 ?x10 (_ bv0 32))))
 (let ((?x381 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2503X)))
 (let (($x327 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2503X)))
 (=> $x327 (= ?x381 ?x362))))))))
 ))
 (let (($x332 (forall ((input.ind-%var2502X (_ BitVec 32)) )(let (($x283 (= input.ind-%var2502X input.spec-%var-y-0)))
 (let (($x327 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2502X)))
 (= $x327 $x283))))
 ))
 (let (($x306 (and $x332 $x298)))
 (let (($x225 (= $x306 true)))
 (let (($x21 (forall ((input.ind-%var2495X (_ BitVec 32)) )(let (($x297 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2495X)))
 (=> $x297 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2495X) (_ bv0 32)))))
 ))
 (let (($x312 (forall ((input.ind-%var2494X (_ BitVec 32)) )(let (($x297 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2494X)))
 (= $x297 false)))
 ))
 (let (($x49 (and $x312 $x21)))
 (let (($x120 (= $x49 true)))
 (let (($x300 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2489X (_ BitVec 32)) )(let (($x274 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2489X)))
 (let (($x301 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> (and $x301 $x274) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2487X input.ind-%var2489X) (_ bv0 32))))))
 ))
 (let (($x340 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2488X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> $x301 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2488X) false))))
 ))
 (let (($x310 (forall ((input.ind-%var2486X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2486X)))
 (= $x218 false)))
 ))
 (let (($x176 (and (and $x310 $x340) $x300)))
 (let (($x229 (= $x176 true)))
 (let (($x396 (forall ((input.ind-%var2476X (_ BitVec 32)) )(let (($x283 (= input.ind-%var2476X input.spec-%var-y-0)))
 (let (($x11 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x284 (ite $x11 $x283 false)))
 (let (($x182 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2476X)))
 (= $x182 $x284))))))
 ))
 (let (($x33 (forall ((input.ind-%var2477X (_ BitVec 32)) )(let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x283 (= input.ind-%var2477X input.spec-%var-y-0)))
 (let ((?x362 (ite $x283 ?x10 (_ bv0 32))))
 (let (($x11 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x244 (ite $x11 ?x362 (_ bv0 32))))
 (let ((?x309 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2477X)))
 (let (($x182 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2477X)))
 (=> $x182 (= ?x309 ?x244))))))))))
 ))
 (let (($x139 (and $x33 $x396)))
 (let (($x215 (= $x139 true)))
 (let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x27 (ite $x25 ?x10 (_ bv0 32))))
 (let (($x11 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x54 (ite $x11 ?x27 (_ bv0 32))))
 (let (($x323 (= input.spec-%tmpvar-6.L2%13%d.2 ?x54)))
 (let (($x152 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x287 (=> $x152 $x323)))
 (let (($x8 (ite $x11 $x25 false)))
 (let ((?x389 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x389 (_ bv1 32))))
 (let (($x253 (= $x152 $x179)))
 (let (($x40 (= false false)))
 (let (($x363 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x143 (=> $x363 $x40)))
 (let (($x161 (= ?x389 (_ bv0 32))))
 (let (($x334 (= $x363 $x161)))
 (let (($x347 (and (and (and $x334 $x143) $x253) $x287)))
 (let (($x224 (= $x347 true)))
 (let (($x326 (forall ((input.ind-%var2459X (_ BitVec 32)) )(let ((?x10 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x283 (= input.ind-%var2459X input.spec-%var-y-0)))
 (let ((?x362 (ite $x283 ?x10 (_ bv0 32))))
 (let (($x11 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x244 (ite $x11 ?x362 (_ bv0 32))))
 (let ((?x388 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2459X)))
 (let (($x193 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2459X)))
 (let (($x252 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x252 $x193) (= ?x388 ?x244)))))))))))
 ))
 (let (($x385 (forall ((input.ind-%var2458X (_ BitVec 32)) )(let (($x283 (= input.ind-%var2458X input.spec-%var-y-0)))
 (let (($x11 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x284 (ite $x11 $x283 false)))
 (let (($x193 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2458X)))
 (let (($x252 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x252 (= $x193 $x284))))))))
 ))
 (let ((?x69 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x69 (_ bv1 32))))
 (let (($x252 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x192 (= $x252 $x348)))
 (let (($x14 (= ?x69 (_ bv0 32))))
 (let (($x77 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x167 (= $x77 $x14)))
 (let (($x166 (=> $x77 $x40)))
 (let (($x375 (and (and (and (and $x166 $x167) $x192) $x385) $x326)))
 (let (($x265 (= $x375 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x189 (concat ?x132 (concat ?x188 ?x142)))))
 (let (($x43 (= ?x149 input.dst.llvm-%x)))
 (let (($x150 (= $x43 true)))
 (let (($x158 (= $x150 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x126 (concat ?x113 (concat ?x118 ?x127)))))
 (let (($x171 (= ?x129 input.dst.llvm-%y)))
 (let (($x136 (= $x171 true)))
 (let (($x134 (= $x136 true)))
 (let (($x102 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x103 (= $x102 true)))
 (let (($x116 (= $x103 true)))
 (let (($x112 (= $x116 true)))
 (let (($x98 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x94)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x61)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (and $x78 $x9)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x92 $x64)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x66 $x47)))
 (let (($x53 (not $x89)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x82 $x18)))
 (let (($x57 (and (not $x28) $x53)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x80 $x65)))
 (let (($x32 (not $x16)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x23 $x52)))
 (let (($x6 (and (not $x38) $x32)))
 (let (($x87 (and (and (and (and (and (and $x6 $x57) $x108) $x50) $x83) $x73) $x90)))
 (let (($x88 (and $x87 $x91)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x42 (or false (or false (and (and true (or $x67 $x85)) (or $x76 $x60))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x110 (and $x70 $x88)))
 (let (($x107 (= $x110 true)))
 (let (($x96 (= $x107 true)))
 (let (($x114 (= $x96 true)))
 (let (($x111 (and $x114 $x101)))
 (let (($x123 (and $x111 $x112)))
 (let (($x30 (and $x123 $x134)))
 (let (($x165 (and $x30 $x158)))
 (let (($x261 (and $x165 $x265)))
 (let (($x205 (and $x261 $x224)))
 (let (($x169 (and $x205 $x215)))
 (let (($x231 (and $x169 $x229)))
 (let (($x36 (and $x231 $x120)))
 (let (($x226 (and $x36 $x225)))
 (let (($x140 (and $x226 $x394)))
 (let (($x191 (and $x140 $x260)))
 (let (($x256 (and $x14 $x191)))
 (let (($x55 (= ?x10 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x266 (and $x55 $x256)))
 (let (($x276 (and $x40 $x266)))
 (let (($x12 (= input.spec-%var-m2-0.L2%18%bbentry ?x54)))
 (let (($x258 (and $x12 $x276)))
 (let (($x170 (and $x40 $x258)))
 (let (($x308 (=> $x170 $x377)))
 (not $x308)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491039/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x5 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x399 (ite $x25 $x5 false)))
 (let ((?x33 (ite $x399 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x33 (_ bv1 32))))
 (let (($x378 (= ?x33 (_ bv0 32))))
 (let (($x380 (or $x378 $x169)))
 (let ((?x315 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x315 (_ bv1 32))))
 (let (($x352 (and $x360 $x380)))
 (let (($x252 (= ?x315 (_ bv0 32))))
 (let (($x303 (or $x252 $x352)))
 (let (($x355 (= $x303 true)))
 (let (($x198 (= $x355 true)))
 (let (($x223 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2707X (_ BitVec 32)) )(let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x326 (= input.ind-%var2707X input.spec-%var-y-0)))
 (let ((?x375 (ite $x326 ?x48 (_ bv0 32))))
 (let (($x238 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let ((?x212 (ite $x238 ?x375 (_ bv0 32))))
 (let ((?x349 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x324 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x262 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> (and $x262 $x324) (= ?x349 ?x212)))))))))))
 ))
 (let (($x210 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2706X (_ BitVec 32)) )(let (($x326 (= input.ind-%var2706X input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let (($x329 (ite $x238 $x326 false)))
 (let (($x324 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2706X)))
 (let (($x262 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> $x262 (= $x324 $x329))))))))
 ))
 (let (($x228 (forall ((input.ind-%var2704X (_ BitVec 32)) )(let (($x371 (= input.ind-%var2704X input.spec-%var-x-0)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2704X)))
 (= $x236 $x371))))
 ))
 (let (($x277 (and (and $x228 $x210) $x223)))
 (let (($x398 (= $x277 true)))
 (let (($x202 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2691X (_ BitVec 32)) )(let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x326 (= input.ind-%var2691X input.spec-%var-y-0)))
 (let ((?x375 (ite $x326 ?x48 (_ bv0 32))))
 (let (($x238 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let ((?x212 (ite $x238 ?x375 (_ bv0 32))))
 (let ((?x251 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x318 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x185 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> (and $x185 $x318) (= ?x251 ?x212)))))))))))
 ))
 (let (($x281 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2690X (_ BitVec 32)) )(let (($x326 (= input.ind-%var2690X input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let (($x329 (ite $x238 $x326 false)))
 (let (($x318 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2690X)))
 (let (($x185 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> $x185 (= $x318 $x329))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2688X (_ BitVec 32)) )(let (($x371 (= input.ind-%var2688X input.spec-%var-x-0)))
 (let (($x17 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2688X)))
 (= $x17 $x371))))
 ))
 (let (($x364 (and (and $x250 $x281) $x202)))
 (let (($x173 (= $x364 true)))
 (let (($x288 (forall ((input.ind-%var2675X (_ BitVec 32)) )(let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x326 (= input.ind-%var2675X input.spec-%var-y-0)))
 (let ((?x375 (ite $x326 ?x48 (_ bv0 32))))
 (let ((?x325 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2675X)))
 (let (($x390 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2675X)))
 (=> $x390 (= ?x325 ?x375))))))))
 ))
 (let (($x321 (forall ((input.ind-%var2674X (_ BitVec 32)) )(let (($x326 (= input.ind-%var2674X input.spec-%var-y-0)))
 (let (($x390 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2674X)))
 (= $x390 $x326))))
 ))
 (let (($x204 (and $x321 $x288)))
 (let (($x209 (= $x204 true)))
 (let (($x24 (forall ((input.ind-%var2667X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2667X)))
 (=> $x163 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2667X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var2666X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2666X)))
 (= $x163 false)))
 ))
 (let (($x119 (and $x266 $x24)))
 (let (($x172 (= $x119 true)))
 (let (($x338 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2661X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2661X)))
 (let (($x174 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> (and $x174 $x183) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2659X input.ind-%var2661X) (_ bv0 32))))))
 ))
 (let (($x234 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2660X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> $x174 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2660X) false))))
 ))
 (let (($x285 (forall ((input.ind-%var2658X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2658X)))
 (= $x225 false)))
 ))
 (let (($x147 (and (and $x285 $x234) $x338)))
 (let (($x292 (= $x147 true)))
 (let (($x332 (forall ((input.ind-%var2649X (_ BitVec 32)) )(let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x326 (= input.ind-%var2649X input.spec-%var-y-0)))
 (let ((?x375 (ite $x326 ?x48 (_ bv0 32))))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x265 (ite $x25 ?x375 (_ bv0 32))))
 (let ((?x263 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2649X)))
 (let (($x391 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2649X)))
 (=> $x391 (= ?x263 ?x265))))))))))
 ))
 (let (($x231 (forall ((input.ind-%var2648X (_ BitVec 32)) )(let (($x326 (= input.ind-%var2648X input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x179 (ite $x25 $x326 false)))
 (let (($x391 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2648X)))
 (= $x391 $x179))))))
 ))
 (let (($x381 (and $x231 $x332)))
 (let (($x187 (= $x381 true)))
 (let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x27 (ite $x5 ?x48 (_ bv0 32))))
 (let ((?x84 (ite $x25 ?x27 (_ bv0 32))))
 (let (($x310 (= input.spec-%tmpvar-6.L2%13%d.2 ?x84)))
 (let (($x215 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x336 (=> $x215 $x310)))
 (let (($x218 (= $x215 $x169)))
 (let (($x7 (= false false)))
 (let (($x269 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x139 (=> $x269 $x7)))
 (let (($x396 (= $x269 $x378)))
 (let (($x333 (and (and (and $x396 $x139) $x218) $x336)))
 (let (($x153 (= $x333 true)))
 (let (($x382 (forall ((input.ind-%var2630X (_ BitVec 32)) )(let (($x326 (= input.ind-%var2630X input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x179 (ite $x25 $x326 false)))
 (let (($x284 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2630X)))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x192 (= $x284 $x179))))))))
 ))
 (let (($x8 (forall ((input.ind-%var2631X (_ BitVec 32)) )(let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x326 (= input.ind-%var2631X input.spec-%var-y-0)))
 (let ((?x375 (ite $x326 ?x48 (_ bv0 32))))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x265 (ite $x25 ?x375 (_ bv0 32))))
 (let ((?x361 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2631X)))
 (let (($x284 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2631X)))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x192 $x284) (= ?x361 ?x265)))))))))))
 ))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x367 (= $x192 $x360)))
 (let (($x14 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x348 (= $x14 $x252)))
 (let (($x167 (=> $x14 $x7)))
 (let (($x224 (and (and (and (and $x167 $x348) $x367) $x8) $x382)))
 (let (($x205 (= $x224 true)))
 (let (($x165 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x245 (= $x165 true)))
 (let (($x77 (= $x245 true)))
 (let (($x40 (= $x77 true)))
 (let (($x135 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x149 (= $x135 true)))
 (let (($x43 (= $x149 true)))
 (let (($x150 (= $x43 true)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x121)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x127)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x126)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x117 $x125)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x124 $x105)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x101 $x111)))
 (let (($x102 (not $x115)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x98 $x99)))
 (let (($x116 (and (not $x100) $x102)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x88 $x110)))
 (let (($x96 (not $x107)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x26 $x108)))
 (let (($x97 (and (not $x91) $x96)))
 (let (($x189 (and (and (and (and (and (and $x97 $x116) $x112) $x123) $x113) $x118) $x122)))
 (let (($x133 (and $x189 $x129)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x90 (or false (or false (and (and true (or $x78 $x109)) (or $x93 $x39))))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x132 (and $x94 $x133)))
 (let (($x137 (= $x132 true)))
 (let (($x188 (= $x137 true)))
 (let (($x142 (= $x188 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x28 (concat ?x6 (concat ?x65 ?x75)))))
 (let (($x47 (= ?x20 input.dst.llvm-%y)))
 (let (($x89 (= $x47 true)))
 (let (($x53 (= $x89 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x45 (concat ?x31 (concat ?x22 ?x63)))))
 (let (($x42 (= ?x79 input.dst.llvm-%x)))
 (let (($x70 (= $x42 true)))
 (let (($x23 (= $x70 true)))
 (let (($x57 (and $x23 $x53)))
 (let (($x131 (and $x57 $x142)))
 (let (($x158 (and $x131 $x150)))
 (let (($x166 (and $x158 $x40)))
 (let (($x182 (and $x166 $x205)))
 (let (($x340 (and $x182 $x153)))
 (let (($x267 (and $x340 $x187)))
 (let (($x154 (and $x267 $x292)))
 (let (($x194 (and $x154 $x172)))
 (let (($x305 (and $x194 $x209)))
 (let (($x151 (and $x305 $x173)))
 (let (($x392 (and $x151 $x398)))
 (let (($x10 (= ?x48 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x159 (and $x10 $x392)))
 (let (($x395 (and $x7 $x159)))
 (let (($x34 (= input.spec-%var-m2-0.L2%18%bbentry ?x84)))
 (let (($x178 (and $x34 $x395)))
 (let (($x320 (and $x7 $x178)))
 (let (($x346 (=> $x320 $x198)))
 (not $x346)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x5 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x399 (ite $x25 $x5 false)))
 (let ((?x33 (ite $x399 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x33 (_ bv1 32))))
 (let (($x378 (= ?x33 (_ bv0 32))))
 (let (($x380 (or $x378 $x169)))
 (let ((?x315 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x315 (_ bv1 32))))
 (let (($x352 (and $x360 $x380)))
 (let (($x252 (= ?x315 (_ bv0 32))))
 (let (($x303 (or $x252 $x352)))
 (let (($x355 (= $x303 true)))
 (let (($x198 (= $x355 true)))
 (let (($x223 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2707X (_ BitVec 32)) )(let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x326 (= input.ind-%var2707X input.spec-%var-y-0)))
 (let ((?x375 (ite $x326 ?x48 (_ bv0 32))))
 (let (($x238 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let ((?x212 (ite $x238 ?x375 (_ bv0 32))))
 (let ((?x349 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x324 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x262 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> (and $x262 $x324) (= ?x349 ?x212)))))))))))
 ))
 (let (($x210 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2706X (_ BitVec 32)) )(let (($x326 (= input.ind-%var2706X input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let (($x329 (ite $x238 $x326 false)))
 (let (($x324 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2706X)))
 (let (($x262 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> $x262 (= $x324 $x329))))))))
 ))
 (let (($x228 (forall ((input.ind-%var2704X (_ BitVec 32)) )(let (($x371 (= input.ind-%var2704X input.spec-%var-x-0)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2704X)))
 (= $x236 $x371))))
 ))
 (let (($x277 (and (and $x228 $x210) $x223)))
 (let (($x398 (= $x277 true)))
 (let (($x202 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2691X (_ BitVec 32)) )(let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x326 (= input.ind-%var2691X input.spec-%var-y-0)))
 (let ((?x375 (ite $x326 ?x48 (_ bv0 32))))
 (let (($x238 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let ((?x212 (ite $x238 ?x375 (_ bv0 32))))
 (let ((?x251 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x318 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x185 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> (and $x185 $x318) (= ?x251 ?x212)))))))))))
 ))
 (let (($x281 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2690X (_ BitVec 32)) )(let (($x326 (= input.ind-%var2690X input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let (($x329 (ite $x238 $x326 false)))
 (let (($x318 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2690X)))
 (let (($x185 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> $x185 (= $x318 $x329))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2688X (_ BitVec 32)) )(let (($x371 (= input.ind-%var2688X input.spec-%var-x-0)))
 (let (($x17 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2688X)))
 (= $x17 $x371))))
 ))
 (let (($x364 (and (and $x250 $x281) $x202)))
 (let (($x173 (= $x364 true)))
 (let (($x288 (forall ((input.ind-%var2675X (_ BitVec 32)) )(let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x326 (= input.ind-%var2675X input.spec-%var-y-0)))
 (let ((?x375 (ite $x326 ?x48 (_ bv0 32))))
 (let ((?x325 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2675X)))
 (let (($x390 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2675X)))
 (=> $x390 (= ?x325 ?x375))))))))
 ))
 (let (($x321 (forall ((input.ind-%var2674X (_ BitVec 32)) )(let (($x326 (= input.ind-%var2674X input.spec-%var-y-0)))
 (let (($x390 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2674X)))
 (= $x390 $x326))))
 ))
 (let (($x204 (and $x321 $x288)))
 (let (($x209 (= $x204 true)))
 (let (($x24 (forall ((input.ind-%var2667X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2667X)))
 (=> $x163 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2667X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var2666X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2666X)))
 (= $x163 false)))
 ))
 (let (($x119 (and $x266 $x24)))
 (let (($x172 (= $x119 true)))
 (let (($x338 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2661X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2661X)))
 (let (($x174 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> (and $x174 $x183) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2659X input.ind-%var2661X) (_ bv0 32))))))
 ))
 (let (($x234 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2660X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> $x174 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2660X) false))))
 ))
 (let (($x285 (forall ((input.ind-%var2658X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2658X)))
 (= $x225 false)))
 ))
 (let (($x147 (and (and $x285 $x234) $x338)))
 (let (($x292 (= $x147 true)))
 (let (($x332 (forall ((input.ind-%var2649X (_ BitVec 32)) )(let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x326 (= input.ind-%var2649X input.spec-%var-y-0)))
 (let ((?x375 (ite $x326 ?x48 (_ bv0 32))))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x265 (ite $x25 ?x375 (_ bv0 32))))
 (let ((?x263 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2649X)))
 (let (($x391 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2649X)))
 (=> $x391 (= ?x263 ?x265))))))))))
 ))
 (let (($x231 (forall ((input.ind-%var2648X (_ BitVec 32)) )(let (($x326 (= input.ind-%var2648X input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x179 (ite $x25 $x326 false)))
 (let (($x391 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2648X)))
 (= $x391 $x179))))))
 ))
 (let (($x381 (and $x231 $x332)))
 (let (($x187 (= $x381 true)))
 (let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x27 (ite $x5 ?x48 (_ bv0 32))))
 (let ((?x84 (ite $x25 ?x27 (_ bv0 32))))
 (let (($x310 (= input.spec-%tmpvar-6.L2%13%d.2 ?x84)))
 (let (($x215 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x336 (=> $x215 $x310)))
 (let (($x218 (= $x215 $x169)))
 (let (($x7 (= false false)))
 (let (($x269 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x139 (=> $x269 $x7)))
 (let (($x396 (= $x269 $x378)))
 (let (($x333 (and (and (and $x396 $x139) $x218) $x336)))
 (let (($x153 (= $x333 true)))
 (let (($x382 (forall ((input.ind-%var2630X (_ BitVec 32)) )(let (($x326 (= input.ind-%var2630X input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x179 (ite $x25 $x326 false)))
 (let (($x284 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2630X)))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x192 (= $x284 $x179))))))))
 ))
 (let (($x8 (forall ((input.ind-%var2631X (_ BitVec 32)) )(let ((?x48 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x326 (= input.ind-%var2631X input.spec-%var-y-0)))
 (let ((?x375 (ite $x326 ?x48 (_ bv0 32))))
 (let (($x25 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x265 (ite $x25 ?x375 (_ bv0 32))))
 (let ((?x361 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2631X)))
 (let (($x284 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2631X)))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x192 $x284) (= ?x361 ?x265)))))))))))
 ))
 (let (($x192 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x367 (= $x192 $x360)))
 (let (($x14 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x348 (= $x14 $x252)))
 (let (($x167 (=> $x14 $x7)))
 (let (($x224 (and (and (and (and $x167 $x348) $x367) $x8) $x382)))
 (let (($x205 (= $x224 true)))
 (let (($x165 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x245 (= $x165 true)))
 (let (($x77 (= $x245 true)))
 (let (($x40 (= $x77 true)))
 (let (($x135 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x149 (= $x135 true)))
 (let (($x43 (= $x149 true)))
 (let (($x150 (= $x43 true)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x121)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x127)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x126)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x117 $x125)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x124 $x105)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x101 $x111)))
 (let (($x102 (not $x115)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x98 $x99)))
 (let (($x116 (and (not $x100) $x102)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x88 $x110)))
 (let (($x96 (not $x107)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x26 $x108)))
 (let (($x97 (and (not $x91) $x96)))
 (let (($x189 (and (and (and (and (and (and $x97 $x116) $x112) $x123) $x113) $x118) $x122)))
 (let (($x133 (and $x189 $x129)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x90 (or false (or false (and (and true (or $x78 $x109)) (or $x93 $x39))))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x132 (and $x94 $x133)))
 (let (($x137 (= $x132 true)))
 (let (($x188 (= $x137 true)))
 (let (($x142 (= $x188 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x28 (concat ?x6 (concat ?x65 ?x75)))))
 (let (($x47 (= ?x20 input.dst.llvm-%y)))
 (let (($x89 (= $x47 true)))
 (let (($x53 (= $x89 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x45 (concat ?x31 (concat ?x22 ?x63)))))
 (let (($x42 (= ?x79 input.dst.llvm-%x)))
 (let (($x70 (= $x42 true)))
 (let (($x23 (= $x70 true)))
 (let (($x57 (and $x23 $x53)))
 (let (($x131 (and $x57 $x142)))
 (let (($x158 (and $x131 $x150)))
 (let (($x166 (and $x158 $x40)))
 (let (($x182 (and $x166 $x205)))
 (let (($x340 (and $x182 $x153)))
 (let (($x267 (and $x340 $x187)))
 (let (($x154 (and $x267 $x292)))
 (let (($x194 (and $x154 $x172)))
 (let (($x305 (and $x194 $x209)))
 (let (($x151 (and $x305 $x173)))
 (let (($x392 (and $x151 $x398)))
 (let (($x10 (= ?x48 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x159 (and $x10 $x392)))
 (let (($x395 (and $x7 $x159)))
 (let (($x34 (= input.spec-%var-m2-0.L2%18%bbentry ?x84)))
 (let (($x178 (and $x34 $x395)))
 (let (($x320 (and $x7 $x178)))
 (let (($x346 (=> $x320 $x198)))
 (not $x346)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491039/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x27 (ite $x37 ?x19 (_ bv0 32))))
 (let (($x5 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x68 (ite $x5 ?x27 (_ bv0 32))))
 (let ((?x316 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x273 (= ?x316 ?x68)))
 (let (($x46 (= $x273 true)))
 (let (($x353 (= $x46 true)))
 (let (($x302 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2889X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x264 (= input.ind-%var2889X input.spec-%var-y-0)))
 (let ((?x274 (ite $x264 ?x19 (_ bv0 32))))
 (let (($x354 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let ((?x369 (ite $x354 ?x274 (_ bv0 32))))
 (let ((?x356 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x295 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x232 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> (and $x232 $x295) (= ?x356 ?x369)))))))))))
 ))
 (let (($x383 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2888X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2888X input.spec-%var-y-0)))
 (let (($x354 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let (($x328 (ite $x354 $x264 false)))
 (let (($x295 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2888X)))
 (let (($x232 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> $x232 (= $x295 $x328))))))))
 ))
 (let (($x237 (forall ((input.ind-%var2886X (_ BitVec 32)) )(let (($x162 (= input.ind-%var2886X input.spec-%var-x-0)))
 (let (($x148 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2886X)))
 (= $x148 $x162))))
 ))
 (let (($x272 (and (and $x237 $x383) $x302)))
 (let (($x311 (= $x272 true)))
 (let (($x317 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2873X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x264 (= input.ind-%var2873X input.spec-%var-y-0)))
 (let ((?x274 (ite $x264 ?x19 (_ bv0 32))))
 (let (($x354 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let ((?x369 (ite $x354 ?x274 (_ bv0 32))))
 (let ((?x197 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x242 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x259 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> (and $x259 $x242) (= ?x197 ?x369)))))))))))
 ))
 (let (($x331 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2872X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2872X input.spec-%var-y-0)))
 (let (($x354 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let (($x328 (ite $x354 $x264 false)))
 (let (($x242 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2872X)))
 (let (($x259 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> $x259 (= $x242 $x328))))))))
 ))
 (let (($x146 (forall ((input.ind-%var2870X (_ BitVec 32)) )(let (($x162 (= input.ind-%var2870X input.spec-%var-x-0)))
 (let (($x211 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2870X)))
 (= $x211 $x162))))
 ))
 (let (($x279 (and (and $x146 $x331) $x317)))
 (let (($x235 (= $x279 true)))
 (let (($x388 (forall ((input.ind-%var2857X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x264 (= input.ind-%var2857X input.spec-%var-y-0)))
 (let ((?x274 (ite $x264 ?x19 (_ bv0 32))))
 (let ((?x255 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2857X)))
 (let (($x226 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2857X)))
 (=> $x226 (= ?x255 ?x274))))))))
 ))
 (let (($x156 (forall ((input.ind-%var2856X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2856X input.spec-%var-y-0)))
 (let (($x226 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2856X)))
 (= $x226 $x264))))
 ))
 (let (($x362 (and $x156 $x388)))
 (let (($x161 (= $x362 true)))
 (let (($x52 (forall ((input.ind-%var2849X (_ BitVec 32)) )(let (($x398 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2849X)))
 (=> $x398 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2849X) (_ bv0 32)))))
 ))
 (let (($x178 (forall ((input.ind-%var2848X (_ BitVec 32)) )(let (($x398 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2848X)))
 (= $x398 false)))
 ))
 (let (($x55 (and $x178 $x52)))
 (let (($x294 (= $x55 true)))
 (let (($x155 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2843X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2843X)))
 (let (($x160 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> (and $x160 $x281) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2841X input.ind-%var2843X) (_ bv0 32))))))
 ))
 (let (($x202 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2842X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> $x160 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2842X) false))))
 ))
 (let (($x250 (forall ((input.ind-%var2840X (_ BitVec 32)) )(let (($x305 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2840X)))
 (= $x305 false)))
 ))
 (let (($x349 (and (and $x250 $x202) $x155)))
 (let (($x257 (= $x349 true)))
 (let (($x325 (forall ((input.ind-%var2830X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2830X input.spec-%var-y-0)))
 (let (($x5 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x382 (ite $x5 $x264 false)))
 (let (($x319 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2830X)))
 (= $x319 $x382))))))
 ))
 (let (($x24 (forall ((input.ind-%var2831X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x264 (= input.ind-%var2831X input.spec-%var-y-0)))
 (let ((?x274 (ite $x264 ?x19 (_ bv0 32))))
 (let (($x5 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x290 (ite $x5 ?x274 (_ bv0 32))))
 (let ((?x147 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2831X)))
 (let (($x319 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2831X)))
 (=> $x319 (= ?x147 ?x290))))))))))
 ))
 (let (($x345 (and $x24 $x325)))
 (let (($x186 (= $x345 true)))
 (let (($x196 (= input.spec-%tmpvar-6.L2%13%d.2 ?x68)))
 (let (($x225 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x174 (=> $x225 $x196)))
 (let (($x60 (ite $x5 $x37 false)))
 (let ((?x45 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x45 (_ bv1 32))))
 (let (($x29 (= $x225 $x41)))
 (let (($x25 (= false false)))
 (let (($x332 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x267 (=> $x332 $x25)))
 (let (($x381 (= ?x45 (_ bv0 32))))
 (let (($x187 (= $x332 $x381)))
 (let (($x314 (and (and (and $x187 $x267) $x29) $x174)))
 (let (($x234 (= $x314 true)))
 (let (($x153 (forall ((input.ind-%var2813X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x264 (= input.ind-%var2813X input.spec-%var-y-0)))
 (let ((?x274 (ite $x264 ?x19 (_ bv0 32))))
 (let (($x5 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x290 (ite $x5 ?x274 (_ bv0 32))))
 (let ((?x378 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2813X)))
 (let (($x261 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2813X)))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x361 $x261) (= ?x378 ?x290)))))))))))
 ))
 (let (($x182 (forall ((input.ind-%var2812X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2812X input.spec-%var-y-0)))
 (let (($x5 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x382 (ite $x5 $x264 false)))
 (let (($x261 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2812X)))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x361 (= $x261 $x382))))))))
 ))
 (let ((?x54 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x54 (_ bv1 32))))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x326 (= $x361 $x10)))
 (let (($x284 (= ?x54 (_ bv0 32))))
 (let (($x287 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x351 (= $x287 $x284)))
 (let (($x283 (=> $x287 $x25)))
 (let (($x231 (and (and (and (and $x283 $x351) $x326) $x182) $x153)))
 (let (($x263 (= $x231 true)))
 (let ((?x245 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x252 (concat ?x315 (concat ?x14 (concat ?x40 ?x245)))))
 (let (($x348 (= ?x252 input.dst.llvm-%x)))
 (let (($x323 (= $x348 true)))
 (let (($x192 (= $x323 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x131 (concat ?x137 (concat ?x121 ?x122)))))
 (let (($x149 (= ?x135 input.dst.llvm-%y)))
 (let (($x43 (= $x149 true)))
 (let (($x150 (= $x43 true)))
 (let (($x105 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x113 (= $x105 true)))
 (let (($x30 (= $x113 true)))
 (let (($x128 (= $x30 true)))
 (let (($x123 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x134 (= $x123 true)))
 (let (($x124 (= $x134 true)))
 (let (($x117 (= $x124 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x96)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x110)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (and $x61 $x26)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x106 $x108)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x78 $x74)))
 (let (($x58 (not $x109)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x87 $x50)))
 (let (($x64 (and (not $x92) $x58)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x47 $x89)))
 (let (($x57 (not $x53)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x67 $x22)))
 (let (($x59 (and (not $x66) $x57)))
 (let (($x111 (and (and (and (and (and (and $x59 $x64) $x83) $x73) $x91) $x88) $x107)))
 (let (($x115 (and $x111 $x97)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x16 (or false (or false (and (and true (or $x42 $x70)) (or $x32 $x6))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x16)))
 (let (($x102 (and $x20 $x115)))
 (let (($x116 (= $x102 true)))
 (let (($x171 (= $x116 true)))
 (let (($x112 (= $x171 true)))
 (let (($x126 (and $x112 $x117)))
 (let (($x118 (and $x126 $x128)))
 (let (($x158 (and $x118 $x150)))
 (let (($x360 (and $x158 $x192)))
 (let (($x327 (and $x360 $x263)))
 (let (($x359 (and $x327 $x234)))
 (let (($x288 (and $x359 $x186)))
 (let (($x286 (and $x288 $x257)))
 (let (($x289 (and $x286 $x294)))
 (let (($x297 (and $x289 $x161)))
 (let (($x220 (and $x297 $x235)))
 (let (($x365 (and $x220 $x311)))
 (let (($x81 (and $x10 $x41)))
 (let (($x184 (and $x81 $x365)))
 (let (($x48 (= ?x19 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x384 (and $x48 $x184)))
 (let (($x214 (and $x25 $x384)))
 (let (($x35 (= input.spec-%var-m2-0.L2%18%bbentry ?x68)))
 (let (($x177 (and $x35 $x214)))
 (let (($x313 (and $x25 $x177)))
 (let (($x180 (=> $x313 $x353)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x27 (ite $x37 ?x19 (_ bv0 32))))
 (let (($x5 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x68 (ite $x5 ?x27 (_ bv0 32))))
 (let ((?x316 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x273 (= ?x316 ?x68)))
 (let (($x46 (= $x273 true)))
 (let (($x353 (= $x46 true)))
 (let (($x302 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2889X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x264 (= input.ind-%var2889X input.spec-%var-y-0)))
 (let ((?x274 (ite $x264 ?x19 (_ bv0 32))))
 (let (($x354 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let ((?x369 (ite $x354 ?x274 (_ bv0 32))))
 (let ((?x356 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x295 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x232 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> (and $x232 $x295) (= ?x356 ?x369)))))))))))
 ))
 (let (($x383 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2888X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2888X input.spec-%var-y-0)))
 (let (($x354 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let (($x328 (ite $x354 $x264 false)))
 (let (($x295 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2888X)))
 (let (($x232 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> $x232 (= $x295 $x328))))))))
 ))
 (let (($x237 (forall ((input.ind-%var2886X (_ BitVec 32)) )(let (($x162 (= input.ind-%var2886X input.spec-%var-x-0)))
 (let (($x148 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2886X)))
 (= $x148 $x162))))
 ))
 (let (($x272 (and (and $x237 $x383) $x302)))
 (let (($x311 (= $x272 true)))
 (let (($x317 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2873X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x264 (= input.ind-%var2873X input.spec-%var-y-0)))
 (let ((?x274 (ite $x264 ?x19 (_ bv0 32))))
 (let (($x354 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let ((?x369 (ite $x354 ?x274 (_ bv0 32))))
 (let ((?x197 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x242 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x259 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> (and $x259 $x242) (= ?x197 ?x369)))))))))))
 ))
 (let (($x331 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2872X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2872X input.spec-%var-y-0)))
 (let (($x354 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let (($x328 (ite $x354 $x264 false)))
 (let (($x242 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2872X)))
 (let (($x259 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> $x259 (= $x242 $x328))))))))
 ))
 (let (($x146 (forall ((input.ind-%var2870X (_ BitVec 32)) )(let (($x162 (= input.ind-%var2870X input.spec-%var-x-0)))
 (let (($x211 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2870X)))
 (= $x211 $x162))))
 ))
 (let (($x279 (and (and $x146 $x331) $x317)))
 (let (($x235 (= $x279 true)))
 (let (($x388 (forall ((input.ind-%var2857X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x264 (= input.ind-%var2857X input.spec-%var-y-0)))
 (let ((?x274 (ite $x264 ?x19 (_ bv0 32))))
 (let ((?x255 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2857X)))
 (let (($x226 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2857X)))
 (=> $x226 (= ?x255 ?x274))))))))
 ))
 (let (($x156 (forall ((input.ind-%var2856X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2856X input.spec-%var-y-0)))
 (let (($x226 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2856X)))
 (= $x226 $x264))))
 ))
 (let (($x362 (and $x156 $x388)))
 (let (($x161 (= $x362 true)))
 (let (($x52 (forall ((input.ind-%var2849X (_ BitVec 32)) )(let (($x398 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2849X)))
 (=> $x398 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2849X) (_ bv0 32)))))
 ))
 (let (($x178 (forall ((input.ind-%var2848X (_ BitVec 32)) )(let (($x398 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2848X)))
 (= $x398 false)))
 ))
 (let (($x55 (and $x178 $x52)))
 (let (($x294 (= $x55 true)))
 (let (($x155 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2843X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2843X)))
 (let (($x160 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> (and $x160 $x281) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2841X input.ind-%var2843X) (_ bv0 32))))))
 ))
 (let (($x202 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2842X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> $x160 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2842X) false))))
 ))
 (let (($x250 (forall ((input.ind-%var2840X (_ BitVec 32)) )(let (($x305 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2840X)))
 (= $x305 false)))
 ))
 (let (($x349 (and (and $x250 $x202) $x155)))
 (let (($x257 (= $x349 true)))
 (let (($x325 (forall ((input.ind-%var2830X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2830X input.spec-%var-y-0)))
 (let (($x5 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x382 (ite $x5 $x264 false)))
 (let (($x319 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2830X)))
 (= $x319 $x382))))))
 ))
 (let (($x24 (forall ((input.ind-%var2831X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x264 (= input.ind-%var2831X input.spec-%var-y-0)))
 (let ((?x274 (ite $x264 ?x19 (_ bv0 32))))
 (let (($x5 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x290 (ite $x5 ?x274 (_ bv0 32))))
 (let ((?x147 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2831X)))
 (let (($x319 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2831X)))
 (=> $x319 (= ?x147 ?x290))))))))))
 ))
 (let (($x345 (and $x24 $x325)))
 (let (($x186 (= $x345 true)))
 (let (($x196 (= input.spec-%tmpvar-6.L2%13%d.2 ?x68)))
 (let (($x225 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x174 (=> $x225 $x196)))
 (let (($x60 (ite $x5 $x37 false)))
 (let ((?x45 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x45 (_ bv1 32))))
 (let (($x29 (= $x225 $x41)))
 (let (($x25 (= false false)))
 (let (($x332 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x267 (=> $x332 $x25)))
 (let (($x381 (= ?x45 (_ bv0 32))))
 (let (($x187 (= $x332 $x381)))
 (let (($x314 (and (and (and $x187 $x267) $x29) $x174)))
 (let (($x234 (= $x314 true)))
 (let (($x153 (forall ((input.ind-%var2813X (_ BitVec 32)) )(let ((?x19 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x264 (= input.ind-%var2813X input.spec-%var-y-0)))
 (let ((?x274 (ite $x264 ?x19 (_ bv0 32))))
 (let (($x5 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x290 (ite $x5 ?x274 (_ bv0 32))))
 (let ((?x378 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2813X)))
 (let (($x261 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2813X)))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x361 $x261) (= ?x378 ?x290)))))))))))
 ))
 (let (($x182 (forall ((input.ind-%var2812X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2812X input.spec-%var-y-0)))
 (let (($x5 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x382 (ite $x5 $x264 false)))
 (let (($x261 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2812X)))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x361 (= $x261 $x382))))))))
 ))
 (let ((?x54 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x54 (_ bv1 32))))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x326 (= $x361 $x10)))
 (let (($x284 (= ?x54 (_ bv0 32))))
 (let (($x287 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x351 (= $x287 $x284)))
 (let (($x283 (=> $x287 $x25)))
 (let (($x231 (and (and (and (and $x283 $x351) $x326) $x182) $x153)))
 (let (($x263 (= $x231 true)))
 (let ((?x245 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x252 (concat ?x315 (concat ?x14 (concat ?x40 ?x245)))))
 (let (($x348 (= ?x252 input.dst.llvm-%x)))
 (let (($x323 (= $x348 true)))
 (let (($x192 (= $x323 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x131 (concat ?x137 (concat ?x121 ?x122)))))
 (let (($x149 (= ?x135 input.dst.llvm-%y)))
 (let (($x43 (= $x149 true)))
 (let (($x150 (= $x43 true)))
 (let (($x105 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x113 (= $x105 true)))
 (let (($x30 (= $x113 true)))
 (let (($x128 (= $x30 true)))
 (let (($x123 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x134 (= $x123 true)))
 (let (($x124 (= $x134 true)))
 (let (($x117 (= $x124 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x96)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x110)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (and $x61 $x26)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x106 $x108)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x78 $x74)))
 (let (($x58 (not $x109)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x87 $x50)))
 (let (($x64 (and (not $x92) $x58)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x47 $x89)))
 (let (($x57 (not $x53)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x67 $x22)))
 (let (($x59 (and (not $x66) $x57)))
 (let (($x111 (and (and (and (and (and (and $x59 $x64) $x83) $x73) $x91) $x88) $x107)))
 (let (($x115 (and $x111 $x97)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x16 (or false (or false (and (and true (or $x42 $x70)) (or $x32 $x6))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x16)))
 (let (($x102 (and $x20 $x115)))
 (let (($x116 (= $x102 true)))
 (let (($x171 (= $x116 true)))
 (let (($x112 (= $x171 true)))
 (let (($x126 (and $x112 $x117)))
 (let (($x118 (and $x126 $x128)))
 (let (($x158 (and $x118 $x150)))
 (let (($x360 (and $x158 $x192)))
 (let (($x327 (and $x360 $x263)))
 (let (($x359 (and $x327 $x234)))
 (let (($x288 (and $x359 $x186)))
 (let (($x286 (and $x288 $x257)))
 (let (($x289 (and $x286 $x294)))
 (let (($x297 (and $x289 $x161)))
 (let (($x220 (and $x297 $x235)))
 (let (($x365 (and $x220 $x311)))
 (let (($x81 (and $x10 $x41)))
 (let (($x184 (and $x81 $x365)))
 (let (($x48 (= ?x19 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x384 (and $x48 $x184)))
 (let (($x214 (and $x25 $x384)))
 (let (($x35 (= input.spec-%var-m2-0.L2%18%bbentry ?x68)))
 (let (($x177 (and $x35 $x214)))
 (let (($x313 (and $x25 $x177)))
 (let (($x180 (=> $x313 $x353)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491039/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x157 (= input.spec-%var-y-0 ?x36)))
 (let (($x394 (= $x157 true)))
 (let (($x291 (= $x394 true)))
 (let (($x335 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3065X (_ BitVec 32)) )(let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x153 (= input.ind-%var3065X input.spec-%var-y-0)))
 (let ((?x231 (ite $x153 ?x11 (_ bv0 32))))
 (let (($x209 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let ((?x372 (ite $x209 ?x231 (_ bv0 32))))
 (let ((?x324 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x269 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x330 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> (and $x330 $x269) (= ?x324 ?x372)))))))))))
 ))
 (let (($x238 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3064X (_ BitVec 32)) )(let (($x153 (= input.ind-%var3064X input.spec-%var-y-0)))
 (let (($x209 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let (($x164 (ite $x209 $x153 false)))
 (let (($x269 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3064X)))
 (let (($x330 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> $x330 (= $x269 $x164))))))))
 ))
 (let (($x169 (forall ((input.ind-%var3062X (_ BitVec 32)) )(let (($x185 (= input.ind-%var3062X input.spec-%var-x-0)))
 (let (($x377 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3062X)))
 (= $x377 $x185))))
 ))
 (let (($x306 (and (and $x169 $x238) $x335)))
 (let (($x244 (= $x306 true)))
 (let (($x49 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3049X (_ BitVec 32)) )(let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x153 (= input.ind-%var3049X input.spec-%var-y-0)))
 (let ((?x231 (ite $x153 ?x11 (_ bv0 32))))
 (let (($x209 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let ((?x372 (ite $x209 ?x231 (_ bv0 32))))
 (let ((?x216 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x254 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x342 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> (and $x342 $x254) (= ?x216 ?x372)))))))))))
 ))
 (let (($x140 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3048X (_ BitVec 32)) )(let (($x153 (= input.ind-%var3048X input.spec-%var-y-0)))
 (let (($x209 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let (($x164 (ite $x209 $x153 false)))
 (let (($x254 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3048X)))
 (let (($x342 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> $x342 (= $x254 $x164))))))))
 ))
 (let (($x320 (forall ((input.ind-%var3046X (_ BitVec 32)) )(let (($x185 (= input.ind-%var3046X input.spec-%var-x-0)))
 (let (($x119 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3046X)))
 (= $x119 $x185))))
 ))
 (let (($x387 (and (and $x320 $x140) $x49)))
 (let (($x71 (= $x387 true)))
 (let (($x8 (forall ((input.ind-%var3033X (_ BitVec 32)) )(let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x153 (= input.ind-%var3033X input.spec-%var-y-0)))
 (let ((?x231 (ite $x153 ?x11 (_ bv0 32))))
 (let ((?x51 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3033X)))
 (let (($x292 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3033X)))
 (=> $x292 (= ?x51 ?x231))))))))
 ))
 (let (($x355 (forall ((input.ind-%var3032X (_ BitVec 32)) )(let (($x153 (= input.ind-%var3032X input.spec-%var-y-0)))
 (let (($x292 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3032X)))
 (= $x292 $x153))))
 ))
 (let (($x139 (and $x355 $x8)))
 (let (($x301 (= $x139 true)))
 (let (($x56 (forall ((input.ind-%var3025X (_ BitVec 32)) )(let (($x272 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3025X)))
 (=> $x272 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3025X) (_ bv0 32)))))
 ))
 (let (($x384 (forall ((input.ind-%var3024X (_ BitVec 32)) )(let (($x272 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3024X)))
 (= $x272 false)))
 ))
 (let (($x127 (and $x384 $x56)))
 (let (($x165 (= $x127 true)))
 (let (($x383 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3019X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3019X)))
 (let (($x369 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> (and $x369 $x104) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3017X input.ind-%var3019X) (_ bv0 32))))))
 ))
 (let (($x241 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3018X (_ BitVec 32)) )(let (($x369 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> $x369 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3018X) false))))
 ))
 (let (($x276 (forall ((input.ind-%var3016X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3016X)))
 (= $x161 false)))
 ))
 (let (($x296 (and (and $x276 $x241) $x383)))
 (let (($x356 (= $x296 true)))
 (let (($x156 (forall ((input.ind-%var3007X (_ BitVec 32)) )(let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x153 (= input.ind-%var3007X input.spec-%var-y-0)))
 (let ((?x231 (ite $x153 ?x11 (_ bv0 32))))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x263 (ite $x37 ?x231 (_ bv0 32))))
 (let ((?x303 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3007X)))
 (let (($x227 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3007X)))
 (=> $x227 (= ?x303 ?x263))))))))))
 ))
 (let (($x286 (forall ((input.ind-%var3006X (_ BitVec 32)) )(let (($x153 (= input.ind-%var3006X input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x285 (ite $x37 $x153 false)))
 (let (($x227 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3006X)))
 (= $x227 $x285))))))
 ))
 (let (($x255 (and $x286 $x156)))
 (let (($x389 (= $x255 true)))
 (let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x31 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x27 (ite $x31 ?x11 (_ bv0 32))))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x10 (ite $x37 ?x27 (_ bv0 32))))
 (let (($x250 (= input.spec-%tmpvar-6.L2%13%d.2 ?x10)))
 (let (($x186 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x200 (=> $x186 $x250)))
 (let (($x60 (ite $x37 $x31 false)))
 (let ((?x45 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x45 (_ bv1 32))))
 (let (($x305 (= $x186 $x288)))
 (let (($x62 (= false false)))
 (let (($x321 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x345 (=> $x321 $x62)))
 (let (($x41 (= ?x45 (_ bv0 32))))
 (let (($x325 (= $x321 $x41)))
 (let (($x212 (and (and (and $x325 $x345) $x305) $x200)))
 (let (($x213 (= $x212 true)))
 (let (($x314 (forall ((input.ind-%var2988X (_ BitVec 32)) )(let (($x153 (= input.ind-%var2988X input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x285 (ite $x37 $x153 false)))
 (let (($x382 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2988X)))
 (let (($x391 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x391 (= $x382 $x285))))))))
 ))
 (let (($x381 (forall ((input.ind-%var2989X (_ BitVec 32)) )(let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x153 (= input.ind-%var2989X input.spec-%var-y-0)))
 (let ((?x231 (ite $x153 ?x11 (_ bv0 32))))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x263 (ite $x37 ?x231 (_ bv0 32))))
 (let ((?x229 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2989X)))
 (let (($x382 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2989X)))
 (let (($x391 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x391 $x382) (= ?x229 ?x263)))))))))))
 ))
 (let ((?x84 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x84 (_ bv1 32))))
 (let (($x391 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x265 (= $x391 $x48)))
 (let (($x361 (= ?x84 (_ bv0 32))))
 (let (($x351 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x326 (= $x351 $x361)))
 (let (($x340 (=> $x351 $x62)))
 (let (($x147 (and (and (and (and $x340 $x326) $x265) $x381) $x314)))
 (let (($x308 (= $x147 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x192 (concat ?x252 (concat ?x245 ?x77)))))
 (let (($x367 (= ?x360 input.dst.llvm-%x)))
 (let (($x287 (= $x367 true)))
 (let (($x25 (= $x287 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x43 (concat ?x188 (concat ?x189 ?x132)))))
 (let (($x158 (= ?x150 input.dst.llvm-%y)))
 (let (($x167 (= $x158 true)))
 (let (($x315 (= $x167 true)))
 (let (($x30 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x128 (= $x30 true)))
 (let (($x118 (= $x128 true)))
 (let (($x138 (= $x118 true)))
 (let (($x124 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x117 (= $x124 true)))
 (let (($x126 (= $x117 true)))
 (let (($x125 (= $x126 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x101)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x114)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x90)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x106 $x94)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x100 $x26)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x74 $x109)))
 (let (($x64 (not $x58)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x92 $x9)))
 (let (($x93 (and (not $x78) $x64)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x89 $x53)))
 (let (($x59 (not $x57)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x82 $x76)))
 (let (($x50 (and (not $x47) $x59)))
 (let (($x102 (and (and (and (and (and (and $x50 $x93) $x99) $x73) $x108) $x103) $x88)))
 (let (($x116 (and $x102 $x110)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x22 (or false (or false (and (and true (or $x38 $x18)) (or $x65 $x75))))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x171 (and $x95 $x116)))
 (let (($x112 (= $x171 true)))
 (let (($x136 (= $x112 true)))
 (let (($x123 (= $x136 true)))
 (let (($x105 (and $x123 $x125)))
 (let (($x142 (and $x105 $x138)))
 (let (($x69 (and $x142 $x315)))
 (let (($x283 (and $x69 $x25)))
 (let (($x15 (and $x283 $x308)))
 (let (($x202 (and $x15 $x213)))
 (let (($x334 (and $x202 $x389)))
 (let (($x343 (and $x334 $x356)))
 (let (($x363 (and $x343 $x165)))
 (let (($x386 (and $x363 $x301)))
 (let (($x230 (and $x386 $x71)))
 (let (($x344 (and $x230 $x244)))
 (let (($x81 (and $x48 $x41)))
 (let (($x366 (and $x81 $x344)))
 (let (($x19 (= ?x11 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x249 (and $x19 $x366)))
 (let (($x145 (and $x62 $x249)))
 (let (($x12 (= input.spec-%var-m2-0.L2%18%bbentry ?x10)))
 (let (($x374 (and $x12 $x145)))
 (let (($x176 (and $x62 $x374)))
 (let (($x168 (=> $x176 $x291)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x36 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x157 (= input.spec-%var-y-0 ?x36)))
 (let (($x394 (= $x157 true)))
 (let (($x291 (= $x394 true)))
 (let (($x335 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3065X (_ BitVec 32)) )(let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x153 (= input.ind-%var3065X input.spec-%var-y-0)))
 (let ((?x231 (ite $x153 ?x11 (_ bv0 32))))
 (let (($x209 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let ((?x372 (ite $x209 ?x231 (_ bv0 32))))
 (let ((?x324 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x269 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x330 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> (and $x330 $x269) (= ?x324 ?x372)))))))))))
 ))
 (let (($x238 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3064X (_ BitVec 32)) )(let (($x153 (= input.ind-%var3064X input.spec-%var-y-0)))
 (let (($x209 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let (($x164 (ite $x209 $x153 false)))
 (let (($x269 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3064X)))
 (let (($x330 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> $x330 (= $x269 $x164))))))))
 ))
 (let (($x169 (forall ((input.ind-%var3062X (_ BitVec 32)) )(let (($x185 (= input.ind-%var3062X input.spec-%var-x-0)))
 (let (($x377 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3062X)))
 (= $x377 $x185))))
 ))
 (let (($x306 (and (and $x169 $x238) $x335)))
 (let (($x244 (= $x306 true)))
 (let (($x49 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3049X (_ BitVec 32)) )(let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x153 (= input.ind-%var3049X input.spec-%var-y-0)))
 (let ((?x231 (ite $x153 ?x11 (_ bv0 32))))
 (let (($x209 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let ((?x372 (ite $x209 ?x231 (_ bv0 32))))
 (let ((?x216 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x254 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x342 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> (and $x342 $x254) (= ?x216 ?x372)))))))))))
 ))
 (let (($x140 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3048X (_ BitVec 32)) )(let (($x153 (= input.ind-%var3048X input.spec-%var-y-0)))
 (let (($x209 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let (($x164 (ite $x209 $x153 false)))
 (let (($x254 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3048X)))
 (let (($x342 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> $x342 (= $x254 $x164))))))))
 ))
 (let (($x320 (forall ((input.ind-%var3046X (_ BitVec 32)) )(let (($x185 (= input.ind-%var3046X input.spec-%var-x-0)))
 (let (($x119 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3046X)))
 (= $x119 $x185))))
 ))
 (let (($x387 (and (and $x320 $x140) $x49)))
 (let (($x71 (= $x387 true)))
 (let (($x8 (forall ((input.ind-%var3033X (_ BitVec 32)) )(let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x153 (= input.ind-%var3033X input.spec-%var-y-0)))
 (let ((?x231 (ite $x153 ?x11 (_ bv0 32))))
 (let ((?x51 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3033X)))
 (let (($x292 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3033X)))
 (=> $x292 (= ?x51 ?x231))))))))
 ))
 (let (($x355 (forall ((input.ind-%var3032X (_ BitVec 32)) )(let (($x153 (= input.ind-%var3032X input.spec-%var-y-0)))
 (let (($x292 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3032X)))
 (= $x292 $x153))))
 ))
 (let (($x139 (and $x355 $x8)))
 (let (($x301 (= $x139 true)))
 (let (($x56 (forall ((input.ind-%var3025X (_ BitVec 32)) )(let (($x272 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3025X)))
 (=> $x272 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3025X) (_ bv0 32)))))
 ))
 (let (($x384 (forall ((input.ind-%var3024X (_ BitVec 32)) )(let (($x272 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3024X)))
 (= $x272 false)))
 ))
 (let (($x127 (and $x384 $x56)))
 (let (($x165 (= $x127 true)))
 (let (($x383 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3019X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3019X)))
 (let (($x369 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> (and $x369 $x104) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3017X input.ind-%var3019X) (_ bv0 32))))))
 ))
 (let (($x241 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3018X (_ BitVec 32)) )(let (($x369 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> $x369 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3018X) false))))
 ))
 (let (($x276 (forall ((input.ind-%var3016X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3016X)))
 (= $x161 false)))
 ))
 (let (($x296 (and (and $x276 $x241) $x383)))
 (let (($x356 (= $x296 true)))
 (let (($x156 (forall ((input.ind-%var3007X (_ BitVec 32)) )(let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x153 (= input.ind-%var3007X input.spec-%var-y-0)))
 (let ((?x231 (ite $x153 ?x11 (_ bv0 32))))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x263 (ite $x37 ?x231 (_ bv0 32))))
 (let ((?x303 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3007X)))
 (let (($x227 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3007X)))
 (=> $x227 (= ?x303 ?x263))))))))))
 ))
 (let (($x286 (forall ((input.ind-%var3006X (_ BitVec 32)) )(let (($x153 (= input.ind-%var3006X input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x285 (ite $x37 $x153 false)))
 (let (($x227 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3006X)))
 (= $x227 $x285))))))
 ))
 (let (($x255 (and $x286 $x156)))
 (let (($x389 (= $x255 true)))
 (let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x31 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x27 (ite $x31 ?x11 (_ bv0 32))))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x10 (ite $x37 ?x27 (_ bv0 32))))
 (let (($x250 (= input.spec-%tmpvar-6.L2%13%d.2 ?x10)))
 (let (($x186 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x200 (=> $x186 $x250)))
 (let (($x60 (ite $x37 $x31 false)))
 (let ((?x45 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x45 (_ bv1 32))))
 (let (($x305 (= $x186 $x288)))
 (let (($x62 (= false false)))
 (let (($x321 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x345 (=> $x321 $x62)))
 (let (($x41 (= ?x45 (_ bv0 32))))
 (let (($x325 (= $x321 $x41)))
 (let (($x212 (and (and (and $x325 $x345) $x305) $x200)))
 (let (($x213 (= $x212 true)))
 (let (($x314 (forall ((input.ind-%var2988X (_ BitVec 32)) )(let (($x153 (= input.ind-%var2988X input.spec-%var-y-0)))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x285 (ite $x37 $x153 false)))
 (let (($x382 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2988X)))
 (let (($x391 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x391 (= $x382 $x285))))))))
 ))
 (let (($x381 (forall ((input.ind-%var2989X (_ BitVec 32)) )(let ((?x11 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x153 (= input.ind-%var2989X input.spec-%var-y-0)))
 (let ((?x231 (ite $x153 ?x11 (_ bv0 32))))
 (let (($x37 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x263 (ite $x37 ?x231 (_ bv0 32))))
 (let ((?x229 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2989X)))
 (let (($x382 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2989X)))
 (let (($x391 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x391 $x382) (= ?x229 ?x263)))))))))))
 ))
 (let ((?x84 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x84 (_ bv1 32))))
 (let (($x391 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x265 (= $x391 $x48)))
 (let (($x361 (= ?x84 (_ bv0 32))))
 (let (($x351 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x326 (= $x351 $x361)))
 (let (($x340 (=> $x351 $x62)))
 (let (($x147 (and (and (and (and $x340 $x326) $x265) $x381) $x314)))
 (let (($x308 (= $x147 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x192 (concat ?x252 (concat ?x245 ?x77)))))
 (let (($x367 (= ?x360 input.dst.llvm-%x)))
 (let (($x287 (= $x367 true)))
 (let (($x25 (= $x287 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x43 (concat ?x188 (concat ?x189 ?x132)))))
 (let (($x158 (= ?x150 input.dst.llvm-%y)))
 (let (($x167 (= $x158 true)))
 (let (($x315 (= $x167 true)))
 (let (($x30 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x128 (= $x30 true)))
 (let (($x118 (= $x128 true)))
 (let (($x138 (= $x118 true)))
 (let (($x124 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x117 (= $x124 true)))
 (let (($x126 (= $x117 true)))
 (let (($x125 (= $x126 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x101)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x114)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x90)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x106 $x94)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x100 $x26)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x74 $x109)))
 (let (($x64 (not $x58)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x92 $x9)))
 (let (($x93 (and (not $x78) $x64)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x89 $x53)))
 (let (($x59 (not $x57)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x82 $x76)))
 (let (($x50 (and (not $x47) $x59)))
 (let (($x102 (and (and (and (and (and (and $x50 $x93) $x99) $x73) $x108) $x103) $x88)))
 (let (($x116 (and $x102 $x110)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x22 (or false (or false (and (and true (or $x38 $x18)) (or $x65 $x75))))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x171 (and $x95 $x116)))
 (let (($x112 (= $x171 true)))
 (let (($x136 (= $x112 true)))
 (let (($x123 (= $x136 true)))
 (let (($x105 (and $x123 $x125)))
 (let (($x142 (and $x105 $x138)))
 (let (($x69 (and $x142 $x315)))
 (let (($x283 (and $x69 $x25)))
 (let (($x15 (and $x283 $x308)))
 (let (($x202 (and $x15 $x213)))
 (let (($x334 (and $x202 $x389)))
 (let (($x343 (and $x334 $x356)))
 (let (($x363 (and $x343 $x165)))
 (let (($x386 (and $x363 $x301)))
 (let (($x230 (and $x386 $x71)))
 (let (($x344 (and $x230 $x244)))
 (let (($x81 (and $x48 $x41)))
 (let (($x366 (and $x81 $x344)))
 (let (($x19 (= ?x11 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x249 (and $x19 $x366)))
 (let (($x145 (and $x62 $x249)))
 (let (($x12 (= input.spec-%var-m2-0.L2%18%bbentry ?x10)))
 (let (($x374 (and $x12 $x145)))
 (let (($x176 (and $x62 $x374)))
 (let (($x168 (=> $x176 $x291)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491039/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x390 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x307 (= input.spec-%var-x-0 ?x390)))
 (let (($x159 (= $x307 true)))
 (let (($x173 (= $x159 true)))
 (let (($x223 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3241X (_ BitVec 32)) )(let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x231 (= input.ind-%var3241X input.spec-%var-y-0)))
 (let ((?x345 (ite $x231 ?x54 (_ bv0 32))))
 (let (($x388 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let ((?x239 (ite $x388 ?x345 (_ bv0 32))))
 (let ((?x235 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x349 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x289 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> (and $x289 $x349) (= ?x235 ?x239)))))))))))
 ))
 (let (($x237 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3240X (_ BitVec 32)) )(let (($x231 (= input.ind-%var3240X input.spec-%var-y-0)))
 (let (($x388 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let (($x362 (ite $x388 $x231 false)))
 (let (($x349 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3240X)))
 (let (($x289 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> $x289 (= $x349 $x362))))))))
 ))
 (let (($x290 (forall ((input.ind-%var3238X (_ BitVec 32)) )(let (($x52 (= input.ind-%var3238X input.spec-%var-x-0)))
 (let (($x225 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3238X)))
 (= $x225 $x52))))
 ))
 (let (($x236 (and (and $x290 $x237) $x223)))
 (let (($x204 (= $x236 true)))
 (let (($x151 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3225X (_ BitVec 32)) )(let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x231 (= input.ind-%var3225X input.spec-%var-y-0)))
 (let ((?x345 (ite $x231 ?x54 (_ bv0 32))))
 (let (($x388 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let ((?x239 (ite $x388 ?x345 (_ bv0 32))))
 (let ((?x282 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x302 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> (and $x302 $x313) (= ?x282 ?x239)))))))))))
 ))
 (let (($x364 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3224X (_ BitVec 32)) )(let (($x231 (= input.ind-%var3224X input.spec-%var-y-0)))
 (let (($x388 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let (($x362 (ite $x388 $x231 false)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3224X)))
 (let (($x302 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> $x302 (= $x313 $x362))))))))
 ))
 (let (($x259 (forall ((input.ind-%var3222X (_ BitVec 32)) )(let (($x52 (= input.ind-%var3222X input.spec-%var-x-0)))
 (let (($x178 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3222X)))
 (= $x178 $x52))))
 ))
 (let (($x256 (and (and $x259 $x364) $x151)))
 (let (($x338 (= $x256 true)))
 (let (($x187 (forall ((input.ind-%var3209X (_ BitVec 32)) )(let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x231 (= input.ind-%var3209X input.spec-%var-y-0)))
 (let ((?x345 (ite $x231 ?x54 (_ bv0 32))))
 (let ((?x194 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3209X)))
 (let (($x293 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3209X)))
 (=> $x293 (= ?x194 ?x345))))))))
 ))
 (let (($x311 (forall ((input.ind-%var3208X (_ BitVec 32)) )(let (($x231 (= input.ind-%var3208X input.spec-%var-y-0)))
 (let (($x293 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3208X)))
 (= $x293 $x231))))
 ))
 (let (($x183 (and $x311 $x187)))
 (let (($x378 (= $x183 true)))
 (let (($x329 (forall ((input.ind-%var3201X (_ BitVec 32)) )(let (($x335 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3201X)))
 (=> $x335 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3201X) (_ bv0 32)))))
 ))
 (let (($x366 (forall ((input.ind-%var3200X (_ BitVec 32)) )(let (($x335 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3200X)))
 (= $x335 false)))
 ))
 (let (($x85 (and $x366 $x329)))
 (let (($x133 (= $x85 true)))
 (let (($x262 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3195X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3195X)))
 (let (($x216 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> (and $x216 $x277) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3193X input.ind-%var3195X) (_ bv0 32))))))
 ))
 (let (($x143 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3194X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> $x216 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3194X) false))))
 ))
 (let (($x185 (forall ((input.ind-%var3192X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3192X)))
 (= $x139 false)))
 ))
 (let (($x170 (and (and $x185 $x143) $x262)))
 (let (($x385 (= $x170 true)))
 (let (($x392 (forall ((input.ind-%var3182X (_ BitVec 32)) )(let (($x231 (= input.ind-%var3182X input.spec-%var-y-0)))
 (let (($x31 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x263 (ite $x31 $x231 false)))
 (let (($x233 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3182X)))
 (= $x233 $x263))))))
 ))
 (let (($x180 (forall ((input.ind-%var3183X (_ BitVec 32)) )(let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x231 (= input.ind-%var3183X input.spec-%var-y-0)))
 (let ((?x345 (ite $x231 ?x54 (_ bv0 32))))
 (let (($x31 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x31 ?x345 (_ bv0 32))))
 (let ((?x248 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3183X)))
 (let (($x233 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3183X)))
 (=> $x233 (= ?x248 ?x160))))))))))
 ))
 (let (($x355 (and $x180 $x392)))
 (let (($x51 (= $x355 true)))
 (let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x63 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x27 (ite $x63 ?x54 (_ bv0 32))))
 (let (($x31 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x48 (ite $x31 ?x27 (_ bv0 32))))
 (let (($x162 (= input.spec-%tmpvar-6.L2%13%d.2 ?x48)))
 (let (($x255 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x276 (=> $x255 $x162)))
 (let (($x286 (ite $x31 $x63 false)))
 (let ((?x303 (ite $x286 (_ bv1 32) (_ bv0 32))))
 (let (($x389 (bvuge ?x303 (_ bv1 32))))
 (let (($x334 (= $x255 $x389)))
 (let (($x37 (= false false)))
 (let (($x257 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x156 (=> $x257 $x37)))
 (let (($x226 (= ?x303 (_ bv0 32))))
 (let (($x393 (= $x257 $x226)))
 (let (($x104 (and (and (and $x393 $x156) $x334) $x276)))
 (let (($x197 (= $x104 true)))
 (let (($x281 (forall ((input.ind-%var3165X (_ BitVec 32)) )(let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x231 (= input.ind-%var3165X input.spec-%var-y-0)))
 (let ((?x345 (ite $x231 ?x54 (_ bv0 32))))
 (let (($x31 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x31 ?x345 (_ bv0 32))))
 (let ((?x314 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3165X)))
 (let (($x359 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3165X)))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x361 $x359) (= ?x314 ?x160)))))))))))
 ))
 (let (($x381 (forall ((input.ind-%var3164X (_ BitVec 32)) )(let (($x231 (= input.ind-%var3164X input.spec-%var-y-0)))
 (let (($x31 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x263 (ite $x31 $x231 false)))
 (let (($x359 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3164X)))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x361 (= $x359 $x263))))))))
 ))
 (let ((?x68 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x326 (bvuge ?x68 (_ bv1 32))))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x234 (= $x361 $x326)))
 (let (($x19 (= ?x68 (_ bv0 32))))
 (let (($x351 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x340 (= $x351 $x19)))
 (let (($x62 (=> $x351 $x37)))
 (let (($x212 (and (and (and (and $x62 $x340) $x234) $x381) $x281)))
 (let (($x213 (= $x212 true)))
 (let ((?x323 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x348 (concat ?x245 (concat ?x7 ?x323)))))
 (let (($x367 (= ?x360 input.dst.llvm-%x)))
 (let (($x287 (= $x367 true)))
 (let (($x25 (= $x287 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x121 (concat ?x137 (concat ?x43 ?x131)))))
 (let (($x150 (= ?x135 input.dst.llvm-%y)))
 (let (($x158 (= $x150 true)))
 (let (($x167 (= $x158 true)))
 (let (($x105 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x113 (= $x105 true)))
 (let (($x30 (= $x113 true)))
 (let (($x128 (= $x30 true)))
 (let (($x123 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x134 (= $x123 true)))
 (let (($x124 (= $x134 true)))
 (let (($x117 (= $x124 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x108)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x94)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x111 $x96)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x99 $x100)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x9 $x78)))
 (let (($x74 (not $x98)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x59 $x50)))
 (let (($x58 (and (not $x92) $x74)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x76 $x47)))
 (let (($x89 (not $x87)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x41 $x81)))
 (let (($x57 (and (not $x82) $x89)))
 (let (($x102 (and (and (and (and (and (and $x57 $x58) $x93) $x83) $x106) $x90) $x26)))
 (let (($x101 (and $x102 $x97)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x67 (or false (or false (and (and true (or $x38 $x70)) (or $x65 $x80))))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x110 (and $x95 $x101)))
 (let (($x116 (= $x110 true)))
 (let (($x171 (= $x116 true)))
 (let (($x112 (= $x171 true)))
 (let (($x126 (and $x112 $x117)))
 (let (($x118 (and $x126 $x128)))
 (let (($x315 (and $x118 $x167)))
 (let (($x283 (and $x315 $x25)))
 (let (($x202 (and $x283 $x213)))
 (let (($x247 (and $x202 $x197)))
 (let (($x33 (and $x247 $x51)))
 (let (($x324 (and $x33 $x385)))
 (let (($x14 (and $x324 $x133)))
 (let (($x274 (and $x14 $x378)))
 (let (($x352 (and $x274 $x338)))
 (let (($x253 (and $x352 $x204)))
 (let (($x21 (and $x19 $x253)))
 (let (($x11 (= ?x54 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x246 (and $x11 $x21)))
 (let (($x300 (and $x37 $x246)))
 (let (($x34 (= input.spec-%var-m2-0.L2%18%bbentry ?x48)))
 (let (($x371 (and $x34 $x300)))
 (let (($x193 (and $x37 $x371)))
 (let (($x199 (=> $x193 $x173)))
 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x390 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x307 (= input.spec-%var-x-0 ?x390)))
 (let (($x159 (= $x307 true)))
 (let (($x173 (= $x159 true)))
 (let (($x223 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3241X (_ BitVec 32)) )(let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x231 (= input.ind-%var3241X input.spec-%var-y-0)))
 (let ((?x345 (ite $x231 ?x54 (_ bv0 32))))
 (let (($x388 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let ((?x239 (ite $x388 ?x345 (_ bv0 32))))
 (let ((?x235 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x349 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x289 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> (and $x289 $x349) (= ?x235 ?x239)))))))))))
 ))
 (let (($x237 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3240X (_ BitVec 32)) )(let (($x231 (= input.ind-%var3240X input.spec-%var-y-0)))
 (let (($x388 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let (($x362 (ite $x388 $x231 false)))
 (let (($x349 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3240X)))
 (let (($x289 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> $x289 (= $x349 $x362))))))))
 ))
 (let (($x290 (forall ((input.ind-%var3238X (_ BitVec 32)) )(let (($x52 (= input.ind-%var3238X input.spec-%var-x-0)))
 (let (($x225 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3238X)))
 (= $x225 $x52))))
 ))
 (let (($x236 (and (and $x290 $x237) $x223)))
 (let (($x204 (= $x236 true)))
 (let (($x151 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3225X (_ BitVec 32)) )(let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x231 (= input.ind-%var3225X input.spec-%var-y-0)))
 (let ((?x345 (ite $x231 ?x54 (_ bv0 32))))
 (let (($x388 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let ((?x239 (ite $x388 ?x345 (_ bv0 32))))
 (let ((?x282 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x302 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> (and $x302 $x313) (= ?x282 ?x239)))))))))))
 ))
 (let (($x364 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3224X (_ BitVec 32)) )(let (($x231 (= input.ind-%var3224X input.spec-%var-y-0)))
 (let (($x388 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let (($x362 (ite $x388 $x231 false)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3224X)))
 (let (($x302 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> $x302 (= $x313 $x362))))))))
 ))
 (let (($x259 (forall ((input.ind-%var3222X (_ BitVec 32)) )(let (($x52 (= input.ind-%var3222X input.spec-%var-x-0)))
 (let (($x178 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3222X)))
 (= $x178 $x52))))
 ))
 (let (($x256 (and (and $x259 $x364) $x151)))
 (let (($x338 (= $x256 true)))
 (let (($x187 (forall ((input.ind-%var3209X (_ BitVec 32)) )(let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x231 (= input.ind-%var3209X input.spec-%var-y-0)))
 (let ((?x345 (ite $x231 ?x54 (_ bv0 32))))
 (let ((?x194 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3209X)))
 (let (($x293 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3209X)))
 (=> $x293 (= ?x194 ?x345))))))))
 ))
 (let (($x311 (forall ((input.ind-%var3208X (_ BitVec 32)) )(let (($x231 (= input.ind-%var3208X input.spec-%var-y-0)))
 (let (($x293 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3208X)))
 (= $x293 $x231))))
 ))
 (let (($x183 (and $x311 $x187)))
 (let (($x378 (= $x183 true)))
 (let (($x329 (forall ((input.ind-%var3201X (_ BitVec 32)) )(let (($x335 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3201X)))
 (=> $x335 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3201X) (_ bv0 32)))))
 ))
 (let (($x366 (forall ((input.ind-%var3200X (_ BitVec 32)) )(let (($x335 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3200X)))
 (= $x335 false)))
 ))
 (let (($x85 (and $x366 $x329)))
 (let (($x133 (= $x85 true)))
 (let (($x262 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3195X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3195X)))
 (let (($x216 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> (and $x216 $x277) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3193X input.ind-%var3195X) (_ bv0 32))))))
 ))
 (let (($x143 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3194X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> $x216 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3194X) false))))
 ))
 (let (($x185 (forall ((input.ind-%var3192X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3192X)))
 (= $x139 false)))
 ))
 (let (($x170 (and (and $x185 $x143) $x262)))
 (let (($x385 (= $x170 true)))
 (let (($x392 (forall ((input.ind-%var3182X (_ BitVec 32)) )(let (($x231 (= input.ind-%var3182X input.spec-%var-y-0)))
 (let (($x31 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x263 (ite $x31 $x231 false)))
 (let (($x233 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3182X)))
 (= $x233 $x263))))))
 ))
 (let (($x180 (forall ((input.ind-%var3183X (_ BitVec 32)) )(let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x231 (= input.ind-%var3183X input.spec-%var-y-0)))
 (let ((?x345 (ite $x231 ?x54 (_ bv0 32))))
 (let (($x31 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x31 ?x345 (_ bv0 32))))
 (let ((?x248 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3183X)))
 (let (($x233 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3183X)))
 (=> $x233 (= ?x248 ?x160))))))))))
 ))
 (let (($x355 (and $x180 $x392)))
 (let (($x51 (= $x355 true)))
 (let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x63 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x27 (ite $x63 ?x54 (_ bv0 32))))
 (let (($x31 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x48 (ite $x31 ?x27 (_ bv0 32))))
 (let (($x162 (= input.spec-%tmpvar-6.L2%13%d.2 ?x48)))
 (let (($x255 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x276 (=> $x255 $x162)))
 (let (($x286 (ite $x31 $x63 false)))
 (let ((?x303 (ite $x286 (_ bv1 32) (_ bv0 32))))
 (let (($x389 (bvuge ?x303 (_ bv1 32))))
 (let (($x334 (= $x255 $x389)))
 (let (($x37 (= false false)))
 (let (($x257 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x156 (=> $x257 $x37)))
 (let (($x226 (= ?x303 (_ bv0 32))))
 (let (($x393 (= $x257 $x226)))
 (let (($x104 (and (and (and $x393 $x156) $x334) $x276)))
 (let (($x197 (= $x104 true)))
 (let (($x281 (forall ((input.ind-%var3165X (_ BitVec 32)) )(let ((?x54 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x231 (= input.ind-%var3165X input.spec-%var-y-0)))
 (let ((?x345 (ite $x231 ?x54 (_ bv0 32))))
 (let (($x31 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x31 ?x345 (_ bv0 32))))
 (let ((?x314 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3165X)))
 (let (($x359 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3165X)))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x361 $x359) (= ?x314 ?x160)))))))))))
 ))
 (let (($x381 (forall ((input.ind-%var3164X (_ BitVec 32)) )(let (($x231 (= input.ind-%var3164X input.spec-%var-y-0)))
 (let (($x31 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x263 (ite $x31 $x231 false)))
 (let (($x359 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3164X)))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x361 (= $x359 $x263))))))))
 ))
 (let ((?x68 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x326 (bvuge ?x68 (_ bv1 32))))
 (let (($x361 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x234 (= $x361 $x326)))
 (let (($x19 (= ?x68 (_ bv0 32))))
 (let (($x351 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x340 (= $x351 $x19)))
 (let (($x62 (=> $x351 $x37)))
 (let (($x212 (and (and (and (and $x62 $x340) $x234) $x381) $x281)))
 (let (($x213 (= $x212 true)))
 (let ((?x323 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x348 (concat ?x245 (concat ?x7 ?x323)))))
 (let (($x367 (= ?x360 input.dst.llvm-%x)))
 (let (($x287 (= $x367 true)))
 (let (($x25 (= $x287 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x121 (concat ?x137 (concat ?x43 ?x131)))))
 (let (($x150 (= ?x135 input.dst.llvm-%y)))
 (let (($x158 (= $x150 true)))
 (let (($x167 (= $x158 true)))
 (let (($x105 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x113 (= $x105 true)))
 (let (($x30 (= $x113 true)))
 (let (($x128 (= $x30 true)))
 (let (($x123 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x134 (= $x123 true)))
 (let (($x124 (= $x134 true)))
 (let (($x117 (= $x124 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x108)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x94)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x111 $x96)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x99 $x100)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x9 $x78)))
 (let (($x74 (not $x98)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x59 $x50)))
 (let (($x58 (and (not $x92) $x74)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x76 $x47)))
 (let (($x89 (not $x87)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x41 $x81)))
 (let (($x57 (and (not $x82) $x89)))
 (let (($x102 (and (and (and (and (and (and $x57 $x58) $x93) $x83) $x106) $x90) $x26)))
 (let (($x101 (and $x102 $x97)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x67 (or false (or false (and (and true (or $x38 $x70)) (or $x65 $x80))))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x110 (and $x95 $x101)))
 (let (($x116 (= $x110 true)))
 (let (($x171 (= $x116 true)))
 (let (($x112 (= $x171 true)))
 (let (($x126 (and $x112 $x117)))
 (let (($x118 (and $x126 $x128)))
 (let (($x315 (and $x118 $x167)))
 (let (($x283 (and $x315 $x25)))
 (let (($x202 (and $x283 $x213)))
 (let (($x247 (and $x202 $x197)))
 (let (($x33 (and $x247 $x51)))
 (let (($x324 (and $x33 $x385)))
 (let (($x14 (and $x324 $x133)))
 (let (($x274 (and $x14 $x378)))
 (let (($x352 (and $x274 $x338)))
 (let (($x253 (and $x352 $x204)))
 (let (($x21 (and $x19 $x253)))
 (let (($x11 (= ?x54 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x246 (and $x11 $x21)))
 (let (($x300 (and $x37 $x246)))
 (let (($x34 (= input.spec-%var-m2-0.L2%18%bbentry ?x48)))
 (let (($x371 (and $x34 $x300)))
 (let (($x193 (and $x37 $x371)))
 (let (($x199 (=> $x193 $x173)))
 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491039/query
