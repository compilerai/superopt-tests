==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x7 $x6)))
 (let (($x19 (and $x9 $x12)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x7 $x6)))
 (let (($x19 (and $x9 $x12)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (= true false)))
 (let (($x151 (= $x150 true)))
 (let (($x136 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var389X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var389X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var388X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var388X)))
 (= $x122 false)))
 ))
 (let (($x137 (and $x126 $x136)))
 (let (($x138 (= $x137 true)))
 (let (($x115 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var377X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var377X)))
 (let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> (and $x101 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var375X input.ind-%var377X) (_ bv0 32))))))
 ))
 (let (($x103 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var376X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> $x101 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var376X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var374X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var374X)))
 (= $x85 false)))
 ))
 (let (($x117 (and (and $x89 $x103) $x115)))
 (let (($x118 (= $x117 true)))
 (let (($x76 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x67)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x50 $x65)))
 (let (($x69 (and $x66 $x68)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x7 $x69)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x71 (and $x63 $x70)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x43 (concat ?x33 (concat ?x22 ?x14)))))
 (let (($x42 (= ?x8 input.dst.llvm-%n)))
 (let (($x6 (= $x42 true)))
 (let (($x30 (= $x6 true)))
 (let (($x75 (and $x30 $x74)))
 (let (($x80 (and $x75 $x79)))
 (let (($x119 (and $x80 $x118)))
 (let (($x139 (and $x119 $x138)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x140 (and $x17 $x139)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x141 (and $x18 $x140)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x142 (and $x41 $x141)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x143 (and $x44 $x142)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x144 (and $x49 $x143)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x145 (and $x45 $x144)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x146 (and $x47 $x145)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x147 (and $x12 $x146)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x148 (and $x10 $x147)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x149 (and $x21 $x148)))
 (let (($x152 (=> $x149 $x151)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (= true false)))
 (let (($x151 (= $x150 true)))
 (let (($x136 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var389X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var389X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var388X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var388X)))
 (= $x122 false)))
 ))
 (let (($x137 (and $x126 $x136)))
 (let (($x138 (= $x137 true)))
 (let (($x115 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var377X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var377X)))
 (let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> (and $x101 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var375X input.ind-%var377X) (_ bv0 32))))))
 ))
 (let (($x103 (forall ((input.ind-%var375X (_ BitVec 32)) (input.ind-%var376X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var375X)))
 (=> $x101 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var375X input.ind-%var376X) false))))
 ))
 (let (($x89 (forall ((input.ind-%var374X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var374X)))
 (= $x85 false)))
 ))
 (let (($x117 (and (and $x89 $x103) $x115)))
 (let (($x118 (= $x117 true)))
 (let (($x76 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x67)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x50 $x65)))
 (let (($x69 (and $x66 $x68)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x7 $x69)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x57)))))))
 (let (($x71 (and $x63 $x70)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x43 (concat ?x33 (concat ?x22 ?x14)))))
 (let (($x42 (= ?x8 input.dst.llvm-%n)))
 (let (($x6 (= $x42 true)))
 (let (($x30 (= $x6 true)))
 (let (($x75 (and $x30 $x74)))
 (let (($x80 (and $x75 $x79)))
 (let (($x119 (and $x80 $x118)))
 (let (($x139 (and $x119 $x138)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x140 (and $x17 $x139)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x141 (and $x18 $x140)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x142 (and $x41 $x141)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x143 (and $x44 $x142)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x144 (and $x49 $x143)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x145 (and $x45 $x144)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x146 (and $x47 $x145)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x147 (and $x12 $x146)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x148 (and $x10 $x147)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x149 (and $x21 $x148)))
 (let (($x152 (=> $x149 $x151)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfcbd2113)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x133 (= $x128 true)))
 (let (($x83 (forall ((input.ind-%var431X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var431X)))
 (=> $x153 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var431X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var430X)))
 (= $x153 false)))
 ))
 (let (($x94 (and $x131 $x83)))
 (let (($x87 (= $x94 true)))
 (let (($x146 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var425X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var425X)))
 (let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> (and $x126 $x117) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var423X input.ind-%var425X) (_ bv0 32))))))
 ))
 (let (($x134 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var424X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> $x126 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var424X) false))))
 ))
 (let (($x103 (forall ((input.ind-%var422X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var422X)))
 (= $x101 false)))
 ))
 (let (($x148 (and (and $x103 $x134) $x146)))
 (let (($x149 (= $x148 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x77 (concat ?x74 (concat ?x70 ?x68)))))
 (let (($x79 (= ?x78 input.dst.llvm-%n)))
 (let (($x80 (= $x79 true)))
 (let (($x84 (= $x80 true)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x7 (= $x63 true)))
 (let (($x50 (= $x7 true)))
 (let (($x64 (= $x50 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x53)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x6 $x52)))
 (let (($x56 (and $x62 $x55)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x32 $x56)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x22)))))))
 (let (($x57 (and $x42 $x54)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x65 (and $x60 $x64)))
 (let (($x85 (and $x65 $x84)))
 (let (($x150 (and $x85 $x149)))
 (let (($x98 (and $x150 $x87)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x120 (and $x35 $x98)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x121 (and $x48 $x120)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x110 (and $x39 $x121)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x92 (and $x26 $x110)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x99 (and $x31 $x92)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x124 (and $x19 $x99)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x105 (and $x46 $x124)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x106 (and $x34 $x105)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x111 (and $x11 $x106)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x132 (and $x24 $x111)))
 (let (($x82 (=> $x132 $x133)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x133 (= $x128 true)))
 (let (($x83 (forall ((input.ind-%var431X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var431X)))
 (=> $x153 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var431X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var430X)))
 (= $x153 false)))
 ))
 (let (($x94 (and $x131 $x83)))
 (let (($x87 (= $x94 true)))
 (let (($x146 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var425X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var425X)))
 (let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> (and $x126 $x117) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var423X input.ind-%var425X) (_ bv0 32))))))
 ))
 (let (($x134 (forall ((input.ind-%var423X (_ BitVec 32)) (input.ind-%var424X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var423X)))
 (=> $x126 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var423X input.ind-%var424X) false))))
 ))
 (let (($x103 (forall ((input.ind-%var422X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var422X)))
 (= $x101 false)))
 ))
 (let (($x148 (and (and $x103 $x134) $x146)))
 (let (($x149 (= $x148 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x77 (concat ?x74 (concat ?x70 ?x68)))))
 (let (($x79 (= ?x78 input.dst.llvm-%n)))
 (let (($x80 (= $x79 true)))
 (let (($x84 (= $x80 true)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x7 (= $x63 true)))
 (let (($x50 (= $x7 true)))
 (let (($x64 (= $x50 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x53)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x6 $x52)))
 (let (($x56 (and $x62 $x55)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x32 $x56)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x22)))))))
 (let (($x57 (and $x42 $x54)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x65 (and $x60 $x64)))
 (let (($x85 (and $x65 $x84)))
 (let (($x150 (and $x85 $x149)))
 (let (($x98 (and $x150 $x87)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x120 (and $x35 $x98)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x121 (and $x48 $x120)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x110 (and $x39 $x121)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x92 (and $x26 $x110)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x99 (and $x31 $x92)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x124 (and $x19 $x99)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x105 (and $x46 $x124)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x106 (and $x34 $x105)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x111 (and $x11 $x106)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x132 (and $x24 $x111)))
 (let (($x82 (=> $x132 $x133)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x107)))
 (let (($x112 (= ?x127 input.spec-%var-n-1)))
 (let (($x154 (= $x112 true)))
 (let (($x89 (forall ((input.ind-%var473X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var473X)))
 (=> $x17 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var473X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var472X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var472X)))
 (= $x17 false)))
 ))
 (let (($x100 (and $x91 $x89)))
 (let (($x114 (= $x100 true)))
 (let (($x106 (forall ((input.ind-%var465X (_ BitVec 32)) (input.ind-%var467X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var465X input.ind-%var467X)))
 (let (($x90 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var465X)))
 (=> (and $x90 $x149) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var465X input.ind-%var467X) (_ bv0 32))))))
 ))
 (let (($x81 (forall ((input.ind-%var465X (_ BitVec 32)) (input.ind-%var466X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var465X)))
 (=> $x90 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var465X input.ind-%var466X) false))))
 ))
 (let (($x147 (forall ((input.ind-%var464X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var464X)))
 (= $x117 false)))
 ))
 (let (($x132 (and (and $x147 $x81) $x106)))
 (let (($x128 (= $x132 true)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x85 (= $x84 true)))
 (let (($x95 (= $x85 true)))
 (let (($x101 (= $x95 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x74)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x56 $x72)))
 (let (($x70 (and $x73 $x69)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x55 $x70)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x63)))))))
 (let (($x71 (and $x76 $x68)))
 (let (($x75 (= $x71 true)))
 (let (($x78 (= $x75 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x32 (concat ?x13 (concat ?x37 ?x33)))))
 (let (($x51 (= ?x6 input.dst.llvm-%n)))
 (let (($x52 (= $x51 true)))
 (let (($x62 (= $x52 true)))
 (let (($x80 (and $x62 $x79)))
 (let (($x102 (and $x80 $x101)))
 (let (($x133 (and $x102 $x128)))
 (let (($x119 (and $x133 $x114)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x151 (and $x35 $x119)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x152 (and $x41 $x151)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x141 (and $x44 $x152)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x108 (and $x49 $x141)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x122 (and $x45 $x108)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x16 (and $x47 $x122)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x136 (and $x12 $x16)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x137 (and $x10 $x136)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x142 (and $x24 $x137)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x104 (and $x20 $x142)))
 (let (($x155 (=> $x104 $x154)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x107)))
 (let (($x112 (= ?x127 input.spec-%var-n-1)))
 (let (($x154 (= $x112 true)))
 (let (($x89 (forall ((input.ind-%var473X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var473X)))
 (=> $x17 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var473X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var472X (_ BitVec 32)) )(let (($x17 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var472X)))
 (= $x17 false)))
 ))
 (let (($x100 (and $x91 $x89)))
 (let (($x114 (= $x100 true)))
 (let (($x106 (forall ((input.ind-%var465X (_ BitVec 32)) (input.ind-%var467X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var465X input.ind-%var467X)))
 (let (($x90 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var465X)))
 (=> (and $x90 $x149) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var465X input.ind-%var467X) (_ bv0 32))))))
 ))
 (let (($x81 (forall ((input.ind-%var465X (_ BitVec 32)) (input.ind-%var466X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var465X)))
 (=> $x90 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var465X input.ind-%var466X) false))))
 ))
 (let (($x147 (forall ((input.ind-%var464X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var464X)))
 (= $x117 false)))
 ))
 (let (($x132 (and (and $x147 $x81) $x106)))
 (let (($x128 (= $x132 true)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x85 (= $x84 true)))
 (let (($x95 (= $x85 true)))
 (let (($x101 (= $x95 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x74)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x56 $x72)))
 (let (($x70 (and $x73 $x69)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x55 $x70)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x63)))))))
 (let (($x71 (and $x76 $x68)))
 (let (($x75 (= $x71 true)))
 (let (($x78 (= $x75 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x32 (concat ?x13 (concat ?x37 ?x33)))))
 (let (($x51 (= ?x6 input.dst.llvm-%n)))
 (let (($x52 (= $x51 true)))
 (let (($x62 (= $x52 true)))
 (let (($x80 (and $x62 $x79)))
 (let (($x102 (and $x80 $x101)))
 (let (($x133 (and $x102 $x128)))
 (let (($x119 (and $x133 $x114)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x151 (and $x35 $x119)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x152 (and $x41 $x151)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x141 (and $x44 $x152)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x108 (and $x49 $x141)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x122 (and $x45 $x108)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x16 (and $x47 $x122)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x136 (and $x12 $x16)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x137 (and $x10 $x136)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x142 (and $x24 $x137)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x104 (and $x20 $x142)))
 (let (($x155 (=> $x104 $x154)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x92)))
 (let (($x118 (= ?x135 input.dst.llvm-%n)))
 (let (($x138 (= $x118 true)))
 (let (($x98 (forall ((input.ind-%var491X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var491X)))
 (=> $x112 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var491X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var490X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var490X)))
 (= $x112 false)))
 ))
 (let (($x140 (and $x53 $x98)))
 (let (($x103 (= $x140 true)))
 (let (($x136 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var485X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var485X)))
 (let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> (and $x91 $x132) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var483X input.ind-%var485X) (_ bv0 32))))))
 ))
 (let (($x109 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var484X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> $x91 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var484X) false))))
 ))
 (let (($x81 (forall ((input.ind-%var482X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var482X)))
 (= $x90 false)))
 ))
 (let (($x142 (and (and $x81 $x109) $x136)))
 (let (($x104 (= $x142 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x85 (concat ?x79 (concat ?x68 ?x69)))))
 (let (($x101 (= ?x95 input.dst.llvm-%n)))
 (let (($x102 (= $x101 true)))
 (let (($x126 (= $x102 true)))
 (let (($x76 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (= $x76 true)))
 (let (($x56 (= $x55 true)))
 (let (($x77 (= $x56 true)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x58)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x52 $x57)))
 (let (($x61 (and $x66 $x60)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x42 $x61)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x37)))))))
 (let (($x63 (and $x51 $x59)))
 (let (($x7 (= $x63 true)))
 (let (($x50 (= $x7 true)))
 (let (($x64 (= $x50 true)))
 (let (($x72 (and $x64 $x77)))
 (let (($x117 (and $x72 $x126)))
 (let (($x97 (and $x117 $x104)))
 (let (($x115 (and $x97 $x103)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x130 (and $x25 $x115)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x146 (and $x39 $x130)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x153 (and $x26 $x146)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x82 (and $x31 $x153)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x93 (and $x19 $x82)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x110 (and $x46 $x93)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x143 (and $x34 $x110)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x123 (and $x11 $x143)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x67 (and $x18 $x123)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x94 (and $x43 $x67)))
 (let (($x86 (=> $x94 $x138)))
 (not $x86))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x92)))
 (let (($x118 (= ?x135 input.dst.llvm-%n)))
 (let (($x138 (= $x118 true)))
 (let (($x98 (forall ((input.ind-%var491X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var491X)))
 (=> $x112 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var491X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var490X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var490X)))
 (= $x112 false)))
 ))
 (let (($x140 (and $x53 $x98)))
 (let (($x103 (= $x140 true)))
 (let (($x136 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var485X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var485X)))
 (let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> (and $x91 $x132) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var483X input.ind-%var485X) (_ bv0 32))))))
 ))
 (let (($x109 (forall ((input.ind-%var483X (_ BitVec 32)) (input.ind-%var484X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var483X)))
 (=> $x91 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var483X input.ind-%var484X) false))))
 ))
 (let (($x81 (forall ((input.ind-%var482X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var482X)))
 (= $x90 false)))
 ))
 (let (($x142 (and (and $x81 $x109) $x136)))
 (let (($x104 (= $x142 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x85 (concat ?x79 (concat ?x68 ?x69)))))
 (let (($x101 (= ?x95 input.dst.llvm-%n)))
 (let (($x102 (= $x101 true)))
 (let (($x126 (= $x102 true)))
 (let (($x76 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (= $x76 true)))
 (let (($x56 (= $x55 true)))
 (let (($x77 (= $x56 true)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x58)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x52 $x57)))
 (let (($x61 (and $x66 $x60)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x42 $x61)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x37)))))))
 (let (($x63 (and $x51 $x59)))
 (let (($x7 (= $x63 true)))
 (let (($x50 (= $x7 true)))
 (let (($x64 (= $x50 true)))
 (let (($x72 (and $x64 $x77)))
 (let (($x117 (and $x72 $x126)))
 (let (($x97 (and $x117 $x104)))
 (let (($x115 (and $x97 $x103)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x130 (and $x25 $x115)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x146 (and $x39 $x130)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x153 (and $x26 $x146)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x82 (and $x31 $x153)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x93 (and $x19 $x82)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x110 (and $x46 $x93)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x143 (and $x34 $x110)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x123 (and $x11 $x143)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x67 (and $x18 $x123)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x94 (and $x43 $x67)))
 (let (($x86 (=> $x94 $x138)))
 (not $x86))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x100 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x141 (= $x100 true)))
 (let (($x121 (= $x141 true)))
 (let (($x114 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x118 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var509X)))
 (=> $x118 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var509X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var508X (_ BitVec 32)) )(let (($x118 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var508X)))
 (= $x118 false)))
 ))
 (let (($x113 (and $x40 $x114)))
 (let (($x134 (= $x113 true)))
 (let (($x143 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var503X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var503X)))
 (let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> (and $x53 $x142) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var501X input.ind-%var503X) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var502X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> $x53 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var502X) false))))
 ))
 (let (($x109 (forall ((input.ind-%var500X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var500X)))
 (= $x91 false)))
 ))
 (let (($x67 (and (and $x109 $x139) $x143)))
 (let (($x94 (= $x67 true)))
 (let (($x102 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x126 (= $x102 true)))
 (let (($x117 (= $x126 true)))
 (let (($x148 (= $x117 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x78)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x60 $x85)))
 (let (($x70 (and $x75 $x79)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x58 $x70)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x69 (and $x73 $x68)))
 (let (($x71 (= $x69 true)))
 (let (($x80 (= $x71 true)))
 (let (($x95 (= $x80 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x9 (concat ?x22 (concat ?x28 ?x14)))))
 (let (($x62 (= ?x42 input.dst.llvm-%n)))
 (let (($x54 (= $x62 true)))
 (let (($x57 (= $x54 true)))
 (let (($x101 (and $x57 $x95)))
 (let (($x90 (and $x101 $x148)))
 (let (($x87 (and $x90 $x94)))
 (let (($x147 (and $x87 $x134)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x131 (and $x48 $x147)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x105 (and $x44 $x131)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x133 (and $x49 $x105)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x107 (and $x45 $x133)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x127 (and $x47 $x107)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x152 (and $x12 $x127)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x120 (and $x10 $x152)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x17 (and $x24 $x120)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x155 (and $x21 $x17)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x89 (and $x36 $x155)))
 (let (($x15 (=> $x89 $x121)))
 (not $x15)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x100 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x141 (= $x100 true)))
 (let (($x121 (= $x141 true)))
 (let (($x114 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x118 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var509X)))
 (=> $x118 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var509X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var508X (_ BitVec 32)) )(let (($x118 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var508X)))
 (= $x118 false)))
 ))
 (let (($x113 (and $x40 $x114)))
 (let (($x134 (= $x113 true)))
 (let (($x143 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var503X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var503X)))
 (let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> (and $x53 $x142) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var501X input.ind-%var503X) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((input.ind-%var501X (_ BitVec 32)) (input.ind-%var502X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var501X)))
 (=> $x53 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var501X input.ind-%var502X) false))))
 ))
 (let (($x109 (forall ((input.ind-%var500X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var500X)))
 (= $x91 false)))
 ))
 (let (($x67 (and (and $x109 $x139) $x143)))
 (let (($x94 (= $x67 true)))
 (let (($x102 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x126 (= $x102 true)))
 (let (($x117 (= $x126 true)))
 (let (($x148 (= $x117 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x78)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x60 $x85)))
 (let (($x70 (and $x75 $x79)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x58 $x70)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x69 (and $x73 $x68)))
 (let (($x71 (= $x69 true)))
 (let (($x80 (= $x71 true)))
 (let (($x95 (= $x80 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x9 (concat ?x22 (concat ?x28 ?x14)))))
 (let (($x62 (= ?x42 input.dst.llvm-%n)))
 (let (($x54 (= $x62 true)))
 (let (($x57 (= $x54 true)))
 (let (($x101 (and $x57 $x95)))
 (let (($x90 (and $x101 $x148)))
 (let (($x87 (and $x90 $x94)))
 (let (($x147 (and $x87 $x134)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x131 (and $x48 $x147)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x105 (and $x44 $x131)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x133 (and $x49 $x105)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x107 (and $x45 $x133)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x127 (and $x47 $x107)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x152 (and $x12 $x127)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x120 (and $x10 $x152)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x17 (and $x24 $x120)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x155 (and $x21 $x17)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x89 (and $x36 $x155)))
 (let (($x15 (=> $x89 $x121)))
 (not $x15)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x151 (= false true)))
 (let (($x154 (= $x151 true)))
 (let (($x129 (forall ((input.ind-%var551X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var551X)))
 (=> $x15 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var551X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var550X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var550X)))
 (= $x15 false)))
 ))
 (let (($x81 (and $x138 $x129)))
 (let (($x29 (= $x81 true)))
 (let (($x120 (forall ((input.ind-%var543X (_ BitVec 32)) (input.ind-%var545X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var543X input.ind-%var545X)))
 (let (($x40 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var543X)))
 (=> (and $x40 $x67) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var543X input.ind-%var545X) (_ bv0 32))))))
 ))
 (let (($x124 (forall ((input.ind-%var543X (_ BitVec 32)) (input.ind-%var544X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var543X)))
 (=> $x40 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var543X input.ind-%var544X) false))))
 ))
 (let (($x139 (forall ((input.ind-%var542X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var542X)))
 (= $x53 false)))
 ))
 (let (($x155 (and (and $x139 $x124) $x120)))
 (let (($x89 (= $x155 true)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x148 (= $x117 true)))
 (let (($x90 (= $x148 true)))
 (let (($x106 (= $x90 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x70)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x63 $x78)))
 (let (($x69 (and $x79 $x68)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x72 $x69)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x56)))))))
 (let (($x80 (and $x85 $x71)))
 (let (($x95 (= $x80 true)))
 (let (($x101 (= $x95 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x42 (concat ?x28 (concat ?x37 ?x51)))))
 (let (($x54 (= ?x52 input.dst.llvm-%n)))
 (let (($x57 (= $x54 true)))
 (let (($x61 (= $x57 true)))
 (let (($x126 (and $x61 $x102)))
 (let (($x91 (and $x126 $x106)))
 (let (($x100 (and $x91 $x89)))
 (let (($x16 (and $x100 $x29)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x97 (and $x41 $x16)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x92 (and $x26 $x97)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x135 (and $x31 $x92)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x146 (and $x19 $x135)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x119 (and $x46 $x146)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x112 (and $x34 $x119)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x86 (and $x11 $x112)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x98 (and $x18 $x86)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x140 (and $x20 $x98)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x153 (and $x38 $x140)))
 (let (($x111 (=> $x153 $x154)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x151 (= false true)))
 (let (($x154 (= $x151 true)))
 (let (($x129 (forall ((input.ind-%var551X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var551X)))
 (=> $x15 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var551X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var550X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var550X)))
 (= $x15 false)))
 ))
 (let (($x81 (and $x138 $x129)))
 (let (($x29 (= $x81 true)))
 (let (($x120 (forall ((input.ind-%var543X (_ BitVec 32)) (input.ind-%var545X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var543X input.ind-%var545X)))
 (let (($x40 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var543X)))
 (=> (and $x40 $x67) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var543X input.ind-%var545X) (_ bv0 32))))))
 ))
 (let (($x124 (forall ((input.ind-%var543X (_ BitVec 32)) (input.ind-%var544X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var543X)))
 (=> $x40 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var543X input.ind-%var544X) false))))
 ))
 (let (($x139 (forall ((input.ind-%var542X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var542X)))
 (= $x53 false)))
 ))
 (let (($x155 (and (and $x139 $x124) $x120)))
 (let (($x89 (= $x155 true)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x148 (= $x117 true)))
 (let (($x90 (= $x148 true)))
 (let (($x106 (= $x90 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x70)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x63 $x78)))
 (let (($x69 (and $x79 $x68)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x72 $x69)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x56)))))))
 (let (($x80 (and $x85 $x71)))
 (let (($x95 (= $x80 true)))
 (let (($x101 (= $x95 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x42 (concat ?x28 (concat ?x37 ?x51)))))
 (let (($x54 (= ?x52 input.dst.llvm-%n)))
 (let (($x57 (= $x54 true)))
 (let (($x61 (= $x57 true)))
 (let (($x126 (and $x61 $x102)))
 (let (($x91 (and $x126 $x106)))
 (let (($x100 (and $x91 $x89)))
 (let (($x16 (and $x100 $x29)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x97 (and $x41 $x16)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x92 (and $x26 $x97)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x135 (and $x31 $x92)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x146 (and $x19 $x135)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x119 (and $x46 $x146)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x112 (and $x34 $x119)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x86 (and $x11 $x112)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x98 (and $x18 $x86)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x140 (and $x20 $x98)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x153 (and $x38 $x140)))
 (let (($x111 (=> $x153 $x154)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfcbd2113)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x83 (= $x132 true)))
 (let (($x109 (forall ((input.ind-%var593X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var593X)))
 (=> $x27 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var593X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var592X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var592X)))
 (= $x27 false)))
 ))
 (let (($x156 (and $x137 $x109)))
 (let (($x110 (= $x156 true)))
 (let (($x86 (forall ((input.ind-%var585X (_ BitVec 32)) (input.ind-%var587X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var585X input.ind-%var587X)))
 (let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var585X)))
 (=> (and $x138 $x155) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var585X input.ind-%var587X) (_ bv0 32))))))
 ))
 (let (($x103 (forall ((input.ind-%var585X (_ BitVec 32)) (input.ind-%var586X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var585X)))
 (=> $x138 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var585X input.ind-%var586X) false))))
 ))
 (let (($x124 (forall ((input.ind-%var584X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var584X)))
 (= $x40 false)))
 ))
 (let (($x140 (and (and $x124 $x103) $x86)))
 (let (($x153 (= $x140 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x148 (concat ?x102 (concat ?x71 ?x68)))))
 (let (($x106 (= ?x90 input.dst.llvm-%n)))
 (let (($x91 (= $x106 true)))
 (let (($x136 (= $x91 true)))
 (let (($x85 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x72 (= $x85 true)))
 (let (($x63 (= $x72 true)))
 (let (($x75 (= $x63 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x7)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x57 $x64)))
 (let (($x55 (and $x84 $x76)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x5 $x55)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x37)))))))
 (let (($x56 (and $x54 $x65)))
 (let (($x77 (= $x56 true)))
 (let (($x73 (= $x77 true)))
 (let (($x58 (= $x73 true)))
 (let (($x78 (and $x58 $x75)))
 (let (($x53 (and $x78 $x136)))
 (let (($x151 (and $x53 $x153)))
 (let (($x87 (and $x151 $x110)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x141 (and $x39 $x87)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x121 (and $x49 $x141)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x105 (and $x45 $x121)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x115 (and $x47 $x105)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x118 (and $x12 $x115)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x66 (and $x10 $x118)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x114 (and $x24 $x66)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x113 (and $x21 $x114)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x133 (and $x43 $x113)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x122 (and $x35 $x133)))
 (let (($x74 (=> $x122 $x83)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x83 (= $x132 true)))
 (let (($x109 (forall ((input.ind-%var593X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var593X)))
 (=> $x27 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var593X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var592X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var592X)))
 (= $x27 false)))
 ))
 (let (($x156 (and $x137 $x109)))
 (let (($x110 (= $x156 true)))
 (let (($x86 (forall ((input.ind-%var585X (_ BitVec 32)) (input.ind-%var587X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var585X input.ind-%var587X)))
 (let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var585X)))
 (=> (and $x138 $x155) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var585X input.ind-%var587X) (_ bv0 32))))))
 ))
 (let (($x103 (forall ((input.ind-%var585X (_ BitVec 32)) (input.ind-%var586X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var585X)))
 (=> $x138 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var585X input.ind-%var586X) false))))
 ))
 (let (($x124 (forall ((input.ind-%var584X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var584X)))
 (= $x40 false)))
 ))
 (let (($x140 (and (and $x124 $x103) $x86)))
 (let (($x153 (= $x140 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x148 (concat ?x102 (concat ?x71 ?x68)))))
 (let (($x106 (= ?x90 input.dst.llvm-%n)))
 (let (($x91 (= $x106 true)))
 (let (($x136 (= $x91 true)))
 (let (($x85 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x72 (= $x85 true)))
 (let (($x63 (= $x72 true)))
 (let (($x75 (= $x63 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x7)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x57 $x64)))
 (let (($x55 (and $x84 $x76)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x5 $x55)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x37)))))))
 (let (($x56 (and $x54 $x65)))
 (let (($x77 (= $x56 true)))
 (let (($x73 (= $x77 true)))
 (let (($x58 (= $x73 true)))
 (let (($x78 (and $x58 $x75)))
 (let (($x53 (and $x78 $x136)))
 (let (($x151 (and $x53 $x153)))
 (let (($x87 (and $x151 $x110)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x141 (and $x39 $x87)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x121 (and $x49 $x141)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x105 (and $x45 $x121)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x115 (and $x47 $x105)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x118 (and $x12 $x115)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x66 (and $x10 $x118)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x114 (and $x24 $x66)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x113 (and $x21 $x114)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x133 (and $x43 $x113)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x122 (and $x35 $x133)))
 (let (($x74 (=> $x122 $x83)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x134)))
 (let (($x107 (= ?x128 input.dst.llvm-%n)))
 (let (($x108 (= $x107 true)))
 (let (($x139 (forall ((input.ind-%var635X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var635X)))
 (=> $x82 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var635X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var634X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var634X)))
 (= $x82 false)))
 ))
 (let (($x145 (and $x93 $x139)))
 (let (($x152 (= $x145 true)))
 (let (($x114 (forall ((input.ind-%var627X (_ BitVec 32)) (input.ind-%var629X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var627X input.ind-%var629X)))
 (let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var627X)))
 (=> (and $x137 $x140) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var627X input.ind-%var629X) (_ bv0 32))))))
 ))
 (let (($x104 (forall ((input.ind-%var627X (_ BitVec 32)) (input.ind-%var628X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var627X)))
 (=> $x137 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var627X input.ind-%var628X) false))))
 ))
 (let (($x103 (forall ((input.ind-%var626X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var626X)))
 (= $x138 false)))
 ))
 (let (($x133 (and (and $x103 $x104) $x114)))
 (let (($x122 (= $x133 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x106 (concat ?x80 (concat ?x102 ?x95)))))
 (let (($x136 (= ?x91 input.dst.llvm-%n)))
 (let (($x53 (= $x136 true)))
 (let (($x143 (= $x53 true)))
 (let (($x72 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x63 (= $x72 true)))
 (let (($x75 (= $x63 true)))
 (let (($x78 (= $x75 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x76)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x61 $x84)))
 (let (($x65 (and $x7 $x55)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x62 $x65)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x33)))))))
 (let (($x77 (and $x57 $x56)))
 (let (($x73 (= $x77 true)))
 (let (($x58 (= $x73 true)))
 (let (($x60 (= $x58 true)))
 (let (($x79 (and $x60 $x78)))
 (let (($x40 (and $x79 $x143)))
 (let (($x132 (and $x40 $x122)))
 (let (($x100 (and $x132 $x152)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x154 (and $x44 $x100)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x111 (and $x31 $x154)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x92 (and $x19 $x111)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x147 (and $x46 $x92)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x15 (and $x34 $x147)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x30 (and $x11 $x15)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x129 (and $x18 $x30)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x81 (and $x20 $x129)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x135 (and $x25 $x81)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x88 (and $x41 $x135)))
 (let (($x96 (=> $x88 $x108)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x134)))
 (let (($x107 (= ?x128 input.dst.llvm-%n)))
 (let (($x108 (= $x107 true)))
 (let (($x139 (forall ((input.ind-%var635X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var635X)))
 (=> $x82 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var635X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var634X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var634X)))
 (= $x82 false)))
 ))
 (let (($x145 (and $x93 $x139)))
 (let (($x152 (= $x145 true)))
 (let (($x114 (forall ((input.ind-%var627X (_ BitVec 32)) (input.ind-%var629X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var627X input.ind-%var629X)))
 (let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var627X)))
 (=> (and $x137 $x140) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var627X input.ind-%var629X) (_ bv0 32))))))
 ))
 (let (($x104 (forall ((input.ind-%var627X (_ BitVec 32)) (input.ind-%var628X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var627X)))
 (=> $x137 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var627X input.ind-%var628X) false))))
 ))
 (let (($x103 (forall ((input.ind-%var626X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var626X)))
 (= $x138 false)))
 ))
 (let (($x133 (and (and $x103 $x104) $x114)))
 (let (($x122 (= $x133 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x106 (concat ?x80 (concat ?x102 ?x95)))))
 (let (($x136 (= ?x91 input.dst.llvm-%n)))
 (let (($x53 (= $x136 true)))
 (let (($x143 (= $x53 true)))
 (let (($x72 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x63 (= $x72 true)))
 (let (($x75 (= $x63 true)))
 (let (($x78 (= $x75 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x76)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x61 $x84)))
 (let (($x65 (and $x7 $x55)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x62 $x65)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x33)))))))
 (let (($x77 (and $x57 $x56)))
 (let (($x73 (= $x77 true)))
 (let (($x58 (= $x73 true)))
 (let (($x60 (= $x58 true)))
 (let (($x79 (and $x60 $x78)))
 (let (($x40 (and $x79 $x143)))
 (let (($x132 (and $x40 $x122)))
 (let (($x100 (and $x132 $x152)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x154 (and $x44 $x100)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x111 (and $x31 $x154)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x92 (and $x19 $x111)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x147 (and $x46 $x92)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x15 (and $x34 $x147)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x30 (and $x11 $x15)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x129 (and $x18 $x30)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x81 (and $x20 $x129)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x135 (and $x25 $x81)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x88 (and $x41 $x135)))
 (let (($x96 (=> $x88 $x108)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x156 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x105 (= $x156 true)))
 (let (($x150 (= $x105 true)))
 (let (($x110 (forall ((input.ind-%var653X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var653X)))
 (=> $x107 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var653X) (_ bv0 32)))))
 ))
 (let (($x8 (forall ((input.ind-%var652X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var652X)))
 (= $x107 false)))
 ))
 (let (($x97 (and $x8 $x110)))
 (let (($x149 (= $x97 true)))
 (let (($x129 (forall ((input.ind-%var645X (_ BitVec 32)) (input.ind-%var647X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var645X input.ind-%var647X)))
 (let (($x93 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var645X)))
 (=> (and $x93 $x133) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var645X input.ind-%var647X) (_ bv0 32))))))
 ))
 (let (($x131 (forall ((input.ind-%var645X (_ BitVec 32)) (input.ind-%var646X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var645X)))
 (=> $x93 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var645X input.ind-%var646X) false))))
 ))
 (let (($x104 (forall ((input.ind-%var644X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var644X)))
 (= $x137 false)))
 ))
 (let (($x135 (and (and $x104 $x131) $x129)))
 (let (($x88 (= $x135 true)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x143 (= $x53 true)))
 (let (($x40 (= $x143 true)))
 (let (($x120 (= $x40 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x68)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x55 $x106)))
 (let (($x101 (and $x71 $x80)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x76 $x101)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x85)))))))
 (let (($x95 (and $x117 $x102)))
 (let (($x69 (= $x95 true)))
 (let (($x126 (= $x69 true)))
 (let (($x91 (= $x126 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x42 (concat ?x52 (concat ?x51 ?x9)))))
 (let (($x50 (= ?x62 input.dst.llvm-%n)))
 (let (($x64 (= $x50 true)))
 (let (($x84 (= $x64 true)))
 (let (($x136 (and $x84 $x91)))
 (let (($x138 (and $x136 $x120)))
 (let (($x94 (and $x138 $x88)))
 (let (($x124 (and $x94 $x149)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x32 (and $x26 $x124)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x112 (and $x45 $x32)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x151 (and $x47 $x112)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x83 (and $x12 $x151)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x74 (and $x10 $x83)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x121 (and $x24 $x74)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x16 (and $x21 $x121)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x27 (and $x43 $x16)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x70 (and $x38 $x27)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x109 (and $x39 $x70)))
 (let (($x89 (=> $x109 $x150)))
 (not $x89)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x156 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x105 (= $x156 true)))
 (let (($x150 (= $x105 true)))
 (let (($x110 (forall ((input.ind-%var653X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var653X)))
 (=> $x107 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var653X) (_ bv0 32)))))
 ))
 (let (($x8 (forall ((input.ind-%var652X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var652X)))
 (= $x107 false)))
 ))
 (let (($x97 (and $x8 $x110)))
 (let (($x149 (= $x97 true)))
 (let (($x129 (forall ((input.ind-%var645X (_ BitVec 32)) (input.ind-%var647X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var645X input.ind-%var647X)))
 (let (($x93 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var645X)))
 (=> (and $x93 $x133) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var645X input.ind-%var647X) (_ bv0 32))))))
 ))
 (let (($x131 (forall ((input.ind-%var645X (_ BitVec 32)) (input.ind-%var646X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var645X)))
 (=> $x93 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var645X input.ind-%var646X) false))))
 ))
 (let (($x104 (forall ((input.ind-%var644X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var644X)))
 (= $x137 false)))
 ))
 (let (($x135 (and (and $x104 $x131) $x129)))
 (let (($x88 (= $x135 true)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x143 (= $x53 true)))
 (let (($x40 (= $x143 true)))
 (let (($x120 (= $x40 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x68)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x55 $x106)))
 (let (($x101 (and $x71 $x80)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x76 $x101)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x85)))))))
 (let (($x95 (and $x117 $x102)))
 (let (($x69 (= $x95 true)))
 (let (($x126 (= $x69 true)))
 (let (($x91 (= $x126 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x42 (concat ?x52 (concat ?x51 ?x9)))))
 (let (($x50 (= ?x62 input.dst.llvm-%n)))
 (let (($x64 (= $x50 true)))
 (let (($x84 (= $x64 true)))
 (let (($x136 (and $x84 $x91)))
 (let (($x138 (and $x136 $x120)))
 (let (($x94 (and $x138 $x88)))
 (let (($x124 (and $x94 $x149)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x32 (and $x26 $x124)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x112 (and $x45 $x32)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x151 (and $x47 $x112)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x83 (and $x12 $x151)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x74 (and $x10 $x83)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x121 (and $x24 $x74)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x16 (and $x21 $x121)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x27 (and $x43 $x16)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x70 (and $x38 $x27)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x109 (and $x39 $x70)))
 (let (($x89 (=> $x109 $x150)))
 (not $x89)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x165 false)))
 (let (($x167 (= $x166 true)))
 (let (($x48 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var695X)))
 (=> $x103 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var695X) (_ bv0 32)))))
 ))
 (let (($x134 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var694X)))
 (= $x103 false)))
 ))
 (let (($x98 (and $x134 $x48)))
 (let (($x67 (= $x98 true)))
 (let (($x154 (forall ((input.ind-%var687X (_ BitVec 32)) (input.ind-%var689X (_ BitVec 32)) )(let (($x151 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var687X input.ind-%var689X)))
 (let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var687X)))
 (=> (and $x27 $x151) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var687X input.ind-%var689X) (_ bv0 32))))))
 ))
 (let (($x109 (forall ((input.ind-%var687X (_ BitVec 32)) (input.ind-%var688X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var687X)))
 (=> $x27 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var687X input.ind-%var688X) false))))
 ))
 (let (($x116 (forall ((input.ind-%var686X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var686X)))
 (= $x99 false)))
 ))
 (let (($x118 (and (and $x116 $x109) $x154)))
 (let (($x125 (= $x118 true)))
 (let ((?x81 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x81)))
 (let (($x147 (= ?x15 input.dst.llvm-%n)))
 (let (($x30 (= $x147 true)))
 (let (($x129 (= $x30 true)))
 (let (($x93 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x133 (= $x93 true)))
 (let (($x59 (= $x133 true)))
 (let (($x86 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x137 (= $x86 true)))
 (let (($x123 (= $x137 true)))
 (let (($x104 (= $x123 true)))
 (let (($x53 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x143 (= $x53 true)))
 (let (($x40 (= $x143 true)))
 (let (($x120 (= $x40 true)))
 (let (($x95 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x69 (= $x95 true)))
 (let (($x126 (= $x69 true)))
 (let (($x91 (= $x126 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x68 (= $x71 true)))
 (let (($x80 (= $x68 true)))
 (let (($x101 (= $x80 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x85)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x79 $x60)))
 (let (($x63 (and $x73 $x72)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x14 $x63)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x62)))))))
 (let (($x78 (and $x56 $x75)))
 (let (($x117 (= $x78 true)))
 (let (($x76 (= $x117 true)))
 (let (($x55 (= $x76 true)))
 (let (($x44 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x44 true)))
 (let (($x6 (= $x5 true)))
 (let (($x90 (and $x6 $x55)))
 (let (($x102 (and $x90 $x101)))
 (let (($x136 (and $x102 $x91)))
 (let (($x138 (and $x136 $x120)))
 (let (($x114 (and $x138 $x104)))
 (let (($x17 (and $x114 $x59)))
 (let (($x135 (and $x17 $x129)))
 (let (($x152 (and $x135 $x125)))
 (let (($x115 (and $x152 $x67)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x142 (and $x49 $x115)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x146 (and $x19 $x142)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x157 (and $x46 $x146)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x158 (and $x34 $x157)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x159 (and $x11 $x158)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x160 (and $x18 $x159)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x161 (and $x25 $x160)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x162 (and $x23 $x161)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x163 (and $x39 $x162)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x164 (and $x43 $x163)))
 (let (($x168 (=> $x164 $x167)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x165 false)))
 (let (($x167 (= $x166 true)))
 (let (($x48 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var695X)))
 (=> $x103 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var695X) (_ bv0 32)))))
 ))
 (let (($x134 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var694X)))
 (= $x103 false)))
 ))
 (let (($x98 (and $x134 $x48)))
 (let (($x67 (= $x98 true)))
 (let (($x154 (forall ((input.ind-%var687X (_ BitVec 32)) (input.ind-%var689X (_ BitVec 32)) )(let (($x151 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var687X input.ind-%var689X)))
 (let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var687X)))
 (=> (and $x27 $x151) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var687X input.ind-%var689X) (_ bv0 32))))))
 ))
 (let (($x109 (forall ((input.ind-%var687X (_ BitVec 32)) (input.ind-%var688X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var687X)))
 (=> $x27 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var687X input.ind-%var688X) false))))
 ))
 (let (($x116 (forall ((input.ind-%var686X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var686X)))
 (= $x99 false)))
 ))
 (let (($x118 (and (and $x116 $x109) $x154)))
 (let (($x125 (= $x118 true)))
 (let ((?x81 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x81)))
 (let (($x147 (= ?x15 input.dst.llvm-%n)))
 (let (($x30 (= $x147 true)))
 (let (($x129 (= $x30 true)))
 (let (($x93 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x133 (= $x93 true)))
 (let (($x59 (= $x133 true)))
 (let (($x86 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x137 (= $x86 true)))
 (let (($x123 (= $x137 true)))
 (let (($x104 (= $x123 true)))
 (let (($x53 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x143 (= $x53 true)))
 (let (($x40 (= $x143 true)))
 (let (($x120 (= $x40 true)))
 (let (($x95 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x69 (= $x95 true)))
 (let (($x126 (= $x69 true)))
 (let (($x91 (= $x126 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x68 (= $x71 true)))
 (let (($x80 (= $x68 true)))
 (let (($x101 (= $x80 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x85)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x79 $x60)))
 (let (($x63 (and $x73 $x72)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x14 $x63)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x62)))))))
 (let (($x78 (and $x56 $x75)))
 (let (($x117 (= $x78 true)))
 (let (($x76 (= $x117 true)))
 (let (($x55 (= $x76 true)))
 (let (($x44 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x44 true)))
 (let (($x6 (= $x5 true)))
 (let (($x90 (and $x6 $x55)))
 (let (($x102 (and $x90 $x101)))
 (let (($x136 (and $x102 $x91)))
 (let (($x138 (and $x136 $x120)))
 (let (($x114 (and $x138 $x104)))
 (let (($x17 (and $x114 $x59)))
 (let (($x135 (and $x17 $x129)))
 (let (($x152 (and $x135 $x125)))
 (let (($x115 (and $x152 $x67)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x142 (and $x49 $x115)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x146 (and $x19 $x142)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x157 (and $x46 $x146)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x158 (and $x34 $x157)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x159 (and $x11 $x158)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x160 (and $x18 $x159)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x161 (and $x25 $x160)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x162 (and $x23 $x161)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x163 (and $x39 $x162)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x164 (and $x43 $x163)))
 (let (($x168 (=> $x164 $x167)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x88 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x88)))
 (let (($x155 (= ?x94 input.spec-%var-n-1)))
 (let (($x32 (= $x155 true)))
 (let (($x166 (forall ((input.ind-%var737X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var737X)))
 (=> $x98 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var737X) (_ bv0 32)))))
 ))
 (let (($x146 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var736X)))
 (= $x98 false)))
 ))
 (let (($x167 (and $x146 $x166)))
 (let (($x168 (= $x167 true)))
 (let (($x103 (forall ((input.ind-%var729X (_ BitVec 32)) (input.ind-%var731X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var729X input.ind-%var731X)))
 (let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var729X)))
 (=> (and $x27 $x107) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var729X input.ind-%var731X) (_ bv0 32))))))
 ))
 (let (($x16 (forall ((input.ind-%var729X (_ BitVec 32)) (input.ind-%var730X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var729X)))
 (=> $x27 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var729X input.ind-%var730X) false))))
 ))
 (let (($x81 (forall ((input.ind-%var728X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var728X)))
 (= $x133 false)))
 ))
 (let (($x134 (and (and $x81 $x16) $x103)))
 (let (($x82 (= $x134 true)))
 (let (($x120 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x138 (= $x120 true)))
 (let (($x86 (= $x138 true)))
 (let (($x137 (= $x86 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x102)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x58 $x80)))
 (let (($x69 (and $x101 $x95)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x77 $x69)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x78)))))))
 (let (($x91 (and $x71 $x126)))
 (let (($x136 (= $x91 true)))
 (let (($x53 (= $x136 true)))
 (let (($x143 (= $x53 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x50 (concat ?x54 (concat ?x37 ?x6)))))
 (let (($x56 (= ?x64 input.dst.llvm-%n)))
 (let (($x33 (= $x56 true)))
 (let (($x14 (= $x33 true)))
 (let (($x40 (and $x14 $x143)))
 (let (($x123 (and $x40 $x137)))
 (let (($x92 (and $x123 $x82)))
 (let (($x169 (and $x92 $x168)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x42 (and $x31 $x169)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x144 (and $x47 $x42)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x96 (and $x12 $x144)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x8 (and $x10 $x96)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x83 (and $x24 $x8)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x7 (and $x21 $x83)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x110 (and $x38 $x7)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x97 (and $x39 $x110)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x156 (and $x23 $x97)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x89 (and $x41 $x156)))
 (let (($x74 (=> $x89 $x32)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x88 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x88)))
 (let (($x155 (= ?x94 input.spec-%var-n-1)))
 (let (($x32 (= $x155 true)))
 (let (($x166 (forall ((input.ind-%var737X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var737X)))
 (=> $x98 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var737X) (_ bv0 32)))))
 ))
 (let (($x146 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var736X)))
 (= $x98 false)))
 ))
 (let (($x167 (and $x146 $x166)))
 (let (($x168 (= $x167 true)))
 (let (($x103 (forall ((input.ind-%var729X (_ BitVec 32)) (input.ind-%var731X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var729X input.ind-%var731X)))
 (let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var729X)))
 (=> (and $x27 $x107) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var729X input.ind-%var731X) (_ bv0 32))))))
 ))
 (let (($x16 (forall ((input.ind-%var729X (_ BitVec 32)) (input.ind-%var730X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var729X)))
 (=> $x27 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var729X input.ind-%var730X) false))))
 ))
 (let (($x81 (forall ((input.ind-%var728X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var728X)))
 (= $x133 false)))
 ))
 (let (($x134 (and (and $x81 $x16) $x103)))
 (let (($x82 (= $x134 true)))
 (let (($x120 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x138 (= $x120 true)))
 (let (($x86 (= $x138 true)))
 (let (($x137 (= $x86 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x102)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x58 $x80)))
 (let (($x69 (and $x101 $x95)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x77 $x69)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x78)))))))
 (let (($x91 (and $x71 $x126)))
 (let (($x136 (= $x91 true)))
 (let (($x53 (= $x136 true)))
 (let (($x143 (= $x53 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x50 (concat ?x54 (concat ?x37 ?x6)))))
 (let (($x56 (= ?x64 input.dst.llvm-%n)))
 (let (($x33 (= $x56 true)))
 (let (($x14 (= $x33 true)))
 (let (($x40 (and $x14 $x143)))
 (let (($x123 (and $x40 $x137)))
 (let (($x92 (and $x123 $x82)))
 (let (($x169 (and $x92 $x168)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x42 (and $x31 $x169)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x144 (and $x47 $x42)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x96 (and $x12 $x144)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x8 (and $x10 $x96)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x83 (and $x24 $x8)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x7 (and $x21 $x83)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x110 (and $x38 $x7)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x97 (and $x39 $x110)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x156 (and $x23 $x97)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x89 (and $x41 $x156)))
 (let (($x74 (=> $x89 $x32)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x154 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x154)))
 (let (($x158 (= ?x162 input.dst.llvm-%n)))
 (let (($x163 (= $x158 true)))
 (let (($x140 (forall ((input.ind-%var755X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var755X)))
 (=> $x155 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var755X) (_ bv0 32)))))
 ))
 (let (($x79 (forall ((input.ind-%var754X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var754X)))
 (= $x155 false)))
 ))
 (let (($x159 (and $x79 $x140)))
 (let (($x104 (= $x159 true)))
 (let (($x110 (forall ((input.ind-%var747X (_ BitVec 32)) (input.ind-%var749X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var747X input.ind-%var749X)))
 (let (($x146 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var747X)))
 (=> (and $x146 $x134) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var747X input.ind-%var749X) (_ bv0 32))))))
 ))
 (let (($x164 (forall ((input.ind-%var747X (_ BitVec 32)) (input.ind-%var748X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var747X)))
 (=> $x146 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var747X input.ind-%var748X) false))))
 ))
 (let (($x16 (forall ((input.ind-%var746X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var746X)))
 (= $x27 false)))
 ))
 (let (($x156 (and (and $x16 $x164) $x110)))
 (let (($x89 (= $x156 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x138 (concat ?x143 (concat ?x126 ?x95)))))
 (let (($x137 (= ?x86 input.dst.llvm-%n)))
 (let (($x123 (= $x137 true)))
 (let (($x93 (= $x123 true)))
 (let (($x71 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (= $x71 true)))
 (let (($x58 (= $x77 true)))
 (let (($x68 (= $x58 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x85)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x33 $x73)))
 (let (($x75 (and $x106 $x63)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x62 $x75)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x37)))))))
 (let (($x78 (and $x56 $x72)))
 (let (($x117 (= $x78 true)))
 (let (($x76 (= $x117 true)))
 (let (($x55 (= $x76 true)))
 (let (($x80 (and $x55 $x68)))
 (let (($x133 (and $x80 $x93)))
 (let (($x87 (and $x133 $x89)))
 (let (($x114 (and $x87 $x104)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x17 (and $x45 $x114)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x129 (and $x46 $x17)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x119 (and $x34 $x129)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x141 (and $x11 $x119)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x48 (and $x18 $x141)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x122 (and $x25 $x48)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x147 (and $x36 $x122)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x116 (and $x22 $x147)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x115 (and $x57 $x116)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x109 (and $x26 $x115)))
 (let (($x128 (=> $x109 $x163)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x154 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x154)))
 (let (($x158 (= ?x162 input.dst.llvm-%n)))
 (let (($x163 (= $x158 true)))
 (let (($x140 (forall ((input.ind-%var755X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var755X)))
 (=> $x155 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var755X) (_ bv0 32)))))
 ))
 (let (($x79 (forall ((input.ind-%var754X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var754X)))
 (= $x155 false)))
 ))
 (let (($x159 (and $x79 $x140)))
 (let (($x104 (= $x159 true)))
 (let (($x110 (forall ((input.ind-%var747X (_ BitVec 32)) (input.ind-%var749X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var747X input.ind-%var749X)))
 (let (($x146 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var747X)))
 (=> (and $x146 $x134) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var747X input.ind-%var749X) (_ bv0 32))))))
 ))
 (let (($x164 (forall ((input.ind-%var747X (_ BitVec 32)) (input.ind-%var748X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var747X)))
 (=> $x146 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var747X input.ind-%var748X) false))))
 ))
 (let (($x16 (forall ((input.ind-%var746X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var746X)))
 (= $x27 false)))
 ))
 (let (($x156 (and (and $x16 $x164) $x110)))
 (let (($x89 (= $x156 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x138 (concat ?x143 (concat ?x126 ?x95)))))
 (let (($x137 (= ?x86 input.dst.llvm-%n)))
 (let (($x123 (= $x137 true)))
 (let (($x93 (= $x123 true)))
 (let (($x71 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (= $x71 true)))
 (let (($x58 (= $x77 true)))
 (let (($x68 (= $x58 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x85)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x33 $x73)))
 (let (($x75 (and $x106 $x63)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x62 $x75)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x37)))))))
 (let (($x78 (and $x56 $x72)))
 (let (($x117 (= $x78 true)))
 (let (($x76 (= $x117 true)))
 (let (($x55 (= $x76 true)))
 (let (($x80 (and $x55 $x68)))
 (let (($x133 (and $x80 $x93)))
 (let (($x87 (and $x133 $x89)))
 (let (($x114 (and $x87 $x104)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x17 (and $x45 $x114)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x129 (and $x46 $x17)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x119 (and $x34 $x129)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x141 (and $x11 $x119)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x48 (and $x18 $x141)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x122 (and $x25 $x48)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x147 (and $x36 $x122)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x116 (and $x22 $x147)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x115 (and $x57 $x116)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x109 (and $x26 $x115)))
 (let (($x128 (=> $x109 $x163)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x288 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x289 (= $x288 false)))
 (let (($x290 (= $x289 true)))
 (let (($x272 (forall ((input.ind-%var809X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var809X)))
 (=> $x96 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var809X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var808X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var808X)))
 (= $x96 false)))
 ))
 (let (($x273 (and $x266 $x272)))
 (let (($x274 (= $x273 true)))
 (let (($x258 (forall ((input.ind-%var801X (_ BitVec 32)) (input.ind-%var803X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var801X input.ind-%var803X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var801X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var801X input.ind-%var803X) (_ bv0 32))))))
 ))
 (let (($x251 (forall ((input.ind-%var801X (_ BitVec 32)) (input.ind-%var802X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var801X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var801X input.ind-%var802X) false))))
 ))
 (let (($x244 (forall ((input.ind-%var800X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var800X)))
 (= $x171 false)))
 ))
 (let (($x260 (and (and $x244 $x251) $x258)))
 (let (($x261 (= $x260 true)))
 (let (($x236 (forall ((input.ind-%var789X (_ BitVec 32)) (input.ind-%var791X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var789X input.ind-%var791X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var789X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var789X input.ind-%var791X) (_ bv0 32))))))
 ))
 (let (($x229 (forall ((input.ind-%var789X (_ BitVec 32)) (input.ind-%var790X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var789X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var789X input.ind-%var790X) false))))
 ))
 (let (($x222 (forall ((input.ind-%var788X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var788X)))
 (= $x171 false)))
 ))
 (let (($x238 (and (and $x222 $x229) $x236)))
 (let (($x239 (= $x238 true)))
 (let (($x215 (forall ((input.ind-%var779X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var779X)))
 (=> $x96 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var779X) (_ bv0 32)))))
 ))
 (let (($x209 (forall ((input.ind-%var778X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var778X)))
 (= $x96 false)))
 ))
 (let (($x216 (and $x209 $x215)))
 (let (($x217 (= $x216 true)))
 (let (($x201 (forall ((input.ind-%var771X (_ BitVec 32)) (input.ind-%var773X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var771X input.ind-%var773X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var771X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var771X input.ind-%var773X) (_ bv0 32))))))
 ))
 (let (($x189 (forall ((input.ind-%var771X (_ BitVec 32)) (input.ind-%var772X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var771X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var771X input.ind-%var772X) false))))
 ))
 (let (($x175 (forall ((input.ind-%var770X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var770X)))
 (= $x171 false)))
 ))
 (let (($x203 (and (and $x175 $x189) $x201)))
 (let (($x204 (= $x203 true)))
 (let (($x139 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var761X)))
 (=> $x96 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var761X) (_ bv0 32)))))
 ))
 (let (($x157 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var760X)))
 (= $x96 false)))
 ))
 (let (($x111 (and $x157 $x139)))
 (let (($x145 (= $x111 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x84)))
 (let (($x94 (= ?x51 input.dst.llvm-%n)))
 (let (($x144 (= $x94 true)))
 (let (($x29 (= $x144 true)))
 (let (($x81 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x81 true)))
 (let (($x152 (= $x112 true)))
 (let (($x125 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x165 (= $x125 true)))
 (let (($x168 (= $x165 true)))
 (let (($x161 (= $x168 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x107 (= $x99 true)))
 (let (($x82 (= $x107 true)))
 (let (($x42 (= $x82 true)))
 (let (($x128 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x128 true)))
 (let (($x49 (= $x30 true)))
 (let (($x102 (= $x49 true)))
 (let (($x113 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x154 (= $x113 true)))
 (let (($x162 (= $x154 true)))
 (let (($x158 (= $x162 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x17)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x70 $x104)))
 (let (($x119 (and $x114 $x129)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x97 $x119)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x89)))))))
 (let (($x48 (and $x100 $x141)))
 (let (($x122 (= $x48 true)))
 (let (($x147 (= $x122 true)))
 (let (($x116 (= $x147 true)))
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x16 true)))
 (let (($x146 (= $x103 true)))
 (let (($x93 (= (_ bv0 32) input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x133 (= $x93 true)))
 (let (($x135 (= $x133 true)))
 (let (($x40 (= (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x86 (= $x40 true)))
 (let (($x137 (= $x86 true)))
 (let (($x143 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x69 (= $x143 true)))
 (let (($x126 (= $x69 true)))
 (let (($x95 (= $x126 true)))
 (let (($x101 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x120 (= $x101 true)))
 (let (($x138 (= $x120 true)))
 (let (($x136 (= $x138 true)))
 (let (($x71 (bvsle input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x77 (= $x71 true)))
 (let (($x58 (= $x77 true)))
 (let (($x68 (= $x58 true)))
 (let (($x78 (bvule input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x117 (= $x78 true)))
 (let (($x76 (= $x117 true)))
 (let (($x55 (= $x76 true)))
 (let (($x73 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x106 (= $x73 true)))
 (let (($x85 (= $x106 true)))
 (let (($x63 (= $x85 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x62 (= $x5 true)))
 (let (($x33 (= $x62 true)))
 (let (($x14 (= $x33 true)))
 (let (($x6 (bvsle input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x65 (= $x6 true)))
 (let (($x9 (= $x65 true)))
 (let (($x64 (= $x9 true)))
 (let (($x54 (= ?x51 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x52 (= $x54 true)))
 (let (($x13 (= $x52 true)))
 (let (($x56 (and $x13 $x64)))
 (let (($x60 (and $x56 $x14)))
 (let (($x75 (and $x60 $x63)))
 (let (($x90 (and $x75 $x55)))
 (let (($x80 (and $x90 $x68)))
 (let (($x53 (and $x80 $x136)))
 (let (($x91 (and $x53 $x95)))
 (let (($x123 (and $x91 $x137)))
 (let (($x27 (and $x123 $x135)))
 (let (($x134 (and $x27 $x146)))
 (let (($x115 (and $x134 $x116)))
 (let (($x163 (and $x115 $x158)))
 (let (($x32 (and $x163 $x102)))
 (let (($x132 (and $x32 $x42)))
 (let (($x131 (and $x132 $x161)))
 (let (($x92 (and $x131 $x152)))
 (let (($x98 (and $x92 $x29)))
 (let (($x148 (and $x98 $x145)))
 (let (($x205 (and $x148 $x204)))
 (let (($x218 (and $x205 $x217)))
 (let (($x240 (and $x218 $x239)))
 (let (($x262 (and $x240 $x261)))
 (let (($x275 (and $x262 $x274)))
 (let (($x61 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x276 (and $x61 $x275)))
 (let (($x45 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x277 (and $x45 $x276)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x278 (and $x19 $x277)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x279 (and $x12 $x278)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x280 (and $x10 $x279)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x281 (and $x24 $x280)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x282 (and $x21 $x281)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x283 (and $x38 $x282)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x284 (and $x23 $x283)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x285 (and $x43 $x284)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x286 (and $x22 $x285)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x287 (and $x31 $x286)))
 (let (($x291 (=> $x287 $x290)))
 (not $x291))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x288 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x289 (= $x288 false)))
 (let (($x290 (= $x289 true)))
 (let (($x272 (forall ((input.ind-%var809X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var809X)))
 (=> $x96 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var809X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var808X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var808X)))
 (= $x96 false)))
 ))
 (let (($x273 (and $x266 $x272)))
 (let (($x274 (= $x273 true)))
 (let (($x258 (forall ((input.ind-%var801X (_ BitVec 32)) (input.ind-%var803X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var801X input.ind-%var803X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var801X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var801X input.ind-%var803X) (_ bv0 32))))))
 ))
 (let (($x251 (forall ((input.ind-%var801X (_ BitVec 32)) (input.ind-%var802X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var801X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var801X input.ind-%var802X) false))))
 ))
 (let (($x244 (forall ((input.ind-%var800X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var800X)))
 (= $x171 false)))
 ))
 (let (($x260 (and (and $x244 $x251) $x258)))
 (let (($x261 (= $x260 true)))
 (let (($x236 (forall ((input.ind-%var789X (_ BitVec 32)) (input.ind-%var791X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var789X input.ind-%var791X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var789X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var789X input.ind-%var791X) (_ bv0 32))))))
 ))
 (let (($x229 (forall ((input.ind-%var789X (_ BitVec 32)) (input.ind-%var790X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var789X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var789X input.ind-%var790X) false))))
 ))
 (let (($x222 (forall ((input.ind-%var788X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var788X)))
 (= $x171 false)))
 ))
 (let (($x238 (and (and $x222 $x229) $x236)))
 (let (($x239 (= $x238 true)))
 (let (($x215 (forall ((input.ind-%var779X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var779X)))
 (=> $x96 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var779X) (_ bv0 32)))))
 ))
 (let (($x209 (forall ((input.ind-%var778X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var778X)))
 (= $x96 false)))
 ))
 (let (($x216 (and $x209 $x215)))
 (let (($x217 (= $x216 true)))
 (let (($x201 (forall ((input.ind-%var771X (_ BitVec 32)) (input.ind-%var773X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var771X input.ind-%var773X)))
 (let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var771X)))
 (=> (and $x187 $x182) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var771X input.ind-%var773X) (_ bv0 32))))))
 ))
 (let (($x189 (forall ((input.ind-%var771X (_ BitVec 32)) (input.ind-%var772X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var771X)))
 (=> $x187 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var771X input.ind-%var772X) false))))
 ))
 (let (($x175 (forall ((input.ind-%var770X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var770X)))
 (= $x171 false)))
 ))
 (let (($x203 (and (and $x175 $x189) $x201)))
 (let (($x204 (= $x203 true)))
 (let (($x139 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var761X)))
 (=> $x96 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var761X) (_ bv0 32)))))
 ))
 (let (($x157 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var760X)))
 (= $x96 false)))
 ))
 (let (($x111 (and $x157 $x139)))
 (let (($x145 (= $x111 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x84)))
 (let (($x94 (= ?x51 input.dst.llvm-%n)))
 (let (($x144 (= $x94 true)))
 (let (($x29 (= $x144 true)))
 (let (($x81 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x81 true)))
 (let (($x152 (= $x112 true)))
 (let (($x125 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x165 (= $x125 true)))
 (let (($x168 (= $x165 true)))
 (let (($x161 (= $x168 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x107 (= $x99 true)))
 (let (($x82 (= $x107 true)))
 (let (($x42 (= $x82 true)))
 (let (($x128 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x128 true)))
 (let (($x49 (= $x30 true)))
 (let (($x102 (= $x49 true)))
 (let (($x113 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x154 (= $x113 true)))
 (let (($x162 (= $x154 true)))
 (let (($x158 (= $x162 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x17)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x70 $x104)))
 (let (($x119 (and $x114 $x129)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x97 $x119)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x89)))))))
 (let (($x48 (and $x100 $x141)))
 (let (($x122 (= $x48 true)))
 (let (($x147 (= $x122 true)))
 (let (($x116 (= $x147 true)))
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x16 true)))
 (let (($x146 (= $x103 true)))
 (let (($x93 (= (_ bv0 32) input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x133 (= $x93 true)))
 (let (($x135 (= $x133 true)))
 (let (($x40 (= (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x86 (= $x40 true)))
 (let (($x137 (= $x86 true)))
 (let (($x143 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x69 (= $x143 true)))
 (let (($x126 (= $x69 true)))
 (let (($x95 (= $x126 true)))
 (let (($x101 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x120 (= $x101 true)))
 (let (($x138 (= $x120 true)))
 (let (($x136 (= $x138 true)))
 (let (($x71 (bvsle input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x77 (= $x71 true)))
 (let (($x58 (= $x77 true)))
 (let (($x68 (= $x58 true)))
 (let (($x78 (bvule input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x117 (= $x78 true)))
 (let (($x76 (= $x117 true)))
 (let (($x55 (= $x76 true)))
 (let (($x73 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x106 (= $x73 true)))
 (let (($x85 (= $x106 true)))
 (let (($x63 (= $x85 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x62 (= $x5 true)))
 (let (($x33 (= $x62 true)))
 (let (($x14 (= $x33 true)))
 (let (($x6 (bvsle input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x65 (= $x6 true)))
 (let (($x9 (= $x65 true)))
 (let (($x64 (= $x9 true)))
 (let (($x54 (= ?x51 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x52 (= $x54 true)))
 (let (($x13 (= $x52 true)))
 (let (($x56 (and $x13 $x64)))
 (let (($x60 (and $x56 $x14)))
 (let (($x75 (and $x60 $x63)))
 (let (($x90 (and $x75 $x55)))
 (let (($x80 (and $x90 $x68)))
 (let (($x53 (and $x80 $x136)))
 (let (($x91 (and $x53 $x95)))
 (let (($x123 (and $x91 $x137)))
 (let (($x27 (and $x123 $x135)))
 (let (($x134 (and $x27 $x146)))
 (let (($x115 (and $x134 $x116)))
 (let (($x163 (and $x115 $x158)))
 (let (($x32 (and $x163 $x102)))
 (let (($x132 (and $x32 $x42)))
 (let (($x131 (and $x132 $x161)))
 (let (($x92 (and $x131 $x152)))
 (let (($x98 (and $x92 $x29)))
 (let (($x148 (and $x98 $x145)))
 (let (($x205 (and $x148 $x204)))
 (let (($x218 (and $x205 $x217)))
 (let (($x240 (and $x218 $x239)))
 (let (($x262 (and $x240 $x261)))
 (let (($x275 (and $x262 $x274)))
 (let (($x61 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x276 (and $x61 $x275)))
 (let (($x45 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x277 (and $x45 $x276)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x278 (and $x19 $x277)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x279 (and $x12 $x278)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x280 (and $x10 $x279)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x281 (and $x24 $x280)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x282 (and $x21 $x281)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x283 (and $x38 $x282)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x284 (and $x23 $x283)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x285 (and $x43 $x284)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x286 (and $x22 $x285)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x287 (and $x31 $x286)))
 (let (($x291 (=> $x287 $x290)))
 (not $x291))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x248 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x264 (not $x248)))
 (let (($x242 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (=> $x242 $x264)))
 (let (($x130 (= $x173 true)))
 (let (($x105 (= $x130 true)))
 (let (($x245 (forall ((input.ind-%var887X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var887X)))
 (=> $x109 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var887X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var886X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var886X)))
 (= $x109 false)))
 ))
 (let (($x230 (and $x170 $x245)))
 (let (($x206 (= $x230 true)))
 (let (($x28 (forall ((input.ind-%var879X (_ BitVec 32)) (input.ind-%var881X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var879X input.ind-%var881X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var879X)))
 (=> (and $x108 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var879X input.ind-%var881X) (_ bv0 32))))))
 ))
 (let (($x160 (forall ((input.ind-%var879X (_ BitVec 32)) (input.ind-%var880X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var879X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var879X input.ind-%var880X) false))))
 ))
 (let (($x286 (forall ((input.ind-%var878X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var878X)))
 (= $x131 false)))
 ))
 (let (($x177 (and (and $x286 $x160) $x28)))
 (let (($x190 (= $x177 true)))
 (let (($x278 (forall ((input.ind-%var867X (_ BitVec 32)) (input.ind-%var869X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var867X input.ind-%var869X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var867X)))
 (=> (and $x108 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var867X input.ind-%var869X) (_ bv0 32))))))
 ))
 (let (($x266 (forall ((input.ind-%var867X (_ BitVec 32)) (input.ind-%var868X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var867X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var867X input.ind-%var868X) false))))
 ))
 (let (($x244 (forall ((input.ind-%var866X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var866X)))
 (= $x131 false)))
 ))
 (let (($x280 (and (and $x244 $x266) $x278)))
 (let (($x281 (= $x280 true)))
 (let (($x222 (forall ((input.ind-%var857X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var857X)))
 (=> $x109 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var857X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var856X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var856X)))
 (= $x109 false)))
 ))
 (let (($x229 (and $x205 $x222)))
 (let (($x237 (= $x229 true)))
 (let (($x202 (forall ((input.ind-%var849X (_ BitVec 32)) (input.ind-%var851X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var849X input.ind-%var851X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var849X)))
 (=> (and $x108 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var849X input.ind-%var851X) (_ bv0 32))))))
 ))
 (let (($x111 (forall ((input.ind-%var849X (_ BitVec 32)) (input.ind-%var850X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var849X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var849X input.ind-%var850X) false))))
 ))
 (let (($x92 (forall ((input.ind-%var848X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var848X)))
 (= $x131 false)))
 ))
 (let (($x194 (and (and $x92 $x111) $x202)))
 (let (($x198 (= $x194 true)))
 (let (($x42 (forall ((input.ind-%var839X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var839X)))
 (=> $x109 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var839X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var838X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var838X)))
 (= $x109 false)))
 ))
 (let (($x132 (and $x158 $x42)))
 (let (($x125 (= $x132 true)))
 (let ((?x17 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x17)))
 (let (($x119 (= ?x129 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x119 true)))
 (let (($x48 (= $x141 true)))
 (let ((?x155 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x155)))
 (let (($x140 (= ?x127 input.dst.llvm-%n)))
 (let (($x159 (= $x140 true)))
 (let (($x104 (= $x159 true)))
 (let (($x79 (= ?x127 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x100 (= $x79 true)))
 (let (($x164 (= $x100 true)))
 (let (($x110 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x156 (= $x110 true)))
 (let (($x7 (= $x156 true)))
 (let (($x89 (= $x7 true)))
 (let (($x134 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x83 (= $x134 true)))
 (let (($x169 (= $x83 true)))
 (let (($x59 (= $x169 true)))
 (let (($x135 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x27 (= $x135 true)))
 (let (($x151 (= $x27 true)))
 (let (($x16 (= $x151 true)))
 (let (($x86 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x137 (= $x86 true)))
 (let (($x123 (= $x137 true)))
 (let (($x93 (= $x123 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x120)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x77 $x80)))
 (let (($x136 (and $x101 $x138)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x14 $x136)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x72)))))))
 (let (($x143 (and $x71 $x53)))
 (let (($x69 (= $x143 true)))
 (let (($x126 (= $x69 true)))
 (let (($x95 (= $x126 true)))
 (let (($x6 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x65 (= $x6 true)))
 (let (($x9 (= $x65 true)))
 (let (($x64 (= $x9 true)))
 (let ((?x84 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x84)))
 (let (($x52 (= ?x51 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x52 true)))
 (let (($x37 (= $x13 true)))
 (let (($x56 (and $x37 $x64)))
 (let (($x91 (and $x56 $x95)))
 (let (($x133 (and $x91 $x93)))
 (let (($x103 (and $x133 $x16)))
 (let (($x8 (and $x103 $x59)))
 (let (($x87 (and $x8 $x89)))
 (let (($x97 (and $x87 $x164)))
 (let (($x114 (and $x97 $x104)))
 (let (($x122 (and $x114 $x48)))
 (let (($x165 (and $x122 $x125)))
 (let (($x200 (and $x165 $x198)))
 (let (($x236 (and $x200 $x237)))
 (let (($x282 (and $x236 $x281)))
 (let (($x74 (and $x282 $x190)))
 (let (($x207 (and $x74 $x206)))
 (let (($x45 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x233 (and $x45 $x207)))
 (let (($x19 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x246 (and $x19 $x233)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x252 (and $x47 $x246)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x255 (and $x22 $x252)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x269 (and $x57 $x255)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x67 (and $x18 $x269)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x219 (and $x23 $x67)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x220 (and $x35 $x219)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x226 (and $x36 $x220)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x66 (and $x38 $x226)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x263 (and $x25 $x66)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x241 (and $x39 $x263)))
 (let (($x184 (=> $x241 $x105)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x248 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x264 (not $x248)))
 (let (($x242 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (=> $x242 $x264)))
 (let (($x130 (= $x173 true)))
 (let (($x105 (= $x130 true)))
 (let (($x245 (forall ((input.ind-%var887X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var887X)))
 (=> $x109 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var887X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var886X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var886X)))
 (= $x109 false)))
 ))
 (let (($x230 (and $x170 $x245)))
 (let (($x206 (= $x230 true)))
 (let (($x28 (forall ((input.ind-%var879X (_ BitVec 32)) (input.ind-%var881X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var879X input.ind-%var881X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var879X)))
 (=> (and $x108 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var879X input.ind-%var881X) (_ bv0 32))))))
 ))
 (let (($x160 (forall ((input.ind-%var879X (_ BitVec 32)) (input.ind-%var880X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var879X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var879X input.ind-%var880X) false))))
 ))
 (let (($x286 (forall ((input.ind-%var878X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var878X)))
 (= $x131 false)))
 ))
 (let (($x177 (and (and $x286 $x160) $x28)))
 (let (($x190 (= $x177 true)))
 (let (($x278 (forall ((input.ind-%var867X (_ BitVec 32)) (input.ind-%var869X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var867X input.ind-%var869X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var867X)))
 (=> (and $x108 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var867X input.ind-%var869X) (_ bv0 32))))))
 ))
 (let (($x266 (forall ((input.ind-%var867X (_ BitVec 32)) (input.ind-%var868X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var867X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var867X input.ind-%var868X) false))))
 ))
 (let (($x244 (forall ((input.ind-%var866X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var866X)))
 (= $x131 false)))
 ))
 (let (($x280 (and (and $x244 $x266) $x278)))
 (let (($x281 (= $x280 true)))
 (let (($x222 (forall ((input.ind-%var857X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var857X)))
 (=> $x109 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var857X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var856X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var856X)))
 (= $x109 false)))
 ))
 (let (($x229 (and $x205 $x222)))
 (let (($x237 (= $x229 true)))
 (let (($x202 (forall ((input.ind-%var849X (_ BitVec 32)) (input.ind-%var851X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var849X input.ind-%var851X)))
 (let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var849X)))
 (=> (and $x108 $x96) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var849X input.ind-%var851X) (_ bv0 32))))))
 ))
 (let (($x111 (forall ((input.ind-%var849X (_ BitVec 32)) (input.ind-%var850X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var849X)))
 (=> $x108 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var849X input.ind-%var850X) false))))
 ))
 (let (($x92 (forall ((input.ind-%var848X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var848X)))
 (= $x131 false)))
 ))
 (let (($x194 (and (and $x92 $x111) $x202)))
 (let (($x198 (= $x194 true)))
 (let (($x42 (forall ((input.ind-%var839X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var839X)))
 (=> $x109 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var839X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var838X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var838X)))
 (= $x109 false)))
 ))
 (let (($x132 (and $x158 $x42)))
 (let (($x125 (= $x132 true)))
 (let ((?x17 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x17)))
 (let (($x119 (= ?x129 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x119 true)))
 (let (($x48 (= $x141 true)))
 (let ((?x155 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x155)))
 (let (($x140 (= ?x127 input.dst.llvm-%n)))
 (let (($x159 (= $x140 true)))
 (let (($x104 (= $x159 true)))
 (let (($x79 (= ?x127 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x100 (= $x79 true)))
 (let (($x164 (= $x100 true)))
 (let (($x110 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x156 (= $x110 true)))
 (let (($x7 (= $x156 true)))
 (let (($x89 (= $x7 true)))
 (let (($x134 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x83 (= $x134 true)))
 (let (($x169 (= $x83 true)))
 (let (($x59 (= $x169 true)))
 (let (($x135 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x27 (= $x135 true)))
 (let (($x151 (= $x27 true)))
 (let (($x16 (= $x151 true)))
 (let (($x86 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x137 (= $x86 true)))
 (let (($x123 (= $x137 true)))
 (let (($x93 (= $x123 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x120)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x77 $x80)))
 (let (($x136 (and $x101 $x138)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x14 $x136)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x72)))))))
 (let (($x143 (and $x71 $x53)))
 (let (($x69 (= $x143 true)))
 (let (($x126 (= $x69 true)))
 (let (($x95 (= $x126 true)))
 (let (($x6 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x65 (= $x6 true)))
 (let (($x9 (= $x65 true)))
 (let (($x64 (= $x9 true)))
 (let ((?x84 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x84)))
 (let (($x52 (= ?x51 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x52 true)))
 (let (($x37 (= $x13 true)))
 (let (($x56 (and $x37 $x64)))
 (let (($x91 (and $x56 $x95)))
 (let (($x133 (and $x91 $x93)))
 (let (($x103 (and $x133 $x16)))
 (let (($x8 (and $x103 $x59)))
 (let (($x87 (and $x8 $x89)))
 (let (($x97 (and $x87 $x164)))
 (let (($x114 (and $x97 $x104)))
 (let (($x122 (and $x114 $x48)))
 (let (($x165 (and $x122 $x125)))
 (let (($x200 (and $x165 $x198)))
 (let (($x236 (and $x200 $x237)))
 (let (($x282 (and $x236 $x281)))
 (let (($x74 (and $x282 $x190)))
 (let (($x207 (and $x74 $x206)))
 (let (($x45 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x233 (and $x45 $x207)))
 (let (($x19 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x246 (and $x19 $x233)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x252 (and $x47 $x246)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x255 (and $x22 $x252)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x269 (and $x57 $x255)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x67 (and $x18 $x269)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x219 (and $x23 $x67)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x220 (and $x35 $x219)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x226 (and $x36 $x220)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x66 (and $x38 $x226)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x263 (and $x25 $x66)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x241 (and $x39 $x263)))
 (let (($x184 (=> $x241 $x105)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 191 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x178 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x185 (bvmul ?x178 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x185)))
 (let (($x192 (= ?x208 ?x191)))
 (let (($x197 (= $x192 true)))
 (let (($x262 (forall ((input.ind-%var941X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var941X)))
 (=> $x131 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var941X) (_ bv0 32)))))
 ))
 (let (($x240 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var940X)))
 (= $x131 false)))
 ))
 (let (($x285 (and $x240 $x262)))
 (let (($x273 (= $x285 true)))
 (let (($x187 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var935X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var935X)))
 (let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> (and $x74 $x160) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var933X input.ind-%var935X) (_ bv0 32))))))
 ))
 (let (($x284 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var934X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> $x74 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var934X) false))))
 ))
 (let (($x154 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var932X)))
 (= $x229 false)))
 ))
 (let (($x149 (and (and $x154 $x284) $x187)))
 (let (($x204 (= $x149 true)))
 (let (($x161 (forall ((input.ind-%var921X (_ BitVec 32)) (input.ind-%var923X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var921X input.ind-%var923X)))
 (let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var921X)))
 (=> (and $x74 $x160) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var921X input.ind-%var923X) (_ bv0 32))))))
 ))
 (let (($x216 (forall ((input.ind-%var921X (_ BitVec 32)) (input.ind-%var922X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var921X)))
 (=> $x74 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var921X input.ind-%var922X) false))))
 ))
 (let (($x88 (forall ((input.ind-%var920X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var920X)))
 (= $x229 false)))
 ))
 (let (($x203 (and (and $x88 $x216) $x161)))
 (let (($x275 (= $x203 true)))
 (let (($x113 (forall ((input.ind-%var911X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var911X)))
 (=> $x131 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var911X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var910X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var910X)))
 (= $x131 false)))
 ))
 (let (($x102 (and $x130 $x113)))
 (let (($x81 (= $x102 true)))
 (let (($x226 (forall ((input.ind-%var903X (_ BitVec 32)) (input.ind-%var905X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var903X input.ind-%var905X)))
 (let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var903X)))
 (=> (and $x74 $x160) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var903X input.ind-%var905X) (_ bv0 32))))))
 ))
 (let (($x245 (forall ((input.ind-%var903X (_ BitVec 32)) (input.ind-%var904X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var903X)))
 (=> $x74 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var903X input.ind-%var904X) false))))
 ))
 (let (($x266 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var902X)))
 (= $x229 false)))
 ))
 (let (($x263 (and (and $x266 $x245) $x226)))
 (let (($x241 (= $x263 true)))
 (let (($x202 (forall ((input.ind-%var893X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var893X)))
 (=> $x131 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var893X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var892X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var892X)))
 (= $x131 false)))
 ))
 (let (($x194 (and $x108 $x202)))
 (let (($x198 (= $x194 true)))
 (let ((?x109 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x109)))
 (let (($x49 (= ?x162 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x49 true)))
 (let (($x82 (= $x107 true)))
 (let ((?x129 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x129)))
 (let (($x141 (= ?x119 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x141 true)))
 (let (($x122 (= $x48 true)))
 (let (($x140 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x159 (= $x140 true)))
 (let (($x104 (= $x159 true)))
 (let (($x114 (= $x104 true)))
 (let (($x79 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x100 (= $x79 true)))
 (let (($x164 (= $x100 true)))
 (let (($x97 (= $x164 true)))
 (let (($x156 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x7 (= $x156 true)))
 (let (($x89 (= $x7 true)))
 (let (($x87 (= $x89 true)))
 (let (($x83 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x169 (= $x83 true)))
 (let (($x59 (= $x169 true)))
 (let (($x8 (= $x59 true)))
 (let (($x27 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x151 (= $x27 true)))
 (let (($x16 (= $x151 true)))
 (let (($x103 (= $x16 true)))
 (let (($x137 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x123 (= $x137 true)))
 (let (($x93 (= $x123 true)))
 (let (($x133 (= $x93 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x138)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x58 $x101)))
 (let (($x53 (and $x120 $x136)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x90 $x53)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x117)))))))
 (let (($x69 (and $x77 $x143)))
 (let (($x126 (= $x69 true)))
 (let (($x95 (= $x126 true)))
 (let (($x91 (= $x95 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x84)))
 (let (($x6 (= ?x51 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x65 (= $x6 true)))
 (let (($x9 (= $x65 true)))
 (let (($x52 (= ?x51 input.dst.llvm-%n)))
 (let (($x13 (= $x52 true)))
 (let (($x37 (= $x13 true)))
 (let (($x64 (and $x37 $x9)))
 (let (($x40 (and $x64 $x91)))
 (let (($x135 (and $x40 $x133)))
 (let (($x134 (and $x135 $x103)))
 (let (($x110 (and $x134 $x8)))
 (let (($x155 (and $x110 $x87)))
 (let (($x70 (and $x155 $x97)))
 (let (($x17 (and $x70 $x114)))
 (let (($x115 (and $x17 $x122)))
 (let (($x42 (and $x115 $x82)))
 (let (($x200 (and $x42 $x198)))
 (let (($x242 (and $x200 $x241)))
 (let (($x15 (and $x242 $x81)))
 (let (($x288 (and $x15 $x275)))
 (let (($x148 (and $x288 $x204)))
 (let (($x274 (and $x148 $x273)))
 (let (($x61 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x291 (and (not $x61) $x274)))
 (let (($x19 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x195 (and $x19 $x291)))
 (let (($x47 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x289 (and $x47 $x195)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x292 (and $x46 $x289)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x124 (and $x41 $x292)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x121 (and $x24 $x124)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x172 (and $x142 $x121)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x118 (and $x11 $x172)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x223 (and $x38 $x118)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x210 (and $x10 $x223)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x224 (and $x36 $x210)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x267 (and $x25 $x224)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x29 (and $x20 $x267)))
 (let (($x213 (=> $x29 $x197)))
 (not $x213))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x178 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x185 (bvmul ?x178 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x185)))
 (let (($x192 (= ?x208 ?x191)))
 (let (($x197 (= $x192 true)))
 (let (($x262 (forall ((input.ind-%var941X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var941X)))
 (=> $x131 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var941X) (_ bv0 32)))))
 ))
 (let (($x240 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var940X)))
 (= $x131 false)))
 ))
 (let (($x285 (and $x240 $x262)))
 (let (($x273 (= $x285 true)))
 (let (($x187 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var935X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var935X)))
 (let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> (and $x74 $x160) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var933X input.ind-%var935X) (_ bv0 32))))))
 ))
 (let (($x284 (forall ((input.ind-%var933X (_ BitVec 32)) (input.ind-%var934X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var933X)))
 (=> $x74 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var933X input.ind-%var934X) false))))
 ))
 (let (($x154 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var932X)))
 (= $x229 false)))
 ))
 (let (($x149 (and (and $x154 $x284) $x187)))
 (let (($x204 (= $x149 true)))
 (let (($x161 (forall ((input.ind-%var921X (_ BitVec 32)) (input.ind-%var923X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var921X input.ind-%var923X)))
 (let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var921X)))
 (=> (and $x74 $x160) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var921X input.ind-%var923X) (_ bv0 32))))))
 ))
 (let (($x216 (forall ((input.ind-%var921X (_ BitVec 32)) (input.ind-%var922X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var921X)))
 (=> $x74 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var921X input.ind-%var922X) false))))
 ))
 (let (($x88 (forall ((input.ind-%var920X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var920X)))
 (= $x229 false)))
 ))
 (let (($x203 (and (and $x88 $x216) $x161)))
 (let (($x275 (= $x203 true)))
 (let (($x113 (forall ((input.ind-%var911X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var911X)))
 (=> $x131 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var911X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var910X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var910X)))
 (= $x131 false)))
 ))
 (let (($x102 (and $x130 $x113)))
 (let (($x81 (= $x102 true)))
 (let (($x226 (forall ((input.ind-%var903X (_ BitVec 32)) (input.ind-%var905X (_ BitVec 32)) )(let (($x160 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var903X input.ind-%var905X)))
 (let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var903X)))
 (=> (and $x74 $x160) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var903X input.ind-%var905X) (_ bv0 32))))))
 ))
 (let (($x245 (forall ((input.ind-%var903X (_ BitVec 32)) (input.ind-%var904X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var903X)))
 (=> $x74 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var903X input.ind-%var904X) false))))
 ))
 (let (($x266 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var902X)))
 (= $x229 false)))
 ))
 (let (($x263 (and (and $x266 $x245) $x226)))
 (let (($x241 (= $x263 true)))
 (let (($x202 (forall ((input.ind-%var893X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var893X)))
 (=> $x131 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var893X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var892X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var892X)))
 (= $x131 false)))
 ))
 (let (($x194 (and $x108 $x202)))
 (let (($x198 (= $x194 true)))
 (let ((?x109 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x109)))
 (let (($x49 (= ?x162 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x49 true)))
 (let (($x82 (= $x107 true)))
 (let ((?x129 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x129)))
 (let (($x141 (= ?x119 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x141 true)))
 (let (($x122 (= $x48 true)))
 (let (($x140 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x159 (= $x140 true)))
 (let (($x104 (= $x159 true)))
 (let (($x114 (= $x104 true)))
 (let (($x79 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x100 (= $x79 true)))
 (let (($x164 (= $x100 true)))
 (let (($x97 (= $x164 true)))
 (let (($x156 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x7 (= $x156 true)))
 (let (($x89 (= $x7 true)))
 (let (($x87 (= $x89 true)))
 (let (($x83 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x169 (= $x83 true)))
 (let (($x59 (= $x169 true)))
 (let (($x8 (= $x59 true)))
 (let (($x27 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x151 (= $x27 true)))
 (let (($x16 (= $x151 true)))
 (let (($x103 (= $x16 true)))
 (let (($x137 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x123 (= $x137 true)))
 (let (($x93 (= $x123 true)))
 (let (($x133 (= $x93 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x138)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x58 $x101)))
 (let (($x53 (and $x120 $x136)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x90 $x53)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x117)))))))
 (let (($x69 (and $x77 $x143)))
 (let (($x126 (= $x69 true)))
 (let (($x95 (= $x126 true)))
 (let (($x91 (= $x95 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x84)))
 (let (($x6 (= ?x51 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x65 (= $x6 true)))
 (let (($x9 (= $x65 true)))
 (let (($x52 (= ?x51 input.dst.llvm-%n)))
 (let (($x13 (= $x52 true)))
 (let (($x37 (= $x13 true)))
 (let (($x64 (and $x37 $x9)))
 (let (($x40 (and $x64 $x91)))
 (let (($x135 (and $x40 $x133)))
 (let (($x134 (and $x135 $x103)))
 (let (($x110 (and $x134 $x8)))
 (let (($x155 (and $x110 $x87)))
 (let (($x70 (and $x155 $x97)))
 (let (($x17 (and $x70 $x114)))
 (let (($x115 (and $x17 $x122)))
 (let (($x42 (and $x115 $x82)))
 (let (($x200 (and $x42 $x198)))
 (let (($x242 (and $x200 $x241)))
 (let (($x15 (and $x242 $x81)))
 (let (($x288 (and $x15 $x275)))
 (let (($x148 (and $x288 $x204)))
 (let (($x274 (and $x148 $x273)))
 (let (($x61 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x291 (and (not $x61) $x274)))
 (let (($x19 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x195 (and $x19 $x291)))
 (let (($x47 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x289 (and $x47 $x195)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x292 (and $x46 $x289)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x124 (and $x41 $x292)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x121 (and $x24 $x124)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x172 (and $x142 $x121)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x118 (and $x11 $x172)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x223 (and $x38 $x118)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x210 (and $x10 $x223)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x224 (and $x36 $x210)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x267 (and $x25 $x224)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x29 (and $x20 $x267)))
 (let (($x213 (=> $x29 $x197)))
 (not $x213))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 198 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x193 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x112 (bvmul ?x193 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x112)))
 (let (($x218 (= ?x157 ?x276)))
 (let (($x258 (= $x218 true)))
 (let (($x269 (forall ((input.ind-%var995X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var995X)))
 (=> $x111 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var995X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var994X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var994X)))
 (= $x111 false)))
 ))
 (let (($x5 (and $x255 $x269)))
 (let (($x30 (= $x5 true)))
 (let (($x153 (forall ((input.ind-%var987X (_ BitVec 32)) (input.ind-%var989X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var987X input.ind-%var989X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var987X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var987X input.ind-%var989X) (_ bv0 32))))))
 ))
 (let (($x261 (forall ((input.ind-%var987X (_ BitVec 32)) (input.ind-%var988X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var987X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var987X input.ind-%var988X) false))))
 ))
 (let (($x222 (forall ((input.ind-%var986X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var986X)))
 (= $x220 false)))
 ))
 (let (($x32 (and (and $x222 $x261) $x153)))
 (let (($x182 (= $x32 true)))
 (let (($x233 (forall ((input.ind-%var975X (_ BitVec 32)) (input.ind-%var977X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var975X input.ind-%var977X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var975X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var975X input.ind-%var977X) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((input.ind-%var975X (_ BitVec 32)) (input.ind-%var976X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var975X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var975X input.ind-%var976X) false))))
 ))
 (let (($x60 (forall ((input.ind-%var974X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var974X)))
 (= $x220 false)))
 ))
 (let (($x94 (and (and $x60 $x139) $x233)))
 (let (($x209 (= $x94 true)))
 (let (($x208 (forall ((input.ind-%var965X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var965X)))
 (=> $x111 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var965X) (_ bv0 32)))))
 ))
 (let (($x210 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var964X)))
 (= $x111 false)))
 ))
 (let (($x191 (and $x210 $x208)))
 (let (($x192 (= $x191 true)))
 (let (($x195 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var959X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var959X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var957X input.ind-%var959X) (_ bv0 32))))))
 ))
 (let (($x284 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var958X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var958X) false))))
 ))
 (let (($x242 (forall ((input.ind-%var956X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var956X)))
 (= $x220 false)))
 ))
 (let (($x292 (and (and $x242 $x284) $x195)))
 (let (($x124 (= $x292 true)))
 (let (($x170 (forall ((input.ind-%var947X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var947X)))
 (=> $x111 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var947X) (_ bv0 32)))))
 ))
 (let (($x194 (forall ((input.ind-%var946X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var946X)))
 (= $x111 false)))
 ))
 (let (($x245 (and $x194 $x170)))
 (let (($x66 (= $x245 true)))
 (let ((?x158 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x158)))
 (let (($x107 (= ?x49 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x107 true)))
 (let (($x42 (= $x82 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x122 (= $x48 true)))
 (let (($x115 (= $x122 true)))
 (let (($x109 (= $x115 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x17 (= $x114 true)))
 (let (($x129 (= $x17 true)))
 (let (($x119 (= $x129 true)))
 (let (($x97 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x70 (= $x97 true)))
 (let (($x140 (= $x70 true)))
 (let (($x159 (= $x140 true)))
 (let (($x155 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x127 (= $x155 true)))
 (let (($x79 (= $x127 true)))
 (let (($x100 (= $x79 true)))
 (let (($x110 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (= $x110 true)))
 (let (($x7 (= $x156 true)))
 (let (($x89 (= $x7 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x135)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x86 $x93)))
 (let (($x151 (and $x133 $x27)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x58 $x151)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x136 $x53)))))))
 (let (($x103 (and $x40 $x16)))
 (let (($x134 (= $x103 true)))
 (let (($x83 (= $x134 true)))
 (let (($x169 (= $x83 true)))
 (let (($x117 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x76 (= $x117 true)))
 (let (($x55 (= $x76 true)))
 (let (($x71 (= $x55 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x6)))
 (let (($x75 (= ?x65 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x72 (= $x75 true)))
 (let (($x78 (= $x72 true)))
 (let (($x64 (= ?x65 input.dst.llvm-%n)))
 (let (($x106 (= $x64 true)))
 (let (($x63 (= $x106 true)))
 (let ((?x84 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x84)))
 (let (($x52 (= ?x51 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x52 true)))
 (let (($x37 (= $x13 true)))
 (let (($x14 (and $x37 $x63)))
 (let (($x85 (and $x14 $x78)))
 (let (($x33 (and $x85 $x71)))
 (let (($x59 (and $x33 $x169)))
 (let (($x87 (and $x59 $x89)))
 (let (($x164 (and $x87 $x100)))
 (let (($x104 (and $x164 $x159)))
 (let (($x141 (and $x104 $x119)))
 (let (($x162 (and $x141 $x109)))
 (let (($x165 (and $x162 $x42)))
 (let (($x219 (and $x165 $x66)))
 (let (($x121 (and $x219 $x124)))
 (let (($x197 (and $x121 $x192)))
 (let (($x238 (and $x197 $x209)))
 (let (($x236 (and $x238 $x182)))
 (let (($x184 (and $x236 $x30)))
 (let (($x61 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x116 (and (not $x61) $x184)))
 (let (($x19 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x201 (and $x19 $x116)))
 (let (($x47 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x145 (and $x47 $x201)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x174 (and $x46 $x145)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x212 (and $x41 $x174)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x259 (and $x24 $x212)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x287 (and $x142 $x259)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x168 (and $x35 $x287)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x166 (and $x21 $x168)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x99 (and $x36 $x166)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x260 (and $x10 $x99)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x283 (and $x43 $x260)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x217 (and $x31 $x283)))
 (let (($x180 (=> $x217 $x258)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x193 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x112 (bvmul ?x193 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x112)))
 (let (($x218 (= ?x157 ?x276)))
 (let (($x258 (= $x218 true)))
 (let (($x269 (forall ((input.ind-%var995X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var995X)))
 (=> $x111 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var995X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var994X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var994X)))
 (= $x111 false)))
 ))
 (let (($x5 (and $x255 $x269)))
 (let (($x30 (= $x5 true)))
 (let (($x153 (forall ((input.ind-%var987X (_ BitVec 32)) (input.ind-%var989X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var987X input.ind-%var989X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var987X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var987X input.ind-%var989X) (_ bv0 32))))))
 ))
 (let (($x261 (forall ((input.ind-%var987X (_ BitVec 32)) (input.ind-%var988X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var987X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var987X input.ind-%var988X) false))))
 ))
 (let (($x222 (forall ((input.ind-%var986X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var986X)))
 (= $x220 false)))
 ))
 (let (($x32 (and (and $x222 $x261) $x153)))
 (let (($x182 (= $x32 true)))
 (let (($x233 (forall ((input.ind-%var975X (_ BitVec 32)) (input.ind-%var977X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var975X input.ind-%var977X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var975X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var975X input.ind-%var977X) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((input.ind-%var975X (_ BitVec 32)) (input.ind-%var976X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var975X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var975X input.ind-%var976X) false))))
 ))
 (let (($x60 (forall ((input.ind-%var974X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var974X)))
 (= $x220 false)))
 ))
 (let (($x94 (and (and $x60 $x139) $x233)))
 (let (($x209 (= $x94 true)))
 (let (($x208 (forall ((input.ind-%var965X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var965X)))
 (=> $x111 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var965X) (_ bv0 32)))))
 ))
 (let (($x210 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var964X)))
 (= $x111 false)))
 ))
 (let (($x191 (and $x210 $x208)))
 (let (($x192 (= $x191 true)))
 (let (($x195 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var959X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var959X)))
 (let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> (and $x288 $x216) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var957X input.ind-%var959X) (_ bv0 32))))))
 ))
 (let (($x284 (forall ((input.ind-%var957X (_ BitVec 32)) (input.ind-%var958X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var957X)))
 (=> $x288 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var957X input.ind-%var958X) false))))
 ))
 (let (($x242 (forall ((input.ind-%var956X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var956X)))
 (= $x220 false)))
 ))
 (let (($x292 (and (and $x242 $x284) $x195)))
 (let (($x124 (= $x292 true)))
 (let (($x170 (forall ((input.ind-%var947X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var947X)))
 (=> $x111 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var947X) (_ bv0 32)))))
 ))
 (let (($x194 (forall ((input.ind-%var946X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var946X)))
 (= $x111 false)))
 ))
 (let (($x245 (and $x194 $x170)))
 (let (($x66 (= $x245 true)))
 (let ((?x158 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x158)))
 (let (($x107 (= ?x49 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x107 true)))
 (let (($x42 (= $x82 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x122 (= $x48 true)))
 (let (($x115 (= $x122 true)))
 (let (($x109 (= $x115 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x17 (= $x114 true)))
 (let (($x129 (= $x17 true)))
 (let (($x119 (= $x129 true)))
 (let (($x97 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x70 (= $x97 true)))
 (let (($x140 (= $x70 true)))
 (let (($x159 (= $x140 true)))
 (let (($x155 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x127 (= $x155 true)))
 (let (($x79 (= $x127 true)))
 (let (($x100 (= $x79 true)))
 (let (($x110 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (= $x110 true)))
 (let (($x7 (= $x156 true)))
 (let (($x89 (= $x7 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x135)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x86 $x93)))
 (let (($x151 (and $x133 $x27)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x58 $x151)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x136 $x53)))))))
 (let (($x103 (and $x40 $x16)))
 (let (($x134 (= $x103 true)))
 (let (($x83 (= $x134 true)))
 (let (($x169 (= $x83 true)))
 (let (($x117 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x76 (= $x117 true)))
 (let (($x55 (= $x76 true)))
 (let (($x71 (= $x55 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x6)))
 (let (($x75 (= ?x65 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x72 (= $x75 true)))
 (let (($x78 (= $x72 true)))
 (let (($x64 (= ?x65 input.dst.llvm-%n)))
 (let (($x106 (= $x64 true)))
 (let (($x63 (= $x106 true)))
 (let ((?x84 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x84)))
 (let (($x52 (= ?x51 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x52 true)))
 (let (($x37 (= $x13 true)))
 (let (($x14 (and $x37 $x63)))
 (let (($x85 (and $x14 $x78)))
 (let (($x33 (and $x85 $x71)))
 (let (($x59 (and $x33 $x169)))
 (let (($x87 (and $x59 $x89)))
 (let (($x164 (and $x87 $x100)))
 (let (($x104 (and $x164 $x159)))
 (let (($x141 (and $x104 $x119)))
 (let (($x162 (and $x141 $x109)))
 (let (($x165 (and $x162 $x42)))
 (let (($x219 (and $x165 $x66)))
 (let (($x121 (and $x219 $x124)))
 (let (($x197 (and $x121 $x192)))
 (let (($x238 (and $x197 $x209)))
 (let (($x236 (and $x238 $x182)))
 (let (($x184 (and $x236 $x30)))
 (let (($x61 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x116 (and (not $x61) $x184)))
 (let (($x19 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x201 (and $x19 $x116)))
 (let (($x47 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x145 (and $x47 $x201)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x174 (and $x46 $x145)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x212 (and $x41 $x174)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x259 (and $x24 $x212)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x287 (and $x142 $x259)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x168 (and $x35 $x287)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x166 (and $x21 $x168)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x99 (and $x36 $x166)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x260 (and $x10 $x99)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x283 (and $x43 $x260)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x217 (and $x31 $x283)))
 (let (($x180 (=> $x217 $x258)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 198 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x163 (bvuge ?x181 (_ bv1 32))))
 (let (($x171 (= $x163 true)))
 (let (($x206 (= $x171 true)))
 (let (($x285 (forall ((input.ind-%var1049X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1049X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1049X) (_ bv0 32)))))
 ))
 (let (($x262 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1048X)))
 (= $x194 false)))
 ))
 (let (($x178 (and $x262 $x285)))
 (let (($x56 (= $x178 true)))
 (let (($x251 (forall ((input.ind-%var1041X (_ BitVec 32)) (input.ind-%var1043X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1041X input.ind-%var1043X)))
 (let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1041X)))
 (=> (and $x209 $x60) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1041X input.ind-%var1043X) (_ bv0 32))))))
 ))
 (let (($x173 (forall ((input.ind-%var1041X (_ BitVec 32)) (input.ind-%var1042X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1041X)))
 (=> $x209 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1041X input.ind-%var1042X) false))))
 ))
 (let (($x246 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1040X)))
 (= $x273 false)))
 ))
 (let (($x239 (and (and $x246 $x173) $x251)))
 (let (($x175 (= $x239 true)))
 (let (($x167 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1031X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1031X)))
 (let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> (and $x209 $x60) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1029X input.ind-%var1031X) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1030X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> $x209 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1030X) false))))
 ))
 (let (($x73 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1028X)))
 (= $x273 false)))
 ))
 (let (($x152 (and (and $x73 $x198) $x167)))
 (let (($x199 (= $x152 true)))
 (let (($x112 (forall ((input.ind-%var1019X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1019X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1019X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var1018X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1018X)))
 (= $x194 false)))
 ))
 (let (($x157 (and $x166 $x112)))
 (let (($x276 (= $x157 true)))
 (let (($x116 (forall ((input.ind-%var1011X (_ BitVec 32)) (input.ind-%var1013X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1011X input.ind-%var1013X)))
 (let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1011X)))
 (=> (and $x209 $x60) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1011X input.ind-%var1013X) (_ bv0 32))))))
 ))
 (let (($x222 (forall ((input.ind-%var1011X (_ BitVec 32)) (input.ind-%var1012X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1011X)))
 (=> $x209 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1011X input.ind-%var1012X) false))))
 ))
 (let (($x124 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1010X)))
 (= $x273 false)))
 ))
 (let (($x145 (and (and $x124 $x222) $x116)))
 (let (($x174 (= $x145 true)))
 (let (($x275 (forall ((input.ind-%var1001X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1001X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1001X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1000X)))
 (= $x194 false)))
 ))
 (let (($x154 (and $x170 $x275)))
 (let (($x284 (= $x154 true)))
 (let ((?x158 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x158)))
 (let (($x107 (= ?x49 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x107 true)))
 (let (($x42 (= $x82 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x122 (= $x48 true)))
 (let (($x115 (= $x122 true)))
 (let (($x109 (= $x115 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x17 (= $x114 true)))
 (let (($x129 (= $x17 true)))
 (let (($x119 (= $x129 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x127)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x156 $x87)))
 (let (($x100 (and $x155 $x79)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x123 $x100)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x103)))))))
 (let (($x97 (and $x110 $x164)))
 (let (($x70 (= $x97 true)))
 (let (($x140 (= $x70 true)))
 (let (($x159 (= $x140 true)))
 (let (($x69 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x126 (= $x69 true)))
 (let (($x95 (= $x126 true)))
 (let (($x40 (= $x95 true)))
 (let (($x138 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x136 (= $x138 true)))
 (let (($x120 (= $x136 true)))
 (let (($x53 (= $x120 true)))
 (let (($x33 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x68 (= $x33 true)))
 (let (($x80 (= $x68 true)))
 (let (($x91 (= $x80 true)))
 (let ((?x63 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x63)))
 (let (($x117 (= ?x14 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x76 (= $x117 true)))
 (let (($x55 (= $x76 true)))
 (let (($x75 (= ?x14 input.dst.llvm-%n)))
 (let (($x72 (= $x75 true)))
 (let (($x78 (= $x72 true)))
 (let ((?x13 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x13)))
 (let (($x65 (= ?x37 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x65 true)))
 (let (($x64 (= $x9 true)))
 (let (($x277 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x277 true)))
 (let (($x84 (= $x50 true)))
 (let (($x51 (= $x84 true)))
 (let (($x106 (and $x51 $x64)))
 (let (($x85 (and $x106 $x78)))
 (let (($x71 (and $x85 $x55)))
 (let (($x101 (and $x71 $x91)))
 (let (($x143 (and $x101 $x53)))
 (let (($x90 (and $x143 $x40)))
 (let (($x104 (and $x90 $x159)))
 (let (($x141 (and $x104 $x119)))
 (let (($x162 (and $x141 $x109)))
 (let (($x165 (and $x162 $x42)))
 (let (($x289 (and $x165 $x284)))
 (let (($x212 (and $x289 $x174)))
 (let (($x218 (and $x212 $x276)))
 (let (($x282 (and $x218 $x199)))
 (let (($x263 (and $x282 $x175)))
 (let (($x267 (and $x263 $x56)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x252 (and (not $x45) $x267)))
 (let (($x47 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x132 (and $x47 $x252)))
 (let (($x46 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x237 (and $x46 $x132)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x96 (and $x12 $x237)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x205 (and $x57 $x96)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x278 (and $x18 $x205)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x105 (and $x23 $x278)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x125 (and $x11 $x105)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x290 (and $x38 $x125)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x188 (and $x26 $x290)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x272 (and $x25 $x188)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x128 (and $x39 $x272)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x28 (and $x31 $x128)))
 (let (($x177 (=> $x28 $x206)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x163 (bvuge ?x181 (_ bv1 32))))
 (let (($x171 (= $x163 true)))
 (let (($x206 (= $x171 true)))
 (let (($x285 (forall ((input.ind-%var1049X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1049X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1049X) (_ bv0 32)))))
 ))
 (let (($x262 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1048X)))
 (= $x194 false)))
 ))
 (let (($x178 (and $x262 $x285)))
 (let (($x56 (= $x178 true)))
 (let (($x251 (forall ((input.ind-%var1041X (_ BitVec 32)) (input.ind-%var1043X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1041X input.ind-%var1043X)))
 (let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1041X)))
 (=> (and $x209 $x60) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1041X input.ind-%var1043X) (_ bv0 32))))))
 ))
 (let (($x173 (forall ((input.ind-%var1041X (_ BitVec 32)) (input.ind-%var1042X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1041X)))
 (=> $x209 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1041X input.ind-%var1042X) false))))
 ))
 (let (($x246 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1040X)))
 (= $x273 false)))
 ))
 (let (($x239 (and (and $x246 $x173) $x251)))
 (let (($x175 (= $x239 true)))
 (let (($x167 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1031X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1031X)))
 (let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> (and $x209 $x60) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1029X input.ind-%var1031X) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((input.ind-%var1029X (_ BitVec 32)) (input.ind-%var1030X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1029X)))
 (=> $x209 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1029X input.ind-%var1030X) false))))
 ))
 (let (($x73 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1028X)))
 (= $x273 false)))
 ))
 (let (($x152 (and (and $x73 $x198) $x167)))
 (let (($x199 (= $x152 true)))
 (let (($x112 (forall ((input.ind-%var1019X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1019X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1019X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var1018X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1018X)))
 (= $x194 false)))
 ))
 (let (($x157 (and $x166 $x112)))
 (let (($x276 (= $x157 true)))
 (let (($x116 (forall ((input.ind-%var1011X (_ BitVec 32)) (input.ind-%var1013X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1011X input.ind-%var1013X)))
 (let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1011X)))
 (=> (and $x209 $x60) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1011X input.ind-%var1013X) (_ bv0 32))))))
 ))
 (let (($x222 (forall ((input.ind-%var1011X (_ BitVec 32)) (input.ind-%var1012X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1011X)))
 (=> $x209 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1011X input.ind-%var1012X) false))))
 ))
 (let (($x124 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1010X)))
 (= $x273 false)))
 ))
 (let (($x145 (and (and $x124 $x222) $x116)))
 (let (($x174 (= $x145 true)))
 (let (($x275 (forall ((input.ind-%var1001X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1001X)))
 (=> $x194 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1001X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1000X)))
 (= $x194 false)))
 ))
 (let (($x154 (and $x170 $x275)))
 (let (($x284 (= $x154 true)))
 (let ((?x158 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x158)))
 (let (($x107 (= ?x49 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x107 true)))
 (let (($x42 (= $x82 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x122 (= $x48 true)))
 (let (($x115 (= $x122 true)))
 (let (($x109 (= $x115 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x17 (= $x114 true)))
 (let (($x129 (= $x17 true)))
 (let (($x119 (= $x129 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x127)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x156 $x87)))
 (let (($x100 (and $x155 $x79)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x123 $x100)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x103)))))))
 (let (($x97 (and $x110 $x164)))
 (let (($x70 (= $x97 true)))
 (let (($x140 (= $x70 true)))
 (let (($x159 (= $x140 true)))
 (let (($x69 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x126 (= $x69 true)))
 (let (($x95 (= $x126 true)))
 (let (($x40 (= $x95 true)))
 (let (($x138 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x136 (= $x138 true)))
 (let (($x120 (= $x136 true)))
 (let (($x53 (= $x120 true)))
 (let (($x33 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x68 (= $x33 true)))
 (let (($x80 (= $x68 true)))
 (let (($x91 (= $x80 true)))
 (let ((?x63 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x63)))
 (let (($x117 (= ?x14 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x76 (= $x117 true)))
 (let (($x55 (= $x76 true)))
 (let (($x75 (= ?x14 input.dst.llvm-%n)))
 (let (($x72 (= $x75 true)))
 (let (($x78 (= $x72 true)))
 (let ((?x13 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x13)))
 (let (($x65 (= ?x37 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x65 true)))
 (let (($x64 (= $x9 true)))
 (let (($x277 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x277 true)))
 (let (($x84 (= $x50 true)))
 (let (($x51 (= $x84 true)))
 (let (($x106 (and $x51 $x64)))
 (let (($x85 (and $x106 $x78)))
 (let (($x71 (and $x85 $x55)))
 (let (($x101 (and $x71 $x91)))
 (let (($x143 (and $x101 $x53)))
 (let (($x90 (and $x143 $x40)))
 (let (($x104 (and $x90 $x159)))
 (let (($x141 (and $x104 $x119)))
 (let (($x162 (and $x141 $x109)))
 (let (($x165 (and $x162 $x42)))
 (let (($x289 (and $x165 $x284)))
 (let (($x212 (and $x289 $x174)))
 (let (($x218 (and $x212 $x276)))
 (let (($x282 (and $x218 $x199)))
 (let (($x263 (and $x282 $x175)))
 (let (($x267 (and $x263 $x56)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x252 (and (not $x45) $x267)))
 (let (($x47 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x132 (and $x47 $x252)))
 (let (($x46 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x237 (and $x46 $x132)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x96 (and $x12 $x237)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x205 (and $x57 $x96)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x278 (and $x18 $x205)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x105 (and $x23 $x278)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x125 (and $x11 $x105)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x290 (and $x38 $x125)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x188 (and $x26 $x290)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x272 (and $x25 $x188)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x128 (and $x39 $x272)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x28 (and $x31 $x128)))
 (let (($x177 (=> $x28 $x206)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 196 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x187 (bvsge ?x150 (_ bv1 32))))
 (let (($x203 (= $x187 true)))
 (let (($x149 (= $x203 true)))
 (let (($x281 (forall ((input.ind-%var1103X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1103X)))
 (=> $x170 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1103X) (_ bv0 32)))))
 ))
 (let (($x233 (forall ((input.ind-%var1102X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1102X)))
 (= $x170 false)))
 ))
 (let (($x260 (and $x233 $x281)))
 (let (($x193 (= $x260 true)))
 (let (($x264 (forall ((input.ind-%var1095X (_ BitVec 32)) (input.ind-%var1097X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1095X input.ind-%var1097X)))
 (let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1095X)))
 (=> (and $x199 $x73) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1095X input.ind-%var1097X) (_ bv0 32))))))
 ))
 (let (($x258 (forall ((input.ind-%var1095X (_ BitVec 32)) (input.ind-%var1096X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1095X)))
 (=> $x199 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1095X input.ind-%var1096X) false))))
 ))
 (let (($x192 (forall ((input.ind-%var1094X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1094X)))
 (= $x5 false)))
 ))
 (let (($x195 (and (and $x192 $x258) $x264)))
 (let (($x66 (= $x195 true)))
 (let (($x186 (forall ((input.ind-%var1083X (_ BitVec 32)) (input.ind-%var1085X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1083X input.ind-%var1085X)))
 (let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1083X)))
 (=> (and $x199 $x73) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1083X input.ind-%var1085X) (_ bv0 32))))))
 ))
 (let (($x121 (forall ((input.ind-%var1083X (_ BitVec 32)) (input.ind-%var1084X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1083X)))
 (=> $x199 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1083X input.ind-%var1084X) false))))
 ))
 (let (($x241 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1082X)))
 (= $x5 false)))
 ))
 (let (($x67 (and (and $x241 $x121) $x186)))
 (let (($x229 (= $x67 true)))
 (let (($x163 (forall ((input.ind-%var1073X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1073X)))
 (=> $x170 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1073X) (_ bv0 32)))))
 ))
 (let (($x290 (forall ((input.ind-%var1072X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1072X)))
 (= $x170 false)))
 ))
 (let (($x171 (and $x290 $x163)))
 (let (($x206 (= $x171 true)))
 (let (($x252 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1067X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1067X)))
 (let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> (and $x199 $x73) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1065X input.ind-%var1067X) (_ bv0 32))))))
 ))
 (let (($x246 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1066X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> $x199 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1066X) false))))
 ))
 (let (($x174 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1064X)))
 (= $x5 false)))
 ))
 (let (($x237 (and (and $x174 $x246) $x252)))
 (let (($x96 (= $x237 true)))
 (let (($x94 (forall ((input.ind-%var1055X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1055X)))
 (=> $x170 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1055X) (_ bv0 32)))))
 ))
 (let (($x275 (forall ((input.ind-%var1054X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1054X)))
 (= $x170 false)))
 ))
 (let (($x238 (and $x275 $x94)))
 (let (($x222 (= $x238 true)))
 (let ((?x158 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x158)))
 (let (($x107 (= ?x49 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x107 true)))
 (let (($x42 (= $x82 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x122 (= $x48 true)))
 (let (($x115 (= $x122 true)))
 (let (($x109 (= $x115 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x17 (= $x114 true)))
 (let (($x129 (= $x17 true)))
 (let (($x119 (= $x129 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x127)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x156 $x87)))
 (let (($x100 (and $x155 $x79)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x133 $x100)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x134)))))))
 (let (($x97 (and $x123 $x164)))
 (let (($x70 (= $x97 true)))
 (let (($x140 (= $x70 true)))
 (let (($x159 (= $x140 true)))
 (let (($x53 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x143 (= $x53 true)))
 (let (($x69 (= $x143 true)))
 (let (($x126 (= $x69 true)))
 (let (($x91 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x91 true)))
 (let (($x138 (= $x101 true)))
 (let (($x136 (= $x138 true)))
 (let (($x55 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x55 true)))
 (let (($x33 (= $x71 true)))
 (let (($x68 (= $x33 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x64)))
 (let (($x78 (= ?x106 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x85 (= $x78 true)))
 (let (($x117 (= $x85 true)))
 (let (($x63 (= ?x106 input.dst.llvm-%n)))
 (let (($x14 (= $x63 true)))
 (let (($x75 (= $x14 true)))
 (let ((?x54 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x54)))
 (let (($x37 (= ?x52 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x37 true)))
 (let (($x65 (= $x6 true)))
 (let (($x61 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x61 true)))
 (let (($x277 (= $x62 true)))
 (let (($x50 (= $x277 true)))
 (let (($x9 (and $x50 $x65)))
 (let (($x72 (and $x9 $x75)))
 (let (($x76 (and $x72 $x117)))
 (let (($x80 (and $x76 $x68)))
 (let (($x120 (and $x80 $x136)))
 (let (($x95 (and $x120 $x126)))
 (let (($x104 (and $x95 $x159)))
 (let (($x141 (and $x104 $x119)))
 (let (($x162 (and $x141 $x109)))
 (let (($x165 (and $x162 $x42)))
 (let (($x201 (and $x165 $x222)))
 (let (($x205 (and $x201 $x96)))
 (let (($x177 (and $x205 $x206)))
 (let (($x259 (and $x177 $x229)))
 (let (($x88 (and $x259 $x66)))
 (let (($x240 (and $x88 $x193)))
 (let (($x19 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x226 (and (not $x19) $x240)))
 (let (($x46 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x224 (and $x46 $x226)))
 (let (($x12 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x118 (and $x12 $x224)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x130 (and $x22 $x118)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x113 (and $x24 $x130)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x131 (and $x142 $x113)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x92 (and $x35 $x131)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x286 (and $x21 $x92)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x230 (and $x36 $x286)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x147 (and $x10 $x230)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x161 (and $x43 $x147)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x213 (and $x77 $x161)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x221 (and $x31 $x213)))
 (let (($x280 (=> $x221 $x149)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let (($x187 (bvsge ?x150 (_ bv1 32))))
 (let (($x203 (= $x187 true)))
 (let (($x149 (= $x203 true)))
 (let (($x281 (forall ((input.ind-%var1103X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1103X)))
 (=> $x170 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1103X) (_ bv0 32)))))
 ))
 (let (($x233 (forall ((input.ind-%var1102X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1102X)))
 (= $x170 false)))
 ))
 (let (($x260 (and $x233 $x281)))
 (let (($x193 (= $x260 true)))
 (let (($x264 (forall ((input.ind-%var1095X (_ BitVec 32)) (input.ind-%var1097X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1095X input.ind-%var1097X)))
 (let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1095X)))
 (=> (and $x199 $x73) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1095X input.ind-%var1097X) (_ bv0 32))))))
 ))
 (let (($x258 (forall ((input.ind-%var1095X (_ BitVec 32)) (input.ind-%var1096X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1095X)))
 (=> $x199 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1095X input.ind-%var1096X) false))))
 ))
 (let (($x192 (forall ((input.ind-%var1094X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1094X)))
 (= $x5 false)))
 ))
 (let (($x195 (and (and $x192 $x258) $x264)))
 (let (($x66 (= $x195 true)))
 (let (($x186 (forall ((input.ind-%var1083X (_ BitVec 32)) (input.ind-%var1085X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1083X input.ind-%var1085X)))
 (let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1083X)))
 (=> (and $x199 $x73) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1083X input.ind-%var1085X) (_ bv0 32))))))
 ))
 (let (($x121 (forall ((input.ind-%var1083X (_ BitVec 32)) (input.ind-%var1084X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1083X)))
 (=> $x199 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1083X input.ind-%var1084X) false))))
 ))
 (let (($x241 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1082X)))
 (= $x5 false)))
 ))
 (let (($x67 (and (and $x241 $x121) $x186)))
 (let (($x229 (= $x67 true)))
 (let (($x163 (forall ((input.ind-%var1073X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1073X)))
 (=> $x170 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1073X) (_ bv0 32)))))
 ))
 (let (($x290 (forall ((input.ind-%var1072X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1072X)))
 (= $x170 false)))
 ))
 (let (($x171 (and $x290 $x163)))
 (let (($x206 (= $x171 true)))
 (let (($x252 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1067X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1067X)))
 (let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> (and $x199 $x73) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1065X input.ind-%var1067X) (_ bv0 32))))))
 ))
 (let (($x246 (forall ((input.ind-%var1065X (_ BitVec 32)) (input.ind-%var1066X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1065X)))
 (=> $x199 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1065X input.ind-%var1066X) false))))
 ))
 (let (($x174 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1064X)))
 (= $x5 false)))
 ))
 (let (($x237 (and (and $x174 $x246) $x252)))
 (let (($x96 (= $x237 true)))
 (let (($x94 (forall ((input.ind-%var1055X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1055X)))
 (=> $x170 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1055X) (_ bv0 32)))))
 ))
 (let (($x275 (forall ((input.ind-%var1054X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1054X)))
 (= $x170 false)))
 ))
 (let (($x238 (and $x275 $x94)))
 (let (($x222 (= $x238 true)))
 (let ((?x158 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x158)))
 (let (($x107 (= ?x49 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x107 true)))
 (let (($x42 (= $x82 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x122 (= $x48 true)))
 (let (($x115 (= $x122 true)))
 (let (($x109 (= $x115 true)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x17 (= $x114 true)))
 (let (($x129 (= $x17 true)))
 (let (($x119 (= $x129 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x127)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x156 $x87)))
 (let (($x100 (and $x155 $x79)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x133 $x100)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x134)))))))
 (let (($x97 (and $x123 $x164)))
 (let (($x70 (= $x97 true)))
 (let (($x140 (= $x70 true)))
 (let (($x159 (= $x140 true)))
 (let (($x53 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x143 (= $x53 true)))
 (let (($x69 (= $x143 true)))
 (let (($x126 (= $x69 true)))
 (let (($x91 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x91 true)))
 (let (($x138 (= $x101 true)))
 (let (($x136 (= $x138 true)))
 (let (($x55 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x55 true)))
 (let (($x33 (= $x71 true)))
 (let (($x68 (= $x33 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x64)))
 (let (($x78 (= ?x106 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x85 (= $x78 true)))
 (let (($x117 (= $x85 true)))
 (let (($x63 (= ?x106 input.dst.llvm-%n)))
 (let (($x14 (= $x63 true)))
 (let (($x75 (= $x14 true)))
 (let ((?x54 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x54)))
 (let (($x37 (= ?x52 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x37 true)))
 (let (($x65 (= $x6 true)))
 (let (($x61 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x61 true)))
 (let (($x277 (= $x62 true)))
 (let (($x50 (= $x277 true)))
 (let (($x9 (and $x50 $x65)))
 (let (($x72 (and $x9 $x75)))
 (let (($x76 (and $x72 $x117)))
 (let (($x80 (and $x76 $x68)))
 (let (($x120 (and $x80 $x136)))
 (let (($x95 (and $x120 $x126)))
 (let (($x104 (and $x95 $x159)))
 (let (($x141 (and $x104 $x119)))
 (let (($x162 (and $x141 $x109)))
 (let (($x165 (and $x162 $x42)))
 (let (($x201 (and $x165 $x222)))
 (let (($x205 (and $x201 $x96)))
 (let (($x177 (and $x205 $x206)))
 (let (($x259 (and $x177 $x229)))
 (let (($x88 (and $x259 $x66)))
 (let (($x240 (and $x88 $x193)))
 (let (($x19 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x226 (and (not $x19) $x240)))
 (let (($x46 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x224 (and $x46 $x226)))
 (let (($x12 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x118 (and $x12 $x224)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x130 (and $x22 $x118)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x113 (and $x24 $x130)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x131 (and $x142 $x113)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x92 (and $x35 $x131)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x286 (and $x21 $x92)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x230 (and $x36 $x286)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x147 (and $x10 $x230)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x161 (and $x43 $x147)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x213 (and $x77 $x161)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x221 (and $x31 $x213)))
 (let (($x280 (=> $x221 $x149)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0139fde3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x283 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x261 (bvsge ?x283 (_ bv0 32))))
 (let (($x32 (= $x261 true)))
 (let (($x223 (= $x32 true)))
 (let (($x197 (forall ((input.ind-%var1181X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1181X)))
 (=> $x162 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1181X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1180X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1180X)))
 (= $x162 false)))
 ))
 (let (($x204 (and $x287 $x197)))
 (let (($x262 (= $x204 true)))
 (let (($x200 (forall ((input.ind-%var1173X (_ BitVec 32)) (input.ind-%var1175X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1173X input.ind-%var1175X)))
 (let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1173X)))
 (=> (and $x290 $x267) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1173X input.ind-%var1175X) (_ bv0 32))))))
 ))
 (let (($x105 (forall ((input.ind-%var1173X (_ BitVec 32)) (input.ind-%var1174X (_ BitVec 32)) )(let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1173X)))
 (=> $x290 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1173X input.ind-%var1174X) false))))
 ))
 (let (($x194 (forall ((input.ind-%var1172X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1172X)))
 (= $x174 false)))
 ))
 (let (($x288 (and (and $x194 $x105) $x200)))
 (let (($x207 (= $x288 true)))
 (let (($x188 (forall ((input.ind-%var1161X (_ BitVec 32)) (input.ind-%var1163X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1161X input.ind-%var1163X)))
 (let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1161X)))
 (=> (and $x290 $x267) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1161X input.ind-%var1163X) (_ bv0 32))))))
 ))
 (let (($x191 (forall ((input.ind-%var1161X (_ BitVec 32)) (input.ind-%var1162X (_ BitVec 32)) )(let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1161X)))
 (=> $x290 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1161X input.ind-%var1162X) false))))
 ))
 (let (($x213 (forall ((input.ind-%var1160X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1160X)))
 (= $x174 false)))
 ))
 (let (($x289 (and (and $x213 $x191) $x188)))
 (let (($x212 (= $x289 true)))
 (let (($x113 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1151X)))
 (=> $x162 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1151X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1150X)))
 (= $x162 false)))
 ))
 (let (($x131 (and $x193 $x113)))
 (let (($x92 (= $x131 true)))
 (let (($x74 (forall ((input.ind-%var1143X (_ BitVec 32)) (input.ind-%var1145X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1143X input.ind-%var1145X)))
 (let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1143X)))
 (=> (and $x290 $x267) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1143X input.ind-%var1145X) (_ bv0 32))))))
 ))
 (let (($x171 (forall ((input.ind-%var1143X (_ BitVec 32)) (input.ind-%var1144X (_ BitVec 32)) )(let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1143X)))
 (=> $x290 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1143X input.ind-%var1144X) false))))
 ))
 (let (($x152 (forall ((input.ind-%var1142X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1142X)))
 (= $x174 false)))
 ))
 (let (($x195 (and (and $x152 $x171) $x74)))
 (let (($x66 (= $x195 true)))
 (let (($x94 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1133X)))
 (=> $x162 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1133X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var1132X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1132X)))
 (= $x162 false)))
 ))
 (let (($x238 (and $x82 $x94)))
 (let (($x222 (= $x238 true)))
 (let ((?x104 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x104)))
 (let (($x129 (= ?x114 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x129 true)))
 (let (($x141 (= $x119 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x100)))
 (let (($x97 (= ?x164 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x97 true)))
 (let (($x140 (= $x70 true)))
 (let (($x89 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x87 (= $x89 true)))
 (let (($x155 (= $x87 true)))
 (let (($x127 (= $x155 true)))
 (let (($x110 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x123 (= $x110 true)))
 (let (($x93 (= $x123 true)))
 (let (($x133 (= $x93 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x137)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x69 $x8)))
 (let (($x27 (and $x135 $x151)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x117 $x27)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x91)))))))
 (let (($x16 (and $x143 $x103)))
 (let (($x134 (= $x16 true)))
 (let (($x83 (= $x134 true)))
 (let (($x169 (= $x83 true)))
 (let (($x64 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x106 (= $x64 true)))
 (let (($x63 (= $x106 true)))
 (let (($x14 (= $x63 true)))
 (let ((?x50 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x50)))
 (let (($x37 (= ?x84 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x6 (= $x37 true)))
 (let (($x65 (= $x6 true)))
 (let (($x51 (= ?x84 input.dst.llvm-%n)))
 (let (($x54 (= $x51 true)))
 (let (($x52 (= $x54 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x45 true)))
 (let (($x61 (= $x185 true)))
 (let (($x62 (= $x61 true)))
 (let (($x13 (and $x62 $x52)))
 (let (($x9 (and $x13 $x65)))
 (let (($x75 (and $x9 $x14)))
 (let (($x59 (and $x75 $x169)))
 (let (($x156 (and $x59 $x133)))
 (let (($x79 (and $x156 $x127)))
 (let (($x159 (and $x79 $x140)))
 (let (($x48 (and $x159 $x141)))
 (let (($x201 (and $x48 $x222)))
 (let (($x88 (and $x201 $x66)))
 (let (($x286 (and $x88 $x92)))
 (let (($x166 (and $x286 $x212)))
 (let (($x86 (and $x166 $x207)))
 (let (($x112 (and $x86 $x262)))
 (let (($x47 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x125 (and (not $x47) $x112)))
 (let (($x12 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x248 (and $x12 $x125)))
 (let (($x22 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x251 (and $x22 $x248)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x285 (and $x41 $x251)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x28 (and $x18 $x285)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x244 (and $x23 $x28)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x272 (and $x11 $x244)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x181 (and $x38 $x272)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x245 (and $x26 $x181)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x111 (and $x25 $x245)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x236 (and $x39 $x111)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x219 (and $x58 $x236)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x148 (and $x31 $x219)))
 (let (($x279 (=> $x148 $x223)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x283 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let (($x261 (bvsge ?x283 (_ bv0 32))))
 (let (($x32 (= $x261 true)))
 (let (($x223 (= $x32 true)))
 (let (($x197 (forall ((input.ind-%var1181X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1181X)))
 (=> $x162 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1181X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1180X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1180X)))
 (= $x162 false)))
 ))
 (let (($x204 (and $x287 $x197)))
 (let (($x262 (= $x204 true)))
 (let (($x200 (forall ((input.ind-%var1173X (_ BitVec 32)) (input.ind-%var1175X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1173X input.ind-%var1175X)))
 (let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1173X)))
 (=> (and $x290 $x267) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1173X input.ind-%var1175X) (_ bv0 32))))))
 ))
 (let (($x105 (forall ((input.ind-%var1173X (_ BitVec 32)) (input.ind-%var1174X (_ BitVec 32)) )(let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1173X)))
 (=> $x290 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1173X input.ind-%var1174X) false))))
 ))
 (let (($x194 (forall ((input.ind-%var1172X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1172X)))
 (= $x174 false)))
 ))
 (let (($x288 (and (and $x194 $x105) $x200)))
 (let (($x207 (= $x288 true)))
 (let (($x188 (forall ((input.ind-%var1161X (_ BitVec 32)) (input.ind-%var1163X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1161X input.ind-%var1163X)))
 (let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1161X)))
 (=> (and $x290 $x267) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1161X input.ind-%var1163X) (_ bv0 32))))))
 ))
 (let (($x191 (forall ((input.ind-%var1161X (_ BitVec 32)) (input.ind-%var1162X (_ BitVec 32)) )(let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1161X)))
 (=> $x290 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1161X input.ind-%var1162X) false))))
 ))
 (let (($x213 (forall ((input.ind-%var1160X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1160X)))
 (= $x174 false)))
 ))
 (let (($x289 (and (and $x213 $x191) $x188)))
 (let (($x212 (= $x289 true)))
 (let (($x113 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1151X)))
 (=> $x162 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1151X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1150X)))
 (= $x162 false)))
 ))
 (let (($x131 (and $x193 $x113)))
 (let (($x92 (= $x131 true)))
 (let (($x74 (forall ((input.ind-%var1143X (_ BitVec 32)) (input.ind-%var1145X (_ BitVec 32)) )(let (($x267 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1143X input.ind-%var1145X)))
 (let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1143X)))
 (=> (and $x290 $x267) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1143X input.ind-%var1145X) (_ bv0 32))))))
 ))
 (let (($x171 (forall ((input.ind-%var1143X (_ BitVec 32)) (input.ind-%var1144X (_ BitVec 32)) )(let (($x290 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1143X)))
 (=> $x290 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1143X input.ind-%var1144X) false))))
 ))
 (let (($x152 (forall ((input.ind-%var1142X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1142X)))
 (= $x174 false)))
 ))
 (let (($x195 (and (and $x152 $x171) $x74)))
 (let (($x66 (= $x195 true)))
 (let (($x94 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1133X)))
 (=> $x162 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1133X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var1132X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1132X)))
 (= $x162 false)))
 ))
 (let (($x238 (and $x82 $x94)))
 (let (($x222 (= $x238 true)))
 (let ((?x104 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x104)))
 (let (($x129 (= ?x114 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x129 true)))
 (let (($x141 (= $x119 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x100)))
 (let (($x97 (= ?x164 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x97 true)))
 (let (($x140 (= $x70 true)))
 (let (($x89 (bvsge input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x87 (= $x89 true)))
 (let (($x155 (= $x87 true)))
 (let (($x127 (= $x155 true)))
 (let (($x110 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x123 (= $x110 true)))
 (let (($x93 (= $x123 true)))
 (let (($x133 (= $x93 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x137)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x69 $x8)))
 (let (($x27 (and $x135 $x151)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x117 $x27)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x91)))))))
 (let (($x16 (and $x143 $x103)))
 (let (($x134 (= $x16 true)))
 (let (($x83 (= $x134 true)))
 (let (($x169 (= $x83 true)))
 (let (($x64 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x106 (= $x64 true)))
 (let (($x63 (= $x106 true)))
 (let (($x14 (= $x63 true)))
 (let ((?x50 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x50)))
 (let (($x37 (= ?x84 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x6 (= $x37 true)))
 (let (($x65 (= $x6 true)))
 (let (($x51 (= ?x84 input.dst.llvm-%n)))
 (let (($x54 (= $x51 true)))
 (let (($x52 (= $x54 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x45 true)))
 (let (($x61 (= $x185 true)))
 (let (($x62 (= $x61 true)))
 (let (($x13 (and $x62 $x52)))
 (let (($x9 (and $x13 $x65)))
 (let (($x75 (and $x9 $x14)))
 (let (($x59 (and $x75 $x169)))
 (let (($x156 (and $x59 $x133)))
 (let (($x79 (and $x156 $x127)))
 (let (($x159 (and $x79 $x140)))
 (let (($x48 (and $x159 $x141)))
 (let (($x201 (and $x48 $x222)))
 (let (($x88 (and $x201 $x66)))
 (let (($x286 (and $x88 $x92)))
 (let (($x166 (and $x286 $x212)))
 (let (($x86 (and $x166 $x207)))
 (let (($x112 (and $x86 $x262)))
 (let (($x47 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x125 (and (not $x47) $x112)))
 (let (($x12 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x248 (and $x12 $x125)))
 (let (($x22 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x251 (and $x22 $x248)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x285 (and $x41 $x251)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x28 (and $x18 $x285)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x244 (and $x23 $x28)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x272 (and $x11 $x244)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x181 (and $x38 $x272)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x245 (and $x26 $x181)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x111 (and $x25 $x245)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x236 (and $x39 $x111)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x219 (and $x58 $x236)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x148 (and $x31 $x219)))
 (let (($x279 (=> $x148 $x223)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000114)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000117)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000114)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000258)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000025b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000258)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x278 (bvuge ?x139 (_ bv1 32))))
 (let (($x196 (= $x278 true)))
 (let (($x182 (= $x196 true)))
 (let (($x260 (forall ((input.ind-%var1259X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1259X)))
 (=> $x141 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1259X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var1258X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1258X)))
 (= $x141 false)))
 ))
 (let (($x177 (and $x165 $x260)))
 (let (($x241 (= $x177 true)))
 (let (($x203 (forall ((input.ind-%var1251X (_ BitVec 32)) (input.ind-%var1253X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1251X input.ind-%var1253X)))
 (let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1251X)))
 (=> (and $x213 $x193) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1251X input.ind-%var1253X) (_ bv0 32))))))
 ))
 (let (($x291 (forall ((input.ind-%var1251X (_ BitVec 32)) (input.ind-%var1252X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1251X)))
 (=> $x213 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1251X input.ind-%var1252X) false))))
 ))
 (let (($x90 (forall ((input.ind-%var1250X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1250X)))
 (= $x163 false)))
 ))
 (let (($x99 (and (and $x90 $x291) $x203)))
 (let (($x128 (= $x99 true)))
 (let (($x224 (forall ((input.ind-%var1239X (_ BitVec 32)) (input.ind-%var1241X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1239X input.ind-%var1241X)))
 (let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1239X)))
 (=> (and $x213 $x193) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1239X input.ind-%var1241X) (_ bv0 32))))))
 ))
 (let (($x252 (forall ((input.ind-%var1239X (_ BitVec 32)) (input.ind-%var1240X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1239X)))
 (=> $x213 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1239X input.ind-%var1240X) false))))
 ))
 (let (($x223 (forall ((input.ind-%var1238X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1238X)))
 (= $x163 false)))
 ))
 (let (($x122 (and (and $x223 $x252) $x224)))
 (let (($x115 (= $x122 true)))
 (let (($x111 (forall ((input.ind-%var1229X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1229X)))
 (=> $x141 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1229X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var1228X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1228X)))
 (= $x141 false)))
 ))
 (let (($x236 (and $x285 $x111)))
 (let (($x219 (= $x236 true)))
 (let (($x287 (forall ((input.ind-%var1221X (_ BitVec 32)) (input.ind-%var1223X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1221X input.ind-%var1223X)))
 (let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1221X)))
 (=> (and $x213 $x193) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1221X input.ind-%var1223X) (_ bv0 32))))))
 ))
 (let (($x154 (forall ((input.ind-%var1221X (_ BitVec 32)) (input.ind-%var1222X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1221X)))
 (=> $x213 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1221X input.ind-%var1222X) false))))
 ))
 (let (($x266 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1220X)))
 (= $x163 false)))
 ))
 (let (($x204 (and (and $x266 $x154) $x287)))
 (let (($x262 (= $x204 true)))
 (let (($x73 (forall ((input.ind-%var1211X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1211X)))
 (=> $x141 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1211X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var1210X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1210X)))
 (= $x141 false)))
 ))
 (let (($x152 (and $x107 $x73)))
 (let (($x178 (= $x152 true)))
 (let ((?x97 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x97)))
 (let (($x140 (= ?x70 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x140 true)))
 (let (($x104 (= $x159 true)))
 (let (($x155 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x127 (= $x155 true)))
 (let (($x79 (= $x127 true)))
 (let (($x100 (= $x79 true)))
 (let (($x133 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (= $x133 true)))
 (let (($x7 (= $x156 true)))
 (let (($x89 (= $x7 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x27)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x95 $x137)))
 (let (($x16 (and $x151 $x103)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x71 $x16)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x136)))))))
 (let (($x83 (and $x126 $x134)))
 (let (($x169 (= $x83 true)))
 (let (($x59 (= $x169 true)))
 (let (($x110 (= $x59 true)))
 (let (($x64 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x106 (= $x64 true)))
 (let (($x63 (= $x106 true)))
 (let (($x14 (= $x63 true)))
 (let ((?x277 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x277)))
 (let (($x37 (= ?x50 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x6 (= $x37 true)))
 (let (($x65 (= $x6 true)))
 (let (($x51 (= ?x50 input.dst.llvm-%n)))
 (let (($x54 (= $x51 true)))
 (let (($x52 (= $x54 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x19)))
 (let (($x185 (= ?x144 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x185 true)))
 (let (($x62 (= $x61 true)))
 (let (($x13 (and $x62 $x52)))
 (let (($x9 (and $x13 $x65)))
 (let (($x75 (and $x9 $x14)))
 (let (($x123 (and $x75 $x110)))
 (let (($x87 (and $x123 $x89)))
 (let (($x164 (and $x87 $x100)))
 (let (($x114 (and $x164 $x104)))
 (let (($x290 (and $x114 $x178)))
 (let (($x112 (and $x290 $x262)))
 (let (($x148 (and $x112 $x219)))
 (let (($x121 (and $x148 $x115)))
 (let (($x173 (and $x121 $x128)))
 (let (($x229 (and $x173 $x241)))
 (let (($x46 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x161 (and (not $x46) $x229)))
 (let (($x22 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x226 (and $x22 $x161)))
 (let (($x41 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x130 (and $x41 $x226)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x149 (and $x57 $x130)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x198 (and $x142 $x149)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x187 (and $x35 $x198)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x280 (and $x21 $x187)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x202 (and $x36 $x280)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x220 (and $x10 $x202)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x292 (and $x43 $x220)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x263 (and $x77 $x292)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x210 (and $x40 $x263)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x15 (and $x31 $x210)))
 (let (($x276 (=> $x15 $x182)))
 (not $x276)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x278 (bvuge ?x139 (_ bv1 32))))
 (let (($x196 (= $x278 true)))
 (let (($x182 (= $x196 true)))
 (let (($x260 (forall ((input.ind-%var1259X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1259X)))
 (=> $x141 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1259X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var1258X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1258X)))
 (= $x141 false)))
 ))
 (let (($x177 (and $x165 $x260)))
 (let (($x241 (= $x177 true)))
 (let (($x203 (forall ((input.ind-%var1251X (_ BitVec 32)) (input.ind-%var1253X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1251X input.ind-%var1253X)))
 (let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1251X)))
 (=> (and $x213 $x193) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1251X input.ind-%var1253X) (_ bv0 32))))))
 ))
 (let (($x291 (forall ((input.ind-%var1251X (_ BitVec 32)) (input.ind-%var1252X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1251X)))
 (=> $x213 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1251X input.ind-%var1252X) false))))
 ))
 (let (($x90 (forall ((input.ind-%var1250X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1250X)))
 (= $x163 false)))
 ))
 (let (($x99 (and (and $x90 $x291) $x203)))
 (let (($x128 (= $x99 true)))
 (let (($x224 (forall ((input.ind-%var1239X (_ BitVec 32)) (input.ind-%var1241X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1239X input.ind-%var1241X)))
 (let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1239X)))
 (=> (and $x213 $x193) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1239X input.ind-%var1241X) (_ bv0 32))))))
 ))
 (let (($x252 (forall ((input.ind-%var1239X (_ BitVec 32)) (input.ind-%var1240X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1239X)))
 (=> $x213 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1239X input.ind-%var1240X) false))))
 ))
 (let (($x223 (forall ((input.ind-%var1238X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1238X)))
 (= $x163 false)))
 ))
 (let (($x122 (and (and $x223 $x252) $x224)))
 (let (($x115 (= $x122 true)))
 (let (($x111 (forall ((input.ind-%var1229X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1229X)))
 (=> $x141 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1229X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var1228X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1228X)))
 (= $x141 false)))
 ))
 (let (($x236 (and $x285 $x111)))
 (let (($x219 (= $x236 true)))
 (let (($x287 (forall ((input.ind-%var1221X (_ BitVec 32)) (input.ind-%var1223X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1221X input.ind-%var1223X)))
 (let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1221X)))
 (=> (and $x213 $x193) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1221X input.ind-%var1223X) (_ bv0 32))))))
 ))
 (let (($x154 (forall ((input.ind-%var1221X (_ BitVec 32)) (input.ind-%var1222X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1221X)))
 (=> $x213 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1221X input.ind-%var1222X) false))))
 ))
 (let (($x266 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1220X)))
 (= $x163 false)))
 ))
 (let (($x204 (and (and $x266 $x154) $x287)))
 (let (($x262 (= $x204 true)))
 (let (($x73 (forall ((input.ind-%var1211X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1211X)))
 (=> $x141 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1211X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var1210X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1210X)))
 (= $x141 false)))
 ))
 (let (($x152 (and $x107 $x73)))
 (let (($x178 (= $x152 true)))
 (let ((?x97 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x97)))
 (let (($x140 (= ?x70 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x140 true)))
 (let (($x104 (= $x159 true)))
 (let (($x155 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x127 (= $x155 true)))
 (let (($x79 (= $x127 true)))
 (let (($x100 (= $x79 true)))
 (let (($x133 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (= $x133 true)))
 (let (($x7 (= $x156 true)))
 (let (($x89 (= $x7 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x27)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x95 $x137)))
 (let (($x16 (and $x151 $x103)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x71 $x16)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x136)))))))
 (let (($x83 (and $x126 $x134)))
 (let (($x169 (= $x83 true)))
 (let (($x59 (= $x169 true)))
 (let (($x110 (= $x59 true)))
 (let (($x64 (bvuge input.spec-%var-i-0.L3%30%bbentry (_ bv1 32))))
 (let (($x106 (= $x64 true)))
 (let (($x63 (= $x106 true)))
 (let (($x14 (= $x63 true)))
 (let ((?x277 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x277)))
 (let (($x37 (= ?x50 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x6 (= $x37 true)))
 (let (($x65 (= $x6 true)))
 (let (($x51 (= ?x50 input.dst.llvm-%n)))
 (let (($x54 (= $x51 true)))
 (let (($x52 (= $x54 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x19)))
 (let (($x185 (= ?x144 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x185 true)))
 (let (($x62 (= $x61 true)))
 (let (($x13 (and $x62 $x52)))
 (let (($x9 (and $x13 $x65)))
 (let (($x75 (and $x9 $x14)))
 (let (($x123 (and $x75 $x110)))
 (let (($x87 (and $x123 $x89)))
 (let (($x164 (and $x87 $x100)))
 (let (($x114 (and $x164 $x104)))
 (let (($x290 (and $x114 $x178)))
 (let (($x112 (and $x290 $x262)))
 (let (($x148 (and $x112 $x219)))
 (let (($x121 (and $x148 $x115)))
 (let (($x173 (and $x121 $x128)))
 (let (($x229 (and $x173 $x241)))
 (let (($x46 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x161 (and (not $x46) $x229)))
 (let (($x22 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x226 (and $x22 $x161)))
 (let (($x41 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x130 (and $x41 $x226)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x149 (and $x57 $x130)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x198 (and $x142 $x149)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x187 (and $x35 $x198)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x280 (and $x21 $x187)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x202 (and $x36 $x280)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x220 (and $x10 $x202)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x292 (and $x43 $x220)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x263 (and $x77 $x292)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x210 (and $x40 $x263)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x15 (and $x31 $x210)))
 (let (($x276 (=> $x15 $x182)))
 (not $x276)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000568)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000056b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000568)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x175 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x240 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x42 (bvmul ?x240 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x42)))
 (let (($x230 (= ?x246 ?x175)))
 (let (($x5 (= $x230 true)))
 (let (($x222 (forall ((input.ind-%var1337X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1337X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1337X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var1336X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1336X)))
 (= $x164 false)))
 ))
 (let (($x131 (and $x221 $x222)))
 (let (($x153 (= $x131 true)))
 (let (($x49 (forall ((input.ind-%var1329X (_ BitVec 32)) (input.ind-%var1331X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1329X input.ind-%var1331X)))
 (let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1329X)))
 (=> (and $x285 $x86) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1329X input.ind-%var1331X) (_ bv0 32))))))
 ))
 (let (($x248 (forall ((input.ind-%var1329X (_ BitVec 32)) (input.ind-%var1330X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1329X)))
 (=> $x285 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1329X input.ind-%var1330X) false))))
 ))
 (let (($x129 (forall ((input.ind-%var1328X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1328X)))
 (= $x266 false)))
 ))
 (let (($x109 (and (and $x129 $x248) $x49)))
 (let (($x283 (= $x109 true)))
 (let (($x28 (forall ((input.ind-%var1317X (_ BitVec 32)) (input.ind-%var1319X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1317X input.ind-%var1319X)))
 (let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1317X)))
 (=> (and $x285 $x86) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1317X input.ind-%var1319X) (_ bv0 32))))))
 ))
 (let (($x180 (forall ((input.ind-%var1317X (_ BitVec 32)) (input.ind-%var1318X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1317X)))
 (=> $x285 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1317X input.ind-%var1318X) false))))
 ))
 (let (($x210 (forall ((input.ind-%var1316X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1316X)))
 (= $x266 false)))
 ))
 (let (($x209 (and (and $x210 $x180) $x28)))
 (let (($x259 (= $x209 true)))
 (let (($x198 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1307X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1307X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1306X)))
 (= $x164 false)))
 ))
 (let (($x187 (and $x241 $x198)))
 (let (($x280 (= $x187 true)))
 (let (($x275 (forall ((input.ind-%var1299X (_ BitVec 32)) (input.ind-%var1301X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1299X input.ind-%var1301X)))
 (let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1299X)))
 (=> (and $x285 $x86) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1299X input.ind-%var1301X) (_ bv0 32))))))
 ))
 (let (($x236 (forall ((input.ind-%var1299X (_ BitVec 32)) (input.ind-%var1300X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1299X)))
 (=> $x285 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1299X input.ind-%var1300X) false))))
 ))
 (let (($x286 (forall ((input.ind-%var1298X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1298X)))
 (= $x266 false)))
 ))
 (let (($x99 (and (and $x286 $x236) $x275)))
 (let (($x128 (= $x99 true)))
 (let (($x73 (forall ((input.ind-%var1289X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1289X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1289X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var1288X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1288X)))
 (= $x164 false)))
 ))
 (let (($x152 (and $x159 $x73)))
 (let (($x178 (= $x152 true)))
 (let ((?x93 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x93)))
 (let (($x7 (= ?x133 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x7 true)))
 (let (($x87 (= $x89 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x16)))
 (let (($x83 (= ?x134 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x169 (= $x83 true)))
 (let (($x59 (= $x169 true)))
 (let (($x135 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x137 (= $x135 true)))
 (let (($x151 (= $x137 true)))
 (let (($x27 (= $x151 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x136)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x69 $x138)))
 (let (($x143 (and $x91 $x120)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x54 $x143)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x64)))))))
 (let (($x117 (and $x80 $x85)))
 (let (($x126 (= $x117 true)))
 (let (($x53 (= $x126 true)))
 (let (($x71 (= $x53 true)))
 (let ((?x118 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x118)))
 (let (($x185 (= ?x47 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x61 (= $x185 true)))
 (let (($x62 (= $x61 true)))
 (let (($x19 (= ?x47 input.dst.llvm-%n)))
 (let (($x144 (= $x19 true)))
 (let (($x45 (= $x144 true)))
 (let (($x277 (and $x45 $x62)))
 (let (($x95 (and $x277 $x71)))
 (let (($x103 (and $x95 $x27)))
 (let (($x110 (and $x103 $x59)))
 (let (($x155 (and $x110 $x87)))
 (let (($x290 (and $x155 $x178)))
 (let (($x173 (and $x290 $x128)))
 (let (($x202 (and $x173 $x280)))
 (let (($x258 (and $x202 $x259)))
 (let (($x261 (and $x258 $x283)))
 (let (($x74 (and $x261 $x153)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x251 (and (not $x12) $x74)))
 (let (($x41 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x289 (and $x41 $x251)))
 (let (($x57 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x212 (and $x57 $x289)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x200 (and $x24 $x212)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x181 (and $x23 $x200)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x32 (and $x11 $x181)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x244 (and $x38 $x32)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x245 (and $x26 $x244)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x216 (and $x25 $x245)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x282 (and $x39 $x216)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x78 (and $x58 $x282)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x218 (and $x72 $x78)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x239 (and $x31 $x218)))
 (let (($x184 (=> $x239 $x5)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x175 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x240 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x42 (bvmul ?x240 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x42)))
 (let (($x230 (= ?x246 ?x175)))
 (let (($x5 (= $x230 true)))
 (let (($x222 (forall ((input.ind-%var1337X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1337X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1337X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var1336X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1336X)))
 (= $x164 false)))
 ))
 (let (($x131 (and $x221 $x222)))
 (let (($x153 (= $x131 true)))
 (let (($x49 (forall ((input.ind-%var1329X (_ BitVec 32)) (input.ind-%var1331X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1329X input.ind-%var1331X)))
 (let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1329X)))
 (=> (and $x285 $x86) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1329X input.ind-%var1331X) (_ bv0 32))))))
 ))
 (let (($x248 (forall ((input.ind-%var1329X (_ BitVec 32)) (input.ind-%var1330X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1329X)))
 (=> $x285 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1329X input.ind-%var1330X) false))))
 ))
 (let (($x129 (forall ((input.ind-%var1328X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1328X)))
 (= $x266 false)))
 ))
 (let (($x109 (and (and $x129 $x248) $x49)))
 (let (($x283 (= $x109 true)))
 (let (($x28 (forall ((input.ind-%var1317X (_ BitVec 32)) (input.ind-%var1319X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1317X input.ind-%var1319X)))
 (let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1317X)))
 (=> (and $x285 $x86) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1317X input.ind-%var1319X) (_ bv0 32))))))
 ))
 (let (($x180 (forall ((input.ind-%var1317X (_ BitVec 32)) (input.ind-%var1318X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1317X)))
 (=> $x285 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1317X input.ind-%var1318X) false))))
 ))
 (let (($x210 (forall ((input.ind-%var1316X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1316X)))
 (= $x266 false)))
 ))
 (let (($x209 (and (and $x210 $x180) $x28)))
 (let (($x259 (= $x209 true)))
 (let (($x198 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1307X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1307X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1306X)))
 (= $x164 false)))
 ))
 (let (($x187 (and $x241 $x198)))
 (let (($x280 (= $x187 true)))
 (let (($x275 (forall ((input.ind-%var1299X (_ BitVec 32)) (input.ind-%var1301X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1299X input.ind-%var1301X)))
 (let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1299X)))
 (=> (and $x285 $x86) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1299X input.ind-%var1301X) (_ bv0 32))))))
 ))
 (let (($x236 (forall ((input.ind-%var1299X (_ BitVec 32)) (input.ind-%var1300X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1299X)))
 (=> $x285 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1299X input.ind-%var1300X) false))))
 ))
 (let (($x286 (forall ((input.ind-%var1298X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1298X)))
 (= $x266 false)))
 ))
 (let (($x99 (and (and $x286 $x236) $x275)))
 (let (($x128 (= $x99 true)))
 (let (($x73 (forall ((input.ind-%var1289X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1289X)))
 (=> $x164 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1289X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var1288X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1288X)))
 (= $x164 false)))
 ))
 (let (($x152 (and $x159 $x73)))
 (let (($x178 (= $x152 true)))
 (let ((?x93 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x93)))
 (let (($x7 (= ?x133 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x7 true)))
 (let (($x87 (= $x89 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x16)))
 (let (($x83 (= ?x134 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x169 (= $x83 true)))
 (let (($x59 (= $x169 true)))
 (let (($x135 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x137 (= $x135 true)))
 (let (($x151 (= $x137 true)))
 (let (($x27 (= $x151 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x136)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x69 $x138)))
 (let (($x143 (and $x91 $x120)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x54 $x143)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x64)))))))
 (let (($x117 (and $x80 $x85)))
 (let (($x126 (= $x117 true)))
 (let (($x53 (= $x126 true)))
 (let (($x71 (= $x53 true)))
 (let ((?x118 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x118)))
 (let (($x185 (= ?x47 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x61 (= $x185 true)))
 (let (($x62 (= $x61 true)))
 (let (($x19 (= ?x47 input.dst.llvm-%n)))
 (let (($x144 (= $x19 true)))
 (let (($x45 (= $x144 true)))
 (let (($x277 (and $x45 $x62)))
 (let (($x95 (and $x277 $x71)))
 (let (($x103 (and $x95 $x27)))
 (let (($x110 (and $x103 $x59)))
 (let (($x155 (and $x110 $x87)))
 (let (($x290 (and $x155 $x178)))
 (let (($x173 (and $x290 $x128)))
 (let (($x202 (and $x173 $x280)))
 (let (($x258 (and $x202 $x259)))
 (let (($x261 (and $x258 $x283)))
 (let (($x74 (and $x261 $x153)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x251 (and (not $x12) $x74)))
 (let (($x41 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x289 (and $x41 $x251)))
 (let (($x57 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x212 (and $x57 $x289)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x200 (and $x24 $x212)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x181 (and $x23 $x200)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x32 (and $x11 $x181)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x244 (and $x38 $x32)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x245 (and $x26 $x244)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x216 (and $x25 $x245)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x282 (and $x39 $x216)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x78 (and $x58 $x282)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x218 (and $x72 $x78)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x239 (and $x31 $x218)))
 (let (($x184 (=> $x239 $x5)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x264 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x205 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x66 (bvmul ?x205 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x66)))
 (let (($x145 (= ?x30 ?x264)))
 (let (($x170 (= $x145 true)))
 (let (($x115 (forall ((input.ind-%var1391X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1391X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1391X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var1390X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1390X)))
 (= $x159 false)))
 ))
 (let (($x130 (and $x122 $x115)))
 (let (($x263 (= $x130 true)))
 (let (($x272 (forall ((input.ind-%var1383X (_ BitVec 32)) (input.ind-%var1385X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1383X input.ind-%var1385X)))
 (let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1383X)))
 (=> (and $x259 $x210) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1383X input.ind-%var1385X) (_ bv0 32))))))
 ))
 (let (($x124 (forall ((input.ind-%var1383X (_ BitVec 32)) (input.ind-%var1384X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1383X)))
 (=> $x259 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1383X input.ind-%var1384X) false))))
 ))
 (let (($x163 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1382X)))
 (= $x121 false)))
 ))
 (let (($x233 (and (and $x163 $x124) $x272)))
 (let (($x238 (= $x233 true)))
 (let (($x79 (forall ((input.ind-%var1371X (_ BitVec 32)) (input.ind-%var1373X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1371X input.ind-%var1373X)))
 (let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1371X)))
 (=> (and $x259 $x210) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1371X input.ind-%var1373X) (_ bv0 32))))))
 ))
 (let (($x104 (forall ((input.ind-%var1371X (_ BitVec 32)) (input.ind-%var1372X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1371X)))
 (=> $x259 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1371X input.ind-%var1372X) false))))
 ))
 (let (($x84 (forall ((input.ind-%var1370X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1370X)))
 (= $x121 false)))
 ))
 (let (($x15 (and (and $x84 $x104) $x79)))
 (let (($x139 (= $x15 true)))
 (let (($x42 (forall ((input.ind-%var1361X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1361X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1361X) (_ bv0 32)))))
 ))
 (let (($x216 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1360X)))
 (= $x159 false)))
 ))
 (let (($x246 (and $x216 $x42)))
 (let (($x175 (= $x246 true)))
 (let (($x251 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1355X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1355X)))
 (let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> (and $x259 $x210) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1353X input.ind-%var1355X) (_ bv0 32))))))
 ))
 (let (($x129 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1354X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> $x259 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1354X) false))))
 ))
 (let (($x128 (forall ((input.ind-%var1352X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1352X)))
 (= $x121 false)))
 ))
 (let (($x212 (and (and $x128 $x129) $x251)))
 (let (($x200 (= $x212 true)))
 (let (($x112 (forall ((input.ind-%var1343X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1343X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1343X) (_ bv0 32)))))
 ))
 (let (($x73 (forall ((input.ind-%var1342X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1342X)))
 (= $x159 false)))
 ))
 (let (($x111 (and $x73 $x112)))
 (let (($x236 (= $x111 true)))
 (let ((?x133 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x133)))
 (let (($x7 (= ?x156 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x7 true)))
 (let (($x87 (= $x89 true)))
 (let (($x169 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x169 true)))
 (let (($x110 (= $x59 true)))
 (let (($x123 (= $x110 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x95)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x85 $x53)))
 (let (($x135 (and $x71 $x8)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x63 $x135)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x33)))))))
 (let (($x151 (and $x143 $x137)))
 (let (($x27 (= $x151 true)))
 (let (($x103 (= $x27 true)))
 (let (($x16 (= $x103 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x45)))
 (let (($x68 (= ?x185 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x37 (= $x68 true)))
 (let (($x65 (= $x37 true)))
 (let (($x62 (= ?x185 input.dst.llvm-%n)))
 (let (($x277 (= $x62 true)))
 (let (($x52 (= $x277 true)))
 (let ((?x46 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x46)))
 (let (($x167 (= ?x118 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x167 true)))
 (let (($x144 (= $x19 true)))
 (let (($x13 (and $x144 $x52)))
 (let (($x9 (and $x13 $x65)))
 (let (($x134 (and $x9 $x16)))
 (let (($x93 (and $x134 $x123)))
 (let (($x155 (and $x93 $x87)))
 (let (($x203 (and $x155 $x236)))
 (let (($x181 (and $x203 $x200)))
 (let (($x230 (and $x181 $x175)))
 (let (($x166 (and $x230 $x139)))
 (let (($x213 (and $x166 $x238)))
 (let (($x161 (and $x213 $x263)))
 (let (($x22 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x182 (and (not $x22) $x161)))
 (let (($x57 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x113 (and $x57 $x182)))
 (let (($x24 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x278 (and $x24 $x113)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x276 (and $x18 $x278)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x17 (and $x35 $x276)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x48 (and $x21 $x17)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x94 (and $x36 $x48)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x105 (and $x10 $x94)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x186 (and $x43 $x105)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x281 (and $x77 $x186)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x189 (and $x40 $x281)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x125 (and $x146 $x189)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x29 (and $x31 $x125)))
 (let (($x273 (=> $x29 $x170)))
 (not $x273)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x264 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x205 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x66 (bvmul ?x205 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x66)))
 (let (($x145 (= ?x30 ?x264)))
 (let (($x170 (= $x145 true)))
 (let (($x115 (forall ((input.ind-%var1391X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1391X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1391X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var1390X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1390X)))
 (= $x159 false)))
 ))
 (let (($x130 (and $x122 $x115)))
 (let (($x263 (= $x130 true)))
 (let (($x272 (forall ((input.ind-%var1383X (_ BitVec 32)) (input.ind-%var1385X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1383X input.ind-%var1385X)))
 (let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1383X)))
 (=> (and $x259 $x210) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1383X input.ind-%var1385X) (_ bv0 32))))))
 ))
 (let (($x124 (forall ((input.ind-%var1383X (_ BitVec 32)) (input.ind-%var1384X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1383X)))
 (=> $x259 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1383X input.ind-%var1384X) false))))
 ))
 (let (($x163 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1382X)))
 (= $x121 false)))
 ))
 (let (($x233 (and (and $x163 $x124) $x272)))
 (let (($x238 (= $x233 true)))
 (let (($x79 (forall ((input.ind-%var1371X (_ BitVec 32)) (input.ind-%var1373X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1371X input.ind-%var1373X)))
 (let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1371X)))
 (=> (and $x259 $x210) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1371X input.ind-%var1373X) (_ bv0 32))))))
 ))
 (let (($x104 (forall ((input.ind-%var1371X (_ BitVec 32)) (input.ind-%var1372X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1371X)))
 (=> $x259 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1371X input.ind-%var1372X) false))))
 ))
 (let (($x84 (forall ((input.ind-%var1370X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1370X)))
 (= $x121 false)))
 ))
 (let (($x15 (and (and $x84 $x104) $x79)))
 (let (($x139 (= $x15 true)))
 (let (($x42 (forall ((input.ind-%var1361X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1361X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1361X) (_ bv0 32)))))
 ))
 (let (($x216 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1360X)))
 (= $x159 false)))
 ))
 (let (($x246 (and $x216 $x42)))
 (let (($x175 (= $x246 true)))
 (let (($x251 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1355X (_ BitVec 32)) )(let (($x210 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1355X)))
 (let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> (and $x259 $x210) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1353X input.ind-%var1355X) (_ bv0 32))))))
 ))
 (let (($x129 (forall ((input.ind-%var1353X (_ BitVec 32)) (input.ind-%var1354X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1353X)))
 (=> $x259 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1353X input.ind-%var1354X) false))))
 ))
 (let (($x128 (forall ((input.ind-%var1352X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1352X)))
 (= $x121 false)))
 ))
 (let (($x212 (and (and $x128 $x129) $x251)))
 (let (($x200 (= $x212 true)))
 (let (($x112 (forall ((input.ind-%var1343X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1343X)))
 (=> $x159 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1343X) (_ bv0 32)))))
 ))
 (let (($x73 (forall ((input.ind-%var1342X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1342X)))
 (= $x159 false)))
 ))
 (let (($x111 (and $x73 $x112)))
 (let (($x236 (= $x111 true)))
 (let ((?x133 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x133)))
 (let (($x7 (= ?x156 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x7 true)))
 (let (($x87 (= $x89 true)))
 (let (($x169 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x169 true)))
 (let (($x110 (= $x59 true)))
 (let (($x123 (= $x110 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x95)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x85 $x53)))
 (let (($x135 (and $x71 $x8)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x63 $x135)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x33)))))))
 (let (($x151 (and $x143 $x137)))
 (let (($x27 (= $x151 true)))
 (let (($x103 (= $x27 true)))
 (let (($x16 (= $x103 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x45)))
 (let (($x68 (= ?x185 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x37 (= $x68 true)))
 (let (($x65 (= $x37 true)))
 (let (($x62 (= ?x185 input.dst.llvm-%n)))
 (let (($x277 (= $x62 true)))
 (let (($x52 (= $x277 true)))
 (let ((?x46 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x46)))
 (let (($x167 (= ?x118 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x167 true)))
 (let (($x144 (= $x19 true)))
 (let (($x13 (and $x144 $x52)))
 (let (($x9 (and $x13 $x65)))
 (let (($x134 (and $x9 $x16)))
 (let (($x93 (and $x134 $x123)))
 (let (($x155 (and $x93 $x87)))
 (let (($x203 (and $x155 $x236)))
 (let (($x181 (and $x203 $x200)))
 (let (($x230 (and $x181 $x175)))
 (let (($x166 (and $x230 $x139)))
 (let (($x213 (and $x166 $x238)))
 (let (($x161 (and $x213 $x263)))
 (let (($x22 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x182 (and (not $x22) $x161)))
 (let (($x57 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x113 (and $x57 $x182)))
 (let (($x24 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x278 (and $x24 $x113)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x276 (and $x18 $x278)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x17 (and $x35 $x276)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x48 (and $x21 $x17)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x94 (and $x36 $x48)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x105 (and $x10 $x94)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x186 (and $x43 $x105)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x281 (and $x77 $x186)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x189 (and $x40 $x281)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x125 (and $x146 $x189)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x29 (and $x31 $x125)))
 (let (($x273 (=> $x29 $x170)))
 (not $x273)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x127 (not $x154)))
 (let (($x191 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x267 (=> $x191 $x127)))
 (let (($x107 (= $x267 true)))
 (let (($x171 (= $x107 true)))
 (let (($x221 (forall ((input.ind-%var1445X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1445X)))
 (=> $x89 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1445X) (_ bv0 32)))))
 ))
 (let (($x279 (forall ((input.ind-%var1444X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1444X)))
 (= $x89 false)))
 ))
 (let (($x198 (and $x279 $x221)))
 (let (($x28 (= $x198 true)))
 (let (($x201 (forall ((input.ind-%var1437X (_ BitVec 32)) (input.ind-%var1439X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1437X input.ind-%var1439X)))
 (let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1437X)))
 (=> (and $x230 $x181) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1437X input.ind-%var1439X) (_ bv0 32))))))
 ))
 (let (($x206 (forall ((input.ind-%var1437X (_ BitVec 32)) (input.ind-%var1438X (_ BitVec 32)) )(let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1437X)))
 (=> $x230 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1437X input.ind-%var1438X) false))))
 ))
 (let (($x97 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1436X)))
 (= $x209 false)))
 ))
 (let (($x184 (and (and $x97 $x206) $x201)))
 (let (($x287 (= $x184 true)))
 (let (($x290 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1427X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1427X)))
 (let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> (and $x230 $x181) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1425X input.ind-%var1427X) (_ bv0 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1426X (_ BitVec 32)) )(let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> $x230 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1426X) false))))
 ))
 (let (($x30 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1424X)))
 (= $x209 false)))
 ))
 (let (($x241 (and (and $x30 $x141) $x290)))
 (let (($x218 (= $x241 true)))
 (let (($x186 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1415X)))
 (=> $x89 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1415X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1414X)))
 (= $x89 false)))
 ))
 (let (($x281 (and $x278 $x186)))
 (let (($x189 (= $x281 true)))
 (let (($x213 (forall ((input.ind-%var1407X (_ BitVec 32)) (input.ind-%var1409X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1407X input.ind-%var1409X)))
 (let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1407X)))
 (=> (and $x230 $x181) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1407X input.ind-%var1409X) (_ bv0 32))))))
 ))
 (let (($x104 (forall ((input.ind-%var1407X (_ BitVec 32)) (input.ind-%var1408X (_ BitVec 32)) )(let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1407X)))
 (=> $x230 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1407X input.ind-%var1408X) false))))
 ))
 (let (($x153 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1406X)))
 (= $x209 false)))
 ))
 (let (($x115 (and (and $x153 $x104) $x213)))
 (let (($x130 (= $x115 true)))
 (let (($x121 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1397X)))
 (=> $x89 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1397X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1396X)))
 (= $x89 false)))
 ))
 (let (($x99 (and $x159 $x121)))
 (let (($x128 (= $x99 true)))
 (let ((?x134 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x134)))
 (let (($x59 (= ?x83 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x59 true)))
 (let (($x123 (= $x110 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x117)))
 (let (($x137 (= ?x126 input.dst.llvm-%n)))
 (let (($x151 (= $x137 true)))
 (let (($x27 (= $x151 true)))
 (let (($x53 (= ?x126 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x71 (= $x53 true)))
 (let (($x95 (= $x71 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x33)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x120 $x69)))
 (let (($x138 (and $x51 $x101)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x144 $x138)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x13)))))))
 (let (($x136 (and $x75 $x91)))
 (let (($x143 (= $x136 true)))
 (let (($x106 (= $x143 true)))
 (let (($x63 (= $x106 true)))
 (let ((?x22 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x22)))
 (let (($x92 (= ?x149 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x92 true)))
 (let (($x118 (= $x46 true)))
 (let (($x85 (and $x118 $x63)))
 (let (($x8 (and $x85 $x95)))
 (let (($x103 (and $x8 $x27)))
 (let (($x93 (and $x103 $x123)))
 (let (($x202 (and $x93 $x128)))
 (let (($x263 (and $x202 $x130)))
 (let (($x125 (and $x263 $x189)))
 (let (($x248 (and $x125 $x218)))
 (let (($x286 (and $x248 $x287)))
 (let (($x245 (and $x286 $x28)))
 (let (($x24 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x67 (and $x24 $x245)))
 (let (($x18 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x49 (and $x18 $x67)))
 (let (($x142 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x222 (and $x142 $x49)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x239 (and $x11 $x222)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x199 (and $x38 $x239)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x78 (and $x26 $x199)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x240 (and $x25 $x78)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x224 (and $x39 $x240)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x219 (and $x58 $x224)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x88 (and $x72 $x219)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x229 (and $x34 $x88)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x260 (and $x31 $x229)))
 (let (($x190 (=> $x260 $x171)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x127 (not $x154)))
 (let (($x191 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x267 (=> $x191 $x127)))
 (let (($x107 (= $x267 true)))
 (let (($x171 (= $x107 true)))
 (let (($x221 (forall ((input.ind-%var1445X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1445X)))
 (=> $x89 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1445X) (_ bv0 32)))))
 ))
 (let (($x279 (forall ((input.ind-%var1444X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1444X)))
 (= $x89 false)))
 ))
 (let (($x198 (and $x279 $x221)))
 (let (($x28 (= $x198 true)))
 (let (($x201 (forall ((input.ind-%var1437X (_ BitVec 32)) (input.ind-%var1439X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1437X input.ind-%var1439X)))
 (let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1437X)))
 (=> (and $x230 $x181) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1437X input.ind-%var1439X) (_ bv0 32))))))
 ))
 (let (($x206 (forall ((input.ind-%var1437X (_ BitVec 32)) (input.ind-%var1438X (_ BitVec 32)) )(let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1437X)))
 (=> $x230 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1437X input.ind-%var1438X) false))))
 ))
 (let (($x97 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1436X)))
 (= $x209 false)))
 ))
 (let (($x184 (and (and $x97 $x206) $x201)))
 (let (($x287 (= $x184 true)))
 (let (($x290 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1427X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1427X)))
 (let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> (and $x230 $x181) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1425X input.ind-%var1427X) (_ bv0 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var1425X (_ BitVec 32)) (input.ind-%var1426X (_ BitVec 32)) )(let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1425X)))
 (=> $x230 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1425X input.ind-%var1426X) false))))
 ))
 (let (($x30 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1424X)))
 (= $x209 false)))
 ))
 (let (($x241 (and (and $x30 $x141) $x290)))
 (let (($x218 (= $x241 true)))
 (let (($x186 (forall ((input.ind-%var1415X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1415X)))
 (=> $x89 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1415X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1414X)))
 (= $x89 false)))
 ))
 (let (($x281 (and $x278 $x186)))
 (let (($x189 (= $x281 true)))
 (let (($x213 (forall ((input.ind-%var1407X (_ BitVec 32)) (input.ind-%var1409X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1407X input.ind-%var1409X)))
 (let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1407X)))
 (=> (and $x230 $x181) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1407X input.ind-%var1409X) (_ bv0 32))))))
 ))
 (let (($x104 (forall ((input.ind-%var1407X (_ BitVec 32)) (input.ind-%var1408X (_ BitVec 32)) )(let (($x230 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1407X)))
 (=> $x230 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1407X input.ind-%var1408X) false))))
 ))
 (let (($x153 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1406X)))
 (= $x209 false)))
 ))
 (let (($x115 (and (and $x153 $x104) $x213)))
 (let (($x130 (= $x115 true)))
 (let (($x121 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1397X)))
 (=> $x89 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1397X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1396X)))
 (= $x89 false)))
 ))
 (let (($x99 (and $x159 $x121)))
 (let (($x128 (= $x99 true)))
 (let ((?x134 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x134)))
 (let (($x59 (= ?x83 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x59 true)))
 (let (($x123 (= $x110 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x117)))
 (let (($x137 (= ?x126 input.dst.llvm-%n)))
 (let (($x151 (= $x137 true)))
 (let (($x27 (= $x151 true)))
 (let (($x53 (= ?x126 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x71 (= $x53 true)))
 (let (($x95 (= $x71 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x33)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x120 $x69)))
 (let (($x138 (and $x51 $x101)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x144 $x138)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x13)))))))
 (let (($x136 (and $x75 $x91)))
 (let (($x143 (= $x136 true)))
 (let (($x106 (= $x143 true)))
 (let (($x63 (= $x106 true)))
 (let ((?x22 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x22)))
 (let (($x92 (= ?x149 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x92 true)))
 (let (($x118 (= $x46 true)))
 (let (($x85 (and $x118 $x63)))
 (let (($x8 (and $x85 $x95)))
 (let (($x103 (and $x8 $x27)))
 (let (($x93 (and $x103 $x123)))
 (let (($x202 (and $x93 $x128)))
 (let (($x263 (and $x202 $x130)))
 (let (($x125 (and $x263 $x189)))
 (let (($x248 (and $x125 $x218)))
 (let (($x286 (and $x248 $x287)))
 (let (($x245 (and $x286 $x28)))
 (let (($x24 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x67 (and $x24 $x245)))
 (let (($x18 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x49 (and $x18 $x67)))
 (let (($x142 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x222 (and $x142 $x49)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x239 (and $x11 $x222)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x199 (and $x38 $x239)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x78 (and $x26 $x199)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x240 (and $x25 $x78)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x224 (and $x39 $x240)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x219 (and $x58 $x224)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x88 (and $x72 $x219)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x229 (and $x34 $x88)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x260 (and $x31 $x229)))
 (let (($x190 (=> $x260 $x171)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 166 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x220 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x292 (bvmul ?x220 (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x292)))
 (let (($x262 (= ?x158 ?x148)))
 (let (($x223 (= $x262 true)))
 (let (($x64 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1499X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1499X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1498X)))
 (= $x202 false)))
 ))
 (let (($x109 (and $x66 $x64)))
 (let (($x291 (= $x109 true)))
 (let (($x124 (forall ((input.ind-%var1491X (_ BitVec 32)) (input.ind-%var1493X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1491X input.ind-%var1493X)))
 (let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1491X)))
 (=> (and $x287 $x97) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1491X input.ind-%var1493X) (_ bv0 32))))))
 ))
 (let (($x164 (forall ((input.ind-%var1491X (_ BitVec 32)) (input.ind-%var1492X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1491X)))
 (=> $x287 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1491X input.ind-%var1492X) false))))
 ))
 (let (($x155 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1490X)))
 (= $x186 false)))
 ))
 (let (($x246 (and (and $x155 $x164) $x124)))
 (let (($x113 (= $x246 true)))
 (let (($x259 (forall ((input.ind-%var1479X (_ BitVec 32)) (input.ind-%var1481X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1479X input.ind-%var1481X)))
 (let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1479X)))
 (=> (and $x287 $x97) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1479X input.ind-%var1481X) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((input.ind-%var1479X (_ BitVec 32)) (input.ind-%var1480X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1479X)))
 (=> $x287 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1479X input.ind-%var1480X) false))))
 ))
 (let (($x266 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1478X)))
 (= $x186 false)))
 ))
 (let (($x212 (and (and $x266 $x139) $x259)))
 (let (($x261 (= $x212 true)))
 (let (($x87 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1469X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1469X) (_ bv0 32)))))
 ))
 (let (($x267 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1468X)))
 (= $x202 false)))
 ))
 (let (($x86 (and $x267 $x87)))
 (let (($x258 (= $x86 true)))
 (let (($x224 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1463X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1463X)))
 (let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> (and $x287 $x97) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1461X input.ind-%var1463X) (_ bv0 32))))))
 ))
 (let (($x279 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1462X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> $x287 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1462X) false))))
 ))
 (let (($x30 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1460X)))
 (= $x186 false)))
 ))
 (let (($x88 (and (and $x30 $x279) $x224)))
 (let (($x229 (= $x88 true)))
 (let (($x238 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1451X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1451X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var1450X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1450X)))
 (= $x202 false)))
 ))
 (let (($x213 (and $x200 $x238)))
 (let (($x115 (= $x213 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x7)))
 (let (($x159 (= ?x89 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x285 (= $x159 true)))
 (let (($x236 (= $x285 true)))
 (let ((?x134 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x134)))
 (let (($x169 (= ?x83 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x169 true)))
 (let (($x110 (= $x59 true)))
 (let (($x137 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x151 (= $x137 true)))
 (let (($x27 (= $x151 true)))
 (let (($x103 (= $x27 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x106)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x101 $x136)))
 (let (($x85 (and $x143 $x63)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x13 $x85)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x144)))))))
 (let (($x126 (and $x33 $x117)))
 (let (($x53 (= $x126 true)))
 (let (($x71 (= $x53 true)))
 (let (($x95 (= $x71 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x22)))
 (let (($x45 (= ?x149 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x185 (= $x45 true)))
 (let (($x14 (= $x185 true)))
 (let (($x92 (= ?x149 input.dst.llvm-%n)))
 (let (($x46 (= $x92 true)))
 (let (($x118 (= $x46 true)))
 (let (($x61 (and $x118 $x14)))
 (let (($x8 (and $x61 $x95)))
 (let (($x16 (and $x8 $x103)))
 (let (($x123 (and $x16 $x110)))
 (let (($x203 (and $x123 $x236)))
 (let (($x130 (and $x203 $x115)))
 (let (($x260 (and $x130 $x229)))
 (let (($x216 (and $x260 $x258)))
 (let (($x192 (and $x216 $x261)))
 (let (($x79 (and $x192 $x113)))
 (let (($x180 (and $x79 $x291)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x244 (and (not $x57) $x180)))
 (let (($x18 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x196 (and $x18 $x244)))
 (let (($x142 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x119 (and $x142 $x196)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x90 (and $x23 $x119)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x165 (and $x21 $x90)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x226 (and $x36 $x165)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x194 (and $x10 $x226)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x177 (and $x43 $x194)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x288 (and $x77 $x177)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x275 (and $x40 $x288)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x82 (and $x146 $x275)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x197 (and $x76 $x82)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x251 (and $x31 $x197)))
 (let (($x150 (=> $x251 $x223)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x220 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x292 (bvmul ?x220 (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x292)))
 (let (($x262 (= ?x158 ?x148)))
 (let (($x223 (= $x262 true)))
 (let (($x64 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1499X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1499X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1498X)))
 (= $x202 false)))
 ))
 (let (($x109 (and $x66 $x64)))
 (let (($x291 (= $x109 true)))
 (let (($x124 (forall ((input.ind-%var1491X (_ BitVec 32)) (input.ind-%var1493X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1491X input.ind-%var1493X)))
 (let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1491X)))
 (=> (and $x287 $x97) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1491X input.ind-%var1493X) (_ bv0 32))))))
 ))
 (let (($x164 (forall ((input.ind-%var1491X (_ BitVec 32)) (input.ind-%var1492X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1491X)))
 (=> $x287 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1491X input.ind-%var1492X) false))))
 ))
 (let (($x155 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1490X)))
 (= $x186 false)))
 ))
 (let (($x246 (and (and $x155 $x164) $x124)))
 (let (($x113 (= $x246 true)))
 (let (($x259 (forall ((input.ind-%var1479X (_ BitVec 32)) (input.ind-%var1481X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1479X input.ind-%var1481X)))
 (let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1479X)))
 (=> (and $x287 $x97) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1479X input.ind-%var1481X) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((input.ind-%var1479X (_ BitVec 32)) (input.ind-%var1480X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1479X)))
 (=> $x287 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1479X input.ind-%var1480X) false))))
 ))
 (let (($x266 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1478X)))
 (= $x186 false)))
 ))
 (let (($x212 (and (and $x266 $x139) $x259)))
 (let (($x261 (= $x212 true)))
 (let (($x87 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1469X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1469X) (_ bv0 32)))))
 ))
 (let (($x267 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1468X)))
 (= $x202 false)))
 ))
 (let (($x86 (and $x267 $x87)))
 (let (($x258 (= $x86 true)))
 (let (($x224 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1463X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1463X)))
 (let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> (and $x287 $x97) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1461X input.ind-%var1463X) (_ bv0 32))))))
 ))
 (let (($x279 (forall ((input.ind-%var1461X (_ BitVec 32)) (input.ind-%var1462X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1461X)))
 (=> $x287 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1461X input.ind-%var1462X) false))))
 ))
 (let (($x30 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1460X)))
 (= $x186 false)))
 ))
 (let (($x88 (and (and $x30 $x279) $x224)))
 (let (($x229 (= $x88 true)))
 (let (($x238 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1451X)))
 (=> $x202 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1451X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var1450X (_ BitVec 32)) )(let (($x202 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1450X)))
 (= $x202 false)))
 ))
 (let (($x213 (and $x200 $x238)))
 (let (($x115 (= $x213 true)))
 (let ((?x7 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x7)))
 (let (($x159 (= ?x89 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x285 (= $x159 true)))
 (let (($x236 (= $x285 true)))
 (let ((?x134 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x134)))
 (let (($x169 (= ?x83 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x169 true)))
 (let (($x110 (= $x59 true)))
 (let (($x137 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x151 (= $x137 true)))
 (let (($x27 (= $x151 true)))
 (let (($x103 (= $x27 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x106)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x101 $x136)))
 (let (($x85 (and $x143 $x63)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x13 $x85)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x144)))))))
 (let (($x126 (and $x33 $x117)))
 (let (($x53 (= $x126 true)))
 (let (($x71 (= $x53 true)))
 (let (($x95 (= $x71 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x22)))
 (let (($x45 (= ?x149 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x185 (= $x45 true)))
 (let (($x14 (= $x185 true)))
 (let (($x92 (= ?x149 input.dst.llvm-%n)))
 (let (($x46 (= $x92 true)))
 (let (($x118 (= $x46 true)))
 (let (($x61 (and $x118 $x14)))
 (let (($x8 (and $x61 $x95)))
 (let (($x16 (and $x8 $x103)))
 (let (($x123 (and $x16 $x110)))
 (let (($x203 (and $x123 $x236)))
 (let (($x130 (and $x203 $x115)))
 (let (($x260 (and $x130 $x229)))
 (let (($x216 (and $x260 $x258)))
 (let (($x192 (and $x216 $x261)))
 (let (($x79 (and $x192 $x113)))
 (let (($x180 (and $x79 $x291)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x244 (and (not $x57) $x180)))
 (let (($x18 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x196 (and $x18 $x244)))
 (let (($x142 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x119 (and $x142 $x196)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x90 (and $x23 $x119)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x165 (and $x21 $x90)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x226 (and $x36 $x165)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x194 (and $x10 $x226)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x177 (and $x43 $x194)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x288 (and $x77 $x177)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x275 (and $x40 $x288)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x82 (and $x146 $x275)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x197 (and $x76 $x82)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x251 (and $x31 $x197)))
 (let (($x150 (=> $x251 $x223)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x282 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x55 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x129 (bvmul ?x55 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x129)))
 (let (($x105 (= ?x42 ?x282)))
 (let (($x170 (= $x105 true)))
 (let (($x239 (forall ((input.ind-%var1553X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1553X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1553X) (_ bv0 32)))))
 ))
 (let (($x222 (forall ((input.ind-%var1552X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1552X)))
 (= $x200 false)))
 ))
 (let (($x204 (and $x222 $x239)))
 (let (($x174 (= $x204 true)))
 (let (($x280 (forall ((input.ind-%var1545X (_ BitVec 32)) (input.ind-%var1547X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1545X input.ind-%var1547X)))
 (let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1545X)))
 (=> (and $x261 $x266) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1545X input.ind-%var1547X) (_ bv0 32))))))
 ))
 (let (($x207 (forall ((input.ind-%var1545X (_ BitVec 32)) (input.ind-%var1546X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1545X)))
 (=> $x261 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1545X input.ind-%var1546X) false))))
 ))
 (let (($x263 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1544X)))
 (= $x199 false)))
 ))
 (let (($x112 (and (and $x263 $x207) $x280)))
 (let (($x188 (= $x112 true)))
 (let (($x99 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1535X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1535X)))
 (let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> (and $x261 $x266) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1533X input.ind-%var1535X) (_ bv0 32))))))
 ))
 (let (($x230 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1534X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> $x261 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1534X) false))))
 ))
 (let (($x52 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1532X)))
 (= $x199 false)))
 ))
 (let (($x283 (and (and $x52 $x230) $x99)))
 (let (($x131 (= $x283 true)))
 (let (($x292 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1523X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1523X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1522X)))
 (= $x200 false)))
 ))
 (let (($x158 (and $x288 $x292)))
 (let (($x148 (= $x158 true)))
 (let (($x244 (forall ((input.ind-%var1515X (_ BitVec 32)) (input.ind-%var1517X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1515X input.ind-%var1517X)))
 (let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1515X)))
 (=> (and $x261 $x266) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1515X input.ind-%var1517X) (_ bv0 32))))))
 ))
 (let (($x155 (forall ((input.ind-%var1515X (_ BitVec 32)) (input.ind-%var1516X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1515X)))
 (=> $x261 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1515X input.ind-%var1516X) false))))
 ))
 (let (($x229 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1514X)))
 (= $x199 false)))
 ))
 (let (($x119 (and (and $x229 $x155) $x244)))
 (let (($x90 (= $x119 true)))
 (let (($x184 (forall ((input.ind-%var1505X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1505X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1505X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1504X)))
 (= $x200 false)))
 ))
 (let (($x286 (and $x238 $x184)))
 (let (($x279 (= $x286 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x89)))
 (let (($x159 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x285 (= $x159 true)))
 (let (($x236 (= $x285 true)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x110 (= $x59 true)))
 (let (($x123 (= $x110 true)))
 (let (($x93 (= $x123 true)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x8)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x117 $x71)))
 (let (($x137 (and $x95 $x135)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x80 $x137)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x101 $x138)))))))
 (let (($x27 (and $x85 $x151)))
 (let (($x103 (= $x27 true)))
 (let (($x16 (= $x103 true)))
 (let (($x134 (= $x16 true)))
 (let ((?x118 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x118)))
 (let (($x51 (= ?x45 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x65 (= $x51 true)))
 (let (($x75 (= $x65 true)))
 (let (($x14 (= ?x45 input.dst.llvm-%n)))
 (let (($x61 (= $x14 true)))
 (let (($x68 (= $x61 true)))
 (let ((?x41 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x41)))
 (let (($x12 (= ?x22 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x12 true)))
 (let (($x46 (= $x92 true)))
 (let (($x37 (and $x46 $x68)))
 (let (($x19 (and $x37 $x75)))
 (let (($x83 (and $x19 $x134)))
 (let (($x7 (and $x83 $x93)))
 (let (($x203 (and $x7 $x236)))
 (let (($x219 (and $x203 $x279)))
 (let (($x165 (and $x219 $x90)))
 (let (($x262 (and $x165 $x148)))
 (let (($x29 (and $x262 $x131)))
 (let (($x189 (and $x29 $x188)))
 (let (($x171 (and $x189 $x174)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x133 (and (not $x24) $x171)))
 (let (($x142 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x161 (and $x142 $x133)))
 (let (($x23 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x48 (and $x23 $x161)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x156 (and $x35 $x48)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x178 (and $x38 $x156)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x145 (and $x26 $x178)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x162 (and $x25 $x145)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x182 (and $x39 $x162)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x114 (and $x58 $x182)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x111 (and $x72 $x114)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x273 (and $x34 $x111)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x100 (and $x50 $x273)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x94 (and $x31 $x100)))
 (let (($x60 (=> $x94 $x170)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x282 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x55 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x129 (bvmul ?x55 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x129)))
 (let (($x105 (= ?x42 ?x282)))
 (let (($x170 (= $x105 true)))
 (let (($x239 (forall ((input.ind-%var1553X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1553X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1553X) (_ bv0 32)))))
 ))
 (let (($x222 (forall ((input.ind-%var1552X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1552X)))
 (= $x200 false)))
 ))
 (let (($x204 (and $x222 $x239)))
 (let (($x174 (= $x204 true)))
 (let (($x280 (forall ((input.ind-%var1545X (_ BitVec 32)) (input.ind-%var1547X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1545X input.ind-%var1547X)))
 (let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1545X)))
 (=> (and $x261 $x266) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1545X input.ind-%var1547X) (_ bv0 32))))))
 ))
 (let (($x207 (forall ((input.ind-%var1545X (_ BitVec 32)) (input.ind-%var1546X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1545X)))
 (=> $x261 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1545X input.ind-%var1546X) false))))
 ))
 (let (($x263 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1544X)))
 (= $x199 false)))
 ))
 (let (($x112 (and (and $x263 $x207) $x280)))
 (let (($x188 (= $x112 true)))
 (let (($x99 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1535X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1535X)))
 (let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> (and $x261 $x266) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1533X input.ind-%var1535X) (_ bv0 32))))))
 ))
 (let (($x230 (forall ((input.ind-%var1533X (_ BitVec 32)) (input.ind-%var1534X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1533X)))
 (=> $x261 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1533X input.ind-%var1534X) false))))
 ))
 (let (($x52 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1532X)))
 (= $x199 false)))
 ))
 (let (($x283 (and (and $x52 $x230) $x99)))
 (let (($x131 (= $x283 true)))
 (let (($x292 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1523X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1523X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1522X)))
 (= $x200 false)))
 ))
 (let (($x158 (and $x288 $x292)))
 (let (($x148 (= $x158 true)))
 (let (($x244 (forall ((input.ind-%var1515X (_ BitVec 32)) (input.ind-%var1517X (_ BitVec 32)) )(let (($x266 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1515X input.ind-%var1517X)))
 (let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1515X)))
 (=> (and $x261 $x266) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1515X input.ind-%var1517X) (_ bv0 32))))))
 ))
 (let (($x155 (forall ((input.ind-%var1515X (_ BitVec 32)) (input.ind-%var1516X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1515X)))
 (=> $x261 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1515X input.ind-%var1516X) false))))
 ))
 (let (($x229 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1514X)))
 (= $x199 false)))
 ))
 (let (($x119 (and (and $x229 $x155) $x244)))
 (let (($x90 (= $x119 true)))
 (let (($x184 (forall ((input.ind-%var1505X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1505X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1505X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1504X)))
 (= $x200 false)))
 ))
 (let (($x286 (and $x238 $x184)))
 (let (($x279 (= $x286 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x89)))
 (let (($x159 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x285 (= $x159 true)))
 (let (($x236 (= $x285 true)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x110 (= $x59 true)))
 (let (($x123 (= $x110 true)))
 (let (($x93 (= $x123 true)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x8)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x117 $x71)))
 (let (($x137 (and $x95 $x135)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x80 $x137)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x101 $x138)))))))
 (let (($x27 (and $x85 $x151)))
 (let (($x103 (= $x27 true)))
 (let (($x16 (= $x103 true)))
 (let (($x134 (= $x16 true)))
 (let ((?x118 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x118)))
 (let (($x51 (= ?x45 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x65 (= $x51 true)))
 (let (($x75 (= $x65 true)))
 (let (($x14 (= ?x45 input.dst.llvm-%n)))
 (let (($x61 (= $x14 true)))
 (let (($x68 (= $x61 true)))
 (let ((?x41 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x41)))
 (let (($x12 (= ?x22 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x12 true)))
 (let (($x46 (= $x92 true)))
 (let (($x37 (and $x46 $x68)))
 (let (($x19 (and $x37 $x75)))
 (let (($x83 (and $x19 $x134)))
 (let (($x7 (and $x83 $x93)))
 (let (($x203 (and $x7 $x236)))
 (let (($x219 (and $x203 $x279)))
 (let (($x165 (and $x219 $x90)))
 (let (($x262 (and $x165 $x148)))
 (let (($x29 (and $x262 $x131)))
 (let (($x189 (and $x29 $x188)))
 (let (($x171 (and $x189 $x174)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x133 (and (not $x24) $x171)))
 (let (($x142 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x161 (and $x142 $x133)))
 (let (($x23 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x48 (and $x23 $x161)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x156 (and $x35 $x48)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x178 (and $x38 $x156)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x145 (and $x26 $x178)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x162 (and $x25 $x145)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x182 (and $x39 $x162)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x114 (and $x58 $x182)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x111 (and $x72 $x114)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x273 (and $x34 $x111)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x100 (and $x50 $x273)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x94 (and $x31 $x100)))
 (let (($x60 (=> $x94 $x170)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (not $x141)))
 (let (($x121 (= $x173 false)))
 (let (($x32 (= $x121 true)))
 (let (($x66 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1607X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1607X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1606X)))
 (= $x285 false)))
 ))
 (let (($x87 (and $x205 $x66)))
 (let (($x259 (= $x87 true)))
 (let (($x166 (forall ((input.ind-%var1599X (_ BitVec 32)) (input.ind-%var1601X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1599X input.ind-%var1601X)))
 (let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1599X)))
 (=> (and $x262 $x165) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1599X input.ind-%var1601X) (_ bv0 32))))))
 ))
 (let (($x67 (forall ((input.ind-%var1599X (_ BitVec 32)) (input.ind-%var1600X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1599X)))
 (=> $x262 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1599X input.ind-%var1600X) false))))
 ))
 (let (($x209 (forall ((input.ind-%var1598X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1598X)))
 (= $x212 false)))
 ))
 (let (($x150 (and (and $x209 $x67) $x166)))
 (let (($x206 (= $x150 true)))
 (let (($x130 (forall ((input.ind-%var1587X (_ BitVec 32)) (input.ind-%var1589X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1587X input.ind-%var1589X)))
 (let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1587X)))
 (=> (and $x262 $x165) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1587X input.ind-%var1589X) (_ bv0 32))))))
 ))
 (let (($x84 (forall ((input.ind-%var1587X (_ BitVec 32)) (input.ind-%var1588X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1587X)))
 (=> $x262 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1587X input.ind-%var1588X) false))))
 ))
 (let (($x42 (forall ((input.ind-%var1586X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1586X)))
 (= $x212 false)))
 ))
 (let (($x267 (and (and $x42 $x84) $x130)))
 (let (($x197 (= $x267 true)))
 (let (($x114 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1577X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1577X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1576X)))
 (= $x285 false)))
 ))
 (let (($x111 (and $x48 $x114)))
 (let (($x273 (= $x111 true)))
 (let (($x189 (forall ((input.ind-%var1569X (_ BitVec 32)) (input.ind-%var1571X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1569X input.ind-%var1571X)))
 (let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1569X)))
 (=> (and $x262 $x165) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1569X input.ind-%var1571X) (_ bv0 32))))))
 ))
 (let (($x230 (forall ((input.ind-%var1569X (_ BitVec 32)) (input.ind-%var1570X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1569X)))
 (=> $x262 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1569X input.ind-%var1570X) false))))
 ))
 (let (($x291 (forall ((input.ind-%var1568X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1568X)))
 (= $x212 false)))
 ))
 (let (($x239 (and (and $x291 $x230) $x189)))
 (let (($x204 (= $x239 true)))
 (let (($x199 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1559X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1559X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1558X)))
 (= $x285 false)))
 ))
 (let (($x88 (and $x200 $x199)))
 (let (($x229 (= $x88 true)))
 (let ((?x83 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x83)))
 (let (($x110 (= ?x169 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x110 true)))
 (let (($x93 (= $x123 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x149)))
 (let (($x151 (= ?x12 input.dst.llvm-%n)))
 (let (($x27 (= $x151 true)))
 (let (($x103 (= $x27 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x120)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x91 $x106)))
 (let (($x117 (and $x85 $x80)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x68 $x117)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x69)))))))
 (let (($x53 (and $x138 $x126)))
 (let (($x71 (= $x53 true)))
 (let (($x95 (= $x71 true)))
 (let (($x8 (= $x95 true)))
 (let (($x92 (= ?x12 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x46 (= $x92 true)))
 (let (($x118 (= $x46 true)))
 (let ((?x24 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x24)))
 (let (($x152 (= ?x167 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x152 true)))
 (let (($x22 (= $x41 true)))
 (let (($x45 (and $x22 $x118)))
 (let (($x135 (and $x45 $x8)))
 (let (($x16 (and $x135 $x103)))
 (let (($x7 (and $x16 $x93)))
 (let (($x216 (and $x7 $x229)))
 (let (($x174 (and $x216 $x204)))
 (let (($x100 (and $x174 $x273)))
 (let (($x164 (and $x100 $x197)))
 (let (($x30 (and $x164 $x206)))
 (let (($x177 (and $x30 $x259)))
 (let (($x23 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x74 (and $x23 $x177)))
 (let (($x35 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x124 (and $x35 $x74)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x64 (and $x11 $x124)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x251 (and $x36 $x64)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x187 (and $x10 $x251)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x82 (and $x43 $x187)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x220 (and $x77 $x82)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x49 (and $x40 $x220)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x221 (and $x146 $x49)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x281 (and $x76 $x221)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x107 (and $x6 $x281)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x154 (and $x31 $x107)))
 (let (($x122 (=> $x154 $x32)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (not $x141)))
 (let (($x121 (= $x173 false)))
 (let (($x32 (= $x121 true)))
 (let (($x66 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1607X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1607X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1606X)))
 (= $x285 false)))
 ))
 (let (($x87 (and $x205 $x66)))
 (let (($x259 (= $x87 true)))
 (let (($x166 (forall ((input.ind-%var1599X (_ BitVec 32)) (input.ind-%var1601X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1599X input.ind-%var1601X)))
 (let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1599X)))
 (=> (and $x262 $x165) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1599X input.ind-%var1601X) (_ bv0 32))))))
 ))
 (let (($x67 (forall ((input.ind-%var1599X (_ BitVec 32)) (input.ind-%var1600X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1599X)))
 (=> $x262 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1599X input.ind-%var1600X) false))))
 ))
 (let (($x209 (forall ((input.ind-%var1598X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1598X)))
 (= $x212 false)))
 ))
 (let (($x150 (and (and $x209 $x67) $x166)))
 (let (($x206 (= $x150 true)))
 (let (($x130 (forall ((input.ind-%var1587X (_ BitVec 32)) (input.ind-%var1589X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1587X input.ind-%var1589X)))
 (let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1587X)))
 (=> (and $x262 $x165) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1587X input.ind-%var1589X) (_ bv0 32))))))
 ))
 (let (($x84 (forall ((input.ind-%var1587X (_ BitVec 32)) (input.ind-%var1588X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1587X)))
 (=> $x262 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1587X input.ind-%var1588X) false))))
 ))
 (let (($x42 (forall ((input.ind-%var1586X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1586X)))
 (= $x212 false)))
 ))
 (let (($x267 (and (and $x42 $x84) $x130)))
 (let (($x197 (= $x267 true)))
 (let (($x114 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1577X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1577X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1576X)))
 (= $x285 false)))
 ))
 (let (($x111 (and $x48 $x114)))
 (let (($x273 (= $x111 true)))
 (let (($x189 (forall ((input.ind-%var1569X (_ BitVec 32)) (input.ind-%var1571X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1569X input.ind-%var1571X)))
 (let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1569X)))
 (=> (and $x262 $x165) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var1569X input.ind-%var1571X) (_ bv0 32))))))
 ))
 (let (($x230 (forall ((input.ind-%var1569X (_ BitVec 32)) (input.ind-%var1570X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1569X)))
 (=> $x262 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var1569X input.ind-%var1570X) false))))
 ))
 (let (($x291 (forall ((input.ind-%var1568X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var1568X)))
 (= $x212 false)))
 ))
 (let (($x239 (and (and $x291 $x230) $x189)))
 (let (($x204 (= $x239 true)))
 (let (($x199 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1559X)))
 (=> $x285 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var1559X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var1558X)))
 (= $x285 false)))
 ))
 (let (($x88 (and $x200 $x199)))
 (let (($x229 (= $x88 true)))
 (let ((?x83 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x83)))
 (let (($x110 (= ?x169 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x110 true)))
 (let (($x93 (= $x123 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x149)))
 (let (($x151 (= ?x12 input.dst.llvm-%n)))
 (let (($x27 (= $x151 true)))
 (let (($x103 (= $x27 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x120)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x91 $x106)))
 (let (($x117 (and $x85 $x80)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x68 $x117)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x69)))))))
 (let (($x53 (and $x138 $x126)))
 (let (($x71 (= $x53 true)))
 (let (($x95 (= $x71 true)))
 (let (($x8 (= $x95 true)))
 (let (($x92 (= ?x12 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x46 (= $x92 true)))
 (let (($x118 (= $x46 true)))
 (let ((?x24 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x24)))
 (let (($x152 (= ?x167 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x152 true)))
 (let (($x22 (= $x41 true)))
 (let (($x45 (and $x22 $x118)))
 (let (($x135 (and $x45 $x8)))
 (let (($x16 (and $x135 $x103)))
 (let (($x7 (and $x16 $x93)))
 (let (($x216 (and $x7 $x229)))
 (let (($x174 (and $x216 $x204)))
 (let (($x100 (and $x174 $x273)))
 (let (($x164 (and $x100 $x197)))
 (let (($x30 (and $x164 $x206)))
 (let (($x177 (and $x30 $x259)))
 (let (($x23 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x74 (and $x23 $x177)))
 (let (($x35 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x124 (and $x35 $x74)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x64 (and $x11 $x124)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x251 (and $x36 $x64)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x187 (and $x10 $x251)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x82 (and $x43 $x187)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x220 (and $x77 $x82)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x49 (and $x40 $x220)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x221 (and $x146 $x49)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x281 (and $x76 $x221)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x107 (and $x6 $x281)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x154 (and $x31 $x107)))
 (let (($x122 (=> $x154 $x32)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00064000)
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00064003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03ffa003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x224 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x127 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (not $x127)))
 (let (($x210 (=> $x248 $x224)))
 (let (($x290 (= $x210 true)))
 (let (($x244 (= $x290 true)))
 (let (($x182 (forall ((input.ind-%var3532X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3532X)))
 (= $x287 false)))
 ))
 (let (($x70 (forall ((input.ind-%var3533X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3533X)))
 (=> $x287 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3533X) (_ bv0 32)))))
 ))
 (let (($x241 (and $x70 $x182)))
 (let (($x275 (= $x241 true)))
 (let (($x155 (forall ((input.ind-%var3525X (_ BitVec 32)) (input.ind-%var3527X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3525X input.ind-%var3527X)))
 (let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3525X)))
 (=> (and $x197 $x114) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3525X input.ind-%var3527X) (_ bv0 32))))))
 ))
 (let (($x60 (forall ((input.ind-%var3525X (_ BitVec 32)) (input.ind-%var3526X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3525X)))
 (=> $x197 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3525X input.ind-%var3526X) false))))
 ))
 (let (($x278 (forall ((input.ind-%var3524X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3524X)))
 (= $x189 false)))
 ))
 (let (($x286 (and (and $x278 $x60) $x155)))
 (let (($x292 (= $x286 true)))
 (let (($x104 (forall ((input.ind-%var3513X (_ BitVec 32)) (input.ind-%var3515X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3513X input.ind-%var3515X)))
 (let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3513X)))
 (=> (and $x197 $x114) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3513X input.ind-%var3515X) (_ bv0 32))))))
 ))
 (let (($x145 (forall ((input.ind-%var3513X (_ BitVec 32)) (input.ind-%var3514X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3513X)))
 (=> $x197 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3513X input.ind-%var3514X) false))))
 ))
 (let (($x288 (forall ((input.ind-%var3512X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3512X)))
 (= $x189 false)))
 ))
 (let (($x171 (and (and $x288 $x145) $x104)))
 (let (($x133 (= $x171 true)))
 (let (($x32 (forall ((input.ind-%var3502X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3502X)))
 (= $x287 false)))
 ))
 (let (($x154 (forall ((input.ind-%var3503X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3503X)))
 (=> $x287 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3503X) (_ bv0 32)))))
 ))
 (let (($x122 (and $x154 $x32)))
 (let (($x193 (= $x122 true)))
 (let (($x124 (forall ((input.ind-%var3495X (_ BitVec 32)) (input.ind-%var3496X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3495X)))
 (=> $x197 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3495X input.ind-%var3496X) false))))
 ))
 (let (($x30 (forall ((input.ind-%var3494X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3494X)))
 (= $x189 false)))
 ))
 (let (($x67 (forall ((input.ind-%var3495X (_ BitVec 32)) (input.ind-%var3497X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3495X input.ind-%var3497X)))
 (let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3495X)))
 (=> (and $x197 $x114) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3495X input.ind-%var3497X) (_ bv0 32))))))
 ))
 (let (($x251 (and (and $x67 $x30) $x124)))
 (let (($x187 (= $x251 true)))
 (let (($x52 (forall ((input.ind-%var3485X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3485X)))
 (=> $x287 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3485X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var3484X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3484X)))
 (= $x287 false)))
 ))
 (let (($x230 (and $x88 $x52)))
 (let (($x222 (= $x230 true)))
 (let ((?x169 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x169)))
 (let (($x123 (= ?x59 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x123 true)))
 (let (($x7 (= $x93 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x53)))
 (let (($x27 (= ?x71 input.dst.llvm-%n)))
 (let (($x103 (= $x27 true)))
 (let (($x16 (= $x103 true)))
 (let (($x95 (= ?x71 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x8 (= $x95 true)))
 (let (($x135 (= $x8 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x91)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x13 $x61)))
 (let (($x143 (and $x68 $x136)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x92 $x143)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x65)))))))
 (let (($x85 (and $x33 $x106)))
 (let (($x120 (= $x85 true)))
 (let (($x80 (= $x120 true)))
 (let (($x117 (= $x80 true)))
 (let ((?x18 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x18)))
 (let (($x57 (= ?x24 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x57 true)))
 (let (($x41 (= $x152 true)))
 (let (($x126 (and $x41 $x117)))
 (let (($x137 (and $x126 $x135)))
 (let (($x134 (and $x137 $x16)))
 (let (($x159 (and $x134 $x7)))
 (let (($x112 (and $x159 $x222)))
 (let (($x82 (and $x112 $x187)))
 (let (($x14 (and $x82 $x193)))
 (let (($x261 (and $x14 $x133)))
 (let (($x207 (and $x261 $x292)))
 (let (($x170 (and $x207 $x275)))
 (let (($x35 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x144 (and $x35 $x170)))
 (let (($x11 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x246 (and $x11 $x144)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x240 (and $x21 $x246)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x139 (and $x26 $x240)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x213 (and $x25 $x139)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x194 (and $x39 $x213)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x252 (and $x58 $x194)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x175 (and $x72 $x252)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x78 (and $x34 $x175)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x191 (and $x6 $x78)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x190 (and $x185 $x191)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x218 (and $x20 $x190)))
 (let (($x73 (=> $x218 $x244)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x224 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x127 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (not $x127)))
 (let (($x210 (=> $x248 $x224)))
 (let (($x290 (= $x210 true)))
 (let (($x244 (= $x290 true)))
 (let (($x182 (forall ((input.ind-%var3532X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3532X)))
 (= $x287 false)))
 ))
 (let (($x70 (forall ((input.ind-%var3533X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3533X)))
 (=> $x287 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3533X) (_ bv0 32)))))
 ))
 (let (($x241 (and $x70 $x182)))
 (let (($x275 (= $x241 true)))
 (let (($x155 (forall ((input.ind-%var3525X (_ BitVec 32)) (input.ind-%var3527X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3525X input.ind-%var3527X)))
 (let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3525X)))
 (=> (and $x197 $x114) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3525X input.ind-%var3527X) (_ bv0 32))))))
 ))
 (let (($x60 (forall ((input.ind-%var3525X (_ BitVec 32)) (input.ind-%var3526X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3525X)))
 (=> $x197 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3525X input.ind-%var3526X) false))))
 ))
 (let (($x278 (forall ((input.ind-%var3524X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3524X)))
 (= $x189 false)))
 ))
 (let (($x286 (and (and $x278 $x60) $x155)))
 (let (($x292 (= $x286 true)))
 (let (($x104 (forall ((input.ind-%var3513X (_ BitVec 32)) (input.ind-%var3515X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3513X input.ind-%var3515X)))
 (let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3513X)))
 (=> (and $x197 $x114) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3513X input.ind-%var3515X) (_ bv0 32))))))
 ))
 (let (($x145 (forall ((input.ind-%var3513X (_ BitVec 32)) (input.ind-%var3514X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3513X)))
 (=> $x197 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3513X input.ind-%var3514X) false))))
 ))
 (let (($x288 (forall ((input.ind-%var3512X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3512X)))
 (= $x189 false)))
 ))
 (let (($x171 (and (and $x288 $x145) $x104)))
 (let (($x133 (= $x171 true)))
 (let (($x32 (forall ((input.ind-%var3502X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3502X)))
 (= $x287 false)))
 ))
 (let (($x154 (forall ((input.ind-%var3503X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3503X)))
 (=> $x287 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3503X) (_ bv0 32)))))
 ))
 (let (($x122 (and $x154 $x32)))
 (let (($x193 (= $x122 true)))
 (let (($x124 (forall ((input.ind-%var3495X (_ BitVec 32)) (input.ind-%var3496X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3495X)))
 (=> $x197 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3495X input.ind-%var3496X) false))))
 ))
 (let (($x30 (forall ((input.ind-%var3494X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3494X)))
 (= $x189 false)))
 ))
 (let (($x67 (forall ((input.ind-%var3495X (_ BitVec 32)) (input.ind-%var3497X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3495X input.ind-%var3497X)))
 (let (($x197 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3495X)))
 (=> (and $x197 $x114) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3495X input.ind-%var3497X) (_ bv0 32))))))
 ))
 (let (($x251 (and (and $x67 $x30) $x124)))
 (let (($x187 (= $x251 true)))
 (let (($x52 (forall ((input.ind-%var3485X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3485X)))
 (=> $x287 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3485X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var3484X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3484X)))
 (= $x287 false)))
 ))
 (let (($x230 (and $x88 $x52)))
 (let (($x222 (= $x230 true)))
 (let ((?x169 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x169)))
 (let (($x123 (= ?x59 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x123 true)))
 (let (($x7 (= $x93 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x53)))
 (let (($x27 (= ?x71 input.dst.llvm-%n)))
 (let (($x103 (= $x27 true)))
 (let (($x16 (= $x103 true)))
 (let (($x95 (= ?x71 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x8 (= $x95 true)))
 (let (($x135 (= $x8 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x91)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x13 $x61)))
 (let (($x143 (and $x68 $x136)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x92 $x143)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x65)))))))
 (let (($x85 (and $x33 $x106)))
 (let (($x120 (= $x85 true)))
 (let (($x80 (= $x120 true)))
 (let (($x117 (= $x80 true)))
 (let ((?x18 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x18)))
 (let (($x57 (= ?x24 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x57 true)))
 (let (($x41 (= $x152 true)))
 (let (($x126 (and $x41 $x117)))
 (let (($x137 (and $x126 $x135)))
 (let (($x134 (and $x137 $x16)))
 (let (($x159 (and $x134 $x7)))
 (let (($x112 (and $x159 $x222)))
 (let (($x82 (and $x112 $x187)))
 (let (($x14 (and $x82 $x193)))
 (let (($x261 (and $x14 $x133)))
 (let (($x207 (and $x261 $x292)))
 (let (($x170 (and $x207 $x275)))
 (let (($x35 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x144 (and $x35 $x170)))
 (let (($x11 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x246 (and $x11 $x144)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x240 (and $x21 $x246)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x139 (and $x26 $x240)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x213 (and $x25 $x139)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x194 (and $x39 $x213)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x252 (and $x58 $x194)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x175 (and $x72 $x252)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x78 (and $x34 $x175)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x191 (and $x6 $x78)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x190 (and $x185 $x191)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x218 (and $x20 $x190)))
 (let (($x73 (=> $x218 $x244)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 166 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x276 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x15 (ite $x276 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x163 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x198 (ite $x163 ?x15 (_ bv0 32))))
 (let (($x201 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x198)))
 (let (($x28 (= $x201 true)))
 (let (($x17 (= $x28 true)))
 (let (($x79 (forall ((input.ind-%var3723X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3723X)))
 (=> $x48 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3723X) (_ bv0 32)))))
 ))
 (let (($x49 (forall ((input.ind-%var3722X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3722X)))
 (= $x48 false)))
 ))
 (let (($x89 (and $x49 $x79)))
 (let (($x140 (= $x89 true)))
 (let (($x188 (forall ((input.ind-%var3715X (_ BitVec 32)) (input.ind-%var3717X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3715X input.ind-%var3717X)))
 (let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3715X)))
 (=> (and $x292 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3715X input.ind-%var3717X) (_ bv0 32))))))
 ))
 (let (($x203 (forall ((input.ind-%var3714X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3714X)))
 (= $x193 false)))
 ))
 (let (($x186 (forall ((input.ind-%var3715X (_ BitVec 32)) (input.ind-%var3716X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3715X)))
 (=> $x292 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3715X input.ind-%var3716X) false))))
 ))
 (let (($x121 (and (and $x186 $x203) $x188)))
 (let (($x174 (= $x121 true)))
 (let (($x166 (forall ((input.ind-%var3702X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3702X)))
 (= $x193 false)))
 ))
 (let (($x245 (forall ((input.ind-%var3703X (_ BitVec 32)) (input.ind-%var3704X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3703X)))
 (=> $x292 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3703X input.ind-%var3704X) false))))
 ))
 (let (($x153 (forall ((input.ind-%var3703X (_ BitVec 32)) (input.ind-%var3705X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3703X input.ind-%var3705X)))
 (let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3703X)))
 (=> (and $x292 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3703X input.ind-%var3705X) (_ bv0 32))))))
 ))
 (let (($x131 (and (and $x153 $x245) $x166)))
 (let (($x289 (= $x131 true)))
 (let (($x291 (forall ((input.ind-%var3692X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3692X)))
 (= $x48 false)))
 ))
 (let (($x73 (forall ((input.ind-%var3693X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3693X)))
 (=> $x48 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3693X) (_ bv0 32)))))
 ))
 (let (($x239 (and $x73 $x291)))
 (let (($x111 (= $x239 true)))
 (let (($x78 (forall ((input.ind-%var3684X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3684X)))
 (= $x193 false)))
 ))
 (let (($x139 (forall ((input.ind-%var3685X (_ BitVec 32)) (input.ind-%var3686X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3685X)))
 (=> $x292 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3685X input.ind-%var3686X) false))))
 ))
 (let (($x182 (forall ((input.ind-%var3685X (_ BitVec 32)) (input.ind-%var3687X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3685X input.ind-%var3687X)))
 (let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3685X)))
 (=> (and $x292 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3685X input.ind-%var3687X) (_ bv0 32))))))
 ))
 (let (($x190 (and (and $x182 $x139) $x78)))
 (let (($x218 (= $x190 true)))
 (let (($x124 (forall ((input.ind-%var3675X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3675X)))
 (=> $x48 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3675X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var3674X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3674X)))
 (= $x48 false)))
 ))
 (let (($x251 (and $x42 $x124)))
 (let (($x187 (= $x251 true)))
 (let ((?x287 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x199 (bvneg ?x287)))
 (let (($x196 (= ?x199 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x196 true)))
 (let (($x148 (= $x165 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x134)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x137 $x103)))
 (let (($x169 (and $x16 $x83)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x91 $x169)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x117)))))))
 (let (($x110 (and $x135 $x59)))
 (let (($x123 (= $x110 true)))
 (let (($x93 (= $x123 true)))
 (let (($x7 (= $x93 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x65)))
 (let (($x12 (= ?x19 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x92 (= $x12 true)))
 (let (($x13 (= $x92 true)))
 (let (($x54 (= ?x19 input.dst.llvm-%n)))
 (let (($x75 (= $x54 true)))
 (let (($x69 (= $x75 true)))
 (let ((?x118 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x118)))
 (let (($x45 (= ?x63 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x45 true)))
 (let (($x62 (= $x51 true)))
 (let (($x24 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x167 (not $x24)))
 (let (($x57 (= $x167 true)))
 (let (($x152 (= $x57 true)))
 (let (($x41 (= $x152 true)))
 (let (($x37 (and $x41 $x62)))
 (let (($x33 (and $x37 $x69)))
 (let (($x101 (and $x33 $x13)))
 (let (($x159 (and $x101 $x7)))
 (let (($x52 (and $x159 $x148)))
 (let (($x82 (and $x52 $x187)))
 (let (($x127 (and $x82 $x218)))
 (let (($x84 (and $x127 $x111)))
 (let (($x180 (and $x84 $x289)))
 (let (($x273 (and $x180 $x174)))
 (let (($x105 (and $x273 $x140)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x94 (and $x23 $x105)))
 (let (($x11 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x226 (and $x11 $x94)))
 (let (($x21 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x115 (and $x21 $x226)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x55 (and $x38 $x115)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x178 (and $x10 $x55)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x181 (and $x43 $x178)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x128 (and $x77 $x181)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x264 (and $x40 $x128)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x99 (and $x146 $x264)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x158 (and $x76 $x99)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x283 (and $x9 $x158)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x233 (and $x277 $x283)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x204 (and $x31 $x233)))
 (let (($x86 (=> $x204 $x17)))
 (not $x86)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x276 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x15 (ite $x276 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x163 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x198 (ite $x163 ?x15 (_ bv0 32))))
 (let (($x201 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x198)))
 (let (($x28 (= $x201 true)))
 (let (($x17 (= $x28 true)))
 (let (($x79 (forall ((input.ind-%var3723X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3723X)))
 (=> $x48 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3723X) (_ bv0 32)))))
 ))
 (let (($x49 (forall ((input.ind-%var3722X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3722X)))
 (= $x48 false)))
 ))
 (let (($x89 (and $x49 $x79)))
 (let (($x140 (= $x89 true)))
 (let (($x188 (forall ((input.ind-%var3715X (_ BitVec 32)) (input.ind-%var3717X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3715X input.ind-%var3717X)))
 (let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3715X)))
 (=> (and $x292 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3715X input.ind-%var3717X) (_ bv0 32))))))
 ))
 (let (($x203 (forall ((input.ind-%var3714X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3714X)))
 (= $x193 false)))
 ))
 (let (($x186 (forall ((input.ind-%var3715X (_ BitVec 32)) (input.ind-%var3716X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3715X)))
 (=> $x292 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3715X input.ind-%var3716X) false))))
 ))
 (let (($x121 (and (and $x186 $x203) $x188)))
 (let (($x174 (= $x121 true)))
 (let (($x166 (forall ((input.ind-%var3702X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3702X)))
 (= $x193 false)))
 ))
 (let (($x245 (forall ((input.ind-%var3703X (_ BitVec 32)) (input.ind-%var3704X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3703X)))
 (=> $x292 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3703X input.ind-%var3704X) false))))
 ))
 (let (($x153 (forall ((input.ind-%var3703X (_ BitVec 32)) (input.ind-%var3705X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3703X input.ind-%var3705X)))
 (let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3703X)))
 (=> (and $x292 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3703X input.ind-%var3705X) (_ bv0 32))))))
 ))
 (let (($x131 (and (and $x153 $x245) $x166)))
 (let (($x289 (= $x131 true)))
 (let (($x291 (forall ((input.ind-%var3692X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3692X)))
 (= $x48 false)))
 ))
 (let (($x73 (forall ((input.ind-%var3693X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3693X)))
 (=> $x48 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3693X) (_ bv0 32)))))
 ))
 (let (($x239 (and $x73 $x291)))
 (let (($x111 (= $x239 true)))
 (let (($x78 (forall ((input.ind-%var3684X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3684X)))
 (= $x193 false)))
 ))
 (let (($x139 (forall ((input.ind-%var3685X (_ BitVec 32)) (input.ind-%var3686X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3685X)))
 (=> $x292 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3685X input.ind-%var3686X) false))))
 ))
 (let (($x182 (forall ((input.ind-%var3685X (_ BitVec 32)) (input.ind-%var3687X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3685X input.ind-%var3687X)))
 (let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3685X)))
 (=> (and $x292 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3685X input.ind-%var3687X) (_ bv0 32))))))
 ))
 (let (($x190 (and (and $x182 $x139) $x78)))
 (let (($x218 (= $x190 true)))
 (let (($x124 (forall ((input.ind-%var3675X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3675X)))
 (=> $x48 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3675X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var3674X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3674X)))
 (= $x48 false)))
 ))
 (let (($x251 (and $x42 $x124)))
 (let (($x187 (= $x251 true)))
 (let ((?x287 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x199 (bvneg ?x287)))
 (let (($x196 (= ?x199 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x196 true)))
 (let (($x148 (= $x165 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x134)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x137 $x103)))
 (let (($x169 (and $x16 $x83)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x91 $x169)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x117)))))))
 (let (($x110 (and $x135 $x59)))
 (let (($x123 (= $x110 true)))
 (let (($x93 (= $x123 true)))
 (let (($x7 (= $x93 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x65)))
 (let (($x12 (= ?x19 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x92 (= $x12 true)))
 (let (($x13 (= $x92 true)))
 (let (($x54 (= ?x19 input.dst.llvm-%n)))
 (let (($x75 (= $x54 true)))
 (let (($x69 (= $x75 true)))
 (let ((?x118 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x118)))
 (let (($x45 (= ?x63 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x45 true)))
 (let (($x62 (= $x51 true)))
 (let (($x24 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x167 (not $x24)))
 (let (($x57 (= $x167 true)))
 (let (($x152 (= $x57 true)))
 (let (($x41 (= $x152 true)))
 (let (($x37 (and $x41 $x62)))
 (let (($x33 (and $x37 $x69)))
 (let (($x101 (and $x33 $x13)))
 (let (($x159 (and $x101 $x7)))
 (let (($x52 (and $x159 $x148)))
 (let (($x82 (and $x52 $x187)))
 (let (($x127 (and $x82 $x218)))
 (let (($x84 (and $x127 $x111)))
 (let (($x180 (and $x84 $x289)))
 (let (($x273 (and $x180 $x174)))
 (let (($x105 (and $x273 $x140)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x94 (and $x23 $x105)))
 (let (($x11 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x226 (and $x11 $x94)))
 (let (($x21 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x115 (and $x21 $x226)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x55 (and $x38 $x115)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x178 (and $x10 $x55)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x181 (and $x43 $x178)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x128 (and $x77 $x181)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x264 (and $x40 $x128)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x99 (and $x146 $x264)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x158 (and $x76 $x99)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x283 (and $x9 $x158)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x233 (and $x277 $x283)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x204 (and $x31 $x233)))
 (let (($x86 (=> $x204 $x17)))
 (not $x86)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 175 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (not $x119)))
 (let (($x205 (or $x119 $x29)))
 (let (($x285 (= $x205 true)))
 (let (($x236 (= $x285 true)))
 (let (($x170 (forall ((input.ind-%var3859X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3859X)))
 (=> $x165 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3859X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var3858X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3858X)))
 (= $x165 false)))
 ))
 (let (($x238 (and $x266 $x170)))
 (let (($x122 (= $x238 true)))
 (let (($x282 (forall ((input.ind-%var3851X (_ BitVec 32)) (input.ind-%var3853X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3851X input.ind-%var3853X)))
 (let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3851X)))
 (=> (and $x84 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3851X input.ind-%var3853X) (_ bv0 32))))))
 ))
 (let (($x213 (forall ((input.ind-%var3851X (_ BitVec 32)) (input.ind-%var3852X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3851X)))
 (=> $x84 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3851X input.ind-%var3852X) false))))
 ))
 (let (($x261 (forall ((input.ind-%var3850X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3850X)))
 (= $x70 false)))
 ))
 (let (($x141 (and (and $x261 $x213) $x282)))
 (let (($x173 (= $x141 true)))
 (let (($x267 (forall ((input.ind-%var3839X (_ BitVec 32)) (input.ind-%var3841X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3839X input.ind-%var3841X)))
 (let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3839X)))
 (=> (and $x84 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3839X input.ind-%var3841X) (_ bv0 32))))))
 ))
 (let (($x61 (forall ((input.ind-%var3839X (_ BitVec 32)) (input.ind-%var3840X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3839X)))
 (=> $x84 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3839X input.ind-%var3840X) false))))
 ))
 (let (($x15 (forall ((input.ind-%var3838X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3838X)))
 (= $x70 false)))
 ))
 (let (($x154 (and (and $x15 $x61) $x267)))
 (let (($x241 (= $x154 true)))
 (let (($x99 (forall ((input.ind-%var3829X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3829X)))
 (=> $x165 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3829X) (_ bv0 32)))))
 ))
 (let (($x115 (forall ((input.ind-%var3828X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3828X)))
 (= $x165 false)))
 ))
 (let (($x158 (and $x115 $x99)))
 (let (($x283 (= $x158 true)))
 (let (($x273 (forall ((input.ind-%var3821X (_ BitVec 32)) (input.ind-%var3823X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3821X input.ind-%var3823X)))
 (let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3821X)))
 (=> (and $x84 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3821X input.ind-%var3823X) (_ bv0 32))))))
 ))
 (let (($x245 (forall ((input.ind-%var3821X (_ BitVec 32)) (input.ind-%var3822X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3821X)))
 (=> $x84 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3821X input.ind-%var3822X) false))))
 ))
 (let (($x139 (forall ((input.ind-%var3820X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3820X)))
 (= $x70 false)))
 ))
 (let (($x79 (and (and $x139 $x245) $x273)))
 (let (($x89 (= $x79 true)))
 (let (($x125 (forall ((input.ind-%var3811X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3811X)))
 (=> $x165 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3811X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var3810X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3810X)))
 (= $x165 false)))
 ))
 (let (($x292 (and $x48 $x125)))
 (let (($x104 (= $x292 true)))
 (let ((?x110 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x110)))
 (let (($x7 (= ?x123 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x7 true)))
 (let (($x200 (= $x159 true)))
 (let ((?x152 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x152)))
 (let (($x16 (= ?x41 input.dst.llvm-%n)))
 (let (($x134 (= $x16 true)))
 (let (($x83 (= $x134 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x53)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x120 $x117)))
 (let (($x95 (and $x126 $x71)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x65 $x95)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x92)))))))
 (let (($x68 (and $x106 $x135)))
 (let (($x91 (= $x68 true)))
 (let (($x137 (= $x91 true)))
 (let (($x151 (= $x137 true)))
 (let (($x46 (= ?x41 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x118 (= $x46 true)))
 (let (($x63 (= $x118 true)))
 (let ((?x23 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x23)))
 (let (($x24 (= ?x142 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x24 true)))
 (let (($x57 (= $x167 true)))
 (let (($x45 (and $x57 $x63)))
 (let (($x27 (and $x45 $x151)))
 (let (($x169 (and $x27 $x83)))
 (let (($x287 (and $x169 $x200)))
 (let (($x207 (and $x287 $x104)))
 (let (($x140 (and $x207 $x89)))
 (let (($x233 (and $x140 $x283)))
 (let (($x210 (and $x233 $x241)))
 (let (($x263 (and $x210 $x173)))
 (let (($x144 (and $x263 $x122)))
 (let (($x21 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x279 (and $x21 $x144)))
 (let (($x38 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x145 (and $x38 $x279)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x133 (and $x36 $x145)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x155 (and $x25 $x133)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x290 (and $x39 $x155)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x223 (and $x58 $x290)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x224 (and $x72 $x223)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x244 (and $x34 $x224)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x156 (and $x6 $x244)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x280 (and $x185 $x156)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x212 (and $x22 $x280)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x258 (and $x31 $x212)))
 (let (($x87 (=> $x258 $x236)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (not $x119)))
 (let (($x205 (or $x119 $x29)))
 (let (($x285 (= $x205 true)))
 (let (($x236 (= $x285 true)))
 (let (($x170 (forall ((input.ind-%var3859X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3859X)))
 (=> $x165 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3859X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var3858X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3858X)))
 (= $x165 false)))
 ))
 (let (($x238 (and $x266 $x170)))
 (let (($x122 (= $x238 true)))
 (let (($x282 (forall ((input.ind-%var3851X (_ BitVec 32)) (input.ind-%var3853X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3851X input.ind-%var3853X)))
 (let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3851X)))
 (=> (and $x84 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3851X input.ind-%var3853X) (_ bv0 32))))))
 ))
 (let (($x213 (forall ((input.ind-%var3851X (_ BitVec 32)) (input.ind-%var3852X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3851X)))
 (=> $x84 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3851X input.ind-%var3852X) false))))
 ))
 (let (($x261 (forall ((input.ind-%var3850X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3850X)))
 (= $x70 false)))
 ))
 (let (($x141 (and (and $x261 $x213) $x282)))
 (let (($x173 (= $x141 true)))
 (let (($x267 (forall ((input.ind-%var3839X (_ BitVec 32)) (input.ind-%var3841X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3839X input.ind-%var3841X)))
 (let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3839X)))
 (=> (and $x84 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3839X input.ind-%var3841X) (_ bv0 32))))))
 ))
 (let (($x61 (forall ((input.ind-%var3839X (_ BitVec 32)) (input.ind-%var3840X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3839X)))
 (=> $x84 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3839X input.ind-%var3840X) false))))
 ))
 (let (($x15 (forall ((input.ind-%var3838X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3838X)))
 (= $x70 false)))
 ))
 (let (($x154 (and (and $x15 $x61) $x267)))
 (let (($x241 (= $x154 true)))
 (let (($x99 (forall ((input.ind-%var3829X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3829X)))
 (=> $x165 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3829X) (_ bv0 32)))))
 ))
 (let (($x115 (forall ((input.ind-%var3828X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3828X)))
 (= $x165 false)))
 ))
 (let (($x158 (and $x115 $x99)))
 (let (($x283 (= $x158 true)))
 (let (($x273 (forall ((input.ind-%var3821X (_ BitVec 32)) (input.ind-%var3823X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3821X input.ind-%var3823X)))
 (let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3821X)))
 (=> (and $x84 $x127) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3821X input.ind-%var3823X) (_ bv0 32))))))
 ))
 (let (($x245 (forall ((input.ind-%var3821X (_ BitVec 32)) (input.ind-%var3822X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3821X)))
 (=> $x84 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3821X input.ind-%var3822X) false))))
 ))
 (let (($x139 (forall ((input.ind-%var3820X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3820X)))
 (= $x70 false)))
 ))
 (let (($x79 (and (and $x139 $x245) $x273)))
 (let (($x89 (= $x79 true)))
 (let (($x125 (forall ((input.ind-%var3811X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3811X)))
 (=> $x165 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3811X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var3810X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3810X)))
 (= $x165 false)))
 ))
 (let (($x292 (and $x48 $x125)))
 (let (($x104 (= $x292 true)))
 (let ((?x110 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x110)))
 (let (($x7 (= ?x123 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x7 true)))
 (let (($x200 (= $x159 true)))
 (let ((?x152 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x152)))
 (let (($x16 (= ?x41 input.dst.llvm-%n)))
 (let (($x134 (= $x16 true)))
 (let (($x83 (= $x134 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x53)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x120 $x117)))
 (let (($x95 (and $x126 $x71)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x65 $x95)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x92)))))))
 (let (($x68 (and $x106 $x135)))
 (let (($x91 (= $x68 true)))
 (let (($x137 (= $x91 true)))
 (let (($x151 (= $x137 true)))
 (let (($x46 (= ?x41 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x118 (= $x46 true)))
 (let (($x63 (= $x118 true)))
 (let ((?x23 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x23)))
 (let (($x24 (= ?x142 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x24 true)))
 (let (($x57 (= $x167 true)))
 (let (($x45 (and $x57 $x63)))
 (let (($x27 (and $x45 $x151)))
 (let (($x169 (and $x27 $x83)))
 (let (($x287 (and $x169 $x200)))
 (let (($x207 (and $x287 $x104)))
 (let (($x140 (and $x207 $x89)))
 (let (($x233 (and $x140 $x283)))
 (let (($x210 (and $x233 $x241)))
 (let (($x263 (and $x210 $x173)))
 (let (($x144 (and $x263 $x122)))
 (let (($x21 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x279 (and $x21 $x144)))
 (let (($x38 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x145 (and $x38 $x279)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x133 (and $x36 $x145)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x155 (and $x25 $x133)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x290 (and $x39 $x155)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x223 (and $x58 $x290)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x224 (and $x72 $x223)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x244 (and $x34 $x224)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x156 (and $x6 $x244)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x280 (and $x185 $x156)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x212 (and $x22 $x280)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x258 (and $x31 $x212)))
 (let (($x87 (=> $x258 $x236)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 165 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x212)))
 (let (($x119 (= ?x258 input.dst.llvm-%n)))
 (let (($x29 (= $x119 true)))
 (let (($x266 (forall ((input.ind-%var3877X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3877X)))
 (=> $x15 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3877X) (_ bv0 32)))))
 ))
 (let (($x154 (forall ((input.ind-%var3876X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3876X)))
 (= $x15 false)))
 ))
 (let (($x170 (and $x154 $x266)))
 (let (($x238 (= $x170 true)))
 (let (($x89 (forall ((input.ind-%var3869X (_ BitVec 32)) (input.ind-%var3871X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3869X input.ind-%var3871X)))
 (let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3869X)))
 (=> (and $x139 $x292) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3869X input.ind-%var3871X) (_ bv0 32))))))
 ))
 (let (($x84 (forall ((input.ind-%var3869X (_ BitVec 32)) (input.ind-%var3870X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3869X)))
 (=> $x139 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3869X input.ind-%var3870X) false))))
 ))
 (let (($x165 (forall ((input.ind-%var3868X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3868X)))
 (= $x159 false)))
 ))
 (let (($x115 (and (and $x165 $x84) $x89)))
 (let (($x99 (= $x115 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x16 (concat ?x151 (concat ?x135 ?x71)))))
 (let (($x83 (= ?x134 input.dst.llvm-%n)))
 (let (($x169 (= $x83 true)))
 (let (($x59 (= $x169 true)))
 (let (($x65 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x120 (= $x65 true)))
 (let (($x80 (= $x120 true)))
 (let (($x85 (= $x80 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x12)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x19 $x75)))
 (let (($x92 (and $x33 $x69)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x11 $x92)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x57)))))))
 (let (($x101 (and $x45 $x13)))
 (let (($x136 (= $x101 true)))
 (let (($x143 (= $x136 true)))
 (let (($x106 (= $x143 true)))
 (let (($x117 (and $x106 $x85)))
 (let (($x110 (and $x117 $x59)))
 (let (($x158 (and $x110 $x99)))
 (let (($x122 (and $x158 $x238)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x144 (and $x26 $x122)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x279 (and $x43 $x144)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x145 (and $x77 $x279)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x133 (and $x40 $x145)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x155 (and $x146 $x133)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x290 (and $x76 $x155)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x223 (and $x9 $x290)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x224 (and $x277 $x223)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x244 (and $x20 $x224)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x156 (and $x51 $x244)))
 (let (($x205 (=> $x156 $x29)))
 (not $x205))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x212)))
 (let (($x119 (= ?x258 input.dst.llvm-%n)))
 (let (($x29 (= $x119 true)))
 (let (($x266 (forall ((input.ind-%var3877X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3877X)))
 (=> $x15 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3877X) (_ bv0 32)))))
 ))
 (let (($x154 (forall ((input.ind-%var3876X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3876X)))
 (= $x15 false)))
 ))
 (let (($x170 (and $x154 $x266)))
 (let (($x238 (= $x170 true)))
 (let (($x89 (forall ((input.ind-%var3869X (_ BitVec 32)) (input.ind-%var3871X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3869X input.ind-%var3871X)))
 (let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3869X)))
 (=> (and $x139 $x292) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3869X input.ind-%var3871X) (_ bv0 32))))))
 ))
 (let (($x84 (forall ((input.ind-%var3869X (_ BitVec 32)) (input.ind-%var3870X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3869X)))
 (=> $x139 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3869X input.ind-%var3870X) false))))
 ))
 (let (($x165 (forall ((input.ind-%var3868X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3868X)))
 (= $x159 false)))
 ))
 (let (($x115 (and (and $x165 $x84) $x89)))
 (let (($x99 (= $x115 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x16 (concat ?x151 (concat ?x135 ?x71)))))
 (let (($x83 (= ?x134 input.dst.llvm-%n)))
 (let (($x169 (= $x83 true)))
 (let (($x59 (= $x169 true)))
 (let (($x65 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x120 (= $x65 true)))
 (let (($x80 (= $x120 true)))
 (let (($x85 (= $x80 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x12)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x19 $x75)))
 (let (($x92 (and $x33 $x69)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x11 $x92)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x57)))))))
 (let (($x101 (and $x45 $x13)))
 (let (($x136 (= $x101 true)))
 (let (($x143 (= $x136 true)))
 (let (($x106 (= $x143 true)))
 (let (($x117 (and $x106 $x85)))
 (let (($x110 (and $x117 $x59)))
 (let (($x158 (and $x110 $x99)))
 (let (($x122 (and $x158 $x238)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x144 (and $x26 $x122)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x279 (and $x43 $x144)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x145 (and $x77 $x279)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x133 (and $x40 $x145)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x155 (and $x146 $x133)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x290 (and $x76 $x155)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x223 (and $x9 $x290)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x224 (and $x277 $x223)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x244 (and $x20 $x224)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x156 (and $x51 $x244)))
 (let (($x205 (=> $x156 $x29)))
 (not $x205))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x188)))
 (let (($x210 (= ?x282 input.spec-%var-n-1)))
 (let (($x141 (= $x210 true)))
 (let (($x245 (forall ((input.ind-%var3895X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3895X)))
 (=> $x119 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3895X) (_ bv0 32)))))
 ))
 (let (($x38 (forall ((input.ind-%var3894X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3894X)))
 (= $x119 false)))
 ))
 (let (($x261 (and $x38 $x245)))
 (let (($x123 (= $x261 true)))
 (let (($x223 (forall ((input.ind-%var3887X (_ BitVec 32)) (input.ind-%var3889X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3887X input.ind-%var3889X)))
 (let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3887X)))
 (=> (and $x154 $x115) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3887X input.ind-%var3889X) (_ bv0 32))))))
 ))
 (let (($x173 (forall ((input.ind-%var3887X (_ BitVec 32)) (input.ind-%var3888X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3887X)))
 (=> $x154 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3887X input.ind-%var3888X) false))))
 ))
 (let (($x84 (forall ((input.ind-%var3886X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3886X)))
 (= $x139 false)))
 ))
 (let (($x244 (and (and $x84 $x173) $x223)))
 (let (($x156 (= $x244 true)))
 (let (($x169 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x59 (= $x169 true)))
 (let (($x110 (= $x59 true)))
 (let (($x7 (= $x110 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x137)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x69 $x16)))
 (let (($x95 (and $x91 $x151)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x12 $x95)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x37)))))))
 (let (($x71 (and $x126 $x135)))
 (let (($x68 (= $x71 true)))
 (let (($x27 (= $x68 true)))
 (let (($x134 (= $x27 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x11 (concat ?x21 (concat ?x41 (concat ?x167 ?x142)))))
 (let (($x54 (= ?x11 input.dst.llvm-%n)))
 (let (($x8 (= $x54 true)))
 (let (($x75 (= $x8 true)))
 (let (($x83 (and $x75 $x134)))
 (let (($x159 (and $x83 $x7)))
 (let (($x280 (and $x159 $x156)))
 (let (($x93 (and $x280 $x123)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x287 (and $x10 $x93)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x82 (and $x39 $x287)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x207 (and $x58 $x82)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x283 (and $x72 $x207)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x233 (and $x34 $x283)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x180 (and $x6 $x233)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x177 (and $x185 $x180)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x70 (and $x22 $x177)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x67 (and $x138 $x70)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x111 (and $x36 $x67)))
 (let (($x219 (=> $x111 $x141)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x188)))
 (let (($x210 (= ?x282 input.spec-%var-n-1)))
 (let (($x141 (= $x210 true)))
 (let (($x245 (forall ((input.ind-%var3895X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3895X)))
 (=> $x119 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3895X) (_ bv0 32)))))
 ))
 (let (($x38 (forall ((input.ind-%var3894X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3894X)))
 (= $x119 false)))
 ))
 (let (($x261 (and $x38 $x245)))
 (let (($x123 (= $x261 true)))
 (let (($x223 (forall ((input.ind-%var3887X (_ BitVec 32)) (input.ind-%var3889X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3887X input.ind-%var3889X)))
 (let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3887X)))
 (=> (and $x154 $x115) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3887X input.ind-%var3889X) (_ bv0 32))))))
 ))
 (let (($x173 (forall ((input.ind-%var3887X (_ BitVec 32)) (input.ind-%var3888X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3887X)))
 (=> $x154 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3887X input.ind-%var3888X) false))))
 ))
 (let (($x84 (forall ((input.ind-%var3886X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3886X)))
 (= $x139 false)))
 ))
 (let (($x244 (and (and $x84 $x173) $x223)))
 (let (($x156 (= $x244 true)))
 (let (($x169 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x59 (= $x169 true)))
 (let (($x110 (= $x59 true)))
 (let (($x7 (= $x110 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x137)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x69 $x16)))
 (let (($x95 (and $x91 $x151)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x12 $x95)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x37)))))))
 (let (($x71 (and $x126 $x135)))
 (let (($x68 (= $x71 true)))
 (let (($x27 (= $x68 true)))
 (let (($x134 (= $x27 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x11 (concat ?x21 (concat ?x41 (concat ?x167 ?x142)))))
 (let (($x54 (= ?x11 input.dst.llvm-%n)))
 (let (($x8 (= $x54 true)))
 (let (($x75 (= $x8 true)))
 (let (($x83 (and $x75 $x134)))
 (let (($x159 (and $x83 $x7)))
 (let (($x280 (and $x159 $x156)))
 (let (($x93 (and $x280 $x123)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x287 (and $x10 $x93)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x82 (and $x39 $x287)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x207 (and $x58 $x82)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x283 (and $x72 $x207)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x233 (and $x34 $x283)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x180 (and $x6 $x233)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x177 (and $x185 $x180)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x70 (and $x22 $x177)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x67 (and $x138 $x70)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x111 (and $x36 $x67)))
 (let (($x219 (=> $x111 $x141)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x192 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x150 (bvmul ?x192 (_ bv4294967295 32))))
 (let ((?x216 (bvneg ?x150)))
 (let (($x272 (= ?x216 ?x260)))
 (let (($x113 (= $x272 true)))
 (let (($x222 (forall ((input.ind-%var3949X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3949X)))
 (=> $x280 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3949X) (_ bv0 32)))))
 ))
 (let (($x178 (forall ((input.ind-%var3948X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3948X)))
 (= $x280 false)))
 ))
 (let (($x206 (and $x178 $x222)))
 (let (($x14 (= $x206 true)))
 (let (($x175 (forall ((input.ind-%var3941X (_ BitVec 32)) (input.ind-%var3943X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3941X input.ind-%var3943X)))
 (let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3941X)))
 (=> (and $x273 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3941X input.ind-%var3943X) (_ bv0 32))))))
 ))
 (let (($x229 (forall ((input.ind-%var3941X (_ BitVec 32)) (input.ind-%var3942X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3941X)))
 (=> $x273 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3941X input.ind-%var3942X) false))))
 ))
 (let (($x204 (forall ((input.ind-%var3940X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3940X)))
 (= $x111 false)))
 ))
 (let (($x226 (and (and $x204 $x229) $x175)))
 (let (($x166 (= $x226 true)))
 (let (($x286 (forall ((input.ind-%var3929X (_ BitVec 32)) (input.ind-%var3931X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3929X input.ind-%var3931X)))
 (let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3929X)))
 (=> (and $x273 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3929X input.ind-%var3931X) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((input.ind-%var3929X (_ BitVec 32)) (input.ind-%var3930X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3929X)))
 (=> $x273 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3929X input.ind-%var3930X) false))))
 ))
 (let (($x191 (forall ((input.ind-%var3928X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3928X)))
 (= $x111 false)))
 ))
 (let (($x171 (and (and $x191 $x198) $x286)))
 (let (($x100 (= $x171 true)))
 (let (($x74 (forall ((input.ind-%var3919X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3919X)))
 (=> $x280 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3919X) (_ bv0 32)))))
 ))
 (let (($x174 (forall ((input.ind-%var3918X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3918X)))
 (= $x280 false)))
 ))
 (let (($x182 (and $x174 $x74)))
 (let (($x73 (= $x182 true)))
 (let (($x205 (forall ((input.ind-%var3911X (_ BitVec 32)) (input.ind-%var3913X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3911X input.ind-%var3913X)))
 (let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3911X)))
 (=> (and $x273 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3911X input.ind-%var3913X) (_ bv0 32))))))
 ))
 (let (($x238 (forall ((input.ind-%var3911X (_ BitVec 32)) (input.ind-%var3912X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3911X)))
 (=> $x273 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3911X input.ind-%var3912X) false))))
 ))
 (let (($x210 (forall ((input.ind-%var3910X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3910X)))
 (= $x111 false)))
 ))
 (let (($x170 (and (and $x210 $x238) $x205)))
 (let (($x145 (= $x170 true)))
 (let (($x283 (forall ((input.ind-%var3901X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3901X)))
 (=> $x280 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3901X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var3900X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3900X)))
 (= $x280 false)))
 ))
 (let (($x233 (and $x200 $x283)))
 (let (($x180 (= $x233 true)))
 (let ((?x213 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x213)))
 (let (($x155 (= ?x173 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x155 true)))
 (let (($x133 (= $x122 true)))
 (let ((?x139 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x218 (bvneg ?x139)))
 (let (($x84 (= ?x218 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x84 true)))
 (let (($x154 (= $x89 true)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x110 (= $x59 true)))
 (let (($x7 (= $x110 true)))
 (let (($x159 (= $x7 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x137)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x12 $x16)))
 (let (($x95 (and $x91 $x151)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x75 $x95)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x136)))))))
 (let (($x71 (and $x126 $x135)))
 (let (($x68 (= $x71 true)))
 (let (($x27 (= $x68 true)))
 (let (($x134 (= $x27 true)))
 (let ((?x21 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x21)))
 (let (($x142 (= ?x57 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x18 (= $x142 true)))
 (let (($x46 (= $x18 true)))
 (let (($x41 (= ?x57 input.dst.llvm-%n)))
 (let (($x24 (= $x41 true)))
 (let (($x167 (= $x24 true)))
 (let (($x11 (and $x167 $x46)))
 (let (($x83 (and $x11 $x134)))
 (let (($x125 (and $x83 $x159)))
 (let (($x115 (and $x125 $x154)))
 (let (($x290 (and $x115 $x133)))
 (let (($x177 (and $x290 $x180)))
 (let (($x121 (and $x177 $x145)))
 (let (($x186 (and $x121 $x73)))
 (let (($x194 (and $x186 $x100)))
 (let (($x131 (and $x194 $x166)))
 (let (($x248 (and $x131 $x14)))
 (let (($x118 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x129 (and (not $x118) $x248)))
 (let (($x26 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x184 (and $x26 $x129)))
 (let (($x10 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x149 (and $x10 $x184)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x90 (and $x25 $x149)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x275 (and $x77 $x90)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x221 (and $x40 $x275)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x262 (and $x146 $x221)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x209 (and $x76 $x262)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x281 (and $x9 $x209)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x64 (and $x277 $x281)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x107 (and $x20 $x64)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x78 (and $x31 $x107)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x97 (and $x36 $x78)))
 (let (($x109 (=> $x97 $x113)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x192 (bvadd input.spec-%var-i-0.L3%30%bbentry input.spec-%var-r-0.L3%30%bbentry)))
 (let ((?x150 (bvmul ?x192 (_ bv4294967295 32))))
 (let ((?x216 (bvneg ?x150)))
 (let (($x272 (= ?x216 ?x260)))
 (let (($x113 (= $x272 true)))
 (let (($x222 (forall ((input.ind-%var3949X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3949X)))
 (=> $x280 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3949X) (_ bv0 32)))))
 ))
 (let (($x178 (forall ((input.ind-%var3948X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3948X)))
 (= $x280 false)))
 ))
 (let (($x206 (and $x178 $x222)))
 (let (($x14 (= $x206 true)))
 (let (($x175 (forall ((input.ind-%var3941X (_ BitVec 32)) (input.ind-%var3943X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3941X input.ind-%var3943X)))
 (let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3941X)))
 (=> (and $x273 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3941X input.ind-%var3943X) (_ bv0 32))))))
 ))
 (let (($x229 (forall ((input.ind-%var3941X (_ BitVec 32)) (input.ind-%var3942X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3941X)))
 (=> $x273 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3941X input.ind-%var3942X) false))))
 ))
 (let (($x204 (forall ((input.ind-%var3940X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3940X)))
 (= $x111 false)))
 ))
 (let (($x226 (and (and $x204 $x229) $x175)))
 (let (($x166 (= $x226 true)))
 (let (($x286 (forall ((input.ind-%var3929X (_ BitVec 32)) (input.ind-%var3931X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3929X input.ind-%var3931X)))
 (let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3929X)))
 (=> (and $x273 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3929X input.ind-%var3931X) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((input.ind-%var3929X (_ BitVec 32)) (input.ind-%var3930X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3929X)))
 (=> $x273 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3929X input.ind-%var3930X) false))))
 ))
 (let (($x191 (forall ((input.ind-%var3928X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3928X)))
 (= $x111 false)))
 ))
 (let (($x171 (and (and $x191 $x198) $x286)))
 (let (($x100 (= $x171 true)))
 (let (($x74 (forall ((input.ind-%var3919X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3919X)))
 (=> $x280 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3919X) (_ bv0 32)))))
 ))
 (let (($x174 (forall ((input.ind-%var3918X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3918X)))
 (= $x280 false)))
 ))
 (let (($x182 (and $x174 $x74)))
 (let (($x73 (= $x182 true)))
 (let (($x205 (forall ((input.ind-%var3911X (_ BitVec 32)) (input.ind-%var3913X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3911X input.ind-%var3913X)))
 (let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3911X)))
 (=> (and $x273 $x104) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3911X input.ind-%var3913X) (_ bv0 32))))))
 ))
 (let (($x238 (forall ((input.ind-%var3911X (_ BitVec 32)) (input.ind-%var3912X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3911X)))
 (=> $x273 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3911X input.ind-%var3912X) false))))
 ))
 (let (($x210 (forall ((input.ind-%var3910X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3910X)))
 (= $x111 false)))
 ))
 (let (($x170 (and (and $x210 $x238) $x205)))
 (let (($x145 (= $x170 true)))
 (let (($x283 (forall ((input.ind-%var3901X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3901X)))
 (=> $x280 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3901X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var3900X (_ BitVec 32)) )(let (($x280 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3900X)))
 (= $x280 false)))
 ))
 (let (($x233 (and $x200 $x283)))
 (let (($x180 (= $x233 true)))
 (let ((?x213 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x213)))
 (let (($x155 (= ?x173 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x155 true)))
 (let (($x133 (= $x122 true)))
 (let ((?x139 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x218 (bvneg ?x139)))
 (let (($x84 (= ?x218 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x84 true)))
 (let (($x154 (= $x89 true)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x110 (= $x59 true)))
 (let (($x7 (= $x110 true)))
 (let (($x159 (= $x7 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x137)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x12 $x16)))
 (let (($x95 (and $x91 $x151)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x75 $x95)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x136)))))))
 (let (($x71 (and $x126 $x135)))
 (let (($x68 (= $x71 true)))
 (let (($x27 (= $x68 true)))
 (let (($x134 (= $x27 true)))
 (let ((?x21 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x21)))
 (let (($x142 (= ?x57 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x18 (= $x142 true)))
 (let (($x46 (= $x18 true)))
 (let (($x41 (= ?x57 input.dst.llvm-%n)))
 (let (($x24 (= $x41 true)))
 (let (($x167 (= $x24 true)))
 (let (($x11 (and $x167 $x46)))
 (let (($x83 (and $x11 $x134)))
 (let (($x125 (and $x83 $x159)))
 (let (($x115 (and $x125 $x154)))
 (let (($x290 (and $x115 $x133)))
 (let (($x177 (and $x290 $x180)))
 (let (($x121 (and $x177 $x145)))
 (let (($x186 (and $x121 $x73)))
 (let (($x194 (and $x186 $x100)))
 (let (($x131 (and $x194 $x166)))
 (let (($x248 (and $x131 $x14)))
 (let (($x118 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x129 (and (not $x118) $x248)))
 (let (($x26 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x184 (and $x26 $x129)))
 (let (($x10 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x149 (and $x10 $x184)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x90 (and $x25 $x149)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x275 (and $x77 $x90)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x221 (and $x40 $x275)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x262 (and $x146 $x221)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x209 (and $x76 $x262)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x281 (and $x9 $x209)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x64 (and $x277 $x281)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x107 (and $x20 $x64)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x78 (and $x31 $x107)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x97 (and $x36 $x78)))
 (let (($x109 (=> $x97 $x113)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x246 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x42 (bvmul ?x246 (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x42)))
 (let (($x86 (= ?x203 ?x28)))
 (let (($x108 (= $x86 true)))
 (let (($x258 (forall ((input.ind-%var4003X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4003X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4003X) (_ bv0 32)))))
 ))
 (let (($x212 (forall ((input.ind-%var4002X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4002X)))
 (= $x200 false)))
 ))
 (let (($x62 (and $x212 $x258)))
 (let (($x189 (= $x62 true)))
 (let (($x202 (forall ((input.ind-%var3995X (_ BitVec 32)) (input.ind-%var3997X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3995X input.ind-%var3997X)))
 (let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3995X)))
 (=> (and $x100 $x191) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3995X input.ind-%var3997X) (_ bv0 32))))))
 ))
 (let (($x60 (forall ((input.ind-%var3995X (_ BitVec 32)) (input.ind-%var3996X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3995X)))
 (=> $x100 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3995X input.ind-%var3996X) false))))
 ))
 (let (($x70 (forall ((input.ind-%var3994X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3994X)))
 (= $x279 false)))
 ))
 (let (($x30 (and (and $x70 $x60) $x202)))
 (let (($x128 (= $x30 true)))
 (let (($x244 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3985X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3985X)))
 (let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> (and $x100 $x191) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3983X input.ind-%var3985X) (_ bv0 32))))))
 ))
 (let (($x48 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3984X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> $x100 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3984X) false))))
 ))
 (let (($x54 (forall ((input.ind-%var3982X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3982X)))
 (= $x279 false)))
 ))
 (let (($x193 (and (and $x54 $x48) $x244)))
 (let (($x181 (= $x193 true)))
 (let (($x150 (forall ((input.ind-%var3973X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3973X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3973X) (_ bv0 32)))))
 ))
 (let (($x281 (forall ((input.ind-%var3972X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3972X)))
 (= $x200 false)))
 ))
 (let (($x216 (and $x281 $x150)))
 (let (($x260 (= $x216 true)))
 (let (($x129 (forall ((input.ind-%var3965X (_ BitVec 32)) (input.ind-%var3967X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3965X input.ind-%var3967X)))
 (let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3965X)))
 (=> (and $x100 $x191) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3965X input.ind-%var3967X) (_ bv0 32))))))
 ))
 (let (($x204 (forall ((input.ind-%var3965X (_ BitVec 32)) (input.ind-%var3966X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3965X)))
 (=> $x100 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3965X input.ind-%var3966X) false))))
 ))
 (let (($x145 (forall ((input.ind-%var3964X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3964X)))
 (= $x279 false)))
 ))
 (let (($x149 (and (and $x145 $x204) $x129)))
 (let (($x90 (= $x149 true)))
 (let (($x140 (forall ((input.ind-%var3955X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3955X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3955X) (_ bv0 32)))))
 ))
 (let (($x283 (forall ((input.ind-%var3954X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3954X)))
 (= $x200 false)))
 ))
 (let (($x263 (and $x283 $x140)))
 (let (($x238 (= $x263 true)))
 (let ((?x173 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x173)))
 (let (($x155 (= ?x224 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x155 true)))
 (let (($x133 (= $x122 true)))
 (let (($x89 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x154 (= $x89 true)))
 (let (($x115 (= $x154 true)))
 (let (($x267 (= $x115 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x83)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x135 $x27)))
 (let (($x59 (and $x134 $x169)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x65 $x59)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x69)))))))
 (let (($x7 (and $x95 $x110)))
 (let (($x159 (= $x7 true)))
 (let (($x125 (= $x159 true)))
 (let (($x139 (= $x125 true)))
 (let ((?x167 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x167)))
 (let (($x85 (= ?x142 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x117 (= $x85 true)))
 (let (($x143 (= $x117 true)))
 (let (($x46 (= ?x142 input.dst.llvm-%n)))
 (let (($x11 (= $x46 true)))
 (let (($x92 (= $x11 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x45)))
 (let (($x152 (= ?x21 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x152 true)))
 (let (($x24 (= $x41 true)))
 (let (($x13 (and $x24 $x92)))
 (let (($x106 (and $x13 $x143)))
 (let (($x218 (and $x106 $x139)))
 (let (($x213 (and $x218 $x267)))
 (let (($x290 (and $x213 $x133)))
 (let (($x266 (and $x290 $x238)))
 (let (($x275 (and $x266 $x90)))
 (let (($x272 (and $x275 $x260)))
 (let (($x163 (and $x272 $x181)))
 (let (($x188 (and $x163 $x128)))
 (let (($x87 (and $x188 $x189)))
 (let (($x63 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x88 (and (not $x63) $x87)))
 (let (($x10 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x94 (and $x10 $x88)))
 (let (($x25 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x66 (and $x25 $x94)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x289 (and $x43 $x66)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x52 (and $x58 $x289)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x220 (and $x72 $x52)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x197 (and $x34 $x220)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x278 (and $x6 $x197)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x32 (and $x185 $x278)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x291 (and $x22 $x32)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x124 (and $x138 $x291)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x230 (and $x47 $x124)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x276 (and $x36 $x230)))
 (let (($x53 (=> $x276 $x108)))
 (not $x53)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x246 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%30%bbentry)))
 (let ((?x42 (bvmul ?x246 (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x42)))
 (let (($x86 (= ?x203 ?x28)))
 (let (($x108 (= $x86 true)))
 (let (($x258 (forall ((input.ind-%var4003X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4003X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4003X) (_ bv0 32)))))
 ))
 (let (($x212 (forall ((input.ind-%var4002X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4002X)))
 (= $x200 false)))
 ))
 (let (($x62 (and $x212 $x258)))
 (let (($x189 (= $x62 true)))
 (let (($x202 (forall ((input.ind-%var3995X (_ BitVec 32)) (input.ind-%var3997X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3995X input.ind-%var3997X)))
 (let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3995X)))
 (=> (and $x100 $x191) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3995X input.ind-%var3997X) (_ bv0 32))))))
 ))
 (let (($x60 (forall ((input.ind-%var3995X (_ BitVec 32)) (input.ind-%var3996X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3995X)))
 (=> $x100 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3995X input.ind-%var3996X) false))))
 ))
 (let (($x70 (forall ((input.ind-%var3994X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3994X)))
 (= $x279 false)))
 ))
 (let (($x30 (and (and $x70 $x60) $x202)))
 (let (($x128 (= $x30 true)))
 (let (($x244 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3985X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3985X)))
 (let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> (and $x100 $x191) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3983X input.ind-%var3985X) (_ bv0 32))))))
 ))
 (let (($x48 (forall ((input.ind-%var3983X (_ BitVec 32)) (input.ind-%var3984X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3983X)))
 (=> $x100 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3983X input.ind-%var3984X) false))))
 ))
 (let (($x54 (forall ((input.ind-%var3982X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3982X)))
 (= $x279 false)))
 ))
 (let (($x193 (and (and $x54 $x48) $x244)))
 (let (($x181 (= $x193 true)))
 (let (($x150 (forall ((input.ind-%var3973X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3973X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3973X) (_ bv0 32)))))
 ))
 (let (($x281 (forall ((input.ind-%var3972X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3972X)))
 (= $x200 false)))
 ))
 (let (($x216 (and $x281 $x150)))
 (let (($x260 (= $x216 true)))
 (let (($x129 (forall ((input.ind-%var3965X (_ BitVec 32)) (input.ind-%var3967X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3965X input.ind-%var3967X)))
 (let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3965X)))
 (=> (and $x100 $x191) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var3965X input.ind-%var3967X) (_ bv0 32))))))
 ))
 (let (($x204 (forall ((input.ind-%var3965X (_ BitVec 32)) (input.ind-%var3966X (_ BitVec 32)) )(let (($x100 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3965X)))
 (=> $x100 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var3965X input.ind-%var3966X) false))))
 ))
 (let (($x145 (forall ((input.ind-%var3964X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var3964X)))
 (= $x279 false)))
 ))
 (let (($x149 (and (and $x145 $x204) $x129)))
 (let (($x90 (= $x149 true)))
 (let (($x140 (forall ((input.ind-%var3955X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3955X)))
 (=> $x200 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var3955X) (_ bv0 32)))))
 ))
 (let (($x283 (forall ((input.ind-%var3954X (_ BitVec 32)) )(let (($x200 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var3954X)))
 (= $x200 false)))
 ))
 (let (($x263 (and $x283 $x140)))
 (let (($x238 (= $x263 true)))
 (let ((?x173 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x173)))
 (let (($x155 (= ?x224 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x155 true)))
 (let (($x133 (= $x122 true)))
 (let (($x89 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x154 (= $x89 true)))
 (let (($x115 (= $x154 true)))
 (let (($x267 (= $x115 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x83)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x135 $x27)))
 (let (($x59 (and $x134 $x169)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x65 $x59)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x69)))))))
 (let (($x7 (and $x95 $x110)))
 (let (($x159 (= $x7 true)))
 (let (($x125 (= $x159 true)))
 (let (($x139 (= $x125 true)))
 (let ((?x167 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x167)))
 (let (($x85 (= ?x142 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x117 (= $x85 true)))
 (let (($x143 (= $x117 true)))
 (let (($x46 (= ?x142 input.dst.llvm-%n)))
 (let (($x11 (= $x46 true)))
 (let (($x92 (= $x11 true)))
 (let ((?x45 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x45)))
 (let (($x152 (= ?x21 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x152 true)))
 (let (($x24 (= $x41 true)))
 (let (($x13 (and $x24 $x92)))
 (let (($x106 (and $x13 $x143)))
 (let (($x218 (and $x106 $x139)))
 (let (($x213 (and $x218 $x267)))
 (let (($x290 (and $x213 $x133)))
 (let (($x266 (and $x290 $x238)))
 (let (($x275 (and $x266 $x90)))
 (let (($x272 (and $x275 $x260)))
 (let (($x163 (and $x272 $x181)))
 (let (($x188 (and $x163 $x128)))
 (let (($x87 (and $x188 $x189)))
 (let (($x63 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x88 (and (not $x63) $x87)))
 (let (($x10 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x94 (and $x10 $x88)))
 (let (($x25 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x66 (and $x25 $x94)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x289 (and $x43 $x66)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x52 (and $x58 $x289)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x220 (and $x72 $x52)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x197 (and $x34 $x220)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x278 (and $x6 $x197)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x32 (and $x185 $x278)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x291 (and $x22 $x32)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x124 (and $x138 $x291)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x230 (and $x47 $x124)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x276 (and $x36 $x230)))
 (let (($x53 (=> $x276 $x108)))
 (not $x53)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 173 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x219 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x223 (not $x219)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (=> $x141 $x223)))
 (let (($x93 (= $x130 true)))
 (let (($x105 (= $x93 true)))
 (let (($x178 (forall ((input.ind-%var4057X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4057X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4057X) (_ bv0 32)))))
 ))
 (let (($x17 (forall ((input.ind-%var4056X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4056X)))
 (= $x122 false)))
 ))
 (let (($x74 (and $x17 $x178)))
 (let (($x286 (= $x74 true)))
 (let (($x82 (forall ((input.ind-%var4049X (_ BitVec 32)) (input.ind-%var4051X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4049X input.ind-%var4051X)))
 (let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4049X)))
 (=> (and $x272 $x275) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4049X input.ind-%var4051X) (_ bv0 32))))))
 ))
 (let (($x79 (forall ((input.ind-%var4049X (_ BitVec 32)) (input.ind-%var4050X (_ BitVec 32)) )(let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4049X)))
 (=> $x272 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4049X input.ind-%var4050X) false))))
 ))
 (let (($x119 (forall ((input.ind-%var4048X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4048X)))
 (= $x171 false)))
 ))
 (let (($x109 (and (and $x119 $x79) $x82)))
 (let (($x292 (= $x109 true)))
 (let (($x177 (forall ((input.ind-%var4037X (_ BitVec 32)) (input.ind-%var4039X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4037X input.ind-%var4039X)))
 (let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4037X)))
 (=> (and $x272 $x275) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4037X input.ind-%var4039X) (_ bv0 32))))))
 ))
 (let (($x261 (forall ((input.ind-%var4037X (_ BitVec 32)) (input.ind-%var4038X (_ BitVec 32)) )(let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4037X)))
 (=> $x272 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4037X input.ind-%var4038X) false))))
 ))
 (let (($x203 (forall ((input.ind-%var4036X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4036X)))
 (= $x171 false)))
 ))
 (let (($x174 (and (and $x203 $x261) $x177)))
 (let (($x78 (= $x174 true)))
 (let (($x32 (forall ((input.ind-%var4027X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4027X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4027X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var4026X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4026X)))
 (= $x122 false)))
 ))
 (let (($x291 (and $x66 $x32)))
 (let (($x124 (= $x291 true)))
 (let (($x188 (forall ((input.ind-%var4019X (_ BitVec 32)) (input.ind-%var4021X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4019X input.ind-%var4021X)))
 (let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4019X)))
 (=> (and $x272 $x275) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4019X input.ind-%var4021X) (_ bv0 32))))))
 ))
 (let (($x48 (forall ((input.ind-%var4019X (_ BitVec 32)) (input.ind-%var4020X (_ BitVec 32)) )(let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4019X)))
 (=> $x272 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4019X input.ind-%var4020X) false))))
 ))
 (let (($x14 (forall ((input.ind-%var4018X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4018X)))
 (= $x171 false)))
 ))
 (let (($x258 (and (and $x14 $x48) $x188)))
 (let (($x62 (= $x258 true)))
 (let (($x279 (forall ((input.ind-%var4009X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4009X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4009X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var4008X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4008X)))
 (= $x122 false)))
 ))
 (let (($x170 (and $x200 $x279)))
 (let (($x145 (= $x170 true)))
 (let ((?x218 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x218)))
 (let (($x154 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x154 true)))
 (let (($x267 (= $x115 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x71)))
 (let (($x110 (= ?x68 input.dst.llvm-%n)))
 (let (($x7 (= $x110 true)))
 (let (($x159 (= $x7 true)))
 (let (($x27 (= ?x68 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x134 (= $x27 true)))
 (let (($x83 (= $x134 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x69)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x151 $x12)))
 (let (($x16 (and $x8 $x103)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x24 $x16)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x13)))))))
 (let (($x137 (and $x80 $x91)))
 (let (($x95 (= $x137 true)))
 (let (($x37 (= $x95 true)))
 (let (($x65 (= $x37 true)))
 (let ((?x63 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x63)))
 (let (($x5 (= ?x148 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x5 true)))
 (let (($x21 (= $x45 true)))
 (let (($x135 (and $x21 $x65)))
 (let (($x169 (and $x135 $x83)))
 (let (($x125 (and $x169 $x159)))
 (let (($x213 (and $x125 $x267)))
 (let (($x186 (and $x213 $x145)))
 (let (($x189 (and $x186 $x62)))
 (let (($x230 (and $x189 $x124)))
 (let (($x229 (and $x230 $x78)))
 (let (($x210 (and $x229 $x292)))
 (let (($x209 (and $x210 $x286)))
 (let (($x25 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x239 (and $x25 $x209)))
 (let (($x43 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x175 (and $x43 $x239)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x222 (and $x39 $x175)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x97 (and $x40 $x222)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x162 (and $x146 $x97)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x107 (and $x76 $x162)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x192 (and $x9 $x107)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x158 (and $x277 $x192)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x114 (and $x20 $x158)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x153 (and $x31 $x114)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x236 (and $x51 $x153)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x112 (and $x36 $x236)))
 (let (($x251 (=> $x112 $x105)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x219 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x223 (not $x219)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (=> $x141 $x223)))
 (let (($x93 (= $x130 true)))
 (let (($x105 (= $x93 true)))
 (let (($x178 (forall ((input.ind-%var4057X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4057X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4057X) (_ bv0 32)))))
 ))
 (let (($x17 (forall ((input.ind-%var4056X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4056X)))
 (= $x122 false)))
 ))
 (let (($x74 (and $x17 $x178)))
 (let (($x286 (= $x74 true)))
 (let (($x82 (forall ((input.ind-%var4049X (_ BitVec 32)) (input.ind-%var4051X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4049X input.ind-%var4051X)))
 (let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4049X)))
 (=> (and $x272 $x275) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4049X input.ind-%var4051X) (_ bv0 32))))))
 ))
 (let (($x79 (forall ((input.ind-%var4049X (_ BitVec 32)) (input.ind-%var4050X (_ BitVec 32)) )(let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4049X)))
 (=> $x272 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4049X input.ind-%var4050X) false))))
 ))
 (let (($x119 (forall ((input.ind-%var4048X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4048X)))
 (= $x171 false)))
 ))
 (let (($x109 (and (and $x119 $x79) $x82)))
 (let (($x292 (= $x109 true)))
 (let (($x177 (forall ((input.ind-%var4037X (_ BitVec 32)) (input.ind-%var4039X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4037X input.ind-%var4039X)))
 (let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4037X)))
 (=> (and $x272 $x275) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4037X input.ind-%var4039X) (_ bv0 32))))))
 ))
 (let (($x261 (forall ((input.ind-%var4037X (_ BitVec 32)) (input.ind-%var4038X (_ BitVec 32)) )(let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4037X)))
 (=> $x272 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4037X input.ind-%var4038X) false))))
 ))
 (let (($x203 (forall ((input.ind-%var4036X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4036X)))
 (= $x171 false)))
 ))
 (let (($x174 (and (and $x203 $x261) $x177)))
 (let (($x78 (= $x174 true)))
 (let (($x32 (forall ((input.ind-%var4027X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4027X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4027X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var4026X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4026X)))
 (= $x122 false)))
 ))
 (let (($x291 (and $x66 $x32)))
 (let (($x124 (= $x291 true)))
 (let (($x188 (forall ((input.ind-%var4019X (_ BitVec 32)) (input.ind-%var4021X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4019X input.ind-%var4021X)))
 (let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4019X)))
 (=> (and $x272 $x275) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4019X input.ind-%var4021X) (_ bv0 32))))))
 ))
 (let (($x48 (forall ((input.ind-%var4019X (_ BitVec 32)) (input.ind-%var4020X (_ BitVec 32)) )(let (($x272 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4019X)))
 (=> $x272 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4019X input.ind-%var4020X) false))))
 ))
 (let (($x14 (forall ((input.ind-%var4018X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4018X)))
 (= $x171 false)))
 ))
 (let (($x258 (and (and $x14 $x48) $x188)))
 (let (($x62 (= $x258 true)))
 (let (($x279 (forall ((input.ind-%var4009X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4009X)))
 (=> $x122 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4009X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var4008X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4008X)))
 (= $x122 false)))
 ))
 (let (($x170 (and $x200 $x279)))
 (let (($x145 (= $x170 true)))
 (let ((?x218 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x218)))
 (let (($x154 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x154 true)))
 (let (($x267 (= $x115 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x71)))
 (let (($x110 (= ?x68 input.dst.llvm-%n)))
 (let (($x7 (= $x110 true)))
 (let (($x159 (= $x7 true)))
 (let (($x27 (= ?x68 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x134 (= $x27 true)))
 (let (($x83 (= $x134 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x69)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x151 $x12)))
 (let (($x16 (and $x8 $x103)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x24 $x16)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x13)))))))
 (let (($x137 (and $x80 $x91)))
 (let (($x95 (= $x137 true)))
 (let (($x37 (= $x95 true)))
 (let (($x65 (= $x37 true)))
 (let ((?x63 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x63)))
 (let (($x5 (= ?x148 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x5 true)))
 (let (($x21 (= $x45 true)))
 (let (($x135 (and $x21 $x65)))
 (let (($x169 (and $x135 $x83)))
 (let (($x125 (and $x169 $x159)))
 (let (($x213 (and $x125 $x267)))
 (let (($x186 (and $x213 $x145)))
 (let (($x189 (and $x186 $x62)))
 (let (($x230 (and $x189 $x124)))
 (let (($x229 (and $x230 $x78)))
 (let (($x210 (and $x229 $x292)))
 (let (($x209 (and $x210 $x286)))
 (let (($x25 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x239 (and $x25 $x209)))
 (let (($x43 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x175 (and $x43 $x239)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x222 (and $x39 $x175)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x97 (and $x40 $x222)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x162 (and $x146 $x97)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x107 (and $x76 $x162)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x192 (and $x9 $x107)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x158 (and $x277 $x192)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x114 (and $x20 $x158)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x153 (and $x31 $x114)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x236 (and $x51 $x153)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x112 (and $x36 $x236)))
 (let (($x251 (=> $x112 $x105)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 166 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x241 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x161 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x23 (not $x161)))
 (let (($x29 (=> $x23 $x241)))
 (let (($x205 (= $x29 true)))
 (let (($x190 (= $x205 true)))
 (let (($x42 (forall ((input.ind-%var4111X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4111X)))
 (=> $x273 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4111X) (_ bv0 32)))))
 ))
 (let (($x216 (forall ((input.ind-%var4110X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4110X)))
 (= $x273 false)))
 ))
 (let (($x52 (and $x216 $x42)))
 (let (($x278 (= $x52 true)))
 (let (($x221 (forall ((input.ind-%var4103X (_ BitVec 32)) (input.ind-%var4105X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4103X input.ind-%var4105X)))
 (let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4103X)))
 (=> (and $x229 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4103X input.ind-%var4105X) (_ bv0 32))))))
 ))
 (let (($x276 (forall ((input.ind-%var4103X (_ BitVec 32)) (input.ind-%var4104X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4103X)))
 (=> $x229 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4103X input.ind-%var4104X) false))))
 ))
 (let (($x149 (forall ((input.ind-%var4102X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4102X)))
 (= $x128 false)))
 ))
 (let (($x204 (and (and $x149 $x276) $x221)))
 (let (($x283 (= $x204 true)))
 (let (($x28 (forall ((input.ind-%var4091X (_ BitVec 32)) (input.ind-%var4093X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4091X input.ind-%var4093X)))
 (let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4091X)))
 (=> (and $x229 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4091X input.ind-%var4093X) (_ bv0 32))))))
 ))
 (let (($x166 (forall ((input.ind-%var4091X (_ BitVec 32)) (input.ind-%var4092X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4091X)))
 (=> $x229 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4091X input.ind-%var4092X) false))))
 ))
 (let (($x104 (forall ((input.ind-%var4090X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4090X)))
 (= $x128 false)))
 ))
 (let (($x123 (and (and $x104 $x166) $x28)))
 (let (($x282 (= $x123 true)))
 (let (($x130 (forall ((input.ind-%var4081X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4081X)))
 (=> $x273 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4081X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var4080X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4080X)))
 (= $x273 false)))
 ))
 (let (($x93 (and $x153 $x130)))
 (let (($x105 (= $x93 true)))
 (let (($x175 (forall ((input.ind-%var4073X (_ BitVec 32)) (input.ind-%var4075X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4073X input.ind-%var4075X)))
 (let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4073X)))
 (=> (and $x229 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4073X input.ind-%var4075X) (_ bv0 32))))))
 ))
 (let (($x79 (forall ((input.ind-%var4073X (_ BitVec 32)) (input.ind-%var4074X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4073X)))
 (=> $x229 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4073X input.ind-%var4074X) false))))
 ))
 (let (($x189 (forall ((input.ind-%var4072X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4072X)))
 (= $x128 false)))
 ))
 (let (($x97 (and (and $x189 $x79) $x175)))
 (let (($x162 (= $x97 true)))
 (let (($x54 (forall ((input.ind-%var4063X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4063X)))
 (=> $x273 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4063X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var4062X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4062X)))
 (= $x273 false)))
 ))
 (let (($x48 (and $x170 $x54)))
 (let (($x212 (= $x48 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x84)))
 (let (($x115 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x115 true)))
 (let (($x213 (= $x267 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x68)))
 (let (($x7 (= ?x27 input.dst.llvm-%n)))
 (let (($x159 (= $x7 true)))
 (let (($x125 (= $x159 true)))
 (let (($x134 (= ?x27 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x83 (= $x134 true)))
 (let (($x169 (= $x83 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x103)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x126 $x8)))
 (let (($x91 (and $x69 $x16)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x120 $x91)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x117)))))))
 (let (($x95 (and $x151 $x137)))
 (let (($x37 (= $x95 true)))
 (let (($x65 (= $x37 true)))
 (let (($x135 (= $x65 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x26)))
 (let (($x118 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x118 true)))
 (let (($x45 (= $x5 true)))
 (let (($x71 (and $x45 $x135)))
 (let (($x59 (and $x71 $x169)))
 (let (($x139 (and $x59 $x125)))
 (let (($x155 (and $x139 $x213)))
 (let (($x30 (and $x155 $x212)))
 (let (($x107 (and $x30 $x162)))
 (let (($x251 (and $x107 $x105)))
 (let (($x87 (and $x251 $x282)))
 (let (($x263 (and $x87 $x283)))
 (let (($x33 (and $x263 $x278)))
 (let (($x43 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x64 (and $x43 $x33)))
 (let (($x39 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x108 (and $x39 $x64)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x136 (and $x77 $x108)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x226 (and $x72 $x136)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x15 (and $x34 $x226)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x198 (and $x6 $x15)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x233 (and $x185 $x198)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x262 (and $x22 $x233)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x199 (and $x138 $x262)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x245 (and $x47 $x199)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x49 (and $x35 $x245)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x61 (and $x36 $x49)))
 (let (($x187 (=> $x61 $x190)))
 (not $x187))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x241 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x161 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x23 (not $x161)))
 (let (($x29 (=> $x23 $x241)))
 (let (($x205 (= $x29 true)))
 (let (($x190 (= $x205 true)))
 (let (($x42 (forall ((input.ind-%var4111X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4111X)))
 (=> $x273 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4111X) (_ bv0 32)))))
 ))
 (let (($x216 (forall ((input.ind-%var4110X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4110X)))
 (= $x273 false)))
 ))
 (let (($x52 (and $x216 $x42)))
 (let (($x278 (= $x52 true)))
 (let (($x221 (forall ((input.ind-%var4103X (_ BitVec 32)) (input.ind-%var4105X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4103X input.ind-%var4105X)))
 (let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4103X)))
 (=> (and $x229 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4103X input.ind-%var4105X) (_ bv0 32))))))
 ))
 (let (($x276 (forall ((input.ind-%var4103X (_ BitVec 32)) (input.ind-%var4104X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4103X)))
 (=> $x229 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4103X input.ind-%var4104X) false))))
 ))
 (let (($x149 (forall ((input.ind-%var4102X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4102X)))
 (= $x128 false)))
 ))
 (let (($x204 (and (and $x149 $x276) $x221)))
 (let (($x283 (= $x204 true)))
 (let (($x28 (forall ((input.ind-%var4091X (_ BitVec 32)) (input.ind-%var4093X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4091X input.ind-%var4093X)))
 (let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4091X)))
 (=> (and $x229 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4091X input.ind-%var4093X) (_ bv0 32))))))
 ))
 (let (($x166 (forall ((input.ind-%var4091X (_ BitVec 32)) (input.ind-%var4092X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4091X)))
 (=> $x229 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4091X input.ind-%var4092X) false))))
 ))
 (let (($x104 (forall ((input.ind-%var4090X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4090X)))
 (= $x128 false)))
 ))
 (let (($x123 (and (and $x104 $x166) $x28)))
 (let (($x282 (= $x123 true)))
 (let (($x130 (forall ((input.ind-%var4081X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4081X)))
 (=> $x273 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4081X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var4080X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4080X)))
 (= $x273 false)))
 ))
 (let (($x93 (and $x153 $x130)))
 (let (($x105 (= $x93 true)))
 (let (($x175 (forall ((input.ind-%var4073X (_ BitVec 32)) (input.ind-%var4075X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4073X input.ind-%var4075X)))
 (let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4073X)))
 (=> (and $x229 $x261) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4073X input.ind-%var4075X) (_ bv0 32))))))
 ))
 (let (($x79 (forall ((input.ind-%var4073X (_ BitVec 32)) (input.ind-%var4074X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4073X)))
 (=> $x229 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4073X input.ind-%var4074X) false))))
 ))
 (let (($x189 (forall ((input.ind-%var4072X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4072X)))
 (= $x128 false)))
 ))
 (let (($x97 (and (and $x189 $x79) $x175)))
 (let (($x162 (= $x97 true)))
 (let (($x54 (forall ((input.ind-%var4063X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4063X)))
 (=> $x273 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4063X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var4062X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4062X)))
 (= $x273 false)))
 ))
 (let (($x48 (and $x170 $x54)))
 (let (($x212 (= $x48 true)))
 (let ((?x84 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x84)))
 (let (($x115 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x115 true)))
 (let (($x213 (= $x267 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x68)))
 (let (($x7 (= ?x27 input.dst.llvm-%n)))
 (let (($x159 (= $x7 true)))
 (let (($x125 (= $x159 true)))
 (let (($x134 (= ?x27 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x83 (= $x134 true)))
 (let (($x169 (= $x83 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x103)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x126 $x8)))
 (let (($x91 (and $x69 $x16)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x120 $x91)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x117)))))))
 (let (($x95 (and $x151 $x137)))
 (let (($x37 (= $x95 true)))
 (let (($x65 (= $x37 true)))
 (let (($x135 (= $x65 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x26)))
 (let (($x118 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x118 true)))
 (let (($x45 (= $x5 true)))
 (let (($x71 (and $x45 $x135)))
 (let (($x59 (and $x71 $x169)))
 (let (($x139 (and $x59 $x125)))
 (let (($x155 (and $x139 $x213)))
 (let (($x30 (and $x155 $x212)))
 (let (($x107 (and $x30 $x162)))
 (let (($x251 (and $x107 $x105)))
 (let (($x87 (and $x251 $x282)))
 (let (($x263 (and $x87 $x283)))
 (let (($x33 (and $x263 $x278)))
 (let (($x43 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x64 (and $x43 $x33)))
 (let (($x39 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x108 (and $x39 $x64)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x136 (and $x77 $x108)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x226 (and $x72 $x136)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x15 (and $x34 $x226)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x198 (and $x6 $x15)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x233 (and $x185 $x198)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x262 (and $x22 $x233)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x199 (and $x138 $x262)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x245 (and $x47 $x199)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x49 (and $x35 $x245)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x61 (and $x36 $x49)))
 (let (($x187 (=> $x61 $x190)))
 (not $x187))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 166 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x164 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x259 (ite $x164 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x55 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x196 (ite $x55 ?x259 (_ bv0 32))))
 (let (($x144 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x196)))
 (let (($x165 (= $x144 true)))
 (let (($x264 (= $x165 true)))
 (let (($x191 (forall ((input.ind-%var4219X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4219X)))
 (=> $x128 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4219X) (_ bv0 32)))))
 ))
 (let (($x112 (forall ((input.ind-%var4218X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4218X)))
 (= $x128 false)))
 ))
 (let (($x220 (and $x112 $x191)))
 (let (($x240 (= $x220 true)))
 (let (($x291 (forall ((input.ind-%var4210X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4210X)))
 (= $x105 false)))
 ))
 (let (($x186 (forall ((input.ind-%var4211X (_ BitVec 32)) (input.ind-%var4212X (_ BitVec 32)) )(let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4211X)))
 (=> $x283 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4211X input.ind-%var4212X) false))))
 ))
 (let (($x88 (forall ((input.ind-%var4211X (_ BitVec 32)) (input.ind-%var4213X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4211X input.ind-%var4213X)))
 (let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4211X)))
 (=> (and $x283 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4211X input.ind-%var4213X) (_ bv0 32))))))
 ))
 (let (($x114 (and (and $x88 $x186) $x291)))
 (let (($x82 (= $x114 true)))
 (let (($x202 (forall ((input.ind-%var4198X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4198X)))
 (= $x105 false)))
 ))
 (let (($x206 (forall ((input.ind-%var4199X (_ BitVec 32)) (input.ind-%var4200X (_ BitVec 32)) )(let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4199X)))
 (=> $x283 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4199X input.ind-%var4200X) false))))
 ))
 (let (($x38 (forall ((input.ind-%var4199X (_ BitVec 32)) (input.ind-%var4201X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4199X input.ind-%var4201X)))
 (let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4199X)))
 (=> (and $x283 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4199X input.ind-%var4201X) (_ bv0 32))))))
 ))
 (let (($x173 (and (and $x38 $x206) $x202)))
 (let (($x67 (= $x173 true)))
 (let (($x14 (forall ((input.ind-%var4188X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4188X)))
 (= $x128 false)))
 ))
 (let (($x187 (forall ((input.ind-%var4189X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4189X)))
 (=> $x128 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4189X) (_ bv0 32)))))
 ))
 (let (($x188 (and $x187 $x14)))
 (let (($x121 (= $x188 true)))
 (let (($x199 (forall ((input.ind-%var4180X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4180X)))
 (= $x105 false)))
 ))
 (let (($x226 (forall ((input.ind-%var4181X (_ BitVec 32)) (input.ind-%var4182X (_ BitVec 32)) )(let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4181X)))
 (=> $x283 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4181X input.ind-%var4182X) false))))
 ))
 (let (($x42 (forall ((input.ind-%var4181X (_ BitVec 32)) (input.ind-%var4183X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4181X input.ind-%var4183X)))
 (let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4181X)))
 (=> (and $x283 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4181X input.ind-%var4183X) (_ bv0 32))))))
 ))
 (let (($x49 (and (and $x42 $x226) $x199)))
 (let (($x61 (= $x49 true)))
 (let (($x175 (forall ((input.ind-%var4171X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4171X)))
 (=> $x128 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4171X) (_ bv0 32)))))
 ))
 (let (($x229 (forall ((input.ind-%var4170X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4170X)))
 (= $x128 false)))
 ))
 (let (($x97 (and $x229 $x175)))
 (let (($x162 (= $x97 true)))
 (let ((?x273 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x279 (bvneg ?x273)))
 (let (($x184 (= ?x279 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x275 (= $x184 true)))
 (let (($x260 (= $x275 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x139)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x59 $x159)))
 (let (($x84 (and $x125 $x218)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x103 $x84)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x135)))))))
 (let (($x154 (and $x169 $x89)))
 (let (($x115 (= $x154 true)))
 (let (($x267 (= $x115 true)))
 (let (($x213 (= $x267 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x117)))
 (let (($x142 (= ?x143 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x120 (= $x142 true)))
 (let (($x126 (= $x120 true)))
 (let (($x106 (= ?x143 input.dst.llvm-%n)))
 (let (($x80 (= $x106 true)))
 (let (($x41 (= $x80 true)))
 (let ((?x11 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x11)))
 (let (($x92 (= ?x24 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x92 true)))
 (let (($x85 (= $x13 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (not $x63)))
 (let (($x118 (= $x148 true)))
 (let (($x5 (= $x118 true)))
 (let (($x45 (= $x5 true)))
 (let (($x46 (and $x45 $x85)))
 (let (($x151 (and $x46 $x41)))
 (let (($x75 (and $x151 $x126)))
 (let (($x155 (and $x75 $x213)))
 (let (($x54 (and $x155 $x260)))
 (let (($x107 (and $x54 $x162)))
 (let (($x161 (and $x107 $x61)))
 (let (($x17 (and $x161 $x121)))
 (let (($x246 (and $x17 $x67)))
 (let (($x109 (and $x246 $x82)))
 (let (($x181 (and $x109 $x240)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x180 (and $x25 $x181)))
 (let (($x39 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x156 (and $x39 $x180)))
 (let (($x77 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x73 (and $x77 $x156)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x290 (and $x58 $x73)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x248 (and $x146 $x290)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x53 (and $x76 $x248)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x140 (and $x9 $x53)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x280 (and $x277 $x140)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x252 (and $x20 $x280)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x244 (and $x31 $x252)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x197 (and $x51 $x244)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x287 (and $x19 $x197)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x124 (and $x36 $x287)))
 (let (($x182 (=> $x124 $x264)))
 (not $x182)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-r-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-19.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-16.L3%13%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-18.L3%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L3%30%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%30%bbentry () (_ BitVec 32))
(assert
 (let (($x164 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x259 (ite $x164 input.spec-%var-r-0.L3%30%bbentry (_ bv0 32))))
 (let (($x55 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x196 (ite $x55 ?x259 (_ bv0 32))))
 (let (($x144 (= input.dst.llvm-%r.0.Lfor.cond%1%bbentry ?x196)))
 (let (($x165 (= $x144 true)))
 (let (($x264 (= $x165 true)))
 (let (($x191 (forall ((input.ind-%var4219X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4219X)))
 (=> $x128 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4219X) (_ bv0 32)))))
 ))
 (let (($x112 (forall ((input.ind-%var4218X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4218X)))
 (= $x128 false)))
 ))
 (let (($x220 (and $x112 $x191)))
 (let (($x240 (= $x220 true)))
 (let (($x291 (forall ((input.ind-%var4210X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4210X)))
 (= $x105 false)))
 ))
 (let (($x186 (forall ((input.ind-%var4211X (_ BitVec 32)) (input.ind-%var4212X (_ BitVec 32)) )(let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4211X)))
 (=> $x283 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4211X input.ind-%var4212X) false))))
 ))
 (let (($x88 (forall ((input.ind-%var4211X (_ BitVec 32)) (input.ind-%var4213X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4211X input.ind-%var4213X)))
 (let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4211X)))
 (=> (and $x283 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4211X input.ind-%var4213X) (_ bv0 32))))))
 ))
 (let (($x114 (and (and $x88 $x186) $x291)))
 (let (($x82 (= $x114 true)))
 (let (($x202 (forall ((input.ind-%var4198X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4198X)))
 (= $x105 false)))
 ))
 (let (($x206 (forall ((input.ind-%var4199X (_ BitVec 32)) (input.ind-%var4200X (_ BitVec 32)) )(let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4199X)))
 (=> $x283 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4199X input.ind-%var4200X) false))))
 ))
 (let (($x38 (forall ((input.ind-%var4199X (_ BitVec 32)) (input.ind-%var4201X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4199X input.ind-%var4201X)))
 (let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4199X)))
 (=> (and $x283 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4199X input.ind-%var4201X) (_ bv0 32))))))
 ))
 (let (($x173 (and (and $x38 $x206) $x202)))
 (let (($x67 (= $x173 true)))
 (let (($x14 (forall ((input.ind-%var4188X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4188X)))
 (= $x128 false)))
 ))
 (let (($x187 (forall ((input.ind-%var4189X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4189X)))
 (=> $x128 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4189X) (_ bv0 32)))))
 ))
 (let (($x188 (and $x187 $x14)))
 (let (($x121 (= $x188 true)))
 (let (($x199 (forall ((input.ind-%var4180X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4180X)))
 (= $x105 false)))
 ))
 (let (($x226 (forall ((input.ind-%var4181X (_ BitVec 32)) (input.ind-%var4182X (_ BitVec 32)) )(let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4181X)))
 (=> $x283 (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4181X input.ind-%var4182X) false))))
 ))
 (let (($x42 (forall ((input.ind-%var4181X (_ BitVec 32)) (input.ind-%var4183X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1 input.ind-%var4181X input.ind-%var4183X)))
 (let (($x283 (input.spec-%tmpvar-7.L3%30%bbentry.0.1 input.ind-%var4181X)))
 (=> (and $x283 $x28) (= (input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1 input.ind-%var4181X input.ind-%var4183X) (_ bv0 32))))))
 ))
 (let (($x49 (and (and $x42 $x226) $x199)))
 (let (($x61 (= $x49 true)))
 (let (($x175 (forall ((input.ind-%var4171X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4171X)))
 (=> $x128 (= (input.spec-%tmpvar-9.L3%30%bbentry.1.1 input.ind-%var4171X) (_ bv0 32)))))
 ))
 (let (($x229 (forall ((input.ind-%var4170X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-9.L3%30%bbentry.0.1 input.ind-%var4170X)))
 (= $x128 false)))
 ))
 (let (($x97 (and $x229 $x175)))
 (let (($x162 (= $x97 true)))
 (let ((?x273 (bvmul input.spec-%var-r-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x279 (bvneg ?x273)))
 (let (($x184 (= ?x279 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x275 (= $x184 true)))
 (let (($x260 (= $x275 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x139)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x59 $x159)))
 (let (($x84 (and $x125 $x218)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x103 $x84)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x135)))))))
 (let (($x154 (and $x169 $x89)))
 (let (($x115 (= $x154 true)))
 (let (($x267 (= $x115 true)))
 (let (($x213 (= $x267 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x117)))
 (let (($x142 (= ?x143 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x120 (= $x142 true)))
 (let (($x126 (= $x120 true)))
 (let (($x106 (= ?x143 input.dst.llvm-%n)))
 (let (($x80 (= $x106 true)))
 (let (($x41 (= $x80 true)))
 (let ((?x11 (bvmul input.spec-%var-i-0.L3%30%bbentry (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x11)))
 (let (($x92 (= ?x24 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x92 true)))
 (let (($x85 (= $x13 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (not $x63)))
 (let (($x118 (= $x148 true)))
 (let (($x5 (= $x118 true)))
 (let (($x45 (= $x5 true)))
 (let (($x46 (and $x45 $x85)))
 (let (($x151 (and $x46 $x41)))
 (let (($x75 (and $x151 $x126)))
 (let (($x155 (and $x75 $x213)))
 (let (($x54 (and $x155 $x260)))
 (let (($x107 (and $x54 $x162)))
 (let (($x161 (and $x107 $x61)))
 (let (($x17 (and $x161 $x121)))
 (let (($x246 (and $x17 $x67)))
 (let (($x109 (and $x246 $x82)))
 (let (($x181 (and $x109 $x240)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L3%30%bbentry input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x180 (and $x25 $x181)))
 (let (($x39 (= input.spec-%tmpvar-10.L3%30%bbentry (_ bv1 32))))
 (let (($x156 (and $x39 $x180)))
 (let (($x77 (= input.spec-%tmpvar-8.L3%30%bbentry (_ bv0 32))))
 (let (($x73 (and $x77 $x156)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%30%bbentry)))
 (let (($x290 (and $x58 $x73)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-19.L3%20%d)))
 (let (($x248 (and $x146 $x290)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-10.L3%30%bbentry)))
 (let (($x53 (and $x76 $x248)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-16.L3%13%d)))
 (let (($x140 (and $x9 $x53)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-8.L3%30%bbentry)))
 (let (($x280 (and $x277 $x140)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-21.L3%26%bbentry)))
 (let (($x252 (and $x20 $x280)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-18.L3%27%bbentry)))
 (let (($x244 (and $x31 $x252)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-11.L3%30%bbentry)))
 (let (($x197 (and $x51 $x244)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-12.L3%30%bbentry)))
 (let (($x287 (and $x19 $x197)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%30%bbentry)))
 (let (($x124 (and $x36 $x287)))
 (let (($x182 (=> $x124 $x264)))
 (not $x182)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1495885/query
