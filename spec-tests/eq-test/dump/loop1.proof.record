==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x6 $x12)))
 (let (($x19 (and $x10 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x6 $x12)))
 (let (($x19 (and $x10 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x73 (= true false)))
 (let (($x74 (= $x73 true)))
 (let (($x64 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x55)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x33 $x53)))
 (let (($x57 (and $x54 $x56)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x37 $x57)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x42)))))))
 (let (($x59 (and $x51 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x14 (concat ?x35 (concat ?x41 ?x44)))))
 (let (($x28 (= ?x38 input.dst.llvm-%n)))
 (let (($x22 (= $x28 true)))
 (let (($x7 (= $x22 true)))
 (let (($x63 (and $x7 $x62)))
 (let (($x68 (and $x63 $x67)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (and $x19 $x68)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x18 $x69)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x71 (and $x20 $x70)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x72 (and $x23 $x71)))
 (let (($x75 (=> $x72 $x74)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x73 (= true false)))
 (let (($x74 (= $x73 true)))
 (let (($x64 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x55)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x33 $x53)))
 (let (($x57 (and $x54 $x56)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x37 $x57)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x42)))))))
 (let (($x59 (and $x51 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x14 (concat ?x35 (concat ?x41 ?x44)))))
 (let (($x28 (= ?x38 input.dst.llvm-%n)))
 (let (($x22 (= $x28 true)))
 (let (($x7 (= $x22 true)))
 (let (($x63 (and $x7 $x62)))
 (let (($x68 (and $x63 $x67)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (and $x19 $x68)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x18 $x69)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x71 (and $x20 $x70)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x72 (and $x23 $x71)))
 (let (($x75 (=> $x72 $x74)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-7.L3%6%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L3%6%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_6)
(function @fun_6
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x76 (= $x75 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x65 (concat ?x62 (concat ?x58 ?x56)))))
 (let (($x67 (= ?x66 input.dst.llvm-%n)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x51 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x37 (= $x51 true)))
 (let (($x33 (= $x37 true)))
 (let (($x52 (= $x33 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x40)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x22 $x32)))
 (let (($x27 (and $x50 $x16)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x15 $x27)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x41)))))))
 (let (($x42 (and $x28 $x43)))
 (let (($x12 (= $x42 true)))
 (let (($x30 (= $x12 true)))
 (let (($x29 (= $x30 true)))
 (let (($x53 (and $x29 $x52)))
 (let (($x70 (and $x53 $x69)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (and $x47 $x70)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x72 (and $x34 $x71)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x73 (and $x8 $x72)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x74 (and $x24 $x73)))
 (let (($x10 (=> $x74 $x76)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x76 (= $x75 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x65 (concat ?x62 (concat ?x58 ?x56)))))
 (let (($x67 (= ?x66 input.dst.llvm-%n)))
 (let (($x68 (= $x67 true)))
 (let (($x69 (= $x68 true)))
 (let (($x51 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x37 (= $x51 true)))
 (let (($x33 (= $x37 true)))
 (let (($x52 (= $x33 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x40)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x22 $x32)))
 (let (($x27 (and $x50 $x16)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x15 $x27)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x41)))))))
 (let (($x42 (and $x28 $x43)))
 (let (($x12 (= $x42 true)))
 (let (($x30 (= $x12 true)))
 (let (($x29 (= $x30 true)))
 (let (($x53 (and $x29 $x52)))
 (let (($x70 (and $x53 $x69)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (and $x47 $x70)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x72 (and $x34 $x71)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x73 (and $x8 $x72)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x74 (and $x24 $x73)))
 (let (($x10 (=> $x74 $x76)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-n-1 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%6%bbentry #b10000000000000000000000000000000)
(= input.spec-%tmpvar-7.L3%6%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L3%6%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x40000003 #xff))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xff000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xff000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xff000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x19)))
 (let (($x55 (= ?x45 input.dst.llvm-%n)))
 (let (($x77 (= $x55 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x68 (concat ?x63 (concat ?x57 ?x61)))))
 (let (($x70 (= ?x69 input.dst.llvm-%n)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x33 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x52 (= $x33 true)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x27)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x9 $x40)))
 (let (($x42 (and $x16 $x43)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x13 $x42)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x5)))))))
 (let (($x30 (and $x7 $x12)))
 (let (($x29 (= $x30 true)))
 (let (($x6 (= $x29 true)))
 (let (($x51 (= $x6 true)))
 (let (($x64 (and $x51 $x54)))
 (let (($x73 (and $x64 $x72)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (and $x47 $x73)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x20 $x74)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x76 (and $x31 $x75)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x18 $x76)))
 (let (($x78 (=> $x10 $x77)))
 (not $x78)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x19)))
 (let (($x55 (= ?x45 input.dst.llvm-%n)))
 (let (($x77 (= $x55 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x68 (concat ?x63 (concat ?x57 ?x61)))))
 (let (($x70 (= ?x69 input.dst.llvm-%n)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x33 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x52 (= $x33 true)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x27)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x9 $x40)))
 (let (($x42 (and $x16 $x43)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x13 $x42)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x5)))))))
 (let (($x30 (and $x7 $x12)))
 (let (($x29 (= $x30 true)))
 (let (($x6 (= $x29 true)))
 (let (($x51 (= $x6 true)))
 (let (($x64 (and $x51 $x54)))
 (let (($x73 (and $x64 $x72)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (and $x47 $x73)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x20 $x74)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x76 (and $x31 $x75)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x18 $x76)))
 (let (($x78 (=> $x10 $x77)))
 (not $x78)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x77)))
 (let (($x79 (= ?x78 input.spec-%var-n-1)))
 (let (($x36 (= $x79 true)))
 (let (($x72 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x63)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x42 $x56)))
 (let (($x57 (and $x59 $x62)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x43 $x57)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x58 (and $x67 $x61)))
 (let (($x66 (= $x58 true)))
 (let (($x69 (= $x66 true)))
 (let (($x70 (= $x69 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x13 (concat ?x26 (concat ?x41 ?x44)))))
 (let (($x50 (= ?x9 input.dst.llvm-%n)))
 (let (($x40 (= $x50 true)))
 (let (($x16 (= $x40 true)))
 (let (($x71 (and $x16 $x70)))
 (let (($x76 (and $x71 $x75)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (and $x47 $x76)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x20 $x10)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x19 (and $x31 $x49)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x45 (and $x18 $x19)))
 (let (($x14 (=> $x45 $x36)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x77)))
 (let (($x79 (= ?x78 input.spec-%var-n-1)))
 (let (($x36 (= $x79 true)))
 (let (($x72 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x63)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x42 $x56)))
 (let (($x57 (and $x59 $x62)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x43 $x57)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x58 (and $x67 $x61)))
 (let (($x66 (= $x58 true)))
 (let (($x69 (= $x66 true)))
 (let (($x70 (= $x69 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x13 (concat ?x26 (concat ?x41 ?x44)))))
 (let (($x50 (= ?x9 input.dst.llvm-%n)))
 (let (($x40 (= $x50 true)))
 (let (($x16 (= $x40 true)))
 (let (($x71 (and $x16 $x70)))
 (let (($x76 (and $x71 $x75)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (and $x47 $x76)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x20 $x10)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x19 (and $x31 $x49)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x45 (and $x18 $x19)))
 (let (($x14 (=> $x45 $x36)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (bvsle input.spec-%var-n-1 (_ bv1 32))))
 (let (($x79 (= $x78 true)))
 (let (($x36 (= $x79 true)))
 (let (($x74 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x10 (= $x76 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x57)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x29 $x63)))
 (let (($x58 (and $x62 $x61)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x65 $x58)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x54)))))))
 (let (($x69 (and $x56 $x66)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x9 (concat ?x41 (concat ?x38 ?x17)))))
 (let (($x40 (= ?x32 input.dst.llvm-%n)))
 (let (($x16 (= $x40 true)))
 (let (($x12 (= $x16 true)))
 (let (($x73 (and $x12 $x72)))
 (let (($x49 (and $x73 $x10)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and $x46 $x49)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x45 (and $x8 $x19)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x55 (and $x24 $x45)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x77 (and $x23 $x55)))
 (let (($x14 (=> $x77 $x36)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (bvsle input.spec-%var-n-1 (_ bv1 32))))
 (let (($x79 (= $x78 true)))
 (let (($x36 (= $x79 true)))
 (let (($x74 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x10 (= $x76 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x57)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x29 $x63)))
 (let (($x58 (and $x62 $x61)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x65 $x58)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x54)))))))
 (let (($x69 (and $x56 $x66)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x9 (concat ?x41 (concat ?x38 ?x17)))))
 (let (($x40 (= ?x32 input.dst.llvm-%n)))
 (let (($x16 (= $x40 true)))
 (let (($x12 (= $x16 true)))
 (let (($x73 (and $x12 $x72)))
 (let (($x49 (and $x73 $x10)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and $x46 $x49)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x45 (and $x8 $x19)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x55 (and $x24 $x45)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x77 (and $x23 $x55)))
 (let (($x14 (=> $x77 $x36)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-n-1 #b01000000000000000000000000000000)
(= input.dst.llvm-%n #b01000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%6%bbentry #b01000000000000000000000000000000)
(= input.spec-%tmpvar-7.L3%6%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L3%6%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x40000000 #x02))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483651 32) (_ bv64 8)))
(define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x123 (= $x122 false)))
 (let (($x124 (= $x123 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x47)))
 (let (($x114 (= ?x7 input.dst.llvm-%n)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x109 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x104 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x94 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let (($x97 (= $x96 true)))
 (let (($x89 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x22)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x14 $x25)))
 (let (($x81 (and $x27 $x80)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x72 $x81)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x19)))))))
 (let (($x83 (and $x36 $x82)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x57 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x61 (= $x57 true)))
 (let (($x58 (= $x61 true)))
 (let (($x65 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x29 (= $x65 true)))
 (let (($x59 (= $x29 true)))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x67 true)))
 (let (($x42 (= $x43 true)))
 (let (($x6 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x52 (= $x6 true)))
 (let (($x53 (= $x52 true)))
 (let (($x33 (= $x53 true)))
 (let (($x16 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x12 (= $x16 true)))
 (let (($x51 (= $x12 true)))
 (let (($x37 (= $x51 true)))
 (let (($x28 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x44 (= $x28 true)))
 (let (($x32 (= $x44 true)))
 (let (($x50 (= $x32 true)))
 (let (($x48 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x41 (= $x48 true)))
 (let (($x13 (= $x41 true)))
 (let (($x38 (= $x13 true)))
 (let (($x5 (= ?x7 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (= $x5 true)))
 (let (($x9 (= $x15 true)))
 (let (($x17 (and $x9 $x38)))
 (let (($x40 (and $x17 $x50)))
 (let (($x68 (and $x40 $x37)))
 (let (($x54 (and $x68 $x33)))
 (let (($x56 (and $x54 $x42)))
 (let (($x63 (and $x56 $x59)))
 (let (($x66 (and $x63 $x58)))
 (let (($x87 (and $x66 $x86)))
 (let (($x93 (and $x87 $x92)))
 (let (($x98 (and $x93 $x97)))
 (let (($x103 (and $x98 $x102)))
 (let (($x108 (and $x103 $x107)))
 (let (($x112 (and $x108 $x111)))
 (let (($x117 (and $x112 $x116)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x34 $x117)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x23 $x118)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x120 (and $x20 $x119)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x35 $x120)))
 (let (($x125 (=> $x121 $x124)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x123 (= $x122 false)))
 (let (($x124 (= $x123 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x47)))
 (let (($x114 (= ?x7 input.dst.llvm-%n)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x109 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x104 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x94 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let (($x97 (= $x96 true)))
 (let (($x89 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x22)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x14 $x25)))
 (let (($x81 (and $x27 $x80)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x72 $x81)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x19)))))))
 (let (($x83 (and $x36 $x82)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x57 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x61 (= $x57 true)))
 (let (($x58 (= $x61 true)))
 (let (($x65 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x29 (= $x65 true)))
 (let (($x59 (= $x29 true)))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x67 true)))
 (let (($x42 (= $x43 true)))
 (let (($x6 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x52 (= $x6 true)))
 (let (($x53 (= $x52 true)))
 (let (($x33 (= $x53 true)))
 (let (($x16 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x12 (= $x16 true)))
 (let (($x51 (= $x12 true)))
 (let (($x37 (= $x51 true)))
 (let (($x28 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x44 (= $x28 true)))
 (let (($x32 (= $x44 true)))
 (let (($x50 (= $x32 true)))
 (let (($x48 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x41 (= $x48 true)))
 (let (($x13 (= $x41 true)))
 (let (($x38 (= $x13 true)))
 (let (($x5 (= ?x7 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (= $x5 true)))
 (let (($x9 (= $x15 true)))
 (let (($x17 (and $x9 $x38)))
 (let (($x40 (and $x17 $x50)))
 (let (($x68 (and $x40 $x37)))
 (let (($x54 (and $x68 $x33)))
 (let (($x56 (and $x54 $x42)))
 (let (($x63 (and $x56 $x59)))
 (let (($x66 (and $x63 $x58)))
 (let (($x87 (and $x66 $x86)))
 (let (($x93 (and $x87 $x92)))
 (let (($x98 (and $x93 $x97)))
 (let (($x103 (and $x98 $x102)))
 (let (($x108 (and $x103 $x107)))
 (let (($x112 (and $x108 $x111)))
 (let (($x117 (and $x112 $x116)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x34 $x117)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x23 $x118)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x120 (and $x20 $x119)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x35 $x120)))
 (let (($x125 (=> $x121 $x124)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b01000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b00000000000000000000000000000001)
(= input.spec-%var-n-1 #b01000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-r-0.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-i-0.L3%6%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-0.L3%6%bbentry #b01000000000000000000000000000000)
(= input.spec-%tmpvar-7.L3%6%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L3%6%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000200)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000200)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x100 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (not $x100)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (=> $x99 $x101)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x91 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x27)))
 (let (($x85 (= ?x22 input.dst.llvm-%n)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x80 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x72 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x14 (= $x72 true)))
 (let (($x60 (= $x14 true)))
 (let (($x30 (= $x60 true)))
 (let (($x55 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x77 (= $x55 true)))
 (let (($x78 (= $x77 true)))
 (let (($x36 (= $x78 true)))
 (let (($x75 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x75 true)))
 (let (($x49 (= $x10 true)))
 (let (($x76 (= $x49 true)))
 (let (($x58 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x66 (= $x58 true)))
 (let (($x73 (= $x66 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x43)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x53 $x64)))
 (let (($x56 (and $x67 $x42)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x38 $x56)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x16)))))))
 (let (($x29 (and $x52 $x65)))
 (let (($x59 (= $x29 true)))
 (let (($x63 (= $x59 true)))
 (let (($x62 (= $x63 true)))
 (let ((?x21 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x21)))
 (let (($x15 (= ?x8 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x15 true)))
 (let (($x24 (= $x18 true)))
 (let (($x57 (and $x24 $x62)))
 (let (($x79 (and $x57 $x74)))
 (let (($x19 (and $x79 $x76)))
 (let (($x71 (and $x19 $x36)))
 (let (($x25 (and $x71 $x30)))
 (let (($x83 (and $x25 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x94 (and $x88 $x93)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and $x26 $x94)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x96 (and $x46 $x95)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x97 (and $x39 $x96)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x35 $x97)))
 (let (($x105 (=> $x98 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x100 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (not $x100)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (=> $x99 $x101)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x91 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x27)))
 (let (($x85 (= ?x22 input.dst.llvm-%n)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x80 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x72 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x14 (= $x72 true)))
 (let (($x60 (= $x14 true)))
 (let (($x30 (= $x60 true)))
 (let (($x55 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x77 (= $x55 true)))
 (let (($x78 (= $x77 true)))
 (let (($x36 (= $x78 true)))
 (let (($x75 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x75 true)))
 (let (($x49 (= $x10 true)))
 (let (($x76 (= $x49 true)))
 (let (($x58 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x66 (= $x58 true)))
 (let (($x73 (= $x66 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x43)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x53 $x64)))
 (let (($x56 (and $x67 $x42)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x38 $x56)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x16)))))))
 (let (($x29 (and $x52 $x65)))
 (let (($x59 (= $x29 true)))
 (let (($x63 (= $x59 true)))
 (let (($x62 (= $x63 true)))
 (let ((?x21 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x21)))
 (let (($x15 (= ?x8 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x15 true)))
 (let (($x24 (= $x18 true)))
 (let (($x57 (and $x24 $x62)))
 (let (($x79 (and $x57 $x74)))
 (let (($x19 (and $x79 $x76)))
 (let (($x71 (and $x19 $x36)))
 (let (($x25 (and $x71 $x30)))
 (let (($x83 (and $x25 $x82)))
 (let (($x88 (and $x83 $x87)))
 (let (($x94 (and $x88 $x93)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and $x26 $x94)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x96 (and $x46 $x95)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x97 (and $x39 $x96)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x35 $x97)))
 (let (($x105 (=> $x98 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x107 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x108 (bvmul ?x107 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x108)))
 (let (($x111 (= ?x109 ?x110)))
 (let (($x112 (= $x111 true)))
 (let ((?x97 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x97)))
 (let (($x99 (= ?x98 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x92 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x87 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let (($x82 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x25 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x27 (= $x25 true)))
 (let (($x22 (= $x27 true)))
 (let (($x80 (= $x22 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x71 true)))
 (let (($x14 (= $x72 true)))
 (let (($x60 (= $x14 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x75)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x58 $x74)))
 (let (($x49 (and $x79 $x10)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x33 $x49)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x65)))))))
 (let (($x19 (and $x61 $x76)))
 (let (($x45 (= $x19 true)))
 (let (($x55 (= $x45 true)))
 (let (($x77 (= $x55 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x6)))
 (let (($x51 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x51 true)))
 (let (($x68 (= $x37 true)))
 (let (($x40 (= ?x44 input.dst.llvm-%n)))
 (let (($x32 (= $x40 true)))
 (let (($x16 (= $x32 true)))
 (let ((?x5 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x5)))
 (let (($x24 (= ?x15 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x24 true)))
 (let (($x28 (= $x17 true)))
 (let (($x12 (and $x28 $x16)))
 (let (($x52 (and $x12 $x68)))
 (let (($x78 (and $x52 $x77)))
 (let (($x30 (and $x78 $x60)))
 (let (($x81 (and $x30 $x80)))
 (let (($x86 (and $x81 $x85)))
 (let (($x91 (and $x86 $x90)))
 (let (($x96 (and $x91 $x95)))
 (let (($x102 (and $x96 $x101)))
 (let (($x21 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x104 (and (not $x21) $x102)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (and $x31 $x104)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x106 (and $x34 $x105)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x20 (and $x35 $x106)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x41 (and $x69 $x20)))
 (let (($x113 (=> $x41 $x112)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x107 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x108 (bvmul ?x107 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x108)))
 (let (($x111 (= ?x109 ?x110)))
 (let (($x112 (= $x111 true)))
 (let ((?x97 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x97)))
 (let (($x99 (= ?x98 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x92 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x87 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let (($x82 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x25 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x27 (= $x25 true)))
 (let (($x22 (= $x27 true)))
 (let (($x80 (= $x22 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x71 true)))
 (let (($x14 (= $x72 true)))
 (let (($x60 (= $x14 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x75)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x58 $x74)))
 (let (($x49 (and $x79 $x10)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x33 $x49)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x65)))))))
 (let (($x19 (and $x61 $x76)))
 (let (($x45 (= $x19 true)))
 (let (($x55 (= $x45 true)))
 (let (($x77 (= $x55 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x6)))
 (let (($x51 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x51 true)))
 (let (($x68 (= $x37 true)))
 (let (($x40 (= ?x44 input.dst.llvm-%n)))
 (let (($x32 (= $x40 true)))
 (let (($x16 (= $x32 true)))
 (let ((?x5 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x5)))
 (let (($x24 (= ?x15 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x24 true)))
 (let (($x28 (= $x17 true)))
 (let (($x12 (and $x28 $x16)))
 (let (($x52 (and $x12 $x68)))
 (let (($x78 (and $x52 $x77)))
 (let (($x30 (and $x78 $x60)))
 (let (($x81 (and $x30 $x80)))
 (let (($x86 (and $x81 $x85)))
 (let (($x91 (and $x86 $x90)))
 (let (($x96 (and $x91 $x95)))
 (let (($x102 (and $x96 $x101)))
 (let (($x21 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x104 (and (not $x21) $x102)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (and $x31 $x104)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x106 (and $x34 $x105)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x20 (and $x35 $x106)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x41 (and $x69 $x20)))
 (let (($x113 (=> $x41 $x112)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let ((?x110 (bvmul ?x109 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x110)))
 (let (($x113 (= ?x111 ?x112)))
 (let (($x114 (= $x113 true)))
 (let ((?x97 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x97)))
 (let (($x100 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x90)))
 (let (($x92 (= ?x91 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x88 (= $x87 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x60 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x60 true)))
 (let (($x25 (= $x30 true)))
 (let (($x27 (= $x25 true)))
 (let (($x78 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x36 (= $x78 true)))
 (let (($x71 (= $x36 true)))
 (let (($x72 (= $x71 true)))
 (let (($x76 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x19 (= $x76 true)))
 (let (($x45 (= $x19 true)))
 (let (($x55 (= $x45 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x53)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x29 $x62)))
 (let (($x58 (and $x61 $x33)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x16 $x58)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x64)))))))
 (let (($x73 (and $x65 $x66)))
 (let (($x74 (= $x73 true)))
 (let (($x79 (= $x74 true)))
 (let (($x75 (= $x79 true)))
 (let ((?x26 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x26)))
 (let (($x17 (= ?x8 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x28 (= $x17 true)))
 (let (($x6 (= $x28 true)))
 (let (($x15 (= ?x8 input.dst.llvm-%n)))
 (let (($x18 (= $x15 true)))
 (let (($x24 (= $x18 true)))
 (let (($x44 (and $x24 $x6)))
 (let (($x10 (and $x44 $x75)))
 (let (($x77 (and $x10 $x55)))
 (let (($x14 (and $x77 $x72)))
 (let (($x22 (and $x14 $x27)))
 (let (($x84 (and $x22 $x83)))
 (let (($x89 (and $x84 $x88)))
 (let (($x95 (and $x89 $x94)))
 (let (($x104 (and $x95 $x102)))
 (let (($x47 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (and (not $x47) $x104)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and $x21 $x106)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x41 (and $x46 $x20)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x39 $x41)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x108 (and $x69 $x107)))
 (let (($x13 (=> $x108 $x114)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let ((?x110 (bvmul ?x109 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x110)))
 (let (($x113 (= ?x111 ?x112)))
 (let (($x114 (= $x113 true)))
 (let ((?x97 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x97)))
 (let (($x100 (= ?x98 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x90)))
 (let (($x92 (= ?x91 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x88 (= $x87 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x60 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x60 true)))
 (let (($x25 (= $x30 true)))
 (let (($x27 (= $x25 true)))
 (let (($x78 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x36 (= $x78 true)))
 (let (($x71 (= $x36 true)))
 (let (($x72 (= $x71 true)))
 (let (($x76 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x19 (= $x76 true)))
 (let (($x45 (= $x19 true)))
 (let (($x55 (= $x45 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x53)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x29 $x62)))
 (let (($x58 (and $x61 $x33)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x16 $x58)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x64)))))))
 (let (($x73 (and $x65 $x66)))
 (let (($x74 (= $x73 true)))
 (let (($x79 (= $x74 true)))
 (let (($x75 (= $x79 true)))
 (let ((?x26 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x26)))
 (let (($x17 (= ?x8 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x28 (= $x17 true)))
 (let (($x6 (= $x28 true)))
 (let (($x15 (= ?x8 input.dst.llvm-%n)))
 (let (($x18 (= $x15 true)))
 (let (($x24 (= $x18 true)))
 (let (($x44 (and $x24 $x6)))
 (let (($x10 (and $x44 $x75)))
 (let (($x77 (and $x10 $x55)))
 (let (($x14 (and $x77 $x72)))
 (let (($x22 (and $x14 $x27)))
 (let (($x84 (and $x22 $x83)))
 (let (($x89 (and $x84 $x88)))
 (let (($x95 (and $x89 $x94)))
 (let (($x104 (and $x95 $x102)))
 (let (($x47 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (and (not $x47) $x104)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and $x21 $x106)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x41 (and $x46 $x20)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x39 $x41)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x108 (and $x69 $x107)))
 (let (($x13 (=> $x108 $x114)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x111 (bvuge ?x110 (_ bv1 32))))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x98)))
 (let (($x100 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x93 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let (($x88 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x22)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x14 $x25)))
 (let (($x81 (and $x27 $x80)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x74 $x81)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x45)))))))
 (let (($x83 (and $x72 $x82)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x63 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x63 true)))
 (let (($x61 (= $x62 true)))
 (let (($x53 (= $x61 true)))
 (let (($x65 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x32 (= $x65 true)))
 (let (($x16 (= $x32 true)))
 (let (($x29 (= $x16 true)))
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x43)))
 (let (($x57 (= ?x37 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (= $x57 true)))
 (let (($x42 (= $x67 true)))
 (let (($x52 (= ?x37 input.dst.llvm-%n)))
 (let (($x54 (= $x52 true)))
 (let (($x68 (= $x54 true)))
 (let ((?x24 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x24)))
 (let (($x6 (= ?x17 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x44 (= $x6 true)))
 (let (($x12 (= $x44 true)))
 (let (($x103 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (= $x103 true)))
 (let (($x8 (= $x26 true)))
 (let (($x5 (= $x8 true)))
 (let (($x51 (and $x5 $x12)))
 (let (($x64 (and $x51 $x68)))
 (let (($x56 (and $x64 $x42)))
 (let (($x59 (and $x56 $x29)))
 (let (($x33 (and $x59 $x53)))
 (let (($x87 (and $x33 $x86)))
 (let (($x92 (and $x87 $x91)))
 (let (($x97 (and $x92 $x96)))
 (let (($x104 (and $x97 $x102)))
 (let (($x34 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and (not $x34) $x104)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x31 $x20)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x48 $x41)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x108 (and $x35 $x107)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x109 (and $x9 $x108)))
 (let (($x114 (=> $x109 $x113)))
 (not $x114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x111 (bvuge ?x110 (_ bv1 32))))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x98)))
 (let (($x100 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x93 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let (($x88 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x22)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x14 $x25)))
 (let (($x81 (and $x27 $x80)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x74 $x81)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x45)))))))
 (let (($x83 (and $x72 $x82)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x63 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x63 true)))
 (let (($x61 (= $x62 true)))
 (let (($x53 (= $x61 true)))
 (let (($x65 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x32 (= $x65 true)))
 (let (($x16 (= $x32 true)))
 (let (($x29 (= $x16 true)))
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x43)))
 (let (($x57 (= ?x37 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (= $x57 true)))
 (let (($x42 (= $x67 true)))
 (let (($x52 (= ?x37 input.dst.llvm-%n)))
 (let (($x54 (= $x52 true)))
 (let (($x68 (= $x54 true)))
 (let ((?x24 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x24)))
 (let (($x6 (= ?x17 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x44 (= $x6 true)))
 (let (($x12 (= $x44 true)))
 (let (($x103 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (= $x103 true)))
 (let (($x8 (= $x26 true)))
 (let (($x5 (= $x8 true)))
 (let (($x51 (and $x5 $x12)))
 (let (($x64 (and $x51 $x68)))
 (let (($x56 (and $x64 $x42)))
 (let (($x59 (and $x56 $x29)))
 (let (($x33 (and $x59 $x53)))
 (let (($x87 (and $x33 $x86)))
 (let (($x92 (and $x87 $x91)))
 (let (($x97 (and $x92 $x96)))
 (let (($x104 (and $x97 $x102)))
 (let (($x34 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and (not $x34) $x104)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x31 $x20)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x48 $x41)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x108 (and $x35 $x107)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x109 (and $x9 $x108)))
 (let (($x114 (=> $x109 $x113)))
 (not $x114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x112 (bvsge ?x111 (_ bv1 32))))
 (let (($x113 (= $x112 true)))
 (let (($x114 (= $x113 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x98)))
 (let (($x100 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x93 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let (($x88 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x22)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x14 $x25)))
 (let (($x81 (and $x27 $x80)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x75 $x81)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x55)))))))
 (let (($x83 (and $x74 $x82)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x29 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x59 (= $x29 true)))
 (let (($x63 (= $x59 true)))
 (let (($x62 (= $x63 true)))
 (let (($x42 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x56 (= $x42 true)))
 (let (($x65 (= $x56 true)))
 (let (($x32 (= $x65 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x12)))
 (let (($x68 (= ?x51 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x68 true)))
 (let (($x57 (= $x64 true)))
 (let (($x43 (= ?x51 input.dst.llvm-%n)))
 (let (($x37 (= $x43 true)))
 (let (($x52 (= $x37 true)))
 (let ((?x15 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x15)))
 (let (($x17 (= ?x18 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x17 true)))
 (let (($x6 (= $x28 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x105 (= $x47 true)))
 (let (($x103 (= $x105 true)))
 (let (($x26 (= $x103 true)))
 (let (($x44 (and $x26 $x6)))
 (let (($x54 (and $x44 $x52)))
 (let (($x67 (and $x54 $x57)))
 (let (($x16 (and $x67 $x32)))
 (let (($x61 (and $x16 $x62)))
 (let (($x87 (and $x61 $x86)))
 (let (($x92 (and $x87 $x91)))
 (let (($x97 (and $x92 $x96)))
 (let (($x104 (and $x97 $x102)))
 (let (($x21 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and (not $x21) $x104)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x23 $x41)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x39 $x107)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x109 (and $x7 $x108)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x110 (and $x50 $x109)))
 (let (($x13 (=> $x110 $x114)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x112 (bvsge ?x111 (_ bv1 32))))
 (let (($x113 (= $x112 true)))
 (let (($x114 (= $x113 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x98)))
 (let (($x100 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x93 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let (($x88 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let (($x91 (= $x90 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x22)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x14 $x25)))
 (let (($x81 (and $x27 $x80)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x75 $x81)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x55)))))))
 (let (($x83 (and $x74 $x82)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x29 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x59 (= $x29 true)))
 (let (($x63 (= $x59 true)))
 (let (($x62 (= $x63 true)))
 (let (($x42 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x56 (= $x42 true)))
 (let (($x65 (= $x56 true)))
 (let (($x32 (= $x65 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x12)))
 (let (($x68 (= ?x51 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x68 true)))
 (let (($x57 (= $x64 true)))
 (let (($x43 (= ?x51 input.dst.llvm-%n)))
 (let (($x37 (= $x43 true)))
 (let (($x52 (= $x37 true)))
 (let ((?x15 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x15)))
 (let (($x17 (= ?x18 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x17 true)))
 (let (($x6 (= $x28 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x105 (= $x47 true)))
 (let (($x103 (= $x105 true)))
 (let (($x26 (= $x103 true)))
 (let (($x44 (and $x26 $x6)))
 (let (($x54 (and $x44 $x52)))
 (let (($x67 (and $x54 $x57)))
 (let (($x16 (and $x67 $x32)))
 (let (($x61 (and $x16 $x62)))
 (let (($x87 (and $x61 $x86)))
 (let (($x92 (and $x87 $x91)))
 (let (($x97 (and $x92 $x96)))
 (let (($x104 (and $x97 $x102)))
 (let (($x21 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and (not $x21) $x104)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x23 $x41)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x39 $x107)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x109 (and $x7 $x108)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x110 (and $x50 $x109)))
 (let (($x13 (=> $x110 $x114)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-i-0.L3%6%bbentry #b01111111111111111111111111111111)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01111111111111111111111111111111)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%6%bbentry #b01111111111111111111111111111111)
(= input.spec-%var-n-1 #b01111111111111111111111111111111)
(= input.dst.llvm-%n #b01111111111111111111111111111111)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-7.L3%6%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L3%6%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (bvuge ?x100 (_ bv1 32))))
 (let (($x102 (= $x101 true)))
 (let (($x104 (= $x102 true)))
 (let ((?x88 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x88)))
 (let (($x90 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x83 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x27 true)))
 (let (($x80 (= $x22 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x78)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x49 $x55)))
 (let (($x72 (and $x77 $x36)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x42 $x72)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x63)))))))
 (let (($x79 (and $x76 $x74)))
 (let (($x75 (= $x79 true)))
 (let (($x14 (= $x75 true)))
 (let (($x60 (= $x14 true)))
 (let (($x43 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x37 (= $x43 true)))
 (let (($x52 (= $x37 true)))
 (let (($x54 (= $x52 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x8)))
 (let (($x6 (= ?x5 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x6 true)))
 (let (($x12 (= $x44 true)))
 (let (($x18 (= ?x5 input.dst.llvm-%n)))
 (let (($x24 (= $x18 true)))
 (let (($x17 (= $x24 true)))
 (let ((?x34 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x34)))
 (let (($x105 (= ?x106 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x105 true)))
 (let (($x26 (= $x103 true)))
 (let (($x28 (and $x26 $x17)))
 (let (($x51 (and $x28 $x12)))
 (let (($x68 (and $x51 $x54)))
 (let (($x30 (and $x68 $x60)))
 (let (($x82 (and $x30 $x81)))
 (let (($x87 (and $x82 $x86)))
 (let (($x93 (and $x87 $x92)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and (not $x31) $x93)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x46 $x95)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x97 (and $x35 $x96)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x98 (and $x69 $x97)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x58 $x98)))
 (let (($x41 (=> $x99 $x104)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (bvuge ?x100 (_ bv1 32))))
 (let (($x102 (= $x101 true)))
 (let (($x104 (= $x102 true)))
 (let ((?x88 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x88)))
 (let (($x90 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let (($x83 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x27 true)))
 (let (($x80 (= $x22 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x78)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x49 $x55)))
 (let (($x72 (and $x77 $x36)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x42 $x72)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x63)))))))
 (let (($x79 (and $x76 $x74)))
 (let (($x75 (= $x79 true)))
 (let (($x14 (= $x75 true)))
 (let (($x60 (= $x14 true)))
 (let (($x43 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x37 (= $x43 true)))
 (let (($x52 (= $x37 true)))
 (let (($x54 (= $x52 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x8)))
 (let (($x6 (= ?x5 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x6 true)))
 (let (($x12 (= $x44 true)))
 (let (($x18 (= ?x5 input.dst.llvm-%n)))
 (let (($x24 (= $x18 true)))
 (let (($x17 (= $x24 true)))
 (let ((?x34 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x34)))
 (let (($x105 (= ?x106 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x105 true)))
 (let (($x26 (= $x103 true)))
 (let (($x28 (and $x26 $x17)))
 (let (($x51 (and $x28 $x12)))
 (let (($x68 (and $x51 $x54)))
 (let (($x30 (and $x68 $x60)))
 (let (($x82 (and $x30 $x81)))
 (let (($x87 (and $x82 $x86)))
 (let (($x93 (and $x87 $x92)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and (not $x31) $x93)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x46 $x95)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x97 (and $x35 $x96)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x98 (and $x69 $x97)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x58 $x98)))
 (let (($x41 (=> $x99 $x104)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b11111111111111111111111111111111)
(= input.spec-%var-i-0.L3%6%bbentry #b11111111111111111111111111111111)
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-7.L3%6%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L3%6%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x92 (bvmul ?x91 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x92)))
 (let (($x96 (= ?x93 ?x95)))
 (let (($x97 (= $x96 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x22)))
 (let (($x81 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x14 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x60 (= $x14 true)))
 (let (($x30 (= $x60 true)))
 (let (($x25 (= $x30 true)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x45)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x10 $x42)))
 (let (($x55 (and $x49 $x19)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x52 $x55)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x29)))))))
 (let (($x78 (and $x71 $x77)))
 (let (($x36 (= $x78 true)))
 (let (($x72 (= $x36 true)))
 (let (($x74 (= $x72 true)))
 (let ((?x26 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x26)))
 (let (($x28 (= ?x8 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x6 (= $x28 true)))
 (let (($x44 (= $x6 true)))
 (let (($x15 (= ?x8 input.dst.llvm-%n)))
 (let (($x18 (= $x15 true)))
 (let (($x24 (= $x18 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x20)))
 (let (($x47 (= ?x34 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x47 true)))
 (let (($x103 (= $x105 true)))
 (let (($x17 (and $x103 $x24)))
 (let (($x12 (and $x17 $x44)))
 (let (($x79 (and $x12 $x74)))
 (let (($x27 (and $x79 $x25)))
 (let (($x84 (and $x27 $x83)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and (not $x31) $x84)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (and $x46 $x86)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x88 (and $x35 $x87)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x89 (and $x69 $x88)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x90 (and $x58 $x89)))
 (let (($x98 (=> $x90 $x97)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x92 (bvmul ?x91 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x92)))
 (let (($x96 (= ?x93 ?x95)))
 (let (($x97 (= $x96 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x22)))
 (let (($x81 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x14 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x60 (= $x14 true)))
 (let (($x30 (= $x60 true)))
 (let (($x25 (= $x30 true)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x45)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x10 $x42)))
 (let (($x55 (and $x49 $x19)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x52 $x55)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x29)))))))
 (let (($x78 (and $x71 $x77)))
 (let (($x36 (= $x78 true)))
 (let (($x72 (= $x36 true)))
 (let (($x74 (= $x72 true)))
 (let ((?x26 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x26)))
 (let (($x28 (= ?x8 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x6 (= $x28 true)))
 (let (($x44 (= $x6 true)))
 (let (($x15 (= ?x8 input.dst.llvm-%n)))
 (let (($x18 (= $x15 true)))
 (let (($x24 (= $x18 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x20)))
 (let (($x47 (= ?x34 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x47 true)))
 (let (($x103 (= $x105 true)))
 (let (($x17 (and $x103 $x24)))
 (let (($x12 (and $x17 $x44)))
 (let (($x79 (and $x12 $x74)))
 (let (($x27 (and $x79 $x25)))
 (let (($x84 (and $x27 $x83)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and (not $x31) $x84)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (and $x46 $x86)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x88 (and $x35 $x87)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x89 (and $x69 $x88)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x90 (and $x58 $x89)))
 (let (($x98 (=> $x90 $x97)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x93 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let ((?x95 (bvmul ?x93 (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x95)))
 (let (($x98 (= ?x96 ?x97)))
 (let (($x99 (= $x98 true)))
 (let ((?x22 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x22)))
 (let (($x82 (= ?x80 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x79)))
 (let (($x14 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x14 true)))
 (let (($x30 (= $x60 true)))
 (let (($x77 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x77 true)))
 (let (($x36 (= $x78 true)))
 (let (($x72 (= $x36 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x37)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x59 $x62)))
 (let (($x10 (and $x71 $x52)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x24 $x10)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x68)))))))
 (let (($x67 (and $x29 $x76)))
 (let (($x42 (= $x67 true)))
 (let (($x49 (= $x42 true)))
 (let (($x45 (= $x49 true)))
 (let ((?x94 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x94)))
 (let (($x105 (= ?x21 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (= $x105 true)))
 (let (($x26 (= $x103 true)))
 (let (($x34 (= ?x21 input.dst.llvm-%n)))
 (let (($x106 (= $x34 true)))
 (let (($x47 (= $x106 true)))
 (let (($x8 (and $x47 $x26)))
 (let (($x19 (and $x8 $x45)))
 (let (($x74 (and $x19 $x72)))
 (let (($x25 (and $x74 $x30)))
 (let (($x86 (and $x25 $x84)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (and (not $x31) $x86)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (and $x46 $x88)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x90 (and $x35 $x89)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x91 (and $x69 $x90)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x58 $x91)))
 (let (($x51 (=> $x92 $x99)))
 (not $x51))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x93 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let ((?x95 (bvmul ?x93 (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x95)))
 (let (($x98 (= ?x96 ?x97)))
 (let (($x99 (= $x98 true)))
 (let ((?x22 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x22)))
 (let (($x82 (= ?x80 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x79)))
 (let (($x14 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x14 true)))
 (let (($x30 (= $x60 true)))
 (let (($x77 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x77 true)))
 (let (($x36 (= $x78 true)))
 (let (($x72 (= $x36 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x37)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x59 $x62)))
 (let (($x10 (and $x71 $x52)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x24 $x10)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x68)))))))
 (let (($x67 (and $x29 $x76)))
 (let (($x42 (= $x67 true)))
 (let (($x49 (= $x42 true)))
 (let (($x45 (= $x49 true)))
 (let ((?x94 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x94)))
 (let (($x105 (= ?x21 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (= $x105 true)))
 (let (($x26 (= $x103 true)))
 (let (($x34 (= ?x21 input.dst.llvm-%n)))
 (let (($x106 (= $x34 true)))
 (let (($x47 (= $x106 true)))
 (let (($x8 (and $x47 $x26)))
 (let (($x19 (and $x8 $x45)))
 (let (($x74 (and $x19 $x72)))
 (let (($x25 (and $x74 $x30)))
 (let (($x86 (and $x25 $x84)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (and (not $x31) $x86)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (and $x46 $x88)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x90 (and $x35 $x89)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x91 (and $x69 $x90)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x58 $x91)))
 (let (($x51 (=> $x92 $x99)))
 (not $x51))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (not $x88)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (=> $x86 $x89)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x60 (bvneg ?x14)))
 (let (($x25 (= ?x60 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x25 true)))
 (let (($x22 (= $x27 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x42)))
 (let (($x36 (= ?x49 input.dst.llvm-%n)))
 (let (($x72 (= $x36 true)))
 (let (($x74 (= $x72 true)))
 (let (($x45 (= ?x49 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (= $x45 true)))
 (let (($x55 (= $x19 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x16)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x32 $x24)))
 (let (($x62 (and $x59 $x63)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x103 $x62)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x12)))))))
 (let (($x37 (and $x73 $x71)))
 (let (($x52 (= $x37 true)))
 (let (($x10 (= $x52 true)))
 (let (($x76 (= $x10 true)))
 (let ((?x87 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x87)))
 (let (($x21 (= ?x85 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x20 (= $x21 true)))
 (let (($x34 (= $x20 true)))
 (let (($x67 (and $x34 $x76)))
 (let (($x77 (and $x67 $x55)))
 (let (($x79 (and $x77 $x74)))
 (let (($x80 (and $x79 $x22)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x46 $x80)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x35 $x81)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x83 (and $x69 $x82)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x84 (and $x58 $x83)))
 (let (($x93 (=> $x84 $x92)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (not $x88)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (=> $x86 $x89)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let ((?x14 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x60 (bvneg ?x14)))
 (let (($x25 (= ?x60 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x25 true)))
 (let (($x22 (= $x27 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x42)))
 (let (($x36 (= ?x49 input.dst.llvm-%n)))
 (let (($x72 (= $x36 true)))
 (let (($x74 (= $x72 true)))
 (let (($x45 (= ?x49 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (= $x45 true)))
 (let (($x55 (= $x19 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x16)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x32 $x24)))
 (let (($x62 (and $x59 $x63)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x103 $x62)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x12)))))))
 (let (($x37 (and $x73 $x71)))
 (let (($x52 (= $x37 true)))
 (let (($x10 (= $x52 true)))
 (let (($x76 (= $x10 true)))
 (let ((?x87 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x87)))
 (let (($x21 (= ?x85 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x20 (= $x21 true)))
 (let (($x34 (= $x20 true)))
 (let (($x67 (and $x34 $x76)))
 (let (($x77 (and $x67 $x55)))
 (let (($x79 (and $x77 $x74)))
 (let (($x80 (and $x79 $x22)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x46 $x80)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x35 $x81)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x83 (and $x69 $x82)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x84 (and $x58 $x83)))
 (let (($x93 (=> $x84 $x92)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x89 (not $x88)))
 (let (($x90 (= $x89 false)))
 (let (($x91 (= $x90 true)))
 (let ((?x60 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x60)))
 (let (($x27 (= ?x30 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x27 true)))
 (let (($x80 (= $x22 true)))
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x34)))
 (let (($x72 (= ?x26 input.dst.llvm-%n)))
 (let (($x74 (= $x72 true)))
 (let (($x79 (= $x74 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x76)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x62 $x52)))
 (let (($x42 (and $x10 $x67)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x54 $x42)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x32)))))))
 (let (($x45 (and $x63 $x49)))
 (let (($x19 (= $x45 true)))
 (let (($x55 (= $x19 true)))
 (let (($x77 (= $x55 true)))
 (let (($x8 (= ?x26 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (= $x8 true)))
 (let (($x17 (= $x56 true)))
 (let ((?x31 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x31)))
 (let (($x94 (= ?x87 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x94 true)))
 (let (($x20 (= $x21 true)))
 (let (($x65 (and $x20 $x17)))
 (let (($x78 (and $x65 $x77)))
 (let (($x75 (and $x78 $x79)))
 (let (($x81 (and $x75 $x80)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x48 $x81)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x83 (and $x7 $x82)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x84 (and $x9 $x83)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x11 $x84)))
 (let (($x92 (=> $x86 $x91)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x89 (not $x88)))
 (let (($x90 (= $x89 false)))
 (let (($x91 (= $x90 true)))
 (let ((?x60 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x60)))
 (let (($x27 (= ?x30 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x27 true)))
 (let (($x80 (= $x22 true)))
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x34)))
 (let (($x72 (= ?x26 input.dst.llvm-%n)))
 (let (($x74 (= $x72 true)))
 (let (($x79 (= $x74 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x76)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x62 $x52)))
 (let (($x42 (and $x10 $x67)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x54 $x42)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x32)))))))
 (let (($x45 (and $x63 $x49)))
 (let (($x19 (= $x45 true)))
 (let (($x55 (= $x19 true)))
 (let (($x77 (= $x55 true)))
 (let (($x8 (= ?x26 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (= $x8 true)))
 (let (($x17 (= $x56 true)))
 (let ((?x31 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x31)))
 (let (($x94 (= ?x87 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x94 true)))
 (let (($x20 (= $x21 true)))
 (let (($x65 (and $x20 $x17)))
 (let (($x78 (and $x65 $x77)))
 (let (($x75 (and $x78 $x79)))
 (let (($x81 (and $x75 $x80)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x48 $x81)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x83 (and $x7 $x82)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x84 (and $x9 $x83)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x11 $x84)))
 (let (($x92 (=> $x86 $x91)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-i-0.L3%6%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L3%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-7.L3%6%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L3%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L3%6%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (not $x89)))
 (let (($x92 (=> $x90 $x91)))
 (let (($x93 (= $x92 true)))
 (let (($x28 (= $x93 true)))
 (let ((?x30 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x30)))
 (let (($x22 (= ?x25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x22 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x45)))
 (let (($x74 (= ?x19 input.dst.llvm-%n)))
 (let (($x79 (= $x74 true)))
 (let (($x75 (= $x79 true)))
 (let (($x55 (= ?x19 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (= $x55 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x62)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x24 $x12)))
 (let (($x37 (and $x54 $x71)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x8 $x37)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x61)))))))
 (let (($x10 (and $x18 $x52)))
 (let (($x76 (= $x10 true)))
 (let (($x67 (= $x76 true)))
 (let (($x42 (= $x67 true)))
 (let ((?x23 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x23)))
 (let (($x85 (= ?x31 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x85 true)))
 (let (($x21 (= $x94 true)))
 (let (($x49 (and $x21 $x42)))
 (let (($x36 (and $x49 $x78)))
 (let (($x14 (and $x36 $x75)))
 (let (($x82 (and $x14 $x81)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (and $x39 $x82)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x84 (and $x69 $x83)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x86 (and $x50 $x84)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x106 $x86)))
 (let (($x95 (=> $x88 $x28)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (not $x89)))
 (let (($x92 (=> $x90 $x91)))
 (let (($x93 (= $x92 true)))
 (let (($x28 (= $x93 true)))
 (let ((?x30 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x30)))
 (let (($x22 (= ?x25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x22 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x45)))
 (let (($x74 (= ?x19 input.dst.llvm-%n)))
 (let (($x79 (= $x74 true)))
 (let (($x75 (= $x79 true)))
 (let (($x55 (= ?x19 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (= $x55 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x62)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x24 $x12)))
 (let (($x37 (and $x54 $x71)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x8 $x37)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x61)))))))
 (let (($x10 (and $x18 $x52)))
 (let (($x76 (= $x10 true)))
 (let (($x67 (= $x76 true)))
 (let (($x42 (= $x67 true)))
 (let ((?x23 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x23)))
 (let (($x85 (= ?x31 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x85 true)))
 (let (($x21 (= $x94 true)))
 (let (($x49 (and $x21 $x42)))
 (let (($x36 (and $x49 $x78)))
 (let (($x14 (and $x36 $x75)))
 (let (($x82 (and $x14 $x81)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (and $x39 $x82)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x84 (and $x69 $x83)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x86 (and $x50 $x84)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x106 $x86)))
 (let (($x95 (=> $x88 $x28)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x96 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let ((?x86 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x86)))
 (let (($x90 (= ?x88 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x60)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x72 $x75)))
 (let (($x25 (and $x14 $x30)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x71 $x25)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x49)))))))
 (let (($x22 (and $x36 $x27)))
 (let (($x80 (= $x22 true)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x105)))
 (let (($x8 (= ?x103 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (= $x8 true)))
 (let (($x59 (= $x24 true)))
 (let (($x73 (= ?x103 input.dst.llvm-%n)))
 (let (($x32 (= $x73 true)))
 (let (($x18 (= $x32 true)))
 (let ((?x29 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x29)))
 (let (($x68 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x16 (= $x68 true)))
 (let (($x44 (= $x16 true)))
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (not $x87)))
 (let (($x94 (= $x85 true)))
 (let (($x21 (= $x94 true)))
 (let (($x56 (= $x21 true)))
 (let (($x61 (and $x56 $x44)))
 (let (($x26 (and $x61 $x18)))
 (let (($x63 (and $x26 $x59)))
 (let (($x83 (and $x63 $x82)))
 (let (($x93 (and $x83 $x92)))
 (let (($x46 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x28 (and $x46 $x93)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and $x35 $x28)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x47 (and $x9 $x95)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x20 (and $x58 $x47)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x34 (and $x106 $x20)))
 (let (($x99 (=> $x34 $x98)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x96 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let ((?x86 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x86)))
 (let (($x90 (= ?x88 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x90 true)))
 (let (($x92 (= $x91 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x60)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x72 $x75)))
 (let (($x25 (and $x14 $x30)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x71 $x25)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x49)))))))
 (let (($x22 (and $x36 $x27)))
 (let (($x80 (= $x22 true)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x105)))
 (let (($x8 (= ?x103 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (= $x8 true)))
 (let (($x59 (= $x24 true)))
 (let (($x73 (= ?x103 input.dst.llvm-%n)))
 (let (($x32 (= $x73 true)))
 (let (($x18 (= $x32 true)))
 (let ((?x29 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x29)))
 (let (($x68 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x16 (= $x68 true)))
 (let (($x44 (= $x16 true)))
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (not $x87)))
 (let (($x94 (= $x85 true)))
 (let (($x21 (= $x94 true)))
 (let (($x56 (= $x21 true)))
 (let (($x61 (and $x56 $x44)))
 (let (($x26 (and $x61 $x18)))
 (let (($x63 (and $x26 $x59)))
 (let (($x83 (and $x63 $x82)))
 (let (($x93 (and $x83 $x92)))
 (let (($x46 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x28 (and $x46 $x93)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and $x35 $x28)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x47 (and $x9 $x95)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x20 (and $x58 $x47)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x34 (and $x106 $x20)))
 (let (($x99 (=> $x34 $x98)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (not $x92)))
 (let (($x28 (or $x92 $x93)))
 (let (($x95 (= $x28 true)))
 (let (($x47 (= $x95 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x22)))
 (let (($x82 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let ((?x21 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x21)))
 (let (($x14 (= ?x56 input.dst.llvm-%n)))
 (let (($x60 (= $x14 true)))
 (let (($x30 (= $x60 true)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x19)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x67 $x49)))
 (let (($x77 (and $x45 $x55)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x105 $x77)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x24)))))))
 (let (($x62 (and $x10 $x36)))
 (let (($x71 (= $x62 true)))
 (let (($x72 (= $x71 true)))
 (let (($x74 (= $x72 true)))
 (let (($x17 (= ?x56 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (= $x17 true)))
 (let (($x65 (= $x29 true)))
 (let ((?x46 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x46)))
 (let (($x87 (= ?x23 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x87 true)))
 (let (($x94 (= $x85 true)))
 (let (($x68 (and $x94 $x65)))
 (let (($x79 (and $x68 $x74)))
 (let (($x25 (and $x79 $x30)))
 (let (($x86 (and $x25 $x84)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (and $x7 $x86)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x89 (and $x50 $x88)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x90 (and $x11 $x89)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x91 (and $x53 $x90)))
 (let (($x20 (=> $x91 $x47)))
 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (not $x92)))
 (let (($x28 (or $x92 $x93)))
 (let (($x95 (= $x28 true)))
 (let (($x47 (= $x95 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x22)))
 (let (($x82 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let ((?x21 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x21)))
 (let (($x14 (= ?x56 input.dst.llvm-%n)))
 (let (($x60 (= $x14 true)))
 (let (($x30 (= $x60 true)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x19)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x67 $x49)))
 (let (($x77 (and $x45 $x55)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x105 $x77)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x24)))))))
 (let (($x62 (and $x10 $x36)))
 (let (($x71 (= $x62 true)))
 (let (($x72 (= $x71 true)))
 (let (($x74 (= $x72 true)))
 (let (($x17 (= ?x56 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (= $x17 true)))
 (let (($x65 (= $x29 true)))
 (let ((?x46 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x46)))
 (let (($x87 (= ?x23 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x87 true)))
 (let (($x94 (= $x85 true)))
 (let (($x68 (and $x94 $x65)))
 (let (($x79 (and $x68 $x74)))
 (let (($x25 (and $x79 $x30)))
 (let (($x86 (and $x25 $x84)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (and $x7 $x86)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x89 (and $x50 $x88)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x90 (and $x11 $x89)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x91 (and $x53 $x90)))
 (let (($x20 (=> $x91 $x47)))
 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1494217/query
