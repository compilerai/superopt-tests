=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%5%bbentry L3%5%d L3%6%bbentry L3%8%bbentry E0%0%d
=Edges:
L0%0%d => L3%5%bbentry
L3%5%bbentry => L3%5%d
L3%5%d => L3%8%bbentry
L3%5%d => L3%6%bbentry
L3%6%bbentry => E0%0%d
L3%8%bbentry => L3%5%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%5%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%5%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-7.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L3%5%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-l-0.L3%5%bbentry
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((func_head*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%5%bbentry => L3%5%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:bb_entry
tfg_edge_comment end

=Edge: L3%5%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%5%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%6%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-u-0.E0%0%d
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-3.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-4.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%8%bbentry => L3%5%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-l2-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-n-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%tmpvar-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
6 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
7 : bvadd(5, 6) : BV:32
=spec-%var-l-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
6 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
7 : bvadd(5, 6) : BV:32
=src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%5%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-val-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*match_prod_0)*match_prod_1)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-l-1
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 15 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 16 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 17 in src.spec.foo.
REGMEM
spec-%var-l-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 18 in src.spec.foo.
REGMEM
spec-%tmpvar-3.E0%0%d
1 : input.spec-%tmpvar-3.E0%0%d : BV:32
=Loc 19 in src.spec.foo.
REGMEM
spec-%tmpvar-4.E0%0%d
1 : input.spec-%tmpvar-4.E0%0%d : BV:32
=Loc 20 in src.spec.foo.
REGMEM
spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-6.E0%0%d : BV:32
=Loc 21 in src.spec.foo.
REGMEM
spec-%tmpvar-7.E0%0%d
1 : input.spec-%tmpvar-7.E0%0%d : BV:32
=Loc 22 in src.spec.foo.
REGMEM
spec-%var-sum-0.L3%5%bbentry
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=Loc 23 in src.spec.foo.
REGMEM
spec-%var-u-0.E0%0%d
1 : input.spec-%var-u-0.E0%0%d : UNIT
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L3%5%bbentry
1 : input.spec-%tmpvar-5.L3%5%bbentry : BV:32
=Loc 25 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%5%bbentry : BV:32
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%5%bbentry
1 : input.spec-%tmpvar-0.L3%5%bbentry : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%var-l2-0.L3%5%bbentry
1 : input.spec-%var-l2-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 28 in src.spec.foo.
REGMEM
spec-%var-n-0.L3%5%bbentry
1 : input.spec-%var-n-0.L3%5%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=Loc 29 in src.spec.foo.
REGMEM
spec-%var-val-0.L3%5%bbentry
1 : input.spec-%var-val-0.L3%5%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%5%bbentry
17, 22, 
=live locs at L3%5%d
17, 22, 
=live locs at L3%6%bbentry
22, 
=live locs at L3%8%bbentry
17, 22, 
=live locs at E0%0%d
21[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 15, 16
=loc definedness at L3%5%bbentry
1, 15, 16, 17, 22, 24, 25
=loc definedness at L3%5%d
1, 15, 16, 17, 22, 24, 25
=loc definedness at L3%6%bbentry
1, 15, 16, 17, 22, 24, 25
=loc definedness at L3%8%bbentry
1, 15, 16, 17, 22, 24, 25
=loc definedness at E0%0%d
1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%5%bbentry
17
=branch affecting variable locs at L3%5%d
17
=branch affecting variable locs at L3%6%bbentry

=branch affecting variable locs at L3%8%bbentry
17
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry for loc_id 17 {input.spec-%var-l-0.L3%5%bbentry }
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry for loc_id 22 {input.spec-%var-sum-0.L3%5%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry for loc_id 24 {input.spec-%tmpvar-5.L3%5%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry for loc_id 25 {input.src.spec-ghostvar.itervar.1.L3%5%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%5%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%5%bbentry=>L3%5%d
=graph_with_edge_structures.loc_to_expr_map at L3%5%bbentry=>L3%5%d done
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%5%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d for loc_id 18 {input.spec-%tmpvar-3.E0%0%d }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d for loc_id 19 {input.spec-%tmpvar-4.E0%0%d }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d for loc_id 20 {input.spec-%tmpvar-6.E0%0%d }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d for loc_id 21 {input.spec-%tmpvar-7.E0%0%d }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d for loc_id 23 {input.spec-%var-u-0.E0%0%d }
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 17 {input.spec-%var-l-0.L3%5%bbentry }
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 22 {input.spec-%var-sum-0.L3%5%bbentry }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
2 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 25 {input.src.spec-ghostvar.itervar.1.L3%5%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%5%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 26 {input.spec-%tmpvar-0.L3%5%bbentry }
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
2 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 27 {input.spec-%var-l2-0.L3%5%bbentry }
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 28 {input.spec-%var-n-0.L3%5%bbentry }
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry for loc_id 29 {input.spec-%var-val-0.L3%5%bbentry }
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>L3%5%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%5%bbentry:
vacuous mls at L3%5%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%8%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%5%bbentry:
non-vacuous mls at L3%5%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 24
=loc_expr
140467 : input.spec-%tmpvar-5.L3%5%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 24 expr
1 : input.spec-%tmpvar-5.L3%5%bbentry : BV:32
=loc 24 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 15 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 16 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 17 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 18 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 24 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%5%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%5%bbentry=>L3%5%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%5%d=>L3%6%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%5%d=>L3%8%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>L3%5%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%5%bbentry
=spec-%var-l-0.L3%5%bbentry
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%5%bbentry=>L3%5%d
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%5%d=>L3%6%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%5%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>E0%0%d
=spec-%var-u-0.E0%0%d
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-3.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-4.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>L3%5%bbentry
=spec-%var-l2-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-n-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%tmpvar-0.L3%5%bbentry
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
2 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=spec-%var-l-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-sum-0.L3%5%bbentry
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
2 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : prod_get(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%5%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-val-0.L3%5%bbentry
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%5%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%5%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%5%bbentry=>L3%5%d
=graph_with_simplified_assets.simplified_assumes at L3%5%bbentry=>L3%5%d done
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%5%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>L3%5%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>L3%5%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%5%bbentry for src.spec.foo
=suffixpath_at_L3%5%bbentry.graph_edge_composition
(L0%0%d=>L3%5%bbentry)
=suffixpath_at_L3%5%d for src.spec.foo
=suffixpath_at_L3%5%d.graph_edge_composition
((L0%0%d=>L3%5%bbentry)*(L3%5%bbentry=>L3%5%d))
=suffixpath_at_L3%6%bbentry for src.spec.foo
=suffixpath_at_L3%6%bbentry.graph_edge_composition
((L0%0%d=>L3%5%bbentry)*((L3%5%bbentry=>L3%5%d)*(L3%5%d=>L3%6%bbentry)))
=suffixpath_at_L3%8%bbentry for src.spec.foo
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%5%bbentry)*((L3%5%bbentry=>L3%5%d)*(L3%5%d=>L3%8%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%5%bbentry)*((L3%5%bbentry=>L3%5%d)*((L3%5%d=>L3%6%bbentry)*(L3%6%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%5%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%5%bbentry done
tfg.assumes_around_edge at L3%5%bbentry=>L3%5%d
tfg.assumes_around_edge at L3%5%bbentry=>L3%5%d done
tfg.assumes_around_edge at L3%5%d=>L3%6%bbentry
tfg.assumes_around_edge at L3%5%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%5%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%5%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%6%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%8%bbentry=>L3%5%bbentry
tfg.assumes_around_edge at L3%8%bbentry=>L3%5%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lwhile.body%1%d Lwhile.cond%1%bbentry Lwhile.cond%2%d Lwhile.end%1%d E0%0%d
=Edges:
L0%0%d => Lwhile.cond%1%bbentry
Lwhile.cond%1%bbentry => Lwhile.cond%2%d
Lwhile.cond%2%d => Lwhile.body%1%d
Lwhile.cond%2%d => Lwhile.end%1%d
Lwhile.end%1%d => E0%0%d
Lwhile.body%1%d => Lwhile.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%l
1 : input.dst.llvm-%l : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lwhile.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%l : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 18 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%l : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => Lwhile.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %while.cond, !dbg !23)*  %sum.0 = phi i32 [ 0, %entry ], [ %add, %while.body ], !dbg !21)*(  %l.addr.0 = phi %struct.list* [ %l, %entry ], [ %1, %while.body ]*  br label %while.cond, !dbg !23))*  br label %while.cond, !dbg !23)*(  br label %while.cond, !dbg !23*  br label %while.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lwhile.cond%1%bbentry => Lwhile.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%tobool.Lwhile.cond%2%d
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %tobool = icmp ne %struct.list* %l.addr.0, null, !dbg !23)
tfg_edge_comment end

=Edge: Lwhile.cond%2%d => Lwhile.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %while.body, label %while.end, !dbg !23*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)
tfg_edge_comment end

=Edge: Lwhile.cond%2%d => Lwhile.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %while.body, label %while.end, !dbg !23*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)*  br i1 %tobool, label %while.body, label %while.end, !dbg !23)
tfg_edge_comment end

=Edge: Lwhile.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %sum.0, !dbg !30
tfg_edge_comment end

=Edge: Lwhile.body%1%d => Lwhile.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(6, 8) : BV:32
10 : bvadd(9, 6) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%add.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(6, 8) : BV:32
10 : bvadd(9, 6) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%next.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(6, 8) : BV:32
10 : bvadd(9, 6) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(2, 3, 4, 11, 12, 13) : BV:32
15 : bvadd(1, 14) : BV:32
=dst.llvm-%val.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 8 { 0x8 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvadd(18, 22) : BV:32
24 : bvadd(16, 23) : BV:32
25 : isgepoffset(24, 22) : BOOL
26 : and(21, 25) : BOOL
27 : 4 { 0x4 +1.0e1025 } : INT
28 : islangaligned(24, 27) : BOOL
29 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
30 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
31 : mlvar.dst.llvm.foo.1 : MEMLABEL
32 : 0 { 0x0 } : BOOL
33 : select(29, 30, 31, 24, 27, 32) : BV:32
34 : islangaligned(33, 14) : BOOL
35 : and(34, 28) : BOOL
36 : and(28, 35) : BOOL
37 : and(26, 36) : BOOL
=EdgeAssume.1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 8 { 0x8 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : bvadd(18, 1) : BV:32
23 : bvadd(16, 22) : BV:32
24 : isgepoffset(23, 1) : BOOL
25 : and(21, 24) : BOOL
26 : 4 { 0x4 +1.0e1025 } : INT
27 : islangaligned(23, 26) : BOOL
28 : and(25, 27) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24*  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24)*(  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24*  %val = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 0, !dbg !24))*((  %0 = load i32, i32* %val, align 4, !dbg !24*  %0 = load i32, i32* %val, align 4, !dbg !24)*  %add = add i32 %sum.0, %0, !dbg !26))*(((  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27*  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27)*(  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27*  %next = getelementptr inbounds %struct.list, %struct.list* %l.addr.0, i32 0, i32 1, !dbg !27))*(((((((  %1 = load %struct.list*, %struct.list** %next, align 4, !dbg !27*  %1 = load %struct.list*, %struct.list** %next, align 4, !dbg !27)*  br label %while.cond, !dbg !23, !llvm.loop !28)*  %sum.0 = phi i32 [ 0, %entry ], [ %add, %while.body ], !dbg !21)*(  %l.addr.0 = phi %struct.list* [ %l, %entry ], [ %1, %while.body ]*  br label %while.cond, !dbg !23, !llvm.loop !28))*  br label %while.cond, !dbg !23, !llvm.loop !28)*(  br label %while.cond, !dbg !23, !llvm.loop !28*  br label %while.cond, !dbg !23, !llvm.loop !28))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%l : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100002 in dst.llvm.foo.
REGMEM
dst.llvm-%l
1 : input.dst.llvm-%l : BV:32
=Loc 100024 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100036 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100037 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100038 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.llvm-%tobool.Lwhile.cond%2%d
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100060 in dst.llvm.foo.
REGMEM
dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=Loc 100061 in dst.llvm.foo.
REGMEM
dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=Loc 100062 in dst.llvm.foo.
REGMEM
dst.llvm-%next.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.foo.
REGMEM
dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=Loc 100064 in dst.llvm.foo.
REGMEM
dst.llvm-%val.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : input.dst.local_alloc_count.Lwhile.cond%1%bbentry : COUNT
=Loc 100066 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100002, 100037, 100038, 
=live locs at Lwhile.body%1%d
100037, 100038, 100041, 100044, 
=live locs at Lwhile.cond%1%bbentry
100037, 100038, 100041[f], 100044, 
=live locs at Lwhile.cond%2%d
100037, 100038, 100041[f], 100043, 100044, 
=live locs at Lwhile.end%1%d
100038, 100041[f], 
=live locs at E0%0%d
100038, 100041[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100002, 100034, 100036, 100037, 100038
=loc definedness at Lwhile.body%1%d
100002, 100034, 100036, 100037, 100038, 100041, 100043, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at Lwhile.cond%1%bbentry
100002, 100034, 100036, 100037, 100038, 100041, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at Lwhile.cond%2%d
100002, 100034, 100036, 100037, 100038, 100041, 100043, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at Lwhile.end%1%d
100002, 100034, 100036, 100037, 100038, 100041, 100043, 100044, 100045, 100046, 100047, 100065, 100066
=loc definedness at E0%0%d
100002, 100034, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100065, 100066

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100002, 100038
=branch affecting variable locs at Lwhile.body%1%d
100038
=branch affecting variable locs at Lwhile.cond%1%bbentry
100038, 100044
=branch affecting variable locs at Lwhile.cond%2%d
100038, 100043
=branch affecting variable locs at Lwhile.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100041 {input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100044 {input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100045 {input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100046 {input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100047 {input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100065 {input.dst.local_alloc_count.Lwhile.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry for loc_id 100066 {input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lwhile.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100041 {input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100044 {input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100047 {input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100048 {input.dst.llvm-%0.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100049 {input.dst.llvm-%1.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100050 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100051 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100053 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100054 {input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%add.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100056 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100057 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100058 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100060 {input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100061 {input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%next.Lwhile.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100063 {input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%val.Lwhile.cond%1%bbentry }
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.body%1%d=>Lwhile.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d for loc_id 100043 {input.dst.llvm-%tobool.Lwhile.cond%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.cond%2%d=>Lwhile.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d for loc_id 100039 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d for loc_id 100040 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d for loc_id 100042 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lwhile.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lwhile.body%1%d:
vacuous mls at Lwhile.cond%1%bbentry:
vacuous mls at Lwhile.cond%2%d:
vacuous mls at Lwhile.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lwhile.body%1%d:
non-vacuous mls at Lwhile.cond%1%bbentry:
non-vacuous mls at Lwhile.cond%2%d:
non-vacuous mls at Lwhile.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100002
=loc_expr
140357 : input.dst.llvm-%l : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100024
=loc_expr
140418 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140419 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140421 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140423 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100029
=loc_expr
140425 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140365 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140360 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100039
=loc_expr
140541 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
140542 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140543 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100043
=loc_expr
140514 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=avail_exprs_val.end
=loc 100045
=loc_expr
140544 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l : BV:32
=avail_exprs_val.end
=loc 100046
=loc_expr
140545 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100048
=loc_expr
140546 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=avail_exprs_val.end
=loc 100049
=loc_expr
140547 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100050
=loc_expr
140548 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100051
=loc_expr
140549 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100052
=loc_expr
140550 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140551 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140552 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
140554 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100057
=loc_expr
140555 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100058
=loc_expr
140556 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100059
=loc_expr
140557 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100060
=loc_expr
140558 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140559 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140560 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100064
=loc_expr
140562 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100065
=loc_expr
140563 : input.dst.local_alloc_count.Lwhile.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100066
=loc_expr
140564 : input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100042 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100042 spreled-expr
140267 : retaddr_const : BV:32
=loc 100046 expr
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=loc 100046 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100050 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100050 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100051 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100051 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100053 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100053 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100054 expr
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100054 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100056 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100056 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100057 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=loc 100057 spreled-expr
140341 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100059 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100059 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100060 expr
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=loc 100060 spreled-expr
140341 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100065 expr
1 : input.dst.local_alloc_count.Lwhile.cond%1%bbentry : COUNT
=loc 100065 spreled-expr
140365 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100066 expr
1 : input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : ROUNDING_MODE
=loc 100066 spreled-expr
140364 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100002 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100053 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lwhile.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.cond%2%d=>Lwhile.body%1%d
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.cond%2%d=>Lwhile.end%1%d
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lwhile.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lwhile.cond%1%bbentry
=dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=dst.llvm-%1.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%add.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%next.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : select(2, 3, 4, 5, 6, 7) : BV:32
9 : bvadd(1, 8) : BV:32
=dst.llvm-%val.Lwhile.cond%1%bbentry
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=dst.llvm-%tobool.Lwhile.cond%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.cond%2%d=>Lwhile.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.cond%2%d=>Lwhile.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lwhile.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lwhile.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lwhile.cond%1%bbentry assume# 0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lwhile.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume# 0
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : isgepoffset(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : and(4, 3) : BOOL
6 : and(3, 5) : BOOL
7 : 4 { 0x4 +1.0e1025 } : INT
8 : islangaligned(1, 7) : BOOL
9 : and(6, 8) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume# 1
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : and(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(6, 2) : BV:32
8 : isgepoffset(7, 6) : BOOL
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(7, 9) : BOOL
11 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
12 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
13 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
14 : 0 { 0x0 } : BOOL
15 : select(11, 12, 13, 7, 9, 14) : BV:32
16 : 8 { 0x8 +1.0e1025 } : INT
17 : islangaligned(15, 16) : BOOL
18 : and(10, 17) : BOOL
19 : and(5, 8, 10, 18) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lwhile.body%1%d=>Lwhile.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.cond%2%d=>Lwhile.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lwhile.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lwhile.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
2
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lwhile.body%1%d for dst.llvm.foo
=suffixpath_at_Lwhile.body%1%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*((Lwhile.cond%1%bbentry=>Lwhile.cond%2%d)*(Lwhile.cond%2%d=>Lwhile.body%1%d)))
=suffixpath_at_Lwhile.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lwhile.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lwhile.cond%1%bbentry)
=suffixpath_at_Lwhile.cond%2%d for dst.llvm.foo
=suffixpath_at_Lwhile.cond%2%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*(Lwhile.cond%1%bbentry=>Lwhile.cond%2%d))
=suffixpath_at_Lwhile.end%1%d for dst.llvm.foo
=suffixpath_at_Lwhile.end%1%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*((Lwhile.cond%1%bbentry=>Lwhile.cond%2%d)*(Lwhile.cond%2%d=>Lwhile.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lwhile.cond%1%bbentry)*((Lwhile.cond%1%bbentry=>Lwhile.cond%2%d)*((Lwhile.cond%2%d=>Lwhile.end%1%d)*(Lwhile.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lwhile.cond%1%bbentry
=LhsExpr
140357 : input.dst.llvm-%l : BV:32
140366 : 8 { 0x8 +1.0e1025 } : INT
140367 : islangaligned(140357, 140366) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lwhile.cond%1%bbentry done
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=LhsExpr
140517 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140598 : isgepoffset(140517, 140276) : BOOL
140275 : 1 { 0x1 } : BOOL
140600 : and(140275, 140598) : BOOL
140619 : and(140598, 140600) : BOOL
140329 : 4 { 0x4 +1.0e1025 } : INT
140623 : islangaligned(140517, 140329) : BOOL
140625 : and(140619, 140623) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry assume #1.pred
=Comment
undef-behavioursome.edge.Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140517 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140598 : isgepoffset(140517, 140276) : BOOL
140600 : and(140275, 140598) : BOOL
140341 : 4 { 0x4 +1.47e129 } : BV:32
140573 : bvadd(140341, 140517) : BV:32
140602 : isgepoffset(140573, 140341) : BOOL
140329 : 4 { 0x4 +1.0e1025 } : INT
140606 : islangaligned(140573, 140329) : BOOL
140358 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140359 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140444 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140330 : 0 { 0x0 } : BOOL
140579 : select(140358, 140359, 140444, 140573, 140329, 140330) : BV:32
140366 : 8 { 0x8 +1.0e1025 } : INT
140608 : islangaligned(140579, 140366) : BOOL
140611 : and(140606, 140608) : BOOL
140616 : and(140600, 140602, 140606, 140611) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lwhile.body%1%d=>Lwhile.cond%1%bbentry done
tfg.assumes_around_edge at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
tfg.assumes_around_edge at Lwhile.cond%1%bbentry=>Lwhile.cond%2%d done
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.body%1%d
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.body%1%d done
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.end%1%d
tfg.assumes_around_edge at Lwhile.cond%2%d=>Lwhile.end%1%d done
tfg.assumes_around_edge at Lwhile.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lwhile.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 8
=pc
Lwhile.body%1%d
=linename
line 9
=pc
Lwhile.body%2%d
=linename
line 9
=pc
Lwhile.body%3%d
=linename
line 9
=pc
Lwhile.body%4%d
=linename
line 10
=pc
Lwhile.body%5%d
=linename
line 10
=pc
Lwhile.body%6%d
=linename
line 8
=pc
Lwhile.cond%1%d
=linename
line 8
=pc
Lwhile.cond%2%d
=linename
line 8
=pc
Lwhile.end%1%d
=linename
line 12
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 3
=pc
Lwhile.body%1%d
=column_name
 at column 15
=pc
Lwhile.body%2%d
=column_name
 at column 15
=pc
Lwhile.body%3%d
=column_name
 at column 9
=pc
Lwhile.body%4%d
=column_name
 at column 12
=pc
Lwhile.body%5%d
=column_name
 at column 12
=pc
Lwhile.body%6%d
=column_name
 at column 3
=pc
Lwhile.cond%1%d
=column_name
 at column 3
=pc
Lwhile.cond%2%d
=column_name
 at column 3
=pc
Lwhile.end%1%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
line 8
=pc
Lwhile.body%1%d
=line_and_column
(line 9 at column 15)
=pc
Lwhile.body%2%d
=line_and_column
(line 9 at column 15)
=pc
Lwhile.body%3%d
=line_and_column
(line 9 at column 9)
=pc
Lwhile.body%4%d
=line_and_column
line 10
=pc
Lwhile.body%5%d
=line_and_column
line 10
=pc
Lwhile.body%6%d
=line_and_column
line 8
=pc
Lwhile.cond%1%d
=line_and_column
line 8
=pc
Lwhile.cond%2%d
=line_and_column
line 8
=pc
Lwhile.end%1%d
=line_and_column
line 12
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : L0%0%d : DSTMEM[(4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-%l : L0%0%d : l'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%sum.0 : Lwhile.cond%1%bbentry : sum'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%sum.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%l.addr.0 : Lwhile.cond%1%bbentry : l'
input.dst.llvm-%tobool : L0%0%d : not(input.dst.llvm-%l.addr.0 = 0)
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset : L0%0%d : input.dst.llvm-%l.addr.0
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%val]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset : L0%0%d : (input.dst.llvm-%l.addr.0 + 4)
input.dst.llvm-%1 : Lwhile.body%6%bbentry : l'
input.dst.llvm-%add : Lwhile.body%4%bbentry : sum'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%l.addr.0.phi.tmpvar.entry : L0%0%d : l'
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val : L0%0%d : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset
input.dst.llvm-%sum.0.phi.tmpvar.while.body : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%l.addr.0.phi.tmpvar.while.body : L0%0%d : input.dst.llvm-%1
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%sum.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%tobool.Lwhile.cond%2%d : L0%0%d : not(input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry = 0)
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : L0%0%d : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : L0%0%d : l'
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%0.Lwhile.cond%1%bbentry : L0%0%d : DSTMEM[input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-%1.Lwhile.cond%1%bbentry : L0%0%d : DSTMEM[(4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)]_4
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)
input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%next.Lwhile.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)
input.dst.llvm-%val.Lwhile.cond%1%bbentry : L0%0%d : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
input.dst.local_alloc_count.Lwhile.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%l.addr.0
=dst.llvm-%l.addr.0 loop pc: Lwhile.cond%1%d
=dst.llvm-%l.addr.0 val_scevb
=dst.llvm-%l.addr.0 val_scevb scev
=dst.llvm-%l.addr.0 val_scevb scev loop: L0%0%d
=dst.llvm-%l.addr.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%l.addr.0 val_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%l.addr.0 val_scevb scev scev_expr done
=dst.llvm-%l.addr.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.addr.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.addr.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.addr.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb
=dst.llvm-%l.addr.0 atuse_scevb scev
=dst.llvm-%l.addr.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%l.addr.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%l.addr.0 atuse_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%l.addr.0 atuse_scevb scev scev_expr done
=dst.llvm-%l.addr.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.addr.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.addr.0 atexit_scev
=dst.llvm-%l.addr.0 atexit_scev loop: L0%0%d
=dst.llvm-%l.addr.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%l.addr.0 atexit_scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%l.addr.0 atexit_scev scev_expr done
=dst.llvm-%sum.0
=dst.llvm-%sum.0 loop pc: Lwhile.cond%1%d
=dst.llvm-%sum.0 val_scevb
=dst.llvm-%sum.0 val_scevb scev
=dst.llvm-%sum.0 val_scevb scev loop: L0%0%d
=dst.llvm-%sum.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%sum.0 val_scevb scev scev_expr
2 : input.dst.llvm-%sum.0 : BV32
=dst.llvm-%sum.0 val_scevb scev scev_expr done
=dst.llvm-%sum.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sum.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sum.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sum.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb
=dst.llvm-%sum.0 atuse_scevb scev
=dst.llvm-%sum.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%sum.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sum.0 atuse_scevb scev scev_expr
2 : input.dst.llvm-%sum.0 : BV32
=dst.llvm-%sum.0 atuse_scevb scev scev_expr done
=dst.llvm-%sum.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sum.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sum.0 atexit_scev
=dst.llvm-%sum.0 atexit_scev loop: L0%0%d
=dst.llvm-%sum.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%sum.0 atexit_scev scev_expr
2 : input.dst.llvm-%sum.0 : BV32
=dst.llvm-%sum.0 atexit_scev scev_expr done
=dst.llvm-%val
=dst.llvm-%val loop pc: Lwhile.cond%1%d
=dst.llvm-%val val_scevb
=dst.llvm-%val val_scevb scev
=dst.llvm-%val val_scevb scev loop: L0%0%d
=dst.llvm-%val val_scevb scev scev_overflow_flag: 
=dst.llvm-%val val_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%val val_scevb scev scev_expr done
=dst.llvm-%val val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb
=dst.llvm-%val atuse_scevb scev
=dst.llvm-%val atuse_scevb scev loop: L0%0%d
=dst.llvm-%val atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val atuse_scevb scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%val atuse_scevb scev scev_expr done
=dst.llvm-%val atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atexit_scev
=dst.llvm-%val atexit_scev loop: L0%0%d
=dst.llvm-%val atexit_scev scev_overflow_flag: 
=dst.llvm-%val atexit_scev scev_expr
1 : input.dst.llvm-%l.addr.0 : BV32
=dst.llvm-%val atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lwhile.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
3 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lwhile.cond%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
2 : input.dst.llvm-%sum.0 : BV32
4 : scev_op_add(3, 2) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
3 : input.dst.llvm-%0 : BV32
2 : input.dst.llvm-%sum.0 : BV32
4 : scev_op_add(3, 2) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
3 : input.dst.llvm-%0 : BV32
2 : input.dst.llvm-%sum.0 : BV32
4 : scev_op_add(3, 2) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%next
=dst.llvm-%next loop pc: Lwhile.cond%1%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
5 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l.addr.0 : BV32
6 : scev_op_add(5, 1) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
5 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l.addr.0 : BV32
6 : scev_op_add(5, 1) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev
=dst.llvm-%next atexit_scev loop: L0%0%d
=dst.llvm-%next atexit_scev scev_overflow_flag: nsw
=dst.llvm-%next atexit_scev scev_expr
5 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l.addr.0 : BV32
6 : scev_op_add(5, 1) : loop L0%0%d : nsw
=dst.llvm-%next atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lwhile.cond%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
7 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
7 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
7 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lwhile.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at Lwhile.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at Lwhile.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at Lwhile.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lwhile.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lwhile.cond%1%bbentry=>Lwhile.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lwhile.cond%1%bbentry
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lwhile.end%1%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lwhile.end%1%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lwhile.end%1%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%1.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%add.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%next.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%val.Lwhile.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lwhile.body%1%d=>Lwhile.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%tobool.Lwhile.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%0.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%next.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%val.Lwhile.cond%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename ind4.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-inductive-list
=LhsExpr
1 : $spec-arg-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : $llvm-arg-0 : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : $llvm-md : ARRAY[BV:32 -> BV:8]
7 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%5%bbentry_Lwhile.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%5%bbentry_Lwhile.cond%1%bbentry
L3%5%bbentry_Lwhile.cond%1%bbentry => L3%5%bbentry_Lwhile.cond%1%bbentry
L3%5%bbentry_Lwhile.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%l : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 18 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%l : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%5%bbentry_Lwhile.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%5%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%5%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lwhile.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lwhile.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%5%bbentry_Lwhile.cond%1%bbentry => L3%5%bbentry_Lwhile.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%5%bbentry to L3%5%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%5%bbentry#{0,0}=>L3%5%d#{0,0})*((L3%5%d#{0,0}=>L3%8%bbentry#{0,0})*(L3%8%bbentry#{0,0}=>L3%5%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lwhile.cond%1%bbentry to Lwhile.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lwhile.cond%1%bbentry#{0,0}=>Lwhile.cond%2%d#{0,0})*((Lwhile.cond%2%d#{0,0}=>Lwhile.body%1%d#{0,0})*(Lwhile.body%1%d#{0,0}=>Lwhile.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%5%bbentry_Lwhile.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%5%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%5%bbentry#{0,0}=>L3%5%d#{0,0})*((L3%5%d#{0,0}=>L3%6%bbentry#{0,0})*(L3%6%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lwhile.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lwhile.cond%1%bbentry#{0,0}=>Lwhile.cond%2%d#{0,0})*((Lwhile.cond%2%d#{0,0}=>Lwhile.end%1%d#{0,0})*(Lwhile.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%l : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B2.C1
=Locs end
=Liveness in foo.A2.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L3%5%bbentry_Lwhile.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B2.C1

=Branch affecting variable locs in foo.A2.B2.C1

=Relevant Memlabels in foo.A2.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece cvc4.ce9.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin cvc4.ce9 f20ff29ee6be338ef78a430cd995b4a
=input.spec-%var-l-1
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform13 : BV:32
4 : Lambda26 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda27 : BV:32
7 : unit : UNIT
8 : 1728679935 { 0x67098fff +1.7470691e79 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 23701527 { 0x169a817 +1.82544219e131 } : COUNT
=input.spec-%var-l-0.L3%5%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform13 : BV:32
4 : Lambda26 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda27 : BV:32
7 : unit : UNIT
8 : 1728679935 { 0x67098fff +1.7470691e79 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : 23701527 { 0x169a817 +1.82544219e131 } : COUNT
=input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2149035104
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce10.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce10 13d4236a743c7d1f73e583bacbf014aa
=input.spec-%var-l-1
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform15 : BV:32
4 : Lambda30 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda31 : BV:32
7 : unit : UNIT
8 : 1192754320 { 0x4717fc90 +1.18739509e15 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1427988426
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece yices.ce11.num_edges_traversed0
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(epsilon)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin yices.ce11 c13d75f32473383649d53dc8f0a2466
=input.spec-%var-l-1
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform17 : BV:32
4 : Lambda34 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35 : BV:32
7 : unit : UNIT
8 : 429532086 { 0x199a23b6 +1.20421481e180 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2632935803
=counter_example_end
=global nodece 2 num_edges_traversed 0
=global nodece 2 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 3
=global nodece 3 nodece cvc4.ce45.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin cvc4.ce45 d38b3a82b53d39518eb6da56a45c4922
=input.spec-%var-l-1
1 : 2048 { 0x800 +1.24414e129 } : BV:32
2 : unit : UNIT
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform37 : BV:32
7 : Lambda74 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda75 : BV:32
10 : 1184614407 { 0x469bc807 +1.21704185e14 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(4, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 4, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 7 ] -> 0, [ 8; 8 ] -> 8, [ 9; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 116344715 { 0x6ef478b +1.86937081e142 } : COUNT
=input.spec-%var-l-0.L3%5%bbentry
1 : 2048 { 0x800 +1.24414e129 } : BV:32
2 : unit : UNIT
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform37 : BV:32
7 : Lambda74 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda75 : BV:32
10 : 1184614407 { 0x469bc807 +1.21704185e14 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(4, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 4, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : 116344715 { 0x6ef478b +1.86937081e142 } : COUNT
=input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%var-l-1.0
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2274076460
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3v487.ce46.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce46 c422ebb5df80176f83cbeadacef2bed4
=input.spec-%var-l-1
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
2 : unit : UNIT
3 : 3208648816 { 0xbf401870 -1086318480 -1.50074577e255 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3217014719 { 0xbfbfbfbf -1077952577 -1.49803912e0 } : BV:32
6 : 1 { 0x1 +1.0e1025 } : INT
7 : Indxform39 : BV:32
8 : Lambda78 : BV:32
9 : lambda(8, 8) : FUNCTION[BV:32 -> BV:32]
10 : Lambda79 : BV:32
11 : 1713611370 { 0x6623a26a +1.27839398e77 } : BV:32
12 : prod(11, 7) : PROD[BV:32,BV:32]
13 : sum(4, 2, 12) : SUM[UNIT,PROD[BV:32,BV:32]]
14 : lambda(10, 13) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
15 : ind(6, 6, 4, 7, 9, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(5, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 3208648816 { 0xbf401870 -1086318480 -1.50074577e255 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 64, [ 4; 4 ] -> 0, [ 5; 5 ] -> 0, [ 6; 6 ] -> 0, [ 7; 7 ] -> 145, [ 8; 3208648815 ] -> 64, [ 3208648816; 3208648816 ] -> 112, [ 3208648817; 3208648817 ] -> 24, [ 3208648818; 3208648818 ] -> 64, [ 3208648819; 3208648819 ] -> 191, [ 3208648820; 3208648820 ] -> 0, [ 3208648821; 3208648821 ] -> 0, [ 3208648822; 3208648822 ] -> 0, [ 3208648823; 3208648823 ] -> 0, [ 3208648824; 4294967295 ] -> 64, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3208648815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3208648816; 3208648819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3208648820; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3208648816 { 0xbf401870 -1086318480 -1.50074577e255 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 558708460 { 0x214d36ec +1.60323858e195 } : COUNT
=input.spec-%var-l-0.L3%5%bbentry
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
2 : unit : UNIT
3 : 3208648816 { 0xbf401870 -1086318480 -1.50074577e255 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3217014719 { 0xbfbfbfbf -1077952577 -1.49803912e0 } : BV:32
6 : 1 { 0x1 +1.0e1025 } : INT
7 : Indxform39 : BV:32
8 : Lambda78 : BV:32
9 : lambda(8, 8) : FUNCTION[BV:32 -> BV:32]
10 : Lambda79 : BV:32
11 : 1713611370 { 0x6623a26a +1.27839398e77 } : BV:32
12 : prod(11, 7) : PROD[BV:32,BV:32]
13 : sum(4, 2, 12) : SUM[UNIT,PROD[BV:32,BV:32]]
14 : lambda(10, 13) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
15 : ind(6, 6, 4, 7, 9, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(5, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 3208648816 { 0xbf401870 -1086318480 -1.50074577e255 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 3208648816 { 0xbf401870 -1086318480 -1.50074577e255 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : 558708460 { 0x214d36ec +1.60323858e195 } : COUNT
=input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3208648816 { 0xbf401870 -1086318480 -1.50074577e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3208648819 { 0xbf401873 -1086318477 -1.50074613e255 } : BV:32
=input.spec-%var-l-1.0
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 3208648816 { 0xbf401870 -1086318480 -1.50074577e255 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.0
1 : 3217014719 { 0xbfbfbfbf -1077952577 -1.49803912e0 } : BV:32
=input.spec-%var-l-1.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3471586213
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce81.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce81 e65b82ba2173a3ddb33895d074888e21
=input.spec-%var-l-1
1 : 1934949750 { 0x7354fd76 +1.66398501e103 } : BV:32
2 : unit : UNIT
3 : 16187392 { 0xf70000 +1.92968750e130 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : 1 { 0x1 +1.0e1025 } : INT
7 : Indxform61 : BV:32
8 : Lambda122 : BV:32
9 : lambda(8, 8) : FUNCTION[BV:32 -> BV:32]
10 : Lambda123 : BV:32
11 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
12 : 305626547 { 0x12377db3 +1.43352353e165 } : BV:32
13 : prod(12, 7) : PROD[BV:32,BV:32]
14 : sum(11, 2, 13) : SUM[UNIT,PROD[BV:32,BV:32]]
15 : lambda(10, 14) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
16 : ind(6, 6, 4, 7, 9, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(5, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(4, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : prod(3, 18) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
20 : sum(1, 2, 19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
21 : sym_const(20) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 16187392 { 0xf70000 +1.92968750e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 5 ] -> 0, [ 6; 6 ] -> 152, [ 7; 16187393 ] -> 0, [ 16187394; 16187394 ] -> 247, [ 16187395; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 16187391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16187392; 16187395 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 16187396; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16187392 { 0xf70000 +1.92968750e130 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 961566523 { 0x3950573b +1.62766206e243 } : COUNT
=input.spec-%var-l-0.L3%5%bbentry
1 : 1934949750 { 0x7354fd76 +1.66398501e103 } : BV:32
2 : unit : UNIT
3 : 16187392 { 0xf70000 +1.92968750e130 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : 1 { 0x1 +1.0e1025 } : INT
7 : Indxform61 : BV:32
8 : Lambda122 : BV:32
9 : lambda(8, 8) : FUNCTION[BV:32 -> BV:32]
10 : Lambda123 : BV:32
11 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
12 : 305626547 { 0x12377db3 +1.43352353e165 } : BV:32
13 : prod(12, 7) : PROD[BV:32,BV:32]
14 : sum(11, 2, 13) : SUM[UNIT,PROD[BV:32,BV:32]]
15 : lambda(10, 14) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
16 : ind(6, 6, 4, 7, 9, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(5, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(4, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : prod(3, 18) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
20 : sum(1, 2, 19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
21 : sym_const(20) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 16187392 { 0xf70000 +1.92968750e130 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 16187392 { 0xf70000 +1.92968750e130 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : 961566523 { 0x3950573b +1.62766206e243 } : COUNT
=input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16187392 { 0xf70000 +1.92968750e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 16187395 { 0xf70003 +1.92968785e130 } : BV:32
=input.spec-%var-l-1.0
1 : 1934949750 { 0x7354fd76 +1.66398501e103 } : BV:32
=input.spec-%var-l-1.2.0
1 : 16187392 { 0xf70000 +1.92968750e130 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-l-1.2.1.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=counter_example.random_seed
3342587463
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3v487.ce567.num_edges_traversed0
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(epsilon)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3v487.ce567 e4bb42e783defbcb61f072ceae355eb0
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 503316480 { 0x1e000000 +1.0e189 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform260 : BV:32
7 : Lambda521 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda522 : BV:32
10 : 475568308 { 0x1c5898b4 +1.69216012e185 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(1, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 3, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(3, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2 ] -> 0, [ 3; 3 ] -> 30, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 503316480 { 0x1e000000 +1.0e189 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform261 : BV:32
7 : Lambda523 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda524 : BV:32
10 : 62774878 { 0x3bdde5e +1.48334860e136 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(1, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 3, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(3, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.0
1 : 503316480 { 0x1e000000 +1.0e189 } : BV:32
=input.spec-%var-l-1.2.1.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.0
1 : 503316480 { 0x1e000000 +1.0e189 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
901336246
=counter_example_end
=global nodece 6 num_edges_traversed 0
=global nodece 6 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece cvc4.ce568.num_edges_traversed0
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(epsilon)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin cvc4.ce568 f4fa84d2e99396fbbb9f9f1ea11d6231
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform264 : BV:32
6 : Lambda529 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda530 : BV:32
9 : 343305362 { 0x14766c92 +1.92518830e169 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483656; 2147483659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform265 : BV:32
6 : Lambda531 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda532 : BV:32
9 : 1523516481 { 0x5acf0441 +1.61731731e54 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3225800801
=counter_example_end
=global nodece 7 num_edges_traversed 0
=global nodece 7 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece yices.ce569.num_edges_traversed0
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin yices.ce569 83b1035557c28a5ddbeb4af8d690
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform268 : BV:32
6 : Lambda537 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda538 : BV:32
9 : 1407634775 { 0x53e6cd57 +1.80314147e40 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3719299043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3719299044; 3719299047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3719299048; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3719299044 { 0xddafffe4 -575668252 -1.37499666e60 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform269 : BV:32
6 : Lambda539 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda540 : BV:32
9 : 252138088 { 0xf075268 +1.5720233e159 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 967835616 { 0x39afffe0 +1.37499618e244 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3719299044 { 0xddafffe4 -575668252 -1.37499666e60 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3719299047 { 0xddafffe7 -575668249 -1.37499701e60 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
249561108
=counter_example_end
=global nodece 8 num_edges_traversed 0
=global nodece 8 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3v487.ce649.num_edges_traversed1
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3v487.ce649 43616274e5a0b3c9d1dc4f7af1bac863
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform332 : BV:32
7 : Lambda665 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda666 : BV:32
10 : 1762429074 { 0x690c8892 +1.9791779e83 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(1, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 4, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-sum-0.L3%5%bbentry
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 1346466198 { 0x50417196 +1.51127886e33 } : BV:32
=input.spec-%var-l2-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform344 : BV:32
5 : Lambda689 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda690 : BV:32
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : 1466146024 { 0x57639ce8 +1.77822589e47 } : BV:32
10 : prod(9, 4) : PROD[BV:32,BV:32]
11 : sum(8, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(7, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 3, 1, 4, 6, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%5%bbentry
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.dst.llvm-%l
1 : 13 { 0xd +1.154e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 10 ] -> 0, [ 11; 11 ] -> 184, [ 12; 15 ] -> 0, [ 16; 16 ] -> 184, [ 17; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform347 : BV:32
5 : Lambda695 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda696 : BV:32
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : 1466146024 { 0x57639ce8 +1.77822589e47 } : BV:32
10 : prod(9, 4) : PROD[BV:32,BV:32]
11 : sum(8, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(7, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 3, 1, 4, 6, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%5%bbentry
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : unit : UNIT
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform348 : BV:32
6 : Lambda697 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda698 : BV:32
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : 1466146024 { 0x57639ce8 +1.77822589e47 } : BV:32
11 : prod(10, 5) : PROD[BV:32,BV:32]
12 : sum(9, 3, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(8, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(4, 4, 2, 5, 7, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(2, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(2, 3, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(1, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-val-0.L3%5%bbentry
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 2100149529 { 0x7d2dbd19 +1.35733330e123 } : BV:32
=input.dst.llvm-%tobool.Lwhile.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lwhile.cond%1%bbentry
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lwhile.cond%1%bbentry
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.dst.llvm-%next.Lwhile.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%val.Lwhile.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.0
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=counter_example.random_seed
848906921
=counter_example_end
=global nodece 9 num_edges_traversed 1
=global nodece 9 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece cvc4.ce650.num_edges_traversed1
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin cvc4.ce650 f2df29b7c66d10cb9ea5f8cfef771
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform336 : BV:32
7 : Lambda673 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda674 : BV:32
10 : 1008462617 { 0x3c1beb19 +1.21811211e249 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(4, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 4, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-sum-0.L3%5%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 1994986650 { 0x76e9149a +1.82094120e110 } : BV:32
=input.spec-%var-l2-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform352 : BV:32
5 : Lambda705 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda706 : BV:32
8 : 1443263339 { 0x5606736b +1.5039727e45 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 3, 1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L3%5%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 4 ] -> 1, [ 5; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 1, [ 2147483649; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483656; 2147483659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform355 : BV:32
5 : Lambda711 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda712 : BV:32
8 : 1443263339 { 0x5606736b +1.5039727e45 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 3, 1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%5%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : unit : UNIT
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform356 : BV:32
6 : Lambda713 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda714 : BV:32
9 : 1443263339 { 0x5606736b +1.5039727e45 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(2, 3, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 2, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(2, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(2, 3, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(1, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-val-0.L3%5%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 1889679015 { 0x70a236a7 +1.26729285e98 } : BV:32
=input.dst.llvm-%tobool.Lwhile.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.intermediate.gepoffset.2.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%80e59119968041f08c268cb7ba21c5.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.1.total_offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.2.total_offset.Lwhile.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.gepoffset.3.total_offset.Lwhile.cond%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%e510672f36773ef3daa54ec6ffbe8630.intermediate.gepoffset.1.offset.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.while.body.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%next.Lwhile.cond%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%val.Lwhile.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
1072136292
=counter_example_end
=global nodece 10 num_edges_traversed 1
=global nodece 10 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece cvc4.ce899.num_edges_traversed0
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(epsilon)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin cvc4.ce899 598a74ff8b7e8493c1faac93543727c
=input.spec-%var-l-1
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform676 : BV:32
4 : Lambda1360 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1361 : BV:32
7 : unit : UNIT
8 : 1616024188 { 0x6052927c +1.64509534e65 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2097151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2097152; 2097155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2097156; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform677 : BV:32
4 : Lambda1362 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1363 : BV:32
7 : unit : UNIT
8 : 319278735 { 0x1307ce8f +1.6099116e167 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2097155 { 0x200003 +1.25000035e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1150696044
=counter_example_end
=global nodece 11 num_edges_traversed 0
=global nodece 11 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3v487.ce900.num_edges_traversed0
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce900 9f4b6a8a58646ce250fee207bbca2ba
=input.spec-%var-l-1
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform680 : BV:32
4 : Lambda1368 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1369 : BV:32
7 : unit : UNIT
8 : 49582243 { 0x2f490a3 +1.91066396e134 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 256; 259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 260; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform681 : BV:32
4 : Lambda1370 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1371 : BV:32
7 : unit : UNIT
8 : 2010608799 { 0x77d7749f +1.68324649e112 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 259 { 0x103 +1.3087e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3627782844
=counter_example_end
=global nodece 12 num_edges_traversed 0
=global nodece 12 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece yices.ce901.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin yices.ce901 73804b2549cd811e58b957dbe8cd2f5
=input.spec-%var-l-1
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform684 : BV:32
4 : Lambda1376 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1377 : BV:32
7 : unit : UNIT
8 : 1085447363 { 0x40b29cc3 +1.39540898e2 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform685 : BV:32
4 : Lambda1378 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1379 : BV:32
7 : unit : UNIT
8 : 1810718065 { 0x6bed5d71 +1.85441410e88 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1382817958
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L3%5%bbentry_Lwhile.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece cvc4.ce1066.num_edges_traversed2
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin cvc4.ce1066 c1e570a0b1ae9f1f3aa33f60f2383
=retaddr_const
1 : 764415287 { 0x2d900d37 +1.12540328e220 } : BV:32
=input.spec-%var-l-1
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform13 : BV:32
4 : Lambda26 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda27 : BV:32
7 : unit : UNIT
8 : 1728679935 { 0x67098fff +1.7470691e79 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform13 : BV:32
4 : Lambda26 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda27 : BV:32
7 : unit : UNIT
8 : 1728679935 { 0x67098fff +1.7470691e79 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%tobool.Lwhile.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 764415287 { 0x2d900d37 +1.12540328e220 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 409403430 { 0x18670026 +1.80469202e177 } : BV:32
=input.dst.llvm-%l.addr.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.phi.tmpvar.entry.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lwhile.cond%1%bbentry
1 : 23701527 { 0x169a817 +1.82544219e131 } : COUNT
=input.dst.cur_rounding_mode.Lwhile.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%var-l-1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2383973432
=counter_example_end
=global nodece 14 num_edges_traversed 2
=global nodece 14 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 15
=global nodece 15 nodece z3v487.ce1012.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3v487.ce1012 cfda5ab55ab7df5651a3a39559bee918
=retaddr_const
1 : 2074238143 { 0x7ba25cbf +1.26845538e120 } : BV:32
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform332 : BV:32
7 : Lambda665 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda666 : BV:32
10 : 1762429074 { 0x690c8892 +1.9791779e83 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(1, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 4, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 1346466198 { 0x50417196 +1.51127886e33 } : BV:32
=input.spec-%tmpvar-3.E0%0%d
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.spec-%tmpvar-4.E0%0%d
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.spec-%tmpvar-6.E0%0%d
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.E0%0%d
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.dst.llvm-%l
1 : 13 { 0xd +1.154e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 10 ] -> 0, [ 11; 11 ] -> 184, [ 12; 15 ] -> 0, [ 16; 16 ] -> 184, [ 17; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform347 : BV:32
5 : Lambda695 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda696 : BV:32
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : 1466146024 { 0x57639ce8 +1.77822589e47 } : BV:32
10 : prod(9, 4) : PROD[BV:32,BV:32]
11 : sum(8, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(7, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 3, 1, 4, 6, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 2100149529 { 0x7d2dbd19 +1.35733330e123 } : BV:32
=input.dst.llvm-%tobool.Lwhile.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 2074238143 { 0x7ba25cbf +1.26845538e120 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 288123634 { 0x112c6af2 +1.34701371e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.0
1 : 3087007744 { 0xb8000000 -1207959552 -1.0e241 } : BV:32
=counter_example.random_seed
2265815969
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 16
=global nodece 16 nodece cvc4.ce994.num_edges_traversed2
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(epsilon)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin cvc4.ce994 657538a4adc9fa4536345319c8f64
=retaddr_const
1 : 8473807 { 0x814ccf +1.1015651e130 } : BV:32
=input.spec-%var-l-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform336 : BV:32
7 : Lambda673 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda674 : BV:32
10 : 1008462617 { 0x3c1beb19 +1.21811211e249 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(4, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 4, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(4, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-sum-0.L3%5%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%5%bbentry
1 : 1994986650 { 0x76e9149a +1.82094120e110 } : BV:32
=input.spec-%tmpvar-3.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-6.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-u-0.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-5.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 4 ] -> 1, [ 5; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 1, [ 2147483649; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483656; 2147483659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform355 : BV:32
5 : Lambda711 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda712 : BV:32
8 : 1443263339 { 0x5606736b +1.5039727e45 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 3, 1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lwhile.cond%1%bbentry
1 : 1889679015 { 0x70a236a7 +1.26729285e98 } : BV:32
=input.dst.llvm-%tobool.Lwhile.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 8473807 { 0x814ccf +1.1015651e130 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1084130926 { 0x409e866e +1.23847746e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
=input.spec-%var-l-1.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-1.2.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-1.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%5%bbentry.2.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=counter_example.random_seed
4153180348
=counter_example_end
=global nodece 16 num_edges_traversed 2
=global nodece 16 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 6
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 7
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 8
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point yices.ce11
=inductive-invariants point_set point yices.ce11 expr point yices.ce11
=inductive-invariants point_set point yices.ce11 expr point yices.ce11 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce11 expr point yices.ce11 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point yices.ce11 expr point yices.ce11 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce11 expr point yices.ce11 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce11 expr point yices.ce11 done
=inductive-invariants point_set point cvc4.ce9
=inductive-invariants point_set point cvc4.ce9 expr point cvc4.ce9
=inductive-invariants point_set point cvc4.ce9 expr point cvc4.ce9 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce9 expr point cvc4.ce9 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point cvc4.ce9 expr point cvc4.ce9 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce9 expr point cvc4.ce9 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce9 expr point cvc4.ce9 done
=inductive-invariants point_set point z3v487.ce10
=inductive-invariants point_set point z3v487.ce10 expr point z3v487.ce10
=inductive-invariants point_set point z3v487.ce10 expr point z3v487.ce10 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10 expr point z3v487.ce10 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point z3v487.ce10 expr point z3v487.ce10 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10 expr point z3v487.ce10 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10 expr point z3v487.ce10 done
=inductive-invariants point_set point yices.ce140
=inductive-invariants point_set point yices.ce140 expr point yices.ce140
=inductive-invariants point_set point yices.ce140 expr point yices.ce140 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce140 expr point yices.ce140 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point yices.ce140 expr point yices.ce140 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce140 expr point yices.ce140 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce140 expr point yices.ce140 done
=inductive-invariants point_set point cvc4.ce138
=inductive-invariants point_set point cvc4.ce138 expr point cvc4.ce138
=inductive-invariants point_set point cvc4.ce138 expr point cvc4.ce138 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce138 expr point cvc4.ce138 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point cvc4.ce138 expr point cvc4.ce138 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce138 expr point cvc4.ce138 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce138 expr point cvc4.ce138 done
=inductive-invariants point_set point z3v487.ce139
=inductive-invariants point_set point z3v487.ce139 expr point z3v487.ce139
=inductive-invariants point_set point z3v487.ce139 expr point z3v487.ce139 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce139 expr point z3v487.ce139 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point z3v487.ce139 expr point z3v487.ce139 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce139 expr point z3v487.ce139 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce139 expr point z3v487.ce139 done
=inductive-invariants point_set point yices.ce47
=inductive-invariants point_set point yices.ce47 expr point yices.ce47
=inductive-invariants point_set point yices.ce47 expr point yices.ce47 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce47 expr point yices.ce47 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point yices.ce47 expr point yices.ce47 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce47 expr point yices.ce47 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
2147483648
=inductive-invariants point_set point yices.ce47 expr point yices.ce47 done
=inductive-invariants point_set point cvc4.ce45
=inductive-invariants point_set point cvc4.ce45 expr point cvc4.ce45
=inductive-invariants point_set point cvc4.ce45 expr point cvc4.ce45 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce45 expr point cvc4.ce45 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point cvc4.ce45 expr point cvc4.ce45 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce45 expr point cvc4.ce45 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
8
=inductive-invariants point_set point cvc4.ce45 expr point cvc4.ce45 done
=inductive-invariants point_set point z3v487.ce46
=inductive-invariants point_set point z3v487.ce46 expr point z3v487.ce46
=inductive-invariants point_set point z3v487.ce46 expr point z3v487.ce46 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce46 expr point z3v487.ce46 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point z3v487.ce46 expr point z3v487.ce46 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce46 expr point z3v487.ce46 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
3208648816
=inductive-invariants point_set point z3v487.ce46 expr point z3v487.ce46 done
=inductive-invariants point_set point yices.ce83
=inductive-invariants point_set point yices.ce83 expr point yices.ce83
=inductive-invariants point_set point yices.ce83 expr point yices.ce83 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce83 expr point yices.ce83 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point yices.ce83 expr point yices.ce83 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce83 expr point yices.ce83 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
1073741824
=inductive-invariants point_set point yices.ce83 expr point yices.ce83 done
=inductive-invariants point_set point z3v487.ce81
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
16187392
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 done
=inductive-invariants point_set point cvc4.ce82
=inductive-invariants point_set point cvc4.ce82 expr point cvc4.ce82
=inductive-invariants point_set point cvc4.ce82 expr point cvc4.ce82 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce82 expr point cvc4.ce82 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point cvc4.ce82 expr point cvc4.ce82 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce82 expr point cvc4.ce82 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
131072
=inductive-invariants point_set point cvc4.ce82 expr point cvc4.ce82 done
=inductive-invariants point_set point cvc4.ce589
=inductive-invariants point_set point cvc4.ce589 expr point cvc4.ce589
=inductive-invariants point_set point cvc4.ce589 expr point cvc4.ce589 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce589 expr point cvc4.ce589 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point cvc4.ce589 expr point cvc4.ce589 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce589 expr point cvc4.ce589 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce589 expr point cvc4.ce589 done
=inductive-invariants point_set point z3v487.ce599
=inductive-invariants point_set point z3v487.ce599 expr point z3v487.ce599
=inductive-invariants point_set point z3v487.ce599 expr point z3v487.ce599 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce599 expr point z3v487.ce599 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point z3v487.ce599 expr point z3v487.ce599 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce599 expr point z3v487.ce599 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce599 expr point z3v487.ce599 done
=inductive-invariants point_set point yices.ce579
=inductive-invariants point_set point yices.ce579 expr point yices.ce579
=inductive-invariants point_set point yices.ce579 expr point yices.ce579 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce579 expr point yices.ce579 val 2 for input.spec-%var-sum-0.L3%5%bbentry
0
=inductive-invariants point_set point yices.ce579 expr point yices.ce579 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce579 expr point yices.ce579 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce579 expr point yices.ce579 done
=inductive-invariants point_set point cvc4.ce650
=inductive-invariants point_set point cvc4.ce650 expr point cvc4.ce650
=inductive-invariants point_set point cvc4.ce650 expr point cvc4.ce650 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point cvc4.ce650 expr point cvc4.ce650 val 2 for input.spec-%var-sum-0.L3%5%bbentry
1
=inductive-invariants point_set point cvc4.ce650 expr point cvc4.ce650 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
1
=inductive-invariants point_set point cvc4.ce650 expr point cvc4.ce650 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point cvc4.ce650 expr point cvc4.ce650 done
=inductive-invariants point_set point yices.ce651
=inductive-invariants point_set point yices.ce651 expr point yices.ce651
=inductive-invariants point_set point yices.ce651 expr point yices.ce651 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point yices.ce651 expr point yices.ce651 val 2 for input.spec-%var-sum-0.L3%5%bbentry
2147483648
=inductive-invariants point_set point yices.ce651 expr point yices.ce651 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
2147483648
=inductive-invariants point_set point yices.ce651 expr point yices.ce651 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point yices.ce651 expr point yices.ce651 done
=inductive-invariants point_set point z3v487.ce649
=inductive-invariants point_set point z3v487.ce649 expr point z3v487.ce649
=inductive-invariants point_set point z3v487.ce649 expr point z3v487.ce649 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce649 expr point z3v487.ce649 val 2 for input.spec-%var-sum-0.L3%5%bbentry
3087007744
=inductive-invariants point_set point z3v487.ce649 expr point z3v487.ce649 val 3 for input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry
3087007744
=inductive-invariants point_set point z3v487.ce649 expr point z3v487.ce649 val 4 for input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce649 expr point z3v487.ce649 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%5%bbentry_Lwhile.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%5%bbentry_Lwhile.cond%1%bbentry for reason inductive-invariants
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: cvc4.ce9
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 3 exprs
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-3-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:3
=RhsExpr
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 2 { 0x2 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:3
=predicate done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.3
=LhsExpr
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=predicate done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: cvc4.ce9
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: cvc4.ce45
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: cvc4.ce650
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce649
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=3; number of visited CEs=4; number of preds=2
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 2->4294967295; 3->1; 4->0; 
4
-2147483648->0; 2->0; 3->0; 4->536870912; 
matrix done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 4
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: cvc4.ce9
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: cvc4.ce45
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce46
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce81
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based name spec-coupling-invariants
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 5
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 6
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 7
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 8
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 9
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 10
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based predicate_set done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based is assumed eqclass : 0
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based visited ce 0: cvc4.ce9
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based visited ces set done
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants smallest_point_cover 3 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L3%5%bbentry_Lwhile.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-7.E0%0%d : BV:32
2 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%5%bbentry_Lwhile.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : implies(3, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%5%bbentry_Lwhile.cond%1%bbentry.to_pcL3%5%bbentry_Lwhile.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
5 : isgepoffset(2, 1) : BOOL
6 : 1 { 0x1 } : BOOL
7 : and(6, 5) : BOOL
8 : and(5, 7) : BOOL
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvadd(12, 2) : BV:32
14 : isgepoffset(13, 12) : BOOL
15 : islangaligned(13, 9) : BOOL
16 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
17 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
18 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
19 : 0 { 0x0 } : BOOL
20 : select(16, 17, 18, 13, 9, 19) : BV:32
21 : 8 { 0x8 +1.0e1025 } : INT
22 : islangaligned(20, 21) : BOOL
23 : and(15, 22) : BOOL
24 : and(7, 14, 15, 23) : BOOL
25 : and(11, 24) : BOOL
26 : eq(25, 6) : BOOL
27 : implies(4, 26) : BOOL
28 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 1 { 0x1 +1.0e1025 } : INT
30 : sum_is(28, 29) : BOOL
31 : implies(4, 30) : BOOL
32 : implies(27, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%5%bbentry_Lwhile.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
4 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
5 : 0 { 0x0 +1.0e1025 } : INT
6 : sum_is(4, 5) : BOOL
7 : implies(3, 6) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-7.E0%0%d : BV:32
2 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%5%bbentry_Lwhile.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-sum-0.L3%5%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-l-1 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-l-0.L3%5%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lwhile.cond%1%bbentry
=LhsExpr
140357 : input.dst.llvm-%l : BV:32
140366 : 8 { 0x8 +1.0e1025 } : INT
140367 : islangaligned(140357, 140366) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%5%bbentry_Lwhile.cond%1%bbentry done
cg.assumes_around_edge at L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry
cg.assumes_around_edge at L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry assume #0
cg.assumes_around_edge at L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140517 : input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry : BV:32
140569 : eq(140276, 140517) : BOOL
140570 : not(140569) : BOOL
140598 : isgepoffset(140517, 140276) : BOOL
140275 : 1 { 0x1 } : BOOL
140600 : and(140275, 140598) : BOOL
140619 : and(140598, 140600) : BOOL
140329 : 4 { 0x4 +1.0e1025 } : INT
140623 : islangaligned(140517, 140329) : BOOL
140625 : and(140619, 140623) : BOOL
140341 : 4 { 0x4 +1.47e129 } : BV:32
140573 : bvadd(140341, 140517) : BV:32
140602 : isgepoffset(140573, 140341) : BOOL
140606 : islangaligned(140573, 140329) : BOOL
140358 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140359 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140444 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140330 : 0 { 0x0 } : BOOL
140579 : select(140358, 140359, 140444, 140573, 140329, 140330) : BV:32
140366 : 8 { 0x8 +1.0e1025 } : INT
140608 : islangaligned(140579, 140366) : BOOL
140611 : and(140606, 140608) : BOOL
140616 : and(140600, 140602, 140606, 140611) : BOOL
142889 : and(140625, 140616) : BOOL
142899 : eq(142889, 140275) : BOOL
142903 : implies(140570, 142899) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%5%bbentry_Lwhile.cond%1%bbentry=>L3%5%bbentry_Lwhile.cond%1%bbentry done
cg.assumes_around_edge at L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%5%bbentry_Lwhile.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%5%bbentry_Lwhile.cond%1%bbentry
m_dst_rank: 1, m_src_rank: 0, m_spec_rank: 5
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
